- en: Using the legacy ‘backref’ relationship parameter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用遗留的 ‘backref’ 关系参数
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/backref.html](https://docs.sqlalchemy.org/en/20/orm/backref.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/backref.html](https://docs.sqlalchemy.org/en/20/orm/backref.html)
- en: Note
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`relationship.backref`](relationship_api.html#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship") keyword should be considered legacy, and use of
    [`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship") with explicit [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs should be preferred. Using individual
    [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    constructs provides advantages including that both ORM mapped classes will include
    their attributes up front as the class is constructed, rather than as a deferred
    step, and configuration is more straightforward as all arguments are explicit.
    New [**PEP 484**](https://peps.python.org/pep-0484/) features in SQLAlchemy 2.0
    also take advantage of attributes being explicitly present in source code rather
    than using dynamic attribute generation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 应考虑使用遗留的 [`relationship.backref`](relationship_api.html#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship") 关键字，并且应优先使用明确的 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 构造与 [`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship")。使用单独的 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 构造提供了诸如 ORM 映射类都将其属性提前包括在类构造时等优点，而不是作为延迟步骤，并且配置更为直观，因为所有参数都是明确的。SQLAlchemy
    2.0 中的新 [**PEP 484**](https://peps.python.org/pep-0484/) 特性还利用了属性在源代码中明确存在而不是使用动态属性生成。
- en: See also
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: 'For general information about bidirectional relationships, see the following
    sections:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有关双向关系的一般信息，请参阅以下部分：
- en: '[Working with ORM Related Objects](../tutorial/orm_related_objects.html#tutorial-orm-related-objects)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial),
    presents an overview of bi-directional relationship configuration and behaviors
    using [`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship")'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[与 ORM 相关对象一起工作](../tutorial/orm_related_objects.html#tutorial-orm-related-objects)
    - 在 [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial) 中，介绍了使用 [`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship") 进行双向关联配置和行为的概览。'
- en: '[Behavior of save-update cascade with bi-directional relationships](cascades.html#back-populates-cascade)
    - notes on bi-directional [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") behavior regarding [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") cascade behaviors.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[双向关系中保存更新级联的行为](cascades.html#back-populates-cascade) - 关于双向 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 行为在 [`Session`](session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 级联行为方面的注意事项。'
- en: '[`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship")'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship")'
- en: The [`relationship.backref`](relationship_api.html#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship") keyword argument on the [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") construct allows the automatic generation of a
    new [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    that will be automatically be added to the ORM mapping for the related class.
    It will then be placed into a [`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship") configuration against the current [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") being configured, with both [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs referring to each other.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")构造函数中的[`relationship.backref`](relationship_api.html#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship")关键字参数允许自动生成一个新的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")，该关系将自动添加到相关类的ORM映射中。然后，它将被放置到当前正在配置的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的[`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship")配置中，其中两个[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")构造相互引用。
- en: 'Starting with the following example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以以下示例开始：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The above configuration establishes a collection of `Address` objects on `User`
    called `User.addresses`. It also establishes a `.user` attribute on `Address`
    which will refer to the parent `User` object. Using [`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship") it’s equivalent to the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以上配置在`User`上建立了一个名为`User.addresses`的`Address`对象集合。它还在`Address`上建立了一个`.user`属性，该属性将指向父`User`对象。使用[`relationship.back_populates`](relationship_api.html#sqlalchemy.orm.relationship.params.back_populates
    "sqlalchemy.orm.relationship")等效于以下操作：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The behavior of the `User.addresses` and `Address.user` relationships is that
    they now behave in a **bi-directional** way, indicating that changes on one side
    of the relationship impact the other. An example and discussion of this behavior
    is in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)
    at [Working with ORM Related Objects](../tutorial/orm_related_objects.html#tutorial-orm-related-objects).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`User.addresses`和`Address.user`关系的行为是以**双向**方式进行的，表示关系的一侧发生变化会影响另一侧。有关此行为的示例和讨论，请参阅[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)的[使用ORM相关对象](../tutorial/orm_related_objects.html#tutorial-orm-related-objects)部分。'
- en: Backref Default Arguments
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反向引用默认参数
- en: 'Since [`relationship.backref`](relationship_api.html#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship") generates a whole new [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), the generation process by default will attempt
    to include corresponding arguments in the new [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") that correspond to the original arguments. As an
    example, below is a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") that includes a [custom join condition](join_conditions.html#relationship-configure-joins)
    which also includes the [`relationship.backref`](relationship_api.html#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship") keyword:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[`relationship.backref`](relationship_api.html#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship")会生成一个全新的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")，默认情况下，生成过程将尝试在新的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")中包含对应于原始参数的相应参数。举例说明，下面是一个包含[自定义连接条件](join_conditions.html#relationship-configure-joins)的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")，该条件还包括[`relationship.backref`](relationship_api.html#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship")关键字：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When the “backref” is generated, the [`relationship.primaryjoin`](relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") condition is copied to the new [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") as well:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当生成“backref”时，[`relationship.primaryjoin`](relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship")条件也被复制到新的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")中：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Other arguments that are transferrable include the [`relationship.secondary`](relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship") parameter that refers to a many-to-many association
    table, as well as the “join” arguments [`relationship.primaryjoin`](relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") and [`relationship.secondaryjoin`](relationship_api.html#sqlalchemy.orm.relationship.params.secondaryjoin
    "sqlalchemy.orm.relationship"); “backref” is smart enough to know that these two
    arguments should also be “reversed” when generating the opposite side.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 其他可转移的参数包括[`relationship.secondary`](relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship")参数，它指的是多对多关联表，以及“join”参数[`relationship.primaryjoin`](relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship")和[`relationship.secondaryjoin`](relationship_api.html#sqlalchemy.orm.relationship.params.secondaryjoin
    "sqlalchemy.orm.relationship")；“backref”足够智能，知道在生成相反的一侧时这两个参数也应该被“翻转”。
- en: Specifying Backref Arguments
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定反向引用参数
- en: 'Lots of other arguments for a “backref” are not implicit, and include arguments
    like [`relationship.lazy`](relationship_api.html#sqlalchemy.orm.relationship.params.lazy
    "sqlalchemy.orm.relationship"), [`relationship.remote_side`](relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship"), [`relationship.cascade`](relationship_api.html#sqlalchemy.orm.relationship.params.cascade
    "sqlalchemy.orm.relationship") and [`relationship.cascade_backrefs`](relationship_api.html#sqlalchemy.orm.relationship.params.cascade_backrefs
    "sqlalchemy.orm.relationship"). For this case we use the [`backref()`](relationship_api.html#sqlalchemy.orm.backref
    "sqlalchemy.orm.backref") function in place of a string; this will store a specific
    set of arguments that will be transferred to the new [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") when generated:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '很多其他用于“backref”的参数都不是隐含的，包括像[`relationship.lazy`](relationship_api.html#sqlalchemy.orm.relationship.params.lazy
    "sqlalchemy.orm.relationship")、[`relationship.remote_side`](relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship")、[`relationship.cascade`](relationship_api.html#sqlalchemy.orm.relationship.params.cascade
    "sqlalchemy.orm.relationship")和[`relationship.cascade_backrefs`](relationship_api.html#sqlalchemy.orm.relationship.params.cascade_backrefs
    "sqlalchemy.orm.relationship")等参数。对于这种情况，我们使用[`backref()`](relationship_api.html#sqlalchemy.orm.backref
    "sqlalchemy.orm.backref")函数代替字符串；这将存储一组特定的参数，这些参数将在生成新的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")时传递： '
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Where above, we placed a `lazy="joined"` directive only on the `Address.user`
    side, indicating that when a query against `Address` is made, a join to the `User`
    entity should be made automatically which will populate the `.user` attribute
    of each returned `Address`. The [`backref()`](relationship_api.html#sqlalchemy.orm.backref
    "sqlalchemy.orm.backref") function formatted the arguments we gave it into a form
    that is interpreted by the receiving [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") as additional arguments to be applied to the new
    relationship it creates.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们只在`Address.user`一侧放置了`lazy="joined"`指令，这表示当对`Address`进行查询时，应自动执行与`User`实体的连接，这将填充每个返回的`Address`的`.user`属性。
    [`backref()`](relationship_api.html#sqlalchemy.orm.backref "sqlalchemy.orm.backref")函数将我们给定的参数格式化成一个由接收的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")解释的形式，作为应用于它创建的新关系的附加参数。
- en: Backref Default Arguments
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反向引用默认参数
- en: 'Since [`relationship.backref`](relationship_api.html#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship") generates a whole new [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), the generation process by default will attempt
    to include corresponding arguments in the new [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") that correspond to the original arguments. As an
    example, below is a [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") that includes a [custom join condition](join_conditions.html#relationship-configure-joins)
    which also includes the [`relationship.backref`](relationship_api.html#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship") keyword:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于[`relationship.backref`](relationship_api.html#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship")生成了一个全新的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")，默认情况下生成过程将尝试在新的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")中包含与原始参数相对应的参数。例如，下面是一个包含[自定义连接条件](join_conditions.html#relationship-configure-joins)的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")示例，该连接条件还包括[`relationship.backref`](relationship_api.html#sqlalchemy.orm.relationship.params.backref
    "sqlalchemy.orm.relationship")关键字：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When the “backref” is generated, the [`relationship.primaryjoin`](relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") condition is copied to the new [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") as well:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当生成“反向引用”时，[`relationship.primaryjoin`](relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship")条件也会被复制到新的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")中：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Other arguments that are transferrable include the [`relationship.secondary`](relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship") parameter that refers to a many-to-many association
    table, as well as the “join” arguments [`relationship.primaryjoin`](relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship") and [`relationship.secondaryjoin`](relationship_api.html#sqlalchemy.orm.relationship.params.secondaryjoin
    "sqlalchemy.orm.relationship"); “backref” is smart enough to know that these two
    arguments should also be “reversed” when generating the opposite side.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 可传递的其他参数包括指向多对多关联表的[`relationship.secondary`](relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship")参数，以及“join”参数[`relationship.primaryjoin`](relationship_api.html#sqlalchemy.orm.relationship.params.primaryjoin
    "sqlalchemy.orm.relationship")和[`relationship.secondaryjoin`](relationship_api.html#sqlalchemy.orm.relationship.params.secondaryjoin
    "sqlalchemy.orm.relationship")；“反向引用”足够智能，可以知道在生成相反方向时这两个参数也应该“反转”。
- en: Specifying Backref Arguments
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定反向引用参数
- en: 'Lots of other arguments for a “backref” are not implicit, and include arguments
    like [`relationship.lazy`](relationship_api.html#sqlalchemy.orm.relationship.params.lazy
    "sqlalchemy.orm.relationship"), [`relationship.remote_side`](relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship"), [`relationship.cascade`](relationship_api.html#sqlalchemy.orm.relationship.params.cascade
    "sqlalchemy.orm.relationship") and [`relationship.cascade_backrefs`](relationship_api.html#sqlalchemy.orm.relationship.params.cascade_backrefs
    "sqlalchemy.orm.relationship"). For this case we use the [`backref()`](relationship_api.html#sqlalchemy.orm.backref
    "sqlalchemy.orm.backref") function in place of a string; this will store a specific
    set of arguments that will be transferred to the new [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") when generated:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: “反向引用”的许多其他参数都不是隐式的，包括像[`relationship.lazy`](relationship_api.html#sqlalchemy.orm.relationship.params.lazy
    "sqlalchemy.orm.relationship")、[`relationship.remote_side`](relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship")、[`relationship.cascade`](relationship_api.html#sqlalchemy.orm.relationship.params.cascade
    "sqlalchemy.orm.relationship")和[`relationship.cascade_backrefs`](relationship_api.html#sqlalchemy.orm.relationship.params.cascade_backrefs
    "sqlalchemy.orm.relationship")等参数。对于这种情况，我们使用[`backref()`](relationship_api.html#sqlalchemy.orm.backref
    "sqlalchemy.orm.backref")函数来代替字符串；这将存储一组特定的参数，这些参数在生成新的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")时将被传递：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Where above, we placed a `lazy="joined"` directive only on the `Address.user`
    side, indicating that when a query against `Address` is made, a join to the `User`
    entity should be made automatically which will populate the `.user` attribute
    of each returned `Address`. The [`backref()`](relationship_api.html#sqlalchemy.orm.backref
    "sqlalchemy.orm.backref") function formatted the arguments we gave it into a form
    that is interpreted by the receiving [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") as additional arguments to be applied to the new
    relationship it creates.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们只在`Address.user`一侧放置了`lazy="joined"`指令，这意味着当对`Address`进行查询时，应自动执行与`User`实体的连接，从而填充每个返回的`Address`的`.user`属性。[`backref()`](relationship_api.html#sqlalchemy.orm.backref
    "sqlalchemy.orm.backref")函数将我们给定的参数格式化成一种被接收[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")解释为要应用于它创建的新关系的附加参数的形式。
