- en: Shape
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/shape.html](https://pymupdf.readthedocs.io/en/latest/shape.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**This class is for PDF only.**'
  prefs: []
  type: TYPE_NORMAL
- en: This class allows creating interconnected graphical elements on a PDF page.
    Its methods have the same meaning and name as the corresponding [Page](page.html#page)
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, each [Page](page.html#page) draw method is just a convenience wrapper
    for (1) one shape draw method, (2) the [`Shape.finish()`](#Shape.finish "Shape.finish")
    method, and (3) the [`Shape.commit()`](#Shape.commit "Shape.commit") method. For
    page text insertion, only the [`Shape.commit()`](#Shape.commit "Shape.commit")
    method is invoked. If many draw and text operations are executed for a page, you
    should always consider using a Shape object.
  prefs: []
  type: TYPE_NORMAL
- en: Several draw methods can be executed in a row and each one of them will contribute
    to one drawing. Once the drawing is complete, the [`Shape.finish()`](#Shape.finish
    "Shape.finish") method must be invoked to apply color, dashing, width, morphing
    and other attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Draw** methods of this class (and [`Shape.insert_textbox()`](#Shape.insert_textbox
    "Shape.insert_textbox")) are logging the area they are covering in a rectangle
    ([`Shape.rect`](#Shape.rect "Shape.rect")). This property can for instance be
    used to set [`Page.cropbox_position`](page.html#Page.cropbox_position "Page.cropbox_position").'
  prefs: []
  type: TYPE_NORMAL
- en: '**Text insertions** [`Shape.insert_text()`](#Shape.insert_text "Shape.insert_text")
    and [`Shape.insert_textbox()`](#Shape.insert_textbox "Shape.insert_textbox") implicitly
    execute a “finish” and therefore only require [`Shape.commit()`](#Shape.commit
    "Shape.commit") to become effective. As a consequence, both include parameters
    for controlling properties like colors, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method / Attribute** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.commit()`](#Shape.commit "Shape.commit") | update the page’s contents
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.draw_bezier()`](#Shape.draw_bezier "Shape.draw_bezier") | draw a
    cubic Bezier curve |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.draw_circle()`](#Shape.draw_circle "Shape.draw_circle") | draw a
    circle around a point |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.draw_curve()`](#Shape.draw_curve "Shape.draw_curve") | draw a cubic
    Bezier using one helper point |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.draw_line()`](#Shape.draw_line "Shape.draw_line") | draw a line |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.draw_oval()`](#Shape.draw_oval "Shape.draw_oval") | draw an ellipse
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.draw_polyline()`](#Shape.draw_polyline "Shape.draw_polyline") | connect
    a sequence of points |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.draw_quad()`](#Shape.draw_quad "Shape.draw_quad") | draw a quadrilateral
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.draw_rect()`](#Shape.draw_rect "Shape.draw_rect") | draw a rectangle
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.draw_sector()`](#Shape.draw_sector "Shape.draw_sector") | draw a
    circular sector or piece of pie |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.draw_squiggle()`](#Shape.draw_squiggle "Shape.draw_squiggle") | draw
    a squiggly line |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.draw_zigzag()`](#Shape.draw_zigzag "Shape.draw_zigzag") | draw a
    zigzag line |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.finish()`](#Shape.finish "Shape.finish") | finish a set of draw commands
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.insert_text()`](#Shape.insert_text "Shape.insert_text") | insert
    text lines |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.insert_textbox()`](#Shape.insert_textbox "Shape.insert_textbox")
    | fit text into a rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.doc`](#Shape.doc "Shape.doc") | stores the page’s document |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.draw_cont`](#Shape.draw_cont "Shape.draw_cont") | draw commands since
    last [`Shape.finish()`](#Shape.finish "Shape.finish") |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.height`](#Shape.height "Shape.height") | stores the page’s height
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.lastPoint`](#Shape.lastPoint "Shape.lastPoint") | stores the current
    point |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.page`](#Shape.page "Shape.page") | stores the owning page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.rect`](#Shape.rect "Shape.rect") | rectangle surrounding drawings
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.text_cont`](#Shape.text_cont "Shape.text_cont") | accumulated text
    insertions |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.totalcont`](#Shape.totalcont "Shape.totalcont") | accumulated string
    to be stored in [`contents`](glossary.html#contents "contents") |'
  prefs: []
  type: TYPE_TB
- en: '| [`Shape.width`](#Shape.width "Shape.width") | stores the page’s width |'
  prefs: []
  type: TYPE_TB
- en: '**Class API**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Create a new drawing. During importing PyMuPDF, the *pymupdf.Page* object is
    being given the convenience method *new_shape()* to construct a *Shape* object.
    During instantiation, a check will be made whether we do have a PDF page. An exception
    is otherwise raised.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**page** ([Page](page.html#page)) – an existing page of a PDF document.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Draw a line from [`point_like`](glossary.html#point_like "point_like") objects
    *p1* to *p2*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p1** (*point_like*) – starting point'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**p2** (*point_like*) – end point'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the end point, *p2*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Draw a squiggly (wavy, undulated) line from [`point_like`](glossary.html#point_like
    "point_like") objects *p1* to *p2*. An integer number of full wave periods will
    always be drawn, one period having a length of *4 * breadth*. The breadth parameter
    will be adjusted as necessary to meet this condition. The drawn line will always
    turn “left” when leaving *p1* and always join *p2* from the “right”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p1** (*point_like*) – starting point'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**p2** (*point_like*) – end point'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**breadth** (*float*) – the amplitude of each wave. The condition *2 * breadth
    < abs(p2 - p1)* must be true to fit in at least one wave. See the following picture,
    which shows two points connected by one full period.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the end point, *p2*.
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-breadth.png](../Images/3ca7aa062fd3606be73e00d46f255e1f.png)'
  prefs: []
  type: TYPE_IMG
- en: Here is an example of three connected lines, forming a closed, filled triangle.
    Little arrows indicate the stroking direction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![_images/img-squiggly.png](../Images/8352abec0c49f2c3fc3bb81964dbb29e.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Waves drawn are **not** trigonometric (sine / cosine). If you need that, have
    a look at [draw.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/draw-sines/draw.py).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Draw a zigzag line from [`point_like`](glossary.html#point_like "point_like")
    objects *p1* to *p2*. Otherwise works exactly like [`Shape.draw_squiggle()`](#Shape.draw_squiggle
    "Shape.draw_squiggle").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**p1** (*point_like*) – starting point'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**p2** (*point_like*) – end point'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**breadth** (*float*) – the amplitude of the movement. The condition *2 * breadth
    < abs(p2 - p1)* must be true to fit in at least one period.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the end point, *p2*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Draw several connected lines between points contained in the sequence *points*.
    This can be used for creating arbitrary polygons by setting the last item equal
    to the first one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**points** (*sequence*) – a sequence of [`point_like`](glossary.html#point_like
    "point_like") objects. Its length must at least be 2 (in which case it is equivalent
    to *draw_line()*).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '*points[-1]* – the last point in the argument sequence.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Draw a standard cubic Bézier curve from *p1* to *p4*, using *p2* and *p3* as
    control points.
  prefs: []
  type: TYPE_NORMAL
- en: All arguments are [`point_like`](glossary.html#point_like "point_like") s.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the end point, *p4*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The points do not need to be different – experiment a bit with some of them
    being equal!
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-drawBezier.png](../Images/34d4b6a9e74f8c3ede711e1f2d9ed51e.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Draw an “ellipse” inside the given tetragon (quadrilateral). If it is a square,
    a regular circle is drawn, a general rectangle will result in an ellipse. If a
    quadrilateral is used instead, a plethora of shapes can be the result.
  prefs: []
  type: TYPE_NORMAL
- en: The drawing starts and ends at the middle point of the line `bottom-left ->
    top-left` corners in an anti-clockwise movement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**tetra** (*rect_like**,**quad_like*) –'
  prefs: []
  type: TYPE_NORMAL
- en: '[`rect_like`](glossary.html#rect_like "rect_like") or [`quad_like`](glossary.html#quad_like
    "quad_like").'
  prefs: []
  type: TYPE_NORMAL
- en: '*Changed in version 1.14.5:* Quads are now also supported.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the middle point of line `rect.bl -> rect.tl`, or resp. `quad.ll -> quad.ul`.
    Look at just a few examples here, or at the *quad-show?.py* scripts in the PyMuPDF-Utilities
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[![_images/img-drawquad.jpg](../Images/9c121a77ecffa66c86ef3fb3a2083826.png)](_images/img-drawquad.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Draw a circle given its center and radius. The drawing starts and ends at point
    `center - (radius, 0)` in an **anti-clockwise** movement. This point is the middle
    of the enclosing square’s left side.
  prefs: []
  type: TYPE_NORMAL
- en: This is a shortcut for `draw_sector(center, start, 360, fullSector=False)`.
    To draw the same circle in a **clockwise** movement, use `-360` as degrees.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**center** (*point_like*) – the center of the circle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**radius** (*float*) – the radius of the circle. Must be positive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Point(center.x - radius, center.y)`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![_images/img-drawcircle.jpg](../Images/6b4229dd6288b4e2e3cf33d6ad89736c.png)](_images/img-drawcircle.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'A special case of *draw_bezier()*: Draw a cubic Bezier curve from *p1* to *p3*.
    On each of the two lines `p1 -> p2` and `p3 -> p2` one control point is generated.
    Both control points will therefore be on the same side of the line `p1 -> p3`.
    This guaranties that the curve’s curvature does not change its sign. If the lines
    to p2 intersect with an angle of 90 degrees, then the resulting curve is a quarter
    ellipse (resp. quarter circle, if of same length).'
  prefs: []
  type: TYPE_NORMAL
- en: All arguments are [`point_like`](glossary.html#point_like "point_like").
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the end point, *p3*. The following is a filled quarter ellipse segment. The
    yellow area is oriented **clockwise:**
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-drawCurve.png](../Images/a071f2d2a7e17029b602243ebb20123a.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Draw a circular sector, optionally connecting the arc to the circle’s center
    (like a piece of pie).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**center** (*point_like*) – the center of the circle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**point** (*point_like*) – one of the two end points of the pie’s arc segment.
    The other one is calculated from the *angle*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**angle** (*float*) – the angle of the sector in degrees. Used to calculate
    the other end point of the arc. Depending on its sign, the arc is drawn anti-clockwise
    (positive) or clockwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fullSector** (*bool*) – whether to draw connecting lines from the ends of
    the arc to the circle center. If a fill color is specified, the full “pie” is
    colored, otherwise just the sector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: 'the other end point of the arc. Can be used as starting point for a following
    invocation to create logically connected pies charts. Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-drawSector1.png](../Images/8f628530738e4f3d1d132e043a13e7d5.png)![_images/img-drawSector2.png](../Images/a4812aecdd90b866ef75a609476cad6e.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in v1.22.0: Added parameter *radius*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Draw a rectangle. The drawing starts and ends at the top-left corner in an anti-clockwise
    movement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – where to put the rectangle on the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**radius** (*multiple*) – draw rounded rectangle corners. If not `None`, specifies
    the radius of the curvature as a percentage of a rectangle side length. This must
    one or (a tuple of) two floats `0 < radius <= 0.5`, where 0.5 corresponds to 50%
    of the respective side. If a float, the radius of the curvature is computed as
    `radius * min(width, height)`, drawing the corner’s perimeter as a quarter circle.
    If a tuple `(rx, ry)` is given, then the curvature is asymmetric with respect
    to the horizontal and vertical directions. A value of `radius=(0.5, 0.5)` draws
    an ellipse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: top-left corner of the rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Draw a quadrilateral. The drawing starts and ends at the top-left corner ([`Quad.ul`](quad.html#Quad.ul
    "Quad.ul")) in an anti-clockwise movement. It is a shortcut of [`Shape.draw_polyline()`](#Shape.draw_polyline
    "Shape.draw_polyline") with the argument `(ul, ll, lr, ur, ul)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**quad** (*quad_like*) – where to put the tetragon on the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Quad.ul`](quad.html#Quad.ul "Quad.ul").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Finish a set of *draw*()* methods by applying [Common Parameters](#commonparms)
    to all of them.
  prefs: []
  type: TYPE_NORMAL
- en: It has **no effect on** [`Shape.insert_text()`](#Shape.insert_text "Shape.insert_text")
    and [`Shape.insert_textbox()`](#Shape.insert_textbox "Shape.insert_textbox").
  prefs: []
  type: TYPE_NORMAL
- en: The method also supports **morphing the compound drawing** using [Point](point.html#point)
    *fixpoint* and [Matrix](matrix.html#matrix) *matrix*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**morph** (*sequence*) – morph the text or the compound drawing around some
    arbitrary [Point](point.html#point) *fixpoint* by applying [Matrix](matrix.html#matrix)
    *matrix* to it. This implies that *fixpoint* is a **fixed point** of this operation:
    it will not change its position. Default is no morphing (*None*). The matrix can
    contain any values in its first 4 components, *matrix.e == matrix.f == 0* must
    be true, however. This means that any combination of scaling, shearing, rotating,
    flipping, etc. is possible, but translations are not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stroke_opacity** (*float*) – *(new in v1.18.1)* set transparency for stroke
    colors. Value < 0 or > 1 will be ignored. Default is 1 (intransparent).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fill_opacity** (*float*) – *(new in v1.18.1)* set transparency for fill colors.
    Default is 1 (intransparent).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**even_odd** (*bool*) – request the **“even-odd rule”** for filling operations.
    Default is *False*, so that the **“nonzero winding number rule”** is used. These
    rules are alternative methods to apply the fill color where areas overlap. Only
    with fairly complex shapes a different behavior is to be expected with these rules.
    For an in-depth explanation, see [Adobe PDF References](app3.html#adobemanual),
    pp. 137 ff. Here is an example to demonstrate the difference.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**oc** (*int*) – *(new in v1.18.4)* the [`xref`](glossary.html#xref "xref")
    number of an [`OCG`](glossary.html#OCG "OCG") or [`OCMD`](glossary.html#OCMD "OCMD")
    to make this drawing conditionally displayable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![_images/img-even-odd.png](../Images/c127eb74792dde81060007bc2de35c75.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For each pixel in a shape, the following will happen:'
  prefs: []
  type: TYPE_NORMAL
- en: Rule **“even-odd”** counts, how many areas contain the pixel. If this count
    is **odd,** the pixel is regarded **inside** the shape, if it is **even**, the
    pixel is **outside**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The default rule **“nonzero winding”** in addition looks at the *“orientation”*
    of each area containing the pixel: it **adds 1** if an area is drawn anti-clockwise
    and it **subtracts 1** for clockwise areas. If the result is zero, the pixel is
    regarded **outside,** pixels with a non-zero count are **inside** the shape.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Of the four shapes in above image, the top two each show three circles drawn
    in standard manner (anti-clockwise, look at the arrows). The lower two shapes
    contain one (the top-left) circle drawn clockwise. As can be seen, area orientation
    is irrelevant for the right column (even-odd rule).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Insert text lines start at *point*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**point** (*point_like*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the bottom-left position of the first character of *text* in pixels. It is important
    to understand, how this works in conjunction with the *rotate* parameter. Please
    have a look at the following picture. The small red dots indicate the positions
    of *point* in each of the four possible cases.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[![_images/img-inserttext.jpg](../Images/d9072bb6d96d3c7d885c9abbc01b8215.png)](_images/img-inserttext.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**text** (*str/sequence*) – the text to be inserted. May be specified as either
    a string type or as a sequence type. For sequences, or strings containing line
    breaks *n*, several lines will be inserted. No care will be taken if lines are
    too wide, but the number of inserted lines will be limited by “vertical” space
    on the page (in the sense of reading direction as established by the *rotate*
    parameter). Any rest of *text* is discarded – the return code however contains
    the number of inserted lines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lineheight** (*float*) – a factor to override the line height calculated
    from font properties. If not `None`, a line height of `fontsize * lineheight`
    will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**stroke_opacity** (*float*) – *(new in v1.18.1)* set transparency for stroke
    colors (the **border line** of a character). Only `0 <= value <= 1` will be considered.
    Default is 1 (intransparent).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fill_opacity** (*float*) – *(new in v1.18.1)* set transparency for fill colors.
    Default is 1 (intransparent). Use this value to control transparency of the text
    color. Stroke opacity **only** affects the border line of characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*int*) – determines whether to rotate the text. Acceptable values
    are multiples of 90 degrees. Default is 0 (no rotation), meaning horizontal text
    lines oriented from left to right. 180 means text is shown upside down from **right
    to left**. 90 means anti-clockwise rotation, text running **upwards**. 270 (or
    -90) means clockwise rotation, text running **downwards**. In any case, *point*
    specifies the bottom-left coordinates of the first character’s rectangle. Multiple
    lines, if present, always follow the reading direction established by this parameter.
    So line 2 is located **above** line 1 in case of `rotate = 180`, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**oc** (*int*) – *(new in v1.18.4)* the [`xref`](glossary.html#xref "xref")
    number of an [`OCG`](glossary.html#OCG "OCG") or [`OCMD`](glossary.html#OCMD "OCMD")
    to make this text conditionally displayable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: number of lines inserted.
  prefs: []
  type: TYPE_NORMAL
- en: For a description of the other parameters see [Common Parameters](#commonparms).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'PDF only: Insert text into the specified rectangle. The text will be split
    into lines and words and then filled into the available space, starting from one
    of the four rectangle corners, which depends on `rotate`. Line feeds and multiple
    space will be respected.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – the area to use. It must be finite and not empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**buffer** (*str/sequence*) – the text to be inserted. Must be specified as
    a string or a sequence of strings. Line breaks are respected also when occurring
    in a sequence entry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**align** (*int*) – align each text line. Default is 0 (left). Centered, right
    and justified are the other supported options, see [Text Alignment](vars.html#textalign).
    Please note that the effect of parameter value *TEXT_ALIGN_JUSTIFY* is only achievable
    with “simple” (single-byte) fonts (including the [PDF Base 14 Fonts](app3.html#base-14-fonts)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lineheight** (*float*) –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a factor to override the line height calculated from font properties. If not
    `None`, a line height of `fontsize * lineheight` will be used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'arg int expandtabs:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: controls handling of tab characters `\t` using the `string.expandtabs()` method
    **per each line**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**stroke_opacity** (*float*) – *(new in v1.18.1)* set transparency for stroke
    colors. Negative values and values > 1 will be ignored. Default is 1 (intransparent).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fill_opacity** (*float*) – *(new in v1.18.1)* set transparency for fill colors.
    Default is 1 (intransparent). Use this value to control transparency of the text
    color. Stroke opacity **only** affects the border line of characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rotate** (*int*) – requests text to be rotated in the rectangle. This value
    must be a multiple of 90 degrees. Default is 0 (no rotation). Effectively, the
    four values `0`, `90`, `180` and `270` (= `-90`) are processed, each causing the
    text to start in a different rectangle corner. Bottom-left is `90`, bottom-right
    is `180`, and `-90 / 270` is top-right. See the example how text is filled in
    a rectangle. This argument takes precedence over morphing. See the second example,
    which shows text first rotated left by `90` degrees and then the whole rectangle
    rotated clockwise around is lower left corner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**oc** (*int*) – *(new in v1.18.4)* the [`xref`](glossary.html#xref "xref")
    number of an [`OCG`](glossary.html#OCG "OCG") or [`OCMD`](glossary.html#OCMD "OCMD")
    to make this text conditionally displayable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**If positive or zero**: successful execution. The value returned is the unused
    rectangle line space in pixels. This may safely be ignored – or be used to optimize
    the rectangle, position subsequent items, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If negative**: no execution. The value returned is the space deficit to store
    text lines. Enlarge rectangle, decrease *fontsize*, decrease text amount, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-rotate.png](../Images/50131384349202b34e4bddbe97be8b9e.png) ![_images/img-rot%2Bmorph.png](../Images/508b3c2316be49a3ceec9f3068a55502.png)'
  prefs: []
  type: TYPE_IMG
- en: For a description of the other parameters see [Common Parameters](#commonparms).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Update the page’s [`contents`](glossary.html#contents "contents") with the accumulated
    drawings, followed by any text insertions. If text overlaps drawings, it will
    be written on top of the drawings.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '**Do not forget to execute this method:**'
  prefs: []
  type: TYPE_NORMAL
- en: If a shape is **not committed, it will be ignored and the page will not be changed!**
  prefs: []
  type: TYPE_NORMAL
- en: The method will reset attributes [`Shape.rect`](#Shape.rect "Shape.rect"), [`lastPoint`](#Shape.lastPoint
    "Shape.lastPoint"), [`draw_cont`](#Shape.draw_cont "Shape.draw_cont"), [`text_cont`](#Shape.text_cont
    "Shape.text_cont") and [`totalcont`](#Shape.totalcont "Shape.totalcont"). Afterwards,
    the shape object can be reused for the **same page**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**overlay** (*bool*) – determine whether to put content in foreground (default)
    or background. Relevant only, if the page already has a non-empty [`contents`](glossary.html#contents
    "contents") object.'
  prefs: []
  type: TYPE_NORMAL
- en: '**———- Attributes ———-**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'For reference only: the page’s document.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Document](document.html#document)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'For reference only: the owning page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Page](page.html#page)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Copy of the page’s height
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Copy of the page’s width.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Accumulated command buffer for **draw methods** since last finish. Every finish
    method will append its commands to [`Shape.totalcont`](#Shape.totalcont "Shape.totalcont").
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: str
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Accumulated text buffer. All **text insertions** go here. This buffer will be
    appended to [`totalcont`](#Shape.totalcont "Shape.totalcont") [`Shape.commit()`](#Shape.commit
    "Shape.commit"), so that text will never be covered by drawings in the same Shape.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: str
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Rectangle surrounding drawings. This attribute is at your disposal and may be
    changed at any time. Its value is set to *None* when a shape is created or committed.
    Every *draw** method, and [`Shape.insert_textbox()`](#Shape.insert_textbox "Shape.insert_textbox")
    update this property (i.e. **enlarge** the rectangle as needed). **Morphing**
    operations, however ([`Shape.finish()`](#Shape.finish "Shape.finish"), [`Shape.insert_textbox()`](#Shape.insert_textbox
    "Shape.insert_textbox")) are ignored.
  prefs: []
  type: TYPE_NORMAL
- en: A typical use of this attribute would be setting [`Page.cropbox_position`](page.html#Page.cropbox_position
    "Page.cropbox_position") to this value, when you are creating shapes for later
    or external use. If you have not manipulated the attribute yourself, it should
    reflect a rectangle that contains all drawings so far.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have used morphing and need a rectangle containing the morphed objects,
    use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Total accumulated command buffer for draws and text insertions. This will be
    used by [`Shape.commit()`](#Shape.commit "Shape.commit").
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: str
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'For reference only: the current point of the drawing path. It is *None* at
    *Shape* creation and after each *finish()* and *commit()*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A drawing object is constructed by *shape = page.new_shape()*. After this,
    as many draw, finish and text insertions methods as required may follow. Each
    sequence of draws must be finished before the drawing is committed. The overall
    coding pattern looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Each *finish()* combines the preceding draws into one logical shape, giving
    it common colors, line width, morphing, etc. If *closePath* is specified, it will
    also connect the end point of the last draw with the starting point of the first
    one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To successfully create compound graphics, let each draw method use the end point
    of the previous one as its starting point. In the above pseudo code, *draw2* should
    hence use the returned [Point](point.html#point) of *draw1* as its starting point.
    Failing to do so, would automatically start a new path and *finish()* may not
    work as expected (but it won’t complain either).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Text insertions may occur anywhere before the commit (they neither touch [`Shape.draw_cont`](#Shape.draw_cont
    "Shape.draw_cont") nor [`Shape.lastPoint`](#Shape.lastPoint "Shape.lastPoint")).
    They are appended to *Shape.totalcont* directly, whereas draws will be appended
    by *Shape.finish*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each *commit* takes all text insertions and shapes and places them in foreground
    or background on the page – thus providing a way to control graphical layers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Only** *commit* **will update** the page’s contents, the other methods are
    basically string manipulations.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a full circle of pieces of pie in different colors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is an example for 5 colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-cake.png](../Images/5186cb30721f9ebfde5f265b15719402.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a regular n-edged polygon (fill yellow, red border). We use *draw_sector()*
    only to calculate the points on the circumference, and empty the draw command
    buffer again before drawing the polygon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the polygon for n = 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-7edges.png](../Images/1d9b8de07f5f68835dd0cd1a31155814.png) ##
    Common Parameters'
  prefs: []
  type: TYPE_NORMAL
- en: '**fontname** (*str*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, there are three options:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use one of the standard [PDF Base 14 Fonts](app3.html#base-14-fonts). In this
    case, *fontfile* **must not** be specified and *“Helvetica”* is used if this parameter
    is omitted, too.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Choose a font already in use by the page. Then specify its **reference** name
    prefixed with a slash “/”, see example below.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Specify a font file present on your system. In this case choose an arbitrary,
    but new name for this parameter (without “/” prefix).
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If inserted text should re-use one of the page’s fonts, use its reference name
    appearing in [`Page.get_fonts()`](page.html#Page.get_fonts "Page.get_fonts") like
    so:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Suppose the font list has the item *[1024, 0, ‘Type1’, ‘NimbusMonL-Bold’, ‘R366’]*,
    then specify *fontname = “/R366”, fontfile = None* to use font *NimbusMonL-Bold*.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**fontfile** (*str*)'
  prefs: []
  type: TYPE_NORMAL
- en: File path of a font existing on your computer. If you specify *fontfile*, make
    sure you use a *fontname* **not occurring** in the above list. This new font will
    be embedded in the PDF upon *doc.save()*. Similar to new images, a font file will
    be embedded only once. A table of MD5 codes for the binary font contents is used
    to ensure this.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**set_simple** (*bool*)'
  prefs: []
  type: TYPE_NORMAL
- en: Fonts installed from files are installed as **Type0** fonts by default. If you
    want to use 1-byte characters only, set this to true. This setting cannot be reverted.
    Subsequent changes are ignored.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**fontsize** (*float*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Font size of text, see: [`fontsize`](glossary.html#fontsize "fontsize").'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**dashes** (*str*)'
  prefs: []
  type: TYPE_NORMAL
- en: Causes lines to be drawn dashed. The general format is `"[n m] p"` of (up to)
    3 floats denoting pixel lengths. [`n`](colorspace.html#Colorspace.n "Colorspace.n")
    is the dash length, `m` (optional) is the subsequent gap length, and `p` (the
    “phase” - **required**, even if 0!) specifies how many pixels should be skipped
    before the dashing starts. If `m` is omitted, it defaults to [`n`](colorspace.html#Colorspace.n
    "Colorspace.n").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A continuous line (no dashes) is drawn with `"[] 0"` or *None* or `""`. Examples:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Specifying `"[3 4] 0"` means dashes of 3 and gaps of 4 pixels following each
    other.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"[3 3] 0"` and `"[3] 0"` do the same thing.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For (the rather complex) details on how to achieve sophisticated dashing effects,
    see [Adobe PDF References](app3.html#adobemanual), page 217.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**color / fill** (*list, tuple*)'
  prefs: []
  type: TYPE_NORMAL
- en: Stroke and fill colors can be specified as tuples or list of of floats from
    0 to 1\. These sequences must have a length of 1 (GRAY), 3 (RGB) or 4 (CMYK).
    For GRAY colorspace, a single float instead of the unwieldy *(float,)* or *[float]*
    is also accepted. Accept (default) or use `None` to not use the parameter.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To simplify color specification, method *getColor()* in *pymupdf.utils* may
    be used to get predefined RGB color triples by name. It accepts a string as the
    name of the color and returns the corresponding triple. The method knows over
    540 color names – see section [Color Database](colors.html#colordatabase).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Please note that the term *color* usually means “stroke” color when used in
    conjunction with fill color.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If letting default a color parameter to `None`, then no resp. color selection
    command will be generated. If *fill* and *color* are both `None`, then the drawing
    will contain no color specification. But it will still be “stroked”, which causes
    PDF’s default color “black” be used by Adobe Acrobat and all other viewers.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**width** (*float*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The stroke (“border”) width of the elements in a shape (if applicable). The
    default value is 1\. The values width, color and fill have the following relationship
    / dependency:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If `fill=None` shape elements will always be drawn with a border - even if `color=None`
    (in which case black is taken) or `width=0` (in which case 1 is taken).
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Shapes without border can only be achieved if a fill color is specified (which
    may be white of course). To achieve this, specify `width=0`. In this case, the
    [`color`](textwriter.html#TextWriter.color "TextWriter.color") parameter is ignored.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**stroke_opacity / fill_opacity** (*floats*)'
  prefs: []
  type: TYPE_NORMAL
- en: Both values are floats in range [0, 1]. Negative values or values > 1 will ignored
    (in most cases). Both set the transparency such that a value 0.5 corresponds to
    50% transparency, 0 means invisible and 1 means intransparent. For e.g. a rectangle
    the stroke opacity applies to its border and fill opacity to its interior.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For text insertions ([`Shape.insert_text()`](#Shape.insert_text "Shape.insert_text")
    and [`Shape.insert_textbox()`](#Shape.insert_textbox "Shape.insert_textbox")),
    use *fill_opacity* for the text. At first sight this seems surprising, but it
    becomes obvious when you look further down to *render_mode*: *fill_opacity* applies
    to the yellow and *stroke_opacity* applies to the blue color.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**border_width** (*float*)'
  prefs: []
  type: TYPE_NORMAL
- en: Set the border width for text insertions. New in v1.14.9\. Relevant only if
    the render mode argument is used with a value greater zero.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**render_mode** (*int*)'
  prefs: []
  type: TYPE_NORMAL
- en: '*New in version 1.14.9:* Integer in `range(8)` which controls the text appearance
    ([`Shape.insert_text()`](#Shape.insert_text "Shape.insert_text") and [`Shape.insert_textbox()`](#Shape.insert_textbox
    "Shape.insert_textbox")). See page 246 in [Adobe PDF References](app3.html#adobemanual).
    New in v1.14.9\. These methods now also differentiate between fill and stroke
    colors.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For default 0, only the text fill color is used to paint the text. For backward
    compatibility, using the *color* parameter instead also works.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: For render mode 1, only the border of each glyph (i.e. text character) is drawn
    with a thickness as set in argument *border_width*. The color chosen in the *color*
    argument is taken for this, the *fill* parameter is ignored.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For render mode 2, the glyphs are filled and stroked, using both color parameters
    and the specified border width. You can use this value to simulate **bold text**
    without using another font: choose the same value for *fill* and *color* and an
    appropriate value for *border_width*.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For render mode 3, the glyphs are neither stroked nor filled: the text becomes
    invisible.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The following examples use border_width=0.3, together with a fontsize of 15\.
    Stroke color is blue and fill color is some yellow.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![_images/img-rendermode.jpg](../Images/68afc67e63136e95b67c5e79fab5037b.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**overlay** (*bool*)'
  prefs: []
  type: TYPE_NORMAL
- en: Causes the item to appear in foreground (default) or background.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**morph** (*sequence*)'
  prefs: []
  type: TYPE_NORMAL
- en: Causes “morphing” of either a shape, created by the *draw*()* methods, or the
    text inserted by page methods *insert_textbox()* / *insert_text()*. If not *None*,
    it must be a pair *(fixpoint, matrix)*, where *fixpoint* is a [Point](point.html#point)
    and *matrix* is a [Matrix](matrix.html#matrix). The matrix can be anything except
    translations, i.e. *matrix.e == matrix.f == 0* must be true. The point is used
    as a fixed point for the matrix operation. For example, if *matrix* is a rotation
    or scaling, then *fixpoint* is its center. Similarly, if *matrix* is a left-right
    or up-down flip, then the mirroring axis will be the vertical, respectively horizontal
    line going through *fixpoint*, etc.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Several methods contain checks whether the to be inserted items will actually
    fit into the page (like [`Shape.insert_text()`](#Shape.insert_text "Shape.insert_text"),
    or [`Shape.draw_rect()`](#Shape.draw_rect "Shape.draw_rect")). For the result
    of a morphing operation there is however no such guaranty: this is entirely the
    programmer’s responsibility.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**lineCap (deprecated: “roundCap”)** (*int*)'
  prefs: []
  type: TYPE_NORMAL
- en: Controls the look of line ends. The default value 0 lets each line end at exactly
    the given coordinate in a sharp edge. A value of 1 adds a semi-circle to the ends,
    whose center is the end point and whose diameter is the line width. Value 2 adds
    a semi-square with an edge length of line width and a center of the line end.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Changed in version 1.14.15*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**lineJoin** (*int*)'
  prefs: []
  type: TYPE_NORMAL
- en: '*New in version 1.14.15:* Controls the way how line connections look like.
    This may be either as a sharp edge (0), a rounded join (1), or a cut-off edge
    (2, “butt”).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**closePath** (*bool*)'
  prefs: []
  type: TYPE_NORMAL
- en: Causes the end point of a drawing to be automatically connected with the starting
    point (by a straight line).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
- en: Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A drawing object is constructed by *shape = page.new_shape()*. After this,
    as many draw, finish and text insertions methods as required may follow. Each
    sequence of draws must be finished before the drawing is committed. The overall
    coding pattern looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Each *finish()* combines the preceding draws into one logical shape, giving
    it common colors, line width, morphing, etc. If *closePath* is specified, it will
    also connect the end point of the last draw with the starting point of the first
    one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To successfully create compound graphics, let each draw method use the end point
    of the previous one as its starting point. In the above pseudo code, *draw2* should
    hence use the returned [Point](point.html#point) of *draw1* as its starting point.
    Failing to do so, would automatically start a new path and *finish()* may not
    work as expected (but it won’t complain either).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Text insertions may occur anywhere before the commit (they neither touch [`Shape.draw_cont`](#Shape.draw_cont
    "Shape.draw_cont") nor [`Shape.lastPoint`](#Shape.lastPoint "Shape.lastPoint")).
    They are appended to *Shape.totalcont* directly, whereas draws will be appended
    by *Shape.finish*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each *commit* takes all text insertions and shapes and places them in foreground
    or background on the page – thus providing a way to control graphical layers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Only** *commit* **will update** the page’s contents, the other methods are
    basically string manipulations.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a full circle of pieces of pie in different colors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is an example for 5 colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-cake.png](../Images/5186cb30721f9ebfde5f265b15719402.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a regular n-edged polygon (fill yellow, red border). We use *draw_sector()*
    only to calculate the points on the circumference, and empty the draw command
    buffer again before drawing the polygon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the polygon for n = 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-7edges.png](../Images/1d9b8de07f5f68835dd0cd1a31155814.png) ##
    Common Parameters'
  prefs: []
  type: TYPE_NORMAL
- en: '**fontname** (*str*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, there are three options:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use one of the standard [PDF Base 14 Fonts](app3.html#base-14-fonts). In this
    case, *fontfile* **must not** be specified and *“Helvetica”* is used if this parameter
    is omitted, too.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Choose a font already in use by the page. Then specify its **reference** name
    prefixed with a slash “/”, see example below.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Specify a font file present on your system. In this case choose an arbitrary,
    but new name for this parameter (without “/” prefix).
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If inserted text should re-use one of the page’s fonts, use its reference name
    appearing in [`Page.get_fonts()`](page.html#Page.get_fonts "Page.get_fonts") like
    so:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Suppose the font list has the item *[1024, 0, ‘Type1’, ‘NimbusMonL-Bold’, ‘R366’]*,
    then specify *fontname = “/R366”, fontfile = None* to use font *NimbusMonL-Bold*.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**fontfile** (*str*)'
  prefs: []
  type: TYPE_NORMAL
- en: File path of a font existing on your computer. If you specify *fontfile*, make
    sure you use a *fontname* **not occurring** in the above list. This new font will
    be embedded in the PDF upon *doc.save()*. Similar to new images, a font file will
    be embedded only once. A table of MD5 codes for the binary font contents is used
    to ensure this.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**set_simple** (*bool*)'
  prefs: []
  type: TYPE_NORMAL
- en: Fonts installed from files are installed as **Type0** fonts by default. If you
    want to use 1-byte characters only, set this to true. This setting cannot be reverted.
    Subsequent changes are ignored.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**fontsize** (*float*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Font size of text, see: [`fontsize`](glossary.html#fontsize "fontsize").'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**dashes** (*str*)'
  prefs: []
  type: TYPE_NORMAL
- en: Causes lines to be drawn dashed. The general format is `"[n m] p"` of (up to)
    3 floats denoting pixel lengths. [`n`](colorspace.html#Colorspace.n "Colorspace.n")
    is the dash length, `m` (optional) is the subsequent gap length, and `p` (the
    “phase” - **required**, even if 0!) specifies how many pixels should be skipped
    before the dashing starts. If `m` is omitted, it defaults to [`n`](colorspace.html#Colorspace.n
    "Colorspace.n").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A continuous line (no dashes) is drawn with `"[] 0"` or *None* or `""`. Examples:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Specifying `"[3 4] 0"` means dashes of 3 and gaps of 4 pixels following each
    other.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"[3 3] 0"` and `"[3] 0"` do the same thing.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For (the rather complex) details on how to achieve sophisticated dashing effects,
    see [Adobe PDF References](app3.html#adobemanual), page 217.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**color / fill** (*list, tuple*)'
  prefs: []
  type: TYPE_NORMAL
- en: Stroke and fill colors can be specified as tuples or list of of floats from
    0 to 1\. These sequences must have a length of 1 (GRAY), 3 (RGB) or 4 (CMYK).
    For GRAY colorspace, a single float instead of the unwieldy *(float,)* or *[float]*
    is also accepted. Accept (default) or use `None` to not use the parameter.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To simplify color specification, method *getColor()* in *pymupdf.utils* may
    be used to get predefined RGB color triples by name. It accepts a string as the
    name of the color and returns the corresponding triple. The method knows over
    540 color names – see section [Color Database](colors.html#colordatabase).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Please note that the term *color* usually means “stroke” color when used in
    conjunction with fill color.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If letting default a color parameter to `None`, then no resp. color selection
    command will be generated. If *fill* and *color* are both `None`, then the drawing
    will contain no color specification. But it will still be “stroked”, which causes
    PDF’s default color “black” be used by Adobe Acrobat and all other viewers.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**width** (*float*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The stroke (“border”) width of the elements in a shape (if applicable). The
    default value is 1\. The values width, color and fill have the following relationship
    / dependency:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If `fill=None` shape elements will always be drawn with a border - even if `color=None`
    (in which case black is taken) or `width=0` (in which case 1 is taken).
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Shapes without border can only be achieved if a fill color is specified (which
    may be white of course). To achieve this, specify `width=0`. In this case, the
    [`color`](textwriter.html#TextWriter.color "TextWriter.color") parameter is ignored.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**stroke_opacity / fill_opacity** (*floats*)'
  prefs: []
  type: TYPE_NORMAL
- en: Both values are floats in range [0, 1]. Negative values or values > 1 will ignored
    (in most cases). Both set the transparency such that a value 0.5 corresponds to
    50% transparency, 0 means invisible and 1 means intransparent. For e.g. a rectangle
    the stroke opacity applies to its border and fill opacity to its interior.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For text insertions ([`Shape.insert_text()`](#Shape.insert_text "Shape.insert_text")
    and [`Shape.insert_textbox()`](#Shape.insert_textbox "Shape.insert_textbox")),
    use *fill_opacity* for the text. At first sight this seems surprising, but it
    becomes obvious when you look further down to *render_mode*: *fill_opacity* applies
    to the yellow and *stroke_opacity* applies to the blue color.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**border_width** (*float*)'
  prefs: []
  type: TYPE_NORMAL
- en: Set the border width for text insertions. New in v1.14.9\. Relevant only if
    the render mode argument is used with a value greater zero.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**render_mode** (*int*)'
  prefs: []
  type: TYPE_NORMAL
- en: '*New in version 1.14.9:* Integer in `range(8)` which controls the text appearance
    ([`Shape.insert_text()`](#Shape.insert_text "Shape.insert_text") and [`Shape.insert_textbox()`](#Shape.insert_textbox
    "Shape.insert_textbox")). See page 246 in [Adobe PDF References](app3.html#adobemanual).
    New in v1.14.9\. These methods now also differentiate between fill and stroke
    colors.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For default 0, only the text fill color is used to paint the text. For backward
    compatibility, using the *color* parameter instead also works.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: For render mode 1, only the border of each glyph (i.e. text character) is drawn
    with a thickness as set in argument *border_width*. The color chosen in the *color*
    argument is taken for this, the *fill* parameter is ignored.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For render mode 2, the glyphs are filled and stroked, using both color parameters
    and the specified border width. You can use this value to simulate **bold text**
    without using another font: choose the same value for *fill* and *color* and an
    appropriate value for *border_width*.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For render mode 3, the glyphs are neither stroked nor filled: the text becomes
    invisible.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The following examples use border_width=0.3, together with a fontsize of 15\.
    Stroke color is blue and fill color is some yellow.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![_images/img-rendermode.jpg](../Images/68afc67e63136e95b67c5e79fab5037b.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**overlay** (*bool*)'
  prefs: []
  type: TYPE_NORMAL
- en: Causes the item to appear in foreground (default) or background.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**morph** (*sequence*)'
  prefs: []
  type: TYPE_NORMAL
- en: Causes “morphing” of either a shape, created by the *draw*()* methods, or the
    text inserted by page methods *insert_textbox()* / *insert_text()*. If not *None*,
    it must be a pair *(fixpoint, matrix)*, where *fixpoint* is a [Point](point.html#point)
    and *matrix* is a [Matrix](matrix.html#matrix). The matrix can be anything except
    translations, i.e. *matrix.e == matrix.f == 0* must be true. The point is used
    as a fixed point for the matrix operation. For example, if *matrix* is a rotation
    or scaling, then *fixpoint* is its center. Similarly, if *matrix* is a left-right
    or up-down flip, then the mirroring axis will be the vertical, respectively horizontal
    line going through *fixpoint*, etc.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Several methods contain checks whether the to be inserted items will actually
    fit into the page (like [`Shape.insert_text()`](#Shape.insert_text "Shape.insert_text"),
    or [`Shape.draw_rect()`](#Shape.draw_rect "Shape.draw_rect")). For the result
    of a morphing operation there is however no such guaranty: this is entirely the
    programmer’s responsibility.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**lineCap (deprecated: “roundCap”)** (*int*)'
  prefs: []
  type: TYPE_NORMAL
- en: Controls the look of line ends. The default value 0 lets each line end at exactly
    the given coordinate in a sharp edge. A value of 1 adds a semi-circle to the ends,
    whose center is the end point and whose diameter is the line width. Value 2 adds
    a semi-square with an edge length of line width and a center of the line end.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Changed in version 1.14.15*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**lineJoin** (*int*)'
  prefs: []
  type: TYPE_NORMAL
- en: '*New in version 1.14.15:* Controls the way how line connections look like.
    This may be either as a sharp edge (0), a rounded join (1), or a cut-off edge
    (2, “butt”).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**closePath** (*bool*)'
  prefs: []
  type: TYPE_NORMAL
- en: Causes the end point of a drawing to be automatically connected with the starting
    point (by a straight line).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
