- en: SQLAlchemy 2.0 - Major Migration Guide
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0 - 主要迁移指南
- en: 原文：[https://docs.sqlalchemy.org/en/20/changelog/migration_20.html](https://docs.sqlalchemy.org/en/20/changelog/migration_20.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/changelog/migration_20.html](https://docs.sqlalchemy.org/en/20/changelog/migration_20.html)
- en: Note for Readers
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 读者须知
- en: 'SQLAlchemy 2.0’s transition documents are separated into **two** documents
    - one which details major API shifts from the 1.x to 2.x series, and the other
    which details new features and behaviors relative to SQLAlchemy 1.4:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0 的迁移文档分为**两个**文档 - 一个详细说明了从 1.x 到 2.x 系列的主要 API 转变，另一个详细说明了相对于
    SQLAlchemy 1.4 的新功能和行为：
- en: '[SQLAlchemy 2.0 - Major Migration Guide](#) - this document, 1.x to 2.x API
    shifts'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLAlchemy 2.0 - 主要迁移指南](#) - 本文档，1.x 到 2.x API 转变'
- en: '[What’s New in SQLAlchemy 2.0?](whatsnew_20.html) - new features and behaviors
    for SQLAlchemy 2.0'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQLAlchemy 2.0 有什么新功能？](whatsnew_20.html) - SQLAlchemy 2.0 的新功能和行为'
- en: Readers who have already updated their 1.4 application to follow SQLAlchemy
    2.0 engine and ORM conventions may navigate to [What’s New in SQLAlchemy 2.0?](whatsnew_20.html)
    for an overview of new features and capabilities.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 已经将其 1.4 应用程序更新以遵循 SQLAlchemy 2.0 引擎和 ORM 约定的读者，可以转到 [SQLAlchemy 2.0 有什么新功能？](whatsnew_20.html)
    查看新功能和能力的概述。
- en: About this document
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 关于本文档
- en: This document describes changes between SQLAlchemy version 1.4 and SQLAlchemy
    version 2.0.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档描述了 SQLAlchemy 版本 1.4 和 SQLAlchemy 版本 2.0 之间的变化。
- en: SQLAlchemy 2.0 presents a major shift for a wide variety of key SQLAlchemy usage
    patterns in both the Core and ORM components. The goal of this release is to make
    a slight readjustment in some of the most fundamental assumptions of SQLAlchemy
    since its early beginnings, and to deliver a newly streamlined usage model that
    is hoped to be significantly more minimalist and consistent between the Core and
    ORM components, as well as more capable. The move of Python to be Python 3 only
    as well as the emergence of gradual typing systems for Python 3 are the initial
    inspirations for this shift, as is the changing nature of the Python community
    which now includes not just hardcore database programmers but a vast new community
    of data scientists and students of many different disciplines.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0 对于 Core 和 ORM 组件中许多关键的 SQLAlchemy 使用模式都进行了重大转变。此次发布的目标是对自 SQLAlchemy
    早期开始以来的一些最基本的假设进行轻微调整，并提供一个新的简化使用模型，希望能够在 Core 和 ORM 组件之间更加一致和更加精简，并且功能更强大。Python
    转向仅支持 Python 3，以及 Python 3 的逐渐类型化系统的出现，是这种转变的最初灵感来源，还有 Python 社区的变化，现在不仅包括了核心的数据库程序员，还有一个涵盖了许多不同学科的庞大的新社区的数据科学家和学生。
- en: SQLAlchemy started with Python 2.3 which had no context managers, no function
    decorators, Unicode as a second class feature, and a variety of other shortcomings
    that would be unknown today. The biggest changes in SQLAlchemy 2.0 are targeting
    the residual assumptions left over from this early period in SQLAlchemy’s development
    as well as the leftover artifacts resulting from the incremental introduction
    of key API features such as [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query") and Declarative. It also hopes standardize some
    newer capabilities that have proven to be very effective.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 从 Python 2.3 开始，那个时候没有上下文管理器，没有函数装饰器，Unicode 作为第二类特性，以及其他许多现在已经不为人知的缺点。SQLAlchemy
    2.0 最大的变化是针对 SQLAlchemy 发展早期留下的残余假设以及由于增量引入关键 API 特性（如 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query") 和声明）而导致的残余残留物。它还希望标准化一些已被证明非常有效的较新功能。
- en: The 1.4->2.0 Migration Path
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.4->2.0 迁移路径
- en: 'The most prominent architectural features and API changes that are considered
    to be “SQLAlchemy 2.0” were in fact released as fully available within the 1.4
    series, to provide for a clean upgrade path from the 1.x to the 2.x series as
    well as to serve as a beta platform for the features themselves. These changes
    include:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 被认为是“SQLAlchemy 2.0”的最突出的架构特性和 API 变化实际上已经在 1.4 系列中完全可用，以提供从 1.x 到 2.x 系列的清晰升级路径，并为这些特性本身提供一个
    beta 平台。这些变化包括：
- en: '[New ORM statement paradigm](migration_14.html#change-5159)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[新的 ORM 语句范例](migration_14.html#change-5159)'
- en: '[SQL caching throughout Core and ORM](migration_14.html#change-4639)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[核心和 ORM 中的 SQL 缓存](migration_14.html#change-4639)'
- en: '[New Declarative features, ORM integration](migration_14.html#change-5508)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[新的声明特性，ORM 集成](migration_14.html#change-5508)'
- en: '[New Result object](migration_14.html#change-result-14-core)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[新的结果对象](migration_14.html#change-result-14-core)'
- en: '[select() / case() Accept Positional Expressions](migration_14.html#change-5284)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[select() / case() 接受位置表达式](migration_14.html#change-5284)'
- en: '[asyncio support for Core and ORM](migration_14.html#change-3414)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Core 和 ORM 的 asyncio 支持](migration_14.html#change-3414)'
- en: The above bullets link to the description of these new paradigms as introduced
    in SQLAlchemy 1.4\. in the [What’s New in SQLAlchemy 1.4?](migration_14.html)
    document.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 上述项目链接到在 SQLAlchemy 1.4 中介绍这些新范式的描述，位于[SQLAlchemy 1.4 中的新功能是什么？](migration_14.html)文档中。
- en: 'For SQLAlchemy 2.0, all API features and behaviors that were marked as [deprecated
    for 2.0](migration_14.html#deprecation-20-mode) are now finalized; in particular,
    major APIs that are **no longer present** include:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 SQLAlchemy 2.0，所有被标记为[2.0 废弃的 API 特性和行为](migration_14.html#deprecation-20-mode)现在已经被最终确定；特别是，**不再存在的主要
    API**包括：
- en: '[Bound MetaData and connectionless execution](#migration-20-implicit-execution)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[元数据限制和无连接执行](#migration-20-implicit-execution)'
- en: '[Emulated autocommit on Connection](#migration-20-autocommit)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Connection 上模拟的自动提交](#migration-20-autocommit)'
- en: '[The Session.autocommit parameter / mode](#migration-20-session-autocommit)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Session.autocommit 参数/模式](#migration-20-session-autocommit)'
- en: '[List / keyword arguments to select()](#migration-20-5284)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[对 select() 的列表 / 关键字参数](#migration-20-5284)'
- en: Python 2 support
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 2 支持
- en: The above bullets refer to the most prominent fully backwards-incompatible changes
    that are finalized in the 2.0 release. The migration path for applications to
    accommodate for these changes as well as others is framed as a transition path
    first into the 1.4 series of SQLAlchemy where the “future” APIs are available
    to provide for the “2.0” way of working, and then to the 2.0 series where the
    no-longer-used APIs above and others are removed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 上述项目指的是在 2.0 版本中最突出的完全不兼容的更改，这些更改已在 2.0 发布中最终确定。应用程序适应这些更改以及其他更改的迁移路径首先是进入到
    SQLAlchemy 1.4 系列中，其中“未来”API 可用于提供“2.0”工作方式，然后是进入到 2.0 系列中，其中上述不再使用的 API 和其他 API
    被移除。
- en: The complete steps for this migration path are later in this document at [1.x
    -> 2.x Migration Overview](#migration-20-overview).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此迁移路径的完整步骤稍后在本文档的[1.x -> 2.x 迁移概览](#migration-20-overview)中。
- en: '## 1.x -> 2.x Migration Overview'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '## 1.x -> 2.x 迁移概览'
- en: The SQLAlchemy 2.0 transition presents itself in the SQLAlchemy 1.4 release
    as a series of steps that allow an application of any size or complexity to be
    migrated to SQLAlchemy 2.0 using a gradual, iterative process. Lessons learned
    from the Python 2 to Python 3 transition have inspired a system that intends to
    as great a degree as possible to not require any “breaking” changes, or any change
    that would need to be made universally or not at all.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0 迁移在 SQLAlchemy 1.4 发布中呈现为一系列步骤，允许以渐进、迭代的方式将任何大小或复杂性的应用程序迁移到 SQLAlchemy
    2.0。从 Python 2 到 Python 3 迁移中学到的经验启发了一个系统，该系统尽可能地不需要任何“破坏性”更改，或者不需要普遍进行或完全不进行的更改。
- en: As a means of both proving the 2.0 architecture as well as allowing a fully
    iterative transition environment, the entire scope of 2.0’s new APIs and features
    are present and available within the 1.4 series; this includes major new areas
    of functionality such as the SQL caching system, the new ORM statement execution
    model, new transactional paradigms for both ORM and Core, a new ORM declarative
    system that unifies classical and declarative mapping, support for Python dataclasses,
    and asyncio support for Core and ORM.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 作为验证 2.0 架构的手段，同时允许完全迭代的过渡环境，2.0 新 API 和特性的整个范围都存在于 1.4 系列中，并且可用；这包括了一些重要的新功能领域，如
    SQL 缓存系统、新的 ORM 语句执行模型、ORM 和 Core 的新事务范例、统一经典和声明性映射的新 ORM 声明系统、对 Python 数据类的支持，以及
    Core 和 ORM 的 asyncio 支持。
- en: The steps to achieve 2.0 migration are in the following subsections; overall,
    the general strategy is that once an application runs on 1.4 with all warning
    flags turned on and does not emit any 2.0-deprecation warnings, it is now **mostly**
    cross-compatible with SQLAlchemy 2.0\. **Please note there may be additional API
    and behavioral changes that may behave differently when running against SQLAlchemy
    2.0; always test code against an actual SQLAlchemy 2.0 release as the final step
    in migrating**.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 实现 2.0 迁移的步骤在以下子章节中；总体上，一般策略是一旦一个应用程序在所有警告标志都打开的情况下在 1.4 上运行，并且不发出任何 2.0 废弃警告，则该应用程序现在**基本上**与
    SQLAlchemy 2.0 兼容。**请注意，在运行针对 SQLAlchemy 2.0 的实际代码迁移的最后一步中，可能会有其他 API 和行为更改，这些更改在运行时可能会表现出不同的行为**。
- en: First Prerequisite, step one - A Working 1.3 Application
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一个先决条件，第一步 - 一个可用的 1.3 应用程序
- en: The first step is getting an existing application onto 1.4, in the case of a
    typical non trivial application, is to ensure it runs on SQLAlchemy 1.3 with no
    deprecation warnings. Release 1.4 does have a few changes linked to conditions
    that warn in previous version, including some warnings that were introduced in
    1.3, in particular some changes to the behavior of the [`relationship.viewonly`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship") and [`relationship.sync_backref`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.sync_backref
    "sqlalchemy.orm.relationship") flags.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是让现有应用程序升级到1.4，在典型的非平凡应用程序的情况下，确保它在SQLAlchemy 1.3上运行时没有弃用警告。1.4版确实有一些与之前版本中发出警告的条件相关的更改，包括一些在1.3版中引入的警告，特别是一些关于[`relationship.viewonly`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship")和[`relationship.sync_backref`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.sync_backref
    "sqlalchemy.orm.relationship")标志行为的更改。
- en: For best results, the application should be able to run, or pass all of its
    tests, with the latest SQLAlchemy 1.3 release with no SQLAlchemy deprecation warnings;
    these are warnings emitted for the [`SADeprecationWarning`](../core/exceptions.html#sqlalchemy.exc.SADeprecationWarning
    "sqlalchemy.exc.SADeprecationWarning") class.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得最佳结果，应用程序应该能够在最新的SQLAlchemy 1.3发布版中运行，或通过所有测试，而不会出现SQLAlchemy的弃用警告；这些是针对[`SADeprecationWarning`](../core/exceptions.html#sqlalchemy.exc.SADeprecationWarning
    "sqlalchemy.exc.SADeprecationWarning")类发出的警告。
- en: First Prerequisite, step two - A Working 1.4 Application
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一个先决条件，第二步 - 一个运行的1.4应用程序
- en: Once the application is good to go on SQLAlchemy 1.3, the next step is to get
    it running on SQLAlchemy 1.4\. In the vast majority of cases, applications should
    run without problems from SQLAlchemy 1.3 to 1.4\. However, it’s always the case
    between any 1.x and 1.y release, APIs and behaviors have changed either subtly
    or in some cases a little less subtly, and the SQLAlchemy project always gets
    a good deal of regression reports for the first few months.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序一旦在SQLAlchemy 1.3上准备就绪，下一步就是让它在SQLAlchemy 1.4上运行。在绝大多数情况下，应用程序应该可以在从SQLAlchemy
    1.3到1.4的过程中无问题地运行。然而，像任何1.x和1.y版本之间的情况一样，API和行为可能会发生细微的或在某些情况下略微显著的变化，SQLAlchemy项目总是在前几个月收到大量的回归报告。
- en: 'The 1.x->1.y release process usually has a few changes around the margins that
    are a little bit more dramatic and are based around use cases that are expected
    to be very seldom if at all used. For 1.4, the changes identified as being in
    this realm are as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 1.x->1.y发布过程通常会围绕一些边缘情况进行一些比较激进的更改，这些更改基于预计将很少或根本不会使用的用例。对于1.4，被确定为属于这个领域的更改如下：
- en: '[The URL object is now immutable](migration_14.html#change-5526) - this impacts
    code that would be manipulating the [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object and may impact code that makes use of the [`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") extension point. This is an uncommon case
    but may affect in particular some test suites that are making use of special database
    provisioning logic. A github search for code that uses the relatively new and
    little-known [`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") class found two projects that were unaffected
    by the change.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[URL对象现在是不可变的](migration_14.html#change-5526) - 这影响了对[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")对象进行操作的代码，可能会影响到使用[`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin")扩展点的代码。这是一个不常见的情况，但可能特别影响到一些使用特殊数据库提供逻辑的测试套件。通过对使用相对较新且鲜为人知的[`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin")类的代码进行Github搜索，找到了两个不受此更改影响的项目。'
- en: '[A SELECT statement is no longer implicitly considered to be a FROM clause](migration_14.html#change-4617)
    - this change may impact code that was somehow relying upon behavior that was
    mostly unusable in the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, where it would create unnamed subqueries
    that were usually confusing and non-working. These subqueries would be rejected
    by most databases in any case as a name is usually required except on SQLite,
    however it is possible some applications will need to adjust some queries that
    are inadvertently relying upon this.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SELECT 语句不再隐式视为 FROM 子句](migration_14.html#change-4617) - 这个变化可能会影响一些依赖于 [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造的行为的代码，它会创建通常令人困惑且无法工作的未命名子查询。这些子查询在大多数数据库中都会被拒绝，因为通常需要一个名称，除了
    SQLite 外。然而，一些应用程序可能需要调整一些意外依赖于此的查询。'
- en: '[select().join() and outerjoin() add JOIN criteria to the current query, rather
    than creating a subquery](migration_14.html#change-select-join) - somewhat related,
    the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    class featured `.join()` and `.outerjoin()` methods that implicitly created a
    subquery and then returned a [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") construct, which again would be mostly useless
    and produced lots of confusion. The decision was made to move forward with the
    vastly more useful 2.0-style join-building approach where these methods now work
    the same way as the ORM [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[select().join() 和 outerjoin() 将 JOIN 条件添加到当前查询中，而不是创建子查询](migration_14.html#change-select-join)
    - 有些相关的是，[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    类中的 `.join()` 和 `.outerjoin()` 方法隐式地创建了一个子查询，然后返回一个 [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") 构造，这在大多数情况下是没有用的，会导致很多混乱。决定采用更加有用的 2.0 风格的连接构建方法，这些方法现在与
    ORM [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    方法的工作方式相同。'
- en: '[Many Core and ORM statement objects now perform much of their construction
    and validation in the compile phase](migration_14.html#change-deferred-construction)
    - some error messages related to construction of a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") or [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") may not be emitted until compilation / execution,
    rather than at construction time. This might impact some test suites that are
    testing against failure modes.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[许多 Core 和 ORM 语句对象现在在编译阶段执行大部分构建和验证工作](migration_14.html#change-deferred-construction)
    - 一些与构建 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    或 [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    相关的错误消息可能直到编译 / 执行阶段才会被发出，而不是在构建时。这可能会影响一些针对失败模式进行测试的测试套件。'
- en: For the full overview of SQLAlchemy 1.4 changes, see the [What’s New in SQLAlchemy
    1.4?](migration_14.html) document.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 SQLAlchemy 1.4 变化的完整概述，请参阅 [SQLAlchemy 1.4 有什么新特性？](migration_14.html) 文档。
- en: Migration to 2.0 Step One - Python 3 only (Python 3.7 minimum for 2.0 compatibility)
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移至 2.0 第一步 - 仅支持 Python 3（2.0 兼容性最低要求 Python 3.7）
- en: SQLAlchemy 2.0 was first inspired by the fact that Python 2’s EOL was in 2020.
    SQLAlchemy is taking a longer period of time than other major projects to drop
    Python 2.7 support. However, in order to use SQLAlchemy 2.0, the application will
    need to be runnable on at least **Python 3.7**. SQLAlchemy 1.4 supports Python
    3.6 or newer within the Python 3 series; throughout the 1.4 series, the application
    can remain running on Python 2.7 or on at least Python 3.6\. Version 2.0 however
    starts at Python 3.7.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0 最初是受到 Python 2 的 EOL 是在 2020 年的事实启发的。SQLAlchemy 比其他主要项目花费更长的时间来放弃对
    Python 2.7 的支持。然而，为了使用 SQLAlchemy 2.0，应用程序需要至少在 **Python 3.7** 上可运行。SQLAlchemy
    1.4 在 Python 3 系列中支持 Python 3.6 或更新版本；在 1.4 系列中，应用程序可以继续在 Python 2.7 或至少 Python
    3.6 上运行。然而，版本 2.0 从 Python 3.7 开始。
- en: '### Migration to 2.0 Step Two - Turn on RemovedIn20Warnings'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '### 迁移至 2.0 第二步 - 打开 RemovedIn20Warnings'
- en: SQLAlchemy 1.4 features a conditional deprecation warning system inspired by
    the Python “-3” flag that would indicate legacy patterns in a running application.
    For SQLAlchemy 1.4, the `RemovedIn20Warning` deprecation class is emitted only
    when an environment variable `SQLALCHEMY_WARN_20` is set to either of `true` or
    `1`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 1.4 版本提供了一个条件化的弃用警告系统，灵感来自于 Python 的“-3”标志，该标志会指示运行中应用程序中的传统模式。对于
    SQLAlchemy 1.4，只有当环境变量 `SQLALCHEMY_WARN_20` 设置为 `true` 或 `1` 时，才会发出 `RemovedIn20Warning`
    弃用类。
- en: 'Given the example program below:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 给出以下示例程序：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The above program uses several patterns that many users will already identify
    as “legacy”, namely the use of the `Engine.execute()` method that’s part of the
    “connectionless execution” API. When we run the above program against 1.4, it
    returns a single line:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序使用了许多用户已经识别为“传统”的模式，即使用了“无连接执行”API 的 `Engine.execute()` 方法。当我们针对 1.4 运行上述程序时，它返回一行：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To enable “2.0 deprecations mode”, we enable the `SQLALCHEMY_WARN_20=1` variable,
    and additionally ensure that a [warnings filter](https://docs.python.org/3/library/warnings.html#the-warnings-filter)
    that will not suppress any warnings is selected:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用“2.0 弃用模式”，我们启用 `SQLALCHEMY_WARN_20=1` 变量，并确保选择了一个不会抑制任何警告的 [警告过滤器](https://docs.python.org/3/library/warnings.html#the-warnings-filter)：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Since the reported warning location is not always in the correct place, locating
    the offending code may be difficult without the full stacktrace. This can be achieved
    by transforming the warnings to exceptions by specifying the `error` warning filter,
    using Python option `-W error::DeprecationWarning`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于报告的警告位置并不总是正确的，如果没有完整的堆栈跟踪，定位有问题的代码可能会很困难。可以通过指定 `error` 警告过滤器将警告转换为异常，使用
    Python 选项 `-W error::DeprecationWarning` 来实现这一点。
- en: 'With warnings turned on, our program now has a lot to say:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 打开警告后，我们的程序现在有很多话要说：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'With the above guidance, we can migrate our program to use 2.0 styles, and
    as a bonus our program is much clearer:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述指导，我们可以将我们的程序迁移到使用 2.0 样式，作为奖励，我们的程序更加清晰：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The goal of “2.0 deprecations mode” is that a program which runs with no `RemovedIn20Warning`
    warnings with “2.0 deprecations mode” turned on is then ready to run in SQLAlchemy
    2.0.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: “2.0 弃用模式”的目标是，当使用“2.0 弃用模式”运行时没有 `RemovedIn20Warning` 警告的程序，然后准备好在 SQLAlchemy
    2.0 中运行。
- en: Migration to 2.0 Step Three - Resolve all RemovedIn20Warnings
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移到 2.0 第三步 - 解决所有的 RemovedIn20Warnings
- en: 'Code can be developed iteratively to resolve these warnings. Within the SQLAlchemy
    project itself, the approach taken is as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 可以迭代地开发代码来解决这些警告。在 SQLAlchemy 项目本身中，采取的方法如下：
- en: enable the `SQLALCHEMY_WARN_20=1` environment variable in the test suite, for
    SQLAlchemy this is in the tox.ini file
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试套件中启用 `SQLALCHEMY_WARN_20=1` 环境变量，对于 SQLAlchemy 来说，这在 tox.ini 文件中。
- en: 'Within the setup for the test suite, set up a series of warnings filters that
    will select for particular subsets of warnings to either raise an exception, or
    to be ignored (or logged). Work with just one subgroup of warnings at a time.
    Below, a warnings filter is configured for an application where the change to
    the Core level `.execute()` calls will be needed in order for all tests to pass,
    but all other 2.0-style warnings will be suppressed:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试套件的设置中，设置一系列警告过滤器，以选择特定子集的警告来引发异常，或者忽略（或记录）它们。一次只处理一个警告子组。下面，配置了一个警告过滤器，用于一个应用程序，其中需要更改
    Core 级别的 `.execute()` 调用，以便所有测试都通过，但是所有其他 2.0 样式的警告将被抑制：
- en: '[PRE5]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As each sub-category of warnings are resolved in the application, new warnings
    that are caught by the “always” filter can be added to the list of “errors” to
    be resolved.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当应用程序中的每个警告子类被解决时，可以将被“always”过滤器捕获的新警告添加到要解决的“错误”列表中。
- en: Once no more warnings are emitted, the filter can be removed.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦不再发出警告，就可以移除过滤器。
- en: Migration to 2.0 Step Four - Use the `future` flag on Engine
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移到 2.0 第四步 - 在 Engine 上使用 `future` 标志
- en: The [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    object features an updated transaction-level API in version 2.0\. In 1.4, this
    new API is available by passing the flag `future=True` to the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    对象在 2.0 版本中具有更新的事务级 API。在 1.4 中，通过将标志 `future=True` 传递给 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 函数可以使用这个新 API。'
- en: When the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag is used, the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects support the 2.0 API fully and not at all
    any legacy features, including the new argument format for [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), the removal of “implicit autocommit”,
    string statements require the [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct unless the [`Connection.exec_driver_sql()`](../core/connections.html#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") method is used, and connectionless
    execution from the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is removed.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine")标志时，[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")和[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象完全支持 2.0 API，不再支持任何旧特性，包括[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")的新参数格式、去除“隐式自动提交”、字符串语句要求使用[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造，除非使用[`Connection.exec_driver_sql()`](../core/connections.html#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql")方法，以及从[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")进行无连接执行已被移除。
- en: If all `RemovedIn20Warning` warnings have been resolved regarding use of the
    [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    then the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag may be enabled and there should be no errors
    raised.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果关于[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")和[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")使用的所有`RemovedIn20Warning`警告都已解决，则可以启用[`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine")标志，并且不应引发任何错误。
- en: 'The new engine is described at [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") which delivers a new [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object. In addition to the above changes, the,
    [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object features [`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") and [`Connection.rollback()`](../core/connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") methods, to support the new “commit-as-you-go”
    mode of operation:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 新引擎的描述见[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")，它提供了一个新的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。除了上述更改之外，[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象具有[`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")和[`Connection.rollback()`](../core/connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback")方法，以支持新的“随时提交”操作模式：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Migration to 2.0 Step Five - Use the `future` flag on Session
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移到 2.0 第五步 - 在会话上使用`future`标志
- en: The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object also features an updated transaction/connection level API in version 2.0\.
    This API is available in 1.4 using the [`Session.future`](../orm/session_api.html#sqlalchemy.orm.Session.params.future
    "sqlalchemy.orm.Session") flag on [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") or on [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象还在版本
    2.0 中提供了更新的事务/连接级API。此API在 1.4 中可通过在[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")或[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")上使用[`Session.future`](../orm/session_api.html#sqlalchemy.orm.Session.params.future
    "sqlalchemy.orm.Session")标志获得。'
- en: 'The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object supports “future” mode in place, and involves these changes:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象支持“future”模式，并涉及以下更改：'
- en: The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    no longer supports “bound metadata” when it resolves the engine to be used for
    connectivity. This means that an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object **must** be passed to the constructor (this
    may be either a legacy or future style object).
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当解析用于连接的引擎时，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    不再支持“绑定元数据”。这意味着必须将一个 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象传递给构造函数（这可以是传统或未来风格的对象）。
- en: The [`Session.begin.subtransactions`](../orm/session_api.html#sqlalchemy.orm.Session.begin.params.subtransactions
    "sqlalchemy.orm.Session.begin") flag is no longer supported.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不再支持 [`Session.begin.subtransactions`](../orm/session_api.html#sqlalchemy.orm.Session.begin.params.subtransactions
    "sqlalchemy.orm.Session.begin") 标志。
- en: The [`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") method always emits a COMMIT to the database,
    rather than attempting to reconcile “subtransactions”.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") 方法总是向数据库发出 COMMIT，而不是尝试协调“子事务”。'
- en: The [`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method always rolls back the full stack of
    transactions at once, rather than attempting to keep “subtransactions” in place.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") 方法总是一次性回滚整个事务堆栈，而不是尝试保持“子事务”不变。'
- en: 'The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    also supports more flexible creational patterns in 1.4 which are now closely matched
    to the patterns used by the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object. Highlights include that the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") may be used as a context manager:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    也支持更灵活的创建模式，这些模式现在与 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象使用的模式紧密匹配。重点包括 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 可以用作上下文管理器：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In addition, the [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") object supports a [`sessionmaker.begin()`](../orm/session_api.html#sqlalchemy.orm.sessionmaker.begin
    "sqlalchemy.orm.sessionmaker.begin") context manager that will create a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and begin /commit a transaction in one block:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    对象支持一个 [`sessionmaker.begin()`](../orm/session_api.html#sqlalchemy.orm.sessionmaker.begin
    "sqlalchemy.orm.sessionmaker.begin") 上下文管理器，它将创建一个 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 并在一个块中开始/提交事务：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: See the section [Session-level vs. Engine level transaction control](../orm/session_transaction.html#orm-session-vs-engine)
    for a comparison of [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") creational patterns compared to those of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [Session-level vs. Engine level transaction control](../orm/session_transaction.html#orm-session-vs-engine)
    部分，了解 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    创建模式与 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    创建模式的比较。
- en: Once the application passes all tests/ runs with `SQLALCHEMY_WARN_20=1` and
    all `exc.RemovedIn20Warning` occurrences set to raise an error, **the application
    is ready!**.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序通过所有测试/使用 `SQLALCHEMY_WARN_20=1` 运行，并将所有 `exc.RemovedIn20Warning` 出现设置为引发错误，**应用程序就准备好了！**。
- en: The sections that follow will detail the specific changes to make for all major
    API modifications.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分将详细说明所有主要 API 修改所需进行的特定更改。
- en: '### Migration to 2.0 Step Six - Add `__allow_unmapped__` to explicitly typed
    ORM models'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '### 迁移到 2.0 第六步 - 为显式类型的 ORM 模型添加 `__allow_unmapped__`'
- en: SQLAlchemy 2.0 has new support for runtime interpretation of [**PEP 484**](https://peps.python.org/pep-0484/)
    typing annotations on ORM models. A requirement of these annotations is that they
    must make use of the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    generic container. Annotations which don’t use [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") which link to constructs such as [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") will raise errors in Python, as they suggest mis-configurations.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0 对ORM模型上的[**PEP 484**](https://peps.python.org/pep-0484/)类型注释进行了新的运行时解释支持。这些注释的要求是它们必须使用[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")通用容器。不使用[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")的注释，例如链接到[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")等构造的，将在Python中引发错误，因为它们暗示了错误的配置。
- en: 'SQLAlchemy applications that use the [Mypy plugin](../orm/extensions/mypy.html)
    with explicit annotations that don’t use [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") in their annotations are subject to these errors, as
    would occur in the example below:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[Mypy插件](../orm/extensions/mypy.html)的SQLAlchemy应用，其中明确注释不使用[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")在其注释中的，会遇到这些错误，就像下面的示例中会发生的一样：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Above, the `Foo.bars` and `Bar.foo` [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") declarations will raise an error at class construction
    time because they don’t use [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") (by contrast, the annotations that use [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") are ignored by 2.0, as these are able to be recognized
    as a legacy configuration style). To allow all annotations that don’t use [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") to pass without error, the `__allow_unmapped__` attribute
    may be used on the class or any subclasses, which will cause the annotations in
    these cases to be ignored completely by the new Declarative system.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的`Foo.bars`和`Bar.foo`的[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")声明在类构建时会引发错误，因为它们没有使用[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")（相比之下，使用[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的注释在2.0中被忽略，因为这些能够被识别为传统配置风格）。为了允许所有不使用[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")的注释通过而不引发错误，可以在类或任何子类上使用`__allow_unmapped__`属性，这将导致在这些情况下这些注释被新的Declarative系统完全忽略。
- en: Note
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `__allow_unmapped__` directive applies **only** to the *runtime* behavior
    of the ORM. It does not affect the behavior of Mypy, and the above mapping as
    written still requires that the Mypy plugin be installed. For fully 2.0 style
    ORM models that will type correctly under Mypy *without* a plugin, follow the
    migration steps at [Migrating an Existing Mapping](whatsnew_20.html#whatsnew-20-orm-typing-migration).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`__allow_unmapped__`指令**仅**适用于ORM的*运行时*行为。它不会影响Mypy的行为，上述映射仍然要求安装Mypy插件。对于完全符合2.0风格的ORM模型，可以在[Migrating
    an Existing Mapping](whatsnew_20.html#whatsnew-20-orm-typing-migration)中遵循迁移步骤，以便在Mypy下正确类型化*无需*插件。'
- en: 'The example below illustrates the application of `__allow_unmapped__` to the
    Declarative `Base` class, where it will take effect for all classes that descend
    from `Base`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了将`__allow_unmapped__`应用于Declarative `Base`类的应用，它将对所有从`Base`继承的类生效：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Changed in version 2.0.0beta3: - improved the `__allow_unmapped__` attribute
    support to allow for 1.4-style explicit annotated relationships that don’t use
    [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    to remain usable.  ### Migration to 2.0 Step Seven - Test against a SQLAlchemy
    2.0 Release'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在2.0.0beta3版本中更改：- 改进了`__allow_unmapped__`属性支持，以允许不使用[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")的1.4风格显式注释关系保持可用。### 迁移到2.0第七步 - 针对SQLAlchemy 2.0版本进行测试
- en: As mentioned previously, SQLAlchemy 2.0 has additional API and behavioral changes
    that are intended to be backwards compatible, however may introduce some incompatibilities
    nonetheless. Therefore after the overall porting process is complete, the final
    step is to test against the most recent release of SQLAlchemy 2.0 to correct for
    any remaining issues that might be present.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，SQLAlchemy 2.0 有一些额外的 API 和行为变化，旨在向后兼容，但可能仍会引入一些不兼容性。因此，在整个移植过程完成后，最后一步是针对
    SQLAlchemy 2.0 的最新版本进行测试，以纠正可能存在的任何剩余问题。
- en: The guide at [What’s New in SQLAlchemy 2.0?](whatsnew_20.html) provides an overview
    of new features and behaviors for SQLAlchemy 2.0 which extend beyond the base
    set of 1.4->2.0 API changes.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQLAlchemy 2.0 中的新特性是什么？](whatsnew_20.html) 提供了 SQLAlchemy 2.0 的新特性和行为的概述，这些特性和行为超出了
    1.4->2.0 API 变化的基本集合。'
- en: 2.0 Migration - Core Connection / Transaction
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0 迁移 - 核心连接 / 事务
- en: '### Library-level (but not driver level) “Autocommit” removed from both Core
    and ORM'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '### 库级别的（但不是驱动级别的）“自动提交”已从核心和ORM中删除'
- en: '**Synopsis**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'In SQLAlchemy 1.x, the following statements will automatically commit the underlying
    DBAPI transaction, but in SQLAlchemy 2.0 this will not occur:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLAlchemy 1.x 中，以下语句将自动提交底层的 DBAPI 事务，但在 SQLAlchemy 2.0 中不会发生：
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Nor will this autocommit:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个自动提交也不会发生：
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The common workaround for custom DML that requires commit, the “autocommit”
    execution option, will be removed:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要提交的自定义 DML 的常见解决方法，“自动提交”执行选项将被移除：
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Migration to 2.0**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'The method that is cross-compatible with [1.x style](../glossary.html#term-1.x-style)
    and [2.0 style](../glossary.html#term-2.0-style) execution is to make use of the
    [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method, or the [`Engine.begin()`](../core/connections.html#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin") context manager:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [1.x 风格](../glossary.html#term-1.x-style) 和 [2.0 风格](../glossary.html#term-2.0-style)
    执行兼容的方法是使用 [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 方法，或者使用 [`Engine.begin()`](../core/connections.html#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin") 上下文管理器：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When using [2.0 style](../glossary.html#term-2.0-style) with the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag, “commit as you go” style may also be used, as
    the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    features **autobegin** behavior, which takes place when a statement is first invoked
    in the absence of an explicit call to [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin"):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") 标志和 [2.0 风格](../glossary.html#term-2.0-style) 时，“逐步提交”风格也可以使用，因为
    [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    特性具有 **autobegin** 行为，当在没有显式调用 [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 的情况下首次调用语句时会发生：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When [2.0 deprecations mode](#migration-20-deprecations-mode) is enabled, a
    warning will emit when the deprecated “autocommit” feature takes place, indicating
    those places where an explicit transaction should be noted.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当启用 [2.0 弃用模式](#migration-20-deprecations-mode) 时，将会发出警告，指示发生了已弃用的“自动提交”功能的地方，表明应该注意明确事务的地方。
- en: '**Discussion**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: SQLAlchemy’s first releases were at odds with the spirit of the Python DBAPI
    ([**PEP 249**](https://peps.python.org/pep-0249/)) in that it tried to hide [**PEP
    249**](https://peps.python.org/pep-0249/)’s emphasis on “implicit begin” and “explicit
    commit” of transactions. Fifteen years later we now see this was essentially a
    mistake, as SQLAlchemy’s many patterns that attempt to “hide” the presence of
    a transaction make for a more complex API which works inconsistently and is extremely
    confusing to especially those users who are new to relational databases and ACID
    transactions in general. SQLAlchemy 2.0 will do away with all attempts to implicitly
    commit transactions, and usage patterns will always require that the user demarcate
    the “beginning” and the “end” of a transaction in some way, in the same way as
    reading or writing to a file in Python has a “beginning” and an “end”.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 的第一个版本与 Python DBAPI（[**PEP 249**](https://peps.python.org/pep-0249/)）的精神不合，因为它试图隐藏
    [**PEP 249**](https://peps.python.org/pep-0249/) 强调的“隐式开始”和“显式提交”事务。十五年后，我们现在认识到这实际上是一个错误，因为
    SQLAlchemy 的许多尝试“隐藏”事务存在的模式导致 API 更复杂，工作不一致，对那些对关系数据库和 ACID 事务一般都是新手的用户来说极其混乱。SQLAlchemy
    2.0 将取消所有隐式提交事务的尝试，使用模式将始终要求用户以某种方式标记事务的“开始”和“结束”，就像在 Python 中读取或写入文件具有“开始”和“结束”一样。
- en: In the case of autocommit for a pure textual statement, there is actually a
    regular expression that parses every statement in order to detect autocommit!
    Not surprisingly, this regex is continuously failing to accommodate for various
    kinds of statements and stored procedures that imply a “write” to the database,
    leading to ongoing confusion as some statements produce results in the database
    and others don’t. By preventing the user from being aware of the transactional
    concept, we get a lot of bug reports on this one because users don’t understand
    that databases always use a transaction, whether or not some layer is autocommitting
    it.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 对于纯文本语句的自动提交情况，实际上有一个正则表达式来解析每个语句以检测自动提交！毫不奇怪，这个正则表达式不断地无法适应各种类型的语句和暗示向数据库“写入”的存储过程，导致持续的混淆，因为一些语句在数据库中产生结果，而其他语句则没有。通过阻止用户意识到事务概念，我们在这一点上收到了很多错误报告，因为用户不理解无论某些层是否自动提交事务，数据库都会始终使用事务。
- en: 'SQLAlchemy 2.0 will require that all database actions at every level be explicit
    as to how the transaction should be used. For the vast majority of Core use cases,
    it’s the pattern that is already recommended:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0 将要求在每个级别上所有数据库操作都明确指明事务的使用方式。对于绝大多数核心用例，已经推荐的模式是：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For “commit as you go, or rollback instead” usage, which resembles how the
    [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is normally used today, the “future” version of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), which is the one that is returned from an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") that was created using the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag, includes new [`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") and [`Connection.rollback()`](../core/connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") methods, which act upon a transaction
    that is now begun automatically when a statement is first invoked:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“随时提交，或者回滚”的用法，这类似于如何通常使用 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，即 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 创建时使用了 [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") 标志后返回的“未来”版本 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，包含新的 [`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") 和 [`Connection.rollback()`](../core/connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") 方法，这些方法会在首次调用语句时自动开始事务：
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Above, the `engine.connect()` method will return a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") that features **autobegin**, meaning the `begin()`
    event is emitted when the execute method is first used (note however that there
    is no actual “BEGIN” in the Python DBAPI). “autobegin” is a new pattern in SQLAlchemy
    1.4 that is featured both by [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") as well as the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object; autobegin allows that the [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method may be called explicitly when the
    object is first acquired, for schemes that wish to demarcate the beginning of
    the transaction, but if the method is not called, then it occurs implicitly when
    work is first done on the object.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，`engine.connect()`方法将返回一个具有**自动开始**功能的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，这意味着在首次使用执行方法时会发出`begin()`事件（注意，Python DBAPI中实际上没有“BEGIN”）。“自动开始”是SQLAlchemy
    1.4中的一种新模式，它既由[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")特性，也由ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象特性；自动开始允许在首次获取对象时显式调用[`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法，以便为希望标记事务开始的模式提供方案，但如果不调用该方法，则在首次对对象进行工作时隐式发生。
- en: The removal of “autocommit” is closely related to the removal of “connectionless”
    execution discussed at [“Implicit” and “Connectionless” execution, “bound metadata”
    removed](#migration-20-implicit-execution). All of these legacy patterns built
    up from the fact that Python did not have context managers or decorators when
    SQLAlchemy was first created, so there were no convenient idiomatic patterns for
    demarcating the use of a resource.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: “隐式”和“无连接”执行，“绑定元数据”已移除的移除与讨论[“隐式”和“无连接”执行，移除“绑定元数据”](#migration-20-implicit-execution)密切相关。所有这些传统模式都是从Python在SQLAlchemy首次创建时没有上下文管理器或装饰器这一事实上建立起来的，因此没有便捷的惯用模式来标记资源的使用。
- en: Driver-level autocommit remains available
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 驱动程序级别的自动提交仍然可用
- en: 'True “autocommit” behavior is now widely available with most DBAPI implementations,
    and is supported by SQLAlchemy via the [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameter as discussed at [Setting
    Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit).
    True autocommit is treated as an “isolation level” so that the structure of application
    code does not change when autocommit is used; the [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") context manager as well as methods like
    [`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") may still be used, they are simply no-ops
    at the database driver level when DBAPI-level autocommit is turned on.  ### “Implicit”
    and “Connectionless” execution, “bound metadata” removed'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的“自动提交”行为现在已经在大多数DBAPI实现中广泛可用，并且通过[`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")参数由SQLAlchemy支持，如[设置事务隔离级别，包括DBAPI自动提交](../core/connections.html#dbapi-autocommit)中所讨论的。真正的自动提交被视为一种“隔离级别”，因此当使用自动提交时，应用程序代码的结构不会发生变化；[`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")上下文管理器以及诸如[`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")之类的方法仍然可以使用，它们在数据库驱动程序级别只是无操作。
- en: '**Synopsis**'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The ability to associate an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") with a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object, which then makes available a range of so-called
    “connectionless” execution patterns, is removed:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 将[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")与[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象关联起来的能力已被移除，这样就可以使用一系列所谓的“无连接”执行模式：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Migration to 2.0**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**2.0迁移**'
- en: 'For schema level patterns, explicit use of an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is required. The [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") may still be used directly as the source of connectivity
    for a [`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") operation or autoload operation. For
    executing statements, only the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object has a [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method (in addition to the ORM-level [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method):'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 对于架构级模式，需要明确使用[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")或[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")仍然可以直接用作[`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")操作或autoload操作的连接源。对于执行语句，只有[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象具有[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法（除了ORM级别的[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法）：
- en: '[PRE19]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Discussion**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The Core documentation has already standardized on the desired pattern here,
    so it is likely that most modern applications would not have to change much in
    any case, however there are likely many applications that still rely upon `engine.execute()`
    calls that will need to be adjusted.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 核心文档已经在这里规范了所需的模式，因此大多数现代应用程序可能不需要在任何情况下进行太多更改，但是可能仍然有许多应用程序依赖于`engine.execute()`调用，这些调用将需要进行调整。
- en: '“Connectionless” execution refers to the still fairly popular pattern of invoking
    `.execute()` from the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"):'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: “无连接”执行指的是仍然相当流行的从[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")中调用`.execute()`的模式：
- en: '[PRE20]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The above operation implicitly procures a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, and runs the `.execute()` method on it.
    While this appears to be a simple convenience feature, it has been shown to give
    rise to several issues:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 上述操作隐式地获取了一个[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象，并在其上运行`.execute()`方法。虽然这似乎是一个简单的便利功能，但已经证明它引起了几个问题：
- en: Programs that feature extended strings of `engine.execute()` calls have become
    prevalent, overusing a feature that was intended to be seldom used and leading
    to inefficient non-transactional applications. New users are confused as to the
    difference between `engine.execute()` and `connection.execute()` and the nuance
    between these two approaches is often not understood.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序中出现了大量的`engine.execute()`调用，这已经变得普遍，过度使用了原本应该很少使用的功能，并导致了低效的非事务性应用程序。新用户对于`engine.execute()`和`connection.execute()`之间的区别感到困惑，这两种方法之间的微妙差别通常不被理解。
- en: The feature relies upon the “application level autocommit” feature in order
    to make sense, which itself is also being removed as it is also [inefficient and
    misleading](#migration-20-autocommit).
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该功能依赖于“应用程序级自动提交”功能才有意义，该功能本身也正在被删除，因为它也是[低效和误导性的](#migration-20-autocommit)。
- en: In order to handle result sets, `Engine.execute` returns a result object with
    unconsumed cursor results. This cursor result necessarily still links to the DBAPI
    connection which remains in an open transaction, all of which is released once
    the result set has fully consumed the rows waiting within the cursor. This means
    that `Engine.execute` does not actually close out the connection resources that
    it claims to be managing when the call is complete. SQLAlchemy’s “autoclose” behavior
    is well-tuned enough that users don’t generally report any negative effects from
    this system, however it remains an overly implicit and inefficient system left
    over from SQLAlchemy’s earliest releases.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了处理结果集，`Engine.execute` 返回一个带有未消耗的游标结果的结果对象。这个游标结果必然仍然链接到保持打开事务的 DBAPI 连接，所有这些在结果集完全消耗了等待在游标中的行之后释放。这意味着
    `Engine.execute` 实际上并没有在调用完成时关闭它声称正在管理的连接资源。SQLAlchemy 的“自动关闭”行为调整得足够好，以至于用户通常不会报告这个系统的任何负面影响，然而，这仍然是
    SQLAlchemy 最早版本中遗留下来的一个过于隐式和低效的系统。
- en: 'The removal of “connectionless” execution then leads to the removal of an even
    more legacy pattern, that of “implicit, connectionless” execution:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 移除“无连接”执行，然后移除一个更加遗留的模式，“隐式、无连接”执行：
- en: '[PRE21]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The above pattern has all the issues of “connectionless” execution, plus it
    relies upon the “bound metadata” pattern, which SQLAlchemy has tried to de-emphasize
    for many years. This was SQLAlchemy’s very first advertised usage model in version
    0.1, which became obsolete almost immediately when the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object was introduced and later Python context
    managers provided a better pattern for using resources within a fixed scope.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 上述模式具有“无连接”执行的所有问题，而且它依赖于“绑定元数据”模式，SQLAlchemy 多年来一直试图减少使用这种模式。这是 SQLAlchemy
    在 0.1 版本中首次宣传的使用模型，当 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象被引入并且后来 Python 上下文管理器提供了更好的在固定范围内使用资源的模式时，这种模式几乎立即过时。
- en: With implicit execution removed, “bound metadata” itself also no longer has
    a purpose within this system. In modern use “bound metadata” tends to still be
    somewhat convenient for working within [`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") calls as well as with [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects, however having these functions receive an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") explicitly provides for clearer application design.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 随着隐式执行的移除，“绑定元数据”本身也不再在此系统中有用。在现代用法中，“绑定元数据”仍然在 [`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 调用以及 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 对象中有些方便，然而，让这些函数显式接收一个 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 提供了更清晰的应用程序设计。
- en: Many Choices becomes One Choice
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 多种选择变成了一个选择。
- en: 'Overall, the above executional patterns were introduced in SQLAlchemy’s very
    first 0.1 release before the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object even existed. After many years of de-emphasizing
    these patterns, “implicit, connectionless” execution and “bound metadata” are
    no longer as widely used so in 2.0 we seek to finally reduce the number of choices
    for how to execute a statement in Core from “many choices”:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，上述执行模式是在 SQLAlchemy 的第一个 0.1 版本发布之前引入的。经过多年的减少这些模式的使用，“隐式、无连接”执行和“绑定元数据”不再像以前那样广泛使用，所以在
    2.0 中，我们试图最终减少从“多种选择”中执行语句到 Core 的选择数量：
- en: '[PRE22]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'to “one choice”, where by “one choice” we mean “explicit connection with explicit
    transaction”; there are still a few ways to demarcate transaction blocks depending
    on need. The “one choice” is to procure a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and then to explicitly demarcate the transaction,
    in the case that the operation is a write operation:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“一个选择”，我们指的是“与显式事务的显式连接”；根据需要，仍然有一些方法来标记事务块。在写操作的情况下，“一个选择”是获取[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，然后显式地标记事务：
- en: '[PRE23]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: execute() method more strict, execution options are more prominent
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`execute()` 方法更加严格，执行选项更加突出。'
- en: '**Synopsis**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The argument patterns that may be used with the [`sqlalchemy.engine.Connection()`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") execute method in SQLAlchemy 2.0 are highly simplified,
    removing many previously available argument patterns. The new API in the 1.4 series
    is described at [`sqlalchemy.engine.Connection()`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). The examples below illustrate the patterns that
    require modification:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy 2.0中可能与[`sqlalchemy.engine.Connection()`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") execute方法一起使用的参数模式已经大大简化，删除了许多以前可用的参数模式。 1.4系列中的新API在[`sqlalchemy.engine.Connection()`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")中描述。下面的示例说明了需要修改的模式：
- en: '[PRE24]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Migration to 2.0**'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0**'
- en: 'The new [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method now accepts a subset of the argument
    styles that are accepted by the 1.x [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, so the following code is cross-compatible
    between 1.x and 2.0:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 新的[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法现在接受1.x [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法接受的参数样式的子集，因此以下代码在1.x和2.0之间是兼容的：
- en: '[PRE25]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**Discussion**'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The use of `*args` and `**kwargs` has been removed both to remove the complexity
    of guessing what kind of arguments were passed to the method, as well as to make
    room for other options, namely the [`Connection.execute.execution_options`](../core/connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") dictionary that is now available to provide
    options on a per statement basis. The method is also modified so that its use
    pattern matches that of the [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method, which is a much more prominent API in
    2.0 style.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 删除了使用`*args`和`**kwargs`的方式，这样做既可以消除对方法传递了哪种类型参数的猜测的复杂性，又可以为其他选项留出空间，即现在可用于根据每个语句提供选项的[`Connection.execute.execution_options`](../core/connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") 字典。该方法也经过修改，以使其使用模式与[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法相匹配，后者在2.0风格中是一个更加突出的API。
- en: The removal of direct string SQL is to resolve an inconsistency between [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") and [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"), where in the former case the string is passed
    to the driver raw, and in the latter case it is first converted to a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct. By allowing only [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") this also limits the accepted parameter format
    to “named” and not “positional”. Finally, the string SQL use case is becoming
    more subject to scrutiny from a security perspective, and the [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct has come to represent an explicit
    boundary into the textual SQL realm where attention to untrusted user input must
    be given.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 删除直接字符串SQL是为了解决[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")和[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")之间的不一致性，前者情况下字符串直接传递给驱动程序原始，而后者情况下首先将其转换为[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造。通过仅允许[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")，这也将接受的参数格式限制为“命名”而不是“位置”。最后，从安全角度来看，字符串SQL用例越来越受到审查，[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造已经成为文本SQL领域的明确边界，需要注意不受信任的用户输入。
- en: '### Result rows act like named tuples'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '### 结果行的行为类似于命名元组'
- en: '**Synopsis**'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: 'Version 1.4 introduces an [all new Result object](migration_14.html#change-result-14-core)
    that in turn returns [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, which behave like named tuples when using “future” mode:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 引入了一个[全新的 Result 对象](migration_14.html#change-result-14-core)，该对象反过来返回
    [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象，当使用“future”模式时，它们的行为类似于命名元组：
- en: '[PRE26]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**Migration to 2.0**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: Application code or test suites that are testing for a particular key being
    present in a row would need to test the `row.keys()` collection instead. This
    is however an unusual use case as a result row is typically used by code that
    already knows what columns are present within it.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序代码或测试套件，如果正在测试行中是否存在特定键，则需要测试 `row.keys()` 集合。但是，这是一个不太常见的用例，因为结果行通常由已经知道其中存在哪些列的代码使用。
- en: '**Discussion**'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: Already part of 1.4, the previous `KeyedTuple` class that was used when selecting
    rows from the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object has been replaced by the [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") class, which is the base of the same [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") that comes back with Core statement results when using
    the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag with [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") (when the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag is not set, Core result sets use the `LegacyRow`
    subclass, which maintains backwards-compatible behaviors for the `__contains__()`
    method; ORM exclusively uses the [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") class directly).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 已经作为 1.4 的一部分，之前从 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象中选择行时使用的 `KeyedTuple` 类已被替换为 [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 类，该类是使用 [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") 标志与 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 一起使用 Core 语句结果时返回的相同 [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 的基类（当未设置 [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") 标志时，Core 结果集使用 `LegacyRow` 子类，该子类维护了 `__contains__()`
    方法的向后兼容行为；ORM 专门直接使用 [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    类）。
- en: This [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    behaves like a named tuple, in that it acts as a sequence but also supports attribute
    name access, e.g. `row.some_column`. However, it also provides the previous “mapping”
    behavior via the special attribute `row._mapping`, which produces a Python mapping
    such that keyed access such as `row["some_column"]` can be used.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    的行为类似于命名元组，因为它作为序列，但也支持属性名访问，例如 `row.some_column`。然而，它还通过特殊属性 `row._mapping` 提供了之前的“映射”行为，该属性产生一个
    Python 映射，使得可以使用基于键的访问，如 `row["some_column"]`。
- en: 'In order to receive results as mappings up front, the `mappings()` modifier
    on the result can be used:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了一开始就接收到映射的结果，可以在结果上使用 `mappings()` 修改器：
- en: '[PRE27]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    class as used by the ORM also supports access via entity or attribute:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 中使用的 [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    类也支持通过实体或属性进行访问：
- en: '[PRE28]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: See also
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[RowProxy is no longer a “proxy”; is now called Row and behaves like an enhanced
    named tuple](migration_14.html#change-4710-core)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[RowProxy 不再是“代理”; 现在称为 Row，并且行为类似于增强型命名元组](migration_14.html#change-4710-core)'
- en: 2.0 Migration - Core Usage
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0 迁移 - Core 使用
- en: '### select() no longer accepts varied constructor arguments, columns are passed
    positionally'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '### `select()` 不再接受不同的构造函数参数，列被按位置传递'
- en: '**synopsis**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: 'The [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct as well as the related method [`FromClause.select()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") will no longer accept keyword arguments
    to build up elements such as the WHERE clause, FROM list and ORDER BY. The list
    of columns may now be sent positionally, rather than as a list. Additionally,
    the [`case()`](../core/sqlelement.html#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    construct now accepts its WHEN criteria positionally, rather than as a list:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造以及相关方法 [`FromClause.select()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") 将不再接受用于构建 WHERE 子句、FROM 列表和 ORDER
    BY 等元素的关键字参数。列的列表现在可以按位置发送，而不是作为列表。此外，[`case()`](../core/sqlelement.html#sqlalchemy.sql.expression.case
    "sqlalchemy.sql.expression.case") 构造现在按位置接受其 WHEN 标准，而不是作为列表：'
- en: '[PRE29]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '**Migration to 2.0**'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'Only the “generative” style of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") will be supported. The list of columns / tables
    to SELECT from should be passed positionally. The [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct in SQLAlchemy 1.4 accepts both the
    legacy styles and the new styles using an auto-detection scheme, so the code below
    is cross-compatible with 1.4 and 2.0:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 只支持 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    的“生成”样式。应按位置传递要从中选择的列 / 表的列表。SQLAlchemy 1.4 中的 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造接受传统样式和新样式，使用自动检测方案，因此下面的代码与 1.4 和 2.0 兼容：
- en: '[PRE30]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**Discussion**'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: SQLAlchemy has for many years developed a convention for SQL constructs accepting
    an argument either as a list or as positional arguments. This convention states
    that **structural** elements, those that form the structure of a SQL statement,
    should be passed **positionally**. Conversely, **data** elements, those that form
    the parameterized data of a SQL statement, should be passed **as lists**. For
    many years, the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct could not participate in this convention
    smoothly because of the very legacy calling pattern where the “WHERE” clause would
    be passed positionally. SQLAlchemy 2.0 finally resolves this by changing the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct to only accept the “generative”
    style that has for many years been the only documented style in the Core tutorial.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，SQLAlchemy 发展了一个约定，即 SQL 构造接受参数时可以作为列表或按位置参数传递。该约定规定了形成 SQL 语句结构的**结构**元素应**按位置**传递。相反，形成
    SQL 语句参数化数据的**数据**元素应作为**列表**传递。多年来，[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造无法顺利参与此约定，因为“WHERE”子句的传递模式非常传统。SQLAlchemy
    2.0 最终通过将 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造更改为仅接受多年来一直是 Core 教程中唯一记录的样式的“生成”样式来解决了这个问题。
- en: 'Examples of “structural” vs. “data” elements are as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: “结构”与“数据”元素的示例如下：
- en: '[PRE31]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: See also
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[select(), case() now accept positional expressions](migration_14.html#change-5284)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[select()，case() 现在接受位置表达式](migration_14.html#change-5284)'
- en: '[select() construct created in “legacy” mode; keyword arguments, etc.](../errors.html#error-c9ae)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[以“传统”模式创建的 select() 构造; 关键字参数等](../errors.html#error-c9ae)'
- en: insert/update/delete DML no longer accept keyword constructor arguments
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: insert/update/delete DML 不再接受关键字构造函数参数
- en: '**Synopsis**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: 'In a similar way as to the previous change to [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), the constructor arguments to [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") and [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") other than the table argument are essentially
    removed:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前对 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    的更改类似，除了表参数之外，[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")、[`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 和 [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") 的构造函数参数基本上被移除：
- en: '[PRE32]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '**Migration to 2.0**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'The following examples illustrate generative method use for the above examples:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了上述示例的生成方法使用：
- en: '[PRE33]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**Discussion**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The API and internals is being simplified for the DML constructs in a similar
    manner as that of the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: API 和内部结构正在以类似于 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造的方式进行简化。
- en: 2.0 Migration - ORM Configuration
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0 迁移 - ORM 配置
- en: Declarative becomes a first class API
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Declarative 成为一流的 API
- en: '**Synopsis**'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: The `sqlalchemy.ext.declarative` package is mostly, with some exceptions, moved
    to the `sqlalchemy.orm` package. The [`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") and [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") functions are present without any behavioral changes.
    A new super-implementation of [`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") known as [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") now serves as the top-level ORM configurational construct,
    which also provides for decorator-based declarative and new support for classical
    mappings that integrate with the declarative registry.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.declarative` 包大部分已经移动到 `sqlalchemy.orm` 包中，但有一些例外。[`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") 和 [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") 函数没有任何行为上的变化。一个名为 [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") 的新超级实现现在作为顶级 ORM 配置构造存在，它还提供了基于装饰器的声明性以及与声明式注册表集成的经典映射的新支持。'
- en: '**Migration to 2.0**'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'Change imports:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 更改导入：
- en: '[PRE34]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 至：
- en: '[PRE35]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '**Discussion**'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: After ten years or so of popularity, the `sqlalchemy.ext.declarative` package
    is now integrated into the `sqlalchemy.orm` namespace, with the exception of the
    declarative “extension” classes which remain as Declarative extensions. The change
    is detailed further in the 1.4 migration guide at [Declarative is now integrated
    into the ORM with new features](migration_14.html#change-5508).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 大约十年后，`sqlalchemy.ext.declarative` 包现在已经整合到 `sqlalchemy.orm` 命名空间中，除了保留为 Declarative
    扩展的声明性 “extension” 类。更改在 1.4 迁移指南中进一步详细说明，详见 [Declarative is now integrated into
    the ORM with new features](migration_14.html#change-5508)。
- en: See also
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Mapped Class Overview](../orm/mapping_styles.html) - all new unified documentation
    for Declarative, classical mapping, dataclasses, attrs, etc.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 映射类概述](../orm/mapping_styles.html) - 用于 Declarative、经典映射、数据类、attrs 等的全新统一文档。'
- en: '[Declarative is now integrated into the ORM with new features](migration_14.html#change-5508)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '[Declarative is now integrated into the ORM with new features](migration_14.html#change-5508)'
- en: The original “mapper()” function now a core element of Declarative, renamed
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最初的 “mapper()” 函数现在是 Declarative 的核心元素，已更名
- en: '**Synopsis**'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: The `sqlalchemy.orm.mapper()` standalone function moves behind the scenes to
    be invoked by higher level APIs. The new version of this function is the method
    [`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") taken from a [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqlalchemy.orm.mapper()` 独立函数在幕后移动，由高级 API 调用。这个函数的新版本是从 [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") 对象获取的方法 [`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")。'
- en: '**Migration to 2.0**'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'Code that works with classical mappings should change imports and code from:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 使用经典映射的代码应从以下导入和代码更改：
- en: '[PRE36]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To work from a central [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 要从中央[`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")对象工作：
- en: '[PRE37]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The above [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    is also the source for declarative mappings, and classical mappings now have access
    to this registry including string-based configuration on [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"):'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")也是声明式映射的源头，经典映射现在可以访问此注册表，包括在[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上进行基于字符串的配置：
- en: '[PRE38]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '**Discussion**'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: By popular demand, “classical mapping” is staying around, however the new form
    of it is based off of the [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object and is available as [`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively").
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 受到广泛需求，“经典映射”仍然存在，但其新形式基于[`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")对象，并可作为[`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")使用。
- en: In addition, the primary rationale used for “classical mapping” is that of keeping
    the [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    setup distinct from the class. Declarative has always allowed this style using
    so-called [hybrid declarative](../orm/declarative_tables.html#orm-imperative-table-configuration).
    However, to remove the base class requirement, a first class [decorator](../orm/declarative_mapping.html)
    form has been added.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，“经典映射”的主要理由是保持[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")设置与类别不同。声明式一直允许使用所谓的[混合声明式](../orm/declarative_tables.html#orm-imperative-table-configuration)来使用这种样式。然而，为了去除基类要求，已经添加了第一类[装饰器](../orm/declarative_mapping.html)形式。
- en: As yet another separate but related enhancement, support for [Python dataclasses](../orm/dataclasses.html#orm-declarative-dataclasses)
    is added as well to both declarative decorator and classical mapping forms.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 又一个独立但相关的增强功能是，支持[Python数据类](../orm/dataclasses.html#orm-declarative-dataclasses)已添加到声明装饰器和经典映射形式中。
- en: See also
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Mapped Class Overview](../orm/mapping_styles.html) - all new unified documentation
    for Declarative, classical mapping, dataclasses, attrs, etc.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM映射类概述](../orm/mapping_styles.html) - 用于声明式、经典映射、数据类、attrs等的全新统一文档。'
- en: '## 2.0 Migration - ORM Usage'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '## 2.0 迁移 - ORM 使用'
- en: The biggest visible change in SQLAlchemy 2.0 is the use of [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") in conjunction with [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") to run ORM queries, instead of using [`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"). As mentioned elsewhere, there is no plan to actually
    remove the [`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") API itself, as it is now implemented by using
    the new API internally it will remain as a legacy API, and both APIs can be used
    freely.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0中最显着的可见变化是使用[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")与[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")一起运行ORM查询，而不是使用[`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")。正如在其他地方提到的，实际上没有计划真正删除[`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") API本身，因为现在它是通过内部使用新API来实现的，它将保留为遗留API，并且两个API可以自由使用。
- en: The table below provides an introduction to the general change in calling form
    with links to documentation for each technique presented. The individual migration
    notes are in the embedded sections following the table, and may include additional
    notes not summarized here.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 下表介绍了调用形式的一般变化，并链接到每个技术的文档。嵌入部分中的个别迁移注释位于表之后，并可能包含此处未概括的其他注释。
- en: '**Overview of Major ORM Querying Patterns**'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**主要ORM查询模式概述**'
- en: '| [1.x style](../glossary.html#term-1.x-style) form | [2.0 style](../glossary.html#term-2.0-style)
    form | See Also |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| [1.x风格](../glossary.html#term-1.x-style)表单 | [2.0风格](../glossary.html#term-2.0-style)表单
    | 另请参阅 |'
- en: '| --- | --- | --- |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE39]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '|'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE40]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '| [ORM Query - get() method moves to Session](#migration-20-get-to-session)
    |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| [ORM查询 - get()方法移到Session](#migration-20-get-to-session) |'
- en: '|'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE41]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '|'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE42]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '| [ORM Query Unified with Core Select](#migration-20-unify-select)[`Session.scalars()`](../orm/session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars") [`Result.scalars()`](../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| [使用核心选择统一的ORM查询](#migration-20-unify-select)[`Session.scalars()`](../orm/session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars") [`Result.scalars()`](../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") |'
- en: '|'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE43]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '|'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE44]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '| [ORM Query Unified with Core Select](#migration-20-unify-select)[`Result.scalar_one()`](../core/connections.html#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| [使用核心选择统一的ORM查询](#migration-20-unify-select)[`Result.scalar_one()`](../core/connections.html#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") |'
- en: '|'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE45]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '|'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE46]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '| [ORM Query Unified with Core Select](#migration-20-unify-select)[`Result.first()`](../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first") |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| [使用核心选择统一的ORM查询](#migration-20-unify-select)[`Result.first()`](../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first") |'
- en: '|'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE47]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '|'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE48]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '| [ORM Rows not uniquified by default](#joinedload-not-uniqued) |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| [默认情况下，ORM行不是唯一的](#joinedload-not-uniqued) |'
- en: '|'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE49]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '|'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE50]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '| [ORM Query Unified with Core Select](#migration-20-unify-select)[Joins](../orm/queryguide/select.html#orm-queryguide-joins)
    |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| [使用核心选择统一的ORM查询](#migration-20-unify-select)[连接](../orm/queryguide/select.html#orm-queryguide-joins)
    |'
- en: '|'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE51]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '|'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE52]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '| [Getting ORM Results from Textual Statements](../orm/queryguide/select.html#orm-queryguide-selecting-text)
    |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| [从文本语句获取ORM结果](../orm/queryguide/select.html#orm-queryguide-selecting-text)
    |'
- en: '|'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE53]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '|'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE54]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '| [ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)[Populate
    Existing](../orm/queryguide/api.html#orm-queryguide-populate-existing) |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| [ORM执行选项](../orm/queryguide/api.html#orm-queryguide-execution-options)[填充现有](../orm/queryguide/api.html#orm-queryguide-populate-existing)
    |'
- en: '|'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE55]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '|'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE56]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '| [ORM-Enabled INSERT, UPDATE, and DELETE statements](../orm/queryguide/dml.html#orm-expression-update-delete)
    |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| [启用ORM的INSERT、UPDATE和DELETE语句](../orm/queryguide/dml.html#orm-expression-update-delete)
    |'
- en: '|'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE57]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '|'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE58]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '| [`Session.scalar()`](../orm/session_api.html#sqlalchemy.orm.Session.scalar
    "sqlalchemy.orm.Session.scalar") |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| [`Session.scalar()`](../orm/session_api.html#sqlalchemy.orm.Session.scalar
    "sqlalchemy.orm.Session.scalar") |'
- en: '### ORM Query Unified with Core Select'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '### ORM查询与核心选择统一'
- en: '**Synopsis**'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: The [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object (as well as the [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") and [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") extensions) become long term legacy
    objects, replaced by the direct usage of the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct in conjunction with the [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method. Results that are returned from [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in the form of lists of objects or tuples, or as scalar
    ORM objects are returned from [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") uniformly as [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") objects, which feature an interface consistent with
    that of Core execution.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象（以及[`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")和[`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery")扩展）成为长期的遗留对象，被直接使用[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造与[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法取代。从[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")返回的对象，以列表形式返回对象或元组，或作为标量ORM对象统一地作为[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")返回的[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象，其接口与Core执行一致。'
- en: 'Legacy code examples are illustrated below:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是旧代码示例：
- en: '[PRE59]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '**Migration to 2.0**'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0版本**'
- en: Because the vast majority of an ORM application is expected to make use of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects as well as that the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") interface being available does not impact the new interface,
    the object will stay around in 2.0 but will no longer be part of documentation
    nor will it be supported for the most part. The [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct now suits both the Core and ORM
    use cases, which when invoked via the [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method will return ORM-oriented results, that
    is, ORM objects if that’s what was requested.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 由于ORM应用的绝大部分预计都将使用[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，并且[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")接口的可用性不影响新接口，该对象将在2.0版本中保留，但不再是文档的一部分，也大部分不再受支持。现在，[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造适用于核心和ORM用例，当通过[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法调用时，将返回ORM导向的结果，即如果请求的是ORM对象。
- en: The [`Select()`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct **adds many new methods** for compatibility with [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), including [`Select.filter()`](../core/selectable.html#sqlalchemy.sql.expression.Select.filter
    "sqlalchemy.sql.expression.Select.filter") [`Select.filter_by()`](../core/selectable.html#sqlalchemy.sql.expression.Select.filter_by
    "sqlalchemy.sql.expression.Select.filter_by"), newly reworked [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Select.outerjoin()`](../core/selectable.html#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") methods, [`Select.options()`](../core/selectable.html#sqlalchemy.sql.expression.Select.options
    "sqlalchemy.sql.expression.Select.options"), etc. Other more supplemental methods
    of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    such as [`Query.populate_existing()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") are implemented via execution options.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select()`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")构造**添加了许多新方法**，以与[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")兼容，包括[`Select.filter()`](../core/selectable.html#sqlalchemy.sql.expression.Select.filter
    "sqlalchemy.sql.expression.Select.filter")、[`Select.filter_by()`](../core/selectable.html#sqlalchemy.sql.expression.Select.filter_by
    "sqlalchemy.sql.expression.Select.filter_by")、重新设计的[`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join")和[`Select.outerjoin()`](../core/selectable.html#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin")方法、[`Select.options()`](../core/selectable.html#sqlalchemy.sql.expression.Select.options
    "sqlalchemy.sql.expression.Select.options")等。其他更多的[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的补充方法，如[`Query.populate_existing()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")，通过执行选项实现。'
- en: Return results are in terms of a [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object, the new version of the SQLAlchemy `ResultProxy`
    object, which also adds many new methods for compatibility with [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), including [`Result.one()`](../core/connections.html#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one"), [`Result.all()`](../core/connections.html#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all"), [`Result.first()`](../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first"), [`Result.one_or_none()`](../core/connections.html#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none"), etc.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 返回结果以[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象的形式表示，这是SQLAlchemy
    `ResultProxy`对象的新版本，它也添加了许多新方法，以与[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")兼容，包括[`Result.one()`](../core/connections.html#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one")、[`Result.all()`](../core/connections.html#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all")、[`Result.first()`](../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first")、[`Result.one_or_none()`](../core/connections.html#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none")等。
- en: The [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object however does require some different calling patterns, in that when first
    returned it will **always return tuples** and it will **not deduplicate results
    in memory**. In order to return single ORM objects the way [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") does, the [`Result.scalars()`](../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") modifier must be called first. In order to
    return uniqued objects, as is necessary when using joined eager loading, the [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") modifier must be called first.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象需要一些不同的调用模式，首次返回时它将**始终返回元组**，并且**不会在内存中去重结果**。为了以 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 的方式返回单个 ORM 对象，必须首先调用 [`Result.scalars()`](../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") 修改器。为了返回唯一对象，就像在使用连接式急加载时所必需的那样，必须首先调用 [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") 修改器。
- en: Documentation for all new features of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") including execution options, etc. are at [ORM
    Querying Guide](../orm/queryguide/index.html).
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 所有新特性的文档[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")，包括执行选项等，位于[ORM 查询指南](../orm/queryguide/index.html)。
- en: 'Below are some examples of how to migrate to [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"):'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些迁移到 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的示例：
- en: '[PRE60]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '**Discussion**'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The fact that SQLAlchemy has both a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct as well as a separate [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object that features an extremely similar, but fundamentally
    incompatible interface is likely the greatest inconsistency in SQLAlchemy, one
    that arose as a result of small incremental additions over time that added up
    to two major APIs that are divergent.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 同时具有 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造和一个单独的 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象，它具有极其相似但基本上不兼容的接口，这可能是 SQLAlchemy 中最大的不一致性，这是由于随着时间的推移，小的增量添加累积成了两个主要的不同的
    API。
- en: In SQLAlchemy’s first releases, the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object didn’t exist at all. The original idea was that
    the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    construct itself would be able to select rows, and that [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects, not classes, would be used to create the various
    criteria in a Core-style approach. The [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") came along some months / years into SQLAlchemy’s history
    as a user proposal for a new, “buildable” querying object originally called `SelectResults`
    was accepted. Concepts like a `.where()` method, which `SelectResults` called
    `.filter()`, were not present in SQLAlchemy previously, and the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct used only the “all-at-once” construction
    style that’s now deprecated at [select() no longer accepts varied constructor
    arguments, columns are passed positionally](#migration-20-5284).
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLAlchemy 的最初版本中，根本不存在 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象。最初的想法是 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 构造本身将能够选择行，并且 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象而不是类将用于在 Core 风格的方法中创建各种条件。[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 是在 SQLAlchemy 的历史中的某个时期，作为用户建议的一个新的、“可构建”的查询对象被接受的。在之前的
    SQLAlchemy 中，像 `.where()` 方法这样的概念，`SelectResults` 称为 `.filter()`，是不存在的，而 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造只使用了现在已经弃用的“一次全部”构造样式，该样式已在 [select() no
    longer accepts varied constructor arguments, columns are passed positionally](#migration-20-5284)
    中不再接受各种构造函数参数。
- en: As the new approach took off, the object evolved into the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object as new features such as being able to select individual
    columns, being able to select multiple entities at once, being able to build subqueries
    from a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object rather than from a [`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") object were added. The goal became that [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") should have the full functionality of [`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") in that it could be composed to build SELECT
    statements fully with no explicit use of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") needed. At the same time, [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") had also evolved “generative” methods like
    [`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") and [`Select.order_by()`](../core/selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by").
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 随着新方法的推出，该对象逐渐演变成为 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象，随着新功能的添加，例如能够选择单个列、能够一次选择多个实体、能够从 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象而不是从 [`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 对象构建子查询等。目标是 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 应该具有 [`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的所有功能，即它可以被组合以完全构建 SELECT 语句，不需要显式使用 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")。与此同时，[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 也发展出了像 [`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") 和 [`Select.order_by()`](../core/selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by") 这样的“生成”方法。
- en: In modern SQLAlchemy, this goal has been achieved and the two objects are now
    completely overlapping in functionality. The major challenge to unifying these
    objects was that the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") object needed to remain **completely agnostic
    of the ORM**. To achieve this, the vast majority of logic from [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") has been moved into the SQL compile phase, where ORM-specific
    compiler plugins receive the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct and interpret its contents in terms
    of an ORM-style query, before passing off to the core-level compiler in order
    to create a SQL string. With the advent of the new [SQL compilation caching system](migration_14.html#change-4639),
    the majority of this ORM logic is also cached.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代 SQLAlchemy 中，已经实现了这个目标，这两个对象现在在功能上完全重叠。统一这些对象的主要挑战是 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 对象需要保持**对 ORM 完全不可知**。为了实现这一点，大部分来自 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 的逻辑已经移动到 SQL 编译阶段，其中 ORM 特定的编译器插件接收 [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造并按照 ORM 风格的查询解释其内容，然后传递给核心级别的编译器以创建 SQL
    字符串。随着新的[SQL 编译缓存系统](migration_14.html#change-4639)的出现，大部分这种 ORM 逻辑也被缓存了。
- en: See also
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Query is internally unified with select, update, delete; 2.0 style execution
    available](migration_14.html#change-5159)  ### ORM Query - get() method moves
    to Session'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 查询与 select、update、delete 内部统一；2.0 风格执行可用](migration_14.html#change-5159)  ###
    ORM 查询 - get() 方法移到会话'
- en: '**Synopsis**'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    method remains for legacy purposes, but the primary interface is now the [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") method:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    方法仍然保留出于遗留目的，但主要接口现在是 [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") 方法：'
- en: '[PRE61]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '**Migration to 2.0**'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'In 1.4 / 2.0, the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object adds a new [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") method:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 / 2.0 中，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象新增了一个新的[`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get")方法：
- en: '[PRE62]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '**Discussion**'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object is to be a legacy object in 2.0, as ORM queries are now available using
    the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    object. As the [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") method defines a special interaction with the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and does not necessarily even emit a query, it’s more
    appropriate that it be part of [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), where it is similar to other “identity” methods such
    as [`refresh`](../orm/session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    and [`merge`](../orm/session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge").
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象在
    2.0 中将成为传统对象，因为 ORM 查询现在可以使用[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")对象。由于[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get")方法与[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")定义了一种特殊的交互，并且甚至不一定会发出查询，因此更适合将其作为[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的一部分，其中它类似于其他“身份”方法，例如[`refresh`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")和[`merge`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")。'
- en: 'SQLAlchemy originally included “get()” to resemble the Hibernate `Session.load()`
    method. As is so often the case, we got it slightly wrong as this method is really
    more about the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    than with writing a SQL query.  ### ORM Query - Joining / loading on relationships
    uses attributes, not strings'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 最初包含了 "get()" 来模仿 Hibernate 的 `Session.load()` 方法。就像经常发生的那样，我们稍微弄错了，因为这个方法实际上更多地与[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")有关，而不是编写 SQL 查询。
- en: '**Synopsis**'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'This refers to patterns such as that of [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") as well as query options like [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") which currently accept a mixture of string attribute
    names or actual class attributes. The string forms will all be removed in 2.0:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 这指的是诸如[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")之类的模式，以及像[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")这样的查询选项，它们目前接受字符串属性名称或实际类属性的混合。字符串形式将在 2.0 中全部被移除：
- en: '[PRE63]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '**Migration to 2.0**'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'Modern SQLAlchemy 1.x versions support the recommended technique which is to
    use mapped attributes:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 SQLAlchemy 1.x 版本支持推荐的技术，即使用映射属性：
- en: '[PRE64]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The same techniques apply to [2.0-style](../glossary.html#term-1) style use:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的技术适用于[2.0风格](../glossary.html#term-1)的使用：
- en: '[PRE65]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '**Discussion**'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The string calling form is ambiguous and requires that the internals do extra
    work to determine the appropriate path and retrieve the correct mapped property.
    By passing the ORM mapped attribute directly, not only is the necessary information
    passed up front, the attribute is also typed and is more potentially compatible
    with IDEs and pep-484 integrations.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串调用形式不明确，并且需要内部额外工作以确定适当的路径并检索正确的映射属性。通过直接传递 ORM 映射属性，不仅需要传递必要的信息，而且属性还是经过类型化的，并且更可能与
    IDE 和 pep-484 集成兼容。
- en: ORM Query - Chaining using lists of attributes, rather than individual calls,
    removed
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM 查询 - 使用属性列表进行链接的链式形式，而不是单独调用，已移除
- en: '**Synopsis**'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: '“Chained” forms of joining and loader options which accept multiple mapped
    attributes in a list will be removed:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 ORM 查询 - 加入 / 加载关系使用属性，而不是字符串的方式将被移除：
- en: '[PRE66]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '**Migration to 2.0**'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'Use individual calls to [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") for 1.x /2.0 cross compatible use:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单独的调用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")进行 1.x /2.0 交叉兼容使用：
- en: '[PRE67]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'For [2.0-style](../glossary.html#term-1) use, [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") has the same behavior of [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join"), and also features a new [`Select.join_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from") method that allows an explicit left
    side:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[2.0风格](../glossary.html#term-1)的用法，[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")具有与[`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join")相同的行为，还具有一个新的[`Select.join_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from")方法，允许显式左侧：
- en: '[PRE68]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '**Discussion**'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: Removing the chaining of attributes is in line with simplifying the calling
    interface of methods such as [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join").
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 移除属性链接的操作符符合简化方法调用接口的原则，比如[`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join")。
- en: '### ORM Query - join(…, aliased=True), from_joinpoint removed'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '### ORM查询 - join(…, aliased=True)，from_joinpoint已移除'
- en: '**Synopsis**'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The `aliased=True` option on [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") is removed, as is the `from_joinpoint` flag:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")上的`aliased=True`选项已被移除，`from_joinpoint`标志也被移除：
- en: '[PRE69]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '**Migration to 2.0**'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0**'
- en: 'Use explicit aliases instead:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 使用显式别名代替：
- en: '[PRE70]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '**Discussion**'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The `aliased=True` option on [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") is another feature that seems to be almost never
    used, based on extensive code searches to find actual use of this feature. The
    internal complexity that the `aliased=True` flag requires is **enormous**, and
    will be going away in 2.0.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在广泛的代码搜索中，几乎没有人使用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")上的`aliased=True`选项，这个特性的内部复杂性是**巨大**的，并且将在2.0版本中被移除。
- en: Most users aren’t familiar with this flag, however it allows for automatic aliasing
    of elements along a join, which then applies automatic aliasing to filter conditions.
    The original use case was to assist in long chains of self-referential joins,
    as in the example shown above. However, the automatic adaption of the filter criteria
    is enormously complicated internally and almost never used in real world applications.
    The pattern also leads to issues such as if filter criteria need to be added at
    each link in the chain; the pattern then must use the `from_joinpoint` flag which
    SQLAlchemy developers could absolutely find no occurrence of this parameter ever
    being used in real world applications.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数用户不熟悉这个标志，但它允许自动为连接的元素进行别名处理，然后将自动别名应用于过滤条件。最初的用例是帮助处理长链的自引用连接，就像上面显示的示例一样。然而，过滤条件的自动调整在内部非常复杂，几乎从不在实际应用中使用。这种模式还会导致问题，比如如果需要在链中的每个链接处添加过滤条件；那么模式必须使用`from_joinpoint`标志，而SQLAlchemy开发人员绝对找不到这个参数在实际应用中的任何使用情况。
- en: 'The `aliased=True` and `from_joinpoint` parameters were developed at a time
    when the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object didn’t yet have good capabilities regarding joining along relationship
    attributes, functions like [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") did not exist, and the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct itself didn’t exist early on.  ### Using DISTINCT
    with additional columns, but only select the entity'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`aliased=True`和`from_joinpoint`参数是在[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象还没有良好的能力进行沿着关系属性连接时开发的，像[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")这样的函数还不存在，而[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造本身在早期也不存在。### 使用DISTINCT与额外列，但仅选择实体'
- en: '**Synopsis**'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    will automatically add columns in the ORDER BY when distinct is used. The following
    query will select from all User columns as well as “address.email_address” but
    only return User objects:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 DISTINCT 时，[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    将自动在 ORDER BY 中添加列。以下查询将从所有用户列以及“address.email_address”中选择，但仅返回用户对象：
- en: '[PRE71]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: In version 2.0, the “email_address” column will not be automatically added to
    the columns clause, and the above query will fail, since relational databases
    won’t allow you to ORDER BY “address.email_address” when using DISTINCT if it
    isn’t also in the columns clause.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0 版本中，“email_address”列将不会自动添加到列子句中，上述查询将失败，因为当使用 DISTINCT 时，关系型数据库不允许您按“address.email_address”排序，如果它不在列子句中的话。
- en: '**Migration to 2.0**'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '**升级到 2.0**'
- en: 'In 2.0, the column must be added explicitly. To resolve the issue of only returning
    the main entity object, and not the extra column, use the [`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") method:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0 中，必须显式添加列。为了解决仅返回主实体对象而不是额外列的问题，使用 [`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") 方法：
- en: '[PRE72]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '**Discussion**'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: This case is an example of the limited flexibility of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") leading to the case where implicit, “magical” behavior
    needed to be added; the “email_address” column is implicitly added to the columns
    clause, then additional internal logic would omit that column from the actual
    results returned.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 此案例是[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")灵活性有限的一个示例，导致需要添加隐式的“神奇”行为的情况；“email_address”列隐式地添加到列子句中，然后额外的内部逻辑将从实际返回的结果中省略该列。
- en: 'The new approach simplifies the interaction and makes what’s going on explicit,
    while still making it possible to fulfill the original use case without inconvenience.  ###
    Selecting from the query itself as a subquery, e.g. “from_self()”'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 新方法简化了交互，并使正在进行的操作明确，同时仍然可以实现原始用例而不会带来不便。### 从查询本身作为子查询进行选择，例如“from_self()”
- en: '**Synopsis**'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The `Query.from_self()` method will be removed from [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"):'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`Query.from_self()` 方法将从 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 中移除：'
- en: '[PRE73]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '**Migration to 2.0**'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '**升级到 2.0**'
- en: 'The [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    construct may be used to emit ORM queries against an entity that is in terms of
    any arbitrary selectable. It has been enhanced in version 1.4 to smoothly accommodate
    being used multiple times against the same subquery for different entities as
    well. This can be used in [1.x style](../glossary.html#term-1.x-style) with [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") as below; note that since the final query wants to query
    in terms of both the `User` and `Address` entities, two separate [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") constructs are created:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    构造可以用于对基于任意可选择的实体发出 ORM 查询。在版本 1.4 中，它已经增强，以便对同一个子查询多次进行不同实体的使用。可以在 [1.x 样式](../glossary.html#term-1.x-style)
    中与 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    一起使用如下；请注意，由于最终查询想要查询关于 `User` 和 `Address` 实体的内容，因此会创建两个单独的 [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 构造：'
- en: '[PRE74]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The same form may be used in [2.0 style](../glossary.html#term-2.0-style):'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在 [2.0 样式](../glossary.html#term-2.0-style) 中使用相同的形式：
- en: '[PRE75]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '**Discussion**'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The `Query.from_self()` method is a very complicated method that is rarely used.
    The purpose of this method is to convert a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") into a subquery, then return a new [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") which SELECTs from that subquery. The elaborate aspect
    of this method is that the returned query applies automatic translation of ORM
    entities and columns to be stated in the SELECT in terms of the subquery, as well
    as that it allows the entities and columns to be SELECTed from to be modified.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`Query.from_self()`方法是一个非常复杂的方法，很少被使用。该方法的目的是将一个[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")转换为一个子查询，然后返回一个从该子查询中SELECT的新的[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")。该方法的精彩之处在于返回的查询应用了ORM实体和列的自动转换，以便以子查询的形式在SELECT中声明，以及它允许修改要从中SELECT的实体和列。'
- en: Because `Query.from_self()` packs an intense amount of implicit translation
    into the SQL it produces, while it does allow a certain kind of pattern to be
    executed very succinctly, real world use of this method is infrequent as it is
    not simple to understand.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`Query.from_self()`将大量的隐式转换打包到其生成的SQL中，虽然它确实允许某种类型的模式被执行得非常简洁，但该方法的实际应用很少，因为它不容易理解。
- en: The new approach makes use of the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct so that the ORM internals don’t need to guess
    which entities and columns should be adapted and in what way; in the example above,
    the `ua` and `aa` objects, both of which are `AliasedClass` instances, provide
    to the internals an unambiguous marker as to where the subquery should be referenced
    as well as what entity column or relationship is being considered for a given
    component of the query.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 新方法利用了[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")构造，使得ORM内部不需要猜测应该如何适应哪些实体和列；在上面的例子中，`ua`和`aa`对象，都是`AliasedClass`实例，为内部提供了一个明确的标记，表明子查询应该被引用以及正在考虑的查询组件的哪个实体列或关系。
- en: 'SQLAlchemy 1.4 also features an improved labeling style that no longer requires
    the use of long labels that include the table name in order to disambiguate columns
    of same names from different tables. In the above examples, even if our `User`
    and `Address` entities have overlapping column names, we can select from both
    entities at once without having to specify any particular labeling:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 1.4还具有改进的标签样式，不再需要使用包含表名以消除来自不同表的相同名称列的歧义的长标签。在上面的示例中，即使我们的`User`和`Address`实体具有重叠的列名，我们也可以一次从两个实体中选择，而无需指定任何特定的标签：
- en: '[PRE76]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'The above query will disambiguate the `.id` column of `User` and `Address`,
    where `Address.id` is rendered and tracked as `id_1`:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将消除`User`和`Address`的`.id`列的歧义，其中`Address.id`被呈现和追踪为`id_1`：
- en: '[PRE77]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[#5221](https://www.sqlalchemy.org/trac/ticket/5221)'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '[#5221](https://www.sqlalchemy.org/trac/ticket/5221)'
- en: Selecting entities from alternative selectables; Query.select_entity_from()
  id: totrans-370
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从替代选择中选择实体；Query.select_entity_from()
- en: '**Synopsis**'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The `Query.select_entity_from()` method will be removed in 2.0:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`Query.select_entity_from()`方法将在2.0中被移除：'
- en: '[PRE78]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '**Migration to 2.0**'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0**'
- en: 'As is the case described at [Selecting from the query itself as a subquery,
    e.g. “from_self()”](#migration-20-query-from-self), the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") object provides a single place that operations like
    “select entity from a subquery” may be achieved. Using [1.x style](../glossary.html#term-1.x-style):'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 如[在查询本身作为子查询中选择，例如“from_self()”](#migration-20-query-from-self)所述，[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")对象提供了一个单一的地方，可以实现诸如“从子查询中选择实体”之类的操作。使用[1.x风格](../glossary.html#term-1.x-style)：
- en: '[PRE79]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Using [2.0 style](../glossary.html#term-2.0-style):'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[2.0风格](../glossary.html#term-2.0-style)：
- en: '[PRE80]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '**Discussion**'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The points here are basically the same as those discussed at [Selecting from
    the query itself as a subquery, e.g. “from_self()”](#migration-20-query-from-self).
    The `Query.select_from_entity()` method was another way to instruct the query
    to load rows for a particular ORM mapped entity from an alternate selectable,
    which involved having the ORM apply automatic aliasing to that entity wherever
    it was used in the query later on, such as in the WHERE clause or ORDER BY. This
    intensely complex feature is seldom used in this way, where as was the case with
    `Query.from_self()`, it’s much easier to follow what’s going on when using an
    explicit [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    object, both from a user point of view as well as how the internals of the SQLAlchemy
    ORM must handle it.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的观点基本与[从查询本身选择为子查询，例如“from_self()”](#migration-20-query-from-self)讨论的观点相同。`Query.select_from_entity()`方法是指示查询从替代可选择的ORM映射实体加载行的另一种方式，其中涉及ORM在稍后在查询中使用该实体时自动为该实体应用别名，例如在WHERE子句或ORDER
    BY中。这个极其复杂的功能很少被这种方式使用，就像`Query.from_self()`的情况一样，当使用显式[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")对象时，无论是从用户的角度还是从SQLAlchemy ORM内部处理的角度来看，都更容易跟踪发生了什么。
- en: '### ORM Rows not uniquified by default'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '### ORM行默认情况下不唯一'
- en: '**Synopsis**'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'ORM rows returned by `session.execute(stmt)` are no longer automatically “uniqued”.
    This will normally be a welcome change, except in the case where the “joined eager
    loading” loader strategy is used with collections:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`session.execute(stmt)`返回的ORM行不再自动“唯一化”。这通常是一个受欢迎的变化，除非使用了“联接贪婪加载”加载器策略与集合：
- en: '[PRE81]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '**Migrating to 2.0**'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0**'
- en: 'When using a joined load of a collection, it’s required that the [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") method is called. The ORM will actually set
    a default row handler that will raise an error if this is not done, to ensure
    that a joined eager load collection does not return duplicate rows while still
    maintaining explicitness:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用集合的联接加载时，需要调用[`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")方法。ORM实际上会设置一个默认的行处理程序，如果未执行此操作，它将引发错误，以确保联接贪婪加载集合不返回重复行，同时保持明确性：
- en: '[PRE82]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '**Discussion**'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The situation here is a little bit unusual, in that SQLAlchemy is requiring
    that a method be invoked that it is in fact entirely capable of doing automatically.
    The reason for requiring that the method be called is to ensure the developer
    is “opting in” to the use of the [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") method, such that they will not be confused
    when a straight count of rows does not conflict with the count of records in the
    actual result set, which has been a long running source of user confusion and
    bug reports for many years. That the uniquifying is not happening in any other
    case by default will improve performance and also improve clarity in those cases
    where automatic uniquing was causing confusing results.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的情况有点不同寻常，因为SQLAlchemy要求调用一个它完全可以自动执行的方法。要求调用该方法的原因是确保开发者“选择”使用[`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")方法，这样他们在直接计算行数与实际结果集中的记录数不冲突时不会感到困惑，这已经是多年来用户困惑和错误报告的长期问题了。默认情况下不会在任何其他情况下进行唯一化，这将提高性能，并在自动唯一化导致混淆结果的情况下提高清晰度。
- en: 'To the degree that having to call [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") when joined eager load collections are used
    is inconvenient, in modern SQLAlchemy the [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") strategy presents a collection-oriented eager loader
    that is superior in most respects to [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") and should be preferred.  ### “Dynamic” relationship
    loaders superseded by “Write Only”'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '到目前为止，当使用联接贪婪加载集合时需要调用[`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")有些不方便，在现代SQLAlchemy中，[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")策略提供了一个面向集合的贪婪加载器，它在大多数方面都优于[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")，应优先使用。 ### “动态”关系加载器被“仅写”取代'
- en: '**Synopsis**'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: The `lazy="dynamic"` relationship loader strategy, discussed at [Dynamic Relationship
    Loaders](../orm/large_collections.html#dynamic-relationship), makes use of the
    [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object which is legacy in 2.0\. The “dynamic” relationship is not directly compatible
    with asyncio without workarounds, and additionally it does not fulfill its original
    purpose of preventing iteration of large collections as it has several behaviors
    where this iteration occurs implicitly.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论 [动态关系加载器](../orm/large_collections.html#dynamic-relationship) 中讨论的 `lazy="dynamic"`
    关系加载策略使用了在 2.0 中已经过时的 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象。 “dynamic” 关系在没有解决方法的情况下无法直接兼容 asyncio，此外，它也不能实现其原始目的，即防止大型集合的迭代，因为它有几种隐式迭代的行为。
- en: A new loader strategy known as `lazy="write_only"` is introduced, which through
    the [`WriteOnlyCollection`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyCollection
    "sqlalchemy.orm.WriteOnlyCollection") collection class provides a very strict
    “no implicit iteration” API and additionally integrates with 2.0 style statement
    execution, supporting asyncio as well as direct integrations with the new [ORM-enabled
    Bulk DML](whatsnew_20.html#change-8360) featureset.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 引入了一种新的加载策略，称为 `lazy="write_only"`，通过 [`WriteOnlyCollection`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyCollection
    "sqlalchemy.orm.WriteOnlyCollection") 集合类提供了一个非常严格的“无隐式迭代”的 API，此外，还与 2.0 风格的语句执行集成，支持
    asyncio 以及与新的 [启用 ORM 的批量 DML](whatsnew_20.html#change-8360) 特性集成。
- en: At the same time, `lazy="dynamic"` remains **fully supported** in version 2.0;
    applications can delay migrating this particular pattern until they are fully
    on the 2.0 series.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，在 2.0 版本中`lazy="dynamic"` 仍然**完全支持**；应用程序可以延迟将这种特定模式迁移到完全使用 2.0 版本的时候。
- en: '**Migration to 2.0**'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: The new “write only” feature is only available in SQLAlchemy 2.0, and is not
    part of 1.4\. At the same time, the `lazy="dynamic"` loader strategy remains fully
    supported in version 2.0, and even includes new pep-484 and annotated mapping
    support.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 新的“只写”功能仅在 SQLAlchemy 2.0 中可用，并不是 1.4 的一部分。同时，`lazy="dynamic"` 加载策略在 2.0 版本中仍然得到充分支持，甚至包括了新的
    pep-484 和带注释的映射支持。
- en: Therefore the best strategy for migrating from “dynamic” is to **wait until
    the application is fully running on 2.0**, then migrate directly from [`AppenderQuery`](../orm/large_collections.html#sqlalchemy.orm.AppenderQuery
    "sqlalchemy.orm.AppenderQuery"), which is the collection type used by the “dynamic”
    strategy, to [`WriteOnlyCollection`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyCollection
    "sqlalchemy.orm.WriteOnlyCollection"), which is the collection type used by hte
    “write_only” strategy.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从 “dynamic” 迁移到 2.0 的最佳策略是**等到应用程序完全运行在 2.0 上**，然后直接从 [`AppenderQuery`](../orm/large_collections.html#sqlalchemy.orm.AppenderQuery
    "sqlalchemy.orm.AppenderQuery") 迁移到 [`WriteOnlyCollection`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyCollection
    "sqlalchemy.orm.WriteOnlyCollection")，它是 “write_only” 策略使用的集合类型。
- en: 'Some techniques are available to use `lazy="dynamic"` under 1.4 in a more “2.0”
    style however. There are two ways to achieve 2.0 style querying that’s in terms
    of a specific relationship:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些技巧可以在 1.4 中以更“2.0”的风格使用 `lazy="dynamic"`。有两种方法可以实现基于特定关系的 2.0 风格的查询：
- en: 'Make use of the [`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") attribute on an existing `lazy="dynamic"` relationship.
    We can use methods like [`Session.scalars()`](../orm/session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars") with the dynamic loader straight away as follows:'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用现有的 `lazy="dynamic"` 关系的 [`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") 属性。我们可以立即像下面这样直接使用动态加载器的方法，比如 [`Session.scalars()`](../orm/session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")：
- en: '[PRE83]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Use the [`with_parent()`](../orm/queryguide/api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent") function to construct a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct directly:'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 [`with_parent()`](../orm/queryguide/api.html#sqlalchemy.orm.with_parent "sqlalchemy.orm.with_parent")
    函数直接构造一个 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造：
- en: '[PRE84]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '**Discussion**'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The original idea was that the [`with_parent()`](../orm/queryguide/api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent") function should be sufficient, however continuing
    to make use of special attributes on the relationship itself remains appealing,
    and there’s no reason a 2.0 style construct can’t be made to work here as well.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 最初的想法是[`with_parent()`](../orm/queryguide/api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent")函数应该足以满足需求，然而继续利用关系本身的特殊属性仍然有吸引力，而且没有理由不能使2.0样式的构造在这里起作用。
- en: The new “write_only” loader strategy provides a new kind of collection which
    does not support implicit iteration or item access. Instead, reading the contents
    of the collection is performed by calling upon its `.select()` method to help
    construct an appropriate SELECT statement. The collection also includes methods
    `.insert()`, `.update()`, `.delete()` which may be used to emit bulk DML statements
    for the items in the collection. In a manner similar to that of the “dynamic”
    feature, there are also methods `.add()`, `.add_all()` and `.remove()` which queue
    individual members for addition or removal using the unit of work process. An
    introduction to the new feature is as [New “Write Only” relationship strategy
    supersedes “dynamic”](whatsnew_20.html#change-7123).
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 新的“write_only”加载策略提供了一种新的集合类型，它不支持隐式迭代或项目访问。相反，通过调用其`.select()`方法来读取集合的内容，以帮助构造一个适当的SELECT语句。该集合还包括`.insert()`、`.update()`、`.delete()`方法，可用于对集合中的项目发出批量DML语句。与“dynamic”功能类似，还有`.add()`、`.add_all()`和`.remove()`方法，它们通过工作单元流程为单个成员排队以进行添加或移除。有关新功能的介绍如下
    [新的“仅写”关系策略取代了“动态”](whatsnew_20.html#change-7123)。
- en: See also
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New “Write Only” relationship strategy supersedes “dynamic”](whatsnew_20.html#change-7123)'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '[新的“仅写”关系策略取代了“动态”](whatsnew_20.html#change-7123)'
- en: '[Write Only Relationships](../orm/large_collections.html#write-only-relationship)  ###
    Autocommit mode removed from Session; autobegin support added'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '[仅写关系](../orm/large_collections.html#write-only-relationship)  ### 从会话中移除自动提交模式；添加了自动开始支持'
- en: '**Synopsis**'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: 'The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will no longer support “autocommit” mode, that is, this pattern:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")将不再支持“自动提交”模式，即这种模式：'
- en: '[PRE85]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '**Migration to 2.0**'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0**'
- en: 'The main reason a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is used in “autocommit” mode is so that the [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") method is available, so that framework integrations
    and event hooks can control when this event happens. In 1.4, the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") now features [autobegin behavior](migration_14.html#change-5074)
    which resolves this issue; the [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") method may now be called:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 在“自动提交”模式下使用[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的主要原因是使得[`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")方法可用，以便框架集成和事件钩子可以控制此事件发生的时间。在1.4中，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")现在具有[自动开始行为](migration_14.html#change-5074)来解决这个问题；现在可以调用[`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")方法了：
- en: '[PRE86]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '**Discussion**'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: 'The “autocommit” mode is another holdover from the first versions of SQLAlchemy.
    The flag has stayed around mostly in support of allowing explicit use of [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin"), which is now solved by 1.4, as well as to allow
    the use of “subtransactions”, which are also removed in 2.0.  ### Session “subtransaction”
    behavior removed'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: “自动提交”模式是SQLAlchemy最初版本的另一个遗留问题。这个标志主要保留下来以支持允许显式使用[`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")，这个问题现在已经在1.4中解决了，以及允许使用“子事务”，这在2.0中也已经移除。### 会话“子事务”行为已移除
- en: '**Synopsis**'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: The “subtransaction” pattern that was often used with autocommit mode is also
    deprecated in 1.4\. This pattern allowed the use of the [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") method when a transaction were already begun,
    resulting in a construct called a “subtransaction”, which was essentially a block
    that would prevent the [`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") method from actually committing.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: “子事务”模式在1.4版本中已经不推荐使用，这种模式经常与自动提交模式一起使用。这种模式允许在事务已经开始时使用[`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")方法，导致产生一个称为“子事务”的结构，本质上是一个阻止[`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")方法实际提交的块。
- en: '**Migration to 2.0**'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0**'
- en: 'To provide backwards compatibility for applications that make use of this pattern,
    the following context manager or a similar implementation based on a decorator
    may be used:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为使用这种模式的应用程序提供向后兼容性，可以使用以下上下文管理器或基于装饰器的类似实现：
- en: '[PRE87]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'The above context manager may be used in the same way the “subtransaction”
    flag works, such as in the following example:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 上述上下文管理器可以像“子事务”标志一样使用，例如以下示例：
- en: '[PRE88]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'To compare towards the preferred idiomatic pattern, the begin block should
    be at the outermost level. This removes the need for individual functions or methods
    to be concerned with the details of transaction demarcation:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与首选的惯用模式进行比较，begin块应该在最外层。这样就不需要单独的函数或方法关注事务划分的细节：
- en: '[PRE89]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '**Discussion**'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: This pattern has been shown to be confusing in real world applications, and
    it is preferable for an application to ensure that the top-most level of database
    operations are performed with a single begin/commit pair.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式已经被证明在实际应用中令人困惑，最好是确保应用程序的最顶层数据库操作使用单个begin/commit对执行。
- en: 2.0 Migration - ORM Extension and Recipe Changes
  id: totrans-428
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0迁移 - ORM扩展和配方更改
- en: Dogpile cache recipe and Horizontal Sharding uses new Session API
  id: totrans-429
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dogpile缓存配方和水平分片使用新的Session API
- en: As the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object becomes legacy, these two recipes which previously relied upon subclassing
    of the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object now make use of the [`SessionEvents.do_orm_execute()`](../orm/events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook. See the section [Re-Executing
    Statements](../orm/session_events.html#do-orm-execute-re-executing) for an example.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 随着[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象变得过时，之前依赖于[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象子类化的这两个方法现在使用[`SessionEvents.do_orm_execute()`](../orm/events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")钩子。请参阅[重新执行语句](../orm/session_events.html#do-orm-execute-re-executing)部分以获取示例。
- en: Baked Query Extension Superseded by built-in caching
  id: totrans-431
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 烘焙查询扩展被内置缓存所取代
- en: The baked query extension is superseded by the built in caching system and is
    no longer used by the ORM internals.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 烘焙查询扩展被内置缓存系统取代，不再被ORM内部使用。
- en: See [SQL Compilation Caching](../core/connections.html#sql-caching) for full
    background on the new caching system.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看[SQL编译缓存](../core/connections.html#sql-caching)以获取新缓存系统的完整背景。
- en: Asyncio Support
  id: totrans-434
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步IO支持
- en: SQLAlchemy 1.4 includes asyncio support for both Core and ORM. The new API exclusively
    makes use of the “future” patterns noted above. See [Asynchronous IO Support for
    Core and ORM](migration_14.html#change-3414) for background.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 1.4包括Core和ORM的异步IO支持。新API专门使用上述“future”模式。请参阅[Core和ORM的异步IO支持](migration_14.html#change-3414)以获取背景信息。
- en: The 1.4->2.0 Migration Path
  id: totrans-436
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.4->2.0迁移路径
- en: 'The most prominent architectural features and API changes that are considered
    to be “SQLAlchemy 2.0” were in fact released as fully available within the 1.4
    series, to provide for a clean upgrade path from the 1.x to the 2.x series as
    well as to serve as a beta platform for the features themselves. These changes
    include:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 被认为是“SQLAlchemy 2.0”的最突出的架构特性和API更改实际上在1.4系列中已经完全可用，以提供从1.x到2.x系列的清晰升级路径，同时作为这些功能的beta平台。这些更改包括：
- en: '[New ORM statement paradigm](migration_14.html#change-5159)'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[新的ORM语句范式](migration_14.html#change-5159)'
- en: '[SQL caching throughout Core and ORM](migration_14.html#change-4639)'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Core和ORM中的SQL缓存](migration_14.html#change-4639)'
- en: '[New Declarative features, ORM integration](migration_14.html#change-5508)'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[新的声明性特性，ORM集成](migration_14.html#change-5508)'
- en: '[New Result object](migration_14.html#change-result-14-core)'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[新的Result对象](migration_14.html#change-result-14-core)'
- en: '[select() / case() Accept Positional Expressions](migration_14.html#change-5284)'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[select() / case()接受位置表达式](migration_14.html#change-5284)'
- en: '[asyncio support for Core and ORM](migration_14.html#change-3414)'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Core和ORM的asyncio支持](migration_14.html#change-3414)'
- en: The above bullets link to the description of these new paradigms as introduced
    in SQLAlchemy 1.4\. in the [What’s New in SQLAlchemy 1.4?](migration_14.html)
    document.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 上述要点链接到在SQLAlchemy 1.4中介绍的这些新范例的描述中。在[SQLAlchemy 1.4有什么新功能？](migration_14.html)文档中。
- en: 'For SQLAlchemy 2.0, all API features and behaviors that were marked as [deprecated
    for 2.0](migration_14.html#deprecation-20-mode) are now finalized; in particular,
    major APIs that are **no longer present** include:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SQLAlchemy 2.0，所有标记为[2.0不推荐使用](migration_14.html#deprecation-20-mode)的API功能和行为现已最终确定；特别是**不再存在**的主要API包括：
- en: '[Bound MetaData and connectionless execution](#migration-20-implicit-execution)'
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[绑定的MetaData和无连接执行](#migration-20-implicit-execution)'
- en: '[Emulated autocommit on Connection](#migration-20-autocommit)'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[连接上的模拟自动提交](#migration-20-autocommit)'
- en: '[The Session.autocommit parameter / mode](#migration-20-session-autocommit)'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Session.autocommit参数/模式](#migration-20-session-autocommit)'
- en: '[List / keyword arguments to select()](#migration-20-5284)'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[select()的列表/关键字参数](#migration-20-5284)'
- en: Python 2 support
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 2支持
- en: The above bullets refer to the most prominent fully backwards-incompatible changes
    that are finalized in the 2.0 release. The migration path for applications to
    accommodate for these changes as well as others is framed as a transition path
    first into the 1.4 series of SQLAlchemy where the “future” APIs are available
    to provide for the “2.0” way of working, and then to the 2.0 series where the
    no-longer-used APIs above and others are removed.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 上述要点涉及2.0版本中最显著的完全不兼容的更改。应用程序适应这些更改以及其他更改的迁移路径首先被构建为转换到SQLAlchemy 1.4系列，其中“未来”API可用以提供“2.0”工作方式，然后转换到2.0系列，其中上述不再使用的API以及其他API已被移除。
- en: The complete steps for this migration path are later in this document at [1.x
    -> 2.x Migration Overview](#migration-20-overview).
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 此迁移路径的完整步骤稍后在本文档的[1.x -> 2.x迁移概述](#migration-20-overview)处介绍。
- en: '## 1.x -> 2.x Migration Overview'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '## 1.x -> 2.x迁移概述'
- en: The SQLAlchemy 2.0 transition presents itself in the SQLAlchemy 1.4 release
    as a series of steps that allow an application of any size or complexity to be
    migrated to SQLAlchemy 2.0 using a gradual, iterative process. Lessons learned
    from the Python 2 to Python 3 transition have inspired a system that intends to
    as great a degree as possible to not require any “breaking” changes, or any change
    that would need to be made universally or not at all.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0过渡在SQLAlchemy 1.4发布中呈现为一系列步骤，允许任何规模或复杂度的应用程序使用渐进式、迭代式的过程迁移到SQLAlchemy
    2.0。从Python 2到Python 3的转换中吸取的教训启发了一个系统，尽可能地不需要任何“破坏性”更改，或者不需要普遍进行或根本不进行任何更改。
- en: As a means of both proving the 2.0 architecture as well as allowing a fully
    iterative transition environment, the entire scope of 2.0’s new APIs and features
    are present and available within the 1.4 series; this includes major new areas
    of functionality such as the SQL caching system, the new ORM statement execution
    model, new transactional paradigms for both ORM and Core, a new ORM declarative
    system that unifies classical and declarative mapping, support for Python dataclasses,
    and asyncio support for Core and ORM.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 作为证明2.0架构的手段，同时也为全面迭代的过渡环境提供支持，2.0全新API和功能的整体范围均包含在1.4系列中；其中包括主要的新功能领域，如SQL缓存系统、新的ORM语句执行模型、ORM和Core的新事务范式、统一经典和声明性映射的新ORM声明性系统、对Python数据类的支持，以及Core和ORM的asyncio支持。
- en: The steps to achieve 2.0 migration are in the following subsections; overall,
    the general strategy is that once an application runs on 1.4 with all warning
    flags turned on and does not emit any 2.0-deprecation warnings, it is now **mostly**
    cross-compatible with SQLAlchemy 2.0\. **Please note there may be additional API
    and behavioral changes that may behave differently when running against SQLAlchemy
    2.0; always test code against an actual SQLAlchemy 2.0 release as the final step
    in migrating**.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 实现2.0迁移的步骤在以下子章节中；总体而言，一般策略是，一旦一个应用程序在1.4上运行，并且没有发出任何2.0弃用警告，它现在**基本上**与SQLAlchemy
    2.0兼容。**请注意，当运行针对SQLAlchemy 2.0时，可能会有额外的API和行为变化，这些变化可能在迁移时表现不同；始终在实际SQLAlchemy
    2.0版本上测试代码作为迁移的最后一步**。
- en: First Prerequisite, step one - A Working 1.3 Application
  id: totrans-457
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一个先决条件，第一步 - 一个可运行的1.3应用程序
- en: The first step is getting an existing application onto 1.4, in the case of a
    typical non trivial application, is to ensure it runs on SQLAlchemy 1.3 with no
    deprecation warnings. Release 1.4 does have a few changes linked to conditions
    that warn in previous version, including some warnings that were introduced in
    1.3, in particular some changes to the behavior of the [`relationship.viewonly`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship") and [`relationship.sync_backref`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.sync_backref
    "sqlalchemy.orm.relationship") flags.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将现有应用程序迁移到1.4，在典型的非平凡应用程序的情况下，确保它在SQLAlchemy 1.3上运行且没有弃用警告。1.4版本确实有一些与在先前版本中发出警告的条件相关的变化，包括一些在1.3中引入的警告，特别是对[`relationship.viewonly`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship")和[`relationship.sync_backref`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.sync_backref
    "sqlalchemy.orm.relationship")标志行为的一些变化。
- en: For best results, the application should be able to run, or pass all of its
    tests, with the latest SQLAlchemy 1.3 release with no SQLAlchemy deprecation warnings;
    these are warnings emitted for the [`SADeprecationWarning`](../core/exceptions.html#sqlalchemy.exc.SADeprecationWarning
    "sqlalchemy.exc.SADeprecationWarning") class.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得最佳结果，应用程序应该能够在最新的SQLAlchemy 1.3版本上运行，或通过所有测试，而不会出现任何SQLAlchemy弃用警告；这些警告是针对[`SADeprecationWarning`](../core/exceptions.html#sqlalchemy.exc.SADeprecationWarning
    "sqlalchemy.exc.SADeprecationWarning")类发出的。
- en: First Prerequisite, step two - A Working 1.4 Application
  id: totrans-460
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一个先决条件，第二步 - 一个可运行的1.4应用程序
- en: Once the application is good to go on SQLAlchemy 1.3, the next step is to get
    it running on SQLAlchemy 1.4\. In the vast majority of cases, applications should
    run without problems from SQLAlchemy 1.3 to 1.4\. However, it’s always the case
    between any 1.x and 1.y release, APIs and behaviors have changed either subtly
    or in some cases a little less subtly, and the SQLAlchemy project always gets
    a good deal of regression reports for the first few months.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序在SQLAlchemy 1.3上运行良好，下一步是让它在SQLAlchemy 1.4上运行。在绝大多数情况下，应用程序应该可以从SQLAlchemy
    1.3顺利过渡到1.4。然而，在任何1.x和1.y版本之间，API和行为都可能发生了微妙的变化，或者在某些情况下变化更加明显，SQLAlchemy项目总是在最初几个月收到大量的回归报告。
- en: 'The 1.x->1.y release process usually has a few changes around the margins that
    are a little bit more dramatic and are based around use cases that are expected
    to be very seldom if at all used. For 1.4, the changes identified as being in
    this realm are as follows:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 1.x->1.y版本的发布过程通常在边缘上有一些比较显著的变化，这些变化基于预期很少或根本不会使用的用例。对于1.4版本，被确定为属于这个领域的变化如下：
- en: '[The URL object is now immutable](migration_14.html#change-5526) - this impacts
    code that would be manipulating the [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object and may impact code that makes use of the [`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") extension point. This is an uncommon case
    but may affect in particular some test suites that are making use of special database
    provisioning logic. A github search for code that uses the relatively new and
    little-known [`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") class found two projects that were unaffected
    by the change.'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[URL 对象现在是不可变的](migration_14.html#change-5526) - 这会影响那些会操作 [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") 对象的代码，并可能影响使用 [`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") 扩展点的代码。这是一个不常见的情况，但可能会特别影响一些使用特殊数据库提供逻辑的测试套件。通过搜索使用相对较新且鲜为人知的
    [`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") 类的代码，发现两个项目不受此更改影响。'
- en: '[A SELECT statement is no longer implicitly considered to be a FROM clause](migration_14.html#change-4617)
    - this change may impact code that was somehow relying upon behavior that was
    mostly unusable in the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, where it would create unnamed subqueries
    that were usually confusing and non-working. These subqueries would be rejected
    by most databases in any case as a name is usually required except on SQLite,
    however it is possible some applications will need to adjust some queries that
    are inadvertently relying upon this.'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SELECT 语句不再隐式视为 FROM 子句](migration_14.html#change-4617) - 这一变化可能会影响某些依赖于 [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造的行为的代码，其中它会创建通常令人困惑且无效的无名子查询。这些子查询在大多数数据库中都会被拒绝，因为通常需要一个名称，除了
    SQLite 外。然而，一些应用程序可能需要调整一些意外依赖于此的查询。'
- en: '[select().join() and outerjoin() add JOIN criteria to the current query, rather
    than creating a subquery](migration_14.html#change-select-join) - somewhat related,
    the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    class featured `.join()` and `.outerjoin()` methods that implicitly created a
    subquery and then returned a [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") construct, which again would be mostly useless
    and produced lots of confusion. The decision was made to move forward with the
    vastly more useful 2.0-style join-building approach where these methods now work
    the same way as the ORM [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method.'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[select().join() 和 outerjoin() 现在向当前查询添加 JOIN 条件，而不是创建子查询](migration_14.html#change-select-join)
    - 有些相关的，[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    类具有 `.join()` 和 `.outerjoin()` 方法，它们隐式创建一个子查询，然后返回一个 [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") 构造，这再次几乎没有用处且会产生很多混淆。决定采用更有用的 2.0 风格的连接构建方法，这些方法现在与
    ORM [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    方法的工作方式相同。'
- en: '[Many Core and ORM statement objects now perform much of their construction
    and validation in the compile phase](migration_14.html#change-deferred-construction)
    - some error messages related to construction of a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") or [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") may not be emitted until compilation / execution,
    rather than at construction time. This might impact some test suites that are
    testing against failure modes.'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[许多 Core 和 ORM 语句对象现在在编译阶段执行大部分构造和验证工作](migration_14.html#change-deferred-construction)
    - 一些与构造 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    或 [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    相关的错误消息可能直到编译/执行时才会被发出，而不是在构造时。这可能会影响一些测试套件，这些测试套件正在针对失败模式进行测试。'
- en: For the full overview of SQLAlchemy 1.4 changes, see the [What’s New in SQLAlchemy
    1.4?](migration_14.html) document.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 SQLAlchemy 1.4 变化的完整概述，请参阅 [SQLAlchemy 1.4 有什么新特性？](migration_14.html) 文档。
- en: Migration to 2.0 Step One - Python 3 only (Python 3.7 minimum for 2.0 compatibility)
  id: totrans-468
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移到 2.0 第一步 - 仅支持 Python 3（Python 3.7 最低版本兼容 2.0）
- en: SQLAlchemy 2.0 was first inspired by the fact that Python 2’s EOL was in 2020.
    SQLAlchemy is taking a longer period of time than other major projects to drop
    Python 2.7 support. However, in order to use SQLAlchemy 2.0, the application will
    need to be runnable on at least **Python 3.7**. SQLAlchemy 1.4 supports Python
    3.6 or newer within the Python 3 series; throughout the 1.4 series, the application
    can remain running on Python 2.7 or on at least Python 3.6\. Version 2.0 however
    starts at Python 3.7.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0 最初受到 Python 2 的 EOL 是在 2020 年的事实的启发。SQLAlchemy 比其他主要项目花费更长的时间来放弃对
    Python 2.7 的支持。然而，为了使用 SQLAlchemy 2.0，应用程序需要至少在**Python 3.7**上运行。SQLAlchemy 1.4
    支持 Python 3 系列中的 Python 3.6 或更新版本；在 1.4 系列中，应用程序可以继续在 Python 2.7 上运行，或者至少在 Python
    3.6 上运行。但是，版本 2.0 从 Python 3.7 开始。
- en: '### Migration to 2.0 Step Two - Turn on RemovedIn20Warnings'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '### 迁移到 2.0 步骤二 - 打开 RemovedIn20Warnings'
- en: SQLAlchemy 1.4 features a conditional deprecation warning system inspired by
    the Python “-3” flag that would indicate legacy patterns in a running application.
    For SQLAlchemy 1.4, the `RemovedIn20Warning` deprecation class is emitted only
    when an environment variable `SQLALCHEMY_WARN_20` is set to either of `true` or
    `1`.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 1.4 特性一个有条件的弃用警告系统，灵感来自 Python 中指示运行应用程序中的遗留模式的“-3”标志。对于 SQLAlchemy
    1.4，只有当环境变量 `SQLALCHEMY_WARN_20` 被设置为 `true` 或 `1` 时，才会发出 `RemovedIn20Warning`
    弃用类。
- en: 'Given the example program below:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于下面的示例程序：
- en: '[PRE90]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'The above program uses several patterns that many users will already identify
    as “legacy”, namely the use of the `Engine.execute()` method that’s part of the
    “connectionless execution” API. When we run the above program against 1.4, it
    returns a single line:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序使用了许多用户可能已经将其识别为“遗留”的模式，即使用 `Engine.execute()` 方法的“无连接执行”API 的使用。当我们针对 1.4
    运行上述程序时，它返回一行：
- en: '[PRE91]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'To enable “2.0 deprecations mode”, we enable the `SQLALCHEMY_WARN_20=1` variable,
    and additionally ensure that a [warnings filter](https://docs.python.org/3/library/warnings.html#the-warnings-filter)
    that will not suppress any warnings is selected:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用“2.0 弃用模式”，我们启用 `SQLALCHEMY_WARN_20=1` 变量，并确保选择了一个[警告过滤器](https://docs.python.org/3/library/warnings.html#the-warnings-filter)，该过滤器不会抑制任何警告：
- en: '[PRE92]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Since the reported warning location is not always in the correct place, locating
    the offending code may be difficult without the full stacktrace. This can be achieved
    by transforming the warnings to exceptions by specifying the `error` warning filter,
    using Python option `-W error::DeprecationWarning`.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '由于报告的警告位置不总是在正确的位置，没有完整的堆栈跟踪可能会很难找到有问题的代码。这可以通过将警告转换为异常来实现，通过指定 `error` 警告过滤器，使用
    Python 选项 `-W error::DeprecationWarning`。 '
- en: 'With warnings turned on, our program now has a lot to say:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 打开警告后，我们的程序现在有很多话要说：
- en: '[PRE93]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'With the above guidance, we can migrate our program to use 2.0 styles, and
    as a bonus our program is much clearer:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 通过上述指导，我们可以将我们的程序迁移到使用 2.0 样式，并且作为奖励，我们的程序变得更加清晰：
- en: '[PRE94]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: The goal of “2.0 deprecations mode” is that a program which runs with no `RemovedIn20Warning`
    warnings with “2.0 deprecations mode” turned on is then ready to run in SQLAlchemy
    2.0.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: “2.0 弃用模式”的目标是，一个在“2.0 弃用模式”下没有 `RemovedIn20Warning` 警告的程序，然后准备运行在 SQLAlchemy
    2.0 中。
- en: Migration to 2.0 Step Three - Resolve all RemovedIn20Warnings
  id: totrans-484
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移到 2.0 步骤三 - 解决所有 RemovedIn20Warnings
- en: 'Code can be developed iteratively to resolve these warnings. Within the SQLAlchemy
    project itself, the approach taken is as follows:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可以迭代开发以解决这些警告。在 SQLAlchemy 项目本身中，采取的方法如下：
- en: enable the `SQLALCHEMY_WARN_20=1` environment variable in the test suite, for
    SQLAlchemy this is in the tox.ini file
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试套件中启用 `SQLALCHEMY_WARN_20=1` 环境变量，对于 SQLAlchemy，这在 tox.ini 文件中
- en: 'Within the setup for the test suite, set up a series of warnings filters that
    will select for particular subsets of warnings to either raise an exception, or
    to be ignored (or logged). Work with just one subgroup of warnings at a time.
    Below, a warnings filter is configured for an application where the change to
    the Core level `.execute()` calls will be needed in order for all tests to pass,
    but all other 2.0-style warnings will be suppressed:'
  id: totrans-487
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试套件的设置中，设置一系列警告过滤器，以选择特定的警告子集来引发异常，或者被忽略（或记录）。逐个子组警告地进行工作。下面，为一个应用程序配置了一个警告过滤器，其中需要对核心级别的
    `.execute()` 调用进行更改，以便所有测试都能通过，但是将所有其他 2.0 样式的警告都抑制：
- en: '[PRE95]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: As each sub-category of warnings are resolved in the application, new warnings
    that are caught by the “always” filter can be added to the list of “errors” to
    be resolved.
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当应用程序中解决了警告的每个子类别时，被“always”过滤器捕获的新警告可以添加到“错误”列表中以解决。
- en: Once no more warnings are emitted, the filter can be removed.
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦不再发出警告，过滤器可以被移除。
- en: Migration to 2.0 Step Four - Use the `future` flag on Engine
  id: totrans-491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移到2.0步骤四 - 在引擎上使用`future`标志
- en: The [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    object features an updated transaction-level API in version 2.0\. In 1.4, this
    new API is available by passing the flag `future=True` to the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象在2.0版本中具有更新的事务级API。在1.4中，通过将标志`future=True`传递给[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")函数，可以使用此新API。'
- en: When the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag is used, the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects support the 2.0 API fully and not at all
    any legacy features, including the new argument format for [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), the removal of “implicit autocommit”,
    string statements require the [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct unless the [`Connection.exec_driver_sql()`](../core/connections.html#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") method is used, and connectionless
    execution from the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is removed.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine")标志时，[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")和[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象完全支持2.0 API，不再支持任何旧特性，包括[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")的新参数格式，删除了“隐式自动提交”，字符串语句需要使用[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造，除非使用[`Connection.exec_driver_sql()`](../core/connections.html#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql")方法，以及从[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")���行无连接执行。
- en: If all `RemovedIn20Warning` warnings have been resolved regarding use of the
    [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    then the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag may be enabled and there should be no errors
    raised.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 如果关于[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")和[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的所有`RemovedIn20Warning`警告都已解决，则可以启用[`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine")标志，并且不应该引发任何错误。
- en: 'The new engine is described at [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") which delivers a new [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object. In addition to the above changes, the,
    [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object features [`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") and [`Connection.rollback()`](../core/connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") methods, to support the new “commit-as-you-go”
    mode of operation:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 新引擎在[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")中描述，它提供了一个新的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。除了上述更改外，[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象具有[`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")和[`Connection.rollback()`](../core/connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback")方法，以支持新的“随时提交”操作模式：
- en: '[PRE96]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Migration to 2.0 Step Five - Use the `future` flag on Session
  id: totrans-497
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移到2.0步骤五 - 在会话上使用`future`标志
- en: The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object also features an updated transaction/connection level API in version 2.0\.
    This API is available in 1.4 using the [`Session.future`](../orm/session_api.html#sqlalchemy.orm.Session.params.future
    "sqlalchemy.orm.Session") flag on [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") or on [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0 版本中，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象还具有更新的事务/连接级 API。在 1.4 中可通过在 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 或 [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") 上使用 [`Session.future`](../orm/session_api.html#sqlalchemy.orm.Session.params.future
    "sqlalchemy.orm.Session") 标志来使用此 API。
- en: 'The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object supports “future” mode in place, and involves these changes:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象支持“future”模式，并涉及以下更改：'
- en: The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    no longer supports “bound metadata” when it resolves the engine to be used for
    connectivity. This means that an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object **must** be passed to the constructor (this
    may be either a legacy or future style object).
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当解析用于连接的引擎时，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    不再支持“绑定的元数据”。这意味着必须将一个 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象传递给构造函数（这可以是传统或未来风格的对象）。
- en: The [`Session.begin.subtransactions`](../orm/session_api.html#sqlalchemy.orm.Session.begin.params.subtransactions
    "sqlalchemy.orm.Session.begin") flag is no longer supported.
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`Session.begin.subtransactions`](../orm/session_api.html#sqlalchemy.orm.Session.begin.params.subtransactions
    "sqlalchemy.orm.Session.begin") 标志不再受支持。'
- en: The [`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") method always emits a COMMIT to the database,
    rather than attempting to reconcile “subtransactions”.
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") 方法始终向数据库发出 COMMIT，而不是尝试调和“子事务”。'
- en: The [`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method always rolls back the full stack of
    transactions at once, rather than attempting to keep “subtransactions” in place.
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") 方法总是一次性回滚整个事务堆栈，而不是尝试保留“子事务”。'
- en: 'The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    also supports more flexible creational patterns in 1.4 which are now closely matched
    to the patterns used by the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object. Highlights include that the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") may be used as a context manager:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 中，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    还支持更灵活的创建模式，现在与 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象使用的模式紧密匹配。重点包括 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 可以作为上下文管理器使用：
- en: '[PRE97]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'In addition, the [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") object supports a [`sessionmaker.begin()`](../orm/session_api.html#sqlalchemy.orm.sessionmaker.begin
    "sqlalchemy.orm.sessionmaker.begin") context manager that will create a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and begin /commit a transaction in one block:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    对象支持一个 [`sessionmaker.begin()`](../orm/session_api.html#sqlalchemy.orm.sessionmaker.begin
    "sqlalchemy.orm.sessionmaker.begin") 上下文管理器，将在一个块中创建一个 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 并开始/提交一个事务：
- en: '[PRE98]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: See the section [Session-level vs. Engine level transaction control](../orm/session_transaction.html#orm-session-vs-engine)
    for a comparison of [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") creational patterns compared to those of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [Session级 vs. Engine级事务控制](../orm/session_transaction.html#orm-session-vs-engine)
    部分，比较 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    创建模式与 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    创建模式的对比。
- en: Once the application passes all tests/ runs with `SQLALCHEMY_WARN_20=1` and
    all `exc.RemovedIn20Warning` occurrences set to raise an error, **the application
    is ready!**.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序通过了所有测试/使用 `SQLALCHEMY_WARN_20=1` 运行，并且所有 `exc.RemovedIn20Warning` 的出现都设置为引发错误，**应用程序就准备好了！**。
- en: The sections that follow will detail the specific changes to make for all major
    API modifications.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的章节将详细介绍所有主要 API 修改的具体更改。
- en: '### Migration to 2.0 Step Six - Add `__allow_unmapped__` to explicitly typed
    ORM models'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '### 迁移到 2.0 第六步 - 在显式类型的 ORM 模型中添加 `__allow_unmapped__`'
- en: SQLAlchemy 2.0 has new support for runtime interpretation of [**PEP 484**](https://peps.python.org/pep-0484/)
    typing annotations on ORM models. A requirement of these annotations is that they
    must make use of the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    generic container. Annotations which don’t use [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") which link to constructs such as [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") will raise errors in Python, as they suggest mis-configurations.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0 新增了对 ORM 模型上 [**PEP 484**](https://peps.python.org/pep-0484/)
    类型标注的运行时解释支持。这些注解的要求是它们必须使用 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 泛型容器。那些不使用 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 的注解，比如与 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 等构造关联的注解，在 Python 中会引发错误，因为它们暗示了配置错误。
- en: 'SQLAlchemy applications that use the [Mypy plugin](../orm/extensions/mypy.html)
    with explicit annotations that don’t use [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") in their annotations are subject to these errors, as
    would occur in the example below:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [Mypy 插件](../orm/extensions/mypy.html) 的 SQLAlchemy 应用程序中，如果显式注解不使用 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")，则会出现这些错误，如下例所示：
- en: '[PRE99]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Above, the `Foo.bars` and `Bar.foo` [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") declarations will raise an error at class construction
    time because they don’t use [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") (by contrast, the annotations that use [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") are ignored by 2.0, as these are able to be recognized
    as a legacy configuration style). To allow all annotations that don’t use [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") to pass without error, the `__allow_unmapped__` attribute
    may be used on the class or any subclasses, which will cause the annotations in
    these cases to be ignored completely by the new Declarative system.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，`Foo.bars` 和 `Bar.foo` 的 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 声明会在类构造时引发错误，因为它们没有使用 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")（相比之下，使用 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 的注解在 2.0 版本中会被忽略，因为这些注解能够被识别为传统的配置风格）。为了允许所有不使用 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 的注解通过而不报错，可以在类或任何子类上使用 `__allow_unmapped__` 属性，这将导致在这些情况下完全忽略新
    Declarative 系统中的注解。
- en: Note
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 注：
- en: The `__allow_unmapped__` directive applies **only** to the *runtime* behavior
    of the ORM. It does not affect the behavior of Mypy, and the above mapping as
    written still requires that the Mypy plugin be installed. For fully 2.0 style
    ORM models that will type correctly under Mypy *without* a plugin, follow the
    migration steps at [Migrating an Existing Mapping](whatsnew_20.html#whatsnew-20-orm-typing-migration).
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '`__allow_unmapped__` 指令**仅**适用于 ORM 的*运行时*行为。它不会影响 Mypy 的行为，上述映射仍然需要安装 Mypy
    插件。对于完全符合 2.0 样式的 ORM 模型，在不需要插件的情况下可以正确进行类型标注，请遵循 [迁移现有映射](whatsnew_20.html#whatsnew-20-orm-typing-migration)
    中的迁移步骤。'
- en: 'The example below illustrates the application of `__allow_unmapped__` to the
    Declarative `Base` class, where it will take effect for all classes that descend
    from `Base`:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了将 `__allow_unmapped__` 应用于 Declarative `Base` 类，在那里它将对所有从 `Base` 继承的类生效：
- en: '[PRE100]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Changed in version 2.0.0beta3: - improved the `__allow_unmapped__` attribute
    support to allow for 1.4-style explicit annotated relationships that don’t use
    [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    to remain usable.  ### Migration to 2.0 Step Seven - Test against a SQLAlchemy
    2.0 Release'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2.0.0beta3 版本起发生了变化：- 改进了`__allow_unmapped__`属性支持，使得能够保持对 1.4 风格的显式注释关系的支持，而不使用[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 也能够保持可用性。### 迁移到 2.0 第七步 - 对 SQLAlchemy 2.0 发行版进行测试
- en: As mentioned previously, SQLAlchemy 2.0 has additional API and behavioral changes
    that are intended to be backwards compatible, however may introduce some incompatibilities
    nonetheless. Therefore after the overall porting process is complete, the final
    step is to test against the most recent release of SQLAlchemy 2.0 to correct for
    any remaining issues that might be present.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，SQLAlchemy 2.0 具有额外的 API 和行为更改，旨在向后兼容，但仍然可能引入一些不兼容性。 因此，在整个迁移过程完成后，最后一步是针对最新版本的
    SQLAlchemy 2.0 进行测试，以纠正可能存在的任何剩余问题。
- en: The guide at [What’s New in SQLAlchemy 2.0?](whatsnew_20.html) provides an overview
    of new features and behaviors for SQLAlchemy 2.0 which extend beyond the base
    set of 1.4->2.0 API changes.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [SQLAlchemy 2.0 的新特性是什么？](whatsnew_20.html) 指南中提供了对超出基本 1.4->2.0 API 更改范围的
    SQLAlchemy 2.0 的新特性和行为的概述。
- en: First Prerequisite, step one - A Working 1.3 Application
  id: totrans-523
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一个先决条件，第一步 - 一个工作中的 1.3 应用程序
- en: The first step is getting an existing application onto 1.4, in the case of a
    typical non trivial application, is to ensure it runs on SQLAlchemy 1.3 with no
    deprecation warnings. Release 1.4 does have a few changes linked to conditions
    that warn in previous version, including some warnings that were introduced in
    1.3, in particular some changes to the behavior of the [`relationship.viewonly`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship") and [`relationship.sync_backref`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.sync_backref
    "sqlalchemy.orm.relationship") flags.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将现有的应用程序升级到 1.4，在典型的非平凡应用程序的情况下，确保它在 SQLAlchemy 1.3 上运行时没有弃用警告。 发布 1.4 确实有一些与在之前版本中发出警告的条件相关的更改，包括一些在
    1.3 中引入的警告，特别是一些关于[`relationship.viewonly`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship")和[`relationship.sync_backref`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.sync_backref
    "sqlalchemy.orm.relationship") 标志行为的更改。
- en: For best results, the application should be able to run, or pass all of its
    tests, with the latest SQLAlchemy 1.3 release with no SQLAlchemy deprecation warnings;
    these are warnings emitted for the [`SADeprecationWarning`](../core/exceptions.html#sqlalchemy.exc.SADeprecationWarning
    "sqlalchemy.exc.SADeprecationWarning") class.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 为了达到最佳效果，应用程序应该能够在最新的 SQLAlchemy 1.3 版本上运行，或通过所有测试，并且没有 SQLAlchemy 弃用警告； 这些是针对[`SADeprecationWarning`](../core/exceptions.html#sqlalchemy.exc.SADeprecationWarning
    "sqlalchemy.exc.SADeprecationWarning") 类发出的警告。
- en: First Prerequisite, step two - A Working 1.4 Application
  id: totrans-526
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一个先决条件，第二步 - 一个工作中的 1.4 应用程序
- en: Once the application is good to go on SQLAlchemy 1.3, the next step is to get
    it running on SQLAlchemy 1.4\. In the vast majority of cases, applications should
    run without problems from SQLAlchemy 1.3 to 1.4\. However, it’s always the case
    between any 1.x and 1.y release, APIs and behaviors have changed either subtly
    or in some cases a little less subtly, and the SQLAlchemy project always gets
    a good deal of regression reports for the first few months.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序在 SQLAlchemy 1.3 上运行良好，下一步是将其运行在 SQLAlchemy 1.4 上。 在绝大多数情况下，应用程序应该可以在从
    SQLAlchemy 1.3 到 1.4 的过程中无问题地运行。 然而，不管是在任何 1.x 和 1.y 发行版之间，API 和行为都可能发生了微妙的或在某些情况下稍微不那么微妙的变化，而
    SQLAlchemy 项目总是在前几个月收到大量的回归报告。
- en: 'The 1.x->1.y release process usually has a few changes around the margins that
    are a little bit more dramatic and are based around use cases that are expected
    to be very seldom if at all used. For 1.4, the changes identified as being in
    this realm are as follows:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 1.x->1.y 发行过程通常会有一些在边缘方面略微戏剧性的更改，这些更改是基于预期几乎不会或根本不会使用的用例。 对于 1.4，被确定为属于此领域的更改如下：
- en: '[The URL object is now immutable](migration_14.html#change-5526) - this impacts
    code that would be manipulating the [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object and may impact code that makes use of the [`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") extension point. This is an uncommon case
    but may affect in particular some test suites that are making use of special database
    provisioning logic. A github search for code that uses the relatively new and
    little-known [`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin") class found two projects that were unaffected
    by the change.'
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[URL对象现在是不可变的](migration_14.html#change-5526) - 这会影响那些会操作[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")对象的代码，并可能影响使用[`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin")扩展点的代码。这是一个不常见的情况，但可能会特别影响一些使用特殊数据库提供逻辑的测试套件。在github上搜索使用相对较新且鲜为人知的[`CreateEnginePlugin`](../core/connections.html#sqlalchemy.engine.CreateEnginePlugin
    "sqlalchemy.engine.CreateEnginePlugin")类的代码时，发现两个项目不受此更改影响。'
- en: '[A SELECT statement is no longer implicitly considered to be a FROM clause](migration_14.html#change-4617)
    - this change may impact code that was somehow relying upon behavior that was
    mostly unusable in the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, where it would create unnamed subqueries
    that were usually confusing and non-working. These subqueries would be rejected
    by most databases in any case as a name is usually required except on SQLite,
    however it is possible some applications will need to adjust some queries that
    are inadvertently relying upon this.'
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SELECT语句不再被隐式视为FROM子句](migration_14.html#change-4617) - 这个变化可能会影响一些某种程度上依赖于在[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造中通常无法使用的行为的代码，其中它会创建通常令人困惑且无法工作的未命名子查询。这些子查询在大多数情况下会被大多数数据库拒绝，因为通常需要一个名称，除了SQLite之外，然而一些应用程序可能需要调整一些意外依赖于此的查询。'
- en: '[select().join() and outerjoin() add JOIN criteria to the current query, rather
    than creating a subquery](migration_14.html#change-select-join) - somewhat related,
    the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    class featured `.join()` and `.outerjoin()` methods that implicitly created a
    subquery and then returned a [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") construct, which again would be mostly useless
    and produced lots of confusion. The decision was made to move forward with the
    vastly more useful 2.0-style join-building approach where these methods now work
    the same way as the ORM [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method.'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[select().join()和outerjoin()现在向当前查询添加JOIN条件，而不是创建子查询](migration_14.html#change-select-join)
    - 有些相关的是，[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")类具有`.join()`和`.outerjoin()`方法，这些方法隐式地创建了一个子查询，然后返回一个[`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")构造，这在大多数情况下是无用的并且会产生很多混乱。决定采用更加有用的2.0风格的连接构建方法，这些方法现在与ORM
    [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")方法的工作方式相同。'
- en: '[Many Core and ORM statement objects now perform much of their construction
    and validation in the compile phase](migration_14.html#change-deferred-construction)
    - some error messages related to construction of a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") or [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") may not be emitted until compilation / execution,
    rather than at construction time. This might impact some test suites that are
    testing against failure modes.'
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[许多核心和ORM语句对象现在在编译阶段执行大部分构建和验证工作](migration_14.html#change-deferred-construction)
    - 一些与[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")或[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构建相关的错误消息可能要等到编译/执行阶段才会被发出，而不是在构建时。这可能会影响一些针对失败模式进行测试的测试套件。'
- en: For the full overview of SQLAlchemy 1.4 changes, see the [What’s New in SQLAlchemy
    1.4?](migration_14.html) document.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看SQLAlchemy 1.4变更的完整概述，请参阅[SQLAlchemy 1.4有什么新特性？](migration_14.html)文档。
- en: Migration to 2.0 Step One - Python 3 only (Python 3.7 minimum for 2.0 compatibility)
  id: totrans-534
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移到2.0第一步 - 仅支持Python 3（Python 3.7最低版本以实现2.0兼容性）
- en: SQLAlchemy 2.0 was first inspired by the fact that Python 2’s EOL was in 2020.
    SQLAlchemy is taking a longer period of time than other major projects to drop
    Python 2.7 support. However, in order to use SQLAlchemy 2.0, the application will
    need to be runnable on at least **Python 3.7**. SQLAlchemy 1.4 supports Python
    3.6 or newer within the Python 3 series; throughout the 1.4 series, the application
    can remain running on Python 2.7 or on at least Python 3.6\. Version 2.0 however
    starts at Python 3.7.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0最初的灵感来自于Python 2的EOL是在2020年。SQLAlchemy花费的时间比其他主要项目更长来放弃Python
    2.7支持。但是，为了使用SQLAlchemy 2.0，应用程序将需要至少运行在**Python 3.7**上。SQLAlchemy 1.4在Python
    3系列中支持Python 3.6或更新版本；在1.4系列中，应用程序可以继续在Python 2.7上运行或至少在Python 3.6上运行。然而，版本2.0从Python
    3.7开始。
- en: '### Migration to 2.0 Step Two - Turn on RemovedIn20Warnings'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '### 迁移到2.0第二步 - 打开RemovedIn20Warnings'
- en: SQLAlchemy 1.4 features a conditional deprecation warning system inspired by
    the Python “-3” flag that would indicate legacy patterns in a running application.
    For SQLAlchemy 1.4, the `RemovedIn20Warning` deprecation class is emitted only
    when an environment variable `SQLALCHEMY_WARN_20` is set to either of `true` or
    `1`.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 1.4具有受Python“-3”标志启发的条件弃用警告系统，该标志将在运行中的应用程序中指示遗留模式。对于SQLAlchemy 1.4，仅当环境变量`SQLALCHEMY_WARN_20`设置为`true`或`1`时，才会发出`RemovedIn20Warning`弃用类。
- en: 'Given the example program below:'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 给定以下示例程序：
- en: '[PRE101]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'The above program uses several patterns that many users will already identify
    as “legacy”, namely the use of the `Engine.execute()` method that’s part of the
    “connectionless execution” API. When we run the above program against 1.4, it
    returns a single line:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序使用了许多用户已经将其识别为“遗留”的模式，即使用`Engine.execute()`方法的“无连接执行”API。当我们对上述程序运行1.4版本时，它返回一行：
- en: '[PRE102]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'To enable “2.0 deprecations mode”, we enable the `SQLALCHEMY_WARN_20=1` variable,
    and additionally ensure that a [warnings filter](https://docs.python.org/3/library/warnings.html#the-warnings-filter)
    that will not suppress any warnings is selected:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用“2.0弃用模式”，我们启用`SQLALCHEMY_WARN_20=1`变量，并确保选择了一个[警告过滤器](https://docs.python.org/3/library/warnings.html#the-warnings-filter)，不会抑制任何警告：
- en: '[PRE103]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Since the reported warning location is not always in the correct place, locating
    the offending code may be difficult without the full stacktrace. This can be achieved
    by transforming the warnings to exceptions by specifying the `error` warning filter,
    using Python option `-W error::DeprecationWarning`.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 由于报告的警告位置并不总是在正确的位置，找到有问题的代码可能会很困难，没有完整的堆栈跟踪。这可以通过将警告转换为异常来实现，方法是指定`error`警告过滤器，使用Python选项`-W
    error::DeprecationWarning`。
- en: 'With warnings turned on, our program now has a lot to say:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 打开警告后，我们的程序现在有很多话要说：
- en: '[PRE104]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'With the above guidance, we can migrate our program to use 2.0 styles, and
    as a bonus our program is much clearer:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述指导，我们可以将我们的程序迁移到使用2.0风格，作为额外的奖励，我们的程序更加清晰：
- en: '[PRE105]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: The goal of “2.0 deprecations mode” is that a program which runs with no `RemovedIn20Warning`
    warnings with “2.0 deprecations mode” turned on is then ready to run in SQLAlchemy
    2.0.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: “2.0弃用模式”的目标是，在打开“2.0弃用模式”时没有`RemovedIn20Warning`警告的程序，然后准备在SQLAlchemy 2.0中运行。
- en: Migration to 2.0 Step Three - Resolve all RemovedIn20Warnings
  id: totrans-550
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移到2.0第三步 - 解决所有RemovedIn20Warnings
- en: 'Code can be developed iteratively to resolve these warnings. Within the SQLAlchemy
    project itself, the approach taken is as follows:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可以迭代开发以解决这些警告。在SQLAlchemy项目本身中，采取的方法如下：
- en: enable the `SQLALCHEMY_WARN_20=1` environment variable in the test suite, for
    SQLAlchemy this is in the tox.ini file
  id: totrans-552
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试套件中启用`SQLALCHEMY_WARN_20=1`环境变量，对于SQLAlchemy，这是在tox.ini文件中
- en: 'Within the setup for the test suite, set up a series of warnings filters that
    will select for particular subsets of warnings to either raise an exception, or
    to be ignored (or logged). Work with just one subgroup of warnings at a time.
    Below, a warnings filter is configured for an application where the change to
    the Core level `.execute()` calls will be needed in order for all tests to pass,
    but all other 2.0-style warnings will be suppressed:'
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试套件的设置中，设置一系列警告过滤器，将选择特定的警告子集以引发异常，或者忽略（或记录）警告。一次只处理一个警告子组。下面，为应用程序配置了一个警告过滤器，其中需要对Core级别的`.execute()`调用进行更改，以便所有测试都通过，但是所有其他2.0风格的警告都将被抑制：
- en: '[PRE106]'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: As each sub-category of warnings are resolved in the application, new warnings
    that are caught by the “always” filter can be added to the list of “errors” to
    be resolved.
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当应用程序中解决了每个警告的子类别时，被“always”过滤器捕获的新警告可以添加到“errors”列表中以解决。
- en: Once no more warnings are emitted, the filter can be removed.
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦不再发出任何警告，过滤器就可以被移除。
- en: Migration to 2.0 Step Four - Use the `future` flag on Engine
  id: totrans-557
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移至 2.0 第四步 - 在 Engine 上使用 `future` 标志
- en: The [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    object features an updated transaction-level API in version 2.0\. In 1.4, this
    new API is available by passing the flag `future=True` to the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    对象在 2.0 版本中具有更新的事务级 API。在 1.4 版本中，通过向 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 函数传递 `future=True` 标志即可使用这个新 API。'
- en: When the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag is used, the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects support the 2.0 API fully and not at all
    any legacy features, including the new argument format for [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), the removal of “implicit autocommit”,
    string statements require the [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct unless the [`Connection.exec_driver_sql()`](../core/connections.html#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") method is used, and connectionless
    execution from the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is removed.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") 标志时，[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 和 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象完全支持 2.0 API，不再支持任何旧特性，包括 [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 的新参数格式，移除了“隐式自动提交”，字符串语句需要使用 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造，除非使用 [`Connection.exec_driver_sql()`](../core/connections.html#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql") 方法，以及从 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 进行无连接执行的功能被移除。
- en: If all `RemovedIn20Warning` warnings have been resolved regarding use of the
    [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    then the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag may be enabled and there should be no errors
    raised.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 如果关于使用 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    和 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    的所有 `RemovedIn20Warning` 警告都已解决，则可以启用 [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") 标志，并且不应该引发任何错误。
- en: 'The new engine is described at [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") which delivers a new [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object. In addition to the above changes, the,
    [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object features [`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") and [`Connection.rollback()`](../core/connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") methods, to support the new “commit-as-you-go”
    mode of operation:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 新引擎被描述为 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")，它提供了一个新的
    [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象。除了上述更改外，[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象还具有 [`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") 和 [`Connection.rollback()`](../core/connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") 方法，以支持新的“随时提交”操作模式：
- en: '[PRE107]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Migration to 2.0 Step Five - Use the `future` flag on Session
  id: totrans-563
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迁移至 2.0 第五步 - 在 Session 上使用 `future` 标志
- en: The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object also features an updated transaction/connection level API in version 2.0\.
    This API is available in 1.4 using the [`Session.future`](../orm/session_api.html#sqlalchemy.orm.Session.params.future
    "sqlalchemy.orm.Session") flag on [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") or on [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象在 2.0 版本中还具有更新的事务/连接级 API。在 1.4 版本中，可以在 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 或 [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") 上使用 [`Session.future`](../orm/session_api.html#sqlalchemy.orm.Session.params.future
    "sqlalchemy.orm.Session") 标志来使用此 API。'
- en: 'The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object supports “future” mode in place, and involves these changes:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象支持“future”模式，并涉及以下更改：'
- en: The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    no longer supports “bound metadata” when it resolves the engine to be used for
    connectivity. This means that an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object **must** be passed to the constructor (this
    may be either a legacy or future style object).
  id: totrans-566
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    解析用于连接的引擎时，不再支持“bound metadata”。这意味着必须将一个 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象传递给构造函数（这可以是传统或未来风格对象）。
- en: The [`Session.begin.subtransactions`](../orm/session_api.html#sqlalchemy.orm.Session.begin.params.subtransactions
    "sqlalchemy.orm.Session.begin") flag is no longer supported.
  id: totrans-567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不再支持 [`Session.begin.subtransactions`](../orm/session_api.html#sqlalchemy.orm.Session.begin.params.subtransactions
    "sqlalchemy.orm.Session.begin") 标志。
- en: The [`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") method always emits a COMMIT to the database,
    rather than attempting to reconcile “subtransactions”.
  id: totrans-568
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") 方法总是向数据库发出 COMMIT，而不��尝试协调“子事务”。'
- en: The [`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method always rolls back the full stack of
    transactions at once, rather than attempting to keep “subtransactions” in place.
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`Session.rollback()`](../orm/session_api.html#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") 方法总是一次性回滚整个事务堆栈，而不是尝试保持“子事务”。'
- en: 'The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    also supports more flexible creational patterns in 1.4 which are now closely matched
    to the patterns used by the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object. Highlights include that the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") may be used as a context manager:'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 版本中，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    还支持更灵活的创建模式，这些模式现在与 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象使用的模式紧密匹配。亮点包括 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 可以用作上下文管理器：
- en: '[PRE108]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'In addition, the [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") object supports a [`sessionmaker.begin()`](../orm/session_api.html#sqlalchemy.orm.sessionmaker.begin
    "sqlalchemy.orm.sessionmaker.begin") context manager that will create a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and begin /commit a transaction in one block:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    对象支持 [`sessionmaker.begin()`](../orm/session_api.html#sqlalchemy.orm.sessionmaker.begin
    "sqlalchemy.orm.sessionmaker.begin") 上下文管理器，将在一个块中创建一个 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 并开始/提交一个事务：
- en: '[PRE109]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: See the section [Session-level vs. Engine level transaction control](../orm/session_transaction.html#orm-session-vs-engine)
    for a comparison of [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") creational patterns compared to those of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [Session-level vs. Engine level transaction control](../orm/session_transaction.html#orm-session-vs-engine)
    部分，比较了 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    的创建模式与 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    的模式。
- en: Once the application passes all tests/ runs with `SQLALCHEMY_WARN_20=1` and
    all `exc.RemovedIn20Warning` occurrences set to raise an error, **the application
    is ready!**.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序通过所有测试/运行，并且所有 `SQLALCHEMY_WARN_20=1` 和所有 `exc.RemovedIn20Warning` 出现的地方都设置为引发错误，**应用程序就准备好了！**。
- en: The sections that follow will detail the specific changes to make for all major
    API modifications.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分将详细说明所有主要 API 修改的具体更改。
- en: '### Migration to 2.0 Step Six - Add `__allow_unmapped__` to explicitly typed
    ORM models'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '### 迁移至 2.0 第六步 - 为显式类型化的 ORM 模型添加 `__allow_unmapped__`'
- en: SQLAlchemy 2.0 has new support for runtime interpretation of [**PEP 484**](https://peps.python.org/pep-0484/)
    typing annotations on ORM models. A requirement of these annotations is that they
    must make use of the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    generic container. Annotations which don’t use [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") which link to constructs such as [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") will raise errors in Python, as they suggest mis-configurations.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0 新增了对 ORM 模型上 [**PEP 484**](https://peps.python.org/pep-0484/)
    类型注解的运行时解释支持。这些注解的要求是它们必须使用 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 泛型容器。不使用 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 的注解，比如链接到 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 等构造的注解将在 Python 中引发错误，因为它们暗示了错误的配置。
- en: 'SQLAlchemy applications that use the [Mypy plugin](../orm/extensions/mypy.html)
    with explicit annotations that don’t use [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") in their annotations are subject to these errors, as
    would occur in the example below:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [Mypy 插件](../orm/extensions/mypy.html) 的 SQLAlchemy 应用程序，如果在注解中使用了不使用 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 的显式注释，则会出现这些错误，就像下面的示例中所发生的一样：
- en: '[PRE110]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Above, the `Foo.bars` and `Bar.foo` [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") declarations will raise an error at class construction
    time because they don’t use [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") (by contrast, the annotations that use [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") are ignored by 2.0, as these are able to be recognized
    as a legacy configuration style). To allow all annotations that don’t use [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") to pass without error, the `__allow_unmapped__` attribute
    may be used on the class or any subclasses, which will cause the annotations in
    these cases to be ignored completely by the new Declarative system.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，`Foo.bars` 和 `Bar.foo` 的 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 声明将在类构建时引发错误，因为它们不使用 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")（相比之下，使用 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 的注解在 2.0 中被忽略，因为这些能够被识别为传统配置样式）。为了让所有不使用 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 的注解能够无错误通过，可以在类或任何子类上使用 `__allow_unmapped__` 属性，这将导致在这些情况下这些注解完全被新的声明式系统忽略。
- en: Note
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `__allow_unmapped__` directive applies **only** to the *runtime* behavior
    of the ORM. It does not affect the behavior of Mypy, and the above mapping as
    written still requires that the Mypy plugin be installed. For fully 2.0 style
    ORM models that will type correctly under Mypy *without* a plugin, follow the
    migration steps at [Migrating an Existing Mapping](whatsnew_20.html#whatsnew-20-orm-typing-migration).
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '`__allow_unmapped__` 指令**仅**适用于 ORM 的*运行时*行为。它不会影响 Mypy 的行为，上述映射仍然要求安装 Mypy
    插件。对于完全符合 2.0 样式的 ORM 模型，可以在不使用插件的情况下正确进行类型化，遵循 [迁移现有映射](whatsnew_20.html#whatsnew-20-orm-typing-migration)
    中的迁移步骤。'
- en: 'The example below illustrates the application of `__allow_unmapped__` to the
    Declarative `Base` class, where it will take effect for all classes that descend
    from `Base`:'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了将 `__allow_unmapped__` 应用于声明式 `Base` 类的情况，它将对所有从 `Base` 继承的类生效：
- en: '[PRE111]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'Changed in version 2.0.0beta3: - improved the `__allow_unmapped__` attribute
    support to allow for 1.4-style explicit annotated relationships that don’t use
    [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    to remain usable.'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.0beta3 版本中的变更：- 改进了 `__allow_unmapped__` 属性支持，允许保持可用的 1.4 样式显式注释关系，而不使用
    [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")。
- en: '### Migration to 2.0 Step Seven - Test against a SQLAlchemy 2.0 Release'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: '### 迁移到 2.0 第七步 - 测试针对 SQLAlchemy 2.0 版本'
- en: As mentioned previously, SQLAlchemy 2.0 has additional API and behavioral changes
    that are intended to be backwards compatible, however may introduce some incompatibilities
    nonetheless. Therefore after the overall porting process is complete, the final
    step is to test against the most recent release of SQLAlchemy 2.0 to correct for
    any remaining issues that might be present.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，SQLAlchemy 2.0 具有额外的 API 和行为变化，旨在向后兼容，但仍可能引入一些不兼容性。因此，在整体移植过程完成后，最后一步是针对最新版本的
    SQLAlchemy 2.0 进行测试，以纠正可能存在的任何剩余问题。
- en: The guide at [What’s New in SQLAlchemy 2.0?](whatsnew_20.html) provides an overview
    of new features and behaviors for SQLAlchemy 2.0 which extend beyond the base
    set of 1.4->2.0 API changes.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [SQLAlchemy 2.0 有什么新特性？](whatsnew_20.html) 的指南中提供了一个关于 SQLAlchemy 2.0 的新功能和行为的概述，这些新功能和行为超出了
    1.4->2.0 API 变化的基本集。
- en: 2.0 Migration - Core Connection / Transaction
  id: totrans-590
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0 迁移 - Core 连接 / 事务
- en: '### Library-level (but not driver level) “Autocommit” removed from both Core
    and ORM'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '### 库级别（但不是驱动程序级别）的“自动提交”从 Core 和 ORM 中移除'
- en: '**Synopsis**'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'In SQLAlchemy 1.x, the following statements will automatically commit the underlying
    DBAPI transaction, but in SQLAlchemy 2.0 this will not occur:'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLAlchemy 1.x 中，以下语句将自动提交底层的 DBAPI 事务，但在 SQLAlchemy 2.0 中不会发生：
- en: '[PRE112]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Nor will this autocommit:'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 这个自动提交也不会发生：
- en: '[PRE113]'
  id: totrans-596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'The common workaround for custom DML that requires commit, the “autocommit”
    execution option, will be removed:'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义 DML 的常见解决方法是需要提交的“自动提交”执行选项，将被移除：
- en: '[PRE114]'
  id: totrans-598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '**Migration to 2.0**'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'The method that is cross-compatible with [1.x style](../glossary.html#term-1.x-style)
    and [2.0 style](../glossary.html#term-2.0-style) execution is to make use of the
    [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method, or the [`Engine.begin()`](../core/connections.html#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin") context manager:'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [1.x 风格](../glossary.html#term-1.x-style) 和 [2.0 风格](../glossary.html#term-2.0-style)
    执行兼容的方法是使用 [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 方法，或者 [`Engine.begin()`](../core/connections.html#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin") 上下文管理器：
- en: '[PRE115]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'When using [2.0 style](../glossary.html#term-2.0-style) with the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag, “commit as you go” style may also be used, as
    the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    features **autobegin** behavior, which takes place when a statement is first invoked
    in the absence of an explicit call to [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin"):'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 [2.0 风格](../glossary.html#term-2.0-style) 与 [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") 标志时，也可以使用“边提交边进行”风格，因为 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 具有 **autobegin** 行为，当在没有显式调用 [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 的情况下首次调用语句时会发生：
- en: '[PRE116]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: When [2.0 deprecations mode](#migration-20-deprecations-mode) is enabled, a
    warning will emit when the deprecated “autocommit” feature takes place, indicating
    those places where an explicit transaction should be noted.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 当启用 [2.0 弃用模式](#migration-20-deprecations-mode) 时，当弃用的“自动提交”功能发生时，将发出警告，指示应注意显式事务的地方。
- en: '**Discussion**'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: SQLAlchemy’s first releases were at odds with the spirit of the Python DBAPI
    ([**PEP 249**](https://peps.python.org/pep-0249/)) in that it tried to hide [**PEP
    249**](https://peps.python.org/pep-0249/)’s emphasis on “implicit begin” and “explicit
    commit” of transactions. Fifteen years later we now see this was essentially a
    mistake, as SQLAlchemy’s many patterns that attempt to “hide” the presence of
    a transaction make for a more complex API which works inconsistently and is extremely
    confusing to especially those users who are new to relational databases and ACID
    transactions in general. SQLAlchemy 2.0 will do away with all attempts to implicitly
    commit transactions, and usage patterns will always require that the user demarcate
    the “beginning” and the “end” of a transaction in some way, in the same way as
    reading or writing to a file in Python has a “beginning” and an “end”.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 的最初版本与 Python DBAPI（[**PEP 249**](https://peps.python.org/pep-0249/)）的精神相悖，因为它试图隐藏
    [**PEP 249**](https://peps.python.org/pep-0249/) 强调的事务的“隐式开始”和“显式提交”。十五年后，我们现在认识到这基本上是一个错误，因为
    SQLAlchemy 的许多试图“隐藏”事务存在的模式导致了更复杂的 API，其工作不一致，并且对于那些对关系数据库和 ACID 事务一般不熟悉的用户来说，特别是新用户，这种模式极其令人困惑。SQLAlchemy
    2.0 将取消所有隐式提交事务的尝试，并且使用模式将始终要求用户以某种方式标示事务的“开始”和“结束”，就像在 Python 中读取或写入文件一样有“开始”和“结束”一样。
- en: In the case of autocommit for a pure textual statement, there is actually a
    regular expression that parses every statement in order to detect autocommit!
    Not surprisingly, this regex is continuously failing to accommodate for various
    kinds of statements and stored procedures that imply a “write” to the database,
    leading to ongoing confusion as some statements produce results in the database
    and others don’t. By preventing the user from being aware of the transactional
    concept, we get a lot of bug reports on this one because users don’t understand
    that databases always use a transaction, whether or not some layer is autocommitting
    it.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 在纯文本语句的自动提交情况下，实际上有一个正则表达式来解析每个语句以检测自动提交！毫不奇怪，这个正则表达式在持续失败以适应各种隐含对数据库进行“写入”的语句和存储过程，导致持续混淆，因为有些语句在数据库中产生结果，而其他语句则没有。通过防止用户意识到事务概念，我们因为用户不理解数据库是否总是使用事务而产生了很多错误报告，无论某些层是否自动提交了它。
- en: 'SQLAlchemy 2.0 will require that all database actions at every level be explicit
    as to how the transaction should be used. For the vast majority of Core use cases,
    it’s the pattern that is already recommended:'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0 将要求在每个级别的数据库操作中都明确指定事务的使用方式。对于绝大多数 Core 使用案例，已经推荐了以下模式：
- en: '[PRE117]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'For “commit as you go, or rollback instead” usage, which resembles how the
    [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is normally used today, the “future” version of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), which is the one that is returned from an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") that was created using the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag, includes new [`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") and [`Connection.rollback()`](../core/connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") methods, which act upon a transaction
    that is now begun automatically when a statement is first invoked:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“边做边提交，或者回滚”的用法，这与如今通常如何使用 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 很相似，使用 [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") 标志创建的 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 返回的“future”版本 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 中包含了新的 [`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") 和 [`Connection.rollback()`](../core/connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") 方法，这些方法在首次调用语句时自动开始事务：
- en: '[PRE118]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Above, the `engine.connect()` method will return a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") that features **autobegin**, meaning the `begin()`
    event is emitted when the execute method is first used (note however that there
    is no actual “BEGIN” in the Python DBAPI). “autobegin” is a new pattern in SQLAlchemy
    1.4 that is featured both by [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") as well as the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object; autobegin allows that the [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method may be called explicitly when the
    object is first acquired, for schemes that wish to demarcate the beginning of
    the transaction, but if the method is not called, then it occurs implicitly when
    work is first done on the object.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的 `engine.connect()` 方法将返回一个 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象，其具有**自动开始**特性，意味着当首次使用 `execute` 方法时会触发 `begin()`
    事件（注意 Python DBAPI 中实际上没有“BEGIN”）。“自动开始”是 SQLAlchemy 1.4 中的一个新模式，由 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 和 ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 对象都支持；自动开始允许在首次获取对象时显式调用 [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 方法，用于希望在事务开始时划定范围的方案，但如果未调用该方法，则在首次对对象执行操作时隐式发生事务开始。
- en: The removal of “autocommit” is closely related to the removal of “connectionless”
    execution discussed at [“Implicit” and “Connectionless” execution, “bound metadata”
    removed](#migration-20-implicit-execution). All of these legacy patterns built
    up from the fact that Python did not have context managers or decorators when
    SQLAlchemy was first created, so there were no convenient idiomatic patterns for
    demarcating the use of a resource.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 删除“自动提交”与删除讨论过的 [“隐式”和“无连接”执行，“绑定元数据”被移除](#migration-20-implicit-execution)密切相关。所有这些遗留模式都建立在
    Python 在 SQLAlchemy 首次创建时没有上下文管理器或装饰器的事实上，因此没有方便的成语模式来标记资源的使用。
- en: Driver-level autocommit remains available
  id: totrans-614
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 驱动程序级别的自动提交仍然可用
- en: 'True “autocommit” behavior is now widely available with most DBAPI implementations,
    and is supported by SQLAlchemy via the [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameter as discussed at [Setting
    Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit).
    True autocommit is treated as an “isolation level” so that the structure of application
    code does not change when autocommit is used; the [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") context manager as well as methods like
    [`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") may still be used, they are simply no-ops
    at the database driver level when DBAPI-level autocommit is turned on.  ### “Implicit”
    and “Connectionless” execution, “bound metadata” removed'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，大多数 DBAPI 实现都广泛支持真正的“自动提交”行为，并且通过 [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 参数来支持 SQLAlchemy，如 [设置事务隔离级别，包括
    DBAPI 自动提交](../core/connections.html#dbapi-autocommit) 中所讨论的。真正的自动提交被视为“隔离级别”，因此当使用自动提交时，应用程序代码的结构不会发生变化；[`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 上下文管理器以及像 [`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") 这样的方法仍然可以使用，它们在数据库驱动程序级别时简单地成为无操作。 ###
    “隐式”和“无连接”执行，移除“绑定元数据”'
- en: '**Synopsis**'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The ability to associate an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") with a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object, which then makes available a range of so-called
    “connectionless” execution patterns, is removed:'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 将 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    与 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    对象关联的能力被移除，这样一来就无法使用一系列所谓的“无连接”执行模式：
- en: '[PRE119]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '**Migration to 2.0**'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0 版本**'
- en: 'For schema level patterns, explicit use of an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is required. The [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") may still be used directly as the source of connectivity
    for a [`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") operation or autoload operation. For
    executing statements, only the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object has a [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method (in addition to the ORM-level [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method):'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 对于模式级别的模式，需要显式使用[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")仍然可以直接用作[`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")操作或自动加载操作的连接源。对于执行语句，只有[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象有一个[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法（除了ORM级别的[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法）：
- en: '[PRE120]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '**Discussion**'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The Core documentation has already standardized on the desired pattern here,
    so it is likely that most modern applications would not have to change much in
    any case, however there are likely many applications that still rely upon `engine.execute()`
    calls that will need to be adjusted.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 核心文档已经对此处的期望模式进行了标准化，因此大多数现代应用程序很可能不需要做太多改变，然而仍然有许多依赖于`engine.execute()`调用的应用程序需要进行调整。
- en: '“Connectionless” execution refers to the still fairly popular pattern of invoking
    `.execute()` from the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"):'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: “无连接”执行是指从[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")中调用`.execute()`的仍然相当流行的模式：
- en: '[PRE121]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'The above operation implicitly procures a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, and runs the `.execute()` method on it.
    While this appears to be a simple convenience feature, it has been shown to give
    rise to several issues:'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 上述操作隐式地获取了一个[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象，并在其上运行了`.execute()`方法。虽然这看起来是一个简单的便利功能，但已经证明引发了几个问题：
- en: Programs that feature extended strings of `engine.execute()` calls have become
    prevalent, overusing a feature that was intended to be seldom used and leading
    to inefficient non-transactional applications. New users are confused as to the
    difference between `engine.execute()` and `connection.execute()` and the nuance
    between these two approaches is often not understood.
  id: totrans-627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有大量`engine.execute()`调用的程序已经普遍存在，过度使用了本来应该很少使用的功能，并导致了效率低下的非事务性应用。新用户对`engine.execute()`和`connection.execute()`之间的区别感到困惑，而这两种方法之间的微妙差别通常不为人所理解。
- en: The feature relies upon the “application level autocommit” feature in order
    to make sense, which itself is also being removed as it is also [inefficient and
    misleading](#migration-20-autocommit).
  id: totrans-628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此功能依赖于“应用程序级自动提交”功能才能有意义，而这个功能本身也正在被移除，因为它也是[低效且具有误导性的](#migration-20-autocommit)。
- en: In order to handle result sets, `Engine.execute` returns a result object with
    unconsumed cursor results. This cursor result necessarily still links to the DBAPI
    connection which remains in an open transaction, all of which is released once
    the result set has fully consumed the rows waiting within the cursor. This means
    that `Engine.execute` does not actually close out the connection resources that
    it claims to be managing when the call is complete. SQLAlchemy’s “autoclose” behavior
    is well-tuned enough that users don’t generally report any negative effects from
    this system, however it remains an overly implicit and inefficient system left
    over from SQLAlchemy’s earliest releases.
  id: totrans-629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了处理结果集，`Engine.execute` 返回一个带有未消耗的游标结果的结果对象。这个游标结果必然仍然链接到保持打开的事务的DBAPI连接，所有这些在结果集完全消耗了在游标中等待的行后都会被释放。这意味着当调用完成时，`Engine.execute`
    实际上并不关闭它声称正在管理的连接资源。SQLAlchemy的“自动关闭”行为已经调优得足够好，以至于用户通常不会报告这个系统的任何负面影响，但是它仍然是SQLAlchemy最早版本中留下的一个过于隐式和低效的系统。
- en: 'The removal of “connectionless” execution then leads to the removal of an even
    more legacy pattern, that of “implicit, connectionless” execution:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 移除“无连接”执行然后导致移除更加传统的模式，即“隐式，无连接”执行：
- en: '[PRE122]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: The above pattern has all the issues of “connectionless” execution, plus it
    relies upon the “bound metadata” pattern, which SQLAlchemy has tried to de-emphasize
    for many years. This was SQLAlchemy’s very first advertised usage model in version
    0.1, which became obsolete almost immediately when the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object was introduced and later Python context
    managers provided a better pattern for using resources within a fixed scope.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 上述模式存在“无连接”执行的所有问题，而且它依赖于“绑定元数据”模式，这是SQLAlchemy多年来试图减少强调的模式之一。这在SQLAlchemy的第一个广告使用模型中是SQLAlchemy的第一个广告使用模型，在版本0.1中立即变得过时，当[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象被引入后，后来的Python上下文管理器提供了更好的在固定范围内使用资源的模式。
- en: With implicit execution removed, “bound metadata” itself also no longer has
    a purpose within this system. In modern use “bound metadata” tends to still be
    somewhat convenient for working within [`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") calls as well as with [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects, however having these functions receive an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") explicitly provides for clearer application design.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 随着隐式执行的移除，“绑定元数据”本身在该系统中也不再有作用。在现代使用中，“绑定元数据”在[`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")调用以及[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象中仍然有一定的方便之处，但是让这些函数明确接收[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")提供了更清晰的应用设计。
- en: Many Choices becomes One Choice
  id: totrans-634
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 多种选择变为一种选择
- en: 'Overall, the above executional patterns were introduced in SQLAlchemy’s very
    first 0.1 release before the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object even existed. After many years of de-emphasizing
    these patterns, “implicit, connectionless” execution and “bound metadata” are
    no longer as widely used so in 2.0 we seek to finally reduce the number of choices
    for how to execute a statement in Core from “many choices”:'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，上述执行模式是在SQLAlchemy的第一个0.1版本中引入的，甚至在[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象都不存在的情况下。经过多年的减少这些模式的强调，“隐式，无连接”执行和“绑定元数据”不再被广泛使用，所以在2.0版本中我们希望最终减少在核心中执行语句的选择数量：
- en: '[PRE123]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'to “one choice”, where by “one choice” we mean “explicit connection with explicit
    transaction”; there are still a few ways to demarcate transaction blocks depending
    on need. The “one choice” is to procure a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and then to explicitly demarcate the transaction,
    in the case that the operation is a write operation:'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 到“一个选择”，这里的“一个选择”指的是“显式连接和显式事务”；根据需要仍然有几种方式来标记事务块。这个“一个选择”是获得一个[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，然后在操作是写操作的情况下明确标记事务：
- en: '[PRE124]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: execute() method more strict, execution options are more prominent
  id: totrans-639
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: execute() 方法更加严格，执行选项更加突出。
- en: '**Synopsis**'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The argument patterns that may be used with the [`sqlalchemy.engine.Connection()`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") execute method in SQLAlchemy 2.0 are highly simplified,
    removing many previously available argument patterns. The new API in the 1.4 series
    is described at [`sqlalchemy.engine.Connection()`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). The examples below illustrate the patterns that
    require modification:'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0 版本中可用于[`sqlalchemy.engine.Connection()`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")执行方法的参数模式大大简化，删除了许多以前可用的参数模式。 1.4 系列中的新 API 在[`sqlalchemy.engine.Connection()`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")中描述。下面的示例说明了需要修改的模式：
- en: '[PRE125]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '**Migration to 2.0**'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0 版本**'
- en: 'The new [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method now accepts a subset of the argument
    styles that are accepted by the 1.x [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, so the following code is cross-compatible
    between 1.x and 2.0:'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 新的[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法现在接受一部分被 1.x 版本的[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法接受的参数样式，所以以下代码在 1.x 和 2.0 版本之间是兼容的：
- en: '[PRE126]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '**Discussion**'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The use of `*args` and `**kwargs` has been removed both to remove the complexity
    of guessing what kind of arguments were passed to the method, as well as to make
    room for other options, namely the [`Connection.execute.execution_options`](../core/connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") dictionary that is now available to provide
    options on a per statement basis. The method is also modified so that its use
    pattern matches that of the [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method, which is a much more prominent API in
    2.0 style.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 删除了对`*args`和`**kwargs`的使用，旨在消除猜测传递给方法的参数类型的复杂性，以及为其他选项腾出空间，即现在可用于在每个语句基础上提供选项的[`Connection.execute.execution_options`](../core/connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")字典。该方法也修改为其使用模式与[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法相匹配，后者是 2.0 风格中更突出的 API。
- en: The removal of direct string SQL is to resolve an inconsistency between [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") and [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"), where in the former case the string is passed
    to the driver raw, and in the latter case it is first converted to a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct. By allowing only [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") this also limits the accepted parameter format
    to “named” and not “positional”. Finally, the string SQL use case is becoming
    more subject to scrutiny from a security perspective, and the [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct has come to represent an explicit
    boundary into the textual SQL realm where attention to untrusted user input must
    be given.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 删除直接字符串 SQL 是为了解决[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")和[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")之间的不一致性，前者情况下将字符串原始传递给驱动程序，而后者情况下首先将其转换为[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造。通过仅允许[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")，这也限制了接受的参数格式为“命名”而不是“位置”。最后，字符串 SQL 使用案例越来越受到安全性方面的审查，而[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造已成为明确的界限，将其纳入文本 SQL 领域需要注意不受信任用户输入的关注。
- en: '### Result rows act like named tuples'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: '### 结果行表现得像命名元组'
- en: '**Synopsis**'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: 'Version 1.4 introduces an [all new Result object](migration_14.html#change-result-14-core)
    that in turn returns [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, which behave like named tuples when using “future” mode:'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 引入了一个[全新的 Result 对象](migration_14.html#change-result-14-core)，该对象反过来返回
    [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象，在“future”模式下行为类似命名元组：
- en: '[PRE127]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '**Migration to 2.0**'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: Application code or test suites that are testing for a particular key being
    present in a row would need to test the `row.keys()` collection instead. This
    is however an unusual use case as a result row is typically used by code that
    already knows what columns are present within it.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 应用代码或测试套件，如果测试某一行是否存在特定键，则需要测试 `row.keys()` 集合。然而，这是一个不寻常的用例，因为结果行通常由已经知道其中存在哪些列的代码使用。
- en: '**Discussion**'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: Already part of 1.4, the previous `KeyedTuple` class that was used when selecting
    rows from the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object has been replaced by the [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") class, which is the base of the same [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") that comes back with Core statement results when using
    the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag with [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") (when the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag is not set, Core result sets use the `LegacyRow`
    subclass, which maintains backwards-compatible behaviors for the `__contains__()`
    method; ORM exclusively uses the [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") class directly).
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 中已经成为一部分的 `KeyedTuple` 类被替换为从 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象中选择行时使用的 [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 类，该类是使用 [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") 标志与 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 一起使用 Core 语句结果返回的相同 [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 的基类（当未设置 [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") 标志时，Core 结果集使用 `LegacyRow` 子类，该子类保留了 `__contains__()`
    方法的向后兼容行为；ORM 专门直接使用 [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    类）。
- en: This [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    behaves like a named tuple, in that it acts as a sequence but also supports attribute
    name access, e.g. `row.some_column`. However, it also provides the previous “mapping”
    behavior via the special attribute `row._mapping`, which produces a Python mapping
    such that keyed access such as `row["some_column"]` can be used.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    的行为类似于命名元组，因为它充当序列但也支持属性名称访问，例如 `row.some_column`。然而，它还通过特殊属性 `row._mapping` 提供了以前的“映射”行为，该属性产生一个
    Python 映射，以便可以使用键访问，例如 `row["some_column"]`。
- en: 'In order to receive results as mappings up front, the `mappings()` modifier
    on the result can be used:'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在前期接收到映射结果，可以使用结果的 `mappings()` 修饰符：
- en: '[PRE128]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'The [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    class as used by the ORM also supports access via entity or attribute:'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 中使用的 [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    类还支持通过实体或属性访问：
- en: '[PRE129]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: See also
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[RowProxy is no longer a “proxy”; is now called Row and behaves like an enhanced
    named tuple](migration_14.html#change-4710-core)  ### Library-level (but not driver
    level) “Autocommit” removed from both Core and ORM'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: '[RowProxy 不再是“代理”；现在被称为 Row 并且行为类似增强的命名元组](migration_14.html#change-4710-core)  ###
    库级别（但不是驱动程序级别）“自动提交”从 Core 和 ORM 中删除'
- en: '**Synopsis**'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'In SQLAlchemy 1.x, the following statements will automatically commit the underlying
    DBAPI transaction, but in SQLAlchemy 2.0 this will not occur:'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLAlchemy 1.x 中，以下语句将自动提交底层的 DBAPI 事务，但在 SQLAlchemy 2.0 中不会发生：
- en: '[PRE130]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'Nor will this autocommit:'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 也不会自动提交：
- en: '[PRE131]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'The common workaround for custom DML that requires commit, the “autocommit”
    execution option, will be removed:'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要提交的自定义 DML 的常见解决方法，“自动提交”执行选项将被删除：
- en: '[PRE132]'
  id: totrans-670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '**Migration to 2.0**'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'The method that is cross-compatible with [1.x style](../glossary.html#term-1.x-style)
    and [2.0 style](../glossary.html#term-2.0-style) execution is to make use of the
    [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method, or the [`Engine.begin()`](../core/connections.html#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin") context manager:'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [1.x 风格](../glossary.html#term-1.x-style) 和 [2.0 风格](../glossary.html#term-2.0-style)
    执行跨兼容的方法是使用 [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 方法，或者 [`Engine.begin()`](../core/connections.html#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin") 上下文管理器：
- en: '[PRE133]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'When using [2.0 style](../glossary.html#term-2.0-style) with the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag, “commit as you go” style may also be used, as
    the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    features **autobegin** behavior, which takes place when a statement is first invoked
    in the absence of an explicit call to [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin"):'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") 标志的 [2.0 风格](../glossary.html#term-2.0-style) 时，也可以使用“随时提交”风格，因为
    [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    具有 **自动开始** 行为，当第一次调用语句时，在没有显式调用 [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") 的情况下发生：
- en: '[PRE134]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: When [2.0 deprecations mode](#migration-20-deprecations-mode) is enabled, a
    warning will emit when the deprecated “autocommit” feature takes place, indicating
    those places where an explicit transaction should be noted.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 当启用 [2.0 弃用模式](#migration-20-deprecations-mode) 时，将在发生已弃用的 “自动提交” 功能时发出警告，指示应明确注意事务的地方。
- en: '**Discussion**'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: SQLAlchemy’s first releases were at odds with the spirit of the Python DBAPI
    ([**PEP 249**](https://peps.python.org/pep-0249/)) in that it tried to hide [**PEP
    249**](https://peps.python.org/pep-0249/)’s emphasis on “implicit begin” and “explicit
    commit” of transactions. Fifteen years later we now see this was essentially a
    mistake, as SQLAlchemy’s many patterns that attempt to “hide” the presence of
    a transaction make for a more complex API which works inconsistently and is extremely
    confusing to especially those users who are new to relational databases and ACID
    transactions in general. SQLAlchemy 2.0 will do away with all attempts to implicitly
    commit transactions, and usage patterns will always require that the user demarcate
    the “beginning” and the “end” of a transaction in some way, in the same way as
    reading or writing to a file in Python has a “beginning” and an “end”.
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 的最初版本与 Python DBAPI（[**PEP 249**](https://peps.python.org/pep-0249/)）的精神相抵触，因为它试图隐藏
    [**PEP 249**](https://peps.python.org/pep-0249/) 对事务的 “隐式开始” 和 “显式提交”的强调。十五年后，我们现在看到这实际上是一个错误，因为
    SQLAlchemy 的许多尝试“隐藏”事务存在的模式使得 API 更加复杂，工作不一致，并且对于那些新手用户尤其是对关系数据库和 ACID 事务一般来说极其混乱的用户来说。SQLAlchemy
    2.0 将放弃所有隐式提交事务的尝试，使用模式将始终要求用户以某种方式划分事务的 “开始” 和 “结束”，就像在 Python 中读取或写入文件一样具有 “开始”
    和 “结束”。
- en: In the case of autocommit for a pure textual statement, there is actually a
    regular expression that parses every statement in order to detect autocommit!
    Not surprisingly, this regex is continuously failing to accommodate for various
    kinds of statements and stored procedures that imply a “write” to the database,
    leading to ongoing confusion as some statements produce results in the database
    and others don’t. By preventing the user from being aware of the transactional
    concept, we get a lot of bug reports on this one because users don’t understand
    that databases always use a transaction, whether or not some layer is autocommitting
    it.
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 在纯文本语句的自动提交案例中，实际上有一个正则表达式来解析每个语句以检测自动提交！毫不奇怪，这个正则表达式不断地无法适应各种暗示向数据库“写入”的语句和存储过程，导致持续混淆，因为一些语句在数据库中产生结果，而其他语句则没有。通过阻止用户意识到事务概念，我们在这一点上收到了很多错误报告，因为用户不明白数据库是否总是使用事务，无论某一层是否自动提交它。
- en: 'SQLAlchemy 2.0 will require that all database actions at every level be explicit
    as to how the transaction should be used. For the vast majority of Core use cases,
    it’s the pattern that is already recommended:'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0 将要求在每个级别的数据库操作都要明确指定事务的使用方式。对于绝大多数 Core 使用情况，这已经是推荐的模式：
- en: '[PRE135]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'For “commit as you go, or rollback instead” usage, which resembles how the
    [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is normally used today, the “future” version of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"), which is the one that is returned from an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") that was created using the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag, includes new [`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") and [`Connection.rollback()`](../core/connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback") methods, which act upon a transaction
    that is now begun automatically when a statement is first invoked:'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“边提交边回滚”使用方式，类似于如何今天通常使用[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，使用了[`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine")标志创建的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")返回的“未来”版本的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")包含新的[`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")和[`Connection.rollback()`](../core/connections.html#sqlalchemy.engine.Connection.rollback
    "sqlalchemy.engine.Connection.rollback")方法，这些方法在首次调用语句时会自动开始一个事务：
- en: '[PRE136]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Above, the `engine.connect()` method will return a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") that features **autobegin**, meaning the `begin()`
    event is emitted when the execute method is first used (note however that there
    is no actual “BEGIN” in the Python DBAPI). “autobegin” is a new pattern in SQLAlchemy
    1.4 that is featured both by [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") as well as the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object; autobegin allows that the [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") method may be called explicitly when the
    object is first acquired, for schemes that wish to demarcate the beginning of
    the transaction, but if the method is not called, then it occurs implicitly when
    work is first done on the object.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面，`engine.connect()`方法将返回一个具有**autobegin**功能的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，意味着在首次使用执行方法时会触发`begin()`事件（但请注意，Python DBAPI
    中实际上没有“BEGIN”）。 “autobegin”是 SQLAlchemy 1.4 中的一个新模式，由[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")和 ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 对象共同支持；autobegin 允许在首次获取对象时显式调用[`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")方法，用于希望标记事务开始的方案，但如果未调用该方法，则在首次对对象进行操作时会隐式发生。
- en: The removal of “autocommit” is closely related to the removal of “connectionless”
    execution discussed at [“Implicit” and “Connectionless” execution, “bound metadata”
    removed](#migration-20-implicit-execution). All of these legacy patterns built
    up from the fact that Python did not have context managers or decorators when
    SQLAlchemy was first created, so there were no convenient idiomatic patterns for
    demarcating the use of a resource.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: “自动提交”功能的移除与讨论中的“隐式”和“无连接”执行的移除密切相关，详见[“隐式”和“无连接”执行，“绑定元数据”移除](#migration-20-implicit-execution)。所有这些传统模式都源自于
    Python 在 SQLAlchemy 最初创建时没有上下文管理器或装饰器的事实，因此没有方便的惯用模式来标记资源的使用。
- en: Driver-level autocommit remains available
  id: totrans-686
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 驱动程序级别的自动提交仍然可用
- en: True “autocommit” behavior is now widely available with most DBAPI implementations,
    and is supported by SQLAlchemy via the [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameter as discussed at [Setting
    Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit).
    True autocommit is treated as an “isolation level” so that the structure of application
    code does not change when autocommit is used; the [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") context manager as well as methods like
    [`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") may still be used, they are simply no-ops
    at the database driver level when DBAPI-level autocommit is turned on.
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数DBAPI实现现在广泛支持真正的“自动提交”行为，并且通过SQLAlchemy支持[`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")参数，如[设置事务隔离级别，包括DBAPI自动提交](../core/connections.html#dbapi-autocommit)中所讨论的那样。真正的自动提交被视为一种“隔离级别”，因此当使用自动提交时，应用程序代码的结构不会发生变化；[`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")上下文管理器以及像[`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")这样的方法仍然可以使用，它们在数据库驱动程序级别仅仅是空操作。
- en: Driver-level autocommit remains available
  id: totrans-688
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 驱动程序级自动提交仍然可用
- en: True “autocommit” behavior is now widely available with most DBAPI implementations,
    and is supported by SQLAlchemy via the [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") parameter as discussed at [Setting
    Transaction Isolation Levels including DBAPI Autocommit](../core/connections.html#dbapi-autocommit).
    True autocommit is treated as an “isolation level” so that the structure of application
    code does not change when autocommit is used; the [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin") context manager as well as methods like
    [`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit") may still be used, they are simply no-ops
    at the database driver level when DBAPI-level autocommit is turned on.
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数DBAPI实现现在广泛支持真正的“自动提交”行为，并且通过SQLAlchemy支持[`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")参数，如[设置事务隔离级别，包括DBAPI自动提交](../core/connections.html#dbapi-autocommit)中所讨论的那样。真正的自动提交被视为一种“隔离级别”，因此当使用自动提交时，应用程序代码的结构不会发生变化；[`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")上下文管理器以及像[`Connection.commit()`](../core/connections.html#sqlalchemy.engine.Connection.commit
    "sqlalchemy.engine.Connection.commit")这样的方法仍然可以使用，它们在数据库驱动程序级别仅仅是空操作。
- en: '### “Implicit” and “Connectionless” execution, “bound metadata” removed'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '### “隐式”和“无连接”执行，“绑定元数据”已移除'
- en: '**Synopsis**'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The ability to associate an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") with a [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object, which then makes available a range of so-called
    “connectionless” execution patterns, is removed:'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 将[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")与[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象关联的能力，从而使一系列所谓的“无连接”执行模式可用，已被移除：
- en: '[PRE137]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '**Migration to 2.0**'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0**'
- en: 'For schema level patterns, explicit use of an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is required. The [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") may still be used directly as the source of connectivity
    for a [`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") operation or autoload operation. For
    executing statements, only the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object has a [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method (in addition to the ORM-level [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method):'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 对于模式级别的模式，需要明确使用[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")仍然可以直接用作[`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")操作或autoload操作的连接源。对于执行语句，只有[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象具有[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法（除了ORM级别的[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法）：
- en: '[PRE138]'
  id: totrans-696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '**Discussion**'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The Core documentation has already standardized on the desired pattern here,
    so it is likely that most modern applications would not have to change much in
    any case, however there are likely many applications that still rely upon `engine.execute()`
    calls that will need to be adjusted.
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 核心文档已经在这里标准化了所需的模式，因此大多数现代应用程序可能不需要在任何情况下进行太多更改，但是仍然有许多应用程序可能仍然依赖于`engine.execute()`调用，这些调用将需要进行调整。
- en: '“Connectionless” execution refers to the still fairly popular pattern of invoking
    `.execute()` from the [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"):'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: “无连接”执行是指仍然相当流行的从[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")调用`.execute()`的模式：
- en: '[PRE139]'
  id: totrans-700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'The above operation implicitly procures a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, and runs the `.execute()` method on it.
    While this appears to be a simple convenience feature, it has been shown to give
    rise to several issues:'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 上述操作隐式获取了一个[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象，并在其上运行`.execute()`方法。虽然这看起来是一个简单的便利功能，但已经证明会引发几个问题：
- en: Programs that feature extended strings of `engine.execute()` calls have become
    prevalent, overusing a feature that was intended to be seldom used and leading
    to inefficient non-transactional applications. New users are confused as to the
    difference between `engine.execute()` and `connection.execute()` and the nuance
    between these two approaches is often not understood.
  id: totrans-702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 频繁使用`engine.execute()`调用的程序已经变得普遍，过度使用了原本意图很少使用的功能，导致非事务型应用程序效率低下。新用户对`engine.execute()`和`connection.execute()`之间的区别感到困惑，这两种方法之间的微妙差别通常不为人所理解。
- en: The feature relies upon the “application level autocommit” feature in order
    to make sense, which itself is also being removed as it is also [inefficient and
    misleading](#migration-20-autocommit).
  id: totrans-703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该功能依赖于“应用程序级别的自动提交”功能才能有意义，这个功能本身也正在被移除，因为它也是[低效且误导性的](#migration-20-autocommit)。
- en: In order to handle result sets, `Engine.execute` returns a result object with
    unconsumed cursor results. This cursor result necessarily still links to the DBAPI
    connection which remains in an open transaction, all of which is released once
    the result set has fully consumed the rows waiting within the cursor. This means
    that `Engine.execute` does not actually close out the connection resources that
    it claims to be managing when the call is complete. SQLAlchemy’s “autoclose” behavior
    is well-tuned enough that users don’t generally report any negative effects from
    this system, however it remains an overly implicit and inefficient system left
    over from SQLAlchemy’s earliest releases.
  id: totrans-704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了处理结果集，`Engine.execute`返回一个带有未消耗游标结果的结果对象。这个游标结果必然仍然链接到仍然处于打开事务中的DBAPI连接，所有这些在结果集完全消耗了游标中等待的行后被释放。这意味着`Engine.execute`实际上并没有在调用完成时关闭它声称正在管理的连接资源。SQLAlchemy的“自动关闭”行为调整得足够好，以至于用户通常不会报告这个系统带来的任何负面影响，然而它仍然是SQLAlchemy最早版本中剩余的一个过于隐式和低效的系统。
- en: 'The removal of “connectionless” execution then leads to the removal of an even
    more legacy pattern, that of “implicit, connectionless” execution:'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 移除“无连接”执行然后导致了更加传统的模式的移除，即“隐式，无连接”执行：
- en: '[PRE140]'
  id: totrans-706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: The above pattern has all the issues of “connectionless” execution, plus it
    relies upon the “bound metadata” pattern, which SQLAlchemy has tried to de-emphasize
    for many years. This was SQLAlchemy’s very first advertised usage model in version
    0.1, which became obsolete almost immediately when the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object was introduced and later Python context
    managers provided a better pattern for using resources within a fixed scope.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 上述模式具有“无连接”执行的所有问题，另外它依赖于“绑定元数据”模式，SQLAlchemy多年来一直试图减少这种依赖。这是SQLAlchemy在0.1版本中宣传的第一个使用模型，当[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象被引入并且后来Python上下文管理器提供了更好的在固定范围内使用资源的模式时，它几乎立即变得过时。
- en: With implicit execution removed, “bound metadata” itself also no longer has
    a purpose within this system. In modern use “bound metadata” tends to still be
    somewhat convenient for working within [`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") calls as well as with [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects, however having these functions receive an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") explicitly provides for clearer application design.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 隐式执行被移除后，“绑定元数据”本身在这个系统中也不再有目的。在现代用法中，“绑定元数据”在[`MetaData.create_all()`](../core/metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")调用以及与[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象一起工作时仍然有些方便，然而让这些函数显式接收一个[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")提供了更清晰的应用设计。
- en: Many Choices becomes One Choice
  id: totrans-709
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 多种选择变为一种选择
- en: 'Overall, the above executional patterns were introduced in SQLAlchemy’s very
    first 0.1 release before the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object even existed. After many years of de-emphasizing
    these patterns, “implicit, connectionless” execution and “bound metadata” are
    no longer as widely used so in 2.0 we seek to finally reduce the number of choices
    for how to execute a statement in Core from “many choices”:'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，上述执行模式是在SQLAlchemy的第一个0.1版本发布之前引入的，甚至[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象都不存在。经过多年的减少这些模式的重要性，“隐式，无连接”执行和“绑定元数据”不再被广泛使用，因此在2.0版本中，我们希望最终减少在Core中执行语句的选择数量从“多种选择”：
- en: '[PRE141]'
  id: totrans-711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'to “one choice”, where by “one choice” we mean “explicit connection with explicit
    transaction”; there are still a few ways to demarcate transaction blocks depending
    on need. The “one choice” is to procure a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and then to explicitly demarcate the transaction,
    in the case that the operation is a write operation:'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 到“一种选择”，所谓“一种选择”是指“显式连接与显式事务”；根据需要仍然有一些方法来标记事务块。这“一种选择”是获取一个[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，然后明确标记事务，在操作是写操作的情况下：
- en: '[PRE142]'
  id: totrans-713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Many Choices becomes One Choice
  id: totrans-714
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 多种选择变为一种选择
- en: 'Overall, the above executional patterns were introduced in SQLAlchemy’s very
    first 0.1 release before the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object even existed. After many years of de-emphasizing
    these patterns, “implicit, connectionless” execution and “bound metadata” are
    no longer as widely used so in 2.0 we seek to finally reduce the number of choices
    for how to execute a statement in Core from “many choices”:'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，上述执行模式是在SQLAlchemy的第一个0.1版本发布之前引入的，甚至在[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象不存在之前。经过多年的淡化这些模式，“隐式、无连接”执行和“绑定元数据”不再被广泛使用，因此在2.0中，我们试图最终减少Core中如何执行语句的选择数量从“多种选择”：
- en: '[PRE143]'
  id: totrans-716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: 'to “one choice”, where by “one choice” we mean “explicit connection with explicit
    transaction”; there are still a few ways to demarcate transaction blocks depending
    on need. The “one choice” is to procure a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") and then to explicitly demarcate the transaction,
    in the case that the operation is a write operation:'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 对“一种选择”，“一种选择”指的是“显式连接与显式事务”; 根据需要，仍然有几种方法来标记事务块。 “一种选择”是获取[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，然后在操作为写操作的情况下显式地标记事务：
- en: '[PRE144]'
  id: totrans-718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: execute() method more strict, execution options are more prominent
  id: totrans-719
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: execute()方法更严格，执行选项更为突出
- en: '**Synopsis**'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: '**概述**'
- en: 'The argument patterns that may be used with the [`sqlalchemy.engine.Connection()`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") execute method in SQLAlchemy 2.0 are highly simplified,
    removing many previously available argument patterns. The new API in the 1.4 series
    is described at [`sqlalchemy.engine.Connection()`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). The examples below illustrate the patterns that
    require modification:'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy 2.0中，可以与[`sqlalchemy.engine.Connection()`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的执行方法一起使用的参数模式大大简化，删除了许多以前可用的参数模式。1.4系列中的新API在[`sqlalchemy.engine.Connection()`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")中描述。下面的示例说明了需要修改的模式：
- en: '[PRE145]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '**Migration to 2.0**'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0**'
- en: 'The new [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method now accepts a subset of the argument
    styles that are accepted by the 1.x [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, so the following code is cross-compatible
    between 1.x and 2.0:'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 新的[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法现在接受了1.x版本[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法所接受的参数样式的子集，因此以下代码在1.x和2.0之间是兼容的：
- en: '[PRE146]'
  id: totrans-725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '**Discussion**'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The use of `*args` and `**kwargs` has been removed both to remove the complexity
    of guessing what kind of arguments were passed to the method, as well as to make
    room for other options, namely the [`Connection.execute.execution_options`](../core/connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute") dictionary that is now available to provide
    options on a per statement basis. The method is also modified so that its use
    pattern matches that of the [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method, which is a much more prominent API in
    2.0 style.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`*args`和`**kwargs`已被移除，一方面是为了消除猜测传递给方法的参数类型的复杂性，另一方面是为了为其他选项腾出空间，即现在可以使用的[`Connection.execute.execution_options`](../core/connections.html#sqlalchemy.engine.Connection.execute.params.execution_options
    "sqlalchemy.engine.Connection.execute")字典，以便按语句为单位提供选项。该方法还被修改，使其使用模式与[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法相匹配，后者是2.0样式中更为突出的API。
- en: The removal of direct string SQL is to resolve an inconsistency between [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") and [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"), where in the former case the string is passed
    to the driver raw, and in the latter case it is first converted to a [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct. By allowing only [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") this also limits the accepted parameter format
    to “named” and not “positional”. Finally, the string SQL use case is becoming
    more subject to scrutiny from a security perspective, and the [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct has come to represent an explicit
    boundary into the textual SQL realm where attention to untrusted user input must
    be given.
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 直接字符串 SQL 的移除是为了解决 [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 和 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 之间的不一致性，前者的情况下字符串被原始传递给驱动程序，而在后者的情况下首先将其转换为
    [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    构造。通过仅允许 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    ，这也限制了接受的参数格式为“命名”而不是“位置”。最后，字符串 SQL 使用案例正在越来越多地受到来自安全角度的审查，并且 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造已经成为了表示文本 SQL 领域的明确边界，必须注意不受信任的用户输入。
- en: '### Result rows act like named tuples'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: '### 结果行的行为类似命名元组'
- en: '**Synopsis**'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'Version 1.4 introduces an [all new Result object](migration_14.html#change-result-14-core)
    that in turn returns [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, which behave like named tuples when using “future” mode:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 引入了一个 [全新的 Result 对象](migration_14.html#change-result-14-core)，该对象反过来返回
    [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象，当使用“future”模式时，它们的行为类似命名元组：
- en: '[PRE147]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '**Migration to 2.0**'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0 版本**'
- en: Application code or test suites that are testing for a particular key being
    present in a row would need to test the `row.keys()` collection instead. This
    is however an unusual use case as a result row is typically used by code that
    already knows what columns are present within it.
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序代码或测试套件，如果要测试行中是否存在特定键，则需要测试`row.keys()`集合。然而，这是一个不寻常的用例，因为结果行通常由已经知道其中存在哪些列的代码使用。
- en: '**Discussion**'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: Already part of 1.4, the previous `KeyedTuple` class that was used when selecting
    rows from the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object has been replaced by the [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") class, which is the base of the same [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") that comes back with Core statement results when using
    the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag with [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") (when the [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") flag is not set, Core result sets use the `LegacyRow`
    subclass, which maintains backwards-compatible behaviors for the `__contains__()`
    method; ORM exclusively uses the [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") class directly).
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 已经作为 1.4 版本的一部分，之前用于从[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象中选择行时使用的`KeyedTuple`类已被替换为`Row`类，该类是与使用 [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") 标志的 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 一起返回的相同 [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 的基类（当未设置 [`create_engine.future`](../core/engines.html#sqlalchemy.create_engine.params.future
    "sqlalchemy.create_engine") 标志时，Core 结果集使用 `LegacyRow` 子类，该子类保持了 `__contains__()`
    方法的向后兼容行为；ORM 专门直接使用 [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    类）。
- en: This [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    behaves like a named tuple, in that it acts as a sequence but also supports attribute
    name access, e.g. `row.some_column`. However, it also provides the previous “mapping”
    behavior via the special attribute `row._mapping`, which produces a Python mapping
    such that keyed access such as `row["some_column"]` can be used.
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    的行为类似于命名元组，它作为一个序列，同时也支持属性名称访问，例如 `row.some_column`。然而，它还通过特殊属性 `row._mapping`
    提供了以前的“映射”行为，这样就可以使用键访问，例如 `row["some_column"]`。
- en: 'In order to receive results as mappings up front, the `mappings()` modifier
    on the result can be used:'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 为了立即接收映射结果，可以在结果上使用 `mappings()` 修饰符：
- en: '[PRE148]'
  id: totrans-739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'The [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    class as used by the ORM also supports access via entity or attribute:'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    类在 ORM 中的使用也支持通过实体或属性访问：'
- en: '[PRE149]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: See also
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[RowProxy is no longer a “proxy”; is now called Row and behaves like an enhanced
    named tuple](migration_14.html#change-4710-core)'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: '[RowProxy 不再是“代理”；现在称为 Row 并且行为类似于增强的命名元组](migration_14.html#change-4710-core)'
- en: 2.0 Migration - Core Usage
  id: totrans-744
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0 迁移 - 核心用法
- en: '### select() no longer accepts varied constructor arguments, columns are passed
    positionally'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: '### select() 不再接受不同的构造参数，列现在按位置传递'
- en: '**synopsis**'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct as well as the related method [`FromClause.select()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") will no longer accept keyword arguments
    to build up elements such as the WHERE clause, FROM list and ORDER BY. The list
    of columns may now be sent positionally, rather than as a list. Additionally,
    the [`case()`](../core/sqlelement.html#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    construct now accepts its WHEN criteria positionally, rather than as a list:'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造以及相关方法 [`FromClause.select()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") 将不再接受关键字参数来构建诸如 WHERE 子句、FROM 列表和
    ORDER BY 等元素。现在列的列表可以按位置发送，而不是作为列表。此外，[`case()`](../core/sqlelement.html#sqlalchemy.sql.expression.case
    "sqlalchemy.sql.expression.case") 构造现在接受其 WHEN 条件按位置传递，而不是作为列表：'
- en: '[PRE150]'
  id: totrans-748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '**Migration to 2.0**'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'Only the “generative” style of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") will be supported. The list of columns / tables
    to SELECT from should be passed positionally. The [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct in SQLAlchemy 1.4 accepts both the
    legacy styles and the new styles using an auto-detection scheme, so the code below
    is cross-compatible with 1.4 and 2.0:'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 只支持“生成”风格的 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")。应该按位置传递要从中选择的列 / 表的列表。SQLAlchemy 1.4 中的 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造接受传统风格和新风格，使用自动检测方案，因此下面的代码与 1.4 和 2.0 兼容：
- en: '[PRE151]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '**Discussion**'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: SQLAlchemy has for many years developed a convention for SQL constructs accepting
    an argument either as a list or as positional arguments. This convention states
    that **structural** elements, those that form the structure of a SQL statement,
    should be passed **positionally**. Conversely, **data** elements, those that form
    the parameterized data of a SQL statement, should be passed **as lists**. For
    many years, the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct could not participate in this convention
    smoothly because of the very legacy calling pattern where the “WHERE” clause would
    be passed positionally. SQLAlchemy 2.0 finally resolves this by changing the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct to only accept the “generative”
    style that has for many years been the only documented style in the Core tutorial.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，SQLAlchemy 已经发展了一个约定，即 SQL 构造可以接受列表或位置参数作为参数。该约定规定，形成 SQL 语句结构的“结构”元素应该按位置传递。相反，形成
    SQL 语句参数化数据的“数据”元素应该作为列表传递。多年来，[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造无法顺利参与这个约定，因为“WHERE”子句的传递方式是按位置传递的。SQLAlchemy
    2.0 最终通过将 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造更改为仅接受多年来一直是核心教程中唯一记录的样式的“生成”样式来解决了这个问题。
- en: 'Examples of “structural” vs. “data” elements are as follows:'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: “结构”与“数据”元素的示例如下：
- en: '[PRE152]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: See also
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[select(), case() now accept positional expressions](migration_14.html#change-5284)'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: '[select()，case() 现在接受位置表达式](migration_14.html#change-5284)'
- en: '[select() construct created in “legacy” mode; keyword arguments, etc.](../errors.html#error-c9ae)'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: '[在“传统”模式下创建的 select() 构造；关键字参数等](../errors.html#error-c9ae)'
- en: insert/update/delete DML no longer accept keyword constructor arguments
  id: totrans-759
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插入/更新/删除 DML 不再接受关键字构造参数
- en: '**Synopsis**'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'In a similar way as to the previous change to [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), the constructor arguments to [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") and [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") other than the table argument are essentially
    removed:'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面对 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    的更改类似，除了表参数之外，[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")、[`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 和 [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") 的构造参数基本上被移除了：
- en: '[PRE153]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '**Migration to 2.0**'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'The following examples illustrate generative method use for the above examples:'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了上述示例的生成方法的使用：
- en: '[PRE154]'
  id: totrans-765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '**Discussion**'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The API and internals is being simplified for the DML constructs in a similar
    manner as that of the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct.
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: API 和内部正在简化 DML 构造，方式与 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造相似。
- en: '### select() no longer accepts varied constructor arguments, columns are passed
    positionally'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: '### select() 不再接受各种构造参数，列按位置传递'
- en: '**synopsis**'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct as well as the related method [`FromClause.select()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") will no longer accept keyword arguments
    to build up elements such as the WHERE clause, FROM list and ORDER BY. The list
    of columns may now be sent positionally, rather than as a list. Additionally,
    the [`case()`](../core/sqlelement.html#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    construct now accepts its WHEN criteria positionally, rather than as a list:'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造以及相关方法 [`FromClause.select()`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.select
    "sqlalchemy.sql.expression.FromClause.select") 将不再接受关键字参数来构建 WHERE 子句、FROM 列表和
    ORDER BY 等元素。现在列的列表可以按位置发送，而不是作为列表。此外，[`case()`](../core/sqlelement.html#sqlalchemy.sql.expression.case
    "sqlalchemy.sql.expression.case") 构造现在接受其 WHEN 条件的位置传递，而不是作为列表：'
- en: '[PRE155]'
  id: totrans-771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '**Migration to 2.0**'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'Only the “generative” style of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") will be supported. The list of columns / tables
    to SELECT from should be passed positionally. The [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct in SQLAlchemy 1.4 accepts both the
    legacy styles and the new styles using an auto-detection scheme, so the code below
    is cross-compatible with 1.4 and 2.0:'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 只支持 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    的 “生成” 样式。应该将要从中选择的列 / 表的列表位置传递。SQLAlchemy 1.4 中的 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造接受遗留样式和使用自动检测方案的新样式，因此下面的代码与 1.4 和 2.0 兼容：
- en: '[PRE156]'
  id: totrans-774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '**Discussion**'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: SQLAlchemy has for many years developed a convention for SQL constructs accepting
    an argument either as a list or as positional arguments. This convention states
    that **structural** elements, those that form the structure of a SQL statement,
    should be passed **positionally**. Conversely, **data** elements, those that form
    the parameterized data of a SQL statement, should be passed **as lists**. For
    many years, the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct could not participate in this convention
    smoothly because of the very legacy calling pattern where the “WHERE” clause would
    be passed positionally. SQLAlchemy 2.0 finally resolves this by changing the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct to only accept the “generative”
    style that has for many years been the only documented style in the Core tutorial.
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 多年来一直开发了一种约定，用于接受参数作为列表或位置参数的 SQL 构造。这个约定规定，**结构**元素，即形成 SQL 语句结构的元素，应该以**位置**方式传递。相反，**数据**元素，即形成
    SQL 语句参数化数据的元素，应该作为**列表**传递。多年来，[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造由于非常古老的调用模式而无法顺利参与这个约定，其中 “WHERE” 子句将以位置方式传递。SQLAlchemy
    2.0 最终通过将 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造更改为只接受多年来一直是核心教程中唯一记录的样式的 “生成” 样式来解决了这个问题。
- en: 'Examples of “structural” vs. “data” elements are as follows:'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: “结构”与“数据”元素的示例如下：
- en: '[PRE157]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: See also
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[select(), case() now accept positional expressions](migration_14.html#change-5284)'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: '[select(), case() 现在接受位置表达式](migration_14.html#change-5284)'
- en: '[select() construct created in “legacy” mode; keyword arguments, etc.](../errors.html#error-c9ae)'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()` 构造创建为“遗留”模式；关键字参数等](../errors.html#error-c9ae)'
- en: insert/update/delete DML no longer accept keyword constructor arguments
  id: totrans-782
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: insert/update/delete DML 不再接受关键字构造函数参数
- en: '**Synopsis**'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'In a similar way as to the previous change to [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), the constructor arguments to [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") and [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") other than the table argument are essentially
    removed:'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前对 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    的更改类似，除表参数之外的 [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")、[`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 和 [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") 的构造函数参数基本上被移除：
- en: '[PRE158]'
  id: totrans-785
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '**Migration to 2.0**'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'The following examples illustrate generative method use for the above examples:'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了用于上述示例的生成方法的使用：
- en: '[PRE159]'
  id: totrans-788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '**Discussion**'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The API and internals is being simplified for the DML constructs in a similar
    manner as that of the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct.
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造一样，DML 构造的 API 和内部正在以类似的方式简化。
- en: 2.0 Migration - ORM Configuration
  id: totrans-791
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0 迁移 - ORM 配置
- en: Declarative becomes a first class API
  id: totrans-792
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 声明式成为一流的 API
- en: '**Synopsis**'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: The `sqlalchemy.ext.declarative` package is mostly, with some exceptions, moved
    to the `sqlalchemy.orm` package. The [`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") and [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") functions are present without any behavioral changes.
    A new super-implementation of [`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") known as [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") now serves as the top-level ORM configurational construct,
    which also provides for decorator-based declarative and new support for classical
    mappings that integrate with the declarative registry.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.declarative`包大部分（有一些例外）已移至`sqlalchemy.orm`包。[`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base")和[`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")函数存在，没有任何行为变化。一个名为[`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")的新超级实现现在作为顶级ORM配置构造，还提供基于装饰器的声明性和与声明性注册表集成的经典映射的新支持。'
- en: '**Migration to 2.0**'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0版本**'
- en: 'Change imports:'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 更改导入：
- en: '[PRE160]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: 'To:'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 至：
- en: '[PRE161]'
  id: totrans-799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '**Discussion**'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: After ten years or so of popularity, the `sqlalchemy.ext.declarative` package
    is now integrated into the `sqlalchemy.orm` namespace, with the exception of the
    declarative “extension” classes which remain as Declarative extensions. The change
    is detailed further in the 1.4 migration guide at [Declarative is now integrated
    into the ORM with new features](migration_14.html#change-5508).
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: '大约十年后，`sqlalchemy.ext.declarative`包现在已集成到`sqlalchemy.orm`命名空间中，除了保留为声明性扩展的“extension”类。更多详细信息请参阅1.4迁移指南中的[声明性现在与新功能集成到ORM中](migration_14.html#change-5508)。 '
- en: See also
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Mapped Class Overview](../orm/mapping_styles.html) - all new unified documentation
    for Declarative, classical mapping, dataclasses, attrs, etc.'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM映射类概述](../orm/mapping_styles.html) - 用于声明性、经典映射、数据类、attrs等的全新统一文档。'
- en: '[Declarative is now integrated into the ORM with new features](migration_14.html#change-5508)'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: '[声明性现在与新功能集成到ORM中](migration_14.html#change-5508)'
- en: The original “mapper()” function now a core element of Declarative, renamed
  id: totrans-805
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 原始的“mapper()”函数现在是声明性的核心元素，已重命名
- en: '**Synopsis**'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: The `sqlalchemy.orm.mapper()` standalone function moves behind the scenes to
    be invoked by higher level APIs. The new version of this function is the method
    [`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") taken from a [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object.
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqlalchemy.orm.mapper()`独立函数在幕后移动，由更高级别的API调用。这个函数的新版本是从[`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")对象中获取的方法[`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")。'
- en: '**Migration to 2.0**'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0版本**'
- en: 'Code that works with classical mappings should change imports and code from:'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 与经典映射一起工作的代码应更改导入和代码从：
- en: '[PRE162]'
  id: totrans-810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: 'To work from a central [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object:'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 从中心[`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")对象开始工作：
- en: '[PRE163]'
  id: totrans-812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'The above [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    is also the source for declarative mappings, and classical mappings now have access
    to this registry including string-based configuration on [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"):'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")也是声明性映射的来源，经典映射现在可以访问此注册表，包括基于字符串的配置在[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上：
- en: '[PRE164]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '**Discussion**'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: By popular demand, “classical mapping” is staying around, however the new form
    of it is based off of the [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object and is available as [`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively").
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 应要求，“经典映射”仍然存在，但其新形式基于[`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")对象，并且可通过[`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")使用。
- en: In addition, the primary rationale used for “classical mapping” is that of keeping
    the [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    setup distinct from the class. Declarative has always allowed this style using
    so-called [hybrid declarative](../orm/declarative_tables.html#orm-imperative-table-configuration).
    However, to remove the base class requirement, a first class [decorator](../orm/declarative_mapping.html)
    form has been added.
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，“经典映射”的主要理由是将 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    设置与类分开。声明性始终允许使用所谓的 [混合声明性](../orm/declarative_tables.html#orm-imperative-table-configuration)
    风格。但是，为了消除基类要求，已添加了一流的 [装饰器](../orm/declarative_mapping.html) 形式。
- en: As yet another separate but related enhancement, support for [Python dataclasses](../orm/dataclasses.html#orm-declarative-dataclasses)
    is added as well to both declarative decorator and classical mapping forms.
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一个单独但相关的增强，还支持 [Python 数据类](../orm/dataclasses.html#orm-declarative-dataclasses)，并添加到声明性装饰器和经典映射形式中。
- en: See also
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[ORM Mapped Class Overview](../orm/mapping_styles.html) - all new unified documentation
    for Declarative, classical mapping, dataclasses, attrs, etc.'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 映射类概述](../orm/mapping_styles.html) - 所有新的统一文档，涵盖声明性、经典映射、数据类、attrs 等。'
- en: Declarative becomes a first class API
  id: totrans-821
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 声明性成为一流 API
- en: '**Synopsis**'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: '**概述**'
- en: The `sqlalchemy.ext.declarative` package is mostly, with some exceptions, moved
    to the `sqlalchemy.orm` package. The [`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") and [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") functions are present without any behavioral changes.
    A new super-implementation of [`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") known as [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") now serves as the top-level ORM configurational construct,
    which also provides for decorator-based declarative and new support for classical
    mappings that integrate with the declarative registry.
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.declarative` 包大部分，除了一些例外，都已移至 `sqlalchemy.orm` 包中。[`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") 和 [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") 函数存在，没有任何行为变化。一个名为 [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") 的新超级实现现在作为顶级 ORM 配置构造存在，它还提供了基于装饰器的声明性和与声明性注册表集成的经典映射的新支持。'
- en: '**Migration to 2.0**'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'Change imports:'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 更改导入：
- en: '[PRE165]'
  id: totrans-826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'To:'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 为：
- en: '[PRE166]'
  id: totrans-828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '**Discussion**'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: After ten years or so of popularity, the `sqlalchemy.ext.declarative` package
    is now integrated into the `sqlalchemy.orm` namespace, with the exception of the
    declarative “extension” classes which remain as Declarative extensions. The change
    is detailed further in the 1.4 migration guide at [Declarative is now integrated
    into the ORM with new features](migration_14.html#change-5508).
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 十多年来备受欢迎的 `sqlalchemy.ext.declarative` 包现已整合到 `sqlalchemy.orm` 命名空间中，但声明性“扩展”类除外，它们仍然作为声明性扩展。更多详细信息请参阅
    1.4 迁移指南的 [声明性现在已经与带有新特性的 ORM 整合](migration_14.html#change-5508)。
- en: See also
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[ORM Mapped Class Overview](../orm/mapping_styles.html) - all new unified documentation
    for Declarative, classical mapping, dataclasses, attrs, etc.'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 映射类概述](../orm/mapping_styles.html) - 所有新的统一文档，涵盖声明性、经典映射、数据类、attrs 等。'
- en: '[Declarative is now integrated into the ORM with new features](migration_14.html#change-5508)'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: '[声明性现在已经与带有新特性的 ORM 整合](migration_14.html#change-5508)'
- en: The original “mapper()” function now a core element of Declarative, renamed
  id: totrans-834
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最初的 “mapper()” 函数现在成为声明性的核心元素，重命名为
- en: '**Synopsis**'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: '**概述**'
- en: The `sqlalchemy.orm.mapper()` standalone function moves behind the scenes to
    be invoked by higher level APIs. The new version of this function is the method
    [`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") taken from a [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: '`sqlalchemy.orm.mapper()` 独立函数在幕后移动，由更高级别的 API 调用。此函数的新版本是从 [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") 对象中获取的方法 [`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")。'
- en: '**Migration to 2.0**'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'Code that works with classical mappings should change imports and code from:'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 与经典映射一起工作的代码应该从以下形式的导入和代码更改为：
- en: '[PRE167]'
  id: totrans-839
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'To work from a central [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object:'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个中心[`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")对象中工作：
- en: '[PRE168]'
  id: totrans-841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'The above [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")
    is also the source for declarative mappings, and classical mappings now have access
    to this registry including string-based configuration on [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"):'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry "sqlalchemy.orm.registry")也是声明式映射的来源，经典映射现在也可以访问此注册表，包括基于字符串的配置在[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上：
- en: '[PRE169]'
  id: totrans-843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '**Discussion**'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: By popular demand, “classical mapping” is staying around, however the new form
    of it is based off of the [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry") object and is available as [`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively").
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 受欢迎的需求，“经典映射”仍然存在，但是它的新形式是基于[`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")对象，并且可作为[`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")使用。
- en: In addition, the primary rationale used for “classical mapping” is that of keeping
    the [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    setup distinct from the class. Declarative has always allowed this style using
    so-called [hybrid declarative](../orm/declarative_tables.html#orm-imperative-table-configuration).
    However, to remove the base class requirement, a first class [decorator](../orm/declarative_mapping.html)
    form has been added.
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，“经典映射”所使用的主要原理是将[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")的设置与类别区分开来。声明式一直以来都允许使用所谓的[混合声明式](../orm/declarative_tables.html#orm-imperative-table-configuration)来采用这种风格。然而，为了去除基类的要求，首先增加了一种一流的[装饰器](../orm/declarative_mapping.html)形式。
- en: As yet another separate but related enhancement, support for [Python dataclasses](../orm/dataclasses.html#orm-declarative-dataclasses)
    is added as well to both declarative decorator and classical mapping forms.
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一个单独但相关的增强，还添加了对[Python 数据类](../orm/dataclasses.html#orm-declarative-dataclasses)的支持，可以同时用于声明式装饰器和经典映射形式。
- en: See also
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Mapped Class Overview](../orm/mapping_styles.html) - all new unified documentation
    for Declarative, classical mapping, dataclasses, attrs, etc.'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM Mapped Class Overview](../orm/mapping_styles.html) - 为声明式、经典映射、数据类、attrs
    等提供的全新统一文档。'
- en: '## 2.0 Migration - ORM Usage'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: '## 2.0 迁移 - ORM 使用'
- en: The biggest visible change in SQLAlchemy 2.0 is the use of [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") in conjunction with [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") to run ORM queries, instead of using [`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"). As mentioned elsewhere, there is no plan to actually
    remove the [`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") API itself, as it is now implemented by using
    the new API internally it will remain as a legacy API, and both APIs can be used
    freely.
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 2.0 中最显著的可见变化是与[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")结合使用[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")来运行 ORM 查询，而不是使用[`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")。如其他地方所述，实际上没有计划删除[`Session.query()`](../orm/session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") API 本身，因为它现在是通过内部使用新 API 来实现的，它将作为遗留 API 保留，并且两个
    API 都可以自由使用。
- en: The table below provides an introduction to the general change in calling form
    with links to documentation for each technique presented. The individual migration
    notes are in the embedded sections following the table, and may include additional
    notes not summarized here.
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 下表提供了一般调用形式的变化介绍，并链接到每个技术的文档。单个迁移说明在表格后面的嵌入部分中，可能包含未在此处概述的其他说明。
- en: '**Overview of Major ORM Querying Patterns**'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: '**主要 ORM 查询模式概述**'
- en: '| [1.x style](../glossary.html#term-1.x-style) form | [2.0 style](../glossary.html#term-2.0-style)
    form | See Also |'
  id: totrans-854
  prefs: []
  type: TYPE_TB
  zh: '| [1.x 样式](../glossary.html#term-1.x-style)形式 | [2.0 样式](../glossary.html#term-2.0-style)形式
    | 另请参阅 |'
- en: '| --- | --- | --- |'
  id: totrans-855
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE170]'
  id: totrans-857
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '|'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE171]'
  id: totrans-859
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '| [ORM Query - get() method moves to Session](#migration-20-get-to-session)
    |'
  id: totrans-860
  prefs: []
  type: TYPE_TB
  zh: '| [ORM 查询 - get() 方法移至 Session](#migration-20-get-to-session) |'
- en: '|'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE172]'
  id: totrans-862
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '|'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE173]'
  id: totrans-864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '| [ORM Query Unified with Core Select](#migration-20-unify-select)[`Session.scalars()`](../orm/session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars") [`Result.scalars()`](../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") |'
  id: totrans-865
  prefs: []
  type: TYPE_TB
  zh: '| [ORM 查询与 Core Select 统一](#migration-20-unify-select)[`Session.scalars()`](../orm/session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars") [`Result.scalars()`](../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") |'
- en: '|'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE174]'
  id: totrans-867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '|'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE175]'
  id: totrans-869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '| [ORM Query Unified with Core Select](#migration-20-unify-select)[`Result.scalar_one()`](../core/connections.html#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") |'
  id: totrans-870
  prefs: []
  type: TYPE_TB
  zh: '| [ORM 查询与 Core Select 统一](#migration-20-unify-select)[`Result.scalar_one()`](../core/connections.html#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") |'
- en: '|'
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE176]'
  id: totrans-872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '|'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE177]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '| [ORM Query Unified with Core Select](#migration-20-unify-select)[`Result.first()`](../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first") |'
  id: totrans-875
  prefs: []
  type: TYPE_TB
  zh: '| [ORM 查询与 Core Select 统一](#migration-20-unify-select)[`Result.first()`](../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first") |'
- en: '|'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE178]'
  id: totrans-877
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '|'
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE179]'
  id: totrans-879
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '| [ORM Rows not uniquified by default](#joinedload-not-uniqued) |'
  id: totrans-880
  prefs: []
  type: TYPE_TB
  zh: '| [ORM 行默认情况下不唯一化](#joinedload-not-uniqued) |'
- en: '|'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE180]'
  id: totrans-882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '|'
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE181]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '| [ORM Query Unified with Core Select](#migration-20-unify-select)[Joins](../orm/queryguide/select.html#orm-queryguide-joins)
    |'
  id: totrans-885
  prefs: []
  type: TYPE_TB
  zh: '| [ORM 查询与 Core Select 统一](#migration-20-unify-select)[连接](../orm/queryguide/select.html#orm-queryguide-joins)
    |'
- en: '|'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE182]'
  id: totrans-887
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '|'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE183]'
  id: totrans-889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '| [Getting ORM Results from Textual Statements](../orm/queryguide/select.html#orm-queryguide-selecting-text)
    |'
  id: totrans-890
  prefs: []
  type: TYPE_TB
  zh: '| [从文本语句获取 ORM 结果](../orm/queryguide/select.html#orm-queryguide-selecting-text)
    |'
- en: '|'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE184]'
  id: totrans-892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '|'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE185]'
  id: totrans-894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '| [ORM Execution Options](../orm/queryguide/api.html#orm-queryguide-execution-options)[Populate
    Existing](../orm/queryguide/api.html#orm-queryguide-populate-existing) |'
  id: totrans-895
  prefs: []
  type: TYPE_TB
  zh: '| [ORM 执行选项](../orm/queryguide/api.html#orm-queryguide-execution-options)[填充现有](../orm/queryguide/api.html#orm-queryguide-populate-existing)
    |'
- en: '|'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE186]'
  id: totrans-897
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '|'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE187]'
  id: totrans-899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '| [ORM-Enabled INSERT, UPDATE, and DELETE statements](../orm/queryguide/dml.html#orm-expression-update-delete)
    |'
  id: totrans-900
  prefs: []
  type: TYPE_TB
  zh: '| [启用 ORM 的 INSERT、UPDATE 和 DELETE 语句](../orm/queryguide/dml.html#orm-expression-update-delete)
    |'
- en: '|'
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE188]'
  id: totrans-902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '|'
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE189]'
  id: totrans-904
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '| [`Session.scalar()`](../orm/session_api.html#sqlalchemy.orm.Session.scalar
    "sqlalchemy.orm.Session.scalar") |'
  id: totrans-905
  prefs: []
  type: TYPE_TB
  zh: '| [`Session.scalar()`](../orm/session_api.html#sqlalchemy.orm.Session.scalar
    "sqlalchemy.orm.Session.scalar") |'
- en: '### ORM Query Unified with Core Select'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: '### ORM 查询与 Core Select 统一'
- en: '**Synopsis**'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: The [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object (as well as the [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") and [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") extensions) become long term legacy
    objects, replaced by the direct usage of the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct in conjunction with the [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method. Results that are returned from [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in the form of lists of objects or tuples, or as scalar
    ORM objects are returned from [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") uniformly as [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") objects, which feature an interface consistent with
    that of Core execution.
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象（以及 [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") 和 [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") 扩展）成为长期遗留对象，被直接使用 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造与 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 方法取代。从 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 返回的对象形式为对象或元组的列表，或作为标量 ORM 对象返回的结果统一作为 [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象，其接口与 Core 执行一致。'
- en: 'Legacy code examples are illustrated below:'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是遗留代码示例：
- en: '[PRE190]'
  id: totrans-910
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '**Migration to 2.0**'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移至 2.0**'
- en: Because the vast majority of an ORM application is expected to make use of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects as well as that the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") interface being available does not impact the new interface,
    the object will stay around in 2.0 but will no longer be part of documentation
    nor will it be supported for the most part. The [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct now suits both the Core and ORM
    use cases, which when invoked via the [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method will return ORM-oriented results, that
    is, ORM objects if that’s what was requested.
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 ORM 应用程序的绝大部分预期会使用 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象，并且 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 接口的可用性不会影响新接口，该对象将在 2.0 版本中保留，但将不再是文档的一部分，也大多不会得到支持。 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造现在适用于 Core 和 ORM 用例，当通过 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 方法调用时，将返回 ORM 导向的结果，也就是说，如果需要 ORM 对象，那么就返回 ORM
    对象。
- en: The [`Select()`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct **adds many new methods** for compatibility with [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), including [`Select.filter()`](../core/selectable.html#sqlalchemy.sql.expression.Select.filter
    "sqlalchemy.sql.expression.Select.filter") [`Select.filter_by()`](../core/selectable.html#sqlalchemy.sql.expression.Select.filter_by
    "sqlalchemy.sql.expression.Select.filter_by"), newly reworked [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Select.outerjoin()`](../core/selectable.html#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") methods, [`Select.options()`](../core/selectable.html#sqlalchemy.sql.expression.Select.options
    "sqlalchemy.sql.expression.Select.options"), etc. Other more supplemental methods
    of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    such as [`Query.populate_existing()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") are implemented via execution options.
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select()`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    构造 **添加了许多新方法**，以与 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 兼容，包括 [`Select.filter()`](../core/selectable.html#sqlalchemy.sql.expression.Select.filter
    "sqlalchemy.sql.expression.Select.filter")、[`Select.filter_by()`](../core/selectable.html#sqlalchemy.sql.expression.Select.filter_by
    "sqlalchemy.sql.expression.Select.filter_by")、重新设计的 [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") 和 [`Select.outerjoin()`](../core/selectable.html#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") 方法，[`Select.options()`](../core/selectable.html#sqlalchemy.sql.expression.Select.options
    "sqlalchemy.sql.expression.Select.options") 等。 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 的其他补充方法，例如 [`Query.populate_existing()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")，则通过执行选项来实现。'
- en: Return results are in terms of a [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object, the new version of the SQLAlchemy `ResultProxy`
    object, which also adds many new methods for compatibility with [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), including [`Result.one()`](../core/connections.html#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one"), [`Result.all()`](../core/connections.html#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all"), [`Result.first()`](../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first"), [`Result.one_or_none()`](../core/connections.html#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none"), etc.
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 返回结果以 [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象形式呈现，这是 SQLAlchemy `ResultProxy` 对象的新版本，还添加了许多与 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 兼容的新方法，包括 [`Result.one()`](../core/connections.html#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one")、[`Result.all()`](../core/connections.html#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all")、[`Result.first()`](../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first")、[`Result.one_or_none()`](../core/connections.html#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none") 等。
- en: The [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object however does require some different calling patterns, in that when first
    returned it will **always return tuples** and it will **not deduplicate results
    in memory**. In order to return single ORM objects the way [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") does, the [`Result.scalars()`](../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") modifier must be called first. In order to
    return uniqued objects, as is necessary when using joined eager loading, the [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") modifier must be called first.
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象确实需要一些不同的调用模式，因为当首次返回时，它将**始终返回元组**，并且**不会在内存中去重结果**。为了像[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")那样返回单个ORM对象，必须首先调用[`Result.scalars()`](../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars")修饰符。为了返回唯一的对象，当使用连接式急加载时是必要的，必须首先调用[`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")修饰符。
- en: Documentation for all new features of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") including execution options, etc. are at [ORM
    Querying Guide](../orm/queryguide/index.html).
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 包括执行选项等在内的所有新特性的[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的文档在[ORM查询指南](../orm/queryguide/index.html)中。
- en: 'Below are some examples of how to migrate to [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"):'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是迁移到[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的一些示例：
- en: '[PRE191]'
  id: totrans-918
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '**Discussion**'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The fact that SQLAlchemy has both a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct as well as a separate [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object that features an extremely similar, but fundamentally
    incompatible interface is likely the greatest inconsistency in SQLAlchemy, one
    that arose as a result of small incremental additions over time that added up
    to two major APIs that are divergent.
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy既有[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造，也有一个独立的[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，其接口非常相似，但基本上是不兼容的，这可能是SQLAlchemy中最大的不一致性，这是随着时间的小增量添加而产生的，导致了两个不同的主要API。
- en: In SQLAlchemy’s first releases, the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object didn’t exist at all. The original idea was that
    the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    construct itself would be able to select rows, and that [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects, not classes, would be used to create the various
    criteria in a Core-style approach. The [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") came along some months / years into SQLAlchemy’s history
    as a user proposal for a new, “buildable” querying object originally called `SelectResults`
    was accepted. Concepts like a `.where()` method, which `SelectResults` called
    `.filter()`, were not present in SQLAlchemy previously, and the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct used only the “all-at-once” construction
    style that’s now deprecated at [select() no longer accepts varied constructor
    arguments, columns are passed positionally](#migration-20-5284).
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy的最初版本中，[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象根本不存在。最初的想法是[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")构造本身将能够选择行，并且[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，而不是类，将用于以Core风格创建各种条件。[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")在SQLAlchemy的历史中的一些月份/年作为一个名为`SelectResults`的新“可构建”查询对象的用户提案被接受。像`.where()`方法这样的概念，`SelectResults`称为`.filter()`，在SQLAlchemy中以前不存在，并且[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造仅使用现在已弃用的“一次性”构造样式，该样式在[select()不再接受不同的构造参数，列按位置传递](#migration-20-5284)中。
- en: As the new approach took off, the object evolved into the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object as new features such as being able to select individual
    columns, being able to select multiple entities at once, being able to build subqueries
    from a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object rather than from a [`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") object were added. The goal became that [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") should have the full functionality of [`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") in that it could be composed to build SELECT
    statements fully with no explicit use of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") needed. At the same time, [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") had also evolved “generative” methods like
    [`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") and [`Select.order_by()`](../core/selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by").
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 随着新方法的推出，对象演变为 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象，新增功能如能够选择单个列、能够一次选择多个实体、能够从 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象而不是从 [`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 对象构建子查询。目标是使 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 具有 [`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的全部功能，可以完全组合构建 SELECT 语句，无需显式使用 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")。同时，[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 也发展出了“生成”方法，如 [`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") 和 [`Select.order_by()`](../core/selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")。
- en: In modern SQLAlchemy, this goal has been achieved and the two objects are now
    completely overlapping in functionality. The major challenge to unifying these
    objects was that the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") object needed to remain **completely agnostic
    of the ORM**. To achieve this, the vast majority of logic from [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") has been moved into the SQL compile phase, where ORM-specific
    compiler plugins receive the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct and interpret its contents in terms
    of an ORM-style query, before passing off to the core-level compiler in order
    to create a SQL string. With the advent of the new [SQL compilation caching system](migration_14.html#change-4639),
    the majority of this ORM logic is also cached.
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代 SQLAlchemy 中，这一目标已经实现，这两个对象现在在功能上完全重叠。统一这些对象的主要挑战是，[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 对象需要保持**与 ORM 完全无关**。为了实现这一点，[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 中的绝大部分逻辑已经移至 SQL 编译阶段，其中 ORM 特定的编译器插件接收 [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造并根据 ORM 风格的查询内容解释其内容，然后传递给核心级别的编译器以创建 SQL
    字符串。随着新的[SQL 编译缓存系统](migration_14.html#change-4639)的出现，大部分这种 ORM 逻辑也被缓存。
- en: See also
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Query is internally unified with select, update, delete; 2.0 style execution
    available](migration_14.html#change-5159)  ### ORM Query - get() method moves
    to Session'
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 查询现在与 select、update、delete 内部统一；2.0 风格执行可用](migration_14.html#change-5159)  ###
    ORM 查询 - get() 方法移至 Session'
- en: '**Synopsis**'
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: 'The [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    method remains for legacy purposes, but the primary interface is now the [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") method:'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    方法仍保留以供遗留目的，但主要接口现在是 [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") 方法：'
- en: '[PRE192]'
  id: totrans-928
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '**Migration to 2.0**'
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移至 2.0**'
- en: 'In 1.4 / 2.0, the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object adds a new [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") method:'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4 / 2.0中，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象添加了一个新的[`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get")方法：
- en: '[PRE193]'
  id: totrans-931
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '**Discussion**'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object is to be a legacy object in 2.0, as ORM queries are now available using
    the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    object. As the [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") method defines a special interaction with the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and does not necessarily even emit a query, it’s more
    appropriate that it be part of [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), where it is similar to other “identity” methods such
    as [`refresh`](../orm/session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    and [`merge`](../orm/session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge").
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 在2.0中，[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象将成为遗留对象，因为现在可以使用[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")对象进行ORM查询。由于[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get")方法与[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")定义了特殊的交互，并且甚至不一定会发出查询，因此更适合将其作为[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的一部分，其中它类似于其他“标识”方法，例如[`refresh`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")和[`merge`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")。
- en: 'SQLAlchemy originally included “get()” to resemble the Hibernate `Session.load()`
    method. As is so often the case, we got it slightly wrong as this method is really
    more about the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    than with writing a SQL query.  ### ORM Query - Joining / loading on relationships
    uses attributes, not strings'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy最初包含“get()”以类似于Hibernate的`Session.load()`方法。就像经常发生的情况一样，我们稍微做错了，因为这种方法实际上更多地涉及[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")而不是编写SQL查询。### ORM查询 - 使用属性而不是字符串进行关系连接/加载
- en: '**Synopsis**'
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'This refers to patterns such as that of [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") as well as query options like [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") which currently accept a mixture of string attribute
    names or actual class attributes. The string forms will all be removed in 2.0:'
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 这指的是诸如[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")之类的模式，以及查询选项，如[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")，它目前接受字符串属性名称或实际类属性的混合。字符串形式将在2.0中全部移除：
- en: '[PRE194]'
  id: totrans-937
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '**Migration to 2.0**'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: '**升级到2.0**'
- en: 'Modern SQLAlchemy 1.x versions support the recommended technique which is to
    use mapped attributes:'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 现代SQLAlchemy 1.x版本支持推荐的技术，即使用映射属性：
- en: '[PRE195]'
  id: totrans-940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: 'The same techniques apply to [2.0-style](../glossary.html#term-1) style use:'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: '[2.0风格](../glossary.html#term-1)的使用也适用相同的技术：'
- en: '[PRE196]'
  id: totrans-942
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '**Discussion**'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The string calling form is ambiguous and requires that the internals do extra
    work to determine the appropriate path and retrieve the correct mapped property.
    By passing the ORM mapped attribute directly, not only is the necessary information
    passed up front, the attribute is also typed and is more potentially compatible
    with IDEs and pep-484 integrations.
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串调用形式不明确，并且需要内部进行额外的工作以确定适当的路径并检索正确的映射属性。通过直接传递ORM映射属性，不仅可以提前传递必要的信息，而且该属性还是经过类型化的，并且更具有与IDE和pep-484集成的潜在兼容性。
- en: ORM Query - Chaining using lists of attributes, rather than individual calls,
    removed
  id: totrans-945
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM查询 - 使用属性列表而不是单独调用进行链式调用已移除
- en: '**Synopsis**'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: '“Chained” forms of joining and loader options which accept multiple mapped
    attributes in a list will be removed:'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: 接受多个映射属性列表的“链接”形式和加载器选项将被移除：
- en: '[PRE197]'
  id: totrans-948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '**Migration to 2.0**'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: '**升级到2.0**'
- en: 'Use individual calls to [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") for 1.x /2.0 cross compatible use:'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 对于1.x / 2.0跨版本兼容使用，使用单独的调用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")：
- en: '[PRE198]'
  id: totrans-951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: 'For [2.0-style](../glossary.html#term-1) use, [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") has the same behavior of [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join"), and also features a new [`Select.join_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from") method that allows an explicit left
    side:'
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [2.0 风格](../glossary.html#term-1) 使用，[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 具有与 [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") 相同的行为，还具有一个新的 [`Select.join_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from") 方法，允许显式左侧：
- en: '[PRE199]'
  id: totrans-953
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '**Discussion**'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: Removing the chaining of attributes is in line with simplifying the calling
    interface of methods such as [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join").
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 移除属性的链接符合简化方法的调用接口，例如 [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join")。
- en: '### ORM Query - join(…, aliased=True), from_joinpoint removed'
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: '### ORM 查询 - join(…, aliased=True)，移除了from_joinpoint'
- en: '**Synopsis**'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: 'The `aliased=True` option on [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") is removed, as is the `from_joinpoint` flag:'
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    上的 `aliased=True` 选项被移除，`from_joinpoint` 标志也被移除：'
- en: '[PRE200]'
  id: totrans-959
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '**Migration to 2.0**'
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0 版本**'
- en: 'Use explicit aliases instead:'
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 使用显式别名代替：
- en: '[PRE201]'
  id: totrans-962
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '**Discussion**'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The `aliased=True` option on [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") is another feature that seems to be almost never
    used, based on extensive code searches to find actual use of this feature. The
    internal complexity that the `aliased=True` flag requires is **enormous**, and
    will be going away in 2.0.
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    上的 `aliased=True` 选项是另一个几乎从未被使用过的功能，根据广泛的代码搜索来查找实际使用这个功能的情况。`aliased=True` 标志需要的内部复杂性是**巨大**的，并且将在
    2.0 版本中被移除。'
- en: Most users aren’t familiar with this flag, however it allows for automatic aliasing
    of elements along a join, which then applies automatic aliasing to filter conditions.
    The original use case was to assist in long chains of self-referential joins,
    as in the example shown above. However, the automatic adaption of the filter criteria
    is enormously complicated internally and almost never used in real world applications.
    The pattern also leads to issues such as if filter criteria need to be added at
    each link in the chain; the pattern then must use the `from_joinpoint` flag which
    SQLAlchemy developers could absolutely find no occurrence of this parameter ever
    being used in real world applications.
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数用户不熟悉这个标志，但它允许沿着连接自动对元素进行别名，然后将自动别名应用于过滤条件。最初的用例是帮助长链的自引用连接，就像上面显示的例子一样。然而，过滤条件的自动调整在内部是极其复杂的，并且在现实世界的应用中几乎从不使用。这种模式还会导致问题，例如，如果在链中的每个链接中需要添加过滤条件；那么模式必须使用
    `from_joinpoint` 标志，而 SQLAlchemy 开发人员绝对找不到此参数在现实世界的应用中的任何使用情况。
- en: 'The `aliased=True` and `from_joinpoint` parameters were developed at a time
    when the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object didn’t yet have good capabilities regarding joining along relationship
    attributes, functions like [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") did not exist, and the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct itself didn’t exist early on.  ### Using DISTINCT
    with additional columns, but only select the entity'
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: '`aliased=True` 和 `from_joinpoint` 参数是在[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象在关系属性上还没有很好的加入能力时开发的，像[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") 这样的函数还不存在，而[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 构造本身在早期也不存在。### 使用 DISTINCT 与其他列，但仅选择实体'
- en: '**Synopsis**'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    will automatically add columns in the ORDER BY when distinct is used. The following
    query will select from all User columns as well as “address.email_address” but
    only return User objects:'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用distinct时，[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")将自动添加ORDER
    BY中的列。以下查询将从所有User列以及“address.email_address”中选择，但只返回User对象：
- en: '[PRE202]'
  id: totrans-969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: In version 2.0, the “email_address” column will not be automatically added to
    the columns clause, and the above query will fail, since relational databases
    won’t allow you to ORDER BY “address.email_address” when using DISTINCT if it
    isn’t also in the columns clause.
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: 在2.0版本中，“email_address”列不会自动添加到列子句中，上述查询将失败，因为关系数据库在使用DISTINCT时不允许您按“address.email_address”排序，如果它也不在列子句中。
- en: '**Migration to 2.0**'
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0**'
- en: 'In 2.0, the column must be added explicitly. To resolve the issue of only returning
    the main entity object, and not the extra column, use the [`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") method:'
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 在2.0中，必须显式添加列。要解决仅返回主实体对象而不是额外列的问题，请使用[`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns")方法：
- en: '[PRE203]'
  id: totrans-973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '**Discussion**'
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: This case is an example of the limited flexibility of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") leading to the case where implicit, “magical” behavior
    needed to be added; the “email_address” column is implicitly added to the columns
    clause, then additional internal logic would omit that column from the actual
    results returned.
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况是[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")有限的灵活性的一个例子，导致需要添加隐式的“神奇”行为；“email_address”列被隐式添加到列子句中，然后额外的内部逻辑将从实际返回的结果中省略该列。
- en: 'The new approach simplifies the interaction and makes what’s going on explicit,
    while still making it possible to fulfill the original use case without inconvenience.  ###
    Selecting from the query itself as a subquery, e.g. “from_self()”'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: '新方法简化了交互，并明确了正在发生的事情，同时仍然可以实现原始用例而不会造成不便。 ### 从查询本身选择作为子查询，例如“from_self()”'
- en: '**Synopsis**'
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The `Query.from_self()` method will be removed from [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"):'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: '`Query.from_self()`方法将从[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")中移除：'
- en: '[PRE204]'
  id: totrans-979
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '**Migration to 2.0**'
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0**'
- en: 'The [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    construct may be used to emit ORM queries against an entity that is in terms of
    any arbitrary selectable. It has been enhanced in version 1.4 to smoothly accommodate
    being used multiple times against the same subquery for different entities as
    well. This can be used in [1.x style](../glossary.html#term-1.x-style) with [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") as below; note that since the final query wants to query
    in terms of both the `User` and `Address` entities, two separate [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") constructs are created:'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: '[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")构造可以用于根据任意可选择的实体发出ORM查询。在1.4版本中已增强了对同一子查询多次使用不同实体的支持。这可以在[1.x风格](../glossary.html#term-1.x-style)中与[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")一起使用，如下所示；请注意，由于最终查询想要根据`User`和`Address`实体查询，因此创建了两个单独的[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造：'
- en: '[PRE205]'
  id: totrans-982
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: 'The same form may be used in [2.0 style](../glossary.html#term-2.0-style):'
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的形式可以在[2.0风格](../glossary.html#term-2.0-style)中使用：
- en: '[PRE206]'
  id: totrans-984
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '**Discussion**'
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The `Query.from_self()` method is a very complicated method that is rarely used.
    The purpose of this method is to convert a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") into a subquery, then return a new [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") which SELECTs from that subquery. The elaborate aspect
    of this method is that the returned query applies automatic translation of ORM
    entities and columns to be stated in the SELECT in terms of the subquery, as well
    as that it allows the entities and columns to be SELECTed from to be modified.
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: '`Query.from_self()` 方法是一个非常复杂的方法，很少被使用。该方法的目的是将 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 转换为子查询，然后返回一个从该子查询中 SELECT 的新 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")。该方法的复杂之处在于返回的查询会自动将 ORM 实体和列转换为子查询中的 SELECT，同时允许修改要 SELECT
    的实体和列。'
- en: Because `Query.from_self()` packs an intense amount of implicit translation
    into the SQL it produces, while it does allow a certain kind of pattern to be
    executed very succinctly, real world use of this method is infrequent as it is
    not simple to understand.
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 `Query.from_self()` 在生成的 SQL 中隐含了大量的转换，虽然它确实允许以非常简洁的方式执行某种模式，但这种方法在实际应用中很少见，因为它不容易理解。
- en: The new approach makes use of the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct so that the ORM internals don’t need to guess
    which entities and columns should be adapted and in what way; in the example above,
    the `ua` and `aa` objects, both of which are `AliasedClass` instances, provide
    to the internals an unambiguous marker as to where the subquery should be referenced
    as well as what entity column or relationship is being considered for a given
    component of the query.
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: 新方法利用 [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    构造，使得 ORM 内部不需要猜测哪些实体和列应该以何种方式适应；在上面的示例中，`ua` 和 `aa` 对象都是 `AliasedClass` 实例，为内部提供了一个明确的标记，指示子查询应该被引用以及对于查询的给定组件考虑了哪个实体列或关系。
- en: 'SQLAlchemy 1.4 also features an improved labeling style that no longer requires
    the use of long labels that include the table name in order to disambiguate columns
    of same names from different tables. In the above examples, even if our `User`
    and `Address` entities have overlapping column names, we can select from both
    entities at once without having to specify any particular labeling:'
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 1.4 还提供了一种改进的标记风格，不再需要使用包含表名以消除同名列的长标签。在上面的示例中，即使我们的 `User` 和 `Address`
    实体具有重叠的列名，我们也可以同时从两个实体中选择而无需指定任何特定的标签：
- en: '[PRE207]'
  id: totrans-990
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: 'The above query will disambiguate the `.id` column of `User` and `Address`,
    where `Address.id` is rendered and tracked as `id_1`:'
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将澄清 `User` 和 `Address` 的 `.id` 列，其中 `Address.id` 被呈现和跟踪为 `id_1`：
- en: '[PRE208]'
  id: totrans-992
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[#5221](https://www.sqlalchemy.org/trac/ticket/5221)'
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: '[#5221](https://www.sqlalchemy.org/trac/ticket/5221)'
- en: Selecting entities from alternative selectables; Query.select_entity_from()
  id: totrans-994
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从其他可选择的实体中选择实体；`Query.select_entity_from()`
- en: '**Synopsis**'
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The `Query.select_entity_from()` method will be removed in 2.0:'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: '`Query.select_entity_from()` 方法将在 2.0 中移除：'
- en: '[PRE209]'
  id: totrans-997
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '**Migration to 2.0**'
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'As is the case described at [Selecting from the query itself as a subquery,
    e.g. “from_self()”](#migration-20-query-from-self), the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") object provides a single place that operations like
    “select entity from a subquery” may be achieved. Using [1.x style](../glossary.html#term-1.x-style):'
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在 [从查询本身作为子查询进行选择，例如“from_self()”](#migration-20-query-from-self) 中所描述的那样，[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 对象提供了一个单一的地方，可以实现诸如“从子查询选择实体”之类的操作。使用 [1.x 风格](../glossary.html#term-1.x-style)：
- en: '[PRE210]'
  id: totrans-1000
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: 'Using [2.0 style](../glossary.html#term-2.0-style):'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [2.0 风格](../glossary.html#term-2.0-style)：
- en: '[PRE211]'
  id: totrans-1002
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '**Discussion**'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The points here are basically the same as those discussed at [Selecting from
    the query itself as a subquery, e.g. “from_self()”](#migration-20-query-from-self).
    The `Query.select_from_entity()` method was another way to instruct the query
    to load rows for a particular ORM mapped entity from an alternate selectable,
    which involved having the ORM apply automatic aliasing to that entity wherever
    it was used in the query later on, such as in the WHERE clause or ORDER BY. This
    intensely complex feature is seldom used in this way, where as was the case with
    `Query.from_self()`, it’s much easier to follow what’s going on when using an
    explicit [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    object, both from a user point of view as well as how the internals of the SQLAlchemy
    ORM must handle it.
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的要点基本与[从查询本身选择子查询，例如“from_self()”](#migration-20-query-from-self)讨论的内容相同。
    `Query.select_from_entity()`方法是指示查询从替代可选择项加载特定ORM映射实体的行的另一种方法，这涉及在以后的查询中，例如在WHERE子句或ORDER
    BY中，ORM将自动为该实体应用别名，如`Query.from_self()`的情况一样，当使用显式[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")对象时，更容易跟踪发生的情况，无论从用户的角度还是从SQLAlchemy ORM内部处理的角度。
- en: '### ORM Rows not uniquified by default'
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: '### 默认情况下ORM行不会唯一化'
- en: '**Synopsis**'
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: 'ORM rows returned by `session.execute(stmt)` are no longer automatically “uniqued”.
    This will normally be a welcome change, except in the case where the “joined eager
    loading” loader strategy is used with collections:'
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: '`session.execute(stmt)`返回的ORM行不再自动“唯一”。这通常是一个受欢迎的变化，除非使用“联接预加载”加载器策略与集合一起使用时：'
- en: '[PRE212]'
  id: totrans-1008
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '**Migrating to 2.0**'
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0版本**'
- en: 'When using a joined load of a collection, it’s required that the [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") method is called. The ORM will actually set
    a default row handler that will raise an error if this is not done, to ensure
    that a joined eager load collection does not return duplicate rows while still
    maintaining explicitness:'
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用集合的联接加载时，必须调用[`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")方法。ORM实际上将设置一个默认行处理程序，如果未执行此操作，将引发错误，以确保联接预加载集合不返回重复行，同时保持明确性：
- en: '[PRE213]'
  id: totrans-1011
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '**Discussion**'
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The situation here is a little bit unusual, in that SQLAlchemy is requiring
    that a method be invoked that it is in fact entirely capable of doing automatically.
    The reason for requiring that the method be called is to ensure the developer
    is “opting in” to the use of the [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") method, such that they will not be confused
    when a straight count of rows does not conflict with the count of records in the
    actual result set, which has been a long running source of user confusion and
    bug reports for many years. That the uniquifying is not happening in any other
    case by default will improve performance and also improve clarity in those cases
    where automatic uniquing was causing confusing results.
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的情况有点不同寻常，因为SQLAlchemy要求调用一个方法，而实际上完全有能力自动完成。需要调用该方法的原因是确保开发人员“选择”使用[`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")方法，这样他们在直接计算行数与实际结果集中记录数不一致时不会感到困惑，这已经是多年来用户困惑和错误报告的长期问题了。默认情况下不会在任何其他情况下进行唯一化，这将提高性能并提高自动唯一化导致混淆结果的情况的清晰度。
- en: 'To the degree that having to call [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") when joined eager load collections are used
    is inconvenient, in modern SQLAlchemy the [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") strategy presents a collection-oriented eager loader
    that is superior in most respects to [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") and should be preferred.  ### “Dynamic” relationship
    loaders superseded by “Write Only”'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: '在现代SQLAlchemy中，当使用联接预加载集合时，必须调用[`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")方法时，在现代SQLAlchemy中，[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")策略提供了一个集合导向的预加载器，在大多数情况下优于[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")，应该优先使用。 ### “动态”关系加载器被“仅写入”取代'
- en: '**Synopsis**'
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: The `lazy="dynamic"` relationship loader strategy, discussed at [Dynamic Relationship
    Loaders](../orm/large_collections.html#dynamic-relationship), makes use of the
    [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object which is legacy in 2.0\. The “dynamic” relationship is not directly compatible
    with asyncio without workarounds, and additionally it does not fulfill its original
    purpose of preventing iteration of large collections as it has several behaviors
    where this iteration occurs implicitly.
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论了`lazy="dynamic"`关系加载策略，详见[动态关系加载器](../orm/large_collections.html#dynamic-relationship)，它使用了在2.0中已经过时的[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象。这种“dynamic”关系不直接兼容asyncio，除非通过解决方法，此外，它也没有实现其原始目的，即防止大型集合的迭代，因为它有几种行为会隐式发生迭代。
- en: A new loader strategy known as `lazy="write_only"` is introduced, which through
    the [`WriteOnlyCollection`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyCollection
    "sqlalchemy.orm.WriteOnlyCollection") collection class provides a very strict
    “no implicit iteration” API and additionally integrates with 2.0 style statement
    execution, supporting asyncio as well as direct integrations with the new [ORM-enabled
    Bulk DML](whatsnew_20.html#change-8360) featureset.
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 引入了一种名为`lazy="write_only"`的新加载策略，通过[`WriteOnlyCollection`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyCollection
    "sqlalchemy.orm.WriteOnlyCollection")集合类提供了一个非常严格的“无隐式迭代”API，并且还与2.0风格的语句执行集成，支持asyncio以及与新的[ORM启用的批量DML](whatsnew_20.html#change-8360)功能集成。
- en: At the same time, `lazy="dynamic"` remains **fully supported** in version 2.0;
    applications can delay migrating this particular pattern until they are fully
    on the 2.0 series.
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，在2.0版本中仍然**完全支持**`lazy="dynamic"`；应用程序可以延迟迁移这种特定模式，直到完全使用2.0系列。
- en: '**Migration to 2.0**'
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移至2.0**'
- en: The new “write only” feature is only available in SQLAlchemy 2.0, and is not
    part of 1.4\. At the same time, the `lazy="dynamic"` loader strategy remains fully
    supported in version 2.0, and even includes new pep-484 and annotated mapping
    support.
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: 新的“write only”功能仅在SQLAlchemy 2.0中可用，不是1.4的一部分。与此同时，`lazy="dynamic"`加载策略在2.0版本中仍然得到完全支持，甚至包括新的pep-484和带注释的映射支持。
- en: Therefore the best strategy for migrating from “dynamic” is to **wait until
    the application is fully running on 2.0**, then migrate directly from [`AppenderQuery`](../orm/large_collections.html#sqlalchemy.orm.AppenderQuery
    "sqlalchemy.orm.AppenderQuery"), which is the collection type used by the “dynamic”
    strategy, to [`WriteOnlyCollection`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyCollection
    "sqlalchemy.orm.WriteOnlyCollection"), which is the collection type used by hte
    “write_only” strategy.
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从“dynamic”迁移的最佳策略是**等到应用程序完全在2.0上运行**，然后直接从[`AppenderQuery`](../orm/large_collections.html#sqlalchemy.orm.AppenderQuery
    "sqlalchemy.orm.AppenderQuery")迁移到[`WriteOnlyCollection`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyCollection
    "sqlalchemy.orm.WriteOnlyCollection")，后者是“dynamic”策略使用的集合类型。
- en: 'Some techniques are available to use `lazy="dynamic"` under 1.4 in a more “2.0”
    style however. There are two ways to achieve 2.0 style querying that’s in terms
    of a specific relationship:'
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: 一些技术可用于在1.4版本下以更“2.0”风格使用`lazy="dynamic"`。有两种方法可以实现2.0风格的查询，即针对特定关系的查询：
- en: 'Make use of the [`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") attribute on an existing `lazy="dynamic"` relationship.
    We can use methods like [`Session.scalars()`](../orm/session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars") with the dynamic loader straight away as follows:'
  id: totrans-1023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用现有`lazy="dynamic"`关系上的[`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement")属性。我们可以立即使用动态加载器进行方法，如[`Session.scalars()`](../orm/session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")，如下所示：
- en: '[PRE214]'
  id: totrans-1024
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: 'Use the [`with_parent()`](../orm/queryguide/api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent") function to construct a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct directly:'
  id: totrans-1025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[`with_parent()`](../orm/queryguide/api.html#sqlalchemy.orm.with_parent "sqlalchemy.orm.with_parent")函数直接构造一个[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造：
- en: '[PRE215]'
  id: totrans-1026
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '**Discussion**'
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The original idea was that the [`with_parent()`](../orm/queryguide/api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent") function should be sufficient, however continuing
    to make use of special attributes on the relationship itself remains appealing,
    and there’s no reason a 2.0 style construct can’t be made to work here as well.
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 最初的想法是 [`with_parent()`](../orm/queryguide/api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent") 函数应该足够了，但是继续使用关系本身的特殊属性仍然具有吸引力，并且在这里也可以使用 2.0 风格的构造方法。
- en: The new “write_only” loader strategy provides a new kind of collection which
    does not support implicit iteration or item access. Instead, reading the contents
    of the collection is performed by calling upon its `.select()` method to help
    construct an appropriate SELECT statement. The collection also includes methods
    `.insert()`, `.update()`, `.delete()` which may be used to emit bulk DML statements
    for the items in the collection. In a manner similar to that of the “dynamic”
    feature, there are also methods `.add()`, `.add_all()` and `.remove()` which queue
    individual members for addition or removal using the unit of work process. An
    introduction to the new feature is as [New “Write Only” relationship strategy
    supersedes “dynamic”](whatsnew_20.html#change-7123).
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: 新的“write_only”加载器策略提供了一种新的集合类型，不支持隐式迭代或项目访问。而是通过调用其 `.select()` 方法来读取集合的内容，以帮助构建适当的
    SELECT 语句。该集合还包括 `.insert()`、`.update()`、`.delete()` 方法，用于为集合中的项目发出批量 DML 语句。与“动态”功能类似，还有
    `.add()`、`.add_all()` 和 `.remove()` 方法，它们使用工作单元过程将单个成员排队以添加或删除。对新功能的介绍可以查看 [新的“仅写”关系策略取代了“动态”](whatsnew_20.html#change-7123)。
- en: See also
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New “Write Only” relationship strategy supersedes “dynamic”](whatsnew_20.html#change-7123)'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: '[新的“仅写”关系策略取代了“动态”](whatsnew_20.html#change-7123)'
- en: '[Write Only Relationships](../orm/large_collections.html#write-only-relationship)  ###
    Autocommit mode removed from Session; autobegin support added'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: '[仅写关系](../orm/large_collections.html#write-only-relationship)  ### Session
    中删除了自动提交模式；添加了自动开始支持'
- en: '**Synopsis**'
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will no longer support “autocommit” mode, that is, this pattern:'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    将不再支持“自动提交”模式，也就是这种模式：'
- en: '[PRE216]'
  id: totrans-1035
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '**Migration to 2.0**'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: '**2.0 迁移**'
- en: 'The main reason a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is used in “autocommit” mode is so that the [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") method is available, so that framework integrations
    and event hooks can control when this event happens. In 1.4, the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") now features [autobegin behavior](migration_14.html#change-5074)
    which resolves this issue; the [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") method may now be called:'
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    在“自动提交”模式下的主要原因是为了使 [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") 方法可用，以便框架集成和事件挂钩可以控制此事件的发生。在 1.4 中，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 现在具有 [自动开始行为](migration_14.html#change-5074)，解决了这个问题；现在可以调用
    [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")
    方法：
- en: '[PRE217]'
  id: totrans-1038
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '**Discussion**'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: 'The “autocommit” mode is another holdover from the first versions of SQLAlchemy.
    The flag has stayed around mostly in support of allowing explicit use of [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin"), which is now solved by 1.4, as well as to allow
    the use of “subtransactions”, which are also removed in 2.0.  ### Session “subtransaction”
    behavior removed'
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: “自动提交”模式是 SQLAlchemy 最初版本的遗留问题之一。这个标志主要用于允许显式使用 [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")，在 1.4 中已经解决了这个问题，以及允许使用“子事务”，这在 2.0 中也已经移除。###
    Session “子事务”行为已移除
- en: '**Synopsis**'
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: The “subtransaction” pattern that was often used with autocommit mode is also
    deprecated in 1.4\. This pattern allowed the use of the [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") method when a transaction were already begun,
    resulting in a construct called a “subtransaction”, which was essentially a block
    that would prevent the [`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") method from actually committing.
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自动提交模式时经常使用的“子事务”模式在1.4中也已经弃用。这种模式允许在已经开始事务时使用[`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")方法，导致产生一种称为“子事务”的结构，它本质上是一个阻止[`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")方法实际提交的块。
- en: '**Migration to 2.0**'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0**'
- en: 'To provide backwards compatibility for applications that make use of this pattern,
    the following context manager or a similar implementation based on a decorator
    may be used:'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为使用此模式的应用程序提供向后兼容性，可以使用以下上下文管理器或基于装饰器的类似实现：
- en: '[PRE218]'
  id: totrans-1045
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: 'The above context manager may be used in the same way the “subtransaction”
    flag works, such as in the following example:'
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: 上述上下文管理器可以以与“子事务”标志相同的方式使用，例如以下示例：
- en: '[PRE219]'
  id: totrans-1047
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: 'To compare towards the preferred idiomatic pattern, the begin block should
    be at the outermost level. This removes the need for individual functions or methods
    to be concerned with the details of transaction demarcation:'
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与首选的惯用模式进行比较，开始块应位于最外层。这样就不需要个别函数或方法关心事务界定的细节：
- en: '[PRE220]'
  id: totrans-1049
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '**Discussion**'
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: 'This pattern has been shown to be confusing in real world applications, and
    it is preferable for an application to ensure that the top-most level of database
    operations are performed with a single begin/commit pair.  ### ORM Query Unified
    with Core Select'
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式已被证明在实际应用程序中令人困惑，最好是确保应用程序的最顶层数据库操作使用单个begin/commit对执行。### ORM查询与Core选择统一
- en: '**Synopsis**'
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: The [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object (as well as the [`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") and [`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery") extensions) become long term legacy
    objects, replaced by the direct usage of the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct in conjunction with the [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method. Results that are returned from [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in the form of lists of objects or tuples, or as scalar
    ORM objects are returned from [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") uniformly as [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") objects, which feature an interface consistent with
    that of Core execution.
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象（以及[`BakedQuery`](../orm/extensions/baked.html#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")和[`ShardedQuery`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedQuery
    "sqlalchemy.ext.horizontal_shard.ShardedQuery")扩展）成为长期遗留对象，取而代之的是直接使用[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造与[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法结合使用。从[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")返回的列表对象或元组形式的结果，或作为标量ORM对象从[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")统一作为[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象返回，其接口与Core执行一致。'
- en: 'Legacy code examples are illustrated below:'
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是遗留代码示例：
- en: '[PRE221]'
  id: totrans-1055
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '**Migration to 2.0**'
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0**'
- en: Because the vast majority of an ORM application is expected to make use of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects as well as that the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") interface being available does not impact the new interface,
    the object will stay around in 2.0 but will no longer be part of documentation
    nor will it be supported for the most part. The [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct now suits both the Core and ORM
    use cases, which when invoked via the [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method will return ORM-oriented results, that
    is, ORM objects if that’s what was requested.
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: 由于绝大多数ORM应用程序预计将使用[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，并且[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")接口的可用性不会影响新接口，该对象将在2.0版本中保留，但不再是文档的一部分，也大多数情况下不再受支持。 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造现在适用于Core和ORM用例，当通过[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法调用时，将返回ORM导向的结果，即如果请求的是ORM对象，则返回ORM对象。
- en: The [`Select()`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct **adds many new methods** for compatibility with [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), including [`Select.filter()`](../core/selectable.html#sqlalchemy.sql.expression.Select.filter
    "sqlalchemy.sql.expression.Select.filter") [`Select.filter_by()`](../core/selectable.html#sqlalchemy.sql.expression.Select.filter_by
    "sqlalchemy.sql.expression.Select.filter_by"), newly reworked [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Select.outerjoin()`](../core/selectable.html#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") methods, [`Select.options()`](../core/selectable.html#sqlalchemy.sql.expression.Select.options
    "sqlalchemy.sql.expression.Select.options"), etc. Other more supplemental methods
    of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    such as [`Query.populate_existing()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") are implemented via execution options.
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select()`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")构造**添加了许多新方法**，以与[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")兼容，包括[`Select.filter()`](../core/selectable.html#sqlalchemy.sql.expression.Select.filter
    "sqlalchemy.sql.expression.Select.filter")，[`Select.filter_by()`](../core/selectable.html#sqlalchemy.sql.expression.Select.filter_by
    "sqlalchemy.sql.expression.Select.filter_by")，重新设计的[`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join")和[`Select.outerjoin()`](../core/selectable.html#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin")方法，[`Select.options()`](../core/selectable.html#sqlalchemy.sql.expression.Select.options
    "sqlalchemy.sql.expression.Select.options")等。 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的其他更多补充方法，如[`Query.populate_existing()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")是通过执行选项实现的。'
- en: Return results are in terms of a [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object, the new version of the SQLAlchemy `ResultProxy`
    object, which also adds many new methods for compatibility with [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), including [`Result.one()`](../core/connections.html#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one"), [`Result.all()`](../core/connections.html#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all"), [`Result.first()`](../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first"), [`Result.one_or_none()`](../core/connections.html#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none"), etc.
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: 返回结果以[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象的形式呈现，这是SQLAlchemy
    `ResultProxy`对象的新版本，还添加了许多与[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")兼容的新方法，包括[`Result.one()`](../core/connections.html#sqlalchemy.engine.Result.one
    "sqlalchemy.engine.Result.one")，[`Result.all()`](../core/connections.html#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all")，[`Result.first()`](../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first")，[`Result.one_or_none()`](../core/connections.html#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none")等。
- en: The [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object however does require some different calling patterns, in that when first
    returned it will **always return tuples** and it will **not deduplicate results
    in memory**. In order to return single ORM objects the way [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") does, the [`Result.scalars()`](../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") modifier must be called first. In order to
    return uniqued objects, as is necessary when using joined eager loading, the [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") modifier must be called first.
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象需要一些不同的调用模式，因为当首次返回时，它将**始终返回元组**，并且**不会在内存中去重结果**。为了以[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的方式返回单个ORM对象，必须首先调用[`Result.scalars()`](../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars")修饰符。为了返回唯一的对象，就像在使用连接式贪婪加载时所必需的那样，必须首先调用[`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")修饰符。
- en: Documentation for all new features of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") including execution options, etc. are at [ORM
    Querying Guide](../orm/queryguide/index.html).
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: 包括执行选项等在内的[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的所有新功能的文档在[ORM查询指南](../orm/queryguide/index.html)中。
- en: 'Below are some examples of how to migrate to [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"):'
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些迁移到[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的示例：
- en: '[PRE222]'
  id: totrans-1063
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '**Discussion**'
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The fact that SQLAlchemy has both a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct as well as a separate [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object that features an extremely similar, but fundamentally
    incompatible interface is likely the greatest inconsistency in SQLAlchemy, one
    that arose as a result of small incremental additions over time that added up
    to two major APIs that are divergent.
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy既有一个[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造，也有一个具有极其相似但基本上不兼容的接口的单独的[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，这可能是SQLAlchemy中最大的不一致性，这是随着时间的小幅增加而产生的两个主要API的分歧。
- en: In SQLAlchemy’s first releases, the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object didn’t exist at all. The original idea was that
    the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    construct itself would be able to select rows, and that [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects, not classes, would be used to create the various
    criteria in a Core-style approach. The [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") came along some months / years into SQLAlchemy’s history
    as a user proposal for a new, “buildable” querying object originally called `SelectResults`
    was accepted. Concepts like a `.where()` method, which `SelectResults` called
    `.filter()`, were not present in SQLAlchemy previously, and the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct used only the “all-at-once” construction
    style that’s now deprecated at [select() no longer accepts varied constructor
    arguments, columns are passed positionally](#migration-20-5284).
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy的最初版本中，根本不存在[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象。最初的想法是[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")构造本身将能够选择行，并且[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，而不是类，将用于以Core风格的方式创建各种条件。[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")在SQLAlchemy的历史中的一些月份/年作为一个名为`SelectResults`的新的“可构建”查询对象的用户提案被接受。像`.where()`方法这样的概念，在`SelectResults`中称为`.filter()`，在SQLAlchemy之前不存在，并且[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造仅使用现在已弃用的“一次性”构造样式，该样式不再接受各种构造函数参数，列是按位置传递的。
- en: As the new approach took off, the object evolved into the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object as new features such as being able to select individual
    columns, being able to select multiple entities at once, being able to build subqueries
    from a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object rather than from a [`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") object were added. The goal became that [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") should have the full functionality of [`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") in that it could be composed to build SELECT
    statements fully with no explicit use of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") needed. At the same time, [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") had also evolved “generative” methods like
    [`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") and [`Select.order_by()`](../core/selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by").
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: 随着新方法的推出，该对象演变为[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象，新增了诸如能够选择单个列、能够一次选择多个实体、能够从[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象构建子查询而不是从[`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")对象开始的新功能。目标是[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")应该具有[`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的全部功能，可以组合构建完整的 SELECT 语句，而不需要显式使用[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")。与此同时，[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")也发展出了“生成”方法，如[`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where")和[`Select.order_by()`](../core/selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by")。
- en: In modern SQLAlchemy, this goal has been achieved and the two objects are now
    completely overlapping in functionality. The major challenge to unifying these
    objects was that the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") object needed to remain **completely agnostic
    of the ORM**. To achieve this, the vast majority of logic from [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") has been moved into the SQL compile phase, where ORM-specific
    compiler plugins receive the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct and interpret its contents in terms
    of an ORM-style query, before passing off to the core-level compiler in order
    to create a SQL string. With the advent of the new [SQL compilation caching system](migration_14.html#change-4639),
    the majority of this ORM logic is also cached.
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代的 SQLAlchemy 中，这个目标已经实现，这两个对象现在在功能上完全重叠。统一这些对象的主要挑战是[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")对象需要保持**对 ORM 完全不可知**。为了实现这一点，大部分来自[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的逻辑已经移动到 SQL 编译阶段，ORM 特定的编译器插件接收[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造并根据 ORM 风格的查询解释其内容，然后传递给核心级别的编译器以创建 SQL 字符串。随着新的[SQL
    编译缓存系统](migration_14.html#change-4639)的出现，大部分这种 ORM 逻辑也被缓存。
- en: See also
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Query is internally unified with select, update, delete; 2.0 style execution
    available](migration_14.html#change-5159)'
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 查询在内部与 select、update、delete 统一；2.0 风格执行可用](migration_14.html#change-5159)'
- en: '### ORM Query - get() method moves to Session'
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: '### ORM 查询 - get() 方法移到 Session'
- en: '**Synopsis**'
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    method remains for legacy purposes, but the primary interface is now the [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") method:'
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    方法仍然保留以供遗留目的，但主要接口现在是[`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") 方法：'
- en: '[PRE223]'
  id: totrans-1074
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '**Migration to 2.0**'
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'In 1.4 / 2.0, the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object adds a new [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") method:'
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4 / 2.0中，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象添加了一个新的[`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get")方法：
- en: '[PRE224]'
  id: totrans-1077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '**Discussion**'
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object is to be a legacy object in 2.0, as ORM queries are now available using
    the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    object. As the [`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") method defines a special interaction with the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and does not necessarily even emit a query, it’s more
    appropriate that it be part of [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), where it is similar to other “identity” methods such
    as [`refresh`](../orm/session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    and [`merge`](../orm/session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge").
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象将在2.0中成为遗留对象，因为现在可以使用[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")对象进行ORM查询。由于[`Query.get()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get")方法定义了与[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的特殊交互，并且甚至不一定会发出查询，因此将其作为[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的一部分更为适合，其中类似于其他“identity”方法，例如[`refresh`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")和[`merge`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")。'
- en: SQLAlchemy originally included “get()” to resemble the Hibernate `Session.load()`
    method. As is so often the case, we got it slightly wrong as this method is really
    more about the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    than with writing a SQL query.
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy最初包含“get()”，以类似于Hibernate `Session.load()`方法。像往常一样，我们稍微搞错了，因为这个方法实际上更多地与[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")有关，而不是写SQL查询。
- en: '### ORM Query - Joining / loading on relationships uses attributes, not strings'
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: '### ORM查询 - 在关系上进行链接/加载使用属性，而不是字符串'
- en: '**Synopsis**'
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'This refers to patterns such as that of [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") as well as query options like [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") which currently accept a mixture of string attribute
    names or actual class attributes. The string forms will all be removed in 2.0:'
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: 这涉及[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")等模式，以及查询选项，如[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")，它目前接受混合的字符串属性名称或实际类属性。字符串形式将在2.0中全部移除：
- en: '[PRE225]'
  id: totrans-1084
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '**Migration to 2.0**'
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0**'
- en: 'Modern SQLAlchemy 1.x versions support the recommended technique which is to
    use mapped attributes:'
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 现代SQLAlchemy 1.x版本支持推荐的技术，即使用映射属性：
- en: '[PRE226]'
  id: totrans-1087
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: 'The same techniques apply to [2.0-style](../glossary.html#term-1) style use:'
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的技术适用于[2.0样式](../glossary.html#term-1)的使用：
- en: '[PRE227]'
  id: totrans-1089
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '**Discussion**'
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The string calling form is ambiguous and requires that the internals do extra
    work to determine the appropriate path and retrieve the correct mapped property.
    By passing the ORM mapped attribute directly, not only is the necessary information
    passed up front, the attribute is also typed and is more potentially compatible
    with IDEs and pep-484 integrations.
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串调用形式不明确，并且需要内部执行额外的工作来确定适当的路径并检索正确的映射属性。通过直接传递ORM映射属性，不仅可以提前传递必要的信息，而且该属性还具有类型，并且更具有与IDE和pep-484集成的潜在兼容性。
- en: ORM Query - Chaining using lists of attributes, rather than individual calls,
    removed
  id: totrans-1092
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM查询 - 使用属性列表进行链接的链式调用，而不是单个调用，已移除
- en: '**Synopsis**'
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: '“Chained” forms of joining and loader options which accept multiple mapped
    attributes in a list will be removed:'
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: “链接”形式的连接和加载选项接受多个映射属性的列表将被移除：
- en: '[PRE228]'
  id: totrans-1095
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '**Migration to 2.0**'
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0**'
- en: 'Use individual calls to [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") for 1.x /2.0 cross compatible use:'
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: 对于1.x / 2.0跨兼容使用，使用单独的调用[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")：
- en: '[PRE229]'
  id: totrans-1098
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: 'For [2.0-style](../glossary.html#term-1) use, [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") has the same behavior of [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join"), and also features a new [`Select.join_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from") method that allows an explicit left
    side:'
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[2.0风格](../glossary.html#term-1)的用法，[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")具有与[`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join")相同的行为，并且还具有一个新的[`Select.join_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from")方法，允许显式左侧：
- en: '[PRE230]'
  id: totrans-1100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '**Discussion**'
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: Removing the chaining of attributes is in line with simplifying the calling
    interface of methods such as [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join").
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: 移除属性的链接符合简化诸如[`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join")等方法的调用接口。
- en: '### ORM Query - join(…, aliased=True), from_joinpoint removed'
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: '### ORM查询 - join(…, aliased=True)，移除from_joinpoint'
- en: '**Synopsis**'
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The `aliased=True` option on [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") is removed, as is the `from_joinpoint` flag:'
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")上的`aliased=True`选项已被移除，`from_joinpoint`标志也被移除：'
- en: '[PRE231]'
  id: totrans-1106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '**Migration to 2.0**'
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移至2.0**'
- en: 'Use explicit aliases instead:'
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用显式别名代替：
- en: '[PRE232]'
  id: totrans-1109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '**Discussion**'
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The `aliased=True` option on [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") is another feature that seems to be almost never
    used, based on extensive code searches to find actual use of this feature. The
    internal complexity that the `aliased=True` flag requires is **enormous**, and
    will be going away in 2.0.
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")上的`aliased=True`选项似乎几乎从未被使用，通过广泛的代码搜索来查找实际使用此功能的情况。`aliased=True`标志所需的内部复杂性是**巨大**的，并且将在2.0中消失。'
- en: Most users aren’t familiar with this flag, however it allows for automatic aliasing
    of elements along a join, which then applies automatic aliasing to filter conditions.
    The original use case was to assist in long chains of self-referential joins,
    as in the example shown above. However, the automatic adaption of the filter criteria
    is enormously complicated internally and almost never used in real world applications.
    The pattern also leads to issues such as if filter criteria need to be added at
    each link in the chain; the pattern then must use the `from_joinpoint` flag which
    SQLAlchemy developers could absolutely find no occurrence of this parameter ever
    being used in real world applications.
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数用户不熟悉这个标志，但它允许沿着连接自动为元素添加别名，然后将自动别名应用于过滤条件。最初的用例是帮助处理长链的自引用连接，就像上面显示的示例一样。然而，过滤条件的自动调整在内部非常复杂，几乎从不在现实世界的应用中使用。这种模式还会导致问题，例如如果需要在链中的每个链接处添加过滤条件；那么模式必须使用`from_joinpoint`标志，SQLAlchemy开发人员绝对找不到这个参数在实际应用中的任何使用情况。
- en: The `aliased=True` and `from_joinpoint` parameters were developed at a time
    when the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object didn’t yet have good capabilities regarding joining along relationship
    attributes, functions like [`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") did not exist, and the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct itself didn’t exist early on.
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: '`aliased=True`和`from_joinpoint`参数是在[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象在关联属性方面还没有良好能力时开发的，像[`PropComparator.of_type()`](../orm/internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")这样的函数还不存在，而[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")构造本身在早期也不存在。'
- en: '### Using DISTINCT with additional columns, but only select the entity'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用DISTINCT与其他列，但仅选择实体'
- en: '**Synopsis**'
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: '[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    will automatically add columns in the ORDER BY when distinct is used. The following
    query will select from all User columns as well as “address.email_address” but
    only return User objects:'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 DISTINCT 时，[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    将自动添加 ORDER BY 中的列。以下查询将从所有用户列以及“address.email_address” 中选择，但只返回用户对象：
- en: '[PRE233]'
  id: totrans-1117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: In version 2.0, the “email_address” column will not be automatically added to
    the columns clause, and the above query will fail, since relational databases
    won’t allow you to ORDER BY “address.email_address” when using DISTINCT if it
    isn’t also in the columns clause.
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0 版本中，“email_address” 列不会自动添加到列子句中，上述查询将失败，因为关系数据库在使用 DISTINCT 时不允许您按“address.email_address”
    排序，如果它也不在列子句中。
- en: '**Migration to 2.0**'
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0 版本**'
- en: 'In 2.0, the column must be added explicitly. To resolve the issue of only returning
    the main entity object, and not the extra column, use the [`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") method:'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2.0 版本中，必须显式添加列。要解决仅返回主实体对象而不是额外列的问题，请使用[`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") 方法：
- en: '[PRE234]'
  id: totrans-1121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '**Discussion**'
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: This case is an example of the limited flexibility of [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") leading to the case where implicit, “magical” behavior
    needed to be added; the “email_address” column is implicitly added to the columns
    clause, then additional internal logic would omit that column from the actual
    results returned.
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况是[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")的有限灵活性导致需要添加隐式“神奇”行为的一个例子；“email_address”
    列会隐式添加到列子句中，然后额外的内部逻辑会从实际返回的结果中省略该列。
- en: The new approach simplifies the interaction and makes what’s going on explicit,
    while still making it possible to fulfill the original use case without inconvenience.
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: 新方法简化了交互并明确了正在发生的事情，同时仍然可以实现原始用例而不会带来不便。
- en: '### Selecting from the query itself as a subquery, e.g. “from_self()”'
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: '### 从查询本身作为子查询选择，例如“from_self()”'
- en: '**Synopsis**'
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The `Query.from_self()` method will be removed from [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"):'
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: '`Query.from_self()` 方法将从[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")中移除：'
- en: '[PRE235]'
  id: totrans-1128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '**Migration to 2.0**'
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0 版本**'
- en: 'The [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    construct may be used to emit ORM queries against an entity that is in terms of
    any arbitrary selectable. It has been enhanced in version 1.4 to smoothly accommodate
    being used multiple times against the same subquery for different entities as
    well. This can be used in [1.x style](../glossary.html#term-1.x-style) with [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") as below; note that since the final query wants to query
    in terms of both the `User` and `Address` entities, two separate [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") constructs are created:'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: '[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    构造可用于针对任意可选择的实体发出 ORM 查询。它在 1.4 版本中已经得到增强，以便顺利地多次针对相同子查询用于不同实体。这可以在[1.x 风格](../glossary.html#term-1.x-style)中与[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")一起使用，注意由于最终查询想要查询`User`和`Address`实体，因此创建了两个单独的[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 构造：'
- en: '[PRE236]'
  id: totrans-1131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: 'The same form may be used in [2.0 style](../glossary.html#term-2.0-style):'
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的形式可以在[2.0 风格](../glossary.html#term-2.0-style)中使用：
- en: '[PRE237]'
  id: totrans-1133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '**Discussion**'
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The `Query.from_self()` method is a very complicated method that is rarely used.
    The purpose of this method is to convert a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") into a subquery, then return a new [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") which SELECTs from that subquery. The elaborate aspect
    of this method is that the returned query applies automatic translation of ORM
    entities and columns to be stated in the SELECT in terms of the subquery, as well
    as that it allows the entities and columns to be SELECTed from to be modified.
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: '`Query.from_self()`方法是一个非常复杂的方法，很少被使用。这个方法的目的是将[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")转换为一个子查询，然后返回一个从该子查询中SELECT的新[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")。这个方法的复杂之处在于返回的查询应用了ORM实体和列的自动翻译，以便以子查询的方式在SELECT中陈述，以及允许被SELECT的实体和列进行修改。'
- en: Because `Query.from_self()` packs an intense amount of implicit translation
    into the SQL it produces, while it does allow a certain kind of pattern to be
    executed very succinctly, real world use of this method is infrequent as it is
    not simple to understand.
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`Query.from_self()`方法在生成的SQL中隐含了大量的转换，虽然它确实允许某种类型的模式被非常简洁地执行，但是这种方法在实际应用中很少见，因为它不容易理解。
- en: The new approach makes use of the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct so that the ORM internals don’t need to guess
    which entities and columns should be adapted and in what way; in the example above,
    the `ua` and `aa` objects, both of which are `AliasedClass` instances, provide
    to the internals an unambiguous marker as to where the subquery should be referenced
    as well as what entity column or relationship is being considered for a given
    component of the query.
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: 新方法利用了[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")构造，因此ORM内部无需猜测应该如何调整哪些实体和列，以及以何种方式进行调整；在上面的示例中，`ua`和`aa`对象都是`AliasedClass`实例，为内部提供了一个明确的标记，指示子查询应该在何处引用以及正在考虑查询的给定组件的哪个实体列或关系。
- en: 'SQLAlchemy 1.4 also features an improved labeling style that no longer requires
    the use of long labels that include the table name in order to disambiguate columns
    of same names from different tables. In the above examples, even if our `User`
    and `Address` entities have overlapping column names, we can select from both
    entities at once without having to specify any particular labeling:'
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 1.4还提供了一种改进的标签样式，不再需要使用包含表名以消除不同表中具有相同名称的列的歧义的长标签。在上面的示例中，即使我们的`User`和`Address`实体具有重叠的列名称，我们也可以同时从两个实体中选择，而无需指定任何特定的标签：
- en: '[PRE238]'
  id: totrans-1139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: 'The above query will disambiguate the `.id` column of `User` and `Address`,
    where `Address.id` is rendered and tracked as `id_1`:'
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将区分`User`和`Address`的`.id`列，其中`Address.id`被渲染和跟踪为`id_1`：
- en: '[PRE239]'
  id: totrans-1141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[#5221](https://www.sqlalchemy.org/trac/ticket/5221)'
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: '[#5221](https://www.sqlalchemy.org/trac/ticket/5221)'
- en: Selecting entities from alternative selectables; Query.select_entity_from()
  id: totrans-1143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从备选可选项选择实体；Query.select_entity_from()
- en: '**Synopsis**'
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: '**概要**'
- en: 'The `Query.select_entity_from()` method will be removed in 2.0:'
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: '`Query.select_entity_from()`方法将在2.0中被移除：'
- en: '[PRE240]'
  id: totrans-1146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '**Migration to 2.0**'
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0**'
- en: 'As is the case described at [Selecting from the query itself as a subquery,
    e.g. “from_self()”](#migration-20-query-from-self), the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") object provides a single place that operations like
    “select entity from a subquery” may be achieved. Using [1.x style](../glossary.html#term-1.x-style):'
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在[从查询本身选择子查询，例如“from_self()”](#migration-20-query-from-self)中描述的情况一样，[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")对象提供了一个可以实现“从子查询选择实体”等操作的单一位置。使用[1.x风格](../glossary.html#term-1.x-style)：
- en: '[PRE241]'
  id: totrans-1149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: 'Using [2.0 style](../glossary.html#term-2.0-style):'
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[2.0风格](../glossary.html#term-2.0-style)：
- en: '[PRE242]'
  id: totrans-1151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '**Discussion**'
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The points here are basically the same as those discussed at [Selecting from
    the query itself as a subquery, e.g. “from_self()”](#migration-20-query-from-self).
    The `Query.select_from_entity()` method was another way to instruct the query
    to load rows for a particular ORM mapped entity from an alternate selectable,
    which involved having the ORM apply automatic aliasing to that entity wherever
    it was used in the query later on, such as in the WHERE clause or ORDER BY. This
    intensely complex feature is seldom used in this way, where as was the case with
    `Query.from_self()`, it’s much easier to follow what’s going on when using an
    explicit [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    object, both from a user point of view as well as how the internals of the SQLAlchemy
    ORM must handle it.
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的要点基本与[从查询本身选择子查询的情况相同，例如“from_self()”](#migration-20-query-from-self)讨论的内容相同。
    `Query.select_from_entity()` 方法是指示查询从备用可选择的ORM映射实体加载行的另一种方法，这涉及到ORM在后续查询中无论在何处使用该实体，例如在
    WHERE 子句或 ORDER BY 中，都会对该实体进行自动别名。这个非常复杂的特性很少以这种方式使用，就像`Query.from_self()`的情况一样，使用显式的[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")对象时更容易理解正在发生的情况，从用户的角度和 SQLAlchemy ORM 的内部处理方式来看都是如此。
- en: '### ORM Rows not uniquified by default'
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: '### 默认情况下 ORM 行不唯一'
- en: '**Synopsis**'
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: 'ORM rows returned by `session.execute(stmt)` are no longer automatically “uniqued”.
    This will normally be a welcome change, except in the case where the “joined eager
    loading” loader strategy is used with collections:'
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: '`session.execute(stmt)` 返回的 ORM 行不再自动“唯一”。这通常是一个受欢迎的变化，但在使用集合的“联接急加载”加载器的情况下可能会出现问题：'
- en: '[PRE243]'
  id: totrans-1157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '**Migrating to 2.0**'
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: 'When using a joined load of a collection, it’s required that the [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") method is called. The ORM will actually set
    a default row handler that will raise an error if this is not done, to ensure
    that a joined eager load collection does not return duplicate rows while still
    maintaining explicitness:'
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用集合的联接加载时，需要调用[`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")方法。ORM 实际上会设置一个默认的行处理程序，如果未执行此操作，它将引发错误，以确保联接急加载集合不会返回重复的行，同时保持显式性：
- en: '[PRE244]'
  id: totrans-1160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '**Discussion**'
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The situation here is a little bit unusual, in that SQLAlchemy is requiring
    that a method be invoked that it is in fact entirely capable of doing automatically.
    The reason for requiring that the method be called is to ensure the developer
    is “opting in” to the use of the [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") method, such that they will not be confused
    when a straight count of rows does not conflict with the count of records in the
    actual result set, which has been a long running source of user confusion and
    bug reports for many years. That the uniquifying is not happening in any other
    case by default will improve performance and also improve clarity in those cases
    where automatic uniquing was causing confusing results.
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的情况有点不同寻常，因为 SQLAlchemy 要求调用一个它完全可以自动执行的方法。要求调用该方法的原因是确保开发人员“选择”使用[`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") 方法，这样当行数的直接计数与实际结果集中的记录计数不冲突时，他们不会感到困惑，这已经是多年来用户困惑和错误报告的长期问题。默认情况下，不在任何其他情况下唯一化将提高性能，并且在自动唯一化导致混淆的情况下将提高清晰度。
- en: To the degree that having to call [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") when joined eager load collections are used
    is inconvenient, in modern SQLAlchemy the [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") strategy presents a collection-oriented eager loader
    that is superior in most respects to [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") and should be preferred.
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用[`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")对联接的急加载集合进行处理可能有些不方便，在现代的 SQLAlchemy 中，[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") 策略提供了一个针对集合的急加载器，在大多数情况下优于[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")，应该优先考虑使用。
- en: '### “Dynamic” relationship loaders superseded by “Write Only”'
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: '### “动态”关系加载器被“只写”替代'
- en: '**Synopsis**'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: The `lazy="dynamic"` relationship loader strategy, discussed at [Dynamic Relationship
    Loaders](../orm/large_collections.html#dynamic-relationship), makes use of the
    [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object which is legacy in 2.0\. The “dynamic” relationship is not directly compatible
    with asyncio without workarounds, and additionally it does not fulfill its original
    purpose of preventing iteration of large collections as it has several behaviors
    where this iteration occurs implicitly.
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论过的 `lazy="dynamic"` 关系加载策略，利用了 2.0 版本中的遗留 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象。 “动态”关系在没有解决方案的情况下不直接兼容 asyncio，此外，它也没有实现其原始目的，即防止大型集合的迭代，因为它有几种隐式发生迭代的行为。
- en: A new loader strategy known as `lazy="write_only"` is introduced, which through
    the [`WriteOnlyCollection`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyCollection
    "sqlalchemy.orm.WriteOnlyCollection") collection class provides a very strict
    “no implicit iteration” API and additionally integrates with 2.0 style statement
    execution, supporting asyncio as well as direct integrations with the new [ORM-enabled
    Bulk DML](whatsnew_20.html#change-8360) featureset.
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: 引入了一种名为 `lazy="write_only"` 的新加载策略，通过 [`WriteOnlyCollection`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyCollection
    "sqlalchemy.orm.WriteOnlyCollection") 集合类提供了一个非常严格的“无隐式迭代”API，并且与 2.0 风格的语句执行集成，支持
    asyncio 以及与新的 [ORM-enabled Bulk DML](whatsnew_20.html#change-8360) 功能集的直接集成。
- en: At the same time, `lazy="dynamic"` remains **fully supported** in version 2.0;
    applications can delay migrating this particular pattern until they are fully
    on the 2.0 series.
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，`lazy="dynamic"` 在 2.0 版本中仍然得到**全面支持**；应用程序可以延迟迁移这种特定模式，直到完全升级到 2.0 系列。
- en: '**Migration to 2.0**'
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到 2.0**'
- en: The new “write only” feature is only available in SQLAlchemy 2.0, and is not
    part of 1.4\. At the same time, the `lazy="dynamic"` loader strategy remains fully
    supported in version 2.0, and even includes new pep-484 and annotated mapping
    support.
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: 新的“write only”功能仅在 SQLAlchemy 2.0 中可用，不是 1.4 的一部分。与此同时，`lazy="dynamic"` 加载策略在
    2.0 版本中仍然得到全面支持，甚至包括新的 pep-484 和注释映射支持。
- en: Therefore the best strategy for migrating from “dynamic” is to **wait until
    the application is fully running on 2.0**, then migrate directly from [`AppenderQuery`](../orm/large_collections.html#sqlalchemy.orm.AppenderQuery
    "sqlalchemy.orm.AppenderQuery"), which is the collection type used by the “dynamic”
    strategy, to [`WriteOnlyCollection`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyCollection
    "sqlalchemy.orm.WriteOnlyCollection"), which is the collection type used by hte
    “write_only” strategy.
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从“dynamic”迁移的最佳策略是**等到应用程序完全运行在 2.0 上**，然后直接从 [`AppenderQuery`](../orm/large_collections.html#sqlalchemy.orm.AppenderQuery
    "sqlalchemy.orm.AppenderQuery") 迁移到 [`WriteOnlyCollection`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyCollection
    "sqlalchemy.orm.WriteOnlyCollection")，后者是“write_only”策略使用的集合类型。
- en: 'Some techniques are available to use `lazy="dynamic"` under 1.4 in a more “2.0”
    style however. There are two ways to achieve 2.0 style querying that’s in terms
    of a specific relationship:'
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些技术可用于在 1.4 版本下以更“2.0”风格使用 `lazy="dynamic"`。有两种方法可以实现特定关系的 2.0 风格查询：
- en: 'Make use of the [`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") attribute on an existing `lazy="dynamic"` relationship.
    We can use methods like [`Session.scalars()`](../orm/session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars") with the dynamic loader straight away as follows:'
  id: totrans-1173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用现有 `lazy="dynamic"` 关系上的 [`Query.statement`](../orm/queryguide/query.html#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") 属性。我们可以立即使用像 [`Session.scalars()`](../orm/session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars") 这样的方法与动态加载器一起使用，如下所示：
- en: '[PRE245]'
  id: totrans-1174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: 'Use the [`with_parent()`](../orm/queryguide/api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent") function to construct a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct directly:'
  id: totrans-1175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 [`with_parent()`](../orm/queryguide/api.html#sqlalchemy.orm.with_parent "sqlalchemy.orm.with_parent")
    函数直接构造一个 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造：
- en: '[PRE246]'
  id: totrans-1176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '**Discussion**'
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The original idea was that the [`with_parent()`](../orm/queryguide/api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent") function should be sufficient, however continuing
    to make use of special attributes on the relationship itself remains appealing,
    and there’s no reason a 2.0 style construct can’t be made to work here as well.
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: 最初的想法是[`with_parent()`](../orm/queryguide/api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent")函数应该足够了，但是继续利用关系本身上的特殊属性仍然吸引人，并且没有理由不能在这里使用2.0风格的构造。
- en: The new “write_only” loader strategy provides a new kind of collection which
    does not support implicit iteration or item access. Instead, reading the contents
    of the collection is performed by calling upon its `.select()` method to help
    construct an appropriate SELECT statement. The collection also includes methods
    `.insert()`, `.update()`, `.delete()` which may be used to emit bulk DML statements
    for the items in the collection. In a manner similar to that of the “dynamic”
    feature, there are also methods `.add()`, `.add_all()` and `.remove()` which queue
    individual members for addition or removal using the unit of work process. An
    introduction to the new feature is as [New “Write Only” relationship strategy
    supersedes “dynamic”](whatsnew_20.html#change-7123).
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: 新的“仅写”加载策略提供了一种不支持隐式迭代或项访问的新类型集合。相反，通过调用其`.select()`方法来读取集合的内容，以帮助构造适当的SELECT语句。该集合还包括`.insert()`、`.update()`、`.delete()`等方法，可用于对集合中的项目发出批量DML语句。类似于“动态”功能，该特性还包括`.add()`、`.add_all()`和`.remove()`方法，使用工作单元过程为单个成员排队进行添加或删除。有关该新功能的介绍，请参阅[新的“仅写”关系策略取代“动态”](whatsnew_20.html#change-7123)。
- en: See also
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[New “Write Only” relationship strategy supersedes “dynamic”](whatsnew_20.html#change-7123)'
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: '[新的“仅写”关系策略取代“动态”](whatsnew_20.html#change-7123)'
- en: '[Write Only Relationships](../orm/large_collections.html#write-only-relationship)'
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: '[仅写关系](../orm/large_collections.html#write-only-relationship)'
- en: '### Autocommit mode removed from Session; autobegin support added'
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: '### 从 Session 中移除了自动提交模式；添加了自动开始支持'
- en: '**Synopsis**'
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: 'The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will no longer support “autocommit” mode, that is, this pattern:'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")将不再支持“自动提交”模式，即以下模式：'
- en: '[PRE247]'
  id: totrans-1186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '**Migration to 2.0**'
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移到2.0**'
- en: 'The main reason a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is used in “autocommit” mode is so that the [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") method is available, so that framework integrations
    and event hooks can control when this event happens. In 1.4, the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") now features [autobegin behavior](migration_14.html#change-5074)
    which resolves this issue; the [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") method may now be called:'
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: 使用“自动提交”模式的[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的主要原因是使[`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")方法可用，以便框架集成和事件钩子可以控制此事件何时发生。在1.4中，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")现在具有[自动开始行为](migration_14.html#change-5074)，解决了此问题；现在可以调用[`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")方法：
- en: '[PRE248]'
  id: totrans-1189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '**Discussion**'
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: The “autocommit” mode is another holdover from the first versions of SQLAlchemy.
    The flag has stayed around mostly in support of allowing explicit use of [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin"), which is now solved by 1.4, as well as to allow
    the use of “subtransactions”, which are also removed in 2.0.
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: “自动提交”模式是 SQLAlchemy 初始版本的另一个遗留功能。这个标志一直存在主要是为了支持允许显式使用[`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")，这在1.4版本中已经解决，以及允许使用“子事务”，这在2.0版本中也被移除了。
- en: '### Session “subtransaction” behavior removed'
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: '### 移除了会话“子事务”行为'
- en: '**Synopsis**'
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介**'
- en: The “subtransaction” pattern that was often used with autocommit mode is also
    deprecated in 1.4\. This pattern allowed the use of the [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") method when a transaction were already begun,
    resulting in a construct called a “subtransaction”, which was essentially a block
    that would prevent the [`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") method from actually committing.
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1.4 中，经常与自动提交模式一起使用的“子事务”模式已被弃用。这种模式允许在事务已经开始时使用 [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") 方法，导致一个称为“子事务”的构造，其本质上是一个阻止 [`Session.commit()`](../orm/session_api.html#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") 方法实际提交的块。
- en: '**Migration to 2.0**'
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: '**迁移至 2.0**'
- en: 'To provide backwards compatibility for applications that make use of this pattern,
    the following context manager or a similar implementation based on a decorator
    may be used:'
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向使用这种模式的应用程序提供向后兼容性，可以使用以下上下文管理器或基于装饰器的类似实现：
- en: '[PRE249]'
  id: totrans-1197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: 'The above context manager may be used in the same way the “subtransaction”
    flag works, such as in the following example:'
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: 上述上下文管理器可以像“子事务”标志的工作方式一样使用，例如以下示例：
- en: '[PRE250]'
  id: totrans-1199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: 'To compare towards the preferred idiomatic pattern, the begin block should
    be at the outermost level. This removes the need for individual functions or methods
    to be concerned with the details of transaction demarcation:'
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与首选惯用模式进行比较，begin 块应位于最外层。这样就不需要单个函数或方法关注事务界定的细节：
- en: '[PRE251]'
  id: totrans-1201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '**Discussion**'
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: This pattern has been shown to be confusing in real world applications, and
    it is preferable for an application to ensure that the top-most level of database
    operations are performed with a single begin/commit pair.
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: 已经证明这种模式在实际应用中令人困惑，并且最好是应用确保数据库操作的最高级别由单个 begin/commit 对完成。
- en: 2.0 Migration - ORM Extension and Recipe Changes
  id: totrans-1204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0 迁移 - ORM 扩展和示例更改
- en: Dogpile cache recipe and Horizontal Sharding uses new Session API
  id: totrans-1205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dogpile 缓存示例和水平分片使用新的 Session API
- en: As the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object becomes legacy, these two recipes which previously relied upon subclassing
    of the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object now make use of the [`SessionEvents.do_orm_execute()`](../orm/events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook. See the section [Re-Executing
    Statements](../orm/session_events.html#do-orm-execute-re-executing) for an example.
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象成为遗留对象时，先前依赖于 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象子类化的这两个示例现在使用 [`SessionEvents.do_orm_execute()`](../orm/events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") 钩子。请参阅 [重新执行语句](../orm/session_events.html#do-orm-execute-re-executing)
    一节进行示例。
- en: Baked Query Extension Superseded by built-in caching
  id: totrans-1207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 烘焙查询扩展已被内置缓存系统取代
- en: The baked query extension is superseded by the built in caching system and is
    no longer used by the ORM internals.
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: 烘焙查询扩展已被内置缓存系统取代，并不再被 ORM 内部使用。
- en: See [SQL Compilation Caching](../core/connections.html#sql-caching) for full
    background on the new caching system.
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: 参见 [SQL 编译缓存](../core/connections.html#sql-caching) 获取有关新缓存系统的完整背景。
- en: Dogpile cache recipe and Horizontal Sharding uses new Session API
  id: totrans-1210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dogpile 缓存示例和水平分片使用新的 Session API
- en: As the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object becomes legacy, these two recipes which previously relied upon subclassing
    of the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object now make use of the [`SessionEvents.do_orm_execute()`](../orm/events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") hook. See the section [Re-Executing
    Statements](../orm/session_events.html#do-orm-execute-re-executing) for an example.
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象成为遗留对象时，先前依赖于 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象子类化的这两个示例现在使用 [`SessionEvents.do_orm_execute()`](../orm/events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") 钩子。请参阅 [重新执行语句](../orm/session_events.html#do-orm-execute-re-executing)
    一节进行示例。
- en: Baked Query Extension Superseded by built-in caching
  id: totrans-1212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 烘焙查询扩展已被内置缓存系统取代
- en: The baked query extension is superseded by the built in caching system and is
    no longer used by the ORM internals.
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: 烘焙查询扩展已被内置缓存系统取代，不再被 ORM 内部使用。
- en: See [SQL Compilation Caching](../core/connections.html#sql-caching) for full
    background on the new caching system.
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 有关新缓存系统的完整背景，请参阅[SQL 编译缓存](../core/connections.html#sql-caching)。
- en: Asyncio Support
  id: totrans-1215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步 IO 支持
- en: SQLAlchemy 1.4 includes asyncio support for both Core and ORM. The new API exclusively
    makes use of the “future” patterns noted above. See [Asynchronous IO Support for
    Core and ORM](migration_14.html#change-3414) for background.
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 1.4 版本为核心和 ORM 都提供了 asyncio 支持。新的 API 专门使用上述的“未来”模式。请参阅[核心和 ORM 的异步
    IO 支持](migration_14.html#change-3414)获取背景信息。
