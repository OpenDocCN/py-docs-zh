["```py\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import relationship\n\nclass User(Base):\n    __tablename__ = \"user_account\"\n\n    # ... mapped_column() mappings\n\n    addresses: Mapped[List[\"Address\"]] = relationship(back_populates=\"user\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n\n    # ... mapped_column() mappings\n\n    user: Mapped[\"User\"] = relationship(back_populates=\"addresses\")\n```", "```py\n>>> u1 = User(name=\"pkrabs\", fullname=\"Pearl Krabs\")\n>>> u1.addresses\n[]\n```", "```py\n>>> a1 = Address(email_address=\"pearl.krabs@gmail.com\")\n>>> u1.addresses.append(a1)\n```", "```py\n>>> u1.addresses\n[Address(id=None, email_address='pearl.krabs@gmail.com')]\n```", "```py\n>>> a1.user\nUser(id=None, name='pkrabs', fullname='Pearl Krabs')\n```", "```py\n>>> a2 = Address(email_address=\"pearl@aol.com\", user=u1)\n>>> u1.addresses\n[Address(id=None, email_address='pearl.krabs@gmail.com'), Address(id=None, email_address='pearl@aol.com')]\n```", "```py\n# equivalent effect as a2 = Address(user=u1)\n>>> a2.user = u1\n```", "```py\n>>> session.add(u1)\n>>> u1 in session\nTrue\n>>> a1 in session\nTrue\n>>> a2 in session\nTrue\n```", "```py\n>>> print(u1.id)\nNone\n>>> print(a1.user_id)\nNone\n```", "```py\n>>> session.commit()\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)\n[...]  ('pkrabs',  'Pearl Krabs')\nINSERT  INTO  address  (email_address,  user_id)  VALUES  (?,  ?)  RETURNING  id\n[...  (insertmanyvalues)  1/2  (ordered;  batch  not  supported)]  ('pearl.krabs@gmail.com',  6)\nINSERT  INTO  address  (email_address,  user_id)  VALUES  (?,  ?)  RETURNING  id\n[insertmanyvalues  2/2  (ordered;  batch  not  supported)]  ('pearl@aol.com',  6)\nCOMMIT \n```", "```py\n>>> u1.id\nBEGIN  (implicit)\nSELECT  user_account.id  AS  user_account_id,  user_account.name  AS  user_account_name,\nuser_account.fullname  AS  user_account_fullname\nFROM  user_account\nWHERE  user_account.id  =  ?\n[...]  (6,)\n6\n```", "```py\n>>> u1.addresses\nSELECT  address.id  AS  address_id,  address.email_address  AS  address_email_address,\naddress.user_id  AS  address_user_id\nFROM  address\nWHERE  ?  =  address.user_id\n[...]  (6,)\n[Address(id=4, email_address='pearl.krabs@gmail.com'), Address(id=5, email_address='pearl@aol.com')]\n```", "```py\n>>> u1.addresses\n[Address(id=4, email_address='pearl.krabs@gmail.com'), Address(id=5, email_address='pearl@aol.com')]\n```", "```py\n>>> a1\nAddress(id=4, email_address='pearl.krabs@gmail.com')\n>>> a2\nAddress(id=5, email_address='pearl@aol.com')\n```", "```py\n>>> print(select(Address.email_address).select_from(User).join(User.addresses))\nSELECT  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\n>>> print(select(Address.email_address).join_from(User, Address))\nSELECT  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\nfor user_obj in session.execute(\n    select(User).options(selectinload(User.addresses))\n).scalars():\n    user_obj.addresses  # access addresses collection already loaded\n```", "```py\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import relationship\n\nclass User(Base):\n    __tablename__ = \"user_account\"\n\n    addresses: Mapped[List[\"Address\"]] = relationship(\n        back_populates=\"user\", lazy=\"selectin\"\n    )\n```", "```py\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(User).options(selectinload(User.addresses)).order_by(User.id)\n>>> for row in session.execute(stmt):\n...     print(\n...         f\"{row.User.name}  ({', '.join(a.email_address for a in row.User.addresses)})\"\n...     )\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account  ORDER  BY  user_account.id\n[...]  ()\nSELECT  address.user_id  AS  address_user_id,  address.id  AS  address_id,\naddress.email_address  AS  address_email_address\nFROM  address\nWHERE  address.user_id  IN  (?,  ?,  ?,  ?,  ?,  ?)\n[...]  (1,  2,  3,  4,  5,  6)\nspongebob  (spongebob@sqlalchemy.org)\nsandy  (sandy@sqlalchemy.org, sandy@squirrelpower.org)\npatrick  ()\nsquidward  ()\nehkrabs  ()\npkrabs  (pearl.krabs@gmail.com, pearl@aol.com)\n```", "```py\n>>> from sqlalchemy.orm import joinedload\n>>> stmt = (\n...     select(Address)\n...     .options(joinedload(Address.user, innerjoin=True))\n...     .order_by(Address.id)\n... )\n>>> for row in session.execute(stmt):\n...     print(f\"{row.Address.email_address} {row.Address.user.name}\")\nSELECT  address.id,  address.email_address,  address.user_id,  user_account_1.id  AS  id_1,\nuser_account_1.name,  user_account_1.fullname\nFROM  address\nJOIN  user_account  AS  user_account_1  ON  user_account_1.id  =  address.user_id\nORDER  BY  address.id\n[...]  ()\nspongebob@sqlalchemy.org spongebob\nsandy@sqlalchemy.org sandy\nsandy@squirrelpower.org sandy\npearl.krabs@gmail.com pkrabs\npearl@aol.com pkrabs\n```", "```py\n>>> from sqlalchemy.orm import contains_eager\n>>> stmt = (\n...     select(Address)\n...     .join(Address.user)\n...     .where(User.name == \"pkrabs\")\n...     .options(contains_eager(Address.user))\n...     .order_by(Address.id)\n... )\n>>> for row in session.execute(stmt):\n...     print(f\"{row.Address.email_address} {row.Address.user.name}\")\nSELECT  user_account.id,  user_account.name,  user_account.fullname,\naddress.id  AS  id_1,  address.email_address,  address.user_id\nFROM  address  JOIN  user_account  ON  user_account.id  =  address.user_id\nWHERE  user_account.name  =  ?  ORDER  BY  address.id\n[...]  ('pkrabs',)\npearl.krabs@gmail.com pkrabs\npearl@aol.com pkrabs\n```", "```py\n>>> stmt = (\n...     select(Address)\n...     .join(Address.user)\n...     .where(User.name == \"pkrabs\")\n...     .options(joinedload(Address.user))\n...     .order_by(Address.id)\n... )\n>>> print(stmt)  # SELECT has a JOIN and LEFT OUTER JOIN unnecessarily\nSELECT  address.id,  address.email_address,  address.user_id,\nuser_account_1.id  AS  id_1,  user_account_1.name,  user_account_1.fullname\nFROM  address  JOIN  user_account  ON  user_account.id  =  address.user_id\nLEFT  OUTER  JOIN  user_account  AS  user_account_1  ON  user_account_1.id  =  address.user_id\nWHERE  user_account.name  =  :name_1  ORDER  BY  address.id \n```", "```py\n>>> from sqlalchemy.orm import Mapped\n>>> from sqlalchemy.orm import relationship\n\n>>> class User(Base):\n...     __tablename__ = \"user_account\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     addresses: Mapped[List[\"Address\"]] = relationship(\n...         back_populates=\"user\", lazy=\"raise_on_sql\"\n...     )\n\n>>> class Address(Base):\n...     __tablename__ = \"address\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     user_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n...     user: Mapped[\"User\"] = relationship(back_populates=\"addresses\", lazy=\"raise_on_sql\")\n```", "```py\n>>> u1 = session.execute(select(User)).scalars().first()\nSELECT  user_account.id  FROM  user_account\n[...]  ()\n>>> u1.addresses\nTraceback (most recent call last):\n...\nsqlalchemy.exc.InvalidRequestError: 'User.addresses' is not available due to lazy='raise_on_sql'\n```", "```py\n>>> u1 = (\n...     session.execute(select(User).options(selectinload(User.addresses)))\n...     .scalars()\n...     .first()\n... )\nSELECT  user_account.id\nFROM  user_account\n[...]  ()\nSELECT  address.user_id  AS  address_user_id,  address.id  AS  address_id\nFROM  address\nWHERE  address.user_id  IN  (?,  ?,  ?,  ?,  ?,  ?)\n[...]  (1,  2,  3,  4,  5,  6) \n```", "```py\n>>> u1 = User(name=\"pkrabs\", fullname=\"Pearl Krabs\")\n>>> u1.addresses\n[]\n```", "```py\n>>> a1 = Address(email_address=\"pearl.krabs@gmail.com\")\n>>> u1.addresses.append(a1)\n```", "```py\n>>> u1.addresses\n[Address(id=None, email_address='pearl.krabs@gmail.com')]\n```", "```py\n>>> a1.user\nUser(id=None, name='pkrabs', fullname='Pearl Krabs')\n```", "```py\n>>> a2 = Address(email_address=\"pearl@aol.com\", user=u1)\n>>> u1.addresses\n[Address(id=None, email_address='pearl.krabs@gmail.com'), Address(id=None, email_address='pearl@aol.com')]\n```", "```py\n# equivalent effect as a2 = Address(user=u1)\n>>> a2.user = u1\n```", "```py\n>>> session.add(u1)\n>>> u1 in session\nTrue\n>>> a1 in session\nTrue\n>>> a2 in session\nTrue\n```", "```py\n>>> print(u1.id)\nNone\n>>> print(a1.user_id)\nNone\n```", "```py\n>>> session.commit()\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)\n[...]  ('pkrabs',  'Pearl Krabs')\nINSERT  INTO  address  (email_address,  user_id)  VALUES  (?,  ?)  RETURNING  id\n[...  (insertmanyvalues)  1/2  (ordered;  batch  not  supported)]  ('pearl.krabs@gmail.com',  6)\nINSERT  INTO  address  (email_address,  user_id)  VALUES  (?,  ?)  RETURNING  id\n[insertmanyvalues  2/2  (ordered;  batch  not  supported)]  ('pearl@aol.com',  6)\nCOMMIT \n```", "```py\n>>> session.add(u1)\n>>> u1 in session\nTrue\n>>> a1 in session\nTrue\n>>> a2 in session\nTrue\n```", "```py\n>>> print(u1.id)\nNone\n>>> print(a1.user_id)\nNone\n```", "```py\n>>> session.commit()\nINSERT  INTO  user_account  (name,  fullname)  VALUES  (?,  ?)\n[...]  ('pkrabs',  'Pearl Krabs')\nINSERT  INTO  address  (email_address,  user_id)  VALUES  (?,  ?)  RETURNING  id\n[...  (insertmanyvalues)  1/2  (ordered;  batch  not  supported)]  ('pearl.krabs@gmail.com',  6)\nINSERT  INTO  address  (email_address,  user_id)  VALUES  (?,  ?)  RETURNING  id\n[insertmanyvalues  2/2  (ordered;  batch  not  supported)]  ('pearl@aol.com',  6)\nCOMMIT \n```", "```py\n>>> u1.id\nBEGIN  (implicit)\nSELECT  user_account.id  AS  user_account_id,  user_account.name  AS  user_account_name,\nuser_account.fullname  AS  user_account_fullname\nFROM  user_account\nWHERE  user_account.id  =  ?\n[...]  (6,)\n6\n```", "```py\n>>> u1.addresses\nSELECT  address.id  AS  address_id,  address.email_address  AS  address_email_address,\naddress.user_id  AS  address_user_id\nFROM  address\nWHERE  ?  =  address.user_id\n[...]  (6,)\n[Address(id=4, email_address='pearl.krabs@gmail.com'), Address(id=5, email_address='pearl@aol.com')]\n```", "```py\n>>> u1.addresses\n[Address(id=4, email_address='pearl.krabs@gmail.com'), Address(id=5, email_address='pearl@aol.com')]\n```", "```py\n>>> a1\nAddress(id=4, email_address='pearl.krabs@gmail.com')\n>>> a2\nAddress(id=5, email_address='pearl@aol.com')\n```", "```py\n>>> print(select(Address.email_address).select_from(User).join(User.addresses))\nSELECT  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\n>>> print(select(Address.email_address).join_from(User, Address))\nSELECT  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\n>>> print(select(Address.email_address).select_from(User).join(User.addresses))\nSELECT  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\n>>> print(select(Address.email_address).join_from(User, Address))\nSELECT  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\nfor user_obj in session.execute(\n    select(User).options(selectinload(User.addresses))\n).scalars():\n    user_obj.addresses  # access addresses collection already loaded\n```", "```py\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import relationship\n\nclass User(Base):\n    __tablename__ = \"user_account\"\n\n    addresses: Mapped[List[\"Address\"]] = relationship(\n        back_populates=\"user\", lazy=\"selectin\"\n    )\n```", "```py\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(User).options(selectinload(User.addresses)).order_by(User.id)\n>>> for row in session.execute(stmt):\n...     print(\n...         f\"{row.User.name}  ({', '.join(a.email_address for a in row.User.addresses)})\"\n...     )\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account  ORDER  BY  user_account.id\n[...]  ()\nSELECT  address.user_id  AS  address_user_id,  address.id  AS  address_id,\naddress.email_address  AS  address_email_address\nFROM  address\nWHERE  address.user_id  IN  (?,  ?,  ?,  ?,  ?,  ?)\n[...]  (1,  2,  3,  4,  5,  6)\nspongebob  (spongebob@sqlalchemy.org)\nsandy  (sandy@sqlalchemy.org, sandy@squirrelpower.org)\npatrick  ()\nsquidward  ()\nehkrabs  ()\npkrabs  (pearl.krabs@gmail.com, pearl@aol.com)\n```", "```py\n>>> from sqlalchemy.orm import joinedload\n>>> stmt = (\n...     select(Address)\n...     .options(joinedload(Address.user, innerjoin=True))\n...     .order_by(Address.id)\n... )\n>>> for row in session.execute(stmt):\n...     print(f\"{row.Address.email_address} {row.Address.user.name}\")\nSELECT  address.id,  address.email_address,  address.user_id,  user_account_1.id  AS  id_1,\nuser_account_1.name,  user_account_1.fullname\nFROM  address\nJOIN  user_account  AS  user_account_1  ON  user_account_1.id  =  address.user_id\nORDER  BY  address.id\n[...]  ()\nspongebob@sqlalchemy.org spongebob\nsandy@sqlalchemy.org sandy\nsandy@squirrelpower.org sandy\npearl.krabs@gmail.com pkrabs\npearl@aol.com pkrabs\n```", "```py\n>>> from sqlalchemy.orm import contains_eager\n>>> stmt = (\n...     select(Address)\n...     .join(Address.user)\n...     .where(User.name == \"pkrabs\")\n...     .options(contains_eager(Address.user))\n...     .order_by(Address.id)\n... )\n>>> for row in session.execute(stmt):\n...     print(f\"{row.Address.email_address} {row.Address.user.name}\")\nSELECT  user_account.id,  user_account.name,  user_account.fullname,\naddress.id  AS  id_1,  address.email_address,  address.user_id\nFROM  address  JOIN  user_account  ON  user_account.id  =  address.user_id\nWHERE  user_account.name  =  ?  ORDER  BY  address.id\n[...]  ('pkrabs',)\npearl.krabs@gmail.com pkrabs\npearl@aol.com pkrabs\n```", "```py\n>>> stmt = (\n...     select(Address)\n...     .join(Address.user)\n...     .where(User.name == \"pkrabs\")\n...     .options(joinedload(Address.user))\n...     .order_by(Address.id)\n... )\n>>> print(stmt)  # SELECT has a JOIN and LEFT OUTER JOIN unnecessarily\nSELECT  address.id,  address.email_address,  address.user_id,\nuser_account_1.id  AS  id_1,  user_account_1.name,  user_account_1.fullname\nFROM  address  JOIN  user_account  ON  user_account.id  =  address.user_id\nLEFT  OUTER  JOIN  user_account  AS  user_account_1  ON  user_account_1.id  =  address.user_id\nWHERE  user_account.name  =  :name_1  ORDER  BY  address.id \n```", "```py\n>>> from sqlalchemy.orm import Mapped\n>>> from sqlalchemy.orm import relationship\n\n>>> class User(Base):\n...     __tablename__ = \"user_account\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     addresses: Mapped[List[\"Address\"]] = relationship(\n...         back_populates=\"user\", lazy=\"raise_on_sql\"\n...     )\n\n>>> class Address(Base):\n...     __tablename__ = \"address\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     user_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n...     user: Mapped[\"User\"] = relationship(back_populates=\"addresses\", lazy=\"raise_on_sql\")\n```", "```py\n>>> u1 = session.execute(select(User)).scalars().first()\nSELECT  user_account.id  FROM  user_account\n[...]  ()\n>>> u1.addresses\nTraceback (most recent call last):\n...\nsqlalchemy.exc.InvalidRequestError: 'User.addresses' is not available due to lazy='raise_on_sql'\n```", "```py\n>>> u1 = (\n...     session.execute(select(User).options(selectinload(User.addresses)))\n...     .scalars()\n...     .first()\n... )\nSELECT  user_account.id\nFROM  user_account\n[...]  ()\nSELECT  address.user_id  AS  address_user_id,  address.id  AS  address_id\nFROM  address\nWHERE  address.user_id  IN  (?,  ?,  ?,  ?,  ?,  ?)\n[...]  (1,  2,  3,  4,  5,  6) \n```", "```py\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(User).options(selectinload(User.addresses)).order_by(User.id)\n>>> for row in session.execute(stmt):\n...     print(\n...         f\"{row.User.name}  ({', '.join(a.email_address for a in row.User.addresses)})\"\n...     )\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account  ORDER  BY  user_account.id\n[...]  ()\nSELECT  address.user_id  AS  address_user_id,  address.id  AS  address_id,\naddress.email_address  AS  address_email_address\nFROM  address\nWHERE  address.user_id  IN  (?,  ?,  ?,  ?,  ?,  ?)\n[...]  (1,  2,  3,  4,  5,  6)\nspongebob  (spongebob@sqlalchemy.org)\nsandy  (sandy@sqlalchemy.org, sandy@squirrelpower.org)\npatrick  ()\nsquidward  ()\nehkrabs  ()\npkrabs  (pearl.krabs@gmail.com, pearl@aol.com)\n```", "```py\n>>> from sqlalchemy.orm import joinedload\n>>> stmt = (\n...     select(Address)\n...     .options(joinedload(Address.user, innerjoin=True))\n...     .order_by(Address.id)\n... )\n>>> for row in session.execute(stmt):\n...     print(f\"{row.Address.email_address} {row.Address.user.name}\")\nSELECT  address.id,  address.email_address,  address.user_id,  user_account_1.id  AS  id_1,\nuser_account_1.name,  user_account_1.fullname\nFROM  address\nJOIN  user_account  AS  user_account_1  ON  user_account_1.id  =  address.user_id\nORDER  BY  address.id\n[...]  ()\nspongebob@sqlalchemy.org spongebob\nsandy@sqlalchemy.org sandy\nsandy@squirrelpower.org sandy\npearl.krabs@gmail.com pkrabs\npearl@aol.com pkrabs\n```", "```py\n>>> from sqlalchemy.orm import contains_eager\n>>> stmt = (\n...     select(Address)\n...     .join(Address.user)\n...     .where(User.name == \"pkrabs\")\n...     .options(contains_eager(Address.user))\n...     .order_by(Address.id)\n... )\n>>> for row in session.execute(stmt):\n...     print(f\"{row.Address.email_address} {row.Address.user.name}\")\nSELECT  user_account.id,  user_account.name,  user_account.fullname,\naddress.id  AS  id_1,  address.email_address,  address.user_id\nFROM  address  JOIN  user_account  ON  user_account.id  =  address.user_id\nWHERE  user_account.name  =  ?  ORDER  BY  address.id\n[...]  ('pkrabs',)\npearl.krabs@gmail.com pkrabs\npearl@aol.com pkrabs\n```", "```py\n>>> stmt = (\n...     select(Address)\n...     .join(Address.user)\n...     .where(User.name == \"pkrabs\")\n...     .options(joinedload(Address.user))\n...     .order_by(Address.id)\n... )\n>>> print(stmt)  # SELECT has a JOIN and LEFT OUTER JOIN unnecessarily\nSELECT  address.id,  address.email_address,  address.user_id,\nuser_account_1.id  AS  id_1,  user_account_1.name,  user_account_1.fullname\nFROM  address  JOIN  user_account  ON  user_account.id  =  address.user_id\nLEFT  OUTER  JOIN  user_account  AS  user_account_1  ON  user_account_1.id  =  address.user_id\nWHERE  user_account.name  =  :name_1  ORDER  BY  address.id \n```", "```py\n>>> from sqlalchemy.orm import Mapped\n>>> from sqlalchemy.orm import relationship\n\n>>> class User(Base):\n...     __tablename__ = \"user_account\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     addresses: Mapped[List[\"Address\"]] = relationship(\n...         back_populates=\"user\", lazy=\"raise_on_sql\"\n...     )\n\n>>> class Address(Base):\n...     __tablename__ = \"address\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     user_id: Mapped[int] = mapped_column(ForeignKey(\"user_account.id\"))\n...     user: Mapped[\"User\"] = relationship(back_populates=\"addresses\", lazy=\"raise_on_sql\")\n```", "```py\n>>> u1 = session.execute(select(User)).scalars().first()\nSELECT  user_account.id  FROM  user_account\n[...]  ()\n>>> u1.addresses\nTraceback (most recent call last):\n...\nsqlalchemy.exc.InvalidRequestError: 'User.addresses' is not available due to lazy='raise_on_sql'\n```", "```py\n>>> u1 = (\n...     session.execute(select(User).options(selectinload(User.addresses)))\n...     .scalars()\n...     .first()\n... )\nSELECT  user_account.id\nFROM  user_account\n[...]  ()\nSELECT  address.user_id  AS  address_user_id,  address.id  AS  address_id\nFROM  address\nWHERE  address.user_id  IN  (?,  ?,  ?,  ?,  ?,  ?)\n[...]  (1,  2,  3,  4,  5,  6) \n```"]