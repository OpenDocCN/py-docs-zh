["```py\nimport sys, pathlib, pymupdf\nfname = sys.argv[1]  # get document filename\nwith pymupdf.open(fname) as doc:  # open document\n    text = chr(12).join([page.get_text() for page in doc])\n# write as a binary file to support non-ASCII characters\npathlib.Path(fname + \".txt\").write_bytes(text.encode()) \n```", "```py\nkey1               value1\nkey2\nvalue2\nkey3\n       value3 blah, blah, blah key4 value4 some other text key5 value5 ... \n```", "```py\ndoc = pymupdf.open(\"some.pdf\")\nheader = \"Header\"  # text in header\nfooter = \"Page %i of %i\"  # text in footer\nfor page in doc:\n    page.insert_text((50, 50), header)  # insert header\n    page.insert_text(  # insert footer 50 points above page bottom\n        (50, page.rect.height - 50),\n        footer % (page.number + 1, doc.page_count),\n    ) \n```", "```py\nimport sys\nimport pymupdf\n\ndef mark_word(page, text):\n  \"\"\"Underline each word that contains 'text'.\n \"\"\"\n    found = 0\n    wlist = page.get_text(\"words\", delimiters=None)  # make the word list\n    for w in wlist:  # scan through all words on page\n        if text in w[4]:  # w[4] is the word's string\n            found += 1  # count\n            r = pymupdf.Rect(w[:4])  # make rect from word bbox\n            page.add_underline_annot(r)  # underline\n    return found\n\nfname = sys.argv[1]  # filename\ntext = sys.argv[2]  # search string\ndoc = pymupdf.open(fname)\n\nprint(\"underlining words containing '%s' in document '%s'\" % (word, doc.name))\n\nnew_doc = False  # indicator if anything found at all\n\nfor page in doc:  # scan through the pages\n    found = mark_word(page, text)  # mark the page's words\n    if found:  # if anything found ...\n        new_doc = True\n        print(\"found '%s' %i times on page %i\" % (text, found, page.number + 1))\n\nif new_doc:\n    doc.save(\"marked-\" + doc.name) \n```", "```py\n# -*- coding: utf-8 -*-\nimport pymupdf\n\n# the document to annotate\ndoc = pymupdf.open(\"tilted-text.pdf\")\n\n# the text to be marked\nneedle = \"¡La práctica hace el campeón!\"\n\n# work with first page only\npage = doc[0]\n\n# get list of text locations\n# we use \"quads\", not rectangles because text may be tilted!\nrl = page.search_for(needle, quads=True)\n\n# mark all found quads with one annotation\npage.add_squiggly_annot(rl)\n\n# save to a new PDF\ndoc.save(\"a-squiggly.pdf\") \n```", "```py\nspan_quad = pymupdf.recover_quad(line[\"dir\"], span)\nannot = page.add_highlight_annot(span_quad)  # this will mark the complete span text \n```", "```py\nline_quad = pymupdf.recover_line_quad(line, spans=line[\"spans\"][1:-1])\npage.add_highlight_annot(line_quad) \n```", "```py\nimport sys\n\nimport pymupdf\n\ndef flags_decomposer(flags):\n  \"\"\"Make font flags human readable.\"\"\"\n    l = []\n    if flags & 2 ** 0:\n        l.append(\"superscript\")\n    if flags & 2 ** 1:\n        l.append(\"italic\")\n    if flags & 2 ** 2:\n        l.append(\"serifed\")\n    else:\n        l.append(\"sans\")\n    if flags & 2 ** 3:\n        l.append(\"monospaced\")\n    else:\n        l.append(\"proportional\")\n    if flags & 2 ** 4:\n        l.append(\"bold\")\n    return \", \".join(l)\n\ndoc = pymupdf.open(sys.argv[1])\npage = doc[0]\n\n# read page text as a dictionary, suppressing extra spaces in CJK fonts\nblocks = page.get_text(\"dict\", flags=11)[\"blocks\"]\nfor b in blocks:  # iterate through the text blocks\n    for l in b[\"lines\"]:  # iterate through the text lines\n        for s in l[\"spans\"]:  # iterate through the text spans\n            print(\"\")\n            font_properties = \"Font: '%s' (%s), size %g, color #%06x\" % (\n                s[\"font\"],  # font name\n                flags_decomposer(s[\"flags\"]),  # readable font flags\n                s[\"size\"],  # font size\n                s[\"color\"],  # font color\n            )\n            print(\"Text: '%s'\" % s[\"text\"])  # simple print of text\n            print(font_properties) \n```", "```py\nimport pymupdf\ndoc = pymupdf.open(...)  # new or existing PDF\npage = doc.new_page()  # new or existing page via doc[n]\np = pymupdf.Point(50, 72)  # start point of 1st line\n\ntext = \"Some text,\\nspread across\\nseveral lines.\"\n# the same result is achievable by\n# text = [\"Some text\", \"spread across\", \"several lines.\"]\n\nrc = page.insert_text(p,  # bottom-left of 1st char\n                     text,  # the text (honors '\\n')\n                     fontname = \"helv\",  # the default font\n                     fontsize = 11,  # the default font size\n                     rotate = 0,  # also available: 90, 180, 270\n                     )\nprint(\"%i lines printed on page %i.\" % (rc, page.number))\n\ndoc.save(\"text.pdf\") \n```", "```py\nimport pymupdf\ndoc = pymupdf.open()\npage = doc.new_page()\n# the text strings, each having 3 lines\ntext1 = \"rotate=0\\nLine 2\\nLine 3\"\ntext2 = \"rotate=90\\nLine 2\\nLine 3\"\ntext3 = \"rotate=-90\\nLine 2\\nLine 3\"\ntext4 = \"rotate=180\\nLine 2\\nLine 3\"\nred = (1, 0, 0) # the color for the red dots\n# the insertion points, each with a 25 pix distance from the corners\np1 = pymupdf.Point(25, 25)\np2 = pymupdf.Point(page.rect.width - 25, 25)\np3 = pymupdf.Point(25, page.rect.height - 25)\np4 = pymupdf.Point(page.rect.width - 25, page.rect.height - 25)\n# create a Shape to draw on\nshape = page.new_shape()\n\n# draw the insertion points as red, filled dots\nshape.draw_circle(p1,1)\nshape.draw_circle(p2,1)\nshape.draw_circle(p3,1)\nshape.draw_circle(p4,1)\nshape.finish(width=0.3, color=red, fill=red)\n\n# insert the text strings\nshape.insert_text(p1, text1)\nshape.insert_text(p3, text2, rotate=90)\nshape.insert_text(p2, text3, rotate=-90)\nshape.insert_text(p4, text4, rotate=180)\n\n# store our work to the page\nshape.commit()\ndoc.save(...) \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open()  # new or existing PDF\npage = doc.new_page()  # new page, or choose doc[n]\n\n# write in this overall area\nrect = pymupdf.Rect(100, 100, 300, 150)\n\n# partition the area in 4 equal sub-rectangles\nCELLS = pymupdf.make_table(rect, cols=4, rows=1)\n\nt1 = \"text with rotate = 0.\"  # these texts we will written\nt2 = \"text with rotate = 90.\"\nt3 = \"text with rotate = 180.\"\nt4 = \"text with rotate = 270.\"\ntext = [t1, t2, t3, t4]\nred = pymupdf.pdfcolor[\"red\"]  # some colors\ngold = pymupdf.pdfcolor[\"gold\"]\nblue = pymupdf.pdfcolor[\"blue\"]\n\"\"\"\nWe use a Shape object (something like a canvas) to output the text and\nthe rectangles surrounding it for demonstration.\n\"\"\"\nshape = page.new_shape()  # create Shape\nfor i in range(len(CELLS[0])):\n    shape.draw_rect(CELLS[0][i])  # draw rectangle\n    shape.insert_textbox(\n        CELLS[0][i], text[i], fontname=\"hebo\", color=blue, rotate=90 * i\n    )\n\nshape.finish(width=0.3, color=red, fill=gold)\n\nshape.commit()  # write all stuff to the page\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\nimport pymupdf\n\nrect = pymupdf.Rect(100, 100, 400, 300)\n\ntext = \"\"\"Lorem ipsum dolor sit amet, consectetur adipisici elit, sed\n eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad\n minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b>\n nisi ut aliquid ex ea commodi consequat. Quis aute iure\n <span style=\"color: #f00;\">reprehenderit</span>\n in <span style=\"color: #0f0;font-weight:bold;\">voluptate</span> velit\n esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat\n cupiditat non proident, sunt in culpa qui\n <a href=\"https://www.artifex.com\">officia</a> deserunt mollit anim id\n est laborum.\"\"\"\n\ndoc = pymupdf.Document()\n\npage = doc.new_page()\npage.insert_htmlbox(rect, text, css=\"* {font-family: sans-serif;font-size:14px;}\")\n\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\nimport pymupdf\nimport os\n\nfiledir = os.path.dirname(__file__)\n\ntext = \"\"\"\n<style>\nbody {\n font-family: sans-serif;\n}\n\ntd,\nth {\n border: 1px solid blue;\n border-right: none;\n border-bottom: none;\n padding: 5px;\n text-align: center;\n}\n\ntable {\n border-right: 1px solid blue;\n border-bottom: 1px solid blue;\n border-spacing: 0;\n}\n</style>\n\n<body>\n<p><b>Some Colors</b></p>\n<table>\n <tr>\n <th>Lime</th>\n <th>Lemon</th>\n <th>Image</th>\n <th>Mauve</th>\n </tr>\n <tr>\n <td>Green</td>\n <td>Yellow</td>\n <td><img src=\"img-cake.png\" width=50></td>\n <td>Between<br>Gray and Purple</td>\n </tr>\n</table>\n</body>\n\"\"\"\n\ndoc = pymupdf.Document()\n\npage = doc.new_page()\nrect = page.rect + (36, 36, -36, -36)\n\n# we must specify an Archive because of the image\npage.insert_htmlbox(rect, text, archive=pymupdf.Archive(\".\"))\n\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\nimport pymupdf\n\ngreetings = (\n    \"Hello, World!\",  # english\n    \"Hallo, Welt!\",  # german\n    \"سلام دنیا!\",  # persian\n    \"வணக்கம், உலகம்!\",  # tamil\n    \"สวัสดีชาวโลก!\",  # thai\n    \"Привіт Світ!\",  # ucranian\n    \"שלום עולם!\",  # hebrew\n    \"ওহে বিশ্ব!\",  # bengali\n    \"你好世界！\",  # chinese\n    \"こんにちは世界！\",  # japanese\n    \"안녕하세요, 월드!\",  # korean\n    \"नमस्कार, विश्व !\",  # sanskrit\n    \"हैलो वर्ल्ड!\",  # hindi\n)\ndoc = pymupdf.open()\npage = doc.new_page()\nrect = (50, 50, 200, 500)\n\n# join greetings into one text string\ntext = \" ... \".join([t for t in greetings])\n\n# the output of the above is simple:\npage.insert_htmlbox(rect, text)\ndoc.save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\n\"\"\"\nHow to use your own fonts with method Page.insert_htmlbox().\n\"\"\"\nimport pymupdf\n\n# Example text\ntext = \"\"\"Lorem ipsum dolor sit amet, consectetur adipisici elit, sed\n eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad\n minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b>\n nisi ut aliquid ex ea commodi consequat. Quis aute iure\n <span style=\"color: red;\">reprehenderit</span>\n in <span style=\"color: green;font-weight:bold;\">voluptate</span> velit\n esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat\n cupiditat non proident, sunt in culpa qui\n <a href=\"https://www.artifex.com\">officia</a> deserunt mollit anim id\n est laborum.\"\"\"\n\n\"\"\"\nWe need an Archive object to show where font files are located.\nWe intend to use the font family \"MS Comic Sans\".\n\"\"\"\narch = pymupdf.Archive(\"C:/Windows/Fonts\")\n\n# These statements define which font file to use for regular, bold,\n# italic and bold-italic text.\n# We assign an arbitary common font-family for all 4 font files.\n# The Story algorithm will select the right file as required.\n# We request to use \"comic\" throughout the text.\ncss = \"\"\"\n@font-face {font-family: comic; src: url(comic.ttf);}\n@font-face {font-family: comic; src: url(comicbd.ttf);font-weight: bold;}\n@font-face {font-family: comic; src: url(comicz.ttf);font-weight: bold;font-style: italic;}\n@font-face {font-family: comic; src: url(comici.ttf);font-style: italic;}\n* {font-family: comic;}\n\"\"\"\n\ndoc = pymupdf.Document()\npage = doc.new_page(width=150, height=150)  # make small page\n\npage.insert_htmlbox(page.rect, text, css=css, archive=arch)\n\ndoc.subset_fonts(verbose=True)  # build subset fonts to reduce file size\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\n\"\"\"\nHow to use a pymupdf font with method Page.insert_htmlbox().\n\"\"\"\nimport pymupdf\n\n# Example text\ntext = \"\"\"Lorem ipsum dolor sit amet, consectetur adipisici elit, sed\n eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad\n minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b>\n nisi ut aliquid ex ea commodi consequat. Quis aute iure\n <span style=\"color: red;\">reprehenderit</span>\n in <span style=\"color: green;font-weight:bold;\">voluptate</span> velit\n esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat\n cupiditat non proident, sunt in culpa qui\n <a href=\"https://www.artifex.com\">officia</a> deserunt mollit anim id\n est laborum.\"\"\"\n\n\"\"\"\nThis is similar to font file support. However, we can use a convenience\nfunction for creating required CSS definitions.\nWe still need an Archive for finding the font binaries.\n\"\"\"\narch = pymupdf.Archive()\n\n# We request to use \"myfont\" throughout the text.\ncss = pymupdf.css_for_pymupdf_font(\"ubuntu\", archive=arch, name=\"myfont\")\ncss += \"* {font-family: myfont;text-align: justify;}\"\n\ndoc = pymupdf.Document()\n\npage = doc.new_page(width=150, height=150)\n\npage.insert_htmlbox(page.rect, text, css=css, archive=arch, rotate=90)\n\ndoc.subset_fonts(verbose=True)\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\nfor page in doc:\n    text_blocks = page.get_text(\"dict\", flags=pymupdf.TEXTFLAGS_TEXT)[\"blocks\"]\n    for block in text_blocks:\n        for line in block[\"lines\"]:\n            for span in line[\"spans\"]:\n                text = span[\"text\"]\n                color = pymupdf.sRGB_to_rgb(span[\"color\"])\n                print(f\"Text: {text}, Color: {color}\") \n```", "```py\nimport sys, pathlib, pymupdf\nfname = sys.argv[1]  # get document filename\nwith pymupdf.open(fname) as doc:  # open document\n    text = chr(12).join([page.get_text() for page in doc])\n# write as a binary file to support non-ASCII characters\npathlib.Path(fname + \".txt\").write_bytes(text.encode()) \n```", "```py\nkey1               value1\nkey2\nvalue2\nkey3\n       value3 blah, blah, blah key4 value4 some other text key5 value5 ... \n```", "```py\ndoc = pymupdf.open(\"some.pdf\")\nheader = \"Header\"  # text in header\nfooter = \"Page %i of %i\"  # text in footer\nfor page in doc:\n    page.insert_text((50, 50), header)  # insert header\n    page.insert_text(  # insert footer 50 points above page bottom\n        (50, page.rect.height - 50),\n        footer % (page.number + 1, doc.page_count),\n    ) \n```", "```py\nimport sys\nimport pymupdf\n\ndef mark_word(page, text):\n  \"\"\"Underline each word that contains 'text'.\n \"\"\"\n    found = 0\n    wlist = page.get_text(\"words\", delimiters=None)  # make the word list\n    for w in wlist:  # scan through all words on page\n        if text in w[4]:  # w[4] is the word's string\n            found += 1  # count\n            r = pymupdf.Rect(w[:4])  # make rect from word bbox\n            page.add_underline_annot(r)  # underline\n    return found\n\nfname = sys.argv[1]  # filename\ntext = sys.argv[2]  # search string\ndoc = pymupdf.open(fname)\n\nprint(\"underlining words containing '%s' in document '%s'\" % (word, doc.name))\n\nnew_doc = False  # indicator if anything found at all\n\nfor page in doc:  # scan through the pages\n    found = mark_word(page, text)  # mark the page's words\n    if found:  # if anything found ...\n        new_doc = True\n        print(\"found '%s' %i times on page %i\" % (text, found, page.number + 1))\n\nif new_doc:\n    doc.save(\"marked-\" + doc.name) \n```", "```py\n# -*- coding: utf-8 -*-\nimport pymupdf\n\n# the document to annotate\ndoc = pymupdf.open(\"tilted-text.pdf\")\n\n# the text to be marked\nneedle = \"¡La práctica hace el campeón!\"\n\n# work with first page only\npage = doc[0]\n\n# get list of text locations\n# we use \"quads\", not rectangles because text may be tilted!\nrl = page.search_for(needle, quads=True)\n\n# mark all found quads with one annotation\npage.add_squiggly_annot(rl)\n\n# save to a new PDF\ndoc.save(\"a-squiggly.pdf\") \n```", "```py\nspan_quad = pymupdf.recover_quad(line[\"dir\"], span)\nannot = page.add_highlight_annot(span_quad)  # this will mark the complete span text \n```", "```py\nline_quad = pymupdf.recover_line_quad(line, spans=line[\"spans\"][1:-1])\npage.add_highlight_annot(line_quad) \n```", "```py\nimport sys\n\nimport pymupdf\n\ndef flags_decomposer(flags):\n  \"\"\"Make font flags human readable.\"\"\"\n    l = []\n    if flags & 2 ** 0:\n        l.append(\"superscript\")\n    if flags & 2 ** 1:\n        l.append(\"italic\")\n    if flags & 2 ** 2:\n        l.append(\"serifed\")\n    else:\n        l.append(\"sans\")\n    if flags & 2 ** 3:\n        l.append(\"monospaced\")\n    else:\n        l.append(\"proportional\")\n    if flags & 2 ** 4:\n        l.append(\"bold\")\n    return \", \".join(l)\n\ndoc = pymupdf.open(sys.argv[1])\npage = doc[0]\n\n# read page text as a dictionary, suppressing extra spaces in CJK fonts\nblocks = page.get_text(\"dict\", flags=11)[\"blocks\"]\nfor b in blocks:  # iterate through the text blocks\n    for l in b[\"lines\"]:  # iterate through the text lines\n        for s in l[\"spans\"]:  # iterate through the text spans\n            print(\"\")\n            font_properties = \"Font: '%s' (%s), size %g, color #%06x\" % (\n                s[\"font\"],  # font name\n                flags_decomposer(s[\"flags\"]),  # readable font flags\n                s[\"size\"],  # font size\n                s[\"color\"],  # font color\n            )\n            print(\"Text: '%s'\" % s[\"text\"])  # simple print of text\n            print(font_properties) \n```", "```py\nimport pymupdf\ndoc = pymupdf.open(...)  # new or existing PDF\npage = doc.new_page()  # new or existing page via doc[n]\np = pymupdf.Point(50, 72)  # start point of 1st line\n\ntext = \"Some text,\\nspread across\\nseveral lines.\"\n# the same result is achievable by\n# text = [\"Some text\", \"spread across\", \"several lines.\"]\n\nrc = page.insert_text(p,  # bottom-left of 1st char\n                     text,  # the text (honors '\\n')\n                     fontname = \"helv\",  # the default font\n                     fontsize = 11,  # the default font size\n                     rotate = 0,  # also available: 90, 180, 270\n                     )\nprint(\"%i lines printed on page %i.\" % (rc, page.number))\n\ndoc.save(\"text.pdf\") \n```", "```py\nimport pymupdf\ndoc = pymupdf.open()\npage = doc.new_page()\n# the text strings, each having 3 lines\ntext1 = \"rotate=0\\nLine 2\\nLine 3\"\ntext2 = \"rotate=90\\nLine 2\\nLine 3\"\ntext3 = \"rotate=-90\\nLine 2\\nLine 3\"\ntext4 = \"rotate=180\\nLine 2\\nLine 3\"\nred = (1, 0, 0) # the color for the red dots\n# the insertion points, each with a 25 pix distance from the corners\np1 = pymupdf.Point(25, 25)\np2 = pymupdf.Point(page.rect.width - 25, 25)\np3 = pymupdf.Point(25, page.rect.height - 25)\np4 = pymupdf.Point(page.rect.width - 25, page.rect.height - 25)\n# create a Shape to draw on\nshape = page.new_shape()\n\n# draw the insertion points as red, filled dots\nshape.draw_circle(p1,1)\nshape.draw_circle(p2,1)\nshape.draw_circle(p3,1)\nshape.draw_circle(p4,1)\nshape.finish(width=0.3, color=red, fill=red)\n\n# insert the text strings\nshape.insert_text(p1, text1)\nshape.insert_text(p3, text2, rotate=90)\nshape.insert_text(p2, text3, rotate=-90)\nshape.insert_text(p4, text4, rotate=180)\n\n# store our work to the page\nshape.commit()\ndoc.save(...) \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open()  # new or existing PDF\npage = doc.new_page()  # new page, or choose doc[n]\n\n# write in this overall area\nrect = pymupdf.Rect(100, 100, 300, 150)\n\n# partition the area in 4 equal sub-rectangles\nCELLS = pymupdf.make_table(rect, cols=4, rows=1)\n\nt1 = \"text with rotate = 0.\"  # these texts we will written\nt2 = \"text with rotate = 90.\"\nt3 = \"text with rotate = 180.\"\nt4 = \"text with rotate = 270.\"\ntext = [t1, t2, t3, t4]\nred = pymupdf.pdfcolor[\"red\"]  # some colors\ngold = pymupdf.pdfcolor[\"gold\"]\nblue = pymupdf.pdfcolor[\"blue\"]\n\"\"\"\nWe use a Shape object (something like a canvas) to output the text and\nthe rectangles surrounding it for demonstration.\n\"\"\"\nshape = page.new_shape()  # create Shape\nfor i in range(len(CELLS[0])):\n    shape.draw_rect(CELLS[0][i])  # draw rectangle\n    shape.insert_textbox(\n        CELLS[0][i], text[i], fontname=\"hebo\", color=blue, rotate=90 * i\n    )\n\nshape.finish(width=0.3, color=red, fill=gold)\n\nshape.commit()  # write all stuff to the page\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\nimport pymupdf\n\nrect = pymupdf.Rect(100, 100, 400, 300)\n\ntext = \"\"\"Lorem ipsum dolor sit amet, consectetur adipisici elit, sed\n eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad\n minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b>\n nisi ut aliquid ex ea commodi consequat. Quis aute iure\n <span style=\"color: #f00;\">reprehenderit</span>\n in <span style=\"color: #0f0;font-weight:bold;\">voluptate</span> velit\n esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat\n cupiditat non proident, sunt in culpa qui\n <a href=\"https://www.artifex.com\">officia</a> deserunt mollit anim id\n est laborum.\"\"\"\n\ndoc = pymupdf.Document()\n\npage = doc.new_page()\npage.insert_htmlbox(rect, text, css=\"* {font-family: sans-serif;font-size:14px;}\")\n\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\nimport pymupdf\nimport os\n\nfiledir = os.path.dirname(__file__)\n\ntext = \"\"\"\n<style>\nbody {\n font-family: sans-serif;\n}\n\ntd,\nth {\n border: 1px solid blue;\n border-right: none;\n border-bottom: none;\n padding: 5px;\n text-align: center;\n}\n\ntable {\n border-right: 1px solid blue;\n border-bottom: 1px solid blue;\n border-spacing: 0;\n}\n</style>\n\n<body>\n<p><b>Some Colors</b></p>\n<table>\n <tr>\n <th>Lime</th>\n <th>Lemon</th>\n <th>Image</th>\n <th>Mauve</th>\n </tr>\n <tr>\n <td>Green</td>\n <td>Yellow</td>\n <td><img src=\"img-cake.png\" width=50></td>\n <td>Between<br>Gray and Purple</td>\n </tr>\n</table>\n</body>\n\"\"\"\n\ndoc = pymupdf.Document()\n\npage = doc.new_page()\nrect = page.rect + (36, 36, -36, -36)\n\n# we must specify an Archive because of the image\npage.insert_htmlbox(rect, text, archive=pymupdf.Archive(\".\"))\n\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\nimport pymupdf\n\ngreetings = (\n    \"Hello, World!\",  # english\n    \"Hallo, Welt!\",  # german\n    \"سلام دنیا!\",  # persian\n    \"வணக்கம், உலகம்!\",  # tamil\n    \"สวัสดีชาวโลก!\",  # thai\n    \"Привіт Світ!\",  # ucranian\n    \"שלום עולם!\",  # hebrew\n    \"ওহে বিশ্ব!\",  # bengali\n    \"你好世界！\",  # chinese\n    \"こんにちは世界！\",  # japanese\n    \"안녕하세요, 월드!\",  # korean\n    \"नमस्कार, विश्व !\",  # sanskrit\n    \"हैलो वर्ल्ड!\",  # hindi\n)\ndoc = pymupdf.open()\npage = doc.new_page()\nrect = (50, 50, 200, 500)\n\n# join greetings into one text string\ntext = \" ... \".join([t for t in greetings])\n\n# the output of the above is simple:\npage.insert_htmlbox(rect, text)\ndoc.save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\n\"\"\"\nHow to use your own fonts with method Page.insert_htmlbox().\n\"\"\"\nimport pymupdf\n\n# Example text\ntext = \"\"\"Lorem ipsum dolor sit amet, consectetur adipisici elit, sed\n eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad\n minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b>\n nisi ut aliquid ex ea commodi consequat. Quis aute iure\n <span style=\"color: red;\">reprehenderit</span>\n in <span style=\"color: green;font-weight:bold;\">voluptate</span> velit\n esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat\n cupiditat non proident, sunt in culpa qui\n <a href=\"https://www.artifex.com\">officia</a> deserunt mollit anim id\n est laborum.\"\"\"\n\n\"\"\"\nWe need an Archive object to show where font files are located.\nWe intend to use the font family \"MS Comic Sans\".\n\"\"\"\narch = pymupdf.Archive(\"C:/Windows/Fonts\")\n\n# These statements define which font file to use for regular, bold,\n# italic and bold-italic text.\n# We assign an arbitary common font-family for all 4 font files.\n# The Story algorithm will select the right file as required.\n# We request to use \"comic\" throughout the text.\ncss = \"\"\"\n@font-face {font-family: comic; src: url(comic.ttf);}\n@font-face {font-family: comic; src: url(comicbd.ttf);font-weight: bold;}\n@font-face {font-family: comic; src: url(comicz.ttf);font-weight: bold;font-style: italic;}\n@font-face {font-family: comic; src: url(comici.ttf);font-style: italic;}\n* {font-family: comic;}\n\"\"\"\n\ndoc = pymupdf.Document()\npage = doc.new_page(width=150, height=150)  # make small page\n\npage.insert_htmlbox(page.rect, text, css=css, archive=arch)\n\ndoc.subset_fonts(verbose=True)  # build subset fonts to reduce file size\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\n\"\"\"\nHow to use a pymupdf font with method Page.insert_htmlbox().\n\"\"\"\nimport pymupdf\n\n# Example text\ntext = \"\"\"Lorem ipsum dolor sit amet, consectetur adipisici elit, sed\n eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad\n minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b>\n nisi ut aliquid ex ea commodi consequat. Quis aute iure\n <span style=\"color: red;\">reprehenderit</span>\n in <span style=\"color: green;font-weight:bold;\">voluptate</span> velit\n esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat\n cupiditat non proident, sunt in culpa qui\n <a href=\"https://www.artifex.com\">officia</a> deserunt mollit anim id\n est laborum.\"\"\"\n\n\"\"\"\nThis is similar to font file support. However, we can use a convenience\nfunction for creating required CSS definitions.\nWe still need an Archive for finding the font binaries.\n\"\"\"\narch = pymupdf.Archive()\n\n# We request to use \"myfont\" throughout the text.\ncss = pymupdf.css_for_pymupdf_font(\"ubuntu\", archive=arch, name=\"myfont\")\ncss += \"* {font-family: myfont;text-align: justify;}\"\n\ndoc = pymupdf.Document()\n\npage = doc.new_page(width=150, height=150)\n\npage.insert_htmlbox(page.rect, text, css=css, archive=arch, rotate=90)\n\ndoc.subset_fonts(verbose=True)\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\nimport pymupdf\ndoc = pymupdf.open(...)  # new or existing PDF\npage = doc.new_page()  # new or existing page via doc[n]\np = pymupdf.Point(50, 72)  # start point of 1st line\n\ntext = \"Some text,\\nspread across\\nseveral lines.\"\n# the same result is achievable by\n# text = [\"Some text\", \"spread across\", \"several lines.\"]\n\nrc = page.insert_text(p,  # bottom-left of 1st char\n                     text,  # the text (honors '\\n')\n                     fontname = \"helv\",  # the default font\n                     fontsize = 11,  # the default font size\n                     rotate = 0,  # also available: 90, 180, 270\n                     )\nprint(\"%i lines printed on page %i.\" % (rc, page.number))\n\ndoc.save(\"text.pdf\") \n```", "```py\nimport pymupdf\ndoc = pymupdf.open()\npage = doc.new_page()\n# the text strings, each having 3 lines\ntext1 = \"rotate=0\\nLine 2\\nLine 3\"\ntext2 = \"rotate=90\\nLine 2\\nLine 3\"\ntext3 = \"rotate=-90\\nLine 2\\nLine 3\"\ntext4 = \"rotate=180\\nLine 2\\nLine 3\"\nred = (1, 0, 0) # the color for the red dots\n# the insertion points, each with a 25 pix distance from the corners\np1 = pymupdf.Point(25, 25)\np2 = pymupdf.Point(page.rect.width - 25, 25)\np3 = pymupdf.Point(25, page.rect.height - 25)\np4 = pymupdf.Point(page.rect.width - 25, page.rect.height - 25)\n# create a Shape to draw on\nshape = page.new_shape()\n\n# draw the insertion points as red, filled dots\nshape.draw_circle(p1,1)\nshape.draw_circle(p2,1)\nshape.draw_circle(p3,1)\nshape.draw_circle(p4,1)\nshape.finish(width=0.3, color=red, fill=red)\n\n# insert the text strings\nshape.insert_text(p1, text1)\nshape.insert_text(p3, text2, rotate=90)\nshape.insert_text(p2, text3, rotate=-90)\nshape.insert_text(p4, text4, rotate=180)\n\n# store our work to the page\nshape.commit()\ndoc.save(...) \n```", "```py\nimport pymupdf\n\ndoc = pymupdf.open()  # new or existing PDF\npage = doc.new_page()  # new page, or choose doc[n]\n\n# write in this overall area\nrect = pymupdf.Rect(100, 100, 300, 150)\n\n# partition the area in 4 equal sub-rectangles\nCELLS = pymupdf.make_table(rect, cols=4, rows=1)\n\nt1 = \"text with rotate = 0.\"  # these texts we will written\nt2 = \"text with rotate = 90.\"\nt3 = \"text with rotate = 180.\"\nt4 = \"text with rotate = 270.\"\ntext = [t1, t2, t3, t4]\nred = pymupdf.pdfcolor[\"red\"]  # some colors\ngold = pymupdf.pdfcolor[\"gold\"]\nblue = pymupdf.pdfcolor[\"blue\"]\n\"\"\"\nWe use a Shape object (something like a canvas) to output the text and\nthe rectangles surrounding it for demonstration.\n\"\"\"\nshape = page.new_shape()  # create Shape\nfor i in range(len(CELLS[0])):\n    shape.draw_rect(CELLS[0][i])  # draw rectangle\n    shape.insert_textbox(\n        CELLS[0][i], text[i], fontname=\"hebo\", color=blue, rotate=90 * i\n    )\n\nshape.finish(width=0.3, color=red, fill=gold)\n\nshape.commit()  # write all stuff to the page\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\nimport pymupdf\n\nrect = pymupdf.Rect(100, 100, 400, 300)\n\ntext = \"\"\"Lorem ipsum dolor sit amet, consectetur adipisici elit, sed\n eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad\n minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b>\n nisi ut aliquid ex ea commodi consequat. Quis aute iure\n <span style=\"color: #f00;\">reprehenderit</span>\n in <span style=\"color: #0f0;font-weight:bold;\">voluptate</span> velit\n esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat\n cupiditat non proident, sunt in culpa qui\n <a href=\"https://www.artifex.com\">officia</a> deserunt mollit anim id\n est laborum.\"\"\"\n\ndoc = pymupdf.Document()\n\npage = doc.new_page()\npage.insert_htmlbox(rect, text, css=\"* {font-family: sans-serif;font-size:14px;}\")\n\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\nimport pymupdf\nimport os\n\nfiledir = os.path.dirname(__file__)\n\ntext = \"\"\"\n<style>\nbody {\n font-family: sans-serif;\n}\n\ntd,\nth {\n border: 1px solid blue;\n border-right: none;\n border-bottom: none;\n padding: 5px;\n text-align: center;\n}\n\ntable {\n border-right: 1px solid blue;\n border-bottom: 1px solid blue;\n border-spacing: 0;\n}\n</style>\n\n<body>\n<p><b>Some Colors</b></p>\n<table>\n <tr>\n <th>Lime</th>\n <th>Lemon</th>\n <th>Image</th>\n <th>Mauve</th>\n </tr>\n <tr>\n <td>Green</td>\n <td>Yellow</td>\n <td><img src=\"img-cake.png\" width=50></td>\n <td>Between<br>Gray and Purple</td>\n </tr>\n</table>\n</body>\n\"\"\"\n\ndoc = pymupdf.Document()\n\npage = doc.new_page()\nrect = page.rect + (36, 36, -36, -36)\n\n# we must specify an Archive because of the image\npage.insert_htmlbox(rect, text, archive=pymupdf.Archive(\".\"))\n\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\nimport pymupdf\n\ngreetings = (\n    \"Hello, World!\",  # english\n    \"Hallo, Welt!\",  # german\n    \"سلام دنیا!\",  # persian\n    \"வணக்கம், உலகம்!\",  # tamil\n    \"สวัสดีชาวโลก!\",  # thai\n    \"Привіт Світ!\",  # ucranian\n    \"שלום עולם!\",  # hebrew\n    \"ওহে বিশ্ব!\",  # bengali\n    \"你好世界！\",  # chinese\n    \"こんにちは世界！\",  # japanese\n    \"안녕하세요, 월드!\",  # korean\n    \"नमस्कार, विश्व !\",  # sanskrit\n    \"हैलो वर्ल्ड!\",  # hindi\n)\ndoc = pymupdf.open()\npage = doc.new_page()\nrect = (50, 50, 200, 500)\n\n# join greetings into one text string\ntext = \" ... \".join([t for t in greetings])\n\n# the output of the above is simple:\npage.insert_htmlbox(rect, text)\ndoc.save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\n\"\"\"\nHow to use your own fonts with method Page.insert_htmlbox().\n\"\"\"\nimport pymupdf\n\n# Example text\ntext = \"\"\"Lorem ipsum dolor sit amet, consectetur adipisici elit, sed\n eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad\n minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b>\n nisi ut aliquid ex ea commodi consequat. Quis aute iure\n <span style=\"color: red;\">reprehenderit</span>\n in <span style=\"color: green;font-weight:bold;\">voluptate</span> velit\n esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat\n cupiditat non proident, sunt in culpa qui\n <a href=\"https://www.artifex.com\">officia</a> deserunt mollit anim id\n est laborum.\"\"\"\n\n\"\"\"\nWe need an Archive object to show where font files are located.\nWe intend to use the font family \"MS Comic Sans\".\n\"\"\"\narch = pymupdf.Archive(\"C:/Windows/Fonts\")\n\n# These statements define which font file to use for regular, bold,\n# italic and bold-italic text.\n# We assign an arbitary common font-family for all 4 font files.\n# The Story algorithm will select the right file as required.\n# We request to use \"comic\" throughout the text.\ncss = \"\"\"\n@font-face {font-family: comic; src: url(comic.ttf);}\n@font-face {font-family: comic; src: url(comicbd.ttf);font-weight: bold;}\n@font-face {font-family: comic; src: url(comicz.ttf);font-weight: bold;font-style: italic;}\n@font-face {font-family: comic; src: url(comici.ttf);font-style: italic;}\n* {font-family: comic;}\n\"\"\"\n\ndoc = pymupdf.Document()\npage = doc.new_page(width=150, height=150)  # make small page\n\npage.insert_htmlbox(page.rect, text, css=css, archive=arch)\n\ndoc.subset_fonts(verbose=True)  # build subset fonts to reduce file size\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\n\"\"\"\nHow to use a pymupdf font with method Page.insert_htmlbox().\n\"\"\"\nimport pymupdf\n\n# Example text\ntext = \"\"\"Lorem ipsum dolor sit amet, consectetur adipisici elit, sed\n eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad\n minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b>\n nisi ut aliquid ex ea commodi consequat. Quis aute iure\n <span style=\"color: red;\">reprehenderit</span>\n in <span style=\"color: green;font-weight:bold;\">voluptate</span> velit\n esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat\n cupiditat non proident, sunt in culpa qui\n <a href=\"https://www.artifex.com\">officia</a> deserunt mollit anim id\n est laborum.\"\"\"\n\n\"\"\"\nThis is similar to font file support. However, we can use a convenience\nfunction for creating required CSS definitions.\nWe still need an Archive for finding the font binaries.\n\"\"\"\narch = pymupdf.Archive()\n\n# We request to use \"myfont\" throughout the text.\ncss = pymupdf.css_for_pymupdf_font(\"ubuntu\", archive=arch, name=\"myfont\")\ncss += \"* {font-family: myfont;text-align: justify;}\"\n\ndoc = pymupdf.Document()\n\npage = doc.new_page(width=150, height=150)\n\npage.insert_htmlbox(page.rect, text, css=css, archive=arch, rotate=90)\n\ndoc.subset_fonts(verbose=True)\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\nimport pymupdf\nimport os\n\nfiledir = os.path.dirname(__file__)\n\ntext = \"\"\"\n<style>\nbody {\n font-family: sans-serif;\n}\n\ntd,\nth {\n border: 1px solid blue;\n border-right: none;\n border-bottom: none;\n padding: 5px;\n text-align: center;\n}\n\ntable {\n border-right: 1px solid blue;\n border-bottom: 1px solid blue;\n border-spacing: 0;\n}\n</style>\n\n<body>\n<p><b>Some Colors</b></p>\n<table>\n <tr>\n <th>Lime</th>\n <th>Lemon</th>\n <th>Image</th>\n <th>Mauve</th>\n </tr>\n <tr>\n <td>Green</td>\n <td>Yellow</td>\n <td><img src=\"img-cake.png\" width=50></td>\n <td>Between<br>Gray and Purple</td>\n </tr>\n</table>\n</body>\n\"\"\"\n\ndoc = pymupdf.Document()\n\npage = doc.new_page()\nrect = page.rect + (36, 36, -36, -36)\n\n# we must specify an Archive because of the image\npage.insert_htmlbox(rect, text, archive=pymupdf.Archive(\".\"))\n\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\nimport pymupdf\n\ngreetings = (\n    \"Hello, World!\",  # english\n    \"Hallo, Welt!\",  # german\n    \"سلام دنیا!\",  # persian\n    \"வணக்கம், உலகம்!\",  # tamil\n    \"สวัสดีชาวโลก!\",  # thai\n    \"Привіт Світ!\",  # ucranian\n    \"שלום עולם!\",  # hebrew\n    \"ওহে বিশ্ব!\",  # bengali\n    \"你好世界！\",  # chinese\n    \"こんにちは世界！\",  # japanese\n    \"안녕하세요, 월드!\",  # korean\n    \"नमस्कार, विश्व !\",  # sanskrit\n    \"हैलो वर्ल्ड!\",  # hindi\n)\ndoc = pymupdf.open()\npage = doc.new_page()\nrect = (50, 50, 200, 500)\n\n# join greetings into one text string\ntext = \" ... \".join([t for t in greetings])\n\n# the output of the above is simple:\npage.insert_htmlbox(rect, text)\ndoc.save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\n\"\"\"\nHow to use your own fonts with method Page.insert_htmlbox().\n\"\"\"\nimport pymupdf\n\n# Example text\ntext = \"\"\"Lorem ipsum dolor sit amet, consectetur adipisici elit, sed\n eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad\n minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b>\n nisi ut aliquid ex ea commodi consequat. Quis aute iure\n <span style=\"color: red;\">reprehenderit</span>\n in <span style=\"color: green;font-weight:bold;\">voluptate</span> velit\n esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat\n cupiditat non proident, sunt in culpa qui\n <a href=\"https://www.artifex.com\">officia</a> deserunt mollit anim id\n est laborum.\"\"\"\n\n\"\"\"\nWe need an Archive object to show where font files are located.\nWe intend to use the font family \"MS Comic Sans\".\n\"\"\"\narch = pymupdf.Archive(\"C:/Windows/Fonts\")\n\n# These statements define which font file to use for regular, bold,\n# italic and bold-italic text.\n# We assign an arbitary common font-family for all 4 font files.\n# The Story algorithm will select the right file as required.\n# We request to use \"comic\" throughout the text.\ncss = \"\"\"\n@font-face {font-family: comic; src: url(comic.ttf);}\n@font-face {font-family: comic; src: url(comicbd.ttf);font-weight: bold;}\n@font-face {font-family: comic; src: url(comicz.ttf);font-weight: bold;font-style: italic;}\n@font-face {font-family: comic; src: url(comici.ttf);font-style: italic;}\n* {font-family: comic;}\n\"\"\"\n\ndoc = pymupdf.Document()\npage = doc.new_page(width=150, height=150)  # make small page\n\npage.insert_htmlbox(page.rect, text, css=css, archive=arch)\n\ndoc.subset_fonts(verbose=True)  # build subset fonts to reduce file size\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\n\"\"\"\nHow to use a pymupdf font with method Page.insert_htmlbox().\n\"\"\"\nimport pymupdf\n\n# Example text\ntext = \"\"\"Lorem ipsum dolor sit amet, consectetur adipisici elit, sed\n eiusmod tempor incidunt ut labore et dolore magna aliqua. Ut enim ad\n minim veniam, quis nostrud exercitation <b>ullamco <i>laboris</i></b>\n nisi ut aliquid ex ea commodi consequat. Quis aute iure\n <span style=\"color: red;\">reprehenderit</span>\n in <span style=\"color: green;font-weight:bold;\">voluptate</span> velit\n esse cillum dolore eu fugiat nulla pariatur. Excepteur sint obcaecat\n cupiditat non proident, sunt in culpa qui\n <a href=\"https://www.artifex.com\">officia</a> deserunt mollit anim id\n est laborum.\"\"\"\n\n\"\"\"\nThis is similar to font file support. However, we can use a convenience\nfunction for creating required CSS definitions.\nWe still need an Archive for finding the font binaries.\n\"\"\"\narch = pymupdf.Archive()\n\n# We request to use \"myfont\" throughout the text.\ncss = pymupdf.css_for_pymupdf_font(\"ubuntu\", archive=arch, name=\"myfont\")\ncss += \"* {font-family: myfont;text-align: justify;}\"\n\ndoc = pymupdf.Document()\n\npage = doc.new_page(width=150, height=150)\n\npage.insert_htmlbox(page.rect, text, css=css, archive=arch, rotate=90)\n\ndoc.subset_fonts(verbose=True)\ndoc.ez_save(__file__.replace(\".py\", \".pdf\")) \n```", "```py\nfor page in doc:\n    text_blocks = page.get_text(\"dict\", flags=pymupdf.TEXTFLAGS_TEXT)[\"blocks\"]\n    for block in text_blocks:\n        for line in block[\"lines\"]:\n            for span in line[\"spans\"]:\n                text = span[\"text\"]\n                color = pymupdf.sRGB_to_rgb(span[\"color\"])\n                print(f\"Text: {text}, Color: {color}\") \n```"]