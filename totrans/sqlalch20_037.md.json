["```py\nfrom sqlalchemy import ForeignKey\n\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    parent_id: Mapped[int] = mapped_column(primary_key=True)\n\n    # use a list\n    children: Mapped[List[\"Child\"]] = relationship()\n\nclass Child(Base):\n    __tablename__ = \"child\"\n\n    child_id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent.id\"))\n```", "```py\nfrom typing import Set\nfrom sqlalchemy import ForeignKey\n\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    parent_id: Mapped[int] = mapped_column(primary_key=True)\n\n    # use a set\n    children: Mapped[Set[\"Child\"]] = relationship()\n\nclass Child(Base):\n    __tablename__ = \"child\"\n\n    child_id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent.id\"))\n```", "```py\nfrom typing import List\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    parent_id: Mapped[int] = mapped_column(primary_key=True)\n\n    # use a List, Python 3.8 and earlier\n    children: Mapped[List[\"Child\"]] = relationship()\n```", "```py\n# non-annotated mapping\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    parent_id = mapped_column(Integer, primary_key=True)\n\n    children = relationship(\"Child\", collection_class=set)\n\nclass Child(Base):\n    __tablename__ = \"child\"\n\n    child_id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(ForeignKey(\"parent.id\"))\n```", "```py\nfrom typing import Dict\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import attribute_keyed_dict\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Item(Base):\n    __tablename__ = \"item\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    notes: Mapped[Dict[str, \"Note\"]] = relationship(\n        collection_class=attribute_keyed_dict(\"keyword\"),\n        cascade=\"all, delete-orphan\",\n    )\n\nclass Note(Base):\n    __tablename__ = \"note\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    item_id: Mapped[int] = mapped_column(ForeignKey(\"item.id\"))\n    keyword: Mapped[str]\n    text: Mapped[Optional[str]]\n\n    def __init__(self, keyword: str, text: str):\n        self.keyword = keyword\n        self.text = text\n```", "```py\n>>> item = Item()\n>>> item.notes[\"a\"] = Note(\"a\", \"atext\")\n>>> item.notes.items()\n{'a': <__main__.Note object at 0x2eaaf0>}\n```", "```py\nitem = Item()\nitem.notes = {\n    \"a\": Note(\"a\", \"atext\"),\n    \"b\": Note(\"b\", \"btext\"),\n}\n```", "```py\nclass Item(Base):\n    __tablename__ = \"item\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    notes: Mapped[Dict[str, \"Note\"]] = relationship(\n        collection_class=attribute_keyed_dict(\"note_key\"),\n        back_populates=\"item\",\n        cascade=\"all, delete-orphan\",\n    )\n\nclass Note(Base):\n    __tablename__ = \"note\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    item_id: Mapped[int] = mapped_column(ForeignKey(\"item.id\"))\n    keyword: Mapped[str]\n    text: Mapped[str]\n\n    item: Mapped[\"Item\"] = relationship()\n\n    @property\n    def note_key(self):\n        return (self.keyword, self.text[0:10])\n\n    def __init__(self, keyword: str, text: str):\n        self.keyword = keyword\n        self.text = text\n```", "```py\n>>> item = Item()\n>>> n1 = Note(\"a\", \"atext\")\n>>> n1.item = item\n>>> item.notes\n{('a', 'atext'): <__main__.Note object at 0x2eaaf0>}\n```", "```py\nfrom sqlalchemy.orm import column_keyed_dict\n\nclass Item(Base):\n    __tablename__ = \"item\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    notes: Mapped[Dict[str, \"Note\"]] = relationship(\n        collection_class=column_keyed_dict(Note.__table__.c.keyword),\n        cascade=\"all, delete-orphan\",\n    )\n```", "```py\nfrom sqlalchemy.orm import mapped_collection\n\nclass Item(Base):\n    __tablename__ = \"item\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    notes: Mapped[Dict[str, \"Note\"]] = relationship(\n        collection_class=mapped_collection(lambda note: note.text[0:10]),\n        cascade=\"all, delete-orphan\",\n    )\n```", "```py\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    bs: Mapped[Dict[str, \"B\"]] = relationship(\n        collection_class=attribute_keyed_dict(\"data\"),\n        back_populates=\"a\",\n    )\n\nclass B(Base):\n    __tablename__ = \"b\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    a_id: Mapped[int] = mapped_column(ForeignKey(\"a.id\"))\n    data: Mapped[str]\n\n    a: Mapped[\"A\"] = relationship(back_populates=\"bs\")\n```", "```py\n>>> a1 = A()\n>>> b1 = B(a=a1)\n>>> a1.bs\n{None: <test3.B object at 0x7f7b1023ef70>}\n```", "```py\n>>> b1.data = \"the key\"\n>>> a1.bs\n{None: <test3.B object at 0x7f7b1023ef70>}\n```", "```py\n>>> B(a=a1, data=\"the key\")\n<test3.B object at 0x7f7b10114280>\n>>> a1.bs\n{None: <test3.B object at 0x7f7b10114280>}\n```", "```py\n>>> B(data=\"the key\", a=a1)\n<test3.B object at 0x7f7b10114340>\n>>> a1.bs\n{'the key': <test3.B object at 0x7f7b10114340>}\n```", "```py\nfrom sqlalchemy import event\nfrom sqlalchemy.orm import attributes\n\n@event.listens_for(B.data, \"set\")\ndef set_item(obj, value, previous, initiator):\n    if obj.a is not None:\n        previous = None if previous == attributes.NO_VALUE else previous\n        obj.a.bs[value] = obj\n        obj.a.bs.pop(previous)\n```", "```py\nclass ListLike:\n    def __init__(self):\n        self.data = []\n\n    def append(self, item):\n        self.data.append(item)\n\n    def remove(self, item):\n        self.data.remove(item)\n\n    def extend(self, items):\n        self.data.extend(items)\n\n    def __iter__(self):\n        return iter(self.data)\n\n    def foo(self):\n        return \"foo\"\n```", "```py\nclass SetLike:\n    __emulates__ = set\n\n    def __init__(self):\n        self.data = set()\n\n    def append(self, item):\n        self.data.add(item)\n\n    def remove(self, item):\n        self.data.remove(item)\n\n    def __iter__(self):\n        return iter(self.data)\n```", "```py\nfrom sqlalchemy.orm.collections import collection\n\nclass SetLike:\n    __emulates__ = set\n\n    def __init__(self):\n        self.data = set()\n\n    @collection.appender\n    def append(self, item):\n        self.data.add(item)\n\n    def remove(self, item):\n        self.data.remove(item)\n\n    def __iter__(self):\n        return iter(self.data)\n```", "```py\nfrom sqlalchemy.orm.collections import collection\n\nclass MyList(list):\n    @collection.remover\n    def zark(self, item):\n        # do something special...\n        ...\n\n    @collection.iterator\n    def hey_use_this_instead_for_iteration(self): ...\n```", "```py\nfrom sqlalchemy.orm.collections import KeyFuncDict\n\nclass MyNodeMap(KeyFuncDict):\n  \"\"\"Holds 'Node' objects, keyed by the 'name' attribute.\"\"\"\n\n    def __init__(self, *args, **kw):\n        super().__init__(keyfunc=lambda node: node.name)\n        dict.__init__(self, *args, **kw)\n```", "```py\nfrom sqlalchemy.orm.collections import KeyFuncDict, collection\n\nclass MyKeyFuncDict(KeyFuncDict):\n  \"\"\"Use @internally_instrumented when your methods\n call down to already-instrumented methods.\n\n \"\"\"\n\n    @collection.internally_instrumented\n    def __setitem__(self, key, value, _sa_initiator=None):\n        # do something with key, value\n        super(MyKeyFuncDict, self).__setitem__(key, value, _sa_initiator)\n\n    @collection.internally_instrumented\n    def __delitem__(self, key, _sa_initiator=None):\n        # do something with key\n        super(MyKeyFuncDict, self).__delitem__(key, _sa_initiator)\n```", "```py\nclass MyAwesomeList(some.great.library.AwesomeList):\n    pass\n\n# ... relationship(..., collection_class=MyAwesomeList)\n```", "```py\nfunction sqlalchemy.orm.attribute_keyed_dict(attr_name: str, *, ignore_unpopulated_attribute: bool = False) \u2192 Type[KeyFuncDict[Any, Any]]\n```", "```py\nfunction sqlalchemy.orm.column_keyed_dict(mapping_spec: Type[_KT] | Callable[[_KT], _VT], *, ignore_unpopulated_attribute: bool = False) \u2192 Type[KeyFuncDict[_KT, _KT]]\n```", "```py\nfunction sqlalchemy.orm.keyfunc_mapping(keyfunc: _F, *, ignore_unpopulated_attribute: bool = False) \u2192 Type[KeyFuncDict[_KT, Any]]\n```", "```py\nsqlalchemy.orm.attribute_mapped_collection = <function attribute_keyed_dict>\n```", "```py\nsqlalchemy.orm.column_mapped_collection = <function column_keyed_dict>\n```", "```py\nsqlalchemy.orm.mapped_collection = <function keyfunc_mapping>\n```", "```py\nclass sqlalchemy.orm.KeyFuncDict\n```", "```py\nmethod __init__(keyfunc: _F, *dict_args: Any, ignore_unpopulated_attribute: bool = False) \u2192 None\n```", "```py\nmethod clear() \u2192 None.\u00a0 Remove all items from D.\n```", "```py\nmethod pop(k[, d]) \u2192 v, remove specified key and return the corresponding value.\n```", "```py\nmethod popitem()\n```", "```py\nmethod remove(value: _KT, _sa_initiator: AttributeEventToken | Literal[None, False] = None) \u2192 None\n```", "```py\nmethod set(value: _KT, _sa_initiator: AttributeEventToken | Literal[None, False] = None) \u2192 None\n```", "```py\nmethod setdefault(key, default=None)\n```", "```py\nmethod update([E, ]**F) \u2192 None.\u00a0 Update D from dict/iterable E and F.\n```", "```py\nsqlalchemy.orm.MappedCollection = <class 'sqlalchemy.orm.mapped_collection.KeyFuncDict'>\n```", "```py\nfunction sqlalchemy.orm.collections.bulk_replace(values, existing_adapter, new_adapter, initiator=None)\n```", "```py\nclass sqlalchemy.orm.collections.collection\n```", "```py\n@collection.appender\ndef append(self, append): ...\n```", "```py\n@collection.adds('entity')\ndef insert(self, position, entity): ...\n\n@collection.removes_return()\ndef popitem(self): ...\n```", "```py\nmethod static adds(arg)\n```", "```py\n@collection.adds(1)\ndef push(self, item): ...\n\n@collection.adds('entity')\ndef do_stuff(self, thing, entity=None): ...\n```", "```py\nmethod static appender(fn)\n```", "```py\n@collection.appender\ndef add(self, append): ...\n\n# or, equivalently\n@collection.appender\n@collection.adds(1)\ndef add(self, append): ...\n\n# for mapping type, an 'append' may kick out a previous value\n# that occupies that slot.  consider d['a'] = 'foo'- any previous\n# value in d['a'] is discarded.\n@collection.appender\n@collection.replaces(1)\ndef add(self, entity):\n    key = some_key_func(entity)\n    previous = None\n    if key in self:\n        previous = self[key]\n    self[key] = entity\n    return previous\n```", "```py\nmethod static converter(fn)\n```", "```py\nmyobj.acollection = [newvalue1, newvalue2]\n```", "```py\n@collection.converter\ndef convert(self, other): ...\n```", "```py\nmethod static internally_instrumented(fn)\n```", "```py\n# normally an 'extend' method on a list-like class would be\n# automatically intercepted and re-implemented in terms of\n# SQLAlchemy events and append().  your implementation will\n# never be called, unless:\n@collection.internally_instrumented\ndef extend(self, items): ...\n```", "```py\nmethod static iterator(fn)\n```", "```py\n@collection.iterator\ndef __iter__(self): ...\n```", "```py\nmethod static remover(fn)\n```", "```py\n@collection.remover\ndef zap(self, entity): ...\n\n# or, equivalently\n@collection.remover\n@collection.removes_return()\ndef zap(self, ): ...\n```", "```py\nmethod static removes(arg)\n```", "```py\n@collection.removes(1)\ndef zap(self, item): ...\n```", "```py\nmethod static removes_return()\n```", "```py\n@collection.removes_return()\ndef pop(self): ...\n```", "```py\nmethod static replaces(arg)\n```", "```py\n@collection.replaces(2)\ndef __setitem__(self, index, item): ...\n```", "```py\nsqlalchemy.orm.collections.collection_adapter = operator.attrgetter('_sa_adapter')\n```", "```py\nclass sqlalchemy.orm.collections.CollectionAdapter\n```", "```py\nclass sqlalchemy.orm.collections.InstrumentedDict\n```", "```py\nclass sqlalchemy.orm.collections.InstrumentedList\n```", "```py\nclass sqlalchemy.orm.collections.InstrumentedSet\n```", "```py\nfunction sqlalchemy.orm.collections.prepare_instrumentation(factory: Type[Collection[Any]] | Callable[[], _AdaptedCollectionProtocol]) \u2192 Callable[[], _AdaptedCollectionProtocol]\n```", "```py\nfrom sqlalchemy import ForeignKey\n\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    parent_id: Mapped[int] = mapped_column(primary_key=True)\n\n    # use a list\n    children: Mapped[List[\"Child\"]] = relationship()\n\nclass Child(Base):\n    __tablename__ = \"child\"\n\n    child_id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent.id\"))\n```", "```py\nfrom typing import Set\nfrom sqlalchemy import ForeignKey\n\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    parent_id: Mapped[int] = mapped_column(primary_key=True)\n\n    # use a set\n    children: Mapped[Set[\"Child\"]] = relationship()\n\nclass Child(Base):\n    __tablename__ = \"child\"\n\n    child_id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent.id\"))\n```", "```py\nfrom typing import List\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    parent_id: Mapped[int] = mapped_column(primary_key=True)\n\n    # use a List, Python 3.8 and earlier\n    children: Mapped[List[\"Child\"]] = relationship()\n```", "```py\n# non-annotated mapping\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    parent_id = mapped_column(Integer, primary_key=True)\n\n    children = relationship(\"Child\", collection_class=set)\n\nclass Child(Base):\n    __tablename__ = \"child\"\n\n    child_id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(ForeignKey(\"parent.id\"))\n```", "```py\nfrom typing import Dict\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import attribute_keyed_dict\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Item(Base):\n    __tablename__ = \"item\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    notes: Mapped[Dict[str, \"Note\"]] = relationship(\n        collection_class=attribute_keyed_dict(\"keyword\"),\n        cascade=\"all, delete-orphan\",\n    )\n\nclass Note(Base):\n    __tablename__ = \"note\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    item_id: Mapped[int] = mapped_column(ForeignKey(\"item.id\"))\n    keyword: Mapped[str]\n    text: Mapped[Optional[str]]\n\n    def __init__(self, keyword: str, text: str):\n        self.keyword = keyword\n        self.text = text\n```", "```py\n>>> item = Item()\n>>> item.notes[\"a\"] = Note(\"a\", \"atext\")\n>>> item.notes.items()\n{'a': <__main__.Note object at 0x2eaaf0>}\n```", "```py\nitem = Item()\nitem.notes = {\n    \"a\": Note(\"a\", \"atext\"),\n    \"b\": Note(\"b\", \"btext\"),\n}\n```", "```py\nclass Item(Base):\n    __tablename__ = \"item\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    notes: Mapped[Dict[str, \"Note\"]] = relationship(\n        collection_class=attribute_keyed_dict(\"note_key\"),\n        back_populates=\"item\",\n        cascade=\"all, delete-orphan\",\n    )\n\nclass Note(Base):\n    __tablename__ = \"note\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    item_id: Mapped[int] = mapped_column(ForeignKey(\"item.id\"))\n    keyword: Mapped[str]\n    text: Mapped[str]\n\n    item: Mapped[\"Item\"] = relationship()\n\n    @property\n    def note_key(self):\n        return (self.keyword, self.text[0:10])\n\n    def __init__(self, keyword: str, text: str):\n        self.keyword = keyword\n        self.text = text\n```", "```py\n>>> item = Item()\n>>> n1 = Note(\"a\", \"atext\")\n>>> n1.item = item\n>>> item.notes\n{('a', 'atext'): <__main__.Note object at 0x2eaaf0>}\n```", "```py\nfrom sqlalchemy.orm import column_keyed_dict\n\nclass Item(Base):\n    __tablename__ = \"item\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    notes: Mapped[Dict[str, \"Note\"]] = relationship(\n        collection_class=column_keyed_dict(Note.__table__.c.keyword),\n        cascade=\"all, delete-orphan\",\n    )\n```", "```py\nfrom sqlalchemy.orm import mapped_collection\n\nclass Item(Base):\n    __tablename__ = \"item\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    notes: Mapped[Dict[str, \"Note\"]] = relationship(\n        collection_class=mapped_collection(lambda note: note.text[0:10]),\n        cascade=\"all, delete-orphan\",\n    )\n```", "```py\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    bs: Mapped[Dict[str, \"B\"]] = relationship(\n        collection_class=attribute_keyed_dict(\"data\"),\n        back_populates=\"a\",\n    )\n\nclass B(Base):\n    __tablename__ = \"b\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    a_id: Mapped[int] = mapped_column(ForeignKey(\"a.id\"))\n    data: Mapped[str]\n\n    a: Mapped[\"A\"] = relationship(back_populates=\"bs\")\n```", "```py\n>>> a1 = A()\n>>> b1 = B(a=a1)\n>>> a1.bs\n{None: <test3.B object at 0x7f7b1023ef70>}\n```", "```py\n>>> b1.data = \"the key\"\n>>> a1.bs\n{None: <test3.B object at 0x7f7b1023ef70>}\n```", "```py\n>>> B(a=a1, data=\"the key\")\n<test3.B object at 0x7f7b10114280>\n>>> a1.bs\n{None: <test3.B object at 0x7f7b10114280>}\n```", "```py\n>>> B(data=\"the key\", a=a1)\n<test3.B object at 0x7f7b10114340>\n>>> a1.bs\n{'the key': <test3.B object at 0x7f7b10114340>}\n```", "```py\nfrom sqlalchemy import event\nfrom sqlalchemy.orm import attributes\n\n@event.listens_for(B.data, \"set\")\ndef set_item(obj, value, previous, initiator):\n    if obj.a is not None:\n        previous = None if previous == attributes.NO_VALUE else previous\n        obj.a.bs[value] = obj\n        obj.a.bs.pop(previous)\n```", "```py\nfrom typing import Dict\nfrom typing import Optional\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import attribute_keyed_dict\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Item(Base):\n    __tablename__ = \"item\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    notes: Mapped[Dict[str, \"Note\"]] = relationship(\n        collection_class=attribute_keyed_dict(\"keyword\"),\n        cascade=\"all, delete-orphan\",\n    )\n\nclass Note(Base):\n    __tablename__ = \"note\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    item_id: Mapped[int] = mapped_column(ForeignKey(\"item.id\"))\n    keyword: Mapped[str]\n    text: Mapped[Optional[str]]\n\n    def __init__(self, keyword: str, text: str):\n        self.keyword = keyword\n        self.text = text\n```", "```py\n>>> item = Item()\n>>> item.notes[\"a\"] = Note(\"a\", \"atext\")\n>>> item.notes.items()\n{'a': <__main__.Note object at 0x2eaaf0>}\n```", "```py\nitem = Item()\nitem.notes = {\n    \"a\": Note(\"a\", \"atext\"),\n    \"b\": Note(\"b\", \"btext\"),\n}\n```", "```py\nclass Item(Base):\n    __tablename__ = \"item\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    notes: Mapped[Dict[str, \"Note\"]] = relationship(\n        collection_class=attribute_keyed_dict(\"note_key\"),\n        back_populates=\"item\",\n        cascade=\"all, delete-orphan\",\n    )\n\nclass Note(Base):\n    __tablename__ = \"note\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    item_id: Mapped[int] = mapped_column(ForeignKey(\"item.id\"))\n    keyword: Mapped[str]\n    text: Mapped[str]\n\n    item: Mapped[\"Item\"] = relationship()\n\n    @property\n    def note_key(self):\n        return (self.keyword, self.text[0:10])\n\n    def __init__(self, keyword: str, text: str):\n        self.keyword = keyword\n        self.text = text\n```", "```py\n>>> item = Item()\n>>> n1 = Note(\"a\", \"atext\")\n>>> n1.item = item\n>>> item.notes\n{('a', 'atext'): <__main__.Note object at 0x2eaaf0>}\n```", "```py\nfrom sqlalchemy.orm import column_keyed_dict\n\nclass Item(Base):\n    __tablename__ = \"item\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    notes: Mapped[Dict[str, \"Note\"]] = relationship(\n        collection_class=column_keyed_dict(Note.__table__.c.keyword),\n        cascade=\"all, delete-orphan\",\n    )\n```", "```py\nfrom sqlalchemy.orm import mapped_collection\n\nclass Item(Base):\n    __tablename__ = \"item\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    notes: Mapped[Dict[str, \"Note\"]] = relationship(\n        collection_class=mapped_collection(lambda note: note.text[0:10]),\n        cascade=\"all, delete-orphan\",\n    )\n```", "```py\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    bs: Mapped[Dict[str, \"B\"]] = relationship(\n        collection_class=attribute_keyed_dict(\"data\"),\n        back_populates=\"a\",\n    )\n\nclass B(Base):\n    __tablename__ = \"b\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    a_id: Mapped[int] = mapped_column(ForeignKey(\"a.id\"))\n    data: Mapped[str]\n\n    a: Mapped[\"A\"] = relationship(back_populates=\"bs\")\n```", "```py\n>>> a1 = A()\n>>> b1 = B(a=a1)\n>>> a1.bs\n{None: <test3.B object at 0x7f7b1023ef70>}\n```", "```py\n>>> b1.data = \"the key\"\n>>> a1.bs\n{None: <test3.B object at 0x7f7b1023ef70>}\n```", "```py\n>>> B(a=a1, data=\"the key\")\n<test3.B object at 0x7f7b10114280>\n>>> a1.bs\n{None: <test3.B object at 0x7f7b10114280>}\n```", "```py\n>>> B(data=\"the key\", a=a1)\n<test3.B object at 0x7f7b10114340>\n>>> a1.bs\n{'the key': <test3.B object at 0x7f7b10114340>}\n```", "```py\nfrom sqlalchemy import event\nfrom sqlalchemy.orm import attributes\n\n@event.listens_for(B.data, \"set\")\ndef set_item(obj, value, previous, initiator):\n    if obj.a is not None:\n        previous = None if previous == attributes.NO_VALUE else previous\n        obj.a.bs[value] = obj\n        obj.a.bs.pop(previous)\n```", "```py\nclass A(Base):\n    __tablename__ = \"a\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n\n    bs: Mapped[Dict[str, \"B\"]] = relationship(\n        collection_class=attribute_keyed_dict(\"data\"),\n        back_populates=\"a\",\n    )\n\nclass B(Base):\n    __tablename__ = \"b\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    a_id: Mapped[int] = mapped_column(ForeignKey(\"a.id\"))\n    data: Mapped[str]\n\n    a: Mapped[\"A\"] = relationship(back_populates=\"bs\")\n```", "```py\n>>> a1 = A()\n>>> b1 = B(a=a1)\n>>> a1.bs\n{None: <test3.B object at 0x7f7b1023ef70>}\n```", "```py\n>>> b1.data = \"the key\"\n>>> a1.bs\n{None: <test3.B object at 0x7f7b1023ef70>}\n```", "```py\n>>> B(a=a1, data=\"the key\")\n<test3.B object at 0x7f7b10114280>\n>>> a1.bs\n{None: <test3.B object at 0x7f7b10114280>}\n```", "```py\n>>> B(data=\"the key\", a=a1)\n<test3.B object at 0x7f7b10114340>\n>>> a1.bs\n{'the key': <test3.B object at 0x7f7b10114340>}\n```", "```py\nfrom sqlalchemy import event\nfrom sqlalchemy.orm import attributes\n\n@event.listens_for(B.data, \"set\")\ndef set_item(obj, value, previous, initiator):\n    if obj.a is not None:\n        previous = None if previous == attributes.NO_VALUE else previous\n        obj.a.bs[value] = obj\n        obj.a.bs.pop(previous)\n```", "```py\nclass ListLike:\n    def __init__(self):\n        self.data = []\n\n    def append(self, item):\n        self.data.append(item)\n\n    def remove(self, item):\n        self.data.remove(item)\n\n    def extend(self, items):\n        self.data.extend(items)\n\n    def __iter__(self):\n        return iter(self.data)\n\n    def foo(self):\n        return \"foo\"\n```", "```py\nclass SetLike:\n    __emulates__ = set\n\n    def __init__(self):\n        self.data = set()\n\n    def append(self, item):\n        self.data.add(item)\n\n    def remove(self, item):\n        self.data.remove(item)\n\n    def __iter__(self):\n        return iter(self.data)\n```", "```py\nfrom sqlalchemy.orm.collections import collection\n\nclass SetLike:\n    __emulates__ = set\n\n    def __init__(self):\n        self.data = set()\n\n    @collection.appender\n    def append(self, item):\n        self.data.add(item)\n\n    def remove(self, item):\n        self.data.remove(item)\n\n    def __iter__(self):\n        return iter(self.data)\n```", "```py\nfrom sqlalchemy.orm.collections import collection\n\nclass MyList(list):\n    @collection.remover\n    def zark(self, item):\n        # do something special...\n        ...\n\n    @collection.iterator\n    def hey_use_this_instead_for_iteration(self): ...\n```", "```py\nfrom sqlalchemy.orm.collections import KeyFuncDict\n\nclass MyNodeMap(KeyFuncDict):\n  \"\"\"Holds 'Node' objects, keyed by the 'name' attribute.\"\"\"\n\n    def __init__(self, *args, **kw):\n        super().__init__(keyfunc=lambda node: node.name)\n        dict.__init__(self, *args, **kw)\n```", "```py\nfrom sqlalchemy.orm.collections import KeyFuncDict, collection\n\nclass MyKeyFuncDict(KeyFuncDict):\n  \"\"\"Use @internally_instrumented when your methods\n call down to already-instrumented methods.\n\n \"\"\"\n\n    @collection.internally_instrumented\n    def __setitem__(self, key, value, _sa_initiator=None):\n        # do something with key, value\n        super(MyKeyFuncDict, self).__setitem__(key, value, _sa_initiator)\n\n    @collection.internally_instrumented\n    def __delitem__(self, key, _sa_initiator=None):\n        # do something with key\n        super(MyKeyFuncDict, self).__delitem__(key, _sa_initiator)\n```", "```py\nclass MyAwesomeList(some.great.library.AwesomeList):\n    pass\n\n# ... relationship(..., collection_class=MyAwesomeList)\n```", "```py\nfrom sqlalchemy.orm.collections import collection\n\nclass SetLike:\n    __emulates__ = set\n\n    def __init__(self):\n        self.data = set()\n\n    @collection.appender\n    def append(self, item):\n        self.data.add(item)\n\n    def remove(self, item):\n        self.data.remove(item)\n\n    def __iter__(self):\n        return iter(self.data)\n```", "```py\nfrom sqlalchemy.orm.collections import collection\n\nclass MyList(list):\n    @collection.remover\n    def zark(self, item):\n        # do something special...\n        ...\n\n    @collection.iterator\n    def hey_use_this_instead_for_iteration(self): ...\n```", "```py\nfrom sqlalchemy.orm.collections import KeyFuncDict\n\nclass MyNodeMap(KeyFuncDict):\n  \"\"\"Holds 'Node' objects, keyed by the 'name' attribute.\"\"\"\n\n    def __init__(self, *args, **kw):\n        super().__init__(keyfunc=lambda node: node.name)\n        dict.__init__(self, *args, **kw)\n```", "```py\nfrom sqlalchemy.orm.collections import KeyFuncDict, collection\n\nclass MyKeyFuncDict(KeyFuncDict):\n  \"\"\"Use @internally_instrumented when your methods\n call down to already-instrumented methods.\n\n \"\"\"\n\n    @collection.internally_instrumented\n    def __setitem__(self, key, value, _sa_initiator=None):\n        # do something with key, value\n        super(MyKeyFuncDict, self).__setitem__(key, value, _sa_initiator)\n\n    @collection.internally_instrumented\n    def __delitem__(self, key, _sa_initiator=None):\n        # do something with key\n        super(MyKeyFuncDict, self).__delitem__(key, _sa_initiator)\n```", "```py\nclass MyAwesomeList(some.great.library.AwesomeList):\n    pass\n\n# ... relationship(..., collection_class=MyAwesomeList)\n```", "```py\nfunction sqlalchemy.orm.attribute_keyed_dict(attr_name: str, *, ignore_unpopulated_attribute: bool = False) \u2192 Type[KeyFuncDict[Any, Any]]\n```", "```py\nfunction sqlalchemy.orm.column_keyed_dict(mapping_spec: Type[_KT] | Callable[[_KT], _VT], *, ignore_unpopulated_attribute: bool = False) \u2192 Type[KeyFuncDict[_KT, _KT]]\n```", "```py\nfunction sqlalchemy.orm.keyfunc_mapping(keyfunc: _F, *, ignore_unpopulated_attribute: bool = False) \u2192 Type[KeyFuncDict[_KT, Any]]\n```", "```py\nsqlalchemy.orm.attribute_mapped_collection = <function attribute_keyed_dict>\n```", "```py\nsqlalchemy.orm.column_mapped_collection = <function column_keyed_dict>\n```", "```py\nsqlalchemy.orm.mapped_collection = <function keyfunc_mapping>\n```", "```py\nclass sqlalchemy.orm.KeyFuncDict\n```", "```py\nmethod __init__(keyfunc: _F, *dict_args: Any, ignore_unpopulated_attribute: bool = False) \u2192 None\n```", "```py\nmethod clear() \u2192 None.\u00a0 Remove all items from D.\n```", "```py\nmethod pop(k[, d]) \u2192 v, remove specified key and return the corresponding value.\n```", "```py\nmethod popitem()\n```", "```py\nmethod remove(value: _KT, _sa_initiator: AttributeEventToken | Literal[None, False] = None) \u2192 None\n```", "```py\nmethod set(value: _KT, _sa_initiator: AttributeEventToken | Literal[None, False] = None) \u2192 None\n```", "```py\nmethod setdefault(key, default=None)\n```", "```py\nmethod update([E, ]**F) \u2192 None.\u00a0 Update D from dict/iterable E and F.\n```", "```py\nsqlalchemy.orm.MappedCollection = <class 'sqlalchemy.orm.mapped_collection.KeyFuncDict'>\n```", "```py\nfunction sqlalchemy.orm.collections.bulk_replace(values, existing_adapter, new_adapter, initiator=None)\n```", "```py\nclass sqlalchemy.orm.collections.collection\n```", "```py\n@collection.appender\ndef append(self, append): ...\n```", "```py\n@collection.adds('entity')\ndef insert(self, position, entity): ...\n\n@collection.removes_return()\ndef popitem(self): ...\n```", "```py\nmethod static adds(arg)\n```", "```py\n@collection.adds(1)\ndef push(self, item): ...\n\n@collection.adds('entity')\ndef do_stuff(self, thing, entity=None): ...\n```", "```py\nmethod static appender(fn)\n```", "```py\n@collection.appender\ndef add(self, append): ...\n\n# or, equivalently\n@collection.appender\n@collection.adds(1)\ndef add(self, append): ...\n\n# for mapping type, an 'append' may kick out a previous value\n# that occupies that slot.  consider d['a'] = 'foo'- any previous\n# value in d['a'] is discarded.\n@collection.appender\n@collection.replaces(1)\ndef add(self, entity):\n    key = some_key_func(entity)\n    previous = None\n    if key in self:\n        previous = self[key]\n    self[key] = entity\n    return previous\n```", "```py\nmethod static converter(fn)\n```", "```py\nmyobj.acollection = [newvalue1, newvalue2]\n```", "```py\n@collection.converter\ndef convert(self, other): ...\n```", "```py\nmethod static internally_instrumented(fn)\n```", "```py\n# normally an 'extend' method on a list-like class would be\n# automatically intercepted and re-implemented in terms of\n# SQLAlchemy events and append().  your implementation will\n# never be called, unless:\n@collection.internally_instrumented\ndef extend(self, items): ...\n```", "```py\nmethod static iterator(fn)\n```", "```py\n@collection.iterator\ndef __iter__(self): ...\n```", "```py\nmethod static remover(fn)\n```", "```py\n@collection.remover\ndef zap(self, entity): ...\n\n# or, equivalently\n@collection.remover\n@collection.removes_return()\ndef zap(self, ): ...\n```", "```py\nmethod static removes(arg)\n```", "```py\n@collection.removes(1)\ndef zap(self, item): ...\n```", "```py\nmethod static removes_return()\n```", "```py\n@collection.removes_return()\ndef pop(self): ...\n```", "```py\nmethod static replaces(arg)\n```", "```py\n@collection.replaces(2)\ndef __setitem__(self, index, item): ...\n```", "```py\nsqlalchemy.orm.collections.collection_adapter = operator.attrgetter('_sa_adapter')\n```", "```py\nclass sqlalchemy.orm.collections.CollectionAdapter\n```", "```py\nclass sqlalchemy.orm.collections.InstrumentedDict\n```", "```py\nclass sqlalchemy.orm.collections.InstrumentedList\n```", "```py\nclass sqlalchemy.orm.collections.InstrumentedSet\n```", "```py\nfunction sqlalchemy.orm.collections.prepare_instrumentation(factory: Type[Collection[Any]] | Callable[[], _AdaptedCollectionProtocol]) \u2192 Callable[[], _AdaptedCollectionProtocol]\n```"]