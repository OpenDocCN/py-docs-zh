["```py\n>>> from decimal import Decimal\n>>> from datetime import datetime\n\n>>> from sqlalchemy import ForeignKey\n>>> from sqlalchemy import func\n>>> from sqlalchemy.orm import DeclarativeBase\n>>> from sqlalchemy.orm import Mapped\n>>> from sqlalchemy.orm import mapped_column\n>>> from sqlalchemy.orm import relationship\n>>> from sqlalchemy.orm import Session\n>>> from sqlalchemy.orm import WriteOnlyMapped\n\n>>> class Base(DeclarativeBase):\n...     pass\n\n>>> class Account(Base):\n...     __tablename__ = \"account\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     identifier: Mapped[str]\n...\n...     account_transactions: WriteOnlyMapped[\"AccountTransaction\"] = relationship(\n...         cascade=\"all, delete-orphan\",\n...         passive_deletes=True,\n...         order_by=\"AccountTransaction.timestamp\",\n...     )\n...\n...     def __repr__(self):\n...         return f\"Account(identifier={self.identifier!r})\"\n\n>>> class AccountTransaction(Base):\n...     __tablename__ = \"account_transaction\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     account_id: Mapped[int] = mapped_column(\n...         ForeignKey(\"account.id\", ondelete=\"cascade\")\n...     )\n...     description: Mapped[str]\n...     amount: Mapped[Decimal]\n...     timestamp: Mapped[datetime] = mapped_column(default=func.now())\n...\n...     def __repr__(self):\n...         return (\n...             f\"AccountTransaction(amount={self.amount:.2f}, \"\n...             f\"timestamp={self.timestamp.isoformat()!r})\"\n...         )\n...\n...     __mapper_args__ = {\"eager_defaults\": True}\n```", "```py\n>>> new_account = Account(\n...     identifier=\"account_01\",\n...     account_transactions=[\n...         AccountTransaction(description=\"initial deposit\", amount=Decimal(\"500.00\")),\n...         AccountTransaction(description=\"transfer\", amount=Decimal(\"1000.00\")),\n...         AccountTransaction(description=\"withdrawal\", amount=Decimal(\"-29.50\")),\n...     ],\n... )\n\n>>> with Session(engine) as session:\n...     session.add(new_account)\n...     session.commit()\nBEGIN  (implicit)\nINSERT  INTO  account  (identifier)  VALUES  (?)\n[...]  ('account_01',)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)\nVALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)  RETURNING  id,  timestamp\n[...  (insertmanyvalues)  1/3  (ordered;  batch  not  supported)]  (1,  'initial deposit',  500.0)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)\nVALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)  RETURNING  id,  timestamp\n[insertmanyvalues  2/3  (ordered;  batch  not  supported)]  (1,  'transfer',  1000.0)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)\nVALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)  RETURNING  id,  timestamp\n[insertmanyvalues  3/3  (ordered;  batch  not  supported)]  (1,  'withdrawal',  -29.5)\nCOMMIT \n```", "```py\n>>> new_account.account_transactions = [\n...     AccountTransaction(description=\"some transaction\", amount=Decimal(\"10.00\"))\n... ]\nTraceback (most recent call last):\n...\nsqlalchemy.exc.InvalidRequestError: Collection \"Account.account_transactions\" does not\nsupport implicit iteration; collection replacement operations can't be used\n```", "```py\n>>> from sqlalchemy import select\n>>> session = Session(engine, expire_on_commit=False)\n>>> existing_account = session.scalar(select(Account).filter_by(identifier=\"account_01\"))\nBEGIN  (implicit)\nSELECT  account.id,  account.identifier\nFROM  account\nWHERE  account.identifier  =  ?\n[...]  ('account_01',)\n>>> existing_account.account_transactions.add_all(\n...     [\n...         AccountTransaction(description=\"paycheck\", amount=Decimal(\"2000.00\")),\n...         AccountTransaction(description=\"rent\", amount=Decimal(\"-800.00\")),\n...     ]\n... )\n>>> session.commit()\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)\nVALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)  RETURNING  id,  timestamp\n[...  (insertmanyvalues)  1/2  (ordered;  batch  not  supported)]  (1,  'paycheck',  2000.0)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)\nVALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)  RETURNING  id,  timestamp\n[insertmanyvalues  2/2  (ordered;  batch  not  supported)]  (1,  'rent',  -800.0)\nCOMMIT \n```", "```py\n>>> print(existing_account.account_transactions.select())\nSELECT  account_transaction.id,  account_transaction.account_id,  account_transaction.description,\naccount_transaction.amount,  account_transaction.timestamp\nFROM  account_transaction\nWHERE  :param_1  =  account_transaction.account_id  ORDER  BY  account_transaction.timestamp \n```", "```py\n>>> account_transactions = session.scalars(\n...     existing_account.account_transactions.select()\n...     .where(AccountTransaction.amount < 0)\n...     .limit(10)\n... ).all()\nBEGIN  (implicit)\nSELECT  account_transaction.id,  account_transaction.account_id,  account_transaction.description,\naccount_transaction.amount,  account_transaction.timestamp\nFROM  account_transaction\nWHERE  ?  =  account_transaction.account_id  AND  account_transaction.amount  <  ?\nORDER  BY  account_transaction.timestamp  LIMIT  ?  OFFSET  ?\n[...]  (1,  0,  10,  0)\n>>> print(account_transactions)\n[AccountTransaction(amount=-29.50, timestamp='...'), AccountTransaction(amount=-800.00, timestamp='...')]\n```", "```py\n>>> existing_transaction = account_transactions[0]\n>>> existing_account.account_transactions.remove(existing_transaction)\n>>> session.commit()\nDELETE  FROM  account_transaction  WHERE  account_transaction.id  =  ?\n[...]  (3,)\nCOMMIT \n```", "```py\n>>> session.execute(\n...     existing_account.account_transactions.insert(),\n...     [\n...         {\"description\": \"transaction 1\", \"amount\": Decimal(\"47.50\")},\n...         {\"description\": \"transaction 2\", \"amount\": Decimal(\"-501.25\")},\n...         {\"description\": \"transaction 3\", \"amount\": Decimal(\"1800.00\")},\n...         {\"description\": \"transaction 4\", \"amount\": Decimal(\"-300.00\")},\n...     ],\n... )\nBEGIN  (implicit)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)  VALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)\n[...]  [(1,  'transaction 1',  47.5),  (1,  'transaction 2',  -501.25),  (1,  'transaction 3',  1800.0),  (1,  'transaction 4',  -300.0)]\n<...>\n>>> session.commit()\nCOMMIT\n```", "```py\n>>> from sqlalchemy import Table, Column\n>>> audit_to_transaction = Table(\n...     \"audit_transaction\",\n...     Base.metadata,\n...     Column(\"audit_id\", ForeignKey(\"audit.id\", ondelete=\"CASCADE\"), primary_key=True),\n...     Column(\n...         \"transaction_id\",\n...         ForeignKey(\"account_transaction.id\", ondelete=\"CASCADE\"),\n...         primary_key=True,\n...     ),\n... )\n>>> class BankAudit(Base):\n...     __tablename__ = \"audit\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     account_transactions: WriteOnlyMapped[\"AccountTransaction\"] = relationship(\n...         secondary=audit_to_transaction, passive_deletes=True\n...     )\n```", "```py\n>>> new_transactions = session.scalars(\n...     existing_account.account_transactions.insert().returning(AccountTransaction),\n...     [\n...         {\"description\": \"odd trans 1\", \"amount\": Decimal(\"50000.00\")},\n...         {\"description\": \"odd trans 2\", \"amount\": Decimal(\"25000.00\")},\n...         {\"description\": \"odd trans 3\", \"amount\": Decimal(\"45.00\")},\n...     ],\n... ).all()\nBEGIN  (implicit)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)  VALUES\n(?,  ?,  ?,  CURRENT_TIMESTAMP),  (?,  ?,  ?,  CURRENT_TIMESTAMP),  (?,  ?,  ?,  CURRENT_TIMESTAMP)\nRETURNING  id,  account_id,  description,  amount,  timestamp\n[...]  (1,  'odd trans 1',  50000.0,  1,  'odd trans 2',  25000.0,  1,  'odd trans 3',  45.0) \n```", "```py\n>>> bank_audit = BankAudit()\n>>> session.add(bank_audit)\n>>> bank_audit.account_transactions.add_all(new_transactions)\n>>> session.commit()\nINSERT  INTO  audit  DEFAULT  VALUES\n[...]  ()\nINSERT  INTO  audit_transaction  (audit_id,  transaction_id)  VALUES  (?,  ?)\n[...]  [(1,  10),  (1,  11),  (1,  12)]\nCOMMIT \n```", "```py\n>>> session.execute(\n...     existing_account.account_transactions.update()\n...     .values(amount=AccountTransaction.amount + 200)\n...     .where(AccountTransaction.amount == -800),\n... )\nBEGIN  (implicit)\nUPDATE  account_transaction  SET  amount=(account_transaction.amount  +  ?)\nWHERE  ?  =  account_transaction.account_id  AND  account_transaction.amount  =  ?\n[...]  (200,  1,  -800)\n<...>\n```", "```py\n>>> session.execute(\n...     existing_account.account_transactions.delete().where(\n...         AccountTransaction.amount.between(0, 30)\n...     ),\n... )\nDELETE  FROM  account_transaction  WHERE  ?  =  account_transaction.account_id\nAND  account_transaction.amount  BETWEEN  ?  AND  ?  RETURNING  id\n[...]  (1,  0,  30)\n<...> \n```", "```py\n>>> session.execute(\n...     bank_audit.account_transactions.update().values(\n...         description=AccountTransaction.description + \" (audited)\"\n...     )\n... )\nUPDATE  account_transaction  SET  description=(account_transaction.description  ||  ?)\nFROM  audit_transaction  WHERE  ?  =  audit_transaction.audit_id\nAND  account_transaction.id  =  audit_transaction.transaction_id  RETURNING  id\n[...]  (' (audited)',  1)\n<...>\n```", "```py\n>>> from sqlalchemy import update\n>>> subq = bank_audit.account_transactions.select().with_only_columns(AccountTransaction.id)\n>>> session.execute(\n...     update(AccountTransaction)\n...     .values(description=AccountTransaction.description + \" (audited)\")\n...     .where(AccountTransaction.id.in_(subq))\n... )\nUPDATE  account_transaction  SET  description=(account_transaction.description  ||  ?)\nWHERE  account_transaction.id  IN  (SELECT  account_transaction.id\nFROM  audit_transaction\nWHERE  ?  =  audit_transaction.audit_id  AND  account_transaction.id  =  audit_transaction.transaction_id)\nRETURNING  id\n[...]  (' (audited)',  1)\n<...> \n```", "```py\nclass sqlalchemy.orm.WriteOnlyCollection\n```", "```py\nmethod add(item: _T) \u2192 None\n```", "```py\nmethod add_all(iterator: Iterable[_T]) \u2192 None\n```", "```py\nmethod delete() \u2192 Delete\n```", "```py\nmethod insert() \u2192 Insert\n```", "```py\nmethod remove(item: _T) \u2192 None\n```", "```py\nmethod select() \u2192 Select[Tuple[_T]]\n```", "```py\nmethod update() \u2192 Update\n```", "```py\nclass sqlalchemy.orm.WriteOnlyMapped\n```", "```py\nclass User(Base):\n __tablename__ = \"user\"\n id: Mapped[int] = mapped_column(primary_key=True)\n addresses: WriteOnlyMapped[Address] = relationship(\n cascade=\"all,delete-orphan\"\n )\n```", "```py\nfrom sqlalchemy.orm import DynamicMapped\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    posts: DynamicMapped[Post] = relationship()\n```", "```py\njack = session.get(User, id)\n\n# filter Jack's blog posts\nposts = jack.posts.filter(Post.headline == \"this is a post\")\n\n# apply array slices\nposts = jack.posts[5:20]\n```", "```py\noldpost = jack.posts.filter(Post.headline == \"old post\").one()\njack.posts.remove(oldpost)\n\njack.posts.append(Post(\"new post\"))\n```", "```py\nclass sqlalchemy.orm.AppenderQuery\n```", "```py\nmethod add(item: _T) \u2192 None\n```", "```py\nmethod add_all(iterator: Iterable[_T]) \u2192 None\n```", "```py\nmethod append(item: _T) \u2192 None\n```", "```py\nmethod count() \u2192 int\n```", "```py\nSELECT count(1) AS count_1 FROM (\n    SELECT <rest of query follows...>\n) AS anon_1\n```", "```py\nfrom sqlalchemy import func\n\n# count User records, without\n# using a subquery.\nsession.query(func.count(User.id))\n\n# return count of user \"id\" grouped\n# by \"name\"\nsession.query(func.count(User.id)).\\\n        group_by(User.name)\n\nfrom sqlalchemy import distinct\n\n# count distinct \"name\" values\nsession.query(func.count(distinct(User.name)))\n```", "```py\nmethod extend(iterator: Iterable[_T]) \u2192 None\n```", "```py\nmethod remove(item: _T) \u2192 None\n```", "```py\nclass sqlalchemy.orm.DynamicMapped\n```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    addresses: DynamicMapped[Address] = relationship(\n        cascade=\"all,delete-orphan\"\n    )\n```", "```py\nclass MyClass(Base):\n    __tablename__ = \"some_table\"\n\n    # ...\n\n    children: Mapped[List[MyRelatedClass]] = relationship(lazy=\"raise\")\n```", "```py\n>>> from decimal import Decimal\n>>> from datetime import datetime\n\n>>> from sqlalchemy import ForeignKey\n>>> from sqlalchemy import func\n>>> from sqlalchemy.orm import DeclarativeBase\n>>> from sqlalchemy.orm import Mapped\n>>> from sqlalchemy.orm import mapped_column\n>>> from sqlalchemy.orm import relationship\n>>> from sqlalchemy.orm import Session\n>>> from sqlalchemy.orm import WriteOnlyMapped\n\n>>> class Base(DeclarativeBase):\n...     pass\n\n>>> class Account(Base):\n...     __tablename__ = \"account\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     identifier: Mapped[str]\n...\n...     account_transactions: WriteOnlyMapped[\"AccountTransaction\"] = relationship(\n...         cascade=\"all, delete-orphan\",\n...         passive_deletes=True,\n...         order_by=\"AccountTransaction.timestamp\",\n...     )\n...\n...     def __repr__(self):\n...         return f\"Account(identifier={self.identifier!r})\"\n\n>>> class AccountTransaction(Base):\n...     __tablename__ = \"account_transaction\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     account_id: Mapped[int] = mapped_column(\n...         ForeignKey(\"account.id\", ondelete=\"cascade\")\n...     )\n...     description: Mapped[str]\n...     amount: Mapped[Decimal]\n...     timestamp: Mapped[datetime] = mapped_column(default=func.now())\n...\n...     def __repr__(self):\n...         return (\n...             f\"AccountTransaction(amount={self.amount:.2f}, \"\n...             f\"timestamp={self.timestamp.isoformat()!r})\"\n...         )\n...\n...     __mapper_args__ = {\"eager_defaults\": True}\n```", "```py\n>>> new_account = Account(\n...     identifier=\"account_01\",\n...     account_transactions=[\n...         AccountTransaction(description=\"initial deposit\", amount=Decimal(\"500.00\")),\n...         AccountTransaction(description=\"transfer\", amount=Decimal(\"1000.00\")),\n...         AccountTransaction(description=\"withdrawal\", amount=Decimal(\"-29.50\")),\n...     ],\n... )\n\n>>> with Session(engine) as session:\n...     session.add(new_account)\n...     session.commit()\nBEGIN  (implicit)\nINSERT  INTO  account  (identifier)  VALUES  (?)\n[...]  ('account_01',)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)\nVALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)  RETURNING  id,  timestamp\n[...  (insertmanyvalues)  1/3  (ordered;  batch  not  supported)]  (1,  'initial deposit',  500.0)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)\nVALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)  RETURNING  id,  timestamp\n[insertmanyvalues  2/3  (ordered;  batch  not  supported)]  (1,  'transfer',  1000.0)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)\nVALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)  RETURNING  id,  timestamp\n[insertmanyvalues  3/3  (ordered;  batch  not  supported)]  (1,  'withdrawal',  -29.5)\nCOMMIT \n```", "```py\n>>> new_account.account_transactions = [\n...     AccountTransaction(description=\"some transaction\", amount=Decimal(\"10.00\"))\n... ]\nTraceback (most recent call last):\n...\nsqlalchemy.exc.InvalidRequestError: Collection \"Account.account_transactions\" does not\nsupport implicit iteration; collection replacement operations can't be used\n```", "```py\n>>> from sqlalchemy import select\n>>> session = Session(engine, expire_on_commit=False)\n>>> existing_account = session.scalar(select(Account).filter_by(identifier=\"account_01\"))\nBEGIN  (implicit)\nSELECT  account.id,  account.identifier\nFROM  account\nWHERE  account.identifier  =  ?\n[...]  ('account_01',)\n>>> existing_account.account_transactions.add_all(\n...     [\n...         AccountTransaction(description=\"paycheck\", amount=Decimal(\"2000.00\")),\n...         AccountTransaction(description=\"rent\", amount=Decimal(\"-800.00\")),\n...     ]\n... )\n>>> session.commit()\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)\nVALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)  RETURNING  id,  timestamp\n[...  (insertmanyvalues)  1/2  (ordered;  batch  not  supported)]  (1,  'paycheck',  2000.0)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)\nVALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)  RETURNING  id,  timestamp\n[insertmanyvalues  2/2  (ordered;  batch  not  supported)]  (1,  'rent',  -800.0)\nCOMMIT \n```", "```py\n>>> print(existing_account.account_transactions.select())\nSELECT  account_transaction.id,  account_transaction.account_id,  account_transaction.description,\naccount_transaction.amount,  account_transaction.timestamp\nFROM  account_transaction\nWHERE  :param_1  =  account_transaction.account_id  ORDER  BY  account_transaction.timestamp \n```", "```py\n>>> account_transactions = session.scalars(\n...     existing_account.account_transactions.select()\n...     .where(AccountTransaction.amount < 0)\n...     .limit(10)\n... ).all()\nBEGIN  (implicit)\nSELECT  account_transaction.id,  account_transaction.account_id,  account_transaction.description,\naccount_transaction.amount,  account_transaction.timestamp\nFROM  account_transaction\nWHERE  ?  =  account_transaction.account_id  AND  account_transaction.amount  <  ?\nORDER  BY  account_transaction.timestamp  LIMIT  ?  OFFSET  ?\n[...]  (1,  0,  10,  0)\n>>> print(account_transactions)\n[AccountTransaction(amount=-29.50, timestamp='...'), AccountTransaction(amount=-800.00, timestamp='...')]\n```", "```py\n>>> existing_transaction = account_transactions[0]\n>>> existing_account.account_transactions.remove(existing_transaction)\n>>> session.commit()\nDELETE  FROM  account_transaction  WHERE  account_transaction.id  =  ?\n[...]  (3,)\nCOMMIT \n```", "```py\n>>> session.execute(\n...     existing_account.account_transactions.insert(),\n...     [\n...         {\"description\": \"transaction 1\", \"amount\": Decimal(\"47.50\")},\n...         {\"description\": \"transaction 2\", \"amount\": Decimal(\"-501.25\")},\n...         {\"description\": \"transaction 3\", \"amount\": Decimal(\"1800.00\")},\n...         {\"description\": \"transaction 4\", \"amount\": Decimal(\"-300.00\")},\n...     ],\n... )\nBEGIN  (implicit)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)  VALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)\n[...]  [(1,  'transaction 1',  47.5),  (1,  'transaction 2',  -501.25),  (1,  'transaction 3',  1800.0),  (1,  'transaction 4',  -300.0)]\n<...>\n>>> session.commit()\nCOMMIT\n```", "```py\n>>> from sqlalchemy import Table, Column\n>>> audit_to_transaction = Table(\n...     \"audit_transaction\",\n...     Base.metadata,\n...     Column(\"audit_id\", ForeignKey(\"audit.id\", ondelete=\"CASCADE\"), primary_key=True),\n...     Column(\n...         \"transaction_id\",\n...         ForeignKey(\"account_transaction.id\", ondelete=\"CASCADE\"),\n...         primary_key=True,\n...     ),\n... )\n>>> class BankAudit(Base):\n...     __tablename__ = \"audit\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     account_transactions: WriteOnlyMapped[\"AccountTransaction\"] = relationship(\n...         secondary=audit_to_transaction, passive_deletes=True\n...     )\n```", "```py\n>>> new_transactions = session.scalars(\n...     existing_account.account_transactions.insert().returning(AccountTransaction),\n...     [\n...         {\"description\": \"odd trans 1\", \"amount\": Decimal(\"50000.00\")},\n...         {\"description\": \"odd trans 2\", \"amount\": Decimal(\"25000.00\")},\n...         {\"description\": \"odd trans 3\", \"amount\": Decimal(\"45.00\")},\n...     ],\n... ).all()\nBEGIN  (implicit)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)  VALUES\n(?,  ?,  ?,  CURRENT_TIMESTAMP),  (?,  ?,  ?,  CURRENT_TIMESTAMP),  (?,  ?,  ?,  CURRENT_TIMESTAMP)\nRETURNING  id,  account_id,  description,  amount,  timestamp\n[...]  (1,  'odd trans 1',  50000.0,  1,  'odd trans 2',  25000.0,  1,  'odd trans 3',  45.0) \n```", "```py\n>>> bank_audit = BankAudit()\n>>> session.add(bank_audit)\n>>> bank_audit.account_transactions.add_all(new_transactions)\n>>> session.commit()\nINSERT  INTO  audit  DEFAULT  VALUES\n[...]  ()\nINSERT  INTO  audit_transaction  (audit_id,  transaction_id)  VALUES  (?,  ?)\n[...]  [(1,  10),  (1,  11),  (1,  12)]\nCOMMIT \n```", "```py\n>>> session.execute(\n...     existing_account.account_transactions.update()\n...     .values(amount=AccountTransaction.amount + 200)\n...     .where(AccountTransaction.amount == -800),\n... )\nBEGIN  (implicit)\nUPDATE  account_transaction  SET  amount=(account_transaction.amount  +  ?)\nWHERE  ?  =  account_transaction.account_id  AND  account_transaction.amount  =  ?\n[...]  (200,  1,  -800)\n<...>\n```", "```py\n>>> session.execute(\n...     existing_account.account_transactions.delete().where(\n...         AccountTransaction.amount.between(0, 30)\n...     ),\n... )\nDELETE  FROM  account_transaction  WHERE  ?  =  account_transaction.account_id\nAND  account_transaction.amount  BETWEEN  ?  AND  ?  RETURNING  id\n[...]  (1,  0,  30)\n<...> \n```", "```py\n>>> session.execute(\n...     bank_audit.account_transactions.update().values(\n...         description=AccountTransaction.description + \" (audited)\"\n...     )\n... )\nUPDATE  account_transaction  SET  description=(account_transaction.description  ||  ?)\nFROM  audit_transaction  WHERE  ?  =  audit_transaction.audit_id\nAND  account_transaction.id  =  audit_transaction.transaction_id  RETURNING  id\n[...]  (' (audited)',  1)\n<...>\n```", "```py\n>>> from sqlalchemy import update\n>>> subq = bank_audit.account_transactions.select().with_only_columns(AccountTransaction.id)\n>>> session.execute(\n...     update(AccountTransaction)\n...     .values(description=AccountTransaction.description + \" (audited)\")\n...     .where(AccountTransaction.id.in_(subq))\n... )\nUPDATE  account_transaction  SET  description=(account_transaction.description  ||  ?)\nWHERE  account_transaction.id  IN  (SELECT  account_transaction.id\nFROM  audit_transaction\nWHERE  ?  =  audit_transaction.audit_id  AND  account_transaction.id  =  audit_transaction.transaction_id)\nRETURNING  id\n[...]  (' (audited)',  1)\n<...> \n```", "```py\nclass sqlalchemy.orm.WriteOnlyCollection\n```", "```py\nmethod add(item: _T) \u2192 None\n```", "```py\nmethod add_all(iterator: Iterable[_T]) \u2192 None\n```", "```py\nmethod delete() \u2192 Delete\n```", "```py\nmethod insert() \u2192 Insert\n```", "```py\nmethod remove(item: _T) \u2192 None\n```", "```py\nmethod select() \u2192 Select[Tuple[_T]]\n```", "```py\nmethod update() \u2192 Update\n```", "```py\nclass sqlalchemy.orm.WriteOnlyMapped\n```", "```py\nclass User(Base):\n __tablename__ = \"user\"\n id: Mapped[int] = mapped_column(primary_key=True)\n addresses: WriteOnlyMapped[Address] = relationship(\n cascade=\"all,delete-orphan\"\n )\n```", "```py\n>>> new_account = Account(\n...     identifier=\"account_01\",\n...     account_transactions=[\n...         AccountTransaction(description=\"initial deposit\", amount=Decimal(\"500.00\")),\n...         AccountTransaction(description=\"transfer\", amount=Decimal(\"1000.00\")),\n...         AccountTransaction(description=\"withdrawal\", amount=Decimal(\"-29.50\")),\n...     ],\n... )\n\n>>> with Session(engine) as session:\n...     session.add(new_account)\n...     session.commit()\nBEGIN  (implicit)\nINSERT  INTO  account  (identifier)  VALUES  (?)\n[...]  ('account_01',)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)\nVALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)  RETURNING  id,  timestamp\n[...  (insertmanyvalues)  1/3  (ordered;  batch  not  supported)]  (1,  'initial deposit',  500.0)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)\nVALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)  RETURNING  id,  timestamp\n[insertmanyvalues  2/3  (ordered;  batch  not  supported)]  (1,  'transfer',  1000.0)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)\nVALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)  RETURNING  id,  timestamp\n[insertmanyvalues  3/3  (ordered;  batch  not  supported)]  (1,  'withdrawal',  -29.5)\nCOMMIT \n```", "```py\n>>> new_account.account_transactions = [\n...     AccountTransaction(description=\"some transaction\", amount=Decimal(\"10.00\"))\n... ]\nTraceback (most recent call last):\n...\nsqlalchemy.exc.InvalidRequestError: Collection \"Account.account_transactions\" does not\nsupport implicit iteration; collection replacement operations can't be used\n```", "```py\n>>> from sqlalchemy import select\n>>> session = Session(engine, expire_on_commit=False)\n>>> existing_account = session.scalar(select(Account).filter_by(identifier=\"account_01\"))\nBEGIN  (implicit)\nSELECT  account.id,  account.identifier\nFROM  account\nWHERE  account.identifier  =  ?\n[...]  ('account_01',)\n>>> existing_account.account_transactions.add_all(\n...     [\n...         AccountTransaction(description=\"paycheck\", amount=Decimal(\"2000.00\")),\n...         AccountTransaction(description=\"rent\", amount=Decimal(\"-800.00\")),\n...     ]\n... )\n>>> session.commit()\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)\nVALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)  RETURNING  id,  timestamp\n[...  (insertmanyvalues)  1/2  (ordered;  batch  not  supported)]  (1,  'paycheck',  2000.0)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)\nVALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)  RETURNING  id,  timestamp\n[insertmanyvalues  2/2  (ordered;  batch  not  supported)]  (1,  'rent',  -800.0)\nCOMMIT \n```", "```py\n>>> print(existing_account.account_transactions.select())\nSELECT  account_transaction.id,  account_transaction.account_id,  account_transaction.description,\naccount_transaction.amount,  account_transaction.timestamp\nFROM  account_transaction\nWHERE  :param_1  =  account_transaction.account_id  ORDER  BY  account_transaction.timestamp \n```", "```py\n>>> account_transactions = session.scalars(\n...     existing_account.account_transactions.select()\n...     .where(AccountTransaction.amount < 0)\n...     .limit(10)\n... ).all()\nBEGIN  (implicit)\nSELECT  account_transaction.id,  account_transaction.account_id,  account_transaction.description,\naccount_transaction.amount,  account_transaction.timestamp\nFROM  account_transaction\nWHERE  ?  =  account_transaction.account_id  AND  account_transaction.amount  <  ?\nORDER  BY  account_transaction.timestamp  LIMIT  ?  OFFSET  ?\n[...]  (1,  0,  10,  0)\n>>> print(account_transactions)\n[AccountTransaction(amount=-29.50, timestamp='...'), AccountTransaction(amount=-800.00, timestamp='...')]\n```", "```py\n>>> existing_transaction = account_transactions[0]\n>>> existing_account.account_transactions.remove(existing_transaction)\n>>> session.commit()\nDELETE  FROM  account_transaction  WHERE  account_transaction.id  =  ?\n[...]  (3,)\nCOMMIT \n```", "```py\n>>> session.execute(\n...     existing_account.account_transactions.insert(),\n...     [\n...         {\"description\": \"transaction 1\", \"amount\": Decimal(\"47.50\")},\n...         {\"description\": \"transaction 2\", \"amount\": Decimal(\"-501.25\")},\n...         {\"description\": \"transaction 3\", \"amount\": Decimal(\"1800.00\")},\n...         {\"description\": \"transaction 4\", \"amount\": Decimal(\"-300.00\")},\n...     ],\n... )\nBEGIN  (implicit)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)  VALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)\n[...]  [(1,  'transaction 1',  47.5),  (1,  'transaction 2',  -501.25),  (1,  'transaction 3',  1800.0),  (1,  'transaction 4',  -300.0)]\n<...>\n>>> session.commit()\nCOMMIT\n```", "```py\n>>> from sqlalchemy import Table, Column\n>>> audit_to_transaction = Table(\n...     \"audit_transaction\",\n...     Base.metadata,\n...     Column(\"audit_id\", ForeignKey(\"audit.id\", ondelete=\"CASCADE\"), primary_key=True),\n...     Column(\n...         \"transaction_id\",\n...         ForeignKey(\"account_transaction.id\", ondelete=\"CASCADE\"),\n...         primary_key=True,\n...     ),\n... )\n>>> class BankAudit(Base):\n...     __tablename__ = \"audit\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     account_transactions: WriteOnlyMapped[\"AccountTransaction\"] = relationship(\n...         secondary=audit_to_transaction, passive_deletes=True\n...     )\n```", "```py\n>>> new_transactions = session.scalars(\n...     existing_account.account_transactions.insert().returning(AccountTransaction),\n...     [\n...         {\"description\": \"odd trans 1\", \"amount\": Decimal(\"50000.00\")},\n...         {\"description\": \"odd trans 2\", \"amount\": Decimal(\"25000.00\")},\n...         {\"description\": \"odd trans 3\", \"amount\": Decimal(\"45.00\")},\n...     ],\n... ).all()\nBEGIN  (implicit)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)  VALUES\n(?,  ?,  ?,  CURRENT_TIMESTAMP),  (?,  ?,  ?,  CURRENT_TIMESTAMP),  (?,  ?,  ?,  CURRENT_TIMESTAMP)\nRETURNING  id,  account_id,  description,  amount,  timestamp\n[...]  (1,  'odd trans 1',  50000.0,  1,  'odd trans 2',  25000.0,  1,  'odd trans 3',  45.0) \n```", "```py\n>>> bank_audit = BankAudit()\n>>> session.add(bank_audit)\n>>> bank_audit.account_transactions.add_all(new_transactions)\n>>> session.commit()\nINSERT  INTO  audit  DEFAULT  VALUES\n[...]  ()\nINSERT  INTO  audit_transaction  (audit_id,  transaction_id)  VALUES  (?,  ?)\n[...]  [(1,  10),  (1,  11),  (1,  12)]\nCOMMIT \n```", "```py\n>>> session.execute(\n...     existing_account.account_transactions.insert(),\n...     [\n...         {\"description\": \"transaction 1\", \"amount\": Decimal(\"47.50\")},\n...         {\"description\": \"transaction 2\", \"amount\": Decimal(\"-501.25\")},\n...         {\"description\": \"transaction 3\", \"amount\": Decimal(\"1800.00\")},\n...         {\"description\": \"transaction 4\", \"amount\": Decimal(\"-300.00\")},\n...     ],\n... )\nBEGIN  (implicit)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)  VALUES  (?,  ?,  ?,  CURRENT_TIMESTAMP)\n[...]  [(1,  'transaction 1',  47.5),  (1,  'transaction 2',  -501.25),  (1,  'transaction 3',  1800.0),  (1,  'transaction 4',  -300.0)]\n<...>\n>>> session.commit()\nCOMMIT\n```", "```py\n>>> from sqlalchemy import Table, Column\n>>> audit_to_transaction = Table(\n...     \"audit_transaction\",\n...     Base.metadata,\n...     Column(\"audit_id\", ForeignKey(\"audit.id\", ondelete=\"CASCADE\"), primary_key=True),\n...     Column(\n...         \"transaction_id\",\n...         ForeignKey(\"account_transaction.id\", ondelete=\"CASCADE\"),\n...         primary_key=True,\n...     ),\n... )\n>>> class BankAudit(Base):\n...     __tablename__ = \"audit\"\n...     id: Mapped[int] = mapped_column(primary_key=True)\n...     account_transactions: WriteOnlyMapped[\"AccountTransaction\"] = relationship(\n...         secondary=audit_to_transaction, passive_deletes=True\n...     )\n```", "```py\n>>> new_transactions = session.scalars(\n...     existing_account.account_transactions.insert().returning(AccountTransaction),\n...     [\n...         {\"description\": \"odd trans 1\", \"amount\": Decimal(\"50000.00\")},\n...         {\"description\": \"odd trans 2\", \"amount\": Decimal(\"25000.00\")},\n...         {\"description\": \"odd trans 3\", \"amount\": Decimal(\"45.00\")},\n...     ],\n... ).all()\nBEGIN  (implicit)\nINSERT  INTO  account_transaction  (account_id,  description,  amount,  timestamp)  VALUES\n(?,  ?,  ?,  CURRENT_TIMESTAMP),  (?,  ?,  ?,  CURRENT_TIMESTAMP),  (?,  ?,  ?,  CURRENT_TIMESTAMP)\nRETURNING  id,  account_id,  description,  amount,  timestamp\n[...]  (1,  'odd trans 1',  50000.0,  1,  'odd trans 2',  25000.0,  1,  'odd trans 3',  45.0) \n```", "```py\n>>> bank_audit = BankAudit()\n>>> session.add(bank_audit)\n>>> bank_audit.account_transactions.add_all(new_transactions)\n>>> session.commit()\nINSERT  INTO  audit  DEFAULT  VALUES\n[...]  ()\nINSERT  INTO  audit_transaction  (audit_id,  transaction_id)  VALUES  (?,  ?)\n[...]  [(1,  10),  (1,  11),  (1,  12)]\nCOMMIT \n```", "```py\n>>> session.execute(\n...     existing_account.account_transactions.update()\n...     .values(amount=AccountTransaction.amount + 200)\n...     .where(AccountTransaction.amount == -800),\n... )\nBEGIN  (implicit)\nUPDATE  account_transaction  SET  amount=(account_transaction.amount  +  ?)\nWHERE  ?  =  account_transaction.account_id  AND  account_transaction.amount  =  ?\n[...]  (200,  1,  -800)\n<...>\n```", "```py\n>>> session.execute(\n...     existing_account.account_transactions.delete().where(\n...         AccountTransaction.amount.between(0, 30)\n...     ),\n... )\nDELETE  FROM  account_transaction  WHERE  ?  =  account_transaction.account_id\nAND  account_transaction.amount  BETWEEN  ?  AND  ?  RETURNING  id\n[...]  (1,  0,  30)\n<...> \n```", "```py\n>>> session.execute(\n...     bank_audit.account_transactions.update().values(\n...         description=AccountTransaction.description + \" (audited)\"\n...     )\n... )\nUPDATE  account_transaction  SET  description=(account_transaction.description  ||  ?)\nFROM  audit_transaction  WHERE  ?  =  audit_transaction.audit_id\nAND  account_transaction.id  =  audit_transaction.transaction_id  RETURNING  id\n[...]  (' (audited)',  1)\n<...>\n```", "```py\n>>> from sqlalchemy import update\n>>> subq = bank_audit.account_transactions.select().with_only_columns(AccountTransaction.id)\n>>> session.execute(\n...     update(AccountTransaction)\n...     .values(description=AccountTransaction.description + \" (audited)\")\n...     .where(AccountTransaction.id.in_(subq))\n... )\nUPDATE  account_transaction  SET  description=(account_transaction.description  ||  ?)\nWHERE  account_transaction.id  IN  (SELECT  account_transaction.id\nFROM  audit_transaction\nWHERE  ?  =  audit_transaction.audit_id  AND  account_transaction.id  =  audit_transaction.transaction_id)\nRETURNING  id\n[...]  (' (audited)',  1)\n<...> \n```", "```py\n>>> session.execute(\n...     existing_account.account_transactions.update()\n...     .values(amount=AccountTransaction.amount + 200)\n...     .where(AccountTransaction.amount == -800),\n... )\nBEGIN  (implicit)\nUPDATE  account_transaction  SET  amount=(account_transaction.amount  +  ?)\nWHERE  ?  =  account_transaction.account_id  AND  account_transaction.amount  =  ?\n[...]  (200,  1,  -800)\n<...>\n```", "```py\n>>> session.execute(\n...     existing_account.account_transactions.delete().where(\n...         AccountTransaction.amount.between(0, 30)\n...     ),\n... )\nDELETE  FROM  account_transaction  WHERE  ?  =  account_transaction.account_id\nAND  account_transaction.amount  BETWEEN  ?  AND  ?  RETURNING  id\n[...]  (1,  0,  30)\n<...> \n```", "```py\n>>> session.execute(\n...     bank_audit.account_transactions.update().values(\n...         description=AccountTransaction.description + \" (audited)\"\n...     )\n... )\nUPDATE  account_transaction  SET  description=(account_transaction.description  ||  ?)\nFROM  audit_transaction  WHERE  ?  =  audit_transaction.audit_id\nAND  account_transaction.id  =  audit_transaction.transaction_id  RETURNING  id\n[...]  (' (audited)',  1)\n<...>\n```", "```py\n>>> from sqlalchemy import update\n>>> subq = bank_audit.account_transactions.select().with_only_columns(AccountTransaction.id)\n>>> session.execute(\n...     update(AccountTransaction)\n...     .values(description=AccountTransaction.description + \" (audited)\")\n...     .where(AccountTransaction.id.in_(subq))\n... )\nUPDATE  account_transaction  SET  description=(account_transaction.description  ||  ?)\nWHERE  account_transaction.id  IN  (SELECT  account_transaction.id\nFROM  audit_transaction\nWHERE  ?  =  audit_transaction.audit_id  AND  account_transaction.id  =  audit_transaction.transaction_id)\nRETURNING  id\n[...]  (' (audited)',  1)\n<...> \n```", "```py\nclass sqlalchemy.orm.WriteOnlyCollection\n```", "```py\nmethod add(item: _T) \u2192 None\n```", "```py\nmethod add_all(iterator: Iterable[_T]) \u2192 None\n```", "```py\nmethod delete() \u2192 Delete\n```", "```py\nmethod insert() \u2192 Insert\n```", "```py\nmethod remove(item: _T) \u2192 None\n```", "```py\nmethod select() \u2192 Select[Tuple[_T]]\n```", "```py\nmethod update() \u2192 Update\n```", "```py\nclass sqlalchemy.orm.WriteOnlyMapped\n```", "```py\nclass User(Base):\n __tablename__ = \"user\"\n id: Mapped[int] = mapped_column(primary_key=True)\n addresses: WriteOnlyMapped[Address] = relationship(\n cascade=\"all,delete-orphan\"\n )\n```", "```py\nfrom sqlalchemy.orm import DynamicMapped\n\nclass User(Base):\n    __tablename__ = \"user\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    posts: DynamicMapped[Post] = relationship()\n```", "```py\njack = session.get(User, id)\n\n# filter Jack's blog posts\nposts = jack.posts.filter(Post.headline == \"this is a post\")\n\n# apply array slices\nposts = jack.posts[5:20]\n```", "```py\noldpost = jack.posts.filter(Post.headline == \"old post\").one()\njack.posts.remove(oldpost)\n\njack.posts.append(Post(\"new post\"))\n```", "```py\nclass sqlalchemy.orm.AppenderQuery\n```", "```py\nmethod add(item: _T) \u2192 None\n```", "```py\nmethod add_all(iterator: Iterable[_T]) \u2192 None\n```", "```py\nmethod append(item: _T) \u2192 None\n```", "```py\nmethod count() \u2192 int\n```", "```py\nSELECT count(1) AS count_1 FROM (\n    SELECT <rest of query follows...>\n) AS anon_1\n```", "```py\nfrom sqlalchemy import func\n\n# count User records, without\n# using a subquery.\nsession.query(func.count(User.id))\n\n# return count of user \"id\" grouped\n# by \"name\"\nsession.query(func.count(User.id)).\\\n        group_by(User.name)\n\nfrom sqlalchemy import distinct\n\n# count distinct \"name\" values\nsession.query(func.count(distinct(User.name)))\n```", "```py\nmethod extend(iterator: Iterable[_T]) \u2192 None\n```", "```py\nmethod remove(item: _T) \u2192 None\n```", "```py\nclass sqlalchemy.orm.DynamicMapped\n```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    addresses: DynamicMapped[Address] = relationship(\n        cascade=\"all,delete-orphan\"\n    )\n```", "```py\nclass sqlalchemy.orm.AppenderQuery\n```", "```py\nmethod add(item: _T) \u2192 None\n```", "```py\nmethod add_all(iterator: Iterable[_T]) \u2192 None\n```", "```py\nmethod append(item: _T) \u2192 None\n```", "```py\nmethod count() \u2192 int\n```", "```py\nSELECT count(1) AS count_1 FROM (\n    SELECT <rest of query follows...>\n) AS anon_1\n```", "```py\nfrom sqlalchemy import func\n\n# count User records, without\n# using a subquery.\nsession.query(func.count(User.id))\n\n# return count of user \"id\" grouped\n# by \"name\"\nsession.query(func.count(User.id)).\\\n        group_by(User.name)\n\nfrom sqlalchemy import distinct\n\n# count distinct \"name\" values\nsession.query(func.count(distinct(User.name)))\n```", "```py\nmethod extend(iterator: Iterable[_T]) \u2192 None\n```", "```py\nmethod remove(item: _T) \u2192 None\n```", "```py\nclass sqlalchemy.orm.DynamicMapped\n```", "```py\nclass User(Base):\n    __tablename__ = \"user\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    addresses: DynamicMapped[Address] = relationship(\n        cascade=\"all,delete-orphan\"\n    )\n```", "```py\nclass MyClass(Base):\n    __tablename__ = \"some_table\"\n\n    # ...\n\n    children: Mapped[List[MyRelatedClass]] = relationship(lazy=\"raise\")\n```"]