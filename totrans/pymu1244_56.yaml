- en: Constants and Enumerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/vars.html](https://pymupdf.readthedocs.io/en/latest/vars.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Constants and enumerations of MuPDF as implemented by PyMuPDF. Each of the following
    variables is accessible as *pymupdf.variable*.
  prefs: []
  type: TYPE_NORMAL
- en: Constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Predefined Python list of valid [PDF Base 14 Fonts](app3.html#base-14-fonts).
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Predefined RGB colorspace *pymupdf.Colorspace(pymupdf.CS_RGB)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Colorspace](colorspace.html#colorspace)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Predefined GRAY colorspace *pymupdf.Colorspace(pymupdf.CS_GRAY)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Colorspace](colorspace.html#colorspace)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Predefined CMYK colorspace *pymupdf.Colorspace(pymupdf.CS_CMYK)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Colorspace](colorspace.html#colorspace)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 1 – Type of [Colorspace](colorspace.html#colorspace) is RGBA
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 2 – Type of [Colorspace](colorspace.html#colorspace) is GRAY
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 3 – Type of [Colorspace](colorspace.html#colorspace) is CMYK
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: ‘x.xx.x’ – version of PyMuPDF (these bindings)
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: ‘x.xxx’ – version of MuPDF
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: ISO timestamp *YYYY-MM-DD HH:MM:SS* when these bindings were built.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The docstring of *fitz* contains information of the above which can be retrieved
    like so: *print(fitz.__doc__)*, and should look like: *PyMuPDF 1.10.0: Python
    bindings for the MuPDF 1.10 library, built on 2016-11-30 13:09:13*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: (VersionBind, VersionFitz, timestamp) – combined version information where *timestamp*
    is the generation point in time formatted as “YYYYMMDDhhmmss”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: tuple
  prefs: []
  type: TYPE_NORMAL
- en: '## Document Permissions'
  prefs: []
  type: TYPE_NORMAL
- en: '| Code | Permitted Action |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_PERM_PRINT | Print the document |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_PERM_MODIFY | Modify the document’s contents |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_PERM_COPY | Copy or otherwise extract text and graphics |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_PERM_ANNOTATE | Add or modify text annotations and interactive form fields
    |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_PERM_FORM | Fill in forms and sign the document |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_PERM_ACCESSIBILITY | Obsolete, always permitted |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_PERM_ASSEMBLE | Insert, rotate, or delete pages, bookmarks, thumbnail
    images |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_PERM_PRINT_HQ | High quality printing |  ## PDF Optional Content Codes'
  prefs: []
  type: TYPE_NORMAL
- en: '| Code | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_OC_ON | Set an OCG to ON temporarily |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_OC_TOGGLE | Toggle OCG status temporarily |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_OC_OFF | Set an OCG to OFF temporarily |  ## PDF encryption method codes'
  prefs: []
  type: TYPE_NORMAL
- en: '| Code | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_ENCRYPT_KEEP | do not change |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_ENCRYPT_NONE | remove any encryption |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_ENCRYPT_RC4_40 | RC4 40 bit |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_ENCRYPT_RC4_128 | RC4 128 bit |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_ENCRYPT_AES_128 | *Advanced Encryption Standard* 128 bit |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_ENCRYPT_AES_256 | *Advanced Encryption Standard* 256 bit |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_ENCRYPT_UNKNOWN | unknown |  ## Font File Extensions'
  prefs: []
  type: TYPE_NORMAL
- en: The table show file extensions you should use when saving fontfile buffers extracted
    from a PDF. This string is returned by [`Document.get_page_fonts()`](document.html#Document.get_page_fonts
    "Document.get_page_fonts"), [`Page.get_fonts()`](page.html#Page.get_fonts "Page.get_fonts")
    and [`Document.extract_font()`](document.html#Document.extract_font "Document.extract_font").
  prefs: []
  type: TYPE_NORMAL
- en: '| Ext | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ttf | TrueType font |'
  prefs: []
  type: TYPE_TB
- en: '| pfa | Postscript for ASCII font (various subtypes) |'
  prefs: []
  type: TYPE_TB
- en: '| cff | Type1C font (compressed font equivalent to Type1) |'
  prefs: []
  type: TYPE_TB
- en: '| cid | character identifier font (postscript format) |'
  prefs: []
  type: TYPE_TB
- en: '| otf | OpenType font |'
  prefs: []
  type: TYPE_TB
- en: '| n/a | not extractable, e.g. [PDF Base 14 Fonts](app3.html#base-14-fonts),
    Type 3 fonts and others |  ## Text Alignment'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 0 – align left.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 1 – align center.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 2 – align right.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '3 – align justify.  ## Text Extraction Flags'
  prefs: []
  type: TYPE_NORMAL
- en: Option bits controlling the amount of data, that are parsed into a [TextPage](textpage.html#textpage)
    – this class is mainly used only internally in PyMuPDF.
  prefs: []
  type: TYPE_NORMAL
- en: For the PyMuPDF programmer, some combination (using Python’s `|` operator, or
    simply use `+`) of these values are aggregated in the [`flags`](annot.html#Annot.flags
    "Annot.flags") integer, a parameter of all text search and text extraction methods.
    Depending on the individual method, different default combinations of the values
    are used. Please use a value that meets your situation. Especially make sure to
    switch off image extraction unless you really need them. The impact on performance
    and memory is significant!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '1 – If set, ligatures are passed through to the application in their original
    form. Otherwise ligatures are expanded into their constituent parts, e.g. the
    ligature “ffi” is expanded into three eparate characters f, f and i. Default is
    “on” in PyMuPDF. MuPDF supports the following 7 ligatures: “ff”, “fi”, “fl”, “ffi”,
    “ffl”, , “ft”, “st”.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 2 – If set, whitespace is passed through. Otherwise any type of horizontal whitespace
    (including horizontal tabs) will be replaced with space characters of variable
    width. Default is “on” in PyMuPDF.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 4 – If set, then images will be stored in the [TextPage](textpage.html#textpage).
    This causes the presence of (usually large!) binary image content in the output
    of text extractions of types “blocks”, “dict”, “json”, “rawdict”, “rawjson”, “html”,
    and “xhtml” and is the default there. If used with “blocks” however, only image
    metadata will be returned, not the image itself.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 8 – If set, Mupdf will not try to add missing space characters where there are
    large gaps between characters. In PDF, the creator often does not insert spaces
    to point to the next character’s position, but will provide the direct location
    address. The default in PyMuPDF is “off” – so spaces **will be generated**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '16 – Ignore hyphens at line ends and join with next line. Used internally with
    the text search functions. However, it is generally available: if on, text extractions
    will return joined text lines (or spans) with the ending hyphen of the first line
    eliminated. So two separate spans **“first meth-”** and **“od leads to wrong results”**
    on different lines will be joined to one span **“first method leads to wrong results”**
    and correspondingly updated bboxes: the characters of the resulting span will
    no longer have identical y-coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 32 – Generate a new line for every span. Not used (“off”) in PyMuPDF, but available
    for your use. Every line in “dict”, “json”, “rawdict”, “rawjson” will contain
    exactly one span.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 64 – If set, characters entirely outside a page’s **mediabox** will be ignored.
    This is default in PyMuPDF.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 128 – If set, use raw character codes instead of U+FFFD. This is the default
    for **text extraction** in PyMuPDF. If you **want to detect** when encoding information
    is missing or uncertain, toggle this flag and scan for the presence of U+FFFD
    (= `chr(0xfffd)`) code points in the resulting text.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following constants represent the default combinations of the above for
    text extraction and searching:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_CID_FOR_UNKNOWN_UNICODE`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_CID_FOR_UNKNOWN_UNICODE`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_CID_FOR_UNKNOWN_UNICODE`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_PRESERVE_IMAGES | TEXT_CID_FOR_UNKNOWN_UNICODE`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_PRESERVE_IMAGES | TEXT_CID_FOR_UNKNOWN_UNICODE`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_PRESERVE_IMAGES | TEXT_CID_FOR_UNKNOWN_UNICODE`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_PRESERVE_IMAGES | TEXT_CID_FOR_UNKNOWN_UNICODE`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_CID_FOR_UNKNOWN_UNICODE`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_DEHYPHENATE`  ## Link Destination Kinds'
  prefs: []
  type: TYPE_NORMAL
- en: Possible values of [`linkDest.kind`](linkdest.html#linkDest.kind "linkDest.kind")
    (link destination kind).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 0 – No destination. Indicates a dummy link.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 1 – Points to a place in this document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 2 – Points to a URI – typically a resource specified with internet syntax.
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF treats any external link that contains a colon and does not start with
    `file:`, as [`LINK_URI`](#LINK_URI "LINK_URI").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 3 – Launch (open) another file (of any “executable” type).
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF treats any external link that starts wth `file:` or doesn’t contain
    a colon, as [`LINK_LAUNCH`](#LINK_LAUNCH "LINK_LAUNCH").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 4 – points to a named location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 5 – Points to a place in another PDF document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: 'int  ## Link Destination Flags'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The rightmost byte of this integer is a bit field, so test the truth of these
    bits with the *&* operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 1 (bit 0) Top left x value is valid
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 2 (bit 1) Top left y value is valid
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 4 (bit 2) Bottom right x value is valid
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 8 (bit 3) Bottom right y value is valid
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 16 (bit 4) Horizontal fit
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 32 (bit 5) Vertical fit
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 64 (bit 6) Bottom right x is a zoom figure
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: Annotation Related Constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See chapter 8.4.5, pp. 615 of the [Adobe PDF References](app3.html#adobemanual)
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: '### Annotation Types'
  prefs: []
  type: TYPE_NORMAL
- en: 'These identifiers also cover **links** and **widgets**: the PDF specification
    technically handles them all in the same way, whereas **MuPDF** (and PyMuPDF)
    treats them as three basically different types of objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]  ### Annotation Flag Bits'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]  ### Annotation Line Ending Styles'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Widget Constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Widget Types (*field_type*)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Text Widget Subtypes (*text_format*)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Widget flags (*field_flags*)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Common to all field types**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '**Text widgets**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '**Button widgets**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '**Choice widgets**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '## PDF Standard Blend Modes'
  prefs: []
  type: TYPE_NORMAL
- en: 'For an explanation see [Adobe PDF References](app3.html#adobemanual), page
    324:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]  ## Stamp Annotation Icons'
  prefs: []
  type: TYPE_NORMAL
- en: 'MuPDF has defined the following icons for **rubber stamp** annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
- en: Constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Predefined Python list of valid [PDF Base 14 Fonts](app3.html#base-14-fonts).
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: list
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Predefined RGB colorspace *pymupdf.Colorspace(pymupdf.CS_RGB)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Colorspace](colorspace.html#colorspace)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Predefined GRAY colorspace *pymupdf.Colorspace(pymupdf.CS_GRAY)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Colorspace](colorspace.html#colorspace)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Predefined CMYK colorspace *pymupdf.Colorspace(pymupdf.CS_CMYK)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Colorspace](colorspace.html#colorspace)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 1 – Type of [Colorspace](colorspace.html#colorspace) is RGBA
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 2 – Type of [Colorspace](colorspace.html#colorspace) is GRAY
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 3 – Type of [Colorspace](colorspace.html#colorspace) is CMYK
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: ‘x.xx.x’ – version of PyMuPDF (these bindings)
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: ‘x.xxx’ – version of MuPDF
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: ISO timestamp *YYYY-MM-DD HH:MM:SS* when these bindings were built.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: string
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The docstring of *fitz* contains information of the above which can be retrieved
    like so: *print(fitz.__doc__)*, and should look like: *PyMuPDF 1.10.0: Python
    bindings for the MuPDF 1.10 library, built on 2016-11-30 13:09:13*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: (VersionBind, VersionFitz, timestamp) – combined version information where *timestamp*
    is the generation point in time formatted as “YYYYMMDDhhmmss”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: tuple
  prefs: []
  type: TYPE_NORMAL
- en: '## Document Permissions'
  prefs: []
  type: TYPE_NORMAL
- en: '| Code | Permitted Action |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_PERM_PRINT | Print the document |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_PERM_MODIFY | Modify the document’s contents |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_PERM_COPY | Copy or otherwise extract text and graphics |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_PERM_ANNOTATE | Add or modify text annotations and interactive form fields
    |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_PERM_FORM | Fill in forms and sign the document |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_PERM_ACCESSIBILITY | Obsolete, always permitted |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_PERM_ASSEMBLE | Insert, rotate, or delete pages, bookmarks, thumbnail
    images |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_PERM_PRINT_HQ | High quality printing |'
  prefs: []
  type: TYPE_TB
- en: '## PDF Optional Content Codes'
  prefs: []
  type: TYPE_NORMAL
- en: '| Code | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_OC_ON | Set an OCG to ON temporarily |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_OC_TOGGLE | Toggle OCG status temporarily |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_OC_OFF | Set an OCG to OFF temporarily |'
  prefs: []
  type: TYPE_TB
- en: '## PDF encryption method codes'
  prefs: []
  type: TYPE_NORMAL
- en: '| Code | Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_ENCRYPT_KEEP | do not change |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_ENCRYPT_NONE | remove any encryption |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_ENCRYPT_RC4_40 | RC4 40 bit |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_ENCRYPT_RC4_128 | RC4 128 bit |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_ENCRYPT_AES_128 | *Advanced Encryption Standard* 128 bit |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_ENCRYPT_AES_256 | *Advanced Encryption Standard* 256 bit |'
  prefs: []
  type: TYPE_TB
- en: '| PDF_ENCRYPT_UNKNOWN | unknown |'
  prefs: []
  type: TYPE_TB
- en: '## Font File Extensions'
  prefs: []
  type: TYPE_NORMAL
- en: The table show file extensions you should use when saving fontfile buffers extracted
    from a PDF. This string is returned by [`Document.get_page_fonts()`](document.html#Document.get_page_fonts
    "Document.get_page_fonts"), [`Page.get_fonts()`](page.html#Page.get_fonts "Page.get_fonts")
    and [`Document.extract_font()`](document.html#Document.extract_font "Document.extract_font").
  prefs: []
  type: TYPE_NORMAL
- en: '| Ext | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ttf | TrueType font |'
  prefs: []
  type: TYPE_TB
- en: '| pfa | Postscript for ASCII font (various subtypes) |'
  prefs: []
  type: TYPE_TB
- en: '| cff | Type1C font (compressed font equivalent to Type1) |'
  prefs: []
  type: TYPE_TB
- en: '| cid | character identifier font (postscript format) |'
  prefs: []
  type: TYPE_TB
- en: '| otf | OpenType font |'
  prefs: []
  type: TYPE_TB
- en: '| n/a | not extractable, e.g. [PDF Base 14 Fonts](app3.html#base-14-fonts),
    Type 3 fonts and others |'
  prefs: []
  type: TYPE_TB
- en: '## Text Alignment'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 0 – align left.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 1 – align center.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 2 – align right.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 3 – align justify.
  prefs: []
  type: TYPE_NORMAL
- en: '## Text Extraction Flags'
  prefs: []
  type: TYPE_NORMAL
- en: Option bits controlling the amount of data, that are parsed into a [TextPage](textpage.html#textpage)
    – this class is mainly used only internally in PyMuPDF.
  prefs: []
  type: TYPE_NORMAL
- en: For the PyMuPDF programmer, some combination (using Python’s `|` operator, or
    simply use `+`) of these values are aggregated in the [`flags`](annot.html#Annot.flags
    "Annot.flags") integer, a parameter of all text search and text extraction methods.
    Depending on the individual method, different default combinations of the values
    are used. Please use a value that meets your situation. Especially make sure to
    switch off image extraction unless you really need them. The impact on performance
    and memory is significant!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '1 – If set, ligatures are passed through to the application in their original
    form. Otherwise ligatures are expanded into their constituent parts, e.g. the
    ligature “ffi” is expanded into three eparate characters f, f and i. Default is
    “on” in PyMuPDF. MuPDF supports the following 7 ligatures: “ff”, “fi”, “fl”, “ffi”,
    “ffl”, , “ft”, “st”.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 2 – If set, whitespace is passed through. Otherwise any type of horizontal whitespace
    (including horizontal tabs) will be replaced with space characters of variable
    width. Default is “on” in PyMuPDF.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 4 – If set, then images will be stored in the [TextPage](textpage.html#textpage).
    This causes the presence of (usually large!) binary image content in the output
    of text extractions of types “blocks”, “dict”, “json”, “rawdict”, “rawjson”, “html”,
    and “xhtml” and is the default there. If used with “blocks” however, only image
    metadata will be returned, not the image itself.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 8 – If set, Mupdf will not try to add missing space characters where there are
    large gaps between characters. In PDF, the creator often does not insert spaces
    to point to the next character’s position, but will provide the direct location
    address. The default in PyMuPDF is “off” – so spaces **will be generated**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '16 – Ignore hyphens at line ends and join with next line. Used internally with
    the text search functions. However, it is generally available: if on, text extractions
    will return joined text lines (or spans) with the ending hyphen of the first line
    eliminated. So two separate spans **“first meth-”** and **“od leads to wrong results”**
    on different lines will be joined to one span **“first method leads to wrong results”**
    and correspondingly updated bboxes: the characters of the resulting span will
    no longer have identical y-coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 32 – Generate a new line for every span. Not used (“off”) in PyMuPDF, but available
    for your use. Every line in “dict”, “json”, “rawdict”, “rawjson” will contain
    exactly one span.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 64 – If set, characters entirely outside a page’s **mediabox** will be ignored.
    This is default in PyMuPDF.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 128 – If set, use raw character codes instead of U+FFFD. This is the default
    for **text extraction** in PyMuPDF. If you **want to detect** when encoding information
    is missing or uncertain, toggle this flag and scan for the presence of U+FFFD
    (= `chr(0xfffd)`) code points in the resulting text.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following constants represent the default combinations of the above for
    text extraction and searching:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_CID_FOR_UNKNOWN_UNICODE`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_CID_FOR_UNKNOWN_UNICODE`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_CID_FOR_UNKNOWN_UNICODE`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_PRESERVE_IMAGES | TEXT_CID_FOR_UNKNOWN_UNICODE`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_PRESERVE_IMAGES | TEXT_CID_FOR_UNKNOWN_UNICODE`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_PRESERVE_IMAGES | TEXT_CID_FOR_UNKNOWN_UNICODE`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_PRESERVE_IMAGES | TEXT_CID_FOR_UNKNOWN_UNICODE`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_CID_FOR_UNKNOWN_UNICODE`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '`TEXT_PRESERVE_LIGATURES | TEXT_PRESERVE_WHITESPACE | TEXT_MEDIABOX_CLIP |
    TEXT_DEHYPHENATE`'
  prefs: []
  type: TYPE_NORMAL
- en: '## Link Destination Kinds'
  prefs: []
  type: TYPE_NORMAL
- en: Possible values of [`linkDest.kind`](linkdest.html#linkDest.kind "linkDest.kind")
    (link destination kind).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 0 – No destination. Indicates a dummy link.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 1 – Points to a place in this document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 2 – Points to a URI – typically a resource specified with internet syntax.
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF treats any external link that contains a colon and does not start with
    `file:`, as [`LINK_URI`](#LINK_URI "LINK_URI").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 3 – Launch (open) another file (of any “executable” type).
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF treats any external link that starts wth `file:` or doesn’t contain
    a colon, as [`LINK_LAUNCH`](#LINK_LAUNCH "LINK_LAUNCH").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 4 – points to a named location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 5 – Points to a place in another PDF document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '## Link Destination Flags'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The rightmost byte of this integer is a bit field, so test the truth of these
    bits with the *&* operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 1 (bit 0) Top left x value is valid
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 2 (bit 1) Top left y value is valid
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 4 (bit 2) Bottom right x value is valid
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 8 (bit 3) Bottom right y value is valid
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 16 (bit 4) Horizontal fit
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 32 (bit 5) Vertical fit
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 64 (bit 6) Bottom right x is a zoom figure
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: Annotation Related Constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See chapter 8.4.5, pp. 615 of the [Adobe PDF References](app3.html#adobemanual)
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: '### Annotation Types'
  prefs: []
  type: TYPE_NORMAL
- en: 'These identifiers also cover **links** and **widgets**: the PDF specification
    technically handles them all in the same way, whereas **MuPDF** (and PyMuPDF)
    treats them as three basically different types of objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]  ### Annotation Flag Bits'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]  ### Annotation Line Ending Styles'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]  ### Annotation Types'
  prefs: []
  type: TYPE_NORMAL
- en: 'These identifiers also cover **links** and **widgets**: the PDF specification
    technically handles them all in the same way, whereas **MuPDF** (and PyMuPDF)
    treats them as three basically different types of objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '### Annotation Flag Bits'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '### Annotation Line Ending Styles'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Widget Constants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### Widget Types (*field_type*)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Text Widget Subtypes (*text_format*)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Widget flags (*field_flags*)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Common to all field types**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '**Text widgets**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '**Button widgets**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '**Choice widgets**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '### Widget Types (*field_type*)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Text Widget Subtypes (*text_format*)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Widget flags (*field_flags*)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Common to all field types**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '**Text widgets**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '**Button widgets**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '**Choice widgets**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '## PDF Standard Blend Modes'
  prefs: []
  type: TYPE_NORMAL
- en: 'For an explanation see [Adobe PDF References](app3.html#adobemanual), page
    324:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '## Stamp Annotation Icons'
  prefs: []
  type: TYPE_NORMAL
- en: 'MuPDF has defined the following icons for **rubber stamp** annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
