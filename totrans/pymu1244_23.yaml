- en: Command line interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/module.html](https://pymupdf.readthedocs.io/en/latest/module.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*   New in version 1.16.8'
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF can also be used from the command line to perform utility functions.
    This feature should obsolete writing some of the most basic scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Admittedly, there is some functional overlap with the MuPDF CLI `mutool`. On
    the other hand, PDF embedded files are no longer supported by MuPDF, so PyMuPDF
    is offering something unique here.
  prefs: []
  type: TYPE_NORMAL
- en: Invocation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The command-line interface can be invoked in two ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the installed `pymupdf` command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or use Python’s `-m` switch with PyMuPDF’s `fitz` module:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'General remarks:'
  prefs: []
  type: TYPE_NORMAL
- en: Request help via `"-h"`, resp. command-specific help via `"command -h"`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parameters may be abbreviated where this does not introduce ambiguities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Several commands support parameters `-pages` and `-xrefs`. They are intended
    for down-selection. Please note that:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**page numbers** for this utility must be given **1-based**.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: valid [`xref`](glossary.html#xref "xref") numbers start at 1.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Specify a comma-separated list of either *single* integers or integer *ranges*.
    A **range** is a pair of integers separated by one hyphen “-”. Integers must not
    exceed the maximum page, resp. xref number. To specify that maximum, the symbolic
    variable “N” may be used. Integers or ranges may occur several times, in any sequence
    and may overlap. If in a range the first number is greater than the second one,
    the respective items will be processed in reversed order.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How to use the module inside your script:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the following 2-liner and compile it with [Nuitka](https://pypi.org/project/Nuitka/)
    in standalone mode. This will give you a CLI executable with all the module’s
    features, that can be used on all compatible platforms without Python, PyMuPDF
    or MuPDF being installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Cleaning and Copying
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This command will optimize the PDF and store the result in a new file. You
    can use it also for encryption, decryption and creating sub documents. It is mostly
    similar to the MuPDF command line utility *“mutool clean”*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you specify “-pages”, be aware that only page-related objects are copied,
    **no document-level items** like e.g. embedded files.
  prefs: []
  type: TYPE_NORMAL
- en: Please consult [`Document.save()`](document.html#Document.save "Document.save")
    for the parameter meanings.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting Fonts and Images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Extract fonts or images from selected PDF pages to a desired directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Image filenames** are built according to the naming scheme: **“img-xref.ext”**,
    where “ext” is the extension associated with the image and “xref” the [`xref`](glossary.html#xref
    "xref") of the image PDF object.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Font filenames** consist of the fontname and the associated extension. Any
    spaces in the fontname are replaced with hyphens “-“.'
  prefs: []
  type: TYPE_NORMAL
- en: The output directory must already exist.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Except for output directory creation, this feature is **functionally equivalent**
    to and obsoletes [this script](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/extract-images/extract-from-pages.py).
  prefs: []
  type: TYPE_NORMAL
- en: Joining PDF Documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To join several PDF files specify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Each input must be entered as **“filename,password,pages”**. Password and pages
    are optional.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The password entry **is required** if the “pages” entry is used. If the PDF
    needs no password, specify two commas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **“pages”** format is the same as explained at the top of this section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each input file is immediately closed after use. Therefore you can use one of
    them as output filename, and thus overwrite it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Example: To join the following files'
  prefs: []
  type: TYPE_NORMAL
- en: '**file1.pdf:** all pages, back to front, no password'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**file2.pdf:** last page, first page, password: “secret”'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**file3.pdf:** pages 5 to last, no password'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'and store the result as **output.pdf** enter this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '*pymupdf join -o output.pdf file1.pdf,,N-1 file2.pdf,secret,N,1 file3.pdf,,5-N*'
  prefs: []
  type: TYPE_NORMAL
- en: Low Level Information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Display PDF internal information. Again, there are similarities to *“mutool
    show”*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Embedded Files Commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following commands deal with embedded files – which is a feature completely
    removed from MuPDF after v1.14, and hence from all its command line tools.
  prefs: []
  type: TYPE_NORMAL
- en: Information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Show the embedded file names (long or short format):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Detailed output would look like this per entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Extraction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Extract an embedded file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'For details consult [`Document.embfile_get()`](document.html#Document.embfile_get
    "Document.embfile_get"). Example (refer to previous section):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Deletion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Delete an embedded file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: For details consult [`Document.embfile_del()`](document.html#Document.embfile_del
    "Document.embfile_del").
  prefs: []
  type: TYPE_NORMAL
- en: Insertion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add a new embedded file using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '*“NAME”* **must not** already exist in the PDF. For details consult [`Document.embfile_add()`](document.html#Document.embfile_add
    "Document.embfile_add").'
  prefs: []
  type: TYPE_NORMAL
- en: Updates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Update an existing embedded file using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Use this method to change meta-information of the file – just omit the *“PATH”*.
    For details consult [`Document.embfile_upd()`](document.html#Document.embfile_upd
    "Document.embfile_upd").
  prefs: []
  type: TYPE_NORMAL
- en: Copying
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Copy embedded files between PDFs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Text Extraction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New in v1.18.16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Extract text from arbitrary [supported documents](how-to-open-a-file.html#supported-file-types)
    to a textfile. Currently, there are three output formatting modes available: simple,
    block sorting and reproduction of physical layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple** text extraction reproduces all text as it appears in the document
    pages – no effort is made to rearrange in any particular reading order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Block sorting** sorts text blocks (as identified by MuPDF) by ascending vertical,
    then horizontal coordinates. This should be sufficient to establish a “natural”
    reading order for basic pages of text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layout** strives to reproduce the original appearance of the input pages.
    You can expect results like this (produced by the command `pymupdf gettext -pages
    1 demo1.pdf`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![_images/img-layout-text.jpg](../Images/f67c22684630e42ab2d8a363e6615edd.png)](_images/img-layout-text.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The “gettext” command offers a functionality similar to the CLI tool `pdftotext`
    by XPDF software, [http://www.foolabs.com/xpdf/](http://www.foolabs.com/xpdf/)
    – this is especially true for “layout” mode, which combines that tool’s `-layout`
    and `-table` options.
  prefs: []
  type: TYPE_NORMAL
- en: After each page of the output file, a formfeed character, `hex(12)` is written
    – even if the input page has no text at all. This behavior can be controlled via
    options.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For “layout” mode, **only horizontal, left-to-right, top-to bottom** text is
    supported, other text is ignored. In this mode, text is also ignored, if its [`fontsize`](glossary.html#fontsize
    "fontsize") is too small.
  prefs: []
  type: TYPE_NORMAL
- en: “Simple” and “blocks” mode in contrast output **all text** for any text size
    or orientation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Command options may be abbreviated as long as no ambiguities are introduced.
    So the following do the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '`... -output text.txt -noligatures -noformfeed -convert-white -grid 3 -extra-spaces
    ...`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`... -o text.txt -nol -nof -c -g 3 -e ...`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output filename defaults to the input with its extension replaced by `.txt`.
    As with other commands, you can select page ranges **(caution: 1-based!)** in
    `mutool` format, as indicated above.'
  prefs: []
  type: TYPE_NORMAL
- en: '**mode:** (str) select a formatting mode – default is “layout”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**noligatures:** (bool) corresponds to **not** [`TEXT_PRESERVE_LIGATURES`](vars.html#TEXT_PRESERVE_LIGATURES
    "TEXT_PRESERVE_LIGATURES"). If specified, ligatures (present in advanced fonts:
    glyphs combining multiple characters like “fi”) are split up into their components
    (i.e. “f”, “i”). Default is passing them through.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**convert-white:** corresponds to **not** [`TEXT_PRESERVE_WHITESPACE`](vars.html#TEXT_PRESERVE_WHITESPACE
    "TEXT_PRESERVE_WHITESPACE"). If specified, all white space characters (like tabs)
    are replaced with one or more spaces. Default is passing them through.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**extra-spaces:** (bool) corresponds to **not** [`TEXT_INHIBIT_SPACES`](vars.html#TEXT_INHIBIT_SPACES
    "TEXT_INHIBIT_SPACES"). If specified, large gaps between adjacent characters will
    be filled with one or more spaces. Default is off.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**noformfeed:** (bool) instead of `hex(12)` (formfeed), write linebreaks [`n`](colorspace.html#Colorspace.n
    "Colorspace.n") at end of output pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**skip-empty:** (bool) skip pages with no text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**grid:** lines with a vertical coordinate difference of no more than this
    value (in points) will be merged into the same output line. Only relevant for
    “layout” mode. **Use with care:** 3 or the default 2 should be adequate in most
    cases. If **too large**, lines that are *intended* to be different in the original
    may be merged and will result in garbled and / or incomplete output. If **too
    low**, artifact separate output lines may be generated for some spans in the input
    line, just because they are coded in a different font with slightly deviating
    properties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontsize:** include text with [`fontsize`](glossary.html#fontsize "fontsize")
    larger than this value only (default 3). Only relevant for “layout” option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
- en: Invocation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The command-line interface can be invoked in two ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the installed `pymupdf` command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or use Python’s `-m` switch with PyMuPDF’s `fitz` module:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'General remarks:'
  prefs: []
  type: TYPE_NORMAL
- en: Request help via `"-h"`, resp. command-specific help via `"command -h"`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parameters may be abbreviated where this does not introduce ambiguities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Several commands support parameters `-pages` and `-xrefs`. They are intended
    for down-selection. Please note that:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**page numbers** for this utility must be given **1-based**.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: valid [`xref`](glossary.html#xref "xref") numbers start at 1.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Specify a comma-separated list of either *single* integers or integer *ranges*.
    A **range** is a pair of integers separated by one hyphen “-”. Integers must not
    exceed the maximum page, resp. xref number. To specify that maximum, the symbolic
    variable “N” may be used. Integers or ranges may occur several times, in any sequence
    and may overlap. If in a range the first number is greater than the second one,
    the respective items will be processed in reversed order.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How to use the module inside your script:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the following 2-liner and compile it with [Nuitka](https://pypi.org/project/Nuitka/)
    in standalone mode. This will give you a CLI executable with all the module’s
    features, that can be used on all compatible platforms without Python, PyMuPDF
    or MuPDF being installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Cleaning and Copying
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This command will optimize the PDF and store the result in a new file. You
    can use it also for encryption, decryption and creating sub documents. It is mostly
    similar to the MuPDF command line utility *“mutool clean”*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If you specify “-pages”, be aware that only page-related objects are copied,
    **no document-level items** like e.g. embedded files.
  prefs: []
  type: TYPE_NORMAL
- en: Please consult [`Document.save()`](document.html#Document.save "Document.save")
    for the parameter meanings.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting Fonts and Images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Extract fonts or images from selected PDF pages to a desired directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**Image filenames** are built according to the naming scheme: **“img-xref.ext”**,
    where “ext” is the extension associated with the image and “xref” the [`xref`](glossary.html#xref
    "xref") of the image PDF object.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Font filenames** consist of the fontname and the associated extension. Any
    spaces in the fontname are replaced with hyphens “-“.'
  prefs: []
  type: TYPE_NORMAL
- en: The output directory must already exist.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Except for output directory creation, this feature is **functionally equivalent**
    to and obsoletes [this script](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/extract-images/extract-from-pages.py).
  prefs: []
  type: TYPE_NORMAL
- en: Joining PDF Documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To join several PDF files specify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Each input must be entered as **“filename,password,pages”**. Password and pages
    are optional.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The password entry **is required** if the “pages” entry is used. If the PDF
    needs no password, specify two commas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **“pages”** format is the same as explained at the top of this section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each input file is immediately closed after use. Therefore you can use one of
    them as output filename, and thus overwrite it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Example: To join the following files'
  prefs: []
  type: TYPE_NORMAL
- en: '**file1.pdf:** all pages, back to front, no password'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**file2.pdf:** last page, first page, password: “secret”'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**file3.pdf:** pages 5 to last, no password'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'and store the result as **output.pdf** enter this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '*pymupdf join -o output.pdf file1.pdf,,N-1 file2.pdf,secret,N,1 file3.pdf,,5-N*'
  prefs: []
  type: TYPE_NORMAL
- en: Low Level Information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Display PDF internal information. Again, there are similarities to *“mutool
    show”*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Embedded Files Commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following commands deal with embedded files – which is a feature completely
    removed from MuPDF after v1.14, and hence from all its command line tools.
  prefs: []
  type: TYPE_NORMAL
- en: Information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Show the embedded file names (long or short format):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Detailed output would look like this per entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Extraction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Extract an embedded file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'For details consult [`Document.embfile_get()`](document.html#Document.embfile_get
    "Document.embfile_get"). Example (refer to previous section):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Deletion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Delete an embedded file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: For details consult [`Document.embfile_del()`](document.html#Document.embfile_del
    "Document.embfile_del").
  prefs: []
  type: TYPE_NORMAL
- en: Insertion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add a new embedded file using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '*“NAME”* **must not** already exist in the PDF. For details consult [`Document.embfile_add()`](document.html#Document.embfile_add
    "Document.embfile_add").'
  prefs: []
  type: TYPE_NORMAL
- en: Updates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Update an existing embedded file using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Use this method to change meta-information of the file – just omit the *“PATH”*.
    For details consult [`Document.embfile_upd()`](document.html#Document.embfile_upd
    "Document.embfile_upd").
  prefs: []
  type: TYPE_NORMAL
- en: Copying
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Copy embedded files between PDFs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Show the embedded file names (long or short format):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Detailed output would look like this per entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Extraction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Extract an embedded file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'For details consult [`Document.embfile_get()`](document.html#Document.embfile_get
    "Document.embfile_get"). Example (refer to previous section):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Deletion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Delete an embedded file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: For details consult [`Document.embfile_del()`](document.html#Document.embfile_del
    "Document.embfile_del").
  prefs: []
  type: TYPE_NORMAL
- en: Insertion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add a new embedded file using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '*“NAME”* **must not** already exist in the PDF. For details consult [`Document.embfile_add()`](document.html#Document.embfile_add
    "Document.embfile_add").'
  prefs: []
  type: TYPE_NORMAL
- en: Updates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Update an existing embedded file using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Use this method to change meta-information of the file – just omit the *“PATH”*.
    For details consult [`Document.embfile_upd()`](document.html#Document.embfile_upd
    "Document.embfile_upd").
  prefs: []
  type: TYPE_NORMAL
- en: Copying
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Copy embedded files between PDFs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Text Extraction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New in v1.18.16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Extract text from arbitrary [supported documents](how-to-open-a-file.html#supported-file-types)
    to a textfile. Currently, there are three output formatting modes available: simple,
    block sorting and reproduction of physical layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple** text extraction reproduces all text as it appears in the document
    pages – no effort is made to rearrange in any particular reading order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Block sorting** sorts text blocks (as identified by MuPDF) by ascending vertical,
    then horizontal coordinates. This should be sufficient to establish a “natural”
    reading order for basic pages of text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layout** strives to reproduce the original appearance of the input pages.
    You can expect results like this (produced by the command `pymupdf gettext -pages
    1 demo1.pdf`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[![_images/img-layout-text.jpg](../Images/f67c22684630e42ab2d8a363e6615edd.png)](_images/img-layout-text.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The “gettext” command offers a functionality similar to the CLI tool `pdftotext`
    by XPDF software, [http://www.foolabs.com/xpdf/](http://www.foolabs.com/xpdf/)
    – this is especially true for “layout” mode, which combines that tool’s `-layout`
    and `-table` options.
  prefs: []
  type: TYPE_NORMAL
- en: After each page of the output file, a formfeed character, `hex(12)` is written
    – even if the input page has no text at all. This behavior can be controlled via
    options.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For “layout” mode, **only horizontal, left-to-right, top-to bottom** text is
    supported, other text is ignored. In this mode, text is also ignored, if its [`fontsize`](glossary.html#fontsize
    "fontsize") is too small.
  prefs: []
  type: TYPE_NORMAL
- en: “Simple” and “blocks” mode in contrast output **all text** for any text size
    or orientation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Command options may be abbreviated as long as no ambiguities are introduced.
    So the following do the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '`... -output text.txt -noligatures -noformfeed -convert-white -grid 3 -extra-spaces
    ...`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`... -o text.txt -nol -nof -c -g 3 -e ...`'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output filename defaults to the input with its extension replaced by `.txt`.
    As with other commands, you can select page ranges **(caution: 1-based!)** in
    `mutool` format, as indicated above.'
  prefs: []
  type: TYPE_NORMAL
- en: '**mode:** (str) select a formatting mode – default is “layout”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**noligatures:** (bool) corresponds to **not** [`TEXT_PRESERVE_LIGATURES`](vars.html#TEXT_PRESERVE_LIGATURES
    "TEXT_PRESERVE_LIGATURES"). If specified, ligatures (present in advanced fonts:
    glyphs combining multiple characters like “fi”) are split up into their components
    (i.e. “f”, “i”). Default is passing them through.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**convert-white:** corresponds to **not** [`TEXT_PRESERVE_WHITESPACE`](vars.html#TEXT_PRESERVE_WHITESPACE
    "TEXT_PRESERVE_WHITESPACE"). If specified, all white space characters (like tabs)
    are replaced with one or more spaces. Default is passing them through.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**extra-spaces:** (bool) corresponds to **not** [`TEXT_INHIBIT_SPACES`](vars.html#TEXT_INHIBIT_SPACES
    "TEXT_INHIBIT_SPACES"). If specified, large gaps between adjacent characters will
    be filled with one or more spaces. Default is off.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**noformfeed:** (bool) instead of `hex(12)` (formfeed), write linebreaks [`n`](colorspace.html#Colorspace.n
    "Colorspace.n") at end of output pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**skip-empty:** (bool) skip pages with no text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**grid:** lines with a vertical coordinate difference of no more than this
    value (in points) will be merged into the same output line. Only relevant for
    “layout” mode. **Use with care:** 3 or the default 2 should be adequate in most
    cases. If **too large**, lines that are *intended* to be different in the original
    may be merged and will result in garbled and / or incomplete output. If **too
    low**, artifact separate output lines may be generated for some spans in the input
    line, just because they are coded in a different font with slightly deviating
    properties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fontsize:** include text with [`fontsize`](glossary.html#fontsize "fontsize")
    larger than this value only (default 3). Only relevant for “layout” option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
