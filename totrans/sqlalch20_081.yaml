- en: Insert, Updates, Deletes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插入，更新，删除
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/dml.html](https://docs.sqlalchemy.org/en/20/core/dml.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/dml.html](https://docs.sqlalchemy.org/en/20/core/dml.html)
- en: INSERT, UPDATE and DELETE statements build on a hierarchy starting with [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase"). The [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") and [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") constructs build on the intermediary [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 'INSERT、UPDATE 和 DELETE 语句是基于从 [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase") 开始的层次结构构建的。[`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 和 [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") 构造基于中介 [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase") 构建。 '
- en: '## DML Foundational Constructors'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '## DML 基础构造函数'
- en: Top level “INSERT”, “UPDATE”, “DELETE” constructors.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最顶层的“INSERT”，“UPDATE”，“DELETE”构造函数。
- en: '| Object Name | Description |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [delete](#sqlalchemy.sql.expression.delete)(table) | Construct [`Delete`](#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") object. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [delete](#sqlalchemy.sql.expression.delete)(table) | 构造 [`Delete`](#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") 对象。 |'
- en: '| [insert](#sqlalchemy.sql.expression.insert)(table) | Construct an [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") object. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [insert](#sqlalchemy.sql.expression.insert)(table) | 构造 [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 对象。 |'
- en: '| [update](#sqlalchemy.sql.expression.update)(table) | Construct an [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") object. |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [update](#sqlalchemy.sql.expression.update)(table) | 构造一个 [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") 对象。 |'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Construct [`Delete`](#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    object.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 构造 [`Delete`](#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    对象。
- en: 'E.g.:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Similar functionality is available via the [`TableClause.delete()`](selectable.html#sqlalchemy.sql.expression.TableClause.delete
    "sqlalchemy.sql.expression.TableClause.delete") method on [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 相似的功能也可以通过 [`TableClause.delete()`](selectable.html#sqlalchemy.sql.expression.TableClause.delete
    "sqlalchemy.sql.expression.TableClause.delete") 方法在 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 上使用。
- en: 'Parameters:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**table** – The table to delete rows from.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**table** – 要从中删除行的表。'
- en: See also
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Using UPDATE and DELETE Statements](../tutorial/data_update.html#tutorial-core-update-delete)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 UPDATE 和 DELETE 语句](../tutorial/data_update.html#tutorial-core-update-delete)
    - 在 [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Construct an [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    object.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    对象。
- en: 'E.g.:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Similar functionality is available via the [`TableClause.insert()`](selectable.html#sqlalchemy.sql.expression.TableClause.insert
    "sqlalchemy.sql.expression.TableClause.insert") method on [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 相似的功能也可以通过 [`TableClause.insert()`](selectable.html#sqlalchemy.sql.expression.TableClause.insert
    "sqlalchemy.sql.expression.TableClause.insert") 方法在 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 上使用。
- en: See also
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Using INSERT Statements](../tutorial/data_insert.html#tutorial-core-insert)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 INSERT 语句](../tutorial/data_insert.html#tutorial-core-insert) - 在 [SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: 'Parameters:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table` – [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") which is the subject of the insert.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table` – [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") 插入的主题。'
- en: '`values` – collection of values to be inserted; see [`Insert.values()`](#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") for a description of allowed formats
    here. Can be omitted entirely; a [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct will also dynamically render the
    VALUES clause at execution time based on the parameters passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values` – 要插入的值的集合；参见[`Insert.values()`](#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")以获取这里允许的格式描述。可以完全省略；[`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造也会根据传递给[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")的参数在执行时动态渲染VALUES子句。'
- en: '`inline` – if True, no attempt will be made to retrieve the SQL-generated default
    values to be provided within the statement; in particular, this allows SQL expressions
    to be rendered ‘inline’ within the statement without the need to pre-execute them
    beforehand; for backends that support “returning”, this turns off the “implicit
    returning” feature for the statement.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inline` – 如果为True，则不会尝试检索SQL生成的默认值以在语句中提供；特别是，这允许SQL表达式在语句中“内联”渲染，而无需事先预先执行它们；对于支持“返回”的后端，这将关闭语句的“隐式返回”功能。'
- en: If both [`insert.values`](#sqlalchemy.sql.expression.insert.params.values "sqlalchemy.sql.expression.insert")
    and compile-time bind parameters are present, the compile-time bind parameters
    override the information specified within [`insert.values`](#sqlalchemy.sql.expression.insert.params.values
    "sqlalchemy.sql.expression.insert") on a per-key basis.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果同时存在[`insert.values`](#sqlalchemy.sql.expression.insert.params.values "sqlalchemy.sql.expression.insert")和编译时绑定参数，则编译时绑定参数将在每个键的基础上覆盖[`insert.values`](#sqlalchemy.sql.expression.insert.params.values
    "sqlalchemy.sql.expression.insert")中指定的信息。
- en: 'The keys within [`Insert.values`](#sqlalchemy.sql.expression.Insert.params.values
    "sqlalchemy.sql.expression.Insert") can be either [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or their string identifiers. Each key may
    reference one of:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert.values`](#sqlalchemy.sql.expression.Insert.params.values "sqlalchemy.sql.expression.Insert")中的键可以是[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象或它们的字符串标识符。每个键可以引用以下之一：'
- en: a literal data value (i.e. string, number, etc.);
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字面数据值（即字符串，数字等）;
- en: a Column object;
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Column对象;
- en: a SELECT statement.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个SELECT语句。
- en: If a `SELECT` statement is specified which references this `INSERT` statement’s
    table, the statement will be correlated against the `INSERT` statement.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了引用此`INSERT`语句表的`SELECT`语句，则该语句将与`INSERT`语句相关联。
- en: See also
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using INSERT Statements](../tutorial/data_insert.html#tutorial-core-insert)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用INSERT语句](../tutorial/data_insert.html#tutorial-core-insert) - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Construct an [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    object.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个[`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")对象。
- en: 'E.g.:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Similar functionality is available via the [`TableClause.update()`](selectable.html#sqlalchemy.sql.expression.TableClause.update
    "sqlalchemy.sql.expression.TableClause.update") method on [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通过[`TableClause.update()`](selectable.html#sqlalchemy.sql.expression.TableClause.update
    "sqlalchemy.sql.expression.TableClause.update")方法在[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")上也可以实现类似功能。
- en: 'Parameters:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**table** – A [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object representing the database table to be updated.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**table** – 代表要更新的数据库表的[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象。'
- en: See also
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using UPDATE and DELETE Statements](../tutorial/data_update.html#tutorial-core-update-delete)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用UPDATE和DELETE语句](../tutorial/data_update.html#tutorial-core-update-delete)
    - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: DML Class Documentation Constructors
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DML类文档构造函数
- en: Class documentation for the constructors listed at [DML Foundational Constructors](#dml-foundational-consructors).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[DML基础构造函数](#dml-foundational-consructors)的类构造函数文档。'
- en: '| Object Name | Description |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Delete](#sqlalchemy.sql.expression.Delete) | Represent a DELETE construct.
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [Delete](#sqlalchemy.sql.expression.Delete) | 代表一个DELETE构造。 |'
- en: '| [Insert](#sqlalchemy.sql.expression.Insert) | Represent an INSERT construct.
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| [插入](#sqlalchemy.sql.expression.Insert) | 代表一个插入操作。|'
- en: '| [Update](#sqlalchemy.sql.expression.Update) | Represent an Update construct.
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| [更新](#sqlalchemy.sql.expression.Update) | 代表一个更新操作。|'
- en: '| [UpdateBase](#sqlalchemy.sql.expression.UpdateBase) | Form the base for `INSERT`,
    `UPDATE`, and `DELETE` statements. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| [UpdateBase](#sqlalchemy.sql.expression.UpdateBase) | 形成 `INSERT`、`UPDATE`
    和 `DELETE` 语句的基础。|'
- en: '| [ValuesBase](#sqlalchemy.sql.expression.ValuesBase) | Supplies support for
    [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values "sqlalchemy.sql.expression.ValuesBase.values")
    to INSERT and UPDATE constructs. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [ValuesBase](#sqlalchemy.sql.expression.ValuesBase) | 为 [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") 提供对 INSERT 和 UPDATE 构造的支持。|'
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Represent a DELETE construct.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个删除操作。
- en: The [`Delete`](#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    object is created using the [`delete()`](#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    function.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`delete()`](#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    函数创建 [`Delete`](#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    对象。
- en: '**Members**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[where()](#sqlalchemy.sql.expression.Delete.where), [returning()](#sqlalchemy.sql.expression.Delete.returning)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[where()](#sqlalchemy.sql.expression.Delete.where), [returning()](#sqlalchemy.sql.expression.Delete.returning)'
- en: '**Class signature**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Delete`](#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") (`sqlalchemy.sql.expression.DMLWhereBase`,
    [`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase"))
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Delete`](#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    (`sqlalchemy.sql.expression.DMLWhereBase`, [`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase"))
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*inherited from the* `DMLWhereBase.where()` *method of* `DMLWhereBase`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `DMLWhereBase.where()` *方法的* `DMLWhereBase`'
- en: Return a new construct with the given expression(s) added to its WHERE clause,
    joined to the existing clause via AND, if any.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新构造，其中给定的表达式已添加到其 WHERE 子句中，如果有的话，通过 AND 连接到现有子句。
- en: Both [`Update.where()`](#sqlalchemy.sql.expression.Update.where "sqlalchemy.sql.expression.Update.where")
    and [`Delete.where()`](#sqlalchemy.sql.expression.Delete.where "sqlalchemy.sql.expression.Delete.where")
    support multiple-table forms, including database-specific `UPDATE...FROM` as well
    as `DELETE..USING`. For backends that don’t have multiple-table support, a backend
    agnostic approach to using multiple tables is to make use of correlated subqueries.
    See the linked tutorial sections below for examples.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Update.where()`](#sqlalchemy.sql.expression.Update.where "sqlalchemy.sql.expression.Update.where")
    和 [`Delete.where()`](#sqlalchemy.sql.expression.Delete.where "sqlalchemy.sql.expression.Delete.where")
    都支持多表形式，包括特定于数据库的 `UPDATE...FROM` 和 `DELETE..USING`。对于不支持多表的后端，使用多表的跨后端方法是利用相关子查询。查看下面链接的教程部分以获取示例。'
- en: See also
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Correlated Updates](../tutorial/data_update.html#tutorial-correlated-updates)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[相关更新](../tutorial/data_update.html#tutorial-correlated-updates)'
- en: '[UPDATE..FROM](../tutorial/data_update.html#tutorial-update-from)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[UPDATE..FROM](../tutorial/data_update.html#tutorial-update-from)'
- en: '[Multiple Table Deletes](../tutorial/data_update.html#tutorial-multi-table-deletes)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[多表删除](../tutorial/data_update.html#tutorial-multi-table-deletes)'
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*inherited from the* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *method of* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *方法的* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
- en: Add a [RETURNING](../glossary.html#term-RETURNING) or equivalent clause to this
    statement.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为该语句添加一个 [RETURNING](../glossary.html#term-RETURNING) 或等效子句。
- en: 'e.g.:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The method may be invoked multiple times to add new entries to the list of expressions
    to be returned.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法可以多次调用，以将新条目添加到要返回的表达式列表中。
- en: 'New in version 1.4.0b2: The method may be invoked multiple times to add new
    entries to the list of expressions to be returned.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.0b2 中的新功能：该方法可以多次调用，以将新条目添加到要返回的表达式列表中。
- en: 'The given collection of column expressions should be derived from the table
    that is the target of the INSERT, UPDATE, or DELETE. While [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are typical, the elements can also be expressions:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的列表达式集合应来源于 INSERT、UPDATE 或 DELETE 的目标表。虽然 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象是典型的，但元素也可以是表达式：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Upon compilation, a RETURNING clause, or database equivalent, will be rendered
    within the statement. For INSERT and UPDATE, the values are the newly inserted/updated
    values. For DELETE, the values are those of the rows which were deleted.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译时，RETURNING 子句或数据库等效项将在语句中呈现。对于 INSERT 和 UPDATE，值是新插入/更新的值。对于 DELETE，值是删除的行的值。
- en: Upon execution, the values of the columns to be returned are made available
    via the result set and can be iterated using [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") and similar. For DBAPIs which do not
    natively support returning values (i.e. cx_oracle), SQLAlchemy will approximate
    this behavior at the result level so that a reasonable amount of behavioral neutrality
    is provided.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行时，要返回的列的值通过结果集可用，并可使用[`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone")等进行迭代。对于不原生支持返回值的 DBAPI（即 cx_oracle），SQLAlchemy
    将在结果级别上近似此行为，以便提供合理的行为中立性。
- en: Note that not all databases/DBAPIs support RETURNING. For those backends with
    no support, an exception is raised upon compilation and/or execution. For those
    who do support it, the functionality across backends varies greatly, including
    restrictions on executemany() and other statements which return multiple rows.
    Please read the documentation notes for the database in use in order to determine
    the availability of RETURNING.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非所有数据库/DBAPI 支持 RETURNING。对于没有支持的后端，在编译和/或执行时会引发异常。对于支持它的后端，跨后端的功能差异很大，包括对
    executemany() 和其他返回多行的语句的限制。请阅读正在使用的数据库的文档注释，以确定 RETURNING 的可用性。
- en: 'Parameters:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*cols` – series of columns, SQL expressions, or whole tables entities to be
    returned.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*cols` – 一系列列、SQL 表达式或整个表实体要返回。'
- en: '`sort_by_parameter_order` –'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort_by_parameter_order` –'
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于正在针对多个参数集执行的批量 INSERT，请组织 RETURNING 的结果，使返回的行与传入的参数集的顺序相对应。这仅适用于支持方言的 [executemany](../glossary.html#term-executemany)
    执行，并且通常利用 [insertmanyvalues](../glossary.html#term-insertmanyvalues) 功能。
- en: New in version 2.0.10.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 2.0.10 开始。
- en: See also
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT (Core level discussion)'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 RETURNING 行与参数集相关联](connections.html#engine-insertmanyvalues-returning-order)
    - 关于批量 INSERT 的 RETURNING 行排序的背景（核心级别讨论）'
- en: '[Correlating RETURNING records with input data order](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - example of use with [ORM Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    (ORM level discussion)'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 RETURNING 记录与输入数据顺序相关联](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - 与 [ORM 批量 INSERT 语句](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    的使用示例（ORM 级别讨论）'
- en: See also
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - an alternative method
    tailored towards efficient fetching of server-side defaults and triggers for single-row
    INSERTs or UPDATEs.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - 针对单行 INSERT 或 UPDATE，旨在有效地获取服务器端默认值和触发器的替代方法。'
- en: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Represent an INSERT construct.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 INSERT 结构。
- en: The [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    object is created using the [`insert()`](#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    function.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    对象是使用 [`insert()`](#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    函数创建的。'
- en: '**Members**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[values()](#sqlalchemy.sql.expression.Insert.values), [returning()](#sqlalchemy.sql.expression.Insert.returning),
    [from_select()](#sqlalchemy.sql.expression.Insert.from_select), [inline()](#sqlalchemy.sql.expression.Insert.inline),
    [select](#sqlalchemy.sql.expression.Insert.select)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[values()](#sqlalchemy.sql.expression.Insert.values), [returning()](#sqlalchemy.sql.expression.Insert.returning),
    [from_select()](#sqlalchemy.sql.expression.Insert.from_select), [inline()](#sqlalchemy.sql.expression.Insert.inline),
    [select](#sqlalchemy.sql.expression.Insert.select)'
- en: '**Class signature**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") ([`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase"))
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    ([`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase"))
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*inherited from the* [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") *method of* [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase")'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") *方法的* [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase")'
- en: Specify a fixed VALUES clause for an INSERT statement, or the SET clause for
    an UPDATE.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为 INSERT 语句指定固定的 VALUES 子句，或为 UPDATE 指定 SET 子句。
- en: Note that the [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    and [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    constructs support per-execution time formatting of the VALUES and/or SET clauses,
    based on the arguments passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"). However, the [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") method can be used to “fix” a particular
    set of parameters into the statement.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    和 [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    构造支持根据传递给 [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 的参数，在执行时格式化 VALUES 和/或 SET 子句。然而，[`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") 方法可以用于将特定一组参数“固定”到语句中。
- en: Multiple calls to [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") will produce a new construct, each
    one with the parameter list modified to include the new parameters sent. In the
    typical case of a single dictionary of parameters, the newly passed keys will
    replace the same keys in the previous construct. In the case of a list-based “multiple
    values” construct, each new list of values is extended onto the existing list
    of values.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 多次调用 [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values "sqlalchemy.sql.expression.ValuesBase.values")
    将产生一个新的构造，每个构造的参数列表都会被修改以包含新传入的参数。在典型情况下，使用单个参数字典，新传入的键将替换前一个构造中的相同键。在基于列表的“多值”构造中，每个新的值列表都会被扩展到现有的值列表上。
- en: 'Parameters:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`**kwargs` –'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` –'
- en: 'key value pairs representing the string key of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") mapped to the value to be rendered into the VALUES
    or SET clause:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 键值对表示映射到要渲染到 VALUES 或 SET 子句中的值的 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 的字符串键：
- en: '[PRE13]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`*args` –'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*args` –'
- en: As an alternative to passing key/value parameters, a dictionary, tuple, or list
    of dictionaries or tuples can be passed as a single positional argument in order
    to form the VALUES or SET clause of the statement. The forms that are accepted
    vary based on whether this is an [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") or an [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct.
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为传递键/值参数的替代方案，可以将字典、元组或字典或元组的列表作为单个位置参数传递，以形成语句的 VALUES 或 SET 子句。接受的形式因为是 [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 还是 [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") 构造而��所不同。
- en: 'For either an [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    or [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct, a single dictionary can be passed, which works the same as that of
    the kwargs form:'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    或 [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    构造，可以传递一个单独的字典，其工作方式与 kwargs 形式相同：
- en: '[PRE14]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Also for either form but more typically for the [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, a tuple that contains an entry
    for every column in the table is also accepted:'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于任何形式，但更常见于 [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造，也可以接受包含表中每一列的条目的元组：
- en: '[PRE15]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct also supports being passed a list of dictionaries or full-table-tuples,
    which on the server will render the less common SQL syntax of “multiple values”
    - this syntax is supported on backends such as SQLite, PostgreSQL, MySQL, but
    not necessarily others:'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造还支持传递字典或完整表元组的列表，在服务器上会呈现较少见的SQL语法“多个值” - 这种语法在后端如SQLite、PostgreSQL、MySQL等支持，但不一定适用于其他后端：'
- en: '[PRE16]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The above form would render a multiple VALUES statement similar to:'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述形式将呈现类似于多个VALUES语句：
- en: '[PRE17]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: It is essential to note that **passing multiple values is NOT the same as using
    traditional executemany() form**. The above syntax is a **special** syntax not
    typically used. To emit an INSERT statement against multiple rows, the normal
    method is to pass a multiple values list to the [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, which is supported by all database
    backends and is generally more efficient for a very large number of parameters.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 必须注意，**传递多个值并不等同于使用传统的executemany()形式**。上述语法是一种**特殊**语法，通常不使用。要针对多行发出INSERT语句，正常的方法是将多个值列表传递给
    [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 方法，该方法受到所有数据库后端的支持，并且通常对大量参数更有效率。
- en: See also
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参见
- en: ''
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Sending Multiple Parameters](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - an introduction to the traditional Core method of multiple parameter set invocation
    for INSERTs and other statements.'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[发送多个参数](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - 介绍了用于INSERT和其他语句的多参数集调用的传统Core方法。'
- en: ''
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The UPDATE construct also supports rendering the SET parameters in a specific
    order. For this feature refer to the [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method.
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: UPDATE 构造还支持以特定顺序渲染 SET 参数。有关此功能，请参阅 [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") 方法。
- en: ''
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参见
- en: ''
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
- en: '[PRE18]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*inherited from the* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *method of* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *方法的* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
- en: Add a [RETURNING](../glossary.html#term-RETURNING) or equivalent clause to this
    statement.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为此语句添加一个 [RETURNING](../glossary.html#term-RETURNING) 或等效子句。
- en: 'e.g.:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The method may be invoked multiple times to add new entries to the list of expressions
    to be returned.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 可以多次调用该方法以向返回的表达式列表中添加新条目。
- en: 'New in version 1.4.0b2: The method may be invoked multiple times to add new
    entries to the list of expressions to be returned.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.0b2中：可以多次调用该方法以向返回的表达式列表中添加新条目。
- en: 'The given collection of column expressions should be derived from the table
    that is the target of the INSERT, UPDATE, or DELETE. While [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are typical, the elements can also be expressions:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的列表达式集合应派生自INSERT、UPDATE或DELETE的目标表。虽然 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象是典型的，但元素也可以是表达式：
- en: '[PRE20]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Upon compilation, a RETURNING clause, or database equivalent, will be rendered
    within the statement. For INSERT and UPDATE, the values are the newly inserted/updated
    values. For DELETE, the values are those of the rows which were deleted.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译时，将在语句中呈现RETURNING子句或数据库等效物。对于INSERT和UPDATE，值是新插入/更新的值。对于DELETE，值是被删除的行的值。
- en: Upon execution, the values of the columns to be returned are made available
    via the result set and can be iterated using [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") and similar. For DBAPIs which do not
    natively support returning values (i.e. cx_oracle), SQLAlchemy will approximate
    this behavior at the result level so that a reasonable amount of behavioral neutrality
    is provided.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行时，要返回的列的值通过结果集可用，并且可以使用 [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") 等进行迭代。对于不原生支持返回值的 DBAPI（即 cx_oracle），SQLAlchemy
    将在结果级别近似此行为，以便提供合理数量的行为中立性。
- en: Note that not all databases/DBAPIs support RETURNING. For those backends with
    no support, an exception is raised upon compilation and/or execution. For those
    who do support it, the functionality across backends varies greatly, including
    restrictions on executemany() and other statements which return multiple rows.
    Please read the documentation notes for the database in use in order to determine
    the availability of RETURNING.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非所有数据库/DBAPI都支持 RETURNING。对于那些没有支持的后端，在编译和/或执行时会引发异常。对于支持它的后端，跨后端的功能差异很大，包括对
    executemany() 和其他返回多行语句的限制。请阅读正在使用的数据库的文档注释，以确定 RETURNING 的可用性。
- en: 'Parameters:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*cols` – series of columns, SQL expressions, or whole tables entities to be
    returned.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*cols` – 要返回的一系列列、SQL 表达式或整个表实体。'
- en: '`sort_by_parameter_order` –'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort_by_parameter_order` –'
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于针对多个参数集执行的批量插入，组织 RETURNING 的结果，使返回的行与传入的参数集的顺序对应。这仅适用于支持方言的 [executemany](../glossary.html#term-executemany)
    执行，并且通常利用了 [insertmanyvalues](../glossary.html#term-insertmanyvalues) 特性。
- en: New in version 2.0.10.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 2.0.10 中新增。
- en: See also
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT (Core level discussion)'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 RETURNING 行与参数集相关联](connections.html#engine-insertmanyvalues-returning-order)
    - 关于批量插入的 RETURNING 行排序的背景（核心级别讨论）'
- en: '[Correlating RETURNING records with input data order](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - example of use with [ORM Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    (ORM level discussion)'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 RETURNING 记录与输入数据顺序相关联](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - 与 [ORM 批量插入语句](../orm/queryguide/dml.html#orm-queryguide-bulk-insert) 的使用示例（ORM
    级别讨论）'
- en: See also
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - an alternative method
    tailored towards efficient fetching of server-side defaults and triggers for single-row
    INSERTs or UPDATEs.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - 一种针对单行插入或更新的服务器端默认值和触发器的高效获取的替代方法。'
- en: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - 在 [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[PRE21]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Return a new [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct which represents an `INSERT...FROM SELECT` statement.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造，该构造表示一个 `INSERT...FROM SELECT` 语句。
- en: 'e.g.:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE22]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Parameters:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`names` – a sequence of string column names or [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects representing the target columns.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`names` – 字符串列名序列或表示目标列的 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象。'
- en: '`select` – a [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") or other construct which resolves into
    a [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause"),
    such as an ORM [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, etc. The order of columns returned from this FROM clause should correspond
    to the order of columns sent as the `names` parameter; while this is not checked
    before passing along to the database, the database would normally raise an exception
    if these column lists don’t correspond.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select` – 一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造，[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 或其他可解析为 [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 的构造，比如 ORM [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象等。此 FROM 子句返回的列的顺序应与作为 `names` 参数发送的列的顺序相对应；虽然在传递给数据库之前不会检查这一点，但如果这些列列表不对应，数据库通常会引发异常。'
- en: '`include_defaults` –'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_defaults` –'
- en: if True, non-server default values and SQL expressions as specified on [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects (as documented in [Column INSERT/UPDATE Defaults](defaults.html))
    not otherwise specified in the list of names will be rendered into the INSERT
    and SELECT statements, so that these values are also included in the data to be
    inserted.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则将在 INSERT 和 SELECT 语句中呈现在 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象上指定的非服务器默认值和 SQL 表达式（如 [Column INSERT/UPDATE Defaults](defaults.html)
    中记录的）中未在名称列表中另行指定的值，以便这些值也包含在要插入的数据中。
- en: Note
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: A Python-side default that uses a Python callable function will only be invoked
    **once** for the whole statement, and **not per row**.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 Python 可调用函数的 Python 端默认值仅在整个语句中被调用**一次**，而不是每行**一次**。
- en: '[PRE23]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Make this [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct “inline” .
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使此 [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造“内联”。
- en: When set, no attempt will be made to retrieve the SQL-generated default values
    to be provided within the statement; in particular, this allows SQL expressions
    to be rendered ‘inline’ within the statement without the need to pre-execute them
    beforehand; for backends that support “returning”, this turns off the “implicit
    returning” feature for the statement.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置时，不会尝试检索要在语句中提供的 SQL 生成的默认值；特别是，这允许 SQL 表达式在语句中“内联”呈现，而无需事先执行它们；对于支持“returning”的后端，这将关闭语句的“隐式返回”功能。
- en: 'Changed in version 1.4: the [`Insert.inline`](#sqlalchemy.sql.expression.Insert.params.inline
    "sqlalchemy.sql.expression.Insert") parameter is now superseded by the [`Insert.inline()`](#sqlalchemy.sql.expression.Insert.inline
    "sqlalchemy.sql.expression.Insert.inline") method.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起：[`Insert.inline`](#sqlalchemy.sql.expression.Insert.params.inline
    "sqlalchemy.sql.expression.Insert") 参数现已被 [`Insert.inline()`](#sqlalchemy.sql.expression.Insert.inline
    "sqlalchemy.sql.expression.Insert.inline") 方法取代。
- en: '[PRE24]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: SELECT statement for INSERT .. FROM SELECT
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 INSERT .. FROM SELECT 的 SELECT 语���
- en: '[PRE25]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Represent an Update construct.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 Update 构造。
- en: The [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    object is created using the [`update()`](#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    function.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`update()`](#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    函数创建 [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    对象。
- en: '**Members**'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[returning()](#sqlalchemy.sql.expression.Update.returning), [where()](#sqlalchemy.sql.expression.Update.where),
    [values()](#sqlalchemy.sql.expression.Update.values), [inline()](#sqlalchemy.sql.expression.Update.inline),
    [ordered_values()](#sqlalchemy.sql.expression.Update.ordered_values)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[returning()](#sqlalchemy.sql.expression.Update.returning), [where()](#sqlalchemy.sql.expression.Update.where),
    [values()](#sqlalchemy.sql.expression.Update.values), [inline()](#sqlalchemy.sql.expression.Update.inline),
    [ordered_values()](#sqlalchemy.sql.expression.Update.ordered_values)'
- en: '**Class signature**'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") (`sqlalchemy.sql.expression.DMLWhereBase`,
    [`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase"))
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    (`sqlalchemy.sql.expression.DMLWhereBase`, [`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase"))
- en: '[PRE26]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '*inherited from the* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *method of* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *方法的* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
- en: Add a [RETURNING](../glossary.html#term-RETURNING) or equivalent clause to this
    statement.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 向此语句添加 [RETURNING](../glossary.html#term-RETURNING) 或等效子句。
- en: 'e.g.:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE27]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The method may be invoked multiple times to add new entries to the list of expressions
    to be returned.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可以被多次调用，以向要返回的表达式列表中添加新条目。
- en: 'New in version 1.4.0b2: The method may be invoked multiple times to add new
    entries to the list of expressions to be returned.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.0b2 中添加：这种方法可以被多次调用，以向要返回的表达式列表中添加新条目。
- en: 'The given collection of column expressions should be derived from the table
    that is the target of the INSERT, UPDATE, or DELETE. While [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are typical, the elements can also be expressions:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的列表达式集合应源自 INSERT、UPDATE 或 DELETE 的目标表。虽然 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象是典型的，但元素也可以是表达式：
- en: '[PRE28]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Upon compilation, a RETURNING clause, or database equivalent, will be rendered
    within the statement. For INSERT and UPDATE, the values are the newly inserted/updated
    values. For DELETE, the values are those of the rows which were deleted.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译时，RETURNING 子句或数据库等效项将在语句中呈现。对于 INSERT 和 UPDATE，值是新插入/更新的值。对于 DELETE，值是已删除行的值。
- en: Upon execution, the values of the columns to be returned are made available
    via the result set and can be iterated using [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") and similar. For DBAPIs which do not
    natively support returning values (i.e. cx_oracle), SQLAlchemy will approximate
    this behavior at the result level so that a reasonable amount of behavioral neutrality
    is provided.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行时，要返回的列的值通过结果集提供，并且可以使用 [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") 等进行迭代。对于原生不支持返回值的 DBAPI（即 cx_oracle
    等），SQLAlchemy 将在结果级别近似此行为，以便提供合理数量的行为中性。
- en: Note that not all databases/DBAPIs support RETURNING. For those backends with
    no support, an exception is raised upon compilation and/or execution. For those
    who do support it, the functionality across backends varies greatly, including
    restrictions on executemany() and other statements which return multiple rows.
    Please read the documentation notes for the database in use in order to determine
    the availability of RETURNING.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非所有数据库/DBAPI都支持 RETURNING。对于那些不支持的后端，编译和/或执行时会引发异常。对于支持的后端，跨后端的功能差异很大，包括对
    executemany() 和其他返回多行的语句的限制。请阅读所使用数据库的文档注释，以确定 RETURNING 的可用性。
- en: 'Parameters:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*cols` – series of columns, SQL expressions, or whole tables entities to be
    returned.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*cols` – 要返回的一系列列、SQL 表达式或整个表实体。'
- en: '`sort_by_parameter_order` –'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort_by_parameter_order` –'
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于针对多个参数集执行的批量 INSERT，组织 RETURNING 的结果，使返回的行对应于传递的参数集的顺序。这仅适用于支持的方言的 executemany
    执行，并通常利用 insertmanyvalues 功能。
- en: New in version 2.0.10.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 2.0.10 中添加。
- en: See also
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT (Core level discussion)'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 RETURNING 行与参数集相关联](connections.html#engine-insertmanyvalues-returning-order)
    - 关于批量插入 RETURNING 行排序的背景（核心级讨论）'
- en: '[Correlating RETURNING records with input data order](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - example of use with [ORM Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    (ORM level discussion)'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 RETURNING 记录与输入数据顺序相关联](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - 与 [ORM 批量插入语句](../orm/queryguide/dml.html#orm-queryguide-bulk-insert) 一起使用的示例（ORM
    级讨论）'
- en: See also
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - an alternative method
    tailored towards efficient fetching of server-side defaults and triggers for single-row
    INSERTs or UPDATEs.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - 针对单行 INSERT 或 UPDATE
    的高效提取服务器端默认值和触发器的替代方法。'
- en: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE29]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '*inherited from the* `DMLWhereBase.where()` *method of* `DMLWhereBase`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `DMLWhereBase` *的* `DMLWhereBase.where()` *方法*'
- en: Return a new construct with the given expression(s) added to its WHERE clause,
    joined to the existing clause via AND, if any.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的结构，其中包含添加到其 WHERE 子句的给定表达式，并通过 AND 连接到现有子句（如果有）。
- en: Both [`Update.where()`](#sqlalchemy.sql.expression.Update.where "sqlalchemy.sql.expression.Update.where")
    and [`Delete.where()`](#sqlalchemy.sql.expression.Delete.where "sqlalchemy.sql.expression.Delete.where")
    support multiple-table forms, including database-specific `UPDATE...FROM` as well
    as `DELETE..USING`. For backends that don’t have multiple-table support, a backend
    agnostic approach to using multiple tables is to make use of correlated subqueries.
    See the linked tutorial sections below for examples.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Update.where()`](#sqlalchemy.sql.expression.Update.where "sqlalchemy.sql.expression.Update.where")
    和 [`Delete.where()`](#sqlalchemy.sql.expression.Delete.where "sqlalchemy.sql.expression.Delete.where")
    都支持多表形式，包括特定于数据库的 `UPDATE...FROM` 和 `DELETE..USING`。 对于不支持多表的后端，使用多表的后端不可知方法是利用相关子查询。
    有关示例，请参见下面的链接教程部分。'
- en: See also
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correlated Updates](../tutorial/data_update.html#tutorial-correlated-updates)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[相关更新](../tutorial/data_update.html#tutorial-correlated-updates)'
- en: '[UPDATE..FROM](../tutorial/data_update.html#tutorial-update-from)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '[UPDATE..FROM](../tutorial/data_update.html#tutorial-update-from)'
- en: '[Multiple Table Deletes](../tutorial/data_update.html#tutorial-multi-table-deletes)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[多表删除](../tutorial/data_update.html#tutorial-multi-table-deletes)'
- en: '[PRE30]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '*inherited from the* [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") *method of* [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase")'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase "sqlalchemy.sql.expression.ValuesBase")
    *的* [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values "sqlalchemy.sql.expression.ValuesBase.values")
    *方法*'
- en: Specify a fixed VALUES clause for an INSERT statement, or the SET clause for
    an UPDATE.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 指定 INSERT 语句的固定 VALUES 子句，或者 UPDATE 的 SET 子句。
- en: Note that the [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    and [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    constructs support per-execution time formatting of the VALUES and/or SET clauses,
    based on the arguments passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"). However, the [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") method can be used to “fix” a particular
    set of parameters into the statement.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    和 [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    结构支持基于传递给 [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 的参数对 VALUES 和/或 SET 子句进行每次执行时间格式化。 但是，[`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") 方法可用于将特定的一组参数“固定”到语句中。
- en: Multiple calls to [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") will produce a new construct, each
    one with the parameter list modified to include the new parameters sent. In the
    typical case of a single dictionary of parameters, the newly passed keys will
    replace the same keys in the previous construct. In the case of a list-based “multiple
    values” construct, each new list of values is extended onto the existing list
    of values.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 对 [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values "sqlalchemy.sql.expression.ValuesBase.values")
    的多次调用将产生一个新的结构，每个结构的参数列表都被修改以包含发送的新参数。 在单个参数字典的典型情况下，新传递的键将替换上一个结构中的相同键。 在基于列表的“多个值”结构的情况下，每个新值列表都被扩展到现有值列表上。
- en: 'Parameters:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`**kwargs` –'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` –'
- en: 'key value pairs representing the string key of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") mapped to the value to be rendered into the VALUES
    or SET clause:'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代表要渲染到 VALUES 或 SET 子句中的值的字符串键的键值对：
- en: '[PRE31]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '`*args` –'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*args` –'
- en: As an alternative to passing key/value parameters, a dictionary, tuple, or list
    of dictionaries or tuples can be passed as a single positional argument in order
    to form the VALUES or SET clause of the statement. The forms that are accepted
    vary based on whether this is an [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") or an [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct.
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为传递键/值参数的替代方案，可以将字典、元组或字典或元组的列表作为单个位置参数传递，以形成语句的 VALUES 或 SET 子句。所接受的形式因为这是否是一个[`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")或[`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") 构造而异。
- en: 'For either an [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    or [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct, a single dictionary can be passed, which works the same as that of
    the kwargs form:'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    或 [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    构造，也可以传递单个字典，其工作方式与 kwargs 形式相同：
- en: '[PRE32]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Also for either form but more typically for the [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, a tuple that contains an entry
    for every column in the table is also accepted:'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 也适用于任何形式，但更常见的是对于[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造，也接受包含表中每列的条目的元组：
- en: '[PRE33]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct also supports being passed a list of dictionaries or full-table-tuples,
    which on the server will render the less common SQL syntax of “multiple values”
    - this syntax is supported on backends such as SQLite, PostgreSQL, MySQL, but
    not necessarily others:'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造还支持传递字典或完整表元组的列表，在服务器上，这将呈现较不常见的 SQL 语法“多个值” - 此语法支持后端，例如 SQLite、PostgreSQL、MySQL，但不一定支持其他后端：'
- en: '[PRE34]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The above form would render a multiple VALUES statement similar to:'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述形式将呈现类似于多个 VALUES 语句：
- en: '[PRE35]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: It is essential to note that **passing multiple values is NOT the same as using
    traditional executemany() form**. The above syntax is a **special** syntax not
    typically used. To emit an INSERT statement against multiple rows, the normal
    method is to pass a multiple values list to the [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, which is supported by all database
    backends and is generally more efficient for a very large number of parameters.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 必须注意**传递多个值并不等同于使用传统的 executemany() 形式**。上述语法是一个**特殊**语法，通常不使用。要针对多行发出 INSERT
    语句，正常方法是将多个值列表传递给[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 方法，此方法受到所有数据库后端的支持，并且对于非常多的参数通常更有效率。
- en: See also
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参阅
- en: ''
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Sending Multiple Parameters](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - an introduction to the traditional Core method of multiple parameter set invocation
    for INSERTs and other statements.'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[发送多个参数](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - 介绍传统 Core 方法的多参数集调用方式，用于 INSERT 和其他语句。'
- en: ''
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The UPDATE construct also supports rendering the SET parameters in a specific
    order. For this feature refer to the [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method.
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: UPDATE 构造还支持按特定顺序渲染 SET 参数。有关此功能，请参阅[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") 方法。
- en: ''
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参阅
- en: ''
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
- en: '[PRE36]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Make this [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct “inline” .
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 将此[`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    构造“内联”。
- en: When set, SQL defaults present on [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects via the `default` keyword will be compiled
    ‘inline’ into the statement and not pre-executed. This means that their values
    will not be available in the dictionary returned from [`CursorResult.last_updated_params()`](connections.html#sqlalchemy.engine.CursorResult.last_updated_params
    "sqlalchemy.engine.CursorResult.last_updated_params").
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置时，通过`default`关键字在[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象上存在的SQL默认值将被‘内联’编译到语句中，而不是预先执行。这意味着它们的值不会在从[`CursorResult.last_updated_params()`](connections.html#sqlalchemy.engine.CursorResult.last_updated_params
    "sqlalchemy.engine.CursorResult.last_updated_params")返回的字典中可用。
- en: 'Changed in version 1.4: the [`update.inline`](#sqlalchemy.sql.expression.update.params.inline
    "sqlalchemy.sql.expression.update") parameter is now superseded by the [`Update.inline()`](#sqlalchemy.sql.expression.Update.inline
    "sqlalchemy.sql.expression.Update.inline") method.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：[`update.inline`](#sqlalchemy.sql.expression.update.params.inline
    "sqlalchemy.sql.expression.update")参数现在被[`Update.inline()`](#sqlalchemy.sql.expression.Update.inline
    "sqlalchemy.sql.expression.Update.inline")方法取代。
- en: '[PRE37]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Specify the VALUES clause of this UPDATE statement with an explicit parameter
    ordering that will be maintained in the SET clause of the resulting UPDATE statement.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 使用显式参数顺序指定此UPDATE语句的VALUES子句，该顺序将在生成的UPDATE语句的SET子句中保持不变。
- en: 'E.g.:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE38]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: See also
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Parameter Ordered Updates](../tutorial/data_update.html#tutorial-parameter-ordered-updates)
    - full example of the [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '[参数顺序更新](../tutorial/data_update.html#tutorial-parameter-ordered-updates) -
    [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values "sqlalchemy.sql.expression.Update.ordered_values")
    方法的完整示例。'
- en: 'Changed in version 1.4: The [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method supersedes the [`update.preserve_parameter_order`](#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update") parameter, which will be removed in SQLAlchemy
    2.0.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") 方法取代了[`update.preserve_parameter_order`](#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update")参数，该参数将在SQLAlchemy 2.0中被移除。
- en: '[PRE39]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Form the base for `INSERT`, `UPDATE`, and `DELETE` statements.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 为`INSERT`、`UPDATE`和`DELETE`语句提供基础。
- en: '**Members**'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[entity_description](#sqlalchemy.sql.expression.UpdateBase.entity_description),
    [exported_columns](#sqlalchemy.sql.expression.UpdateBase.exported_columns), [params()](#sqlalchemy.sql.expression.UpdateBase.params),
    [return_defaults()](#sqlalchemy.sql.expression.UpdateBase.return_defaults), [returning()](#sqlalchemy.sql.expression.UpdateBase.returning),
    [returning_column_descriptions](#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions),
    [with_dialect_options()](#sqlalchemy.sql.expression.UpdateBase.with_dialect_options),
    [with_hint()](#sqlalchemy.sql.expression.UpdateBase.with_hint)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '[entity\\_description](#sqlalchemy.sql.expression.UpdateBase.entity_description),
    [exported\\_columns](#sqlalchemy.sql.expression.UpdateBase.exported_columns),
    [params()](#sqlalchemy.sql.expression.UpdateBase.params), [return\\_defaults()](#sqlalchemy.sql.expression.UpdateBase.return_defaults),
    [returning()](#sqlalchemy.sql.expression.UpdateBase.returning), [returning\\_column\\_descriptions](#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions),
    [with\\_dialect\\_options()](#sqlalchemy.sql.expression.UpdateBase.with_dialect_options),
    [with\\_hint()](#sqlalchemy.sql.expression.UpdateBase.with_hint)'
- en: '**Class signature**'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase") (`sqlalchemy.sql.roles.DMLRole`, [`sqlalchemy.sql.expression.HasCTE`](selectable.html#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"), `sqlalchemy.sql.expression.HasCompileState`,
    [`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.sql.expression.HasPrefixes`](selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), `sqlalchemy.sql.expression.Generative`,
    `sqlalchemy.sql.expression.ExecutableReturnsRows`, [`sqlalchemy.sql.expression.ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement"))
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase") (`sqlalchemy.sql.roles.DMLRole`, [`sqlalchemy.sql.expression.HasCTE`](selectable.html#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"), `sqlalchemy.sql.expression.HasCompileState`,
    [`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.sql.expression.HasPrefixes`](selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), `sqlalchemy.sql.expression.Generative`,
    `sqlalchemy.sql.expression.ExecutableReturnsRows`, [`sqlalchemy.sql.expression.ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement"))
- en: '[PRE40]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Return a [plugin-enabled](../glossary.html#term-plugin-enabled) description
    of the table and/or entity which this DML construct is operating against.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 返回针对此 DML 构造操作的表和/或实体的[启用插件](../glossary.html#term-plugin-enabled)描述。
- en: This attribute is generally useful when using the ORM, as an extended structure
    which includes information about mapped entities is returned. The section [Inspecting
    entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    contains more background.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 ORM 时，此属性通常很有用，因为它返回了一个扩展的结构，其中包含有关映射实体的信息。有关更多背景信息，请参阅 [从 ORM 启用的 SELECT
    和 DML 语句中检查实体和列](../orm/queryguide/api.html#queryguide-inspection)。
- en: 'For a Core statement, the structure returned by this accessor is derived from
    the `UpdateBase.table` attribute, and refers to the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") being inserted, updated, or deleted:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 对于核心语句，此访问器返回的结构派生自 `UpdateBase.table` 属性，并引用正在插入、更新或删除的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")：
- en: '[PRE41]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: New in version 1.4.33.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能，版本1.4.33。
- en: See also
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UpdateBase.returning_column_descriptions`](#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions")'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.returning_column_descriptions`](#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions")'
- en: '[`Select.column_descriptions`](selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") - entity information for
    a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.column_descriptions`](selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") - [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造的实体信息'
- en: '[Inspecting entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    - ORM background'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '[从 ORM 启用的 SELECT 和 DML 语句中检查实体和列](../orm/queryguide/api.html#queryguide-inspection)
    - ORM 背景'
- en: '[PRE42]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Return the RETURNING columns as a column collection for this statement.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 返回该语句的 RETURNING 列作为列集合。
- en: New in version 1.4.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能，版本1.4。
- en: '[PRE43]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Set the parameters for the statement.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 设置语句的参数。
- en: This method raises `NotImplementedError` on the base class, and is overridden
    by [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase "sqlalchemy.sql.expression.ValuesBase")
    to provide the SET/VALUES clause of UPDATE and INSERT.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在基类上引发 `NotImplementedError`，并由[`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase")覆盖以提供 UPDATE 和 INSERT 的 SET/VALUES 子句。
- en: '[PRE44]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Make use of a [RETURNING](../glossary.html#term-RETURNING) clause for the purpose
    of fetching server-side expressions and defaults, for supporting backends only.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 利用[RETURNING](../glossary.html#term-RETURNING)子句以获取服务器端表达式和默认值，仅支持后端。
- en: Deep Alchemy
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 深度炼金术
- en: The [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") method is used by the
    ORM for its internal work in fetching newly generated primary key and server default
    values, in particular to provide the underyling implementation of the [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") ORM feature as well as to allow RETURNING support with
    bulk ORM inserts. Its behavior is fairly idiosyncratic and is not really intended
    for general use. End users should stick with using [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") in order to add RETURNING clauses
    to their INSERT, UPDATE and DELETE statements.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults")方法被ORM用于其内部工作中，用于获取新生成的主键和服务器默认值，特别是为了提供[`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") ORM 特性的底层实现，以及允许在批量ORM插入中支持 RETURNING。其行为相当特殊，实际上不适合一般使用。最终用户应坚持使用[`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")来为他们的 INSERT、UPDATE 和 DELETE
    语句添加 RETURNING 子句。'
- en: Normally, a single row INSERT statement will automatically populate the [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute when executed,
    which stores the primary key of the row that was just inserted in the form of
    a [`Row`](connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row") object
    with column names as named tuple keys (and the [`Row._mapping`](connections.html#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") view fully populated as well). The dialect in
    use chooses the strategy to use in order to populate this data; if it was generated
    using server-side defaults and / or SQL expressions, dialect-specific approaches
    such as `cursor.lastrowid` or `RETURNING` are typically used to acquire the new
    primary key value.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，执行单行 INSERT 语句时，会自动填充[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")属性，该属性存储了刚刚插入的行的主键，以[`Row`](connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象的形式，列名作为命名元组键（并且[`Row._mapping`](connections.html#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping")视图也完全填充）。使用的方言选择用于填充这些数据的策略；如果是使用服务器端默认值和/或SQL表达式生成的，则通常使用特定于方言的方法（如`cursor.lastrowid`或`RETURNING`）来获取新的主键值。
- en: However, when the statement is modified by calling [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") before executing the statement,
    additional behaviors take place **only** for backends that support RETURNING and
    for [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that maintain the [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") parameter at its default value of `True`. In these
    cases, when the [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") is returned from the statement’s execution,
    not only will [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") be populated as always,
    the [`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults") attribute will also be populated
    with a [`Row`](connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    named-tuple representing the full range of server generated values from that single
    row, including values for any columns that specify [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") or which make use of [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") using a SQL expression.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在执行语句之前通过调用[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults")修改语句时，只有支持RETURNING并且将[`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table")参数维持在其默认值`True`的后端以及维护[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的其他行为才会发生。在这些情况下，当从语句的执行返回[`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")时，不仅[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")将像往常一样被填充，[`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults")属性还将被填充为一个名为[`Row`](connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")的命名元组，代表该单行的完整服务器生成值范围，包括任何指定[`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")或使用SQL表达式的[`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column")的列的值。
- en: When invoking INSERT statements with multiple rows using [insertmanyvalues](connections.html#engine-insertmanyvalues),
    the [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") modifier will have the
    effect of the [`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows") and [`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows") attributes being fully
    populated with lists of [`Row`](connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects representing newly inserted primary key values as well as newly inserted
    server generated values for each row inserted. The [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") and [`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults") attributes will also continue
    to be populated with the first row of these two collections.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[insertmanyvalues](connections.html#engine-insertmanyvalues)调用多行的INSERT语句时，[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults")修饰符将会影响[`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows")和[`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows")属性被完全填充为代表每行新插入的主键值以及新插入的服务器生成值的[`Row`](connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象列表。[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")和[`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults")属性也将继续被填充为这两个集合的第一行。
- en: If the backend does not support RETURNING or the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") in use has disabled [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table"), then no RETURNING clause is added and no additional
    data is fetched, however the INSERT, UPDATE or DELETE statement proceeds normally.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如果后端不支持 RETURNING 或者正在使用的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    已经禁用了 [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table")，那么就不会添加 RETURNING 子句，也不会获取任何额外的数据，但是 INSERT、UPDATE
    或 DELETE 语句会正常执行。
- en: 'E.g.:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE45]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: When used against an UPDATE statement [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") instead looks for columns
    that include [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") or [`Column.server_onupdate`](metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") parameters assigned, when constructing the columns
    that will be included in the RETURNING clause by default if explicit columns were
    not specified. When used against a DELETE statement, no columns are included in
    RETURNING by default, they instead must be specified explicitly as there are no
    columns that normally change values when a DELETE statement proceeds.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 当用于 UPDATE 语句时，[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") 会查找包含 [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") 或 [`Column.server_onupdate`](metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") 参数的列，当构造默认情况下将包含在 RETURNING 子句中的列时（如果未明确指定列）。当用于 DELETE
    语句时，默认情况下不会包含任何列在 RETURNING 中，而是必须明确指定，因为在 DELETE 语句执行时通常不会更改值的列。
- en: 'New in version 2.0: [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") is supported for DELETE
    statements also and has been moved from [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase") to [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase").'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始：[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") 也支持 DELETE 语句，并且已从 [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase") 移动到 [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")。
- en: The [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") method is mutually exclusive
    against the [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") method and errors will be raised
    during the SQL compilation process if both are used at the same time on one statement.
    The RETURNING clause of the INSERT, UPDATE or DELETE statement is therefore controlled
    by only one of these methods at a time.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") 方法与 [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") 方法互斥，在同一条语句上同时使用两者会在 SQL 编译过程中引发错误。因此，INSERT、UPDATE
    或 DELETE 语句的 RETURNING 子句一次只能由其中一个方法控制。'
- en: 'The [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") method differs from [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") in these ways:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") 方法与 [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") 在以下方面不同：'
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") method causes the [`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults") collection to be populated
    with the first row from the RETURNING result. This attribute is not populated
    when using [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning").'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults")方法导致[`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults")集合被填充为RETURNING结果的第一行。当使用[`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")时，此属性不会被填充。'
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") is compatible with existing
    logic used to fetch auto-generated primary key values that are then populated
    into the [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute. By contrast,
    using [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") will have the effect of the
    [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute being left unpopulated.'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults")与用于获取自动生成的主键值并将其填充到[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")属性的现有逻辑兼容。相比之下，使用[`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")将导致[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")属性保持未填充状态。'
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") can be called against
    any backend. Backends that don’t support RETURNING will skip the usage of the
    feature, rather than raising an exception, *unless* `supplemental_cols` is passed.
    The return value of [`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults") will be `None` for backends
    that don’t support RETURNING or for which the target [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") sets [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") to `False`.'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults")可以针对任何后端调用。不支持RETURNING的后端将跳过该功能的使用，而不是引发异常，*除非*传递了`supplemental_cols`。对于不支持RETURNING或目标[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")设置[`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table")为`False`的后端，[`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults")的返回值将为`None`。'
- en: An INSERT statement invoked with executemany() is supported if the backend database
    driver supports the [insertmanyvalues](connections.html#engine-insertmanyvalues)
    feature which is now supported by most SQLAlchemy-included backends. When executemany
    is used, the [`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows") and [`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows") accessors will return
    the inserted defaults and primary keys.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`executemany()`调用的INSERT语句在后端数据库驱动程序支持[insertmanyvalues](connections.html#engine-insertmanyvalues)功能的情况下得到支持，这个功能现在大多数包含在SQLAlchemy中的后端都支持。当使用`executemany`时，[`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows")和[`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows")访问器将返回插入的默认值和主键。
- en: 'New in version 1.4: Added [`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows") and [`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows") accessors. In version
    2.0, the underlying implementation which fetches and populates the data for these
    attributes was generalized to be supported by most backends, whereas in 1.4 they
    were only supported by the `psycopg2` driver.'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4版本中新增：添加了[`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows")和[`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows")访问器。在2.0版本中，用于获取和填充这些属性的底层实现被泛化以支持大多数后端，而在1.4版本中，它们仅由`psycopg2`驱动程序支持。
- en: 'Parameters:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`cols` – optional list of column key names or [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that acts as a filter for those columns that will
    be fetched.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cols` – 可选的列键名列表或[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")，作为过滤器用于将要获取的列。'
- en: '`supplemental_cols` –'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`supplemental_cols` –'
- en: optional list of RETURNING expressions, in the same form as one would pass to
    the [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") method. When present, the additional
    columns will be included in the RETURNING clause, and the [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") object will be “rewound” when returned, so that
    methods like [`CursorResult.all()`](connections.html#sqlalchemy.engine.CursorResult.all
    "sqlalchemy.engine.CursorResult.all") will return new rows mostly as though the
    statement used [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") directly. However, unlike when
    using [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") directly, the **order of the
    columns is undefined**, so can only be targeted using names or [`Row._mapping`](connections.html#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") keys; they cannot reliably be targeted positionally.
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的RETURNING表达式列表，与[`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")方法传递的形式相同。当存在时，额外的列将包含在RETURNING子句中，并且在返回时，[`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")对象将被“倒带”，以便像[`CursorResult.all()`](connections.html#sqlalchemy.engine.CursorResult.all
    "sqlalchemy.engine.CursorResult.all")这样的方法将以大部分方式返回新行，就好像语句直接使用了[`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")。但是，与直接使用[`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")时不同，列的顺序是未定义的，因此只能使用名称或[`Row._mapping`](connections.html#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping")键来定位它们；它们不能可靠地以位置为目标。
- en: New in version 2.0.
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0版本中新增。
- en: '`sort_by_parameter_order` –'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort_by_parameter_order` –'
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于正在针对多个参数集执行的批量插入，组织返回的RETURNING结果，使返回的行与传递的参数集的顺序相对应。这仅适用于支持方言的[executemany](../glossary.html#term-executemany)执行，并且通常利用[insertmanyvalues](../glossary.html#term-insertmanyvalues)功能。
- en: New in version 2.0.10.
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0.10版本中新增。
- en: See also
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将返回的行与参数集相关联](connections.html#engine-insertmanyvalues-returning-order) -
    关于批量插入的返回行排序的背景知识'
- en: See also
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")'
- en: '[`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults")'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults")'
- en: '[`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows")'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows")'
- en: '[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")'
- en: '[`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows")'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows")'
- en: '[PRE46]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Add a [RETURNING](../glossary.html#term-RETURNING) or equivalent clause to this
    statement.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 向该语句添加一个 [RETURNING](../glossary.html#term-RETURNING) 或等效子句。
- en: 'e.g.:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE47]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The method may be invoked multiple times to add new entries to the list of expressions
    to be returned.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法可以多次调用以向要返回的表达式列表添加新条目。
- en: 'New in version 1.4.0b2: The method may be invoked multiple times to add new
    entries to the list of expressions to be returned.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.0b2 开始新添加：该方法可以多次调用以向要返回的表达式列表添加新条目。
- en: 'The given collection of column expressions should be derived from the table
    that is the target of the INSERT, UPDATE, or DELETE. While [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are typical, the elements can also be expressions:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的列表达式集合应该来源于作为 INSERT、UPDATE 或 DELETE 目标的表。虽然 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象很典型，但元素也可以是表达式：
- en: '[PRE48]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Upon compilation, a RETURNING clause, or database equivalent, will be rendered
    within the statement. For INSERT and UPDATE, the values are the newly inserted/updated
    values. For DELETE, the values are those of the rows which were deleted.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译时，RETURNING 子句或数据库等效项将在语句内呈现。对于 INSERT 和 UPDATE，这些值是新插入/更新的值。对于 DELETE，这些值是被删除的行的值。
- en: Upon execution, the values of the columns to be returned are made available
    via the result set and can be iterated using [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") and similar. For DBAPIs which do not
    natively support returning values (i.e. cx_oracle), SQLAlchemy will approximate
    this behavior at the result level so that a reasonable amount of behavioral neutrality
    is provided.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行时，要返回的列的值通过结果集可用，并且可以使用 [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") 等进行迭代。对于不本地支持返回值的 DBAPI（即 cx_oracle），SQLAlchemy
    将在结果级别上近似此行为，以便提供合理数量的行为中立性。
- en: Note that not all databases/DBAPIs support RETURNING. For those backends with
    no support, an exception is raised upon compilation and/or execution. For those
    who do support it, the functionality across backends varies greatly, including
    restrictions on executemany() and other statements which return multiple rows.
    Please read the documentation notes for the database in use in order to determine
    the availability of RETURNING.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非所有数据库/DBAPI都支持 RETURNING。对于没有支持的后端，在编译和/或执行时会引发异常。对于支持的后端，跨后端的功能差异很大，包括对
    executemany() 和其他返回多行的语句的限制。请阅读正在使用的数据库的文档说明，以确定 RETURNING 的可用性。
- en: 'Parameters:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*cols` – series of columns, SQL expressions, or whole tables entities to be
    returned.'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*cols` – 一系列列、SQL 表达式或整个表实体，要返回。'
- en: '`sort_by_parameter_order` –'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort_by_parameter_order` –'
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于正在执行针对多个参数集的批量 INSERT，组织 RETURNING 的结果，以便返回的行与传入的参数集的顺序对应。这仅适用于对支持的方言执行的 [executemany](../glossary.html#term-executemany)
    操作，通常利用 [insertmanyvalues](../glossary.html#term-insertmanyvalues) 功能。
- en: New in version 2.0.10.
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 2.0.10 开始新添加。
- en: See also
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT (Core level discussion)'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 RETURNING 行相关联到参数集](connections.html#engine-insertmanyvalues-returning-order)
    - 对批量 INSERT 的 RETURNING 行排序的背景信息（核心级别讨论）'
- en: '[Correlating RETURNING records with input data order](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - example of use with [ORM Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    (ORM level discussion)'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 RETURNING 记录与输入数据顺序相关联](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - 与 [ORM 大批量 INSERT 语句](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    使用示例（ORM 级别讨论）'
- en: See also
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - an alternative method
    tailored towards efficient fetching of server-side defaults and triggers for single-row
    INSERTs or UPDATEs.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - 针对单行 INSERT 或 UPDATE，针对高效获取服务器端默认值和触发器的替代方法。'
- en: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - 在 [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[PRE49]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Return a [plugin-enabled](../glossary.html#term-plugin-enabled) description
    of the columns which this DML construct is RETURNING against, in other words the
    expressions established as part of [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning").
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 DML 构造体返回的列的 [插件启用](../glossary.html#term-plugin-enabled) 描述，换句话说，作为 [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") 的一部分建立的表达式。
- en: This attribute is generally useful when using the ORM, as an extended structure
    which includes information about mapped entities is returned. The section [Inspecting
    entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    contains more background.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 ORM 时，此属性通常很有用，因为返回的扩展结构包含有关映射实体的信息。该部分 [从 ORM 启用的 SELECT 和 DML 语句中检查实体和列](../orm/queryguide/api.html#queryguide-inspection)
    包含更多背景信息。
- en: 'For a Core statement, the structure returned by this accessor is derived from
    the same objects that are returned by the [`UpdateBase.exported_columns`](#sqlalchemy.sql.expression.UpdateBase.exported_columns
    "sqlalchemy.sql.expression.UpdateBase.exported_columns") accessor:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 对于核心语句，此访问器返回的结构源自与 [`UpdateBase.exported_columns`](#sqlalchemy.sql.expression.UpdateBase.exported_columns
    "sqlalchemy.sql.expression.UpdateBase.exported_columns") 访问器返回的相同对象：
- en: '[PRE50]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: New in version 1.4.33.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.33 中的新功能。
- en: See also
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UpdateBase.entity_description`](#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description")'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.entity_description`](#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description")'
- en: '[`Select.column_descriptions`](selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") - entity information for
    a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.column_descriptions`](selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") - 用于 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造的实体信息'
- en: '[Inspecting entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    - ORM background'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '[从 ORM 启用的 SELECT 和 DML 语句中检查实体和列](../orm/queryguide/api.html#queryguide-inspection)
    - ORM 背景'
- en: '[PRE51]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Add dialect options to this INSERT/UPDATE/DELETE object.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 将方言选项添加到此 INSERT/UPDATE/DELETE 对象中。
- en: 'e.g.:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE52]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Add a table hint for a single table to this INSERT/UPDATE/DELETE statement.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 将单个表的表提示添加到此 INSERT/UPDATE/DELETE 语句中。
- en: Note
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`UpdateBase.with_hint()`](#sqlalchemy.sql.expression.UpdateBase.with_hint
    "sqlalchemy.sql.expression.UpdateBase.with_hint") currently applies only to Microsoft
    SQL Server. For MySQL INSERT/UPDATE/DELETE hints, use `UpdateBase.prefix_with()`.'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.with_hint()`](#sqlalchemy.sql.expression.UpdateBase.with_hint
    "sqlalchemy.sql.expression.UpdateBase.with_hint") 目前仅适用于 Microsoft SQL Server。对于
    MySQL INSERT/UPDATE/DELETE 提示，请使用 `UpdateBase.prefix_with()`。'
- en: The text of the hint is rendered in the appropriate location for the database
    backend in use, relative to the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that is the subject of this statement, or optionally
    to that of the given [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    passed as the `selectable` argument.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 提示文本在使用的数据库后端的适当位置呈现，与此语句的主题 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 相对应，或者可选地，相对于传递为 `selectable` 参数的给定 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。
- en: 'The `dialect_name` option will limit the rendering of a particular hint to
    a particular backend. Such as, to add a hint that only takes effect for SQL Server:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`dialect_name`选项将限制特定后端的特定提示的呈现。例如，要添加一个仅在SQL Server中生效的提示：'
- en: '[PRE54]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Parameters:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`text` – Text of the hint.'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text` – 提示的文本。'
- en: '`selectable` – optional [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that specifies an element of the FROM clause within an UPDATE or DELETE to be
    the subject of the hint - applies only to certain backends.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectable` – 可选的[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，指定在UPDATE或DELETE中作为提示主题的FROM子句的元素
    - 仅适用于某些后端。'
- en: '`dialect_name` – defaults to `*`, if specified as the name of a particular
    dialect, will apply these hints only when that dialect is in use.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 默认为`*`，如果指定为特定方言的名称，将仅在使用该方言时应用这些提示。'
- en: '[PRE55]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Supplies support for [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") to INSERT and UPDATE constructs.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 为INSERT和UPDATE构造提供对[`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values")的支持。
- en: '**Members**'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[select](#sqlalchemy.sql.expression.ValuesBase.select), [values()](#sqlalchemy.sql.expression.ValuesBase.values)'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '[select](#sqlalchemy.sql.expression.ValuesBase.select), [values()](#sqlalchemy.sql.expression.ValuesBase.values)'
- en: '**Class signature**'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase") ([`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase"))
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase") ([`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase"))
- en: '[PRE56]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: SELECT statement for INSERT .. FROM SELECT
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 用于INSERT .. FROM SELECT的SELECT语句
- en: '[PRE57]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Specify a fixed VALUES clause for an INSERT statement, or the SET clause for
    an UPDATE.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 为INSERT语句指定一个固定的VALUES子句，或者为UPDATE指定SET子句。
- en: Note that the [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    and [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    constructs support per-execution time formatting of the VALUES and/or SET clauses,
    based on the arguments passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"). However, the [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") method can be used to “fix” a particular
    set of parameters into the statement.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")和[`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造支持基于传递给[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")的参数对VALUES和/或SET子句进行每次执行时的格式化。但是，[`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values")方法可用于将特定一组参数“固定”到语句中。
- en: Multiple calls to [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") will produce a new construct, each
    one with the parameter list modified to include the new parameters sent. In the
    typical case of a single dictionary of parameters, the newly passed keys will
    replace the same keys in the previous construct. In the case of a list-based “multiple
    values” construct, each new list of values is extended onto the existing list
    of values.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 对[`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values "sqlalchemy.sql.expression.ValuesBase.values")的多次调用将产生一个新的构造，每个构造的参数列表都会修改以包含发送的新参数。在单个参数字典的典型情况下，新传递的键将替换先前构造中的相同键。在基于列表的“多个值”构造的情况下，每个新值列表都会扩展到现有值列表上。
- en: 'Parameters:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`**kwargs` –'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` –'
- en: 'key value pairs representing the string key of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") mapped to the value to be rendered into the VALUES
    or SET clause:'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表示要映射到VALUES或SET子句中的值的[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")的字符串键值对：
- en: '[PRE58]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '`*args` –'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*args` –'
- en: As an alternative to passing key/value parameters, a dictionary, tuple, or list
    of dictionaries or tuples can be passed as a single positional argument in order
    to form the VALUES or SET clause of the statement. The forms that are accepted
    vary based on whether this is an [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") or an [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct.
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为传递键/值参数的替代方案，可以将字典、元组或字典列表或元组作为单个位置参数传递，以形成语句的VALUES或SET子句。接受的形式因是[`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")还是[`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造而异。
- en: 'For either an [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    or [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct, a single dictionary can be passed, which works the same as that of
    the kwargs form:'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")或[`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造，可以传递一个单独的字典，其工作方式与kwargs形式相同：
- en: '[PRE59]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Also for either form but more typically for the [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, a tuple that contains an entry
    for every column in the table is also accepted:'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于任何形式，但更典型的是[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")构造，也可以接受包含表中每一列条目的元组：
- en: '[PRE60]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct also supports being passed a list of dictionaries or full-table-tuples,
    which on the server will render the less common SQL syntax of “multiple values”
    - this syntax is supported on backends such as SQLite, PostgreSQL, MySQL, but
    not necessarily others:'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")构造还支持传递一个字典列表或完整表元组，服务器上将呈现较不常见的SQL语法“多个值”
    - 此语法在后端（如SQLite、PostgreSQL、MySQL）上受支持，但不一定适用于其他后端：'
- en: '[PRE61]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The above form would render a multiple VALUES statement similar to:'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述形式将呈现类似于多个VALUES语句：
- en: '[PRE62]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: It is essential to note that **passing multiple values is NOT the same as using
    traditional executemany() form**. The above syntax is a **special** syntax not
    typically used. To emit an INSERT statement against multiple rows, the normal
    method is to pass a multiple values list to the [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, which is supported by all database
    backends and is generally more efficient for a very large number of parameters.
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 需要注意的是**传递多个值并不等同于使用传统的executemany()形式**。上述语法是一种**特殊**的语法，通常不常用。要对多行发出INSERT语句，正常方法是将多个值列表传递给[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法，这种方法受到所有数据库后端的支持，并且对于非常大量的参数通常更有效率。
- en: See also
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参阅
- en: ''
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Sending Multiple Parameters](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - an introduction to the traditional Core method of multiple parameter set invocation
    for INSERTs and other statements.'
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[发送多个参数](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - 介绍了用于INSERT和其他语句的传统Core方法的多参数集调用。'
- en: ''
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The UPDATE construct also supports rendering the SET parameters in a specific
    order. For this feature refer to the [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method.
  id: totrans-383
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: UPDATE构造还支持按特定顺序呈现SET参数。有关此功能，请参考[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")方法。
- en: ''
  id: totrans-384
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  id: totrans-385
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参阅
- en: ''
  id: totrans-386
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
- en: '## DML Foundational Constructors'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '## DML 基础构造'
- en: Top level “INSERT”, “UPDATE”, “DELETE” constructors.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 顶层“INSERT”、“UPDATE”、“DELETE”构造函数。
- en: '| Object Name | Description |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [delete](#sqlalchemy.sql.expression.delete)(table) | Construct [`Delete`](#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") object. |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| [delete](#sqlalchemy.sql.expression.delete)(table) | 构造[`Delete`](#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")对象。 |'
- en: '| [insert](#sqlalchemy.sql.expression.insert)(table) | Construct an [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") object. |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
  zh: '| [insert](#sqlalchemy.sql.expression.insert)(table) | 构造一个[`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")对象。 |'
- en: '| [update](#sqlalchemy.sql.expression.update)(table) | Construct an [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") object. |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
  zh: '| [更新](#sqlalchemy.sql.expression.update)(table) | 构造一个[`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")对象。 |'
- en: '[PRE63]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Construct [`Delete`](#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    object.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 构造[`Delete`](#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")对象。
- en: 'E.g.:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE64]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Similar functionality is available via the [`TableClause.delete()`](selectable.html#sqlalchemy.sql.expression.TableClause.delete
    "sqlalchemy.sql.expression.TableClause.delete") method on [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 类似功能也可通过[`TableClause.delete()`](selectable.html#sqlalchemy.sql.expression.TableClause.delete
    "sqlalchemy.sql.expression.TableClause.delete")方法在[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")上获得。
- en: 'Parameters:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**table** – The table to delete rows from.'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '**table** – 要从中删除行的表。'
- en: See also
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using UPDATE and DELETE Statements](../tutorial/data_update.html#tutorial-core-update-delete)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用UPDATE和DELETE语句](../tutorial/data_update.html#tutorial-core-update-delete)
    - 在[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE65]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Construct an [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    object.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")对象。
- en: 'E.g.:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE66]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Similar functionality is available via the [`TableClause.insert()`](selectable.html#sqlalchemy.sql.expression.TableClause.insert
    "sqlalchemy.sql.expression.TableClause.insert") method on [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 类似功能也可通过[`TableClause.insert()`](selectable.html#sqlalchemy.sql.expression.TableClause.insert
    "sqlalchemy.sql.expression.TableClause.insert")方法在[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")上获得。
- en: See also
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using INSERT Statements](../tutorial/data_insert.html#tutorial-core-insert)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用INSERT语句](../tutorial/data_insert.html#tutorial-core-insert) - 在[SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial)中'
- en: 'Parameters:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table` – [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") which is the subject of the insert.'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table` – [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")，即插入主题。'
- en: '`values` – collection of values to be inserted; see [`Insert.values()`](#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") for a description of allowed formats
    here. Can be omitted entirely; a [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct will also dynamically render the
    VALUES clause at execution time based on the parameters passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values` – 要插入的值集合；请参阅[`Insert.values()`](#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")以获取此处允许的格式描述。可以完全省略；[`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造还将根据传递给[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")的参数，在执行时动态渲染VALUES子句。'
- en: '`inline` – if True, no attempt will be made to retrieve the SQL-generated default
    values to be provided within the statement; in particular, this allows SQL expressions
    to be rendered ‘inline’ within the statement without the need to pre-execute them
    beforehand; for backends that support “returning”, this turns off the “implicit
    returning” feature for the statement.'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inline` – 如果为True，则不会尝试检索生成的SQL默认值，以便在语句中提供；特别地，这允许SQL表达式在语句中“内联”渲染，而无需事先执行它们；对于支持“返回”的后端，这会关闭语句的“隐式返回”功能。'
- en: If both [`insert.values`](#sqlalchemy.sql.expression.insert.params.values "sqlalchemy.sql.expression.insert")
    and compile-time bind parameters are present, the compile-time bind parameters
    override the information specified within [`insert.values`](#sqlalchemy.sql.expression.insert.params.values
    "sqlalchemy.sql.expression.insert") on a per-key basis.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 如果同时存在[`insert.values`](#sqlalchemy.sql.expression.insert.params.values "sqlalchemy.sql.expression.insert")和编译时绑定参数，则编译时绑定参数将覆盖在[`insert.values`](#sqlalchemy.sql.expression.insert.params.values
    "sqlalchemy.sql.expression.insert")中指定的信息，按键分别覆盖。
- en: 'The keys within [`Insert.values`](#sqlalchemy.sql.expression.Insert.params.values
    "sqlalchemy.sql.expression.Insert") can be either [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or their string identifiers. Each key may
    reference one of:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert.values`](#sqlalchemy.sql.expression.Insert.params.values "sqlalchemy.sql.expression.Insert")
    中的键可以是 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象或它们的字符串标识符。 每个键可能引用以下之一：'
- en: a literal data value (i.e. string, number, etc.);
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字面数据值（即字符串、数字等）；
- en: a Column object;
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Column 对象；
- en: a SELECT statement.
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 SELECT 语句。
- en: If a `SELECT` statement is specified which references this `INSERT` statement’s
    table, the statement will be correlated against the `INSERT` statement.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 如果指定了一个 `SELECT` 语句，该语句引用了此 `INSERT` 语句的表，那么该语句将与 `INSERT` 语句相关联。
- en: See also
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using INSERT Statements](../tutorial/data_insert.html#tutorial-core-insert)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 INSERT 语句](../tutorial/data_insert.html#tutorial-core-insert) - 在 [SQLAlchemy
    统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[PRE67]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Construct an [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    object.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    对象。
- en: 'E.g.:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE68]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Similar functionality is available via the [`TableClause.update()`](selectable.html#sqlalchemy.sql.expression.TableClause.update
    "sqlalchemy.sql.expression.TableClause.update") method on [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 类似功能也可通过 [`TableClause.update()`](selectable.html#sqlalchemy.sql.expression.TableClause.update
    "sqlalchemy.sql.expression.TableClause.update") 方法在 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 上获得。
- en: 'Parameters:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**table** – A [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object representing the database table to be updated.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '**table** – 代表要更新的数据库表的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象。'
- en: See also
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using UPDATE and DELETE Statements](../tutorial/data_update.html#tutorial-core-update-delete)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 UPDATE 和 DELETE 语句](../tutorial/data_update.html#tutorial-core-update-delete)
    - 在 [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: DML Class Documentation Constructors
  id: totrans-432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DML 类文档构造函数
- en: Class documentation for the constructors listed at [DML Foundational Constructors](#dml-foundational-consructors).
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '[DML Foundational Constructors](#dml-foundational-consructors) 中列出的构造函数的类文档。'
- en: '| Object Name | Description |'
  id: totrans-434
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-435
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Delete](#sqlalchemy.sql.expression.Delete) | Represent a DELETE construct.
    |'
  id: totrans-436
  prefs: []
  type: TYPE_TB
  zh: '| [Delete](#sqlalchemy.sql.expression.Delete) | 代表一个 DELETE 结构。 |'
- en: '| [Insert](#sqlalchemy.sql.expression.Insert) | Represent an INSERT construct.
    |'
  id: totrans-437
  prefs: []
  type: TYPE_TB
  zh: '| [Insert](#sqlalchemy.sql.expression.Insert) | 代表一个 INSERT 结构。 |'
- en: '| [Update](#sqlalchemy.sql.expression.Update) | Represent an Update construct.
    |'
  id: totrans-438
  prefs: []
  type: TYPE_TB
  zh: '| [Update](#sqlalchemy.sql.expression.Update) | 代表一个 Update 结构。 |'
- en: '| [UpdateBase](#sqlalchemy.sql.expression.UpdateBase) | Form the base for `INSERT`,
    `UPDATE`, and `DELETE` statements. |'
  id: totrans-439
  prefs: []
  type: TYPE_TB
  zh: '| [UpdateBase](#sqlalchemy.sql.expression.UpdateBase) | 形成 `INSERT`、`UPDATE`
    和 `DELETE` 语句的基础。 |'
- en: '| [ValuesBase](#sqlalchemy.sql.expression.ValuesBase) | Supplies support for
    [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values "sqlalchemy.sql.expression.ValuesBase.values")
    to INSERT and UPDATE constructs. |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
  zh: '| [ValuesBase](#sqlalchemy.sql.expression.ValuesBase) | 为 INSERT 和 UPDATE 结构提供
    [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values "sqlalchemy.sql.expression.ValuesBase.values")
    的支持。 |'
- en: '[PRE69]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Represent a DELETE construct.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 代表一个 DELETE 结构。
- en: The [`Delete`](#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    object is created using the [`delete()`](#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    function.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Delete`](#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    对象是使用 [`delete()`](#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    函数创建的。'
- en: '**Members**'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[where()](#sqlalchemy.sql.expression.Delete.where), [returning()](#sqlalchemy.sql.expression.Delete.returning)'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '[where()](#sqlalchemy.sql.expression.Delete.where), [returning()](#sqlalchemy.sql.expression.Delete.returning)'
- en: '**Class signature**'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Delete`](#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") (`sqlalchemy.sql.expression.DMLWhereBase`,
    [`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase"))
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.Delete`](#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")（`sqlalchemy.sql.expression.DMLWhereBase`，[`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")）
- en: '[PRE70]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '*inherited from the* `DMLWhereBase.where()` *method of* `DMLWhereBase`'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `DMLWhereBase` *的* `DMLWhereBase.where()` *方法*'
- en: Return a new construct with the given expression(s) added to its WHERE clause,
    joined to the existing clause via AND, if any.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的构造，其中给定的表达式被添加到其WHERE子句中，并通过AND连接到现有子句（如果有）。
- en: Both [`Update.where()`](#sqlalchemy.sql.expression.Update.where "sqlalchemy.sql.expression.Update.where")
    and [`Delete.where()`](#sqlalchemy.sql.expression.Delete.where "sqlalchemy.sql.expression.Delete.where")
    support multiple-table forms, including database-specific `UPDATE...FROM` as well
    as `DELETE..USING`. For backends that don’t have multiple-table support, a backend
    agnostic approach to using multiple tables is to make use of correlated subqueries.
    See the linked tutorial sections below for examples.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Update.where()`](#sqlalchemy.sql.expression.Update.where "sqlalchemy.sql.expression.Update.where")
    和 [`Delete.where()`](#sqlalchemy.sql.expression.Delete.where "sqlalchemy.sql.expression.Delete.where")
    都支持多表形式，包括特定于数据库的`UPDATE...FROM`以及`DELETE..USING`。对于不支持多表的后端，使用多表的跨后端方法是利用相关子查询。请参阅下面链接的教程部分以获取示例。'
- en: See also
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Correlated Updates](../tutorial/data_update.html#tutorial-correlated-updates)'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '[相关更新](../tutorial/data_update.html#tutorial-correlated-updates)'
- en: '[UPDATE..FROM](../tutorial/data_update.html#tutorial-update-from)'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '[UPDATE..FROM](../tutorial/data_update.html#tutorial-update-from)'
- en: '[Multiple Table Deletes](../tutorial/data_update.html#tutorial-multi-table-deletes)'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '[多表删除](../tutorial/data_update.html#tutorial-multi-table-deletes)'
- en: '[PRE71]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '*inherited from the* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *method of* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *方法的* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
- en: Add a [RETURNING](../glossary.html#term-RETURNING) or equivalent clause to this
    statement.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 为该语句添加一个[RETURNING](../glossary.html#term-RETURNING)或等效子句。
- en: 'e.g.:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE72]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: The method may be invoked multiple times to add new entries to the list of expressions
    to be returned.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 可以多次调用该方法以向要返回的表达式列表中添加新条目。
- en: 'New in version 1.4.0b2: The method may be invoked multiple times to add new
    entries to the list of expressions to be returned.'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4.0b2开始：可以多次调用该方法以向要返回的表达式列表中添加新条目。
- en: 'The given collection of column expressions should be derived from the table
    that is the target of the INSERT, UPDATE, or DELETE. While [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are typical, the elements can also be expressions:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的列表达式集合应源自INSERT、UPDATE或DELETE的目标表。虽然[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象是典型的，但元素也可以是表达式：
- en: '[PRE73]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Upon compilation, a RETURNING clause, or database equivalent, will be rendered
    within the statement. For INSERT and UPDATE, the values are the newly inserted/updated
    values. For DELETE, the values are those of the rows which were deleted.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译时，将在语句中呈现RETURNING子句或数据库等效。对于INSERT和UPDATE，值是新插入/更新的值。对于DELETE，值是被删除的行的值。
- en: Upon execution, the values of the columns to be returned are made available
    via the result set and can be iterated using [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") and similar. For DBAPIs which do not
    natively support returning values (i.e. cx_oracle), SQLAlchemy will approximate
    this behavior at the result level so that a reasonable amount of behavioral neutrality
    is provided.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行时，要返回的列的值通过结果集提供，并可以使用[`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone")等进行迭代。对于不原生支持返回值的DBAPI（即cx_oracle），SQLAlchemy将在结果级别近似此行为，以便提供合理数量的行为中立性。
- en: Note that not all databases/DBAPIs support RETURNING. For those backends with
    no support, an exception is raised upon compilation and/or execution. For those
    who do support it, the functionality across backends varies greatly, including
    restrictions on executemany() and other statements which return multiple rows.
    Please read the documentation notes for the database in use in order to determine
    the availability of RETURNING.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非所有数据库/DBAPI都支持RETURNING。对于那些不支持的后端，在编译和/或执行时会引发异常。对于支持它的后端，跨后端的功能差异很大，包括对executemany()和返回多行的其他语句的限制。请阅读所使用数据库的文档注释，以确定RETURNING的可用性。
- en: 'Parameters:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*cols` – series of columns, SQL expressions, or whole tables entities to be
    returned.'
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*cols` – 要返回的一系列列、SQL表达式或整个表实体。'
- en: '`sort_by_parameter_order` –'
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort_by_parameter_order` –'
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于针对多个参数集执行的批量插入，组织 RETURNING 的结果，使返回的行与传入的参数集的顺序对应。这仅适用于支持方言的 [executemany](../glossary.html#term-executemany)
    执行，并通常利用 [insertmanyvalues](../glossary.html#term-insertmanyvalues) 功能。
- en: New in version 2.0.10.
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 2.0.10 中的新功能。
- en: See also
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT (Core level discussion)'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 RETURNING 行与参数集相关联](connections.html#engine-insertmanyvalues-returning-order)
    - 关于批量插入 RETURNING 行排序的背景（核心级别讨论）'
- en: '[Correlating RETURNING records with input data order](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - example of use with [ORM Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    (ORM level discussion)'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 RETURNING 记录与输入数据顺序相关联](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - 与 [ORM 批量 INSERT 语句](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    的使用示例（ORM 级别讨论）'
- en: See also
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - an alternative method
    tailored towards efficient fetching of server-side defaults and triggers for single-row
    INSERTs or UPDATEs.'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - 一种针对单行 INSERT 或 UPDATE
    的有效获取服务器端默认值和触发器的替代方法。'
- en: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - 在 [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[PRE74]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Represent an INSERT construct.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 INSERT 构造。
- en: The [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    object is created using the [`insert()`](#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    function.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    对象是使用 [`insert()`](#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    函数创建的。'
- en: '**Members**'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[values()](#sqlalchemy.sql.expression.Insert.values), [returning()](#sqlalchemy.sql.expression.Insert.returning),
    [from_select()](#sqlalchemy.sql.expression.Insert.from_select), [inline()](#sqlalchemy.sql.expression.Insert.inline),
    [select](#sqlalchemy.sql.expression.Insert.select)'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '[values()](#sqlalchemy.sql.expression.Insert.values), [returning()](#sqlalchemy.sql.expression.Insert.returning),
    [from_select()](#sqlalchemy.sql.expression.Insert.from_select), [inline()](#sqlalchemy.sql.expression.Insert.inline),
    [select](#sqlalchemy.sql.expression.Insert.select)'
- en: '**Class signature**'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") ([`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase"))
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")（[`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase")）
- en: '[PRE75]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '*inherited from the* [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") *method of* [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase")'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") *方法的* [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase")'
- en: Specify a fixed VALUES clause for an INSERT statement, or the SET clause for
    an UPDATE.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 为 INSERT 语句指定固定的 VALUES 子句，或为 UPDATE 指定 SET 子句。
- en: Note that the [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    and [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    constructs support per-execution time formatting of the VALUES and/or SET clauses,
    based on the arguments passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"). However, the [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") method can be used to “fix” a particular
    set of parameters into the statement.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")和[`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造支持基于传递给[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")的参数对VALUES和/或SET子句进行执行时格式化。但是，[`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values")方法可用于将特定一组参数“固定”到语句中。
- en: Multiple calls to [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") will produce a new construct, each
    one with the parameter list modified to include the new parameters sent. In the
    typical case of a single dictionary of parameters, the newly passed keys will
    replace the same keys in the previous construct. In the case of a list-based “multiple
    values” construct, each new list of values is extended onto the existing list
    of values.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 多次调用[`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values "sqlalchemy.sql.expression.ValuesBase.values")将生成一个新构造，每个构造的参数列表都会修改以包含发送的新参数。在典型情况下，单个参数字典中的新传递键将替换先前构造中的相同键。在基于列表的“多个值”构造的情况下，每个新值列表都会扩展到现有值列表上。
- en: 'Parameters:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`**kwargs` –'
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` –'
- en: 'key value pairs representing the string key of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") mapped to the value to be rendered into the VALUES
    or SET clause:'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 键值对表示[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")的字符串键映射到要呈现到VALUES或SET子句中的值：
- en: '[PRE76]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '`*args` –'
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*args` –'
- en: As an alternative to passing key/value parameters, a dictionary, tuple, or list
    of dictionaries or tuples can be passed as a single positional argument in order
    to form the VALUES or SET clause of the statement. The forms that are accepted
    vary based on whether this is an [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") or an [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct.
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为传递键/值参数的替代方案，可以将字典、元组或字典或元组的列表作为单个位置参数传递，以形成语句的VALUES或SET子句。接受的形式因此是一个[`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")还是一个[`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造而异。
- en: 'For either an [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    or [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct, a single dictionary can be passed, which works the same as that of
    the kwargs form:'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")或[`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造，可以传递一个字典，其工作方式与kwargs形式相同：
- en: '[PRE77]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Also for either form but more typically for the [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, a tuple that contains an entry
    for every column in the table is also accepted:'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于任何形式，但更典型地用于[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")构造，也接受包含表中每列条目的元组：
- en: '[PRE78]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct also supports being passed a list of dictionaries or full-table-tuples,
    which on the server will render the less common SQL syntax of “multiple values”
    - this syntax is supported on backends such as SQLite, PostgreSQL, MySQL, but
    not necessarily others:'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")构造还支持传递字典或完整表元组的列表，这在服务器上将呈现较少见的SQL语法“多个值”
    - 此语法在后端（如SQLite、PostgreSQL、MySQL）上受支持，但不一定在其他后端上受支持：'
- en: '[PRE79]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'The above form would render a multiple VALUES statement similar to:'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述形式将呈现类似于多个VALUES语句：
- en: '[PRE80]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: It is essential to note that **passing multiple values is NOT the same as using
    traditional executemany() form**. The above syntax is a **special** syntax not
    typically used. To emit an INSERT statement against multiple rows, the normal
    method is to pass a multiple values list to the [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, which is supported by all database
    backends and is generally more efficient for a very large number of parameters.
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 必须注意**传递多个值并不等同于使用传统的executemany()形式**。上述语法是一种**特殊**的语法，通常不常用。要针对多行发出INSERT语句，正常方法是将多个值列表传递给[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法，该方法受到所有数据库后端支持，并且对于非常大量的参数通常更有效率。
- en: See also
  id: totrans-506
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参阅
- en: ''
  id: totrans-507
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Sending Multiple Parameters](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - an introduction to the traditional Core method of multiple parameter set invocation
    for INSERTs and other statements.'
  id: totrans-508
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[发送多个参数](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - 介绍传统核心方法的多参数集调用，用于INSERT和其他语句。'
- en: ''
  id: totrans-509
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The UPDATE construct also supports rendering the SET parameters in a specific
    order. For this feature refer to the [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method.
  id: totrans-510
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: UPDATE结构还支持按特定顺序呈现SET参数。有关此功能，请参考[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")方法。
- en: ''
  id: totrans-511
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  id: totrans-512
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参阅
- en: ''
  id: totrans-513
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
  id: totrans-514
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
- en: '[PRE81]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '*inherited from the* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *method of* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *方法的* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
- en: Add a [RETURNING](../glossary.html#term-RETURNING) or equivalent clause to this
    statement.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 在此语句中添加一个[RETURNING](../glossary.html#term-RETURNING)或等效子句。
- en: 'e.g.:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE82]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: The method may be invoked multiple times to add new entries to the list of expressions
    to be returned.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 可以多次调用该方法以向要返回的表达式列表添加新条目。
- en: 'New in version 1.4.0b2: The method may be invoked multiple times to add new
    entries to the list of expressions to be returned.'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4.0b2中新增：可以多次调用该方法以向要返回的表达式列表添加新条目。
- en: 'The given collection of column expressions should be derived from the table
    that is the target of the INSERT, UPDATE, or DELETE. While [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are typical, the elements can also be expressions:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的列表达式集合应源自INSERT、UPDATE或DELETE的目标表。虽然[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象是典型的，但元素也可以是表达式：
- en: '[PRE83]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Upon compilation, a RETURNING clause, or database equivalent, will be rendered
    within the statement. For INSERT and UPDATE, the values are the newly inserted/updated
    values. For DELETE, the values are those of the rows which were deleted.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译时，将在语句中呈现一个RETURNING子句，或者数据库等效项。对于INSERT和UPDATE，这些值是新插入/更新的值。对于DELETE，这些值是被删除的行的值。
- en: Upon execution, the values of the columns to be returned are made available
    via the result set and can be iterated using [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") and similar. For DBAPIs which do not
    natively support returning values (i.e. cx_oracle), SQLAlchemy will approximate
    this behavior at the result level so that a reasonable amount of behavioral neutrality
    is provided.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行时，要返回的列的值通过结果集提供，并可以使用[`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone")等进行迭代。对于不本地支持返回值的DBAPI（即cx_oracle），SQLAlchemy将在结果级别近似此行为，以便提供合理数量的行为中立性。
- en: Note that not all databases/DBAPIs support RETURNING. For those backends with
    no support, an exception is raised upon compilation and/or execution. For those
    who do support it, the functionality across backends varies greatly, including
    restrictions on executemany() and other statements which return multiple rows.
    Please read the documentation notes for the database in use in order to determine
    the availability of RETURNING.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非所有数据库/DBAPI都支持RETURNING。对于那些不支持的后端，在编译和/或执行时会引发异常。对于那些支持它的后端，跨后端的功能差异很大，包括对executemany()和其他返回多行的语句的限制。请阅读正在使用的数据库的文档说明，以确定RETURNING的可用性。
- en: 'Parameters:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*cols` – series of columns, SQL expressions, or whole tables entities to be
    returned.'
  id: totrans-528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*cols` – 一系列列、SQL表达式或整个表实体要返回。'
- en: '`sort_by_parameter_order` –'
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort_by_parameter_order` –'
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于正在针对多个参数集执行的批量INSERT，组织RETURNING的结果，使返回的行与传入的参数集的顺序对应。这仅适用于支持方言的[executemany](../glossary.html#term-executemany)执行，并通常利用[insertmanyvalues](../glossary.html#term-insertmanyvalues)功能。
- en: New in version 2.0.10.
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0.10版中的新功能。
- en: See also
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT (Core level discussion)'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将RETURNING行与参数集相关联](connections.html#engine-insertmanyvalues-returning-order)
    - 关于批量INSERT的RETURNING行排序的背景（核心级别讨论）'
- en: '[Correlating RETURNING records with input data order](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - example of use with [ORM Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    (ORM level discussion)'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将RETURNING记录与输入数据顺序相关联](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - 与[ORM批量INSERT语句](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)一起使用的示例（ORM级别讨论）'
- en: See also
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - an alternative method
    tailored towards efficient fetching of server-side defaults and triggers for single-row
    INSERTs or UPDATEs.'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - 一种针对高效获取服务器端默认值和触发器的单行INSERT或UPDATE的替代方法。'
- en: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - 在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中'
- en: '[PRE84]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Return a new [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct which represents an `INSERT...FROM SELECT` statement.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")构造，表示一个`INSERT...FROM
    SELECT`语句。
- en: 'e.g.:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE85]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Parameters:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`names` – a sequence of string column names or [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects representing the target columns.'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`names` – 一系列字符串列名或[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象，表示目标列。'
- en: '`select` – a [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") or other construct which resolves into
    a [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause"),
    such as an ORM [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, etc. The order of columns returned from this FROM clause should correspond
    to the order of columns sent as the `names` parameter; while this is not checked
    before passing along to the database, the database would normally raise an exception
    if these column lists don’t correspond.'
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select` – 一个[`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造，[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")或其他解析为[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的构造，例如ORM [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象等。从此FROM子句返回的列的顺序应与作为`names`参数发送的列的顺序相对应；虽然在传递给数据库之前不会检查这一点，但如果这些列列表不对应，数据库通常会引发异常。'
- en: '`include_defaults` –'
  id: totrans-545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_defaults` –'
- en: if True, non-server default values and SQL expressions as specified on [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects (as documented in [Column INSERT/UPDATE Defaults](defaults.html))
    not otherwise specified in the list of names will be rendered into the INSERT
    and SELECT statements, so that these values are also included in the data to be
    inserted.
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则将渲染到 INSERT 和 SELECT 语句中的非服务器默认值和在 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象上指定的 SQL 表达式（如 [Column INSERT/UPDATE Defaults](defaults.html)
    中所记录）未在名称列表中另行指定，以便这些值也包含在要插入的数据中。
- en: Note
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: A Python-side default that uses a Python callable function will only be invoked
    **once** for the whole statement, and **not per row**.
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 Python 可调用函数的 Python 端默认值将仅在整个语句中被调用 **一次**，而不是每行一次。
- en: '[PRE86]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Make this [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct “inline” .
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 将此 [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造“内联”。
- en: When set, no attempt will be made to retrieve the SQL-generated default values
    to be provided within the statement; in particular, this allows SQL expressions
    to be rendered ‘inline’ within the statement without the need to pre-execute them
    beforehand; for backends that support “returning”, this turns off the “implicit
    returning” feature for the statement.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置时，将不会尝试检索在语句中提供的 SQL 生成的默认值；特别是，这允许 SQL 表达式在语句中“内联”渲染，无需事先对它们进行预执行；对于支持“returning”的后端，这将关闭语句的“隐式返回”功能。
- en: 'Changed in version 1.4: the [`Insert.inline`](#sqlalchemy.sql.expression.Insert.params.inline
    "sqlalchemy.sql.expression.Insert") parameter is now superseded by the [`Insert.inline()`](#sqlalchemy.sql.expression.Insert.inline
    "sqlalchemy.sql.expression.Insert.inline") method.'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中进行了更改：[`Insert.inline`](#sqlalchemy.sql.expression.Insert.params.inline
    "sqlalchemy.sql.expression.Insert") 参数现已被 [`Insert.inline()`](#sqlalchemy.sql.expression.Insert.inline
    "sqlalchemy.sql.expression.Insert.inline") 方法取代。
- en: '[PRE87]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: SELECT statement for INSERT .. FROM SELECT
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT .. FROM SELECT 的 SELECT 语句
- en: '[PRE88]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Represent an Update construct.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个 Update 构造。
- en: The [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    object is created using the [`update()`](#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    function.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`update()`](#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    函数创建 [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    对象。
- en: '**Members**'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[returning()](#sqlalchemy.sql.expression.Update.returning), [where()](#sqlalchemy.sql.expression.Update.where),
    [values()](#sqlalchemy.sql.expression.Update.values), [inline()](#sqlalchemy.sql.expression.Update.inline),
    [ordered_values()](#sqlalchemy.sql.expression.Update.ordered_values)'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '[returning()](#sqlalchemy.sql.expression.Update.returning), [where()](#sqlalchemy.sql.expression.Update.where),
    [values()](#sqlalchemy.sql.expression.Update.values), [inline()](#sqlalchemy.sql.expression.Update.inline),
    [ordered_values()](#sqlalchemy.sql.expression.Update.ordered_values)'
- en: '**Class signature**'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") (`sqlalchemy.sql.expression.DMLWhereBase`,
    [`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase"))
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.sql.expression.Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")（`sqlalchemy.sql.expression.DMLWhereBase`，[`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase"))
- en: '[PRE89]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '*inherited from the* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *method of* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *方法的* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
- en: Add a [RETURNING](../glossary.html#term-RETURNING) or equivalent clause to this
    statement.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 向该语句添加一个 [RETURNING](../glossary.html#term-RETURNING) 或等效子句。
- en: 'e.g.:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE90]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: The method may be invoked multiple times to add new entries to the list of expressions
    to be returned.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可以多次调用以向要返回的表达式列表添加新条目。
- en: 'New in version 1.4.0b2: The method may be invoked multiple times to add new
    entries to the list of expressions to be returned.'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.0b2 中：此方法可以多次调用以向要返回的表达式列表添加新条目。
- en: 'The given collection of column expressions should be derived from the table
    that is the target of the INSERT, UPDATE, or DELETE. While [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are typical, the elements can also be expressions:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的列表达式集合应源自是 INSERT、UPDATE 或 DELETE 目标的表。虽然 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象是典型的，但元素也可以是表达式：
- en: '[PRE91]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Upon compilation, a RETURNING clause, or database equivalent, will be rendered
    within the statement. For INSERT and UPDATE, the values are the newly inserted/updated
    values. For DELETE, the values are those of the rows which were deleted.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 编译时，RETURNING 子句或数据库等效项将包含在语句中。对于 INSERT 和 UPDATE，这些值是新插入/更新的值。对于 DELETE，这些值是被删除行的值。
- en: Upon execution, the values of the columns to be returned are made available
    via the result set and can be iterated using [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") and similar. For DBAPIs which do not
    natively support returning values (i.e. cx_oracle), SQLAlchemy will approximate
    this behavior at the result level so that a reasonable amount of behavioral neutrality
    is provided.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行时，要返回的列的值通过结果集提供，并可以使用 [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") 和类似方法进行迭代。对于不原生支持返回值的 DBAPI（即 cx_oracle
    等），SQLAlchemy 将在结果级别近似此行为，以提供合理数量的行为中立性。
- en: Note that not all databases/DBAPIs support RETURNING. For those backends with
    no support, an exception is raised upon compilation and/or execution. For those
    who do support it, the functionality across backends varies greatly, including
    restrictions on executemany() and other statements which return multiple rows.
    Please read the documentation notes for the database in use in order to determine
    the availability of RETURNING.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非所有数据库/DBAPI都支持 RETURNING。对于那些没有支持的后端，在编译和/或执行时会引发异常。对于支持的后端，跨后端的功能差异很大，包括对
    executemany() 和其他返回多行的语句的限制。请阅读使用中的数据库的文档注释，以确定 RETURNING 的可用性。
- en: 'Parameters:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*cols` – series of columns, SQL expressions, or whole tables entities to be
    returned.'
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*cols` – 一系列要返回的列、SQL 表达式或整个表实体。'
- en: '`sort_by_parameter_order` –'
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort_by_parameter_order` –'
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于正在执行多个参数集的批量 INSERT，组织 RETURNING 的结果，使返回的行与传入的参数集的顺序对应。这仅适用于支持的方言的 [executemany](../glossary.html#term-executemany)
    执行，并且通常利用 [insertmanyvalues](../glossary.html#term-insertmanyvalues) 功能。
- en: New in version 2.0.10.
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 2.0.10 版本中新增。
- en: See also
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT (Core level discussion)'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 RETURNING 行与参数集相关联](connections.html#engine-insertmanyvalues-returning-order)
    - 关于批量插入 RETURNING 行排序的背景（核心层讨论）'
- en: '[Correlating RETURNING records with input data order](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - example of use with [ORM Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    (ORM level discussion)'
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 RETURNING 记录与输入数据顺序相关联](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - 在 [ORM 批量 INSERT 语句](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    中的使用示例（ORM 层讨论）'
- en: See also
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - an alternative method
    tailored towards efficient fetching of server-side defaults and triggers for single-row
    INSERTs or UPDATEs.'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - 针对高效获取单行 INSERT 或 UPDATE
    的服务器端默认值和触发器的替代方法。'
- en: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - 在 [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[PRE92]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '*inherited from the* `DMLWhereBase.where()` *method of* `DMLWhereBase`'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* `DMLWhereBase.where()` *方法的* `DMLWhereBase` *继承*'
- en: Return a new construct with the given expression(s) added to its WHERE clause,
    joined to the existing clause via AND, if any.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的构造，其中包含要添加到其WHERE子句中的给定表达式，如果有的话，通过AND连接到现有子句。
- en: Both [`Update.where()`](#sqlalchemy.sql.expression.Update.where "sqlalchemy.sql.expression.Update.where")
    and [`Delete.where()`](#sqlalchemy.sql.expression.Delete.where "sqlalchemy.sql.expression.Delete.where")
    support multiple-table forms, including database-specific `UPDATE...FROM` as well
    as `DELETE..USING`. For backends that don’t have multiple-table support, a backend
    agnostic approach to using multiple tables is to make use of correlated subqueries.
    See the linked tutorial sections below for examples.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Update.where()`](#sqlalchemy.sql.expression.Update.where "sqlalchemy.sql.expression.Update.where")和[`Delete.where()`](#sqlalchemy.sql.expression.Delete.where
    "sqlalchemy.sql.expression.Delete.where")都支持多表形式，包括数据库特定的`UPDATE...FROM`以及`DELETE..USING`。
    对于不支持多表的后端，使用多表的后端不可知方法是利用相关子查询。 有关示例，请参阅下面链接的教程部分。'
- en: See also
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 亦见
- en: '[Correlated Updates](../tutorial/data_update.html#tutorial-correlated-updates)'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '[相关更新](../tutorial/data_update.html#tutorial-correlated-updates)'
- en: '[UPDATE..FROM](../tutorial/data_update.html#tutorial-update-from)'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '[UPDATE..FROM](../tutorial/data_update.html#tutorial-update-from)'
- en: '[Multiple Table Deletes](../tutorial/data_update.html#tutorial-multi-table-deletes)'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '[多表删除](../tutorial/data_update.html#tutorial-multi-table-deletes)'
- en: '[PRE93]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '*inherited from the* [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") *method of* [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase")'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") *方法的* [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase")'
- en: Specify a fixed VALUES clause for an INSERT statement, or the SET clause for
    an UPDATE.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 为INSERT语句指定一个固定的VALUES子句，或者为UPDATE指定SET子句。
- en: Note that the [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    and [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    constructs support per-execution time formatting of the VALUES and/or SET clauses,
    based on the arguments passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"). However, the [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") method can be used to “fix” a particular
    set of parameters into the statement.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")和[`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造支持基于传递给[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")的参数对VALUES和/或SET子句进行每次执行时间格式化。 但是，[`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values")方法可用于将特定参数集固定到语句中。
- en: Multiple calls to [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") will produce a new construct, each
    one with the parameter list modified to include the new parameters sent. In the
    typical case of a single dictionary of parameters, the newly passed keys will
    replace the same keys in the previous construct. In the case of a list-based “multiple
    values” construct, each new list of values is extended onto the existing list
    of values.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 多次调用[`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values "sqlalchemy.sql.expression.ValuesBase.values")将产生一个新的构造，每个构造都将参数列表修改为包含新发送的参数。
    在单个参数字典的典型情况下，新传递的键将替换先前构造中的相同键。 在基于列表的“多值”构造的情况下，每个新值列表都被扩展到现有值列表上。
- en: 'Parameters:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`**kwargs` –'
  id: totrans-599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` –'
- en: 'key value pairs representing the string key of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") mapped to the value to be rendered into the VALUES
    or SET clause:'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表示将映射到要渲染到VALUES或SET子句中的值的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的字符串键值对：
- en: '[PRE94]'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '`*args` –'
  id: totrans-602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*args` –'
- en: As an alternative to passing key/value parameters, a dictionary, tuple, or list
    of dictionaries or tuples can be passed as a single positional argument in order
    to form the VALUES or SET clause of the statement. The forms that are accepted
    vary based on whether this is an [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") or an [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct.
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为传递键/值参数的替代方案，可以将字典、元组或字典或元组的列表作为单个位置参数传递，以形成语句的 VALUES 或 SET 子句。被接受的形式因为是
    [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    还是 [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    构造而异。
- en: 'For either an [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    or [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct, a single dictionary can be passed, which works the same as that of
    the kwargs form:'
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    或 [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    构造，可以传递单个字典，其效果与kwargs形式相同：
- en: '[PRE95]'
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Also for either form but more typically for the [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, a tuple that contains an entry
    for every column in the table is also accepted:'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于任何形式，但更常见的是 [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造，也可以接受包含表中每一列条目的元组：
- en: '[PRE96]'
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'The [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct also supports being passed a list of dictionaries or full-table-tuples,
    which on the server will render the less common SQL syntax of “multiple values”
    - this syntax is supported on backends such as SQLite, PostgreSQL, MySQL, but
    not necessarily others:'
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造还支持传递字典或完整表元组的列表，这将在服务器上呈现较少使用的 SQL 语法 "多个值" - 此语法受到后端（如 SQLite、PostgreSQL、MySQL）的支持，但不一定适用于其他后端：'
- en: '[PRE97]'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'The above form would render a multiple VALUES statement similar to:'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述形式将呈现类似于多个 VALUES 语句：
- en: '[PRE98]'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: It is essential to note that **passing multiple values is NOT the same as using
    traditional executemany() form**. The above syntax is a **special** syntax not
    typically used. To emit an INSERT statement against multiple rows, the normal
    method is to pass a multiple values list to the [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, which is supported by all database
    backends and is generally more efficient for a very large number of parameters.
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 必须注意 **传递多个值并不等同于使用传统的 executemany() 形式**。上述语法是一种 **特殊** 的语法，通常不使用。要针对多行发出 INSERT
    语句，正常的方法是将多个值列表传递给 [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 方法，这受到所有数据库后端的支持，并且对于非常大量的参数通常更有效率。
- en: See also
  id: totrans-613
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参阅
- en: ''
  id: totrans-614
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Sending Multiple Parameters](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - an introduction to the traditional Core method of multiple parameter set invocation
    for INSERTs and other statements.'
  id: totrans-615
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[发送多个参数](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - 介绍了传统的 Core 方法，用于 INSERT 和其他语句的多参数集调用。'
- en: ''
  id: totrans-616
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The UPDATE construct also supports rendering the SET parameters in a specific
    order. For this feature refer to the [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method.
  id: totrans-617
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: UPDATE 构造还支持按特定顺序渲染 SET 参数。有关此功能，请参阅 [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") 方法。
- en: ''
  id: totrans-618
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  id: totrans-619
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参阅
- en: ''
  id: totrans-620
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
  id: totrans-621
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
- en: '[PRE99]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Make this [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct “inline” .
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 使此 [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    构造 "内联"。
- en: When set, SQL defaults present on [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects via the `default` keyword will be compiled
    ‘inline’ into the statement and not pre-executed. This means that their values
    will not be available in the dictionary returned from [`CursorResult.last_updated_params()`](connections.html#sqlalchemy.engine.CursorResult.last_updated_params
    "sqlalchemy.engine.CursorResult.last_updated_params").
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置时，通过`default`关键字在[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象上存在的SQL默认值将被编译为语句中的‘inline’并且不会预先执行。这意味着它们的值不会出现在[`CursorResult.last_updated_params()`](connections.html#sqlalchemy.engine.CursorResult.last_updated_params
    "sqlalchemy.engine.CursorResult.last_updated_params")返回的字典中。
- en: 'Changed in version 1.4: the [`update.inline`](#sqlalchemy.sql.expression.update.params.inline
    "sqlalchemy.sql.expression.update") parameter is now superseded by the [`Update.inline()`](#sqlalchemy.sql.expression.Update.inline
    "sqlalchemy.sql.expression.Update.inline") method.'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：[`update.inline`](#sqlalchemy.sql.expression.update.params.inline
    "sqlalchemy.sql.expression.update")参数现已由[`Update.inline()`](#sqlalchemy.sql.expression.Update.inline
    "sqlalchemy.sql.expression.Update.inline")方法取代。
- en: '[PRE100]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Specify the VALUES clause of this UPDATE statement with an explicit parameter
    ordering that will be maintained in the SET clause of the resulting UPDATE statement.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 使用显式参数排序指定此UPDATE语句的VALUES子句，在结果UPDATE语句的SET子句中将保持该顺序。
- en: 'E.g.:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE101]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: See also
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Parameter Ordered Updates](../tutorial/data_update.html#tutorial-parameter-ordered-updates)
    - full example of the [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method.'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '[参数有序更新](../tutorial/data_update.html#tutorial-parameter-ordered-updates) -
    [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values "sqlalchemy.sql.expression.Update.ordered_values")方法的完整示例。'
- en: 'Changed in version 1.4: The [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method supersedes the [`update.preserve_parameter_order`](#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update") parameter, which will be removed in SQLAlchemy
    2.0.'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")方法取代了[`update.preserve_parameter_order`](#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update")参数，该参数将在SQLAlchemy 2.0中移除。
- en: '[PRE102]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Form the base for `INSERT`, `UPDATE`, and `DELETE` statements.
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 为`INSERT`、`UPDATE`和`DELETE`语句提供基础。
- en: '**Members**'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[entity_description](#sqlalchemy.sql.expression.UpdateBase.entity_description),
    [exported_columns](#sqlalchemy.sql.expression.UpdateBase.exported_columns), [params()](#sqlalchemy.sql.expression.UpdateBase.params),
    [return_defaults()](#sqlalchemy.sql.expression.UpdateBase.return_defaults), [returning()](#sqlalchemy.sql.expression.UpdateBase.returning),
    [returning_column_descriptions](#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions),
    [with_dialect_options()](#sqlalchemy.sql.expression.UpdateBase.with_dialect_options),
    [with_hint()](#sqlalchemy.sql.expression.UpdateBase.with_hint)'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: '[entity_description](#sqlalchemy.sql.expression.UpdateBase.entity_description),
    [exported_columns](#sqlalchemy.sql.expression.UpdateBase.exported_columns), [params()](#sqlalchemy.sql.expression.UpdateBase.params),
    [return_defaults()](#sqlalchemy.sql.expression.UpdateBase.return_defaults), [returning()](#sqlalchemy.sql.expression.UpdateBase.returning),
    [returning_column_descriptions](#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions),
    [with_dialect_options()](#sqlalchemy.sql.expression.UpdateBase.with_dialect_options),
    [with_hint()](#sqlalchemy.sql.expression.UpdateBase.with_hint)'
- en: '**Class signature**'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase") (`sqlalchemy.sql.roles.DMLRole`, [`sqlalchemy.sql.expression.HasCTE`](selectable.html#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"), `sqlalchemy.sql.expression.HasCompileState`,
    [`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.sql.expression.HasPrefixes`](selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), `sqlalchemy.sql.expression.Generative`,
    `sqlalchemy.sql.expression.ExecutableReturnsRows`, [`sqlalchemy.sql.expression.ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement"))
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase") (`sqlalchemy.sql.roles.DMLRole`, [`sqlalchemy.sql.expression.HasCTE`](selectable.html#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"), `sqlalchemy.sql.expression.HasCompileState`,
    [`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.sql.expression.HasPrefixes`](selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), `sqlalchemy.sql.expression.Generative`,
    `sqlalchemy.sql.expression.ExecutableReturnsRows`, [`sqlalchemy.sql.expression.ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement"))
- en: '[PRE103]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Return a [plugin-enabled](../glossary.html#term-plugin-enabled) description
    of the table and/or entity which this DML construct is operating against.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 DML 结构操作的表和/或实体的[插件启用](../glossary.html#term-plugin-enabled)描述。
- en: This attribute is generally useful when using the ORM, as an extended structure
    which includes information about mapped entities is returned. The section [Inspecting
    entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    contains more background.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用ORM时，此属性通常很有用，因为它返回一个扩展结构，其中包含有关映射实体的信息。[从ORM启用的SELECT和DML语句中检查实体和列](../orm/queryguide/api.html#queryguide-inspection)部分提供了更多背景信息。
- en: 'For a Core statement, the structure returned by this accessor is derived from
    the `UpdateBase.table` attribute, and refers to the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") being inserted, updated, or deleted:'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Core语句，此访问器返回的结构源自`UpdateBase.table`属性，并引用正在插入、更新或删除的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")：
- en: '[PRE104]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: New in version 1.4.33.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.33中的新功能。
- en: See also
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`UpdateBase.returning_column_descriptions`](#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions")'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.returning_column_descriptions`](#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions")'
- en: '[`Select.column_descriptions`](selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") - entity information for
    a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.column_descriptions`](selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") - [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造的实体信息'
- en: '[Inspecting entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    - ORM background'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: '[从ORM启用的SELECT和DML语句中检查实体和列](../orm/queryguide/api.html#queryguide-inspection)
    - ORM背景'
- en: '[PRE105]'
  id: totrans-649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Return the RETURNING columns as a column collection for this statement.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 将RETURNING列作为此语句的列集合返回。
- en: New in version 1.4.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4中的新功能。
- en: '[PRE106]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Set the parameters for the statement.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 设置语句的参数。
- en: This method raises `NotImplementedError` on the base class, and is overridden
    by [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase "sqlalchemy.sql.expression.ValuesBase")
    to provide the SET/VALUES clause of UPDATE and INSERT.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在基类上引发`NotImplementedError`，并由[`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase")覆盖，以提供UPDATE和INSERT的SET/VALUES子句。
- en: '[PRE107]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Make use of a [RETURNING](../glossary.html#term-RETURNING) clause for the purpose
    of fetching server-side expressions and defaults, for supporting backends only.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 仅支持后端，使用[RETURNING](../glossary.html#term-RETURNING)子句以获取服务器端表达式和默认值。
- en: Deep Alchemy
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 深度炼金术
- en: The [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") method is used by the
    ORM for its internal work in fetching newly generated primary key and server default
    values, in particular to provide the underyling implementation of the [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") ORM feature as well as to allow RETURNING support with
    bulk ORM inserts. Its behavior is fairly idiosyncratic and is not really intended
    for general use. End users should stick with using [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") in order to add RETURNING clauses
    to their INSERT, UPDATE and DELETE statements.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") 方法被 ORM 用于其内部工作中，以获取新生成的主键和服务器默认值，特别是为了提供[`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") ORM 特性的基础实现，以及允许批量 ORM 插入时的 RETURNING 支持。它的行为相当特殊，实际上并不打算用于一般用途。终端用户应该坚持使用[`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") 来添加 RETURNING 子句到他们的 INSERT、UPDATE
    和 DELETE 语句中。'
- en: Normally, a single row INSERT statement will automatically populate the [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute when executed,
    which stores the primary key of the row that was just inserted in the form of
    a [`Row`](connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row") object
    with column names as named tuple keys (and the [`Row._mapping`](connections.html#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") view fully populated as well). The dialect in
    use chooses the strategy to use in order to populate this data; if it was generated
    using server-side defaults and / or SQL expressions, dialect-specific approaches
    such as `cursor.lastrowid` or `RETURNING` are typically used to acquire the new
    primary key value.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，单行 INSERT 语句在执行时会自动填充[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") 属性，该属性以[`Row`](connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 对象的形式存储刚刚插入的行的主键，其中列名作为命名元组键（并且[`Row._mapping`](connections.html#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") 视图也被完全填充）。正在使用的方言选择用于填充这些数据的策略；如果它是使用服务器端默认值和/或
    SQL 表达式生成的，则通常会使用方言特定的方法，如`cursor.lastrowid`或`RETURNING` 来获取新的主键值。
- en: However, when the statement is modified by calling [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") before executing the statement,
    additional behaviors take place **only** for backends that support RETURNING and
    for [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that maintain the [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") parameter at its default value of `True`. In these
    cases, when the [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") is returned from the statement’s execution,
    not only will [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") be populated as always,
    the [`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults") attribute will also be populated
    with a [`Row`](connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    named-tuple representing the full range of server generated values from that single
    row, including values for any columns that specify [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") or which make use of [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") using a SQL expression.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当在执行语句之前通过调用[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults")对语句进行修改时，**仅**对支持RETURNING的后端以及将[`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table")参数保持其默认值`True`的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象发生附加行为。在这些情况下，当从语句的执行返回[`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")时，不仅[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")像往常一样被填充，[`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults")属性还将被填充为一个命名为[`Row`](connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")的元组，代表该单行的所有服务器生成的值的完整范围，包括任何指定[`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column")或使用SQL表达式的[`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column")的列的值。
- en: When invoking INSERT statements with multiple rows using [insertmanyvalues](connections.html#engine-insertmanyvalues),
    the [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") modifier will have the
    effect of the [`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows") and [`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows") attributes being fully
    populated with lists of [`Row`](connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects representing newly inserted primary key values as well as newly inserted
    server generated values for each row inserted. The [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") and [`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults") attributes will also continue
    to be populated with the first row of these two collections.
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[insertmanyvalues](connections.html#engine-insertmanyvalues)来调用具有多行的INSERT语句时，[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults")修饰符将导致[`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows")和[`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows")属性完全填充，其中包含代表新插入的主键值以及每行插入的新生成的服务器值的[`Row`](connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象的列表。[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")和[`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults")属性也将继续填充这两个集合的第一行。
- en: If the backend does not support RETURNING or the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") in use has disabled [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table"), then no RETURNING clause is added and no additional
    data is fetched, however the INSERT, UPDATE or DELETE statement proceeds normally.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 如果后端不支持 RETURNING，或者正在使用的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    禁用了 [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table")，则不会添加 RETURNING 子句，也不会获取额外数据，但 INSERT、UPDATE 或 DELETE
    语句会正常执行。
- en: 'E.g.:'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE108]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: When used against an UPDATE statement [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") instead looks for columns
    that include [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") or [`Column.server_onupdate`](metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") parameters assigned, when constructing the columns
    that will be included in the RETURNING clause by default if explicit columns were
    not specified. When used against a DELETE statement, no columns are included in
    RETURNING by default, they instead must be specified explicitly as there are no
    columns that normally change values when a DELETE statement proceeds.
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 当针对 UPDATE 语句使用 [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") 时，会查找包含 [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") 或 [`Column.server_onupdate`](metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") 参数的列，用于构建默认情况下将包含在 RETURNING 子句中的列（如果未显式指定列）。当针对 DELETE
    语句使用时，默认情况下不包含任何列在 RETURNING 中，而必须显式指定，因为在 DELETE 语句进行时通常不会更改值的列。
- en: 'New in version 2.0: [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") is supported for DELETE
    statements also and has been moved from [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase") to [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase").'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能在版本2.0中：[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") 现在也支持 DELETE 语句，并且已经从
    [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase "sqlalchemy.sql.expression.ValuesBase")
    移动到 [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase "sqlalchemy.sql.expression.UpdateBase")。
- en: The [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") method is mutually exclusive
    against the [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") method and errors will be raised
    during the SQL compilation process if both are used at the same time on one statement.
    The RETURNING clause of the INSERT, UPDATE or DELETE statement is therefore controlled
    by only one of these methods at a time.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") 方法与 [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") 方法是互斥的，如果同时在一个语句上使用了两者，将在 SQL
    编译过程中引发错误。因此，INSERT、UPDATE 或 DELETE 语句的 RETURNING 子句只由其中一个方法控制。'
- en: 'The [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") method differs from [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") in these ways:'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") 方法与 [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") 的不同之处在于：'
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") method causes the [`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults") collection to be populated
    with the first row from the RETURNING result. This attribute is not populated
    when using [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning").'
  id: totrans-669
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults")方法导致[`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults")集合被填充为RETURNING结果的第一行。当使用[`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")时，此属性不会被填充。'
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") is compatible with existing
    logic used to fetch auto-generated primary key values that are then populated
    into the [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute. By contrast,
    using [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") will have the effect of the
    [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute being left unpopulated.'
  id: totrans-670
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults")与用于获取自动生成的主键值并将其填充到[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")属性的现有逻辑兼容。相比之下，使用[`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")将导致[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")属性保持未填充。'
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") can be called against
    any backend. Backends that don’t support RETURNING will skip the usage of the
    feature, rather than raising an exception, *unless* `supplemental_cols` is passed.
    The return value of [`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults") will be `None` for backends
    that don’t support RETURNING or for which the target [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") sets [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") to `False`.'
  id: totrans-671
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults")可以针对任何后端调用。不支持RETURNING的后端将跳过该功能的使用，而不是引发异常，*除非*传递了`supplemental_cols`。对于不支持RETURNING或目标[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")设置[`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table")为`False`的后端，[`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults")的返回值将为`None`。'
- en: An INSERT statement invoked with executemany() is supported if the backend database
    driver supports the [insertmanyvalues](connections.html#engine-insertmanyvalues)
    feature which is now supported by most SQLAlchemy-included backends. When executemany
    is used, the [`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows") and [`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows") accessors will return
    the inserted defaults and primary keys.
  id: totrans-672
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`executemany()`调用的INSERT语句在后端数据库驱动程序支持[insertmanyvalues](connections.html#engine-insertmanyvalues)功能的情况下得到支持，这个功能现在大多数包含在SQLAlchemy中的后端都支持。当使用`executemany`时，[`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows")和[`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows")访问器将返回插入的默认值和主键。
- en: 'New in version 1.4: Added [`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows") and [`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows") accessors. In version
    2.0, the underlying implementation which fetches and populates the data for these
    attributes was generalized to be supported by most backends, whereas in 1.4 they
    were only supported by the `psycopg2` driver.'
  id: totrans-673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4 版中的新功能：添加了 [`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows") 和 [`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows") 访问器。在 2.0 版中，为这些属性提取和填充数据的底层实现被泛化以受到大多数后端的支持，而在
    1.4 版中，它们仅受到 `psycopg2` 驱动程序的支持。
- en: 'Parameters:'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`cols` – optional list of column key names or [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that acts as a filter for those columns that will
    be fetched.'
  id: totrans-675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cols` – 可选的列键名或 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    列表，充当将被提取的列的过滤器。'
- en: '`supplemental_cols` –'
  id: totrans-676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`supplemental_cols` –'
- en: optional list of RETURNING expressions, in the same form as one would pass to
    the [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") method. When present, the additional
    columns will be included in the RETURNING clause, and the [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") object will be “rewound” when returned, so that
    methods like [`CursorResult.all()`](connections.html#sqlalchemy.engine.CursorResult.all
    "sqlalchemy.engine.CursorResult.all") will return new rows mostly as though the
    statement used [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") directly. However, unlike when
    using [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") directly, the **order of the
    columns is undefined**, so can only be targeted using names or [`Row._mapping`](connections.html#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") keys; they cannot reliably be targeted positionally.
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的 RETURNING 表达式列表，与传递给 [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") 方法的形式相同。当存在时，额外的列将包含在 RETURNING
    子句中，并且在返回时 [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    对象将被“倒带”，因此像 [`CursorResult.all()`](connections.html#sqlalchemy.engine.CursorResult.all
    "sqlalchemy.engine.CursorResult.all") 这样的方法将返回新的行，几乎就像语句直接使用了 [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") 一样。但是，与直接使用 [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") 不同，**列的顺序是未定义的**，因此只能使用名称或 [`Row._mapping`](connections.html#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") 键进行定位；它们不能可靠地按位置进行定位。
- en: New in version 2.0.
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0 版中的新功能。
- en: '`sort_by_parameter_order` –'
  id: totrans-679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort_by_parameter_order` –'
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于针对多个参数集执行的批量插入，组织 RETURNING 的结果，使返回的行与传入的参数集的顺序对应。这仅适用于支持方言的 [executemany](../glossary.html#term-executemany)
    执行，并通常利用 [insertmanyvalues](../glossary.html#term-insertmanyvalues) 特性。
- en: New in version 2.0.10.
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0.10 版中的新功能。
- en: See also
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT'
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 RETURNING 行与参数集相关联](connections.html#engine-insertmanyvalues-returning-order)
    - 关于对批量插入的 RETURNING 行进行排序的背景信息'
- en: See also
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")'
- en: '[`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults")'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults")'
- en: '[`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows")'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows")'
- en: '[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")'
- en: '[`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows")'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows")'
- en: '[PRE109]'
  id: totrans-690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Add a [RETURNING](../glossary.html#term-RETURNING) or equivalent clause to this
    statement.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 为该语句添加[RETURNING](../glossary.html#term-RETURNING)或等效子句。
- en: 'e.g.:'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE110]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: The method may be invoked multiple times to add new entries to the list of expressions
    to be returned.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法可以多次调用以将新条目添加到要返回的表达式列表中。
- en: 'New in version 1.4.0b2: The method may be invoked multiple times to add new
    entries to the list of expressions to be returned.'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.0b2 中添加：该方法可以多次调用以将新条目添加到要返回的表达式列表中。
- en: 'The given collection of column expressions should be derived from the table
    that is the target of the INSERT, UPDATE, or DELETE. While [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are typical, the elements can also be expressions:'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的列表达式集应源自于INSERT、UPDATE或DELETE的目标表。虽然[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象是典型的，但元素也可以是表达式：
- en: '[PRE111]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Upon compilation, a RETURNING clause, or database equivalent, will be rendered
    within the statement. For INSERT and UPDATE, the values are the newly inserted/updated
    values. For DELETE, the values are those of the rows which were deleted.
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译时，RETURNING子句或数据库等效子句将在语句内呈现。对于INSERT和UPDATE，值是新插入/更新的值。对于DELETE，值是已删除行的值。
- en: Upon execution, the values of the columns to be returned are made available
    via the result set and can be iterated using [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") and similar. For DBAPIs which do not
    natively support returning values (i.e. cx_oracle), SQLAlchemy will approximate
    this behavior at the result level so that a reasonable amount of behavioral neutrality
    is provided.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行时，要返回的列的值通过结果集可用，并且可以使用[`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone")等进行迭代。对于不本地支持返回值的DBAPI（即cx_oracle），SQLAlchemy将在结果级别近似此行为，以便提供合理数量的行为中立性。
- en: Note that not all databases/DBAPIs support RETURNING. For those backends with
    no support, an exception is raised upon compilation and/or execution. For those
    who do support it, the functionality across backends varies greatly, including
    restrictions on executemany() and other statements which return multiple rows.
    Please read the documentation notes for the database in use in order to determine
    the availability of RETURNING.
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，并非所有的数据库/DBAPI都支持RETURNING。对于不支持的后端，在编译和/或执行时会引发异常。对于支持它的后端，跨后端的功能差异很大，包括对executemany()和其他返回多行的语句的限制。请阅读所使用数据库的文档注释，以确定RETURNING的可用性。
- en: 'Parameters:'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*cols` – series of columns, SQL expressions, or whole tables entities to be
    returned.'
  id: totrans-702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*cols` – 一系列列、SQL表达式或整个表实体将被返回。'
- en: '`sort_by_parameter_order` –'
  id: totrans-703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort_by_parameter_order` –'
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于针对多个参数集执行的批量INSERT，请组织RETURNING的结果，使返回的行与传递的参数集的顺序相对应。这仅适用于支持方言的[executemany](../glossary.html#term-executemany)执行，并通常利用[insertmanyvalues](../glossary.html#term-insertmanyvalues)功能。
- en: New in version 2.0.10.
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本中添加的 2.0.10。
- en: See also
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT (Core level discussion)'
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将RETURNING行与参数集相关联](connections.html#engine-insertmanyvalues-returning-order)
    - 关于对批量INSERT排序RETURNING行的背景（核心级讨论）'
- en: '[Correlating RETURNING records with input data order](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - example of use with [ORM Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    (ORM level discussion)'
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 RETURNING 记录与输入数据顺序相关联](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - 与 [ORM Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    的使用示例（ORM 级讨论）'
- en: See also
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - an alternative method
    tailored towards efficient fetching of server-side defaults and triggers for single-row
    INSERTs or UPDATEs.'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - 一种针对单行 INSERTs 或 UPDATEs
    的有效提取服务器端默认值和触发器的替代方法。'
- en: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - 在 [SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial) 中'
- en: '[PRE112]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Return a [plugin-enabled](../glossary.html#term-plugin-enabled) description
    of the columns which this DML construct is RETURNING against, in other words the
    expressions established as part of [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning").
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 DML 构造与之相对应的列的 [插件启用](../glossary.html#term-plugin-enabled) 描述，换句话说，作为 [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") 的一部分建立的表达式。
- en: This attribute is generally useful when using the ORM, as an extended structure
    which includes information about mapped entities is returned. The section [Inspecting
    entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    contains more background.
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 ORM 时，此属性通常很有用，因为它返回了一个包含有关映射实体信息的扩展结构。该部分 [从启用 ORM 的 SELECT 和 DML 语句检查实体和列](../orm/queryguide/api.html#queryguide-inspection)
    包含了更多的背景知识。
- en: 'For a Core statement, the structure returned by this accessor is derived from
    the same objects that are returned by the [`UpdateBase.exported_columns`](#sqlalchemy.sql.expression.UpdateBase.exported_columns
    "sqlalchemy.sql.expression.UpdateBase.exported_columns") accessor:'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Core 语句，此访问器返回的结构源自与 [`UpdateBase.exported_columns`](#sqlalchemy.sql.expression.UpdateBase.exported_columns
    "sqlalchemy.sql.expression.UpdateBase.exported_columns") 访问器返回的相同对象：
- en: '[PRE113]'
  id: totrans-716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: New in version 1.4.33.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.33 开始新添加。
- en: See also
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`UpdateBase.entity_description`](#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description")'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.entity_description`](#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description")'
- en: '[`Select.column_descriptions`](selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") - entity information for
    a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.column_descriptions`](selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") - 一个 [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造的实体信息'
- en: '[Inspecting entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    - ORM background'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: '[从启用 ORM 的 SELECT 和 DML 语句检查实体和列](../orm/queryguide/api.html#queryguide-inspection)
    - ORM 背景'
- en: '[PRE114]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Add dialect options to this INSERT/UPDATE/DELETE object.
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个 INSERT/UPDATE/DELETE 对象添加方言选项。
- en: 'e.g.:'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE115]'
  id: totrans-725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Add a table hint for a single table to this INSERT/UPDATE/DELETE statement.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个 INSERT/UPDATE/DELETE 语句添加一个单独的表提示。
- en: Note
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`UpdateBase.with_hint()`](#sqlalchemy.sql.expression.UpdateBase.with_hint
    "sqlalchemy.sql.expression.UpdateBase.with_hint") currently applies only to Microsoft
    SQL Server. For MySQL INSERT/UPDATE/DELETE hints, use `UpdateBase.prefix_with()`.'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.with_hint()`](#sqlalchemy.sql.expression.UpdateBase.with_hint
    "sqlalchemy.sql.expression.UpdateBase.with_hint") 目前仅适用于 Microsoft SQL Server。对于
    MySQL INSERT/UPDATE/DELETE 提示，请使用 `UpdateBase.prefix_with()`。'
- en: The text of the hint is rendered in the appropriate location for the database
    backend in use, relative to the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that is the subject of this statement, or optionally
    to that of the given [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    passed as the `selectable` argument.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 提示文本根据正在使用的数据库后端在适当的位置呈现，相对于这个语句的主题 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") ，或者可选地传递给 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 的 `selectable` 参数的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 。
- en: 'The `dialect_name` option will limit the rendering of a particular hint to
    a particular backend. Such as, to add a hint that only takes effect for SQL Server:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: '`dialect_name`选项将限制特定提示的渲染到特定后端。例如，要添加仅在SQL Server上生效的提示：'
- en: '[PRE117]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Parameters:'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`text` – Text of the hint.'
  id: totrans-734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text` – 提示的文本。'
- en: '`selectable` – optional [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that specifies an element of the FROM clause within an UPDATE or DELETE to be
    the subject of the hint - applies only to certain backends.'
  id: totrans-735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectable` – 可选的[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，指定UPDATE或DELETE中FROM子句的一个元素作为提示的主题
    - 仅适用于某些后端。'
- en: '`dialect_name` – defaults to `*`, if specified as the name of a particular
    dialect, will apply these hints only when that dialect is in use.'
  id: totrans-736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 默认为`*`，如果指定为特定方言的名称，则仅在使用该方言时应用这些提示。'
- en: '[PRE118]'
  id: totrans-737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Supplies support for [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") to INSERT and UPDATE constructs.
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 为[`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values "sqlalchemy.sql.expression.ValuesBase.values")提供了对INSERT和UPDATE构造的支持。
- en: '**Members**'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[select](#sqlalchemy.sql.expression.ValuesBase.select), [values()](#sqlalchemy.sql.expression.ValuesBase.values)'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '[select](#sqlalchemy.sql.expression.ValuesBase.select), [values()](#sqlalchemy.sql.expression.ValuesBase.values)'
- en: '**Class signature**'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase") ([`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase"))
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase")（[`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")）
- en: '[PRE119]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: SELECT statement for INSERT .. FROM SELECT
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: INSERT .. FROM SELECT的SELECT语句
- en: '[PRE120]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Specify a fixed VALUES clause for an INSERT statement, or the SET clause for
    an UPDATE.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 为INSERT语句指定一个固定的VALUES子句，或为UPDATE指定SET子句。
- en: Note that the [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    and [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    constructs support per-execution time formatting of the VALUES and/or SET clauses,
    based on the arguments passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"). However, the [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") method can be used to “fix” a particular
    set of parameters into the statement.
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")和[`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造支持基于传递给[`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")的参数对VALUES和/或SET子句进行执行时格式化。但是，[`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values")方法可用于将特定一组参数固定到语句中。
- en: Multiple calls to [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") will produce a new construct, each
    one with the parameter list modified to include the new parameters sent. In the
    typical case of a single dictionary of parameters, the newly passed keys will
    replace the same keys in the previous construct. In the case of a list-based “multiple
    values” construct, each new list of values is extended onto the existing list
    of values.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 对[`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values "sqlalchemy.sql.expression.ValuesBase.values")的多次调用将生成一个新的构造，每个构造的参数列表都修改为包括新发送的参数。在单个参数字典的典型情况下，新传递的键将替换上一个构造中的相同键。在基于列表的“多个值”构造的情况下，每个新值列表都会附加到现有的值列表上。
- en: 'Parameters:'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`**kwargs` –'
  id: totrans-750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kwargs` –'
- en: 'key value pairs representing the string key of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") mapped to the value to be rendered into the VALUES
    or SET clause:'
  id: totrans-751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表示[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")的字符串键的键值对映射到要呈现到VALUES或SET子句中的值：
- en: '[PRE121]'
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '`*args` –'
  id: totrans-753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*args` –'
- en: As an alternative to passing key/value parameters, a dictionary, tuple, or list
    of dictionaries or tuples can be passed as a single positional argument in order
    to form the VALUES or SET clause of the statement. The forms that are accepted
    vary based on whether this is an [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") or an [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct.
  id: totrans-754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为传递键/值参数的替代方案，可以传递一个字典、元组或字典或元组的列表作为单个位置参数，以形成语句的 VALUES 或 SET 子句。接受的形式因此是一个
    [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    或 [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    结构而异。
- en: 'For either an [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    or [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct, a single dictionary can be passed, which works the same as that of
    the kwargs form:'
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    或 [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    结构，可以传递单个字典，其工作方式与关键字参数形式相同：
- en: '[PRE122]'
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'Also for either form but more typically for the [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, a tuple that contains an entry
    for every column in the table is also accepted:'
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同样适用于任何形式，但更典型的是对于 [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    结构，还可以接受一个包含表中每一列的条目的元组：
- en: '[PRE123]'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'The [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct also supports being passed a list of dictionaries or full-table-tuples,
    which on the server will render the less common SQL syntax of “multiple values”
    - this syntax is supported on backends such as SQLite, PostgreSQL, MySQL, but
    not necessarily others:'
  id: totrans-759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    结构还支持传递字典或完整表元组的列表，这将在服务器上呈现较少见的 SQL 语法“多个值” - 此语法在后端，如 SQLite、PostgreSQL、MySQL
    等中受支持，但不一定适用于其他后端：'
- en: '[PRE124]'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'The above form would render a multiple VALUES statement similar to:'
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述形式将呈现类似于多个 VALUES 语句的内容：
- en: '[PRE125]'
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: It is essential to note that **passing multiple values is NOT the same as using
    traditional executemany() form**. The above syntax is a **special** syntax not
    typically used. To emit an INSERT statement against multiple rows, the normal
    method is to pass a multiple values list to the [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, which is supported by all database
    backends and is generally more efficient for a very large number of parameters.
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 需要注意的是，**传递多个值并不等同于使用传统的 executemany() 形式**。上述语法是一种**特殊**的语法，通常不常用。要针对多行发出 INSERT
    语句，正常方法是将多个值列表传递给 [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 方法，该方法受到所有数据库后端的支持，并且通常对于非常大量的参数更有效率。
- en: See also
  id: totrans-764
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请参阅
- en: ''
  id: totrans-765
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Sending Multiple Parameters](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - an introduction to the traditional Core method of multiple parameter set invocation
    for INSERTs and other statements.'
  id: totrans-766
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[发送多个参数](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - 介绍了用于 INSERT 和其他语句的传统 Core 方法的多个参数集调用。'
- en: ''
  id: totrans-767
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The UPDATE construct also supports rendering the SET parameters in a specific
    order. For this feature refer to the [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method.
  id: totrans-768
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: UPDATE 结构还支持以特定顺序呈现 SET 参数。有关此功能，请参阅 [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") 方法。
- en: ''
  id: totrans-769
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  id: totrans-770
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请参阅
- en: ''
  id: totrans-771
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
  id: totrans-772
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
