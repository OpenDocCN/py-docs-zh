- en: Insert, Updates, Deletes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/dml.html](https://docs.sqlalchemy.org/en/20/core/dml.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: INSERT, UPDATE and DELETE statements build on a hierarchy starting with [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase"). The [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") and [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") constructs build on the intermediary [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase").
  prefs: []
  type: TYPE_NORMAL
- en: '## DML Foundational Constructors'
  prefs: []
  type: TYPE_NORMAL
- en: Top level “INSERT”, “UPDATE”, “DELETE” constructors.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [delete](#sqlalchemy.sql.expression.delete)(table) | Construct [`Delete`](#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") object. |'
  prefs: []
  type: TYPE_TB
- en: '| [insert](#sqlalchemy.sql.expression.insert)(table) | Construct an [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") object. |'
  prefs: []
  type: TYPE_TB
- en: '| [update](#sqlalchemy.sql.expression.update)(table) | Construct an [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") object. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Construct [`Delete`](#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Similar functionality is available via the [`TableClause.delete()`](selectable.html#sqlalchemy.sql.expression.TableClause.delete
    "sqlalchemy.sql.expression.TableClause.delete") method on [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**table** – The table to delete rows from.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using UPDATE and DELETE Statements](../tutorial/data_update.html#tutorial-core-update-delete)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Construct an [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Similar functionality is available via the [`TableClause.insert()`](selectable.html#sqlalchemy.sql.expression.TableClause.insert
    "sqlalchemy.sql.expression.TableClause.insert") method on [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using INSERT Statements](../tutorial/data_insert.html#tutorial-core-insert)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`table` – [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") which is the subject of the insert.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`values` – collection of values to be inserted; see [`Insert.values()`](#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") for a description of allowed formats
    here. Can be omitted entirely; a [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct will also dynamically render the
    VALUES clause at execution time based on the parameters passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inline` – if True, no attempt will be made to retrieve the SQL-generated default
    values to be provided within the statement; in particular, this allows SQL expressions
    to be rendered ‘inline’ within the statement without the need to pre-execute them
    beforehand; for backends that support “returning”, this turns off the “implicit
    returning” feature for the statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If both [`insert.values`](#sqlalchemy.sql.expression.insert.params.values "sqlalchemy.sql.expression.insert")
    and compile-time bind parameters are present, the compile-time bind parameters
    override the information specified within [`insert.values`](#sqlalchemy.sql.expression.insert.params.values
    "sqlalchemy.sql.expression.insert") on a per-key basis.
  prefs: []
  type: TYPE_NORMAL
- en: 'The keys within [`Insert.values`](#sqlalchemy.sql.expression.Insert.params.values
    "sqlalchemy.sql.expression.Insert") can be either [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or their string identifiers. Each key may
    reference one of:'
  prefs: []
  type: TYPE_NORMAL
- en: a literal data value (i.e. string, number, etc.);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a Column object;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a SELECT statement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a `SELECT` statement is specified which references this `INSERT` statement’s
    table, the statement will be correlated against the `INSERT` statement.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using INSERT Statements](../tutorial/data_insert.html#tutorial-core-insert)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Construct an [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Similar functionality is available via the [`TableClause.update()`](selectable.html#sqlalchemy.sql.expression.TableClause.update
    "sqlalchemy.sql.expression.TableClause.update") method on [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**table** – A [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object representing the database table to be updated.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using UPDATE and DELETE Statements](../tutorial/data_update.html#tutorial-core-update-delete)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: DML Class Documentation Constructors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Class documentation for the constructors listed at [DML Foundational Constructors](#dml-foundational-consructors).
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Delete](#sqlalchemy.sql.expression.Delete) | Represent a DELETE construct.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Insert](#sqlalchemy.sql.expression.Insert) | Represent an INSERT construct.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Update](#sqlalchemy.sql.expression.Update) | Represent an Update construct.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [UpdateBase](#sqlalchemy.sql.expression.UpdateBase) | Form the base for `INSERT`,
    `UPDATE`, and `DELETE` statements. |'
  prefs: []
  type: TYPE_TB
- en: '| [ValuesBase](#sqlalchemy.sql.expression.ValuesBase) | Supplies support for
    [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values "sqlalchemy.sql.expression.ValuesBase.values")
    to INSERT and UPDATE constructs. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Represent a DELETE construct.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Delete`](#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    object is created using the [`delete()`](#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[where()](#sqlalchemy.sql.expression.Delete.where), [returning()](#sqlalchemy.sql.expression.Delete.returning)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Delete`](#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") (`sqlalchemy.sql.expression.DMLWhereBase`,
    [`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `DMLWhereBase.where()` *method of* `DMLWhereBase`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new construct with the given expression(s) added to its WHERE clause,
    joined to the existing clause via AND, if any.
  prefs: []
  type: TYPE_NORMAL
- en: Both [`Update.where()`](#sqlalchemy.sql.expression.Update.where "sqlalchemy.sql.expression.Update.where")
    and [`Delete.where()`](#sqlalchemy.sql.expression.Delete.where "sqlalchemy.sql.expression.Delete.where")
    support multiple-table forms, including database-specific `UPDATE...FROM` as well
    as `DELETE..USING`. For backends that don’t have multiple-table support, a backend
    agnostic approach to using multiple tables is to make use of correlated subqueries.
    See the linked tutorial sections below for examples.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Correlated Updates](../tutorial/data_update.html#tutorial-correlated-updates)'
  prefs: []
  type: TYPE_NORMAL
- en: '[UPDATE..FROM](../tutorial/data_update.html#tutorial-update-from)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Multiple Table Deletes](../tutorial/data_update.html#tutorial-multi-table-deletes)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *method of* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Add a [RETURNING](../glossary.html#term-RETURNING) or equivalent clause to this
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The method may be invoked multiple times to add new entries to the list of expressions
    to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.0b2: The method may be invoked multiple times to add new
    entries to the list of expressions to be returned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The given collection of column expressions should be derived from the table
    that is the target of the INSERT, UPDATE, or DELETE. While [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are typical, the elements can also be expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Upon compilation, a RETURNING clause, or database equivalent, will be rendered
    within the statement. For INSERT and UPDATE, the values are the newly inserted/updated
    values. For DELETE, the values are those of the rows which were deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Upon execution, the values of the columns to be returned are made available
    via the result set and can be iterated using [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") and similar. For DBAPIs which do not
    natively support returning values (i.e. cx_oracle), SQLAlchemy will approximate
    this behavior at the result level so that a reasonable amount of behavioral neutrality
    is provided.
  prefs: []
  type: TYPE_NORMAL
- en: Note that not all databases/DBAPIs support RETURNING. For those backends with
    no support, an exception is raised upon compilation and/or execution. For those
    who do support it, the functionality across backends varies greatly, including
    restrictions on executemany() and other statements which return multiple rows.
    Please read the documentation notes for the database in use in order to determine
    the availability of RETURNING.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*cols` – series of columns, SQL expressions, or whole tables entities to be
    returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort_by_parameter_order` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT (Core level discussion)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING records with input data order](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - example of use with [ORM Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    (ORM level discussion)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - an alternative method
    tailored towards efficient fetching of server-side defaults and triggers for single-row
    INSERTs or UPDATEs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Represent an INSERT construct.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    object is created using the [`insert()`](#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[values()](#sqlalchemy.sql.expression.Insert.values), [returning()](#sqlalchemy.sql.expression.Insert.returning),
    [from_select()](#sqlalchemy.sql.expression.Insert.from_select), [inline()](#sqlalchemy.sql.expression.Insert.inline),
    [select](#sqlalchemy.sql.expression.Insert.select)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") ([`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") *method of* [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Specify a fixed VALUES clause for an INSERT statement, or the SET clause for
    an UPDATE.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    and [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    constructs support per-execution time formatting of the VALUES and/or SET clauses,
    based on the arguments passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"). However, the [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") method can be used to “fix” a particular
    set of parameters into the statement.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple calls to [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") will produce a new construct, each
    one with the parameter list modified to include the new parameters sent. In the
    typical case of a single dictionary of parameters, the newly passed keys will
    replace the same keys in the previous construct. In the case of a list-based “multiple
    values” construct, each new list of values is extended onto the existing list
    of values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**kwargs` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'key value pairs representing the string key of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") mapped to the value to be rendered into the VALUES
    or SET clause:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`*args` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an alternative to passing key/value parameters, a dictionary, tuple, or list
    of dictionaries or tuples can be passed as a single positional argument in order
    to form the VALUES or SET clause of the statement. The forms that are accepted
    vary based on whether this is an [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") or an [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For either an [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    or [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct, a single dictionary can be passed, which works the same as that of
    the kwargs form:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also for either form but more typically for the [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, a tuple that contains an entry
    for every column in the table is also accepted:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct also supports being passed a list of dictionaries or full-table-tuples,
    which on the server will render the less common SQL syntax of “multiple values”
    - this syntax is supported on backends such as SQLite, PostgreSQL, MySQL, but
    not necessarily others:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The above form would render a multiple VALUES statement similar to:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It is essential to note that **passing multiple values is NOT the same as using
    traditional executemany() form**. The above syntax is a **special** syntax not
    typically used. To emit an INSERT statement against multiple rows, the normal
    method is to pass a multiple values list to the [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, which is supported by all database
    backends and is generally more efficient for a very large number of parameters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Sending Multiple Parameters](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - an introduction to the traditional Core method of multiple parameter set invocation
    for INSERTs and other statements.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The UPDATE construct also supports rendering the SET parameters in a specific
    order. For this feature refer to the [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *method of* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Add a [RETURNING](../glossary.html#term-RETURNING) or equivalent clause to this
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The method may be invoked multiple times to add new entries to the list of expressions
    to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.0b2: The method may be invoked multiple times to add new
    entries to the list of expressions to be returned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The given collection of column expressions should be derived from the table
    that is the target of the INSERT, UPDATE, or DELETE. While [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are typical, the elements can also be expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Upon compilation, a RETURNING clause, or database equivalent, will be rendered
    within the statement. For INSERT and UPDATE, the values are the newly inserted/updated
    values. For DELETE, the values are those of the rows which were deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Upon execution, the values of the columns to be returned are made available
    via the result set and can be iterated using [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") and similar. For DBAPIs which do not
    natively support returning values (i.e. cx_oracle), SQLAlchemy will approximate
    this behavior at the result level so that a reasonable amount of behavioral neutrality
    is provided.
  prefs: []
  type: TYPE_NORMAL
- en: Note that not all databases/DBAPIs support RETURNING. For those backends with
    no support, an exception is raised upon compilation and/or execution. For those
    who do support it, the functionality across backends varies greatly, including
    restrictions on executemany() and other statements which return multiple rows.
    Please read the documentation notes for the database in use in order to determine
    the availability of RETURNING.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*cols` – series of columns, SQL expressions, or whole tables entities to be
    returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort_by_parameter_order` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT (Core level discussion)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING records with input data order](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - example of use with [ORM Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    (ORM level discussion)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - an alternative method
    tailored towards efficient fetching of server-side defaults and triggers for single-row
    INSERTs or UPDATEs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct which represents an `INSERT...FROM SELECT` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`names` – a sequence of string column names or [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects representing the target columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`select` – a [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") or other construct which resolves into
    a [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause"),
    such as an ORM [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, etc. The order of columns returned from this FROM clause should correspond
    to the order of columns sent as the `names` parameter; while this is not checked
    before passing along to the database, the database would normally raise an exception
    if these column lists don’t correspond.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_defaults` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, non-server default values and SQL expressions as specified on [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects (as documented in [Column INSERT/UPDATE Defaults](defaults.html))
    not otherwise specified in the list of names will be rendered into the INSERT
    and SELECT statements, so that these values are also included in the data to be
    inserted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A Python-side default that uses a Python callable function will only be invoked
    **once** for the whole statement, and **not per row**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Make this [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct “inline” .
  prefs: []
  type: TYPE_NORMAL
- en: When set, no attempt will be made to retrieve the SQL-generated default values
    to be provided within the statement; in particular, this allows SQL expressions
    to be rendered ‘inline’ within the statement without the need to pre-execute them
    beforehand; for backends that support “returning”, this turns off the “implicit
    returning” feature for the statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: the [`Insert.inline`](#sqlalchemy.sql.expression.Insert.params.inline
    "sqlalchemy.sql.expression.Insert") parameter is now superseded by the [`Insert.inline()`](#sqlalchemy.sql.expression.Insert.inline
    "sqlalchemy.sql.expression.Insert.inline") method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: SELECT statement for INSERT .. FROM SELECT
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Represent an Update construct.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    object is created using the [`update()`](#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[returning()](#sqlalchemy.sql.expression.Update.returning), [where()](#sqlalchemy.sql.expression.Update.where),
    [values()](#sqlalchemy.sql.expression.Update.values), [inline()](#sqlalchemy.sql.expression.Update.inline),
    [ordered_values()](#sqlalchemy.sql.expression.Update.ordered_values)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") (`sqlalchemy.sql.expression.DMLWhereBase`,
    [`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *method of* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Add a [RETURNING](../glossary.html#term-RETURNING) or equivalent clause to this
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The method may be invoked multiple times to add new entries to the list of expressions
    to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.0b2: The method may be invoked multiple times to add new
    entries to the list of expressions to be returned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The given collection of column expressions should be derived from the table
    that is the target of the INSERT, UPDATE, or DELETE. While [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are typical, the elements can also be expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Upon compilation, a RETURNING clause, or database equivalent, will be rendered
    within the statement. For INSERT and UPDATE, the values are the newly inserted/updated
    values. For DELETE, the values are those of the rows which were deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Upon execution, the values of the columns to be returned are made available
    via the result set and can be iterated using [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") and similar. For DBAPIs which do not
    natively support returning values (i.e. cx_oracle), SQLAlchemy will approximate
    this behavior at the result level so that a reasonable amount of behavioral neutrality
    is provided.
  prefs: []
  type: TYPE_NORMAL
- en: Note that not all databases/DBAPIs support RETURNING. For those backends with
    no support, an exception is raised upon compilation and/or execution. For those
    who do support it, the functionality across backends varies greatly, including
    restrictions on executemany() and other statements which return multiple rows.
    Please read the documentation notes for the database in use in order to determine
    the availability of RETURNING.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*cols` – series of columns, SQL expressions, or whole tables entities to be
    returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort_by_parameter_order` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT (Core level discussion)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING records with input data order](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - example of use with [ORM Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    (ORM level discussion)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - an alternative method
    tailored towards efficient fetching of server-side defaults and triggers for single-row
    INSERTs or UPDATEs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `DMLWhereBase.where()` *method of* `DMLWhereBase`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new construct with the given expression(s) added to its WHERE clause,
    joined to the existing clause via AND, if any.
  prefs: []
  type: TYPE_NORMAL
- en: Both [`Update.where()`](#sqlalchemy.sql.expression.Update.where "sqlalchemy.sql.expression.Update.where")
    and [`Delete.where()`](#sqlalchemy.sql.expression.Delete.where "sqlalchemy.sql.expression.Delete.where")
    support multiple-table forms, including database-specific `UPDATE...FROM` as well
    as `DELETE..USING`. For backends that don’t have multiple-table support, a backend
    agnostic approach to using multiple tables is to make use of correlated subqueries.
    See the linked tutorial sections below for examples.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Correlated Updates](../tutorial/data_update.html#tutorial-correlated-updates)'
  prefs: []
  type: TYPE_NORMAL
- en: '[UPDATE..FROM](../tutorial/data_update.html#tutorial-update-from)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Multiple Table Deletes](../tutorial/data_update.html#tutorial-multi-table-deletes)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") *method of* [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Specify a fixed VALUES clause for an INSERT statement, or the SET clause for
    an UPDATE.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    and [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    constructs support per-execution time formatting of the VALUES and/or SET clauses,
    based on the arguments passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"). However, the [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") method can be used to “fix” a particular
    set of parameters into the statement.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple calls to [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") will produce a new construct, each
    one with the parameter list modified to include the new parameters sent. In the
    typical case of a single dictionary of parameters, the newly passed keys will
    replace the same keys in the previous construct. In the case of a list-based “multiple
    values” construct, each new list of values is extended onto the existing list
    of values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**kwargs` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'key value pairs representing the string key of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") mapped to the value to be rendered into the VALUES
    or SET clause:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`*args` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an alternative to passing key/value parameters, a dictionary, tuple, or list
    of dictionaries or tuples can be passed as a single positional argument in order
    to form the VALUES or SET clause of the statement. The forms that are accepted
    vary based on whether this is an [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") or an [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For either an [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    or [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct, a single dictionary can be passed, which works the same as that of
    the kwargs form:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also for either form but more typically for the [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, a tuple that contains an entry
    for every column in the table is also accepted:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct also supports being passed a list of dictionaries or full-table-tuples,
    which on the server will render the less common SQL syntax of “multiple values”
    - this syntax is supported on backends such as SQLite, PostgreSQL, MySQL, but
    not necessarily others:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The above form would render a multiple VALUES statement similar to:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It is essential to note that **passing multiple values is NOT the same as using
    traditional executemany() form**. The above syntax is a **special** syntax not
    typically used. To emit an INSERT statement against multiple rows, the normal
    method is to pass a multiple values list to the [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, which is supported by all database
    backends and is generally more efficient for a very large number of parameters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Sending Multiple Parameters](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - an introduction to the traditional Core method of multiple parameter set invocation
    for INSERTs and other statements.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The UPDATE construct also supports rendering the SET parameters in a specific
    order. For this feature refer to the [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Make this [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct “inline” .
  prefs: []
  type: TYPE_NORMAL
- en: When set, SQL defaults present on [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects via the `default` keyword will be compiled
    ‘inline’ into the statement and not pre-executed. This means that their values
    will not be available in the dictionary returned from [`CursorResult.last_updated_params()`](connections.html#sqlalchemy.engine.CursorResult.last_updated_params
    "sqlalchemy.engine.CursorResult.last_updated_params").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: the [`update.inline`](#sqlalchemy.sql.expression.update.params.inline
    "sqlalchemy.sql.expression.update") parameter is now superseded by the [`Update.inline()`](#sqlalchemy.sql.expression.Update.inline
    "sqlalchemy.sql.expression.Update.inline") method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Specify the VALUES clause of this UPDATE statement with an explicit parameter
    ordering that will be maintained in the SET clause of the resulting UPDATE statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Parameter Ordered Updates](../tutorial/data_update.html#tutorial-parameter-ordered-updates)
    - full example of the [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method supersedes the [`update.preserve_parameter_order`](#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update") parameter, which will be removed in SQLAlchemy
    2.0.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Form the base for `INSERT`, `UPDATE`, and `DELETE` statements.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[entity_description](#sqlalchemy.sql.expression.UpdateBase.entity_description),
    [exported_columns](#sqlalchemy.sql.expression.UpdateBase.exported_columns), [params()](#sqlalchemy.sql.expression.UpdateBase.params),
    [return_defaults()](#sqlalchemy.sql.expression.UpdateBase.return_defaults), [returning()](#sqlalchemy.sql.expression.UpdateBase.returning),
    [returning_column_descriptions](#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions),
    [with_dialect_options()](#sqlalchemy.sql.expression.UpdateBase.with_dialect_options),
    [with_hint()](#sqlalchemy.sql.expression.UpdateBase.with_hint)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase") (`sqlalchemy.sql.roles.DMLRole`, [`sqlalchemy.sql.expression.HasCTE`](selectable.html#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"), `sqlalchemy.sql.expression.HasCompileState`,
    [`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.sql.expression.HasPrefixes`](selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), `sqlalchemy.sql.expression.Generative`,
    `sqlalchemy.sql.expression.ExecutableReturnsRows`, [`sqlalchemy.sql.expression.ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Return a [plugin-enabled](../glossary.html#term-plugin-enabled) description
    of the table and/or entity which this DML construct is operating against.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute is generally useful when using the ORM, as an extended structure
    which includes information about mapped entities is returned. The section [Inspecting
    entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    contains more background.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a Core statement, the structure returned by this accessor is derived from
    the `UpdateBase.table` attribute, and refers to the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") being inserted, updated, or deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.33.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.returning_column_descriptions`](#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.column_descriptions`](selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") - entity information for
    a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct'
  prefs: []
  type: TYPE_NORMAL
- en: '[Inspecting entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    - ORM background'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Return the RETURNING columns as a column collection for this statement.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Set the parameters for the statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method raises `NotImplementedError` on the base class, and is overridden
    by [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase "sqlalchemy.sql.expression.ValuesBase")
    to provide the SET/VALUES clause of UPDATE and INSERT.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Make use of a [RETURNING](../glossary.html#term-RETURNING) clause for the purpose
    of fetching server-side expressions and defaults, for supporting backends only.
  prefs: []
  type: TYPE_NORMAL
- en: Deep Alchemy
  prefs: []
  type: TYPE_NORMAL
- en: The [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") method is used by the
    ORM for its internal work in fetching newly generated primary key and server default
    values, in particular to provide the underyling implementation of the [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") ORM feature as well as to allow RETURNING support with
    bulk ORM inserts. Its behavior is fairly idiosyncratic and is not really intended
    for general use. End users should stick with using [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") in order to add RETURNING clauses
    to their INSERT, UPDATE and DELETE statements.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, a single row INSERT statement will automatically populate the [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute when executed,
    which stores the primary key of the row that was just inserted in the form of
    a [`Row`](connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row") object
    with column names as named tuple keys (and the [`Row._mapping`](connections.html#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") view fully populated as well). The dialect in
    use chooses the strategy to use in order to populate this data; if it was generated
    using server-side defaults and / or SQL expressions, dialect-specific approaches
    such as `cursor.lastrowid` or `RETURNING` are typically used to acquire the new
    primary key value.
  prefs: []
  type: TYPE_NORMAL
- en: However, when the statement is modified by calling [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") before executing the statement,
    additional behaviors take place **only** for backends that support RETURNING and
    for [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that maintain the [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") parameter at its default value of `True`. In these
    cases, when the [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") is returned from the statement’s execution,
    not only will [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") be populated as always,
    the [`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults") attribute will also be populated
    with a [`Row`](connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    named-tuple representing the full range of server generated values from that single
    row, including values for any columns that specify [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") or which make use of [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") using a SQL expression.
  prefs: []
  type: TYPE_NORMAL
- en: When invoking INSERT statements with multiple rows using [insertmanyvalues](connections.html#engine-insertmanyvalues),
    the [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") modifier will have the
    effect of the [`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows") and [`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows") attributes being fully
    populated with lists of [`Row`](connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects representing newly inserted primary key values as well as newly inserted
    server generated values for each row inserted. The [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") and [`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults") attributes will also continue
    to be populated with the first row of these two collections.
  prefs: []
  type: TYPE_NORMAL
- en: If the backend does not support RETURNING or the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") in use has disabled [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table"), then no RETURNING clause is added and no additional
    data is fetched, however the INSERT, UPDATE or DELETE statement proceeds normally.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: When used against an UPDATE statement [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") instead looks for columns
    that include [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") or [`Column.server_onupdate`](metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") parameters assigned, when constructing the columns
    that will be included in the RETURNING clause by default if explicit columns were
    not specified. When used against a DELETE statement, no columns are included in
    RETURNING by default, they instead must be specified explicitly as there are no
    columns that normally change values when a DELETE statement proceeds.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0: [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") is supported for DELETE
    statements also and has been moved from [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase") to [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase").'
  prefs: []
  type: TYPE_NORMAL
- en: The [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") method is mutually exclusive
    against the [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") method and errors will be raised
    during the SQL compilation process if both are used at the same time on one statement.
    The RETURNING clause of the INSERT, UPDATE or DELETE statement is therefore controlled
    by only one of these methods at a time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") method differs from [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") in these ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") method causes the [`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults") collection to be populated
    with the first row from the RETURNING result. This attribute is not populated
    when using [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning").'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") is compatible with existing
    logic used to fetch auto-generated primary key values that are then populated
    into the [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute. By contrast,
    using [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") will have the effect of the
    [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute being left unpopulated.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") can be called against
    any backend. Backends that don’t support RETURNING will skip the usage of the
    feature, rather than raising an exception, *unless* `supplemental_cols` is passed.
    The return value of [`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults") will be `None` for backends
    that don’t support RETURNING or for which the target [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") sets [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") to `False`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An INSERT statement invoked with executemany() is supported if the backend database
    driver supports the [insertmanyvalues](connections.html#engine-insertmanyvalues)
    feature which is now supported by most SQLAlchemy-included backends. When executemany
    is used, the [`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows") and [`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows") accessors will return
    the inserted defaults and primary keys.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New in version 1.4: Added [`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows") and [`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows") accessors. In version
    2.0, the underlying implementation which fetches and populates the data for these
    attributes was generalized to be supported by most backends, whereas in 1.4 they
    were only supported by the `psycopg2` driver.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cols` – optional list of column key names or [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that acts as a filter for those columns that will
    be fetched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`supplemental_cols` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional list of RETURNING expressions, in the same form as one would pass to
    the [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") method. When present, the additional
    columns will be included in the RETURNING clause, and the [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") object will be “rewound” when returned, so that
    methods like [`CursorResult.all()`](connections.html#sqlalchemy.engine.CursorResult.all
    "sqlalchemy.engine.CursorResult.all") will return new rows mostly as though the
    statement used [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") directly. However, unlike when
    using [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") directly, the **order of the
    columns is undefined**, so can only be targeted using names or [`Row._mapping`](connections.html#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") keys; they cannot reliably be targeted positionally.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`sort_by_parameter_order` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Add a [RETURNING](../glossary.html#term-RETURNING) or equivalent clause to this
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The method may be invoked multiple times to add new entries to the list of expressions
    to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.0b2: The method may be invoked multiple times to add new
    entries to the list of expressions to be returned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The given collection of column expressions should be derived from the table
    that is the target of the INSERT, UPDATE, or DELETE. While [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are typical, the elements can also be expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Upon compilation, a RETURNING clause, or database equivalent, will be rendered
    within the statement. For INSERT and UPDATE, the values are the newly inserted/updated
    values. For DELETE, the values are those of the rows which were deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Upon execution, the values of the columns to be returned are made available
    via the result set and can be iterated using [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") and similar. For DBAPIs which do not
    natively support returning values (i.e. cx_oracle), SQLAlchemy will approximate
    this behavior at the result level so that a reasonable amount of behavioral neutrality
    is provided.
  prefs: []
  type: TYPE_NORMAL
- en: Note that not all databases/DBAPIs support RETURNING. For those backends with
    no support, an exception is raised upon compilation and/or execution. For those
    who do support it, the functionality across backends varies greatly, including
    restrictions on executemany() and other statements which return multiple rows.
    Please read the documentation notes for the database in use in order to determine
    the availability of RETURNING.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*cols` – series of columns, SQL expressions, or whole tables entities to be
    returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort_by_parameter_order` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT (Core level discussion)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING records with input data order](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - example of use with [ORM Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    (ORM level discussion)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - an alternative method
    tailored towards efficient fetching of server-side defaults and triggers for single-row
    INSERTs or UPDATEs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Return a [plugin-enabled](../glossary.html#term-plugin-enabled) description
    of the columns which this DML construct is RETURNING against, in other words the
    expressions established as part of [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning").
  prefs: []
  type: TYPE_NORMAL
- en: This attribute is generally useful when using the ORM, as an extended structure
    which includes information about mapped entities is returned. The section [Inspecting
    entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    contains more background.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a Core statement, the structure returned by this accessor is derived from
    the same objects that are returned by the [`UpdateBase.exported_columns`](#sqlalchemy.sql.expression.UpdateBase.exported_columns
    "sqlalchemy.sql.expression.UpdateBase.exported_columns") accessor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.33.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.entity_description`](#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.column_descriptions`](selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") - entity information for
    a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct'
  prefs: []
  type: TYPE_NORMAL
- en: '[Inspecting entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    - ORM background'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Add dialect options to this INSERT/UPDATE/DELETE object.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Add a table hint for a single table to this INSERT/UPDATE/DELETE statement.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.with_hint()`](#sqlalchemy.sql.expression.UpdateBase.with_hint
    "sqlalchemy.sql.expression.UpdateBase.with_hint") currently applies only to Microsoft
    SQL Server. For MySQL INSERT/UPDATE/DELETE hints, use `UpdateBase.prefix_with()`.'
  prefs: []
  type: TYPE_NORMAL
- en: The text of the hint is rendered in the appropriate location for the database
    backend in use, relative to the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that is the subject of this statement, or optionally
    to that of the given [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    passed as the `selectable` argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dialect_name` option will limit the rendering of a particular hint to
    a particular backend. Such as, to add a hint that only takes effect for SQL Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`text` – Text of the hint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`selectable` – optional [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that specifies an element of the FROM clause within an UPDATE or DELETE to be
    the subject of the hint - applies only to certain backends.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect_name` – defaults to `*`, if specified as the name of a particular
    dialect, will apply these hints only when that dialect is in use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Supplies support for [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") to INSERT and UPDATE constructs.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[select](#sqlalchemy.sql.expression.ValuesBase.select), [values()](#sqlalchemy.sql.expression.ValuesBase.values)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase") ([`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: SELECT statement for INSERT .. FROM SELECT
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Specify a fixed VALUES clause for an INSERT statement, or the SET clause for
    an UPDATE.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    and [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    constructs support per-execution time formatting of the VALUES and/or SET clauses,
    based on the arguments passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"). However, the [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") method can be used to “fix” a particular
    set of parameters into the statement.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple calls to [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") will produce a new construct, each
    one with the parameter list modified to include the new parameters sent. In the
    typical case of a single dictionary of parameters, the newly passed keys will
    replace the same keys in the previous construct. In the case of a list-based “multiple
    values” construct, each new list of values is extended onto the existing list
    of values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**kwargs` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'key value pairs representing the string key of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") mapped to the value to be rendered into the VALUES
    or SET clause:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`*args` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an alternative to passing key/value parameters, a dictionary, tuple, or list
    of dictionaries or tuples can be passed as a single positional argument in order
    to form the VALUES or SET clause of the statement. The forms that are accepted
    vary based on whether this is an [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") or an [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For either an [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    or [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct, a single dictionary can be passed, which works the same as that of
    the kwargs form:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also for either form but more typically for the [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, a tuple that contains an entry
    for every column in the table is also accepted:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct also supports being passed a list of dictionaries or full-table-tuples,
    which on the server will render the less common SQL syntax of “multiple values”
    - this syntax is supported on backends such as SQLite, PostgreSQL, MySQL, but
    not necessarily others:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The above form would render a multiple VALUES statement similar to:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It is essential to note that **passing multiple values is NOT the same as using
    traditional executemany() form**. The above syntax is a **special** syntax not
    typically used. To emit an INSERT statement against multiple rows, the normal
    method is to pass a multiple values list to the [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, which is supported by all database
    backends and is generally more efficient for a very large number of parameters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Sending Multiple Parameters](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - an introduction to the traditional Core method of multiple parameter set invocation
    for INSERTs and other statements.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The UPDATE construct also supports rendering the SET parameters in a specific
    order. For this feature refer to the [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## DML Foundational Constructors'
  prefs: []
  type: TYPE_NORMAL
- en: Top level “INSERT”, “UPDATE”, “DELETE” constructors.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [delete](#sqlalchemy.sql.expression.delete)(table) | Construct [`Delete`](#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") object. |'
  prefs: []
  type: TYPE_TB
- en: '| [insert](#sqlalchemy.sql.expression.insert)(table) | Construct an [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") object. |'
  prefs: []
  type: TYPE_TB
- en: '| [update](#sqlalchemy.sql.expression.update)(table) | Construct an [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") object. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Construct [`Delete`](#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Similar functionality is available via the [`TableClause.delete()`](selectable.html#sqlalchemy.sql.expression.TableClause.delete
    "sqlalchemy.sql.expression.TableClause.delete") method on [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**table** – The table to delete rows from.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using UPDATE and DELETE Statements](../tutorial/data_update.html#tutorial-core-update-delete)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Construct an [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Similar functionality is available via the [`TableClause.insert()`](selectable.html#sqlalchemy.sql.expression.TableClause.insert
    "sqlalchemy.sql.expression.TableClause.insert") method on [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using INSERT Statements](../tutorial/data_insert.html#tutorial-core-insert)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`table` – [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") which is the subject of the insert.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`values` – collection of values to be inserted; see [`Insert.values()`](#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") for a description of allowed formats
    here. Can be omitted entirely; a [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct will also dynamically render the
    VALUES clause at execution time based on the parameters passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inline` – if True, no attempt will be made to retrieve the SQL-generated default
    values to be provided within the statement; in particular, this allows SQL expressions
    to be rendered ‘inline’ within the statement without the need to pre-execute them
    beforehand; for backends that support “returning”, this turns off the “implicit
    returning” feature for the statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If both [`insert.values`](#sqlalchemy.sql.expression.insert.params.values "sqlalchemy.sql.expression.insert")
    and compile-time bind parameters are present, the compile-time bind parameters
    override the information specified within [`insert.values`](#sqlalchemy.sql.expression.insert.params.values
    "sqlalchemy.sql.expression.insert") on a per-key basis.
  prefs: []
  type: TYPE_NORMAL
- en: 'The keys within [`Insert.values`](#sqlalchemy.sql.expression.Insert.params.values
    "sqlalchemy.sql.expression.Insert") can be either [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects or their string identifiers. Each key may
    reference one of:'
  prefs: []
  type: TYPE_NORMAL
- en: a literal data value (i.e. string, number, etc.);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a Column object;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a SELECT statement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a `SELECT` statement is specified which references this `INSERT` statement’s
    table, the statement will be correlated against the `INSERT` statement.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using INSERT Statements](../tutorial/data_insert.html#tutorial-core-insert)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Construct an [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Similar functionality is available via the [`TableClause.update()`](selectable.html#sqlalchemy.sql.expression.TableClause.update
    "sqlalchemy.sql.expression.TableClause.update") method on [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**table** – A [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object representing the database table to be updated.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using UPDATE and DELETE Statements](../tutorial/data_update.html#tutorial-core-update-delete)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: DML Class Documentation Constructors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Class documentation for the constructors listed at [DML Foundational Constructors](#dml-foundational-consructors).
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Delete](#sqlalchemy.sql.expression.Delete) | Represent a DELETE construct.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Insert](#sqlalchemy.sql.expression.Insert) | Represent an INSERT construct.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Update](#sqlalchemy.sql.expression.Update) | Represent an Update construct.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [UpdateBase](#sqlalchemy.sql.expression.UpdateBase) | Form the base for `INSERT`,
    `UPDATE`, and `DELETE` statements. |'
  prefs: []
  type: TYPE_TB
- en: '| [ValuesBase](#sqlalchemy.sql.expression.ValuesBase) | Supplies support for
    [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values "sqlalchemy.sql.expression.ValuesBase.values")
    to INSERT and UPDATE constructs. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Represent a DELETE construct.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Delete`](#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    object is created using the [`delete()`](#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[where()](#sqlalchemy.sql.expression.Delete.where), [returning()](#sqlalchemy.sql.expression.Delete.returning)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Delete`](#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") (`sqlalchemy.sql.expression.DMLWhereBase`,
    [`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `DMLWhereBase.where()` *method of* `DMLWhereBase`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new construct with the given expression(s) added to its WHERE clause,
    joined to the existing clause via AND, if any.
  prefs: []
  type: TYPE_NORMAL
- en: Both [`Update.where()`](#sqlalchemy.sql.expression.Update.where "sqlalchemy.sql.expression.Update.where")
    and [`Delete.where()`](#sqlalchemy.sql.expression.Delete.where "sqlalchemy.sql.expression.Delete.where")
    support multiple-table forms, including database-specific `UPDATE...FROM` as well
    as `DELETE..USING`. For backends that don’t have multiple-table support, a backend
    agnostic approach to using multiple tables is to make use of correlated subqueries.
    See the linked tutorial sections below for examples.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Correlated Updates](../tutorial/data_update.html#tutorial-correlated-updates)'
  prefs: []
  type: TYPE_NORMAL
- en: '[UPDATE..FROM](../tutorial/data_update.html#tutorial-update-from)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Multiple Table Deletes](../tutorial/data_update.html#tutorial-multi-table-deletes)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *method of* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Add a [RETURNING](../glossary.html#term-RETURNING) or equivalent clause to this
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The method may be invoked multiple times to add new entries to the list of expressions
    to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.0b2: The method may be invoked multiple times to add new
    entries to the list of expressions to be returned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The given collection of column expressions should be derived from the table
    that is the target of the INSERT, UPDATE, or DELETE. While [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are typical, the elements can also be expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Upon compilation, a RETURNING clause, or database equivalent, will be rendered
    within the statement. For INSERT and UPDATE, the values are the newly inserted/updated
    values. For DELETE, the values are those of the rows which were deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Upon execution, the values of the columns to be returned are made available
    via the result set and can be iterated using [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") and similar. For DBAPIs which do not
    natively support returning values (i.e. cx_oracle), SQLAlchemy will approximate
    this behavior at the result level so that a reasonable amount of behavioral neutrality
    is provided.
  prefs: []
  type: TYPE_NORMAL
- en: Note that not all databases/DBAPIs support RETURNING. For those backends with
    no support, an exception is raised upon compilation and/or execution. For those
    who do support it, the functionality across backends varies greatly, including
    restrictions on executemany() and other statements which return multiple rows.
    Please read the documentation notes for the database in use in order to determine
    the availability of RETURNING.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*cols` – series of columns, SQL expressions, or whole tables entities to be
    returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort_by_parameter_order` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT (Core level discussion)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING records with input data order](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - example of use with [ORM Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    (ORM level discussion)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - an alternative method
    tailored towards efficient fetching of server-side defaults and triggers for single-row
    INSERTs or UPDATEs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Represent an INSERT construct.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    object is created using the [`insert()`](#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[values()](#sqlalchemy.sql.expression.Insert.values), [returning()](#sqlalchemy.sql.expression.Insert.returning),
    [from_select()](#sqlalchemy.sql.expression.Insert.from_select), [inline()](#sqlalchemy.sql.expression.Insert.inline),
    [select](#sqlalchemy.sql.expression.Insert.select)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") ([`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") *method of* [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Specify a fixed VALUES clause for an INSERT statement, or the SET clause for
    an UPDATE.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    and [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    constructs support per-execution time formatting of the VALUES and/or SET clauses,
    based on the arguments passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"). However, the [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") method can be used to “fix” a particular
    set of parameters into the statement.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple calls to [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") will produce a new construct, each
    one with the parameter list modified to include the new parameters sent. In the
    typical case of a single dictionary of parameters, the newly passed keys will
    replace the same keys in the previous construct. In the case of a list-based “multiple
    values” construct, each new list of values is extended onto the existing list
    of values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**kwargs` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'key value pairs representing the string key of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") mapped to the value to be rendered into the VALUES
    or SET clause:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`*args` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an alternative to passing key/value parameters, a dictionary, tuple, or list
    of dictionaries or tuples can be passed as a single positional argument in order
    to form the VALUES or SET clause of the statement. The forms that are accepted
    vary based on whether this is an [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") or an [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For either an [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    or [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct, a single dictionary can be passed, which works the same as that of
    the kwargs form:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also for either form but more typically for the [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, a tuple that contains an entry
    for every column in the table is also accepted:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct also supports being passed a list of dictionaries or full-table-tuples,
    which on the server will render the less common SQL syntax of “multiple values”
    - this syntax is supported on backends such as SQLite, PostgreSQL, MySQL, but
    not necessarily others:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The above form would render a multiple VALUES statement similar to:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It is essential to note that **passing multiple values is NOT the same as using
    traditional executemany() form**. The above syntax is a **special** syntax not
    typically used. To emit an INSERT statement against multiple rows, the normal
    method is to pass a multiple values list to the [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, which is supported by all database
    backends and is generally more efficient for a very large number of parameters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Sending Multiple Parameters](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - an introduction to the traditional Core method of multiple parameter set invocation
    for INSERTs and other statements.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The UPDATE construct also supports rendering the SET parameters in a specific
    order. For this feature refer to the [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *method of* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Add a [RETURNING](../glossary.html#term-RETURNING) or equivalent clause to this
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: The method may be invoked multiple times to add new entries to the list of expressions
    to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.0b2: The method may be invoked multiple times to add new
    entries to the list of expressions to be returned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The given collection of column expressions should be derived from the table
    that is the target of the INSERT, UPDATE, or DELETE. While [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are typical, the elements can also be expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Upon compilation, a RETURNING clause, or database equivalent, will be rendered
    within the statement. For INSERT and UPDATE, the values are the newly inserted/updated
    values. For DELETE, the values are those of the rows which were deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Upon execution, the values of the columns to be returned are made available
    via the result set and can be iterated using [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") and similar. For DBAPIs which do not
    natively support returning values (i.e. cx_oracle), SQLAlchemy will approximate
    this behavior at the result level so that a reasonable amount of behavioral neutrality
    is provided.
  prefs: []
  type: TYPE_NORMAL
- en: Note that not all databases/DBAPIs support RETURNING. For those backends with
    no support, an exception is raised upon compilation and/or execution. For those
    who do support it, the functionality across backends varies greatly, including
    restrictions on executemany() and other statements which return multiple rows.
    Please read the documentation notes for the database in use in order to determine
    the availability of RETURNING.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*cols` – series of columns, SQL expressions, or whole tables entities to be
    returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort_by_parameter_order` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT (Core level discussion)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING records with input data order](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - example of use with [ORM Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    (ORM level discussion)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - an alternative method
    tailored towards efficient fetching of server-side defaults and triggers for single-row
    INSERTs or UPDATEs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct which represents an `INSERT...FROM SELECT` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`names` – a sequence of string column names or [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects representing the target columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`select` – a [`select()`](selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") or other construct which resolves into
    a [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause"),
    such as an ORM [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, etc. The order of columns returned from this FROM clause should correspond
    to the order of columns sent as the `names` parameter; while this is not checked
    before passing along to the database, the database would normally raise an exception
    if these column lists don’t correspond.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_defaults` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, non-server default values and SQL expressions as specified on [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects (as documented in [Column INSERT/UPDATE Defaults](defaults.html))
    not otherwise specified in the list of names will be rendered into the INSERT
    and SELECT statements, so that these values are also included in the data to be
    inserted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A Python-side default that uses a Python callable function will only be invoked
    **once** for the whole statement, and **not per row**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Make this [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct “inline” .
  prefs: []
  type: TYPE_NORMAL
- en: When set, no attempt will be made to retrieve the SQL-generated default values
    to be provided within the statement; in particular, this allows SQL expressions
    to be rendered ‘inline’ within the statement without the need to pre-execute them
    beforehand; for backends that support “returning”, this turns off the “implicit
    returning” feature for the statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: the [`Insert.inline`](#sqlalchemy.sql.expression.Insert.params.inline
    "sqlalchemy.sql.expression.Insert") parameter is now superseded by the [`Insert.inline()`](#sqlalchemy.sql.expression.Insert.inline
    "sqlalchemy.sql.expression.Insert.inline") method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: SELECT statement for INSERT .. FROM SELECT
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Represent an Update construct.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    object is created using the [`update()`](#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[returning()](#sqlalchemy.sql.expression.Update.returning), [where()](#sqlalchemy.sql.expression.Update.where),
    [values()](#sqlalchemy.sql.expression.Update.values), [inline()](#sqlalchemy.sql.expression.Update.inline),
    [ordered_values()](#sqlalchemy.sql.expression.Update.ordered_values)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") (`sqlalchemy.sql.expression.DMLWhereBase`,
    [`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") *method of* [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Add a [RETURNING](../glossary.html#term-RETURNING) or equivalent clause to this
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: The method may be invoked multiple times to add new entries to the list of expressions
    to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.0b2: The method may be invoked multiple times to add new
    entries to the list of expressions to be returned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The given collection of column expressions should be derived from the table
    that is the target of the INSERT, UPDATE, or DELETE. While [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are typical, the elements can also be expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Upon compilation, a RETURNING clause, or database equivalent, will be rendered
    within the statement. For INSERT and UPDATE, the values are the newly inserted/updated
    values. For DELETE, the values are those of the rows which were deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Upon execution, the values of the columns to be returned are made available
    via the result set and can be iterated using [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") and similar. For DBAPIs which do not
    natively support returning values (i.e. cx_oracle), SQLAlchemy will approximate
    this behavior at the result level so that a reasonable amount of behavioral neutrality
    is provided.
  prefs: []
  type: TYPE_NORMAL
- en: Note that not all databases/DBAPIs support RETURNING. For those backends with
    no support, an exception is raised upon compilation and/or execution. For those
    who do support it, the functionality across backends varies greatly, including
    restrictions on executemany() and other statements which return multiple rows.
    Please read the documentation notes for the database in use in order to determine
    the availability of RETURNING.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*cols` – series of columns, SQL expressions, or whole tables entities to be
    returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort_by_parameter_order` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT (Core level discussion)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING records with input data order](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - example of use with [ORM Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    (ORM level discussion)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - an alternative method
    tailored towards efficient fetching of server-side defaults and triggers for single-row
    INSERTs or UPDATEs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `DMLWhereBase.where()` *method of* `DMLWhereBase`'
  prefs: []
  type: TYPE_NORMAL
- en: Return a new construct with the given expression(s) added to its WHERE clause,
    joined to the existing clause via AND, if any.
  prefs: []
  type: TYPE_NORMAL
- en: Both [`Update.where()`](#sqlalchemy.sql.expression.Update.where "sqlalchemy.sql.expression.Update.where")
    and [`Delete.where()`](#sqlalchemy.sql.expression.Delete.where "sqlalchemy.sql.expression.Delete.where")
    support multiple-table forms, including database-specific `UPDATE...FROM` as well
    as `DELETE..USING`. For backends that don’t have multiple-table support, a backend
    agnostic approach to using multiple tables is to make use of correlated subqueries.
    See the linked tutorial sections below for examples.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Correlated Updates](../tutorial/data_update.html#tutorial-correlated-updates)'
  prefs: []
  type: TYPE_NORMAL
- en: '[UPDATE..FROM](../tutorial/data_update.html#tutorial-update-from)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Multiple Table Deletes](../tutorial/data_update.html#tutorial-multi-table-deletes)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") *method of* [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase")'
  prefs: []
  type: TYPE_NORMAL
- en: Specify a fixed VALUES clause for an INSERT statement, or the SET clause for
    an UPDATE.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    and [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    constructs support per-execution time formatting of the VALUES and/or SET clauses,
    based on the arguments passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"). However, the [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") method can be used to “fix” a particular
    set of parameters into the statement.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple calls to [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") will produce a new construct, each
    one with the parameter list modified to include the new parameters sent. In the
    typical case of a single dictionary of parameters, the newly passed keys will
    replace the same keys in the previous construct. In the case of a list-based “multiple
    values” construct, each new list of values is extended onto the existing list
    of values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**kwargs` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'key value pairs representing the string key of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") mapped to the value to be rendered into the VALUES
    or SET clause:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`*args` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an alternative to passing key/value parameters, a dictionary, tuple, or list
    of dictionaries or tuples can be passed as a single positional argument in order
    to form the VALUES or SET clause of the statement. The forms that are accepted
    vary based on whether this is an [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") or an [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For either an [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    or [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct, a single dictionary can be passed, which works the same as that of
    the kwargs form:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also for either form but more typically for the [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, a tuple that contains an entry
    for every column in the table is also accepted:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct also supports being passed a list of dictionaries or full-table-tuples,
    which on the server will render the less common SQL syntax of “multiple values”
    - this syntax is supported on backends such as SQLite, PostgreSQL, MySQL, but
    not necessarily others:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The above form would render a multiple VALUES statement similar to:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It is essential to note that **passing multiple values is NOT the same as using
    traditional executemany() form**. The above syntax is a **special** syntax not
    typically used. To emit an INSERT statement against multiple rows, the normal
    method is to pass a multiple values list to the [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, which is supported by all database
    backends and is generally more efficient for a very large number of parameters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Sending Multiple Parameters](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - an introduction to the traditional Core method of multiple parameter set invocation
    for INSERTs and other statements.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The UPDATE construct also supports rendering the SET parameters in a specific
    order. For this feature refer to the [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Make this [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct “inline” .
  prefs: []
  type: TYPE_NORMAL
- en: When set, SQL defaults present on [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects via the `default` keyword will be compiled
    ‘inline’ into the statement and not pre-executed. This means that their values
    will not be available in the dictionary returned from [`CursorResult.last_updated_params()`](connections.html#sqlalchemy.engine.CursorResult.last_updated_params
    "sqlalchemy.engine.CursorResult.last_updated_params").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: the [`update.inline`](#sqlalchemy.sql.expression.update.params.inline
    "sqlalchemy.sql.expression.update") parameter is now superseded by the [`Update.inline()`](#sqlalchemy.sql.expression.Update.inline
    "sqlalchemy.sql.expression.Update.inline") method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Specify the VALUES clause of this UPDATE statement with an explicit parameter
    ordering that will be maintained in the SET clause of the resulting UPDATE statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Parameter Ordered Updates](../tutorial/data_update.html#tutorial-parameter-ordered-updates)
    - full example of the [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method supersedes the [`update.preserve_parameter_order`](#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update") parameter, which will be removed in SQLAlchemy
    2.0.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Form the base for `INSERT`, `UPDATE`, and `DELETE` statements.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[entity_description](#sqlalchemy.sql.expression.UpdateBase.entity_description),
    [exported_columns](#sqlalchemy.sql.expression.UpdateBase.exported_columns), [params()](#sqlalchemy.sql.expression.UpdateBase.params),
    [return_defaults()](#sqlalchemy.sql.expression.UpdateBase.return_defaults), [returning()](#sqlalchemy.sql.expression.UpdateBase.returning),
    [returning_column_descriptions](#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions),
    [with_dialect_options()](#sqlalchemy.sql.expression.UpdateBase.with_dialect_options),
    [with_hint()](#sqlalchemy.sql.expression.UpdateBase.with_hint)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase") (`sqlalchemy.sql.roles.DMLRole`, [`sqlalchemy.sql.expression.HasCTE`](selectable.html#sqlalchemy.sql.expression.HasCTE
    "sqlalchemy.sql.expression.HasCTE"), `sqlalchemy.sql.expression.HasCompileState`,
    [`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.sql.expression.HasPrefixes`](selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), `sqlalchemy.sql.expression.Generative`,
    `sqlalchemy.sql.expression.ExecutableReturnsRows`, [`sqlalchemy.sql.expression.ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Return a [plugin-enabled](../glossary.html#term-plugin-enabled) description
    of the table and/or entity which this DML construct is operating against.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute is generally useful when using the ORM, as an extended structure
    which includes information about mapped entities is returned. The section [Inspecting
    entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    contains more background.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a Core statement, the structure returned by this accessor is derived from
    the `UpdateBase.table` attribute, and refers to the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") being inserted, updated, or deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.33.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.returning_column_descriptions`](#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.column_descriptions`](selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") - entity information for
    a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct'
  prefs: []
  type: TYPE_NORMAL
- en: '[Inspecting entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    - ORM background'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Return the RETURNING columns as a column collection for this statement.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Set the parameters for the statement.
  prefs: []
  type: TYPE_NORMAL
- en: This method raises `NotImplementedError` on the base class, and is overridden
    by [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase "sqlalchemy.sql.expression.ValuesBase")
    to provide the SET/VALUES clause of UPDATE and INSERT.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Make use of a [RETURNING](../glossary.html#term-RETURNING) clause for the purpose
    of fetching server-side expressions and defaults, for supporting backends only.
  prefs: []
  type: TYPE_NORMAL
- en: Deep Alchemy
  prefs: []
  type: TYPE_NORMAL
- en: The [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") method is used by the
    ORM for its internal work in fetching newly generated primary key and server default
    values, in particular to provide the underyling implementation of the [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") ORM feature as well as to allow RETURNING support with
    bulk ORM inserts. Its behavior is fairly idiosyncratic and is not really intended
    for general use. End users should stick with using [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") in order to add RETURNING clauses
    to their INSERT, UPDATE and DELETE statements.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, a single row INSERT statement will automatically populate the [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute when executed,
    which stores the primary key of the row that was just inserted in the form of
    a [`Row`](connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row") object
    with column names as named tuple keys (and the [`Row._mapping`](connections.html#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") view fully populated as well). The dialect in
    use chooses the strategy to use in order to populate this data; if it was generated
    using server-side defaults and / or SQL expressions, dialect-specific approaches
    such as `cursor.lastrowid` or `RETURNING` are typically used to acquire the new
    primary key value.
  prefs: []
  type: TYPE_NORMAL
- en: However, when the statement is modified by calling [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") before executing the statement,
    additional behaviors take place **only** for backends that support RETURNING and
    for [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects that maintain the [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") parameter at its default value of `True`. In these
    cases, when the [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") is returned from the statement’s execution,
    not only will [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") be populated as always,
    the [`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults") attribute will also be populated
    with a [`Row`](connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    named-tuple representing the full range of server generated values from that single
    row, including values for any columns that specify [`Column.server_default`](metadata.html#sqlalchemy.schema.Column.params.server_default
    "sqlalchemy.schema.Column") or which make use of [`Column.default`](metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") using a SQL expression.
  prefs: []
  type: TYPE_NORMAL
- en: When invoking INSERT statements with multiple rows using [insertmanyvalues](connections.html#engine-insertmanyvalues),
    the [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") modifier will have the
    effect of the [`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows") and [`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows") attributes being fully
    populated with lists of [`Row`](connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects representing newly inserted primary key values as well as newly inserted
    server generated values for each row inserted. The [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") and [`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults") attributes will also continue
    to be populated with the first row of these two collections.
  prefs: []
  type: TYPE_NORMAL
- en: If the backend does not support RETURNING or the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") in use has disabled [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table"), then no RETURNING clause is added and no additional
    data is fetched, however the INSERT, UPDATE or DELETE statement proceeds normally.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: When used against an UPDATE statement [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") instead looks for columns
    that include [`Column.onupdate`](metadata.html#sqlalchemy.schema.Column.params.onupdate
    "sqlalchemy.schema.Column") or [`Column.server_onupdate`](metadata.html#sqlalchemy.schema.Column.params.server_onupdate
    "sqlalchemy.schema.Column") parameters assigned, when constructing the columns
    that will be included in the RETURNING clause by default if explicit columns were
    not specified. When used against a DELETE statement, no columns are included in
    RETURNING by default, they instead must be specified explicitly as there are no
    columns that normally change values when a DELETE statement proceeds.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0: [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") is supported for DELETE
    statements also and has been moved from [`ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase") to [`UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase").'
  prefs: []
  type: TYPE_NORMAL
- en: The [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") method is mutually exclusive
    against the [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") method and errors will be raised
    during the SQL compilation process if both are used at the same time on one statement.
    The RETURNING clause of the INSERT, UPDATE or DELETE statement is therefore controlled
    by only one of these methods at a time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") method differs from [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") in these ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") method causes the [`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults") collection to be populated
    with the first row from the RETURNING result. This attribute is not populated
    when using [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning").'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") is compatible with existing
    logic used to fetch auto-generated primary key values that are then populated
    into the [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute. By contrast,
    using [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") will have the effect of the
    [`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key") attribute being left unpopulated.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") can be called against
    any backend. Backends that don’t support RETURNING will skip the usage of the
    feature, rather than raising an exception, *unless* `supplemental_cols` is passed.
    The return value of [`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults") will be `None` for backends
    that don’t support RETURNING or for which the target [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") sets [`Table.implicit_returning`](metadata.html#sqlalchemy.schema.Table.params.implicit_returning
    "sqlalchemy.schema.Table") to `False`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An INSERT statement invoked with executemany() is supported if the backend database
    driver supports the [insertmanyvalues](connections.html#engine-insertmanyvalues)
    feature which is now supported by most SQLAlchemy-included backends. When executemany
    is used, the [`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows") and [`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows") accessors will return
    the inserted defaults and primary keys.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'New in version 1.4: Added [`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows") and [`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows") accessors. In version
    2.0, the underlying implementation which fetches and populates the data for these
    attributes was generalized to be supported by most backends, whereas in 1.4 they
    were only supported by the `psycopg2` driver.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cols` – optional list of column key names or [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") that acts as a filter for those columns that will
    be fetched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`supplemental_cols` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional list of RETURNING expressions, in the same form as one would pass to
    the [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") method. When present, the additional
    columns will be included in the RETURNING clause, and the [`CursorResult`](connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") object will be “rewound” when returned, so that
    methods like [`CursorResult.all()`](connections.html#sqlalchemy.engine.CursorResult.all
    "sqlalchemy.engine.CursorResult.all") will return new rows mostly as though the
    statement used [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") directly. However, unlike when
    using [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") directly, the **order of the
    columns is undefined**, so can only be targeted using names or [`Row._mapping`](connections.html#sqlalchemy.engine.Row._mapping
    "sqlalchemy.engine.Row._mapping") keys; they cannot reliably be targeted positionally.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`sort_by_parameter_order` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`CursorResult.returned_defaults`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults
    "sqlalchemy.engine.CursorResult.returned_defaults")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`CursorResult.returned_defaults_rows`](connections.html#sqlalchemy.engine.CursorResult.returned_defaults_rows
    "sqlalchemy.engine.CursorResult.returned_defaults_rows")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`CursorResult.inserted_primary_key`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key
    "sqlalchemy.engine.CursorResult.inserted_primary_key")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`CursorResult.inserted_primary_key_rows`](connections.html#sqlalchemy.engine.CursorResult.inserted_primary_key_rows
    "sqlalchemy.engine.CursorResult.inserted_primary_key_rows")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Add a [RETURNING](../glossary.html#term-RETURNING) or equivalent clause to this
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: The method may be invoked multiple times to add new entries to the list of expressions
    to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.0b2: The method may be invoked multiple times to add new
    entries to the list of expressions to be returned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The given collection of column expressions should be derived from the table
    that is the target of the INSERT, UPDATE, or DELETE. While [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects are typical, the elements can also be expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Upon compilation, a RETURNING clause, or database equivalent, will be rendered
    within the statement. For INSERT and UPDATE, the values are the newly inserted/updated
    values. For DELETE, the values are those of the rows which were deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Upon execution, the values of the columns to be returned are made available
    via the result set and can be iterated using [`CursorResult.fetchone()`](connections.html#sqlalchemy.engine.CursorResult.fetchone
    "sqlalchemy.engine.CursorResult.fetchone") and similar. For DBAPIs which do not
    natively support returning values (i.e. cx_oracle), SQLAlchemy will approximate
    this behavior at the result level so that a reasonable amount of behavioral neutrality
    is provided.
  prefs: []
  type: TYPE_NORMAL
- en: Note that not all databases/DBAPIs support RETURNING. For those backends with
    no support, an exception is raised upon compilation and/or execution. For those
    who do support it, the functionality across backends varies greatly, including
    restrictions on executemany() and other statements which return multiple rows.
    Please read the documentation notes for the database in use in order to determine
    the availability of RETURNING.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*cols` – series of columns, SQL expressions, or whole tables entities to be
    returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort_by_parameter_order` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for a batch INSERT that is being executed against multiple parameter sets, organize
    the results of RETURNING so that the returned rows correspond to the order of
    parameter sets passed in. This applies only to an [executemany](../glossary.html#term-executemany)
    execution for supporting dialects and typically makes use of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)
    - background on sorting of RETURNING rows for bulk INSERT (Core level discussion)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Correlating RETURNING records with input data order](../orm/queryguide/dml.html#orm-queryguide-bulk-insert-returning-ordered)
    - example of use with [ORM Bulk INSERT Statements](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    (ORM level discussion)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.return_defaults()`](#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") - an alternative method
    tailored towards efficient fetching of server-side defaults and triggers for single-row
    INSERTs or UPDATEs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[INSERT…RETURNING](../tutorial/data_insert.html#tutorial-insert-returning)
    - in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Return a [plugin-enabled](../glossary.html#term-plugin-enabled) description
    of the columns which this DML construct is RETURNING against, in other words the
    expressions established as part of [`UpdateBase.returning()`](#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning").
  prefs: []
  type: TYPE_NORMAL
- en: This attribute is generally useful when using the ORM, as an extended structure
    which includes information about mapped entities is returned. The section [Inspecting
    entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    contains more background.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a Core statement, the structure returned by this accessor is derived from
    the same objects that are returned by the [`UpdateBase.exported_columns`](#sqlalchemy.sql.expression.UpdateBase.exported_columns
    "sqlalchemy.sql.expression.UpdateBase.exported_columns") accessor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.33.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.entity_description`](#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.column_descriptions`](selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") - entity information for
    a [`select()`](selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct'
  prefs: []
  type: TYPE_NORMAL
- en: '[Inspecting entities and columns from ORM-enabled SELECT and DML statements](../orm/queryguide/api.html#queryguide-inspection)
    - ORM background'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Add dialect options to this INSERT/UPDATE/DELETE object.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Add a table hint for a single table to this INSERT/UPDATE/DELETE statement.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`UpdateBase.with_hint()`](#sqlalchemy.sql.expression.UpdateBase.with_hint
    "sqlalchemy.sql.expression.UpdateBase.with_hint") currently applies only to Microsoft
    SQL Server. For MySQL INSERT/UPDATE/DELETE hints, use `UpdateBase.prefix_with()`.'
  prefs: []
  type: TYPE_NORMAL
- en: The text of the hint is rendered in the appropriate location for the database
    backend in use, relative to the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") that is the subject of this statement, or optionally
    to that of the given [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    passed as the `selectable` argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dialect_name` option will limit the rendering of a particular hint to
    a particular backend. Such as, to add a hint that only takes effect for SQL Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`text` – Text of the hint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`selectable` – optional [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    that specifies an element of the FROM clause within an UPDATE or DELETE to be
    the subject of the hint - applies only to certain backends.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect_name` – defaults to `*`, if specified as the name of a particular
    dialect, will apply these hints only when that dialect is in use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Supplies support for [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") to INSERT and UPDATE constructs.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[select](#sqlalchemy.sql.expression.ValuesBase.select), [values()](#sqlalchemy.sql.expression.ValuesBase.values)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.expression.ValuesBase`](#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase") ([`sqlalchemy.sql.expression.UpdateBase`](#sqlalchemy.sql.expression.UpdateBase
    "sqlalchemy.sql.expression.UpdateBase"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: SELECT statement for INSERT .. FROM SELECT
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Specify a fixed VALUES clause for an INSERT statement, or the SET clause for
    an UPDATE.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    and [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    constructs support per-execution time formatting of the VALUES and/or SET clauses,
    based on the arguments passed to [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"). However, the [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") method can be used to “fix” a particular
    set of parameters into the statement.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple calls to [`ValuesBase.values()`](#sqlalchemy.sql.expression.ValuesBase.values
    "sqlalchemy.sql.expression.ValuesBase.values") will produce a new construct, each
    one with the parameter list modified to include the new parameters sent. In the
    typical case of a single dictionary of parameters, the newly passed keys will
    replace the same keys in the previous construct. In the case of a list-based “multiple
    values” construct, each new list of values is extended onto the existing list
    of values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**kwargs` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'key value pairs representing the string key of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") mapped to the value to be rendered into the VALUES
    or SET clause:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`*args` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an alternative to passing key/value parameters, a dictionary, tuple, or list
    of dictionaries or tuples can be passed as a single positional argument in order
    to form the VALUES or SET clause of the statement. The forms that are accepted
    vary based on whether this is an [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") or an [`Update`](#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") construct.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For either an [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    or [`Update`](#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct, a single dictionary can be passed, which works the same as that of
    the kwargs form:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also for either form but more typically for the [`Insert`](#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct, a tuple that contains an entry
    for every column in the table is also accepted:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The [`Insert`](#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct also supports being passed a list of dictionaries or full-table-tuples,
    which on the server will render the less common SQL syntax of “multiple values”
    - this syntax is supported on backends such as SQLite, PostgreSQL, MySQL, but
    not necessarily others:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The above form would render a multiple VALUES statement similar to:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It is essential to note that **passing multiple values is NOT the same as using
    traditional executemany() form**. The above syntax is a **special** syntax not
    typically used. To emit an INSERT statement against multiple rows, the normal
    method is to pass a multiple values list to the [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method, which is supported by all database
    backends and is generally more efficient for a very large number of parameters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Sending Multiple Parameters](../tutorial/dbapi_transactions.html#tutorial-multiple-parameters)
    - an introduction to the traditional Core method of multiple parameter set invocation
    for INSERTs and other statements.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: The UPDATE construct also supports rendering the SET parameters in a specific
    order. For this feature refer to the [`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values") method.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`Update.ordered_values()`](#sqlalchemy.sql.expression.Update.ordered_values
    "sqlalchemy.sql.expression.Update.ordered_values")'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
