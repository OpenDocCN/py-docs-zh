["```py\nfrom sqlalchemy.ext.compiler import compiles\nfrom sqlalchemy.sql.expression import ColumnClause\n\nclass MyColumn(ColumnClause):\n    inherit_cache = True\n\n@compiles(MyColumn)\ndef compile_mycolumn(element, compiler, **kw):\n    return \"[%s]\" % element.name\n```", "```py\nfrom sqlalchemy import select\n\ns = select(MyColumn('x'), MyColumn('y'))\nprint(str(s))\n```", "```py\nSELECT [x], [y]\n```", "```py\nfrom sqlalchemy.schema import DDLElement\n\nclass AlterColumn(DDLElement):\n    inherit_cache = False\n\n    def __init__(self, column, cmd):\n        self.column = column\n        self.cmd = cmd\n\n@compiles(AlterColumn)\ndef visit_alter_column(element, compiler, **kw):\n    return \"ALTER COLUMN %s ...\" % element.column.name\n\n@compiles(AlterColumn, 'postgresql')\ndef visit_alter_column(element, compiler, **kw):\n    return \"ALTER TABLE %s ALTER COLUMN %s ...\" % (element.table.name,\n                                                   element.column.name)\n```", "```py\nfrom sqlalchemy.sql.expression import Executable, ClauseElement\n\nclass InsertFromSelect(Executable, ClauseElement):\n    inherit_cache = False\n\n    def __init__(self, table, select):\n        self.table = table\n        self.select = select\n\n@compiles(InsertFromSelect)\ndef visit_insert_from_select(element, compiler, **kw):\n    return \"INSERT INTO %s (%s)\" % (\n        compiler.process(element.table, asfrom=True, **kw),\n        compiler.process(element.select, **kw)\n    )\n\ninsert = InsertFromSelect(t1, select(t1).where(t1.c.x>5))\nprint(insert)\n```", "```py\n\"INSERT INTO mytable (SELECT mytable.x, mytable.y, mytable.z\n                      FROM mytable WHERE mytable.x > :x_1)\"\n```", "```py\n@compiles(MyConstraint)\ndef compile_my_constraint(constraint, ddlcompiler, **kw):\n    kw['literal_binds'] = True\n    return \"CONSTRAINT %s CHECK (%s)\" % (\n        constraint.name,\n        ddlcompiler.sql_compiler.process(\n            constraint.expression, **kw)\n    )\n```", "```py\nfrom sqlalchemy.sql.expression import Insert\n\n@compiles(Insert)\ndef prefix_inserts(insert, compiler, **kw):\n    return compiler.visit_insert(insert.prefix_with(\"some prefix\"), **kw)\n```", "```py\n@compiles(String, 'mssql')\n@compiles(VARCHAR, 'mssql')\ndef compile_varchar(element, compiler, **kw):\n    if element.length == 'max':\n        return \"VARCHAR('max')\"\n    else:\n        return compiler.visit_VARCHAR(element, **kw)\n\nfoo = Table('foo', metadata,\n    Column('data', VARCHAR('max'))\n)\n```", "```py\n    class timestamp(ColumnElement):\n        type = TIMESTAMP()\n        inherit_cache = True\n    ```", "```py\n    from sqlalchemy.sql.expression import FunctionElement\n\n    class coalesce(FunctionElement):\n        name = 'coalesce'\n        inherit_cache = True\n\n    @compiles(coalesce)\n    def compile(element, compiler, **kw):\n        return \"coalesce(%s)\" % compiler.process(element.clauses, **kw)\n\n    @compiles(coalesce, 'oracle')\n    def compile(element, compiler, **kw):\n        if len(element.clauses) > 2:\n            raise TypeError(\"coalesce only supports two arguments on Oracle\")\n        return \"nvl(%s)\" % compiler.process(element.clauses, **kw)\n    ```", "```py\nclass MyColumn(ColumnClause):\n    inherit_cache = True\n\n@compiles(MyColumn)\ndef compile_mycolumn(element, compiler, **kw):\n    return \"[%s]\" % element.name\n```", "```py\n>>> MyColumn(\"some_name\", String())._generate_cache_key()\nCacheKey(\n key=('0', <class '__main__.MyColumn'>,\n 'name', 'some_name',\n 'type', (<class 'sqlalchemy.sql.sqltypes.String'>,\n ('length', None), ('collation', None))\n), bindparams=[])\n```", "```py\nclass InsertFromSelect(Executable, ClauseElement):\n    inherit_cache = False\n\n    def __init__(self, table, select):\n        self.table = table\n        self.select = select\n\n@compiles(InsertFromSelect)\ndef visit_insert_from_select(element, compiler, **kw):\n    return \"INSERT INTO %s (%s)\" % (\n        compiler.process(element.table, asfrom=True, **kw),\n        compiler.process(element.select, **kw)\n    )\n```", "```py\nfrom sqlalchemy.sql import expression\nfrom sqlalchemy.ext.compiler import compiles\nfrom sqlalchemy.types import DateTime\n\nclass utcnow(expression.FunctionElement):\n    type = DateTime()\n    inherit_cache = True\n\n@compiles(utcnow, 'postgresql')\ndef pg_utcnow(element, compiler, **kw):\n    return \"TIMEZONE('utc', CURRENT_TIMESTAMP)\"\n\n@compiles(utcnow, 'mssql')\ndef ms_utcnow(element, compiler, **kw):\n    return \"GETUTCDATE()\"\n```", "```py\nfrom sqlalchemy import (\n            Table, Column, Integer, String, DateTime, MetaData\n        )\nmetadata = MetaData()\nevent = Table(\"event\", metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"description\", String(50), nullable=False),\n    Column(\"timestamp\", DateTime, server_default=utcnow())\n)\n```", "```py\nfrom sqlalchemy.sql import expression, case\nfrom sqlalchemy.ext.compiler import compiles\nfrom sqlalchemy.types import Numeric\n\nclass greatest(expression.FunctionElement):\n    type = Numeric()\n    name = 'greatest'\n    inherit_cache = True\n\n@compiles(greatest)\ndef default_greatest(element, compiler, **kw):\n    return compiler.visit_function(element)\n\n@compiles(greatest, 'sqlite')\n@compiles(greatest, 'mssql')\n@compiles(greatest, 'oracle')\ndef case_greatest(element, compiler, **kw):\n    arg1, arg2 = list(element.clauses)\n    return compiler.process(case((arg1 > arg2, arg1), else_=arg2), **kw)\n```", "```py\nSession.query(Account).\\\n        filter(\n            greatest(\n                Account.checking_balance,\n                Account.savings_balance) > 10000\n        )\n```", "```py\nfrom sqlalchemy.sql import expression\nfrom sqlalchemy.ext.compiler import compiles\n\nclass sql_false(expression.ColumnElement):\n    inherit_cache = True\n\n@compiles(sql_false)\ndef default_false(element, compiler, **kw):\n    return \"false\"\n\n@compiles(sql_false, 'mssql')\n@compiles(sql_false, 'mysql')\n@compiles(sql_false, 'oracle')\ndef int_false(element, compiler, **kw):\n    return \"0\"\n```", "```py\nfrom sqlalchemy import select, union_all\n\nexp = union_all(\n    select(users.c.name, sql_false().label(\"enrolled\")),\n    select(customers.c.name, customers.c.enrolled)\n)\n```", "```py\nfunction sqlalchemy.ext.compiler.compiles(class_, *specs)\n```", "```py\nfunction sqlalchemy.ext.compiler.deregister(class_)\n```", "```py\nfrom sqlalchemy.ext.compiler import compiles\nfrom sqlalchemy.sql.expression import ColumnClause\n\nclass MyColumn(ColumnClause):\n    inherit_cache = True\n\n@compiles(MyColumn)\ndef compile_mycolumn(element, compiler, **kw):\n    return \"[%s]\" % element.name\n```", "```py\nfrom sqlalchemy import select\n\ns = select(MyColumn('x'), MyColumn('y'))\nprint(str(s))\n```", "```py\nSELECT [x], [y]\n```", "```py\nfrom sqlalchemy.schema import DDLElement\n\nclass AlterColumn(DDLElement):\n    inherit_cache = False\n\n    def __init__(self, column, cmd):\n        self.column = column\n        self.cmd = cmd\n\n@compiles(AlterColumn)\ndef visit_alter_column(element, compiler, **kw):\n    return \"ALTER COLUMN %s ...\" % element.column.name\n\n@compiles(AlterColumn, 'postgresql')\ndef visit_alter_column(element, compiler, **kw):\n    return \"ALTER TABLE %s ALTER COLUMN %s ...\" % (element.table.name,\n                                                   element.column.name)\n```", "```py\nfrom sqlalchemy.sql.expression import Executable, ClauseElement\n\nclass InsertFromSelect(Executable, ClauseElement):\n    inherit_cache = False\n\n    def __init__(self, table, select):\n        self.table = table\n        self.select = select\n\n@compiles(InsertFromSelect)\ndef visit_insert_from_select(element, compiler, **kw):\n    return \"INSERT INTO %s (%s)\" % (\n        compiler.process(element.table, asfrom=True, **kw),\n        compiler.process(element.select, **kw)\n    )\n\ninsert = InsertFromSelect(t1, select(t1).where(t1.c.x>5))\nprint(insert)\n```", "```py\n\"INSERT INTO mytable (SELECT mytable.x, mytable.y, mytable.z\n                      FROM mytable WHERE mytable.x > :x_1)\"\n```", "```py\n@compiles(MyConstraint)\ndef compile_my_constraint(constraint, ddlcompiler, **kw):\n    kw['literal_binds'] = True\n    return \"CONSTRAINT %s CHECK (%s)\" % (\n        constraint.name,\n        ddlcompiler.sql_compiler.process(\n            constraint.expression, **kw)\n    )\n```", "```py\n@compiles(MyConstraint)\ndef compile_my_constraint(constraint, ddlcompiler, **kw):\n    kw['literal_binds'] = True\n    return \"CONSTRAINT %s CHECK (%s)\" % (\n        constraint.name,\n        ddlcompiler.sql_compiler.process(\n            constraint.expression, **kw)\n    )\n```", "```py\nfrom sqlalchemy.sql.expression import Insert\n\n@compiles(Insert)\ndef prefix_inserts(insert, compiler, **kw):\n    return compiler.visit_insert(insert.prefix_with(\"some prefix\"), **kw)\n```", "```py\n@compiles(String, 'mssql')\n@compiles(VARCHAR, 'mssql')\ndef compile_varchar(element, compiler, **kw):\n    if element.length == 'max':\n        return \"VARCHAR('max')\"\n    else:\n        return compiler.visit_VARCHAR(element, **kw)\n\nfoo = Table('foo', metadata,\n    Column('data', VARCHAR('max'))\n)\n```", "```py\n    class timestamp(ColumnElement):\n        type = TIMESTAMP()\n        inherit_cache = True\n    ```", "```py\n    from sqlalchemy.sql.expression import FunctionElement\n\n    class coalesce(FunctionElement):\n        name = 'coalesce'\n        inherit_cache = True\n\n    @compiles(coalesce)\n    def compile(element, compiler, **kw):\n        return \"coalesce(%s)\" % compiler.process(element.clauses, **kw)\n\n    @compiles(coalesce, 'oracle')\n    def compile(element, compiler, **kw):\n        if len(element.clauses) > 2:\n            raise TypeError(\"coalesce only supports two arguments on Oracle\")\n        return \"nvl(%s)\" % compiler.process(element.clauses, **kw)\n    ```", "```py\nclass MyColumn(ColumnClause):\n    inherit_cache = True\n\n@compiles(MyColumn)\ndef compile_mycolumn(element, compiler, **kw):\n    return \"[%s]\" % element.name\n```", "```py\n>>> MyColumn(\"some_name\", String())._generate_cache_key()\nCacheKey(\n key=('0', <class '__main__.MyColumn'>,\n 'name', 'some_name',\n 'type', (<class 'sqlalchemy.sql.sqltypes.String'>,\n ('length', None), ('collation', None))\n), bindparams=[])\n```", "```py\nclass InsertFromSelect(Executable, ClauseElement):\n    inherit_cache = False\n\n    def __init__(self, table, select):\n        self.table = table\n        self.select = select\n\n@compiles(InsertFromSelect)\ndef visit_insert_from_select(element, compiler, **kw):\n    return \"INSERT INTO %s (%s)\" % (\n        compiler.process(element.table, asfrom=True, **kw),\n        compiler.process(element.select, **kw)\n    )\n```", "```py\nfrom sqlalchemy.sql import expression\nfrom sqlalchemy.ext.compiler import compiles\nfrom sqlalchemy.types import DateTime\n\nclass utcnow(expression.FunctionElement):\n    type = DateTime()\n    inherit_cache = True\n\n@compiles(utcnow, 'postgresql')\ndef pg_utcnow(element, compiler, **kw):\n    return \"TIMEZONE('utc', CURRENT_TIMESTAMP)\"\n\n@compiles(utcnow, 'mssql')\ndef ms_utcnow(element, compiler, **kw):\n    return \"GETUTCDATE()\"\n```", "```py\nfrom sqlalchemy import (\n            Table, Column, Integer, String, DateTime, MetaData\n        )\nmetadata = MetaData()\nevent = Table(\"event\", metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"description\", String(50), nullable=False),\n    Column(\"timestamp\", DateTime, server_default=utcnow())\n)\n```", "```py\nfrom sqlalchemy.sql import expression, case\nfrom sqlalchemy.ext.compiler import compiles\nfrom sqlalchemy.types import Numeric\n\nclass greatest(expression.FunctionElement):\n    type = Numeric()\n    name = 'greatest'\n    inherit_cache = True\n\n@compiles(greatest)\ndef default_greatest(element, compiler, **kw):\n    return compiler.visit_function(element)\n\n@compiles(greatest, 'sqlite')\n@compiles(greatest, 'mssql')\n@compiles(greatest, 'oracle')\ndef case_greatest(element, compiler, **kw):\n    arg1, arg2 = list(element.clauses)\n    return compiler.process(case((arg1 > arg2, arg1), else_=arg2), **kw)\n```", "```py\nSession.query(Account).\\\n        filter(\n            greatest(\n                Account.checking_balance,\n                Account.savings_balance) > 10000\n        )\n```", "```py\nfrom sqlalchemy.sql import expression\nfrom sqlalchemy.ext.compiler import compiles\n\nclass sql_false(expression.ColumnElement):\n    inherit_cache = True\n\n@compiles(sql_false)\ndef default_false(element, compiler, **kw):\n    return \"false\"\n\n@compiles(sql_false, 'mssql')\n@compiles(sql_false, 'mysql')\n@compiles(sql_false, 'oracle')\ndef int_false(element, compiler, **kw):\n    return \"0\"\n```", "```py\nfrom sqlalchemy import select, union_all\n\nexp = union_all(\n    select(users.c.name, sql_false().label(\"enrolled\")),\n    select(customers.c.name, customers.c.enrolled)\n)\n```", "```py\nfrom sqlalchemy.sql import expression\nfrom sqlalchemy.ext.compiler import compiles\nfrom sqlalchemy.types import DateTime\n\nclass utcnow(expression.FunctionElement):\n    type = DateTime()\n    inherit_cache = True\n\n@compiles(utcnow, 'postgresql')\ndef pg_utcnow(element, compiler, **kw):\n    return \"TIMEZONE('utc', CURRENT_TIMESTAMP)\"\n\n@compiles(utcnow, 'mssql')\ndef ms_utcnow(element, compiler, **kw):\n    return \"GETUTCDATE()\"\n```", "```py\nfrom sqlalchemy import (\n            Table, Column, Integer, String, DateTime, MetaData\n        )\nmetadata = MetaData()\nevent = Table(\"event\", metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"description\", String(50), nullable=False),\n    Column(\"timestamp\", DateTime, server_default=utcnow())\n)\n```", "```py\nfrom sqlalchemy.sql import expression, case\nfrom sqlalchemy.ext.compiler import compiles\nfrom sqlalchemy.types import Numeric\n\nclass greatest(expression.FunctionElement):\n    type = Numeric()\n    name = 'greatest'\n    inherit_cache = True\n\n@compiles(greatest)\ndef default_greatest(element, compiler, **kw):\n    return compiler.visit_function(element)\n\n@compiles(greatest, 'sqlite')\n@compiles(greatest, 'mssql')\n@compiles(greatest, 'oracle')\ndef case_greatest(element, compiler, **kw):\n    arg1, arg2 = list(element.clauses)\n    return compiler.process(case((arg1 > arg2, arg1), else_=arg2), **kw)\n```", "```py\nSession.query(Account).\\\n        filter(\n            greatest(\n                Account.checking_balance,\n                Account.savings_balance) > 10000\n        )\n```", "```py\nfrom sqlalchemy.sql import expression\nfrom sqlalchemy.ext.compiler import compiles\n\nclass sql_false(expression.ColumnElement):\n    inherit_cache = True\n\n@compiles(sql_false)\ndef default_false(element, compiler, **kw):\n    return \"false\"\n\n@compiles(sql_false, 'mssql')\n@compiles(sql_false, 'mysql')\n@compiles(sql_false, 'oracle')\ndef int_false(element, compiler, **kw):\n    return \"0\"\n```", "```py\nfrom sqlalchemy import select, union_all\n\nexp = union_all(\n    select(users.c.name, sql_false().label(\"enrolled\")),\n    select(customers.c.name, customers.c.enrolled)\n)\n```"]