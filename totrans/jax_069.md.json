["```py\njax.config.disable_omnistaging() \n```", "```py\n@jit\ndef f(x):\n  input_size = jnp.prod(x.shape)\n  if input_size > 100:\n    ... \n```", "```py\nimport numpy as np\n\n@jit\ndef f(x):\n  input_size = np.prod(x.shape)\n  if input_size > 100:\n    ... \n```", "```py\nfrom jax import jit\nimport jax.numpy as jnp\n\n@jit\ndef f(x):\n  y = jnp.add(1, 1)\n  return x * y\n\nf(3) \n```", "```py\nENTRY jit_f.6 {\n  constant.2 = pred[] constant(false)\n  parameter.1 = s32[] parameter(0)\n  constant.3 = s32[] constant(2)\n  multiply.4 = s32[] multiply(parameter.1, constant.3)\n  ROOT tuple.5 = (s32[]) tuple(multiply.4)\n} \n```", "```py\nENTRY jit_f.8 {\n  constant.2 = pred[] constant(false)\n  parameter.1 = s32[] parameter(0)\n  constant.3 = s32[] constant(1)\n  constant.4 = s32[] constant(1)\n  add.5 = s32[] add(constant.3, constant.4)\n  multiply.6 = s32[] multiply(parameter.1, add.5)\n  ROOT tuple.7 = (s32[]) tuple(multiply.6)\n} \n```", "```py\nimport jax.numpy as jnp\nfrom jax import lax\n\n@jit\ndef select_tril(x):\n  mask = jnp.arange(x.shape[0])[:, None] > jnp.arange(x.shape[1])\n  return lax.select(mask, x, jnp.zeros_like(x))  # lax.select is like jnp.where\n\nx = np.arange(12).reshape((3, 4))\nselect_tril(x) \n```", "```py\nENTRY jit_select_tril.8 {\n  constant.3 = pred[] constant(false)\n  constant.1 = pred[3,4]{1,0} constant({...})\n  parameter.2 = s32[3,4]{1,0} parameter(0)\n  constant.4 = s32[] constant(0)\n  broadcast.5 = s32[3,4]{1,0} broadcast(constant.4), dimensions={}\n  select.6 = s32[3,4]{1,0} select(constant.1, parameter.2, broadcast.5)\n  ROOT tuple.7 = (s32[3,4]{1,0}) tuple(select.6)\n} \n```", "```py\nENTRY jit_select_tril.16 {\n  constant.4 = pred[] constant(false)\n  iota.1 = s32[3]{0} iota(), iota_dimension=0\n  broadcast.5 = s32[3,1]{1,0} broadcast(iota.1), dimensions={0}\n  reshape.7 = s32[3]{0} reshape(broadcast.5)\n  broadcast.8 = s32[3,4]{1,0} broadcast(reshape.7), dimensions={0}\n  iota.2 = s32[4]{0} iota(), iota_dimension=0\n  broadcast.6 = s32[1,4]{1,0} broadcast(iota.2), dimensions={1}\n  reshape.9 = s32[4]{0} reshape(broadcast.6)\n  broadcast.10 = s32[3,4]{1,0} broadcast(reshape.9), dimensions={1}\n  compare.11 = pred[3,4]{1,0} compare(broadcast.8, broadcast.10), direction=GT\n  parameter.3 = s32[3,4]{1,0} parameter(0)\n  constant.12 = s32[] constant(0)\n  broadcast.13 = s32[3,4]{1,0} broadcast(constant.12), dimensions={}\n  select.14 = s32[3,4]{1,0} select(compare.11, parameter.3, broadcast.13)\n  ROOT tuple.15 = (s32[3,4]{1,0}) tuple(select.14)\n} \n```", "```py\nfrom jax import jit\nimport jax.numpy as jnp\n\n@jit\ndef ex1(x):\n  size = jnp.prod(jnp.array(x.shape))\n  return x.reshape((size,))\n\nex1(jnp.ones((3, 4))) \n```", "```py\n[... full traceback ...]\n  File \"/home/mattjj/packages/jax/jax/core.py\", line 862, in raise_concretization_error\n    raise ConcretizationTypeError(msg)\njax.core.ConcretizationTypeError: Abstract tracer value encountered where concrete value is expected.\n\nThe error arose in jax.numpy.reshape.\n\nWhile tracing the function ex1 at ex1.py:4, this value became a tracer due to JAX operations on these lines:\n\n  operation c:int32[] = reduce_prod[ axes=(0,) ] b:int32[2]\n    from line ex1.py:6 (ex1)\n\nYou can use transformation parameters such as `static_argnums` for `jit` to avoid tracing particular arguments of transformed functions.\n\nSee https://jax.readthedocs.io/en/latest/faq.html#abstract-tracer-value-encountered-where-concrete-value-is-expected-error for more information.\n\nEncountered tracer value: Traced<ShapedArray(int32[])>with<DynamicJaxprTrace(level=0/1)> \n```", "```py\nfrom jax import jit\nfrom jax import random\n\nkey = random.PRNGKey(0)\n\ndef init():\n  global key\n  key, subkey = random.split(key)\n  return random.normal(subkey, ())\n\nprint(init())  # -1.2515389\nprint(init())  # -0.58665067\n\ninit = jit(init)\nprint(init())  # 0.48648298\nprint(init())  # 0.48648298  !! \n```", "```py\nprint(key) # Traced<ShapedArray(uint32[2])>with<DynamicJaxprTrace(level=0/1)> \n```", "```py\nrandom.normal(key, ()) \n```", "```py\n[... full stack trace â€¦]\n  File \"/home/mattjj/packages/jax/jax/interpreters/partial_eval.py\", line 836, in _assert_live\n    raise core.escaped_tracer_error(msg)\njax.core.UnexpectedTracerError: Encountered an unexpected tracer. Perhaps this tracer escaped through global state from a previously traced function.\nThe functions being transformed should not save traced values to global state. Detail: tracer created on line example.py:8 (init). \n```"]