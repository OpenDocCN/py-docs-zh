- en: Glossary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/glossary.html](https://pymupdf.readthedocs.io/en/latest/glossary.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is an esential general mathematical / geometrical term for understanding
    this documentation. Please see this section for a more detailed discussion: [Coordinates](app3.html#coordinates).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A Python sequence of 6 numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: A Python sequence of 4 numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: A Python sequence of 4 integers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A Python sequence of 2 numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: A Python sequence of 4 [`point_like`](#point_like "point_like") items.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A number of values in a PDF can inherited by objects further down in a parent-child
    relationship. The mediabox (physical size) of pages may for example be specified
    only once or in some node(s) of the [`pagetree`](#pagetree "pagetree") and will
    then be taken as value for all *kids*, that do not specify their own value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'A PDF array of 4 floats specifying a physical page size – ([`inheritable`](#inheritable
    "inheritable"), mandatory). This rectangle should contain all other PDF – optional
    – page rectangles, which may be specified in addition: CropBox, TrimBox, ArtBox
    and BleedBox. Please consult [Adobe PDF References](app3.html#adobemanual) for
    details. The MediaBox is the only rectangle, for which there is no difference
    between MuPDF and PDF coordinate systems: [`Page.mediabox`](page.html#Page.mediabox
    "Page.mediabox") will always show the same coordinates as the `/MediaBox` key
    in a page’s object definition. For all other rectangles, MuPDF transforms y coordinates
    such that the **top** border is the point of reference. This can sometimes be
    confusing – you may for example encounter a situation like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The page definition contains the following identical values: `/MediaBox [ 36
    45 607.5 765 ]`, `/CropBox [ 36 45 607.5 765 ]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyMuPDF accordingly shows `page.mediabox = Rect(36.0, 45.0, 607.5, 765.0)`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BUT:** `page.cropbox = Rect(36.0, 0.0, 607.5, 720.0)`, because the two y-coordinates
    have been transformed (45 subtracted from both of them).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: A PDF array of 4 floats specifying a page’s visible area – ([`inheritable`](#inheritable
    "inheritable"), optional). It is the default for TrimBox, ArtBox and BleedBox.
    If not present, it defaults to MediaBox. This value is **not affected** if the
    page is rotated – in contrast to [`Page.rect`](page.html#Page.rect "Page.rect").
    Also, other than the page rectangle, the top-left corner of the cropbox may or
    may not be *(0, 0)*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: A central PDF [`dictionary`](#dictionary "dictionary") – also called the “root”
    – containing document-wide parameters and pointers to many other information.
    Its [`xref`](#xref "xref") is returned by [`Document.pdf_catalog()`](document.html#Document.pdf_catalog
    "Document.pdf_catalog").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'More precisely, the **PDF trailer** contains information in [`dictionary`](#dictionary
    "dictionary") format. It is usually located at the file’s end. In this dictionary,
    you will find things like the xrefs of the catalog and the metadata, the number
    of [`xref`](#xref "xref") numbers, etc. Here is the definition of the PDF spec:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“The trailer of a PDF file enables an application reading the file to quickly
    find the cross-reference table and certain special objects. Applications should
    read a PDF file from its end.”*'
  prefs: []
  type: TYPE_NORMAL
- en: To access the trailer in PyMuPDF, use the usual methods [`Document.xref_object()`](document.html#Document.xref_object
    "Document.xref_object"), [`Document.xref_get_key()`](document.html#Document.xref_get_key
    "Document.xref_get_key") and [`Document.xref_get_keys()`](document.html#Document.xref_get_keys
    "Document.xref_get_keys") with `-1` instead of a positive xref number.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'A **content stream** is a PDF [`object`](#object "object") with an attached
    [`stream`](#stream "stream"), whose data consists of a sequence of instructions
    describing the graphical elements to be painted on a page, see “Stream Objects”
    on page 19 of [Adobe PDF References](app3.html#adobemanual). For an overview of
    the mini-language used in these streams, see chapter “Operator Summary” on page
    643 of the [Adobe PDF References](app3.html#adobemanual). A PDF [`page`](#page
    "page") can have none to many contents objects. If it has none, the page is empty
    (but still may show annotations). If it has several, they will be interpreted
    in sequence as if their instructions had been present in one such object (i.e.
    like in a concatenated string). It should be noted that there are more stream
    object types which use the same syntax: e.g. appearance dictionaries associated
    with annotations and Form XObjects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'PyMuPDF provides a number of methods to deal with contents of PDF pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.read_contents()`](functions.html#Page.read_contents "Page.read_contents")
    – reads and concatenates all page contents into one `bytes` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.clean_contents()`](functions.html#Page.clean_contents "Page.clean_contents")
    – a wrapper of a MuPDF function that reads, concatenates and syntax-cleans all
    page contents. After this, only one `/Contents` object will exist. In addition,
    page [`resources`](#resources "resources") will have been synchronized with it
    such that it will contain exactly those images, fonts and other objects that the
    page actually references.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.get_contents()`](functions.html#Page.get_contents "Page.get_contents")
    – return a list of [`xref`](#xref "xref") numbers of a page’s [`contents`](#contents
    "contents") objects. May be empty. Use [`Document.xref_stream()`](document.html#Document.xref_stream
    "Document.xref_stream") with one of these xrefs to read the resp. contents section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.set_contents()`](functions.html#Page.set_contents "Page.set_contents")
    – set a page’s `/Contents` key to the provided [`xref`](#xref "xref") number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: A [`dictionary`](#dictionary "dictionary") containing references to any resources
    (like images or fonts) required by a PDF [`page`](#page "page") (required, inheritable,
    [Adobe PDF References](app3.html#adobemanual) p. 81) and certain other objects
    (Form XObjects). This dictionary appears as a sub-dictionary in the object definition
    under the key */Resources*. Being an inheritable object type, there may exist
    “parent” resources for all pages or certain subsets of pages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'A PDF [`object`](#object "object") type, which is somewhat comparable to the
    same-named Python notion: “A dictionary object is an associative table containing
    pairs of objects, known as the dictionary’s entries. The first element of each
    entry is the key and the second element is the value. The key must be a name (…).
    The value can be any kind of object, including another dictionary. A dictionary
    entry whose value is null (…) is equivalent to an absent entry.” ([Adobe PDF References](app3.html#adobemanual)
    p. 18).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dictionaries are the most important [`object`](#object "object") type in PDF.
    Here is an example (describing a [`page`](#page "page")):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '*Contents*, *Type*, *MediaBox*, etc. are **keys**, *40 0 R*, *Page*, *[0 0
    595.32 841.92]*, etc. are the respective **values**. The strings *“<<”* and *“>>”*
    are used to enclose object definitions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This example also shows the syntax of **nested** dictionary values: *Resources*
    has an object as its value, which in turn is a dictionary with keys like *ExtGState*
    (with the value *<</R7 26 0 R>>*, which is another dictionary), etc.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: A PDF page is a [`dictionary`](#dictionary "dictionary") object which defines
    one page in a PDF, see [Adobe PDF References](app3.html#adobemanual) p. 71.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The pages of a document are accessed through a structure known as the page
    tree, which defines the ordering of pages in the document. The tree structure
    allows PDF consumer applications, using only limited memory, to quickly open a
    document containing thousands of pages. The tree contains nodes of two types:
    intermediate nodes, called page tree nodes, and leaf nodes, called page objects.
    ([Adobe PDF References](app3.html#adobemanual) p. 75).'
  prefs: []
  type: TYPE_NORMAL
- en: While it is possible to list all page references in just one array, PDFs with
    many pages are often created using *balanced tree* structures (“page trees”) for
    faster access to any single page. In relation to the total number of pages, this
    can reduce the average page access time by page number from a linear to some logarithmic
    order of magnitude.
  prefs: []
  type: TYPE_NORMAL
- en: For fast page access, MuPDF can use its own array in memory – independently
    from what may or may not be present in the document file. This array is indexed
    by page number and therefore much faster than even the access via a perfectly
    balanced page tree.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar to Python, PDF supports the notion *object*, which can come in eight
    basic types: boolean values (“true” or “false”), integer and real numbers, strings
    (**always** enclosed in brackets – either “()”, or “<>” to indicate hexadecimal),
    names (must always start with a “/”, e.g. `/Contents`), arrays (enclosed in brackets
    “[]”), dictionaries (enclosed in brackets “<<>>”), streams (enclosed by keywords
    “stream” / “endstream”), and the null object (“null”) ([Adobe PDF References](app3.html#adobemanual)
    p. 13). Objects can be made identifiable by assigning a label. This label is then
    called *indirect* object. PyMuPDF supports retrieving definitions of indirect
    objects via their cross reference number via [`Document.xref_object()`](document.html#Document.xref_object
    "Document.xref_object").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'A PDF [`dictionary`](#dictionary "dictionary") [`object`](#object "object")
    type which is followed by a sequence of bytes, similar to Python *bytes*. “However,
    a PDF application can read a stream incrementally, while a string must be read
    in its entirety. Furthermore, a stream can be of unlimited length, whereas a string
    is subject to an implementation limit. For this reason, objects with potentially
    large amounts of data, such as images and page descriptions, are represented as
    streams.” “A stream consists of a [`dictionary`](#dictionary "dictionary") followed
    by zero or more bytes bracketed between the keywords *stream* and *endstream*”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: See [Adobe PDF References](app3.html#adobemanual) p. 19\. PyMuPDF supports retrieving
    stream content via [`Document.xref_stream()`](document.html#Document.xref_stream
    "Document.xref_stream"). Use [`Document.is_stream()`](functions.html#Document.is_stream
    "Document.is_stream") to determine whether an object is of stream type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: A mathematical notion meaning a vector of norm (“length”) 1 – usually the Euclidean
    norm is implied. In PyMuPDF, this term is restricted to [Point](point.html#point)
    objects, see [`Point.unit`](point.html#Point.unit "Point.unit").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Abbreviation for cross-reference number: this is an integer unique identification
    for objects in a PDF. There exists a cross-reference table (which may physically
    consist of several separate segments) in each PDF, which stores the relative position
    of each object for quick lookup. The cross-reference table is one entry longer
    than the number of existing object: item zero is reserved and must not be used
    in any way. Many PyMuPDF classes have an *xref* attribute (which is zero for non-PDFs),
    and one can find out the total number of objects in a PDF via [`Document.xref_length()`](functions.html#Document.xref_length
    "Document.xref_length") *- 1*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: When referring to font size this metric is measured in points where 1 inch =
    72 points.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Images and [Pixmap](pixmap.html#pixmap) objects may contain resolution information
    provided as “dots per inch”, dpi, in each direction (horizontal and vertical).
    When MuPDF reads an image from a file or from a PDF object, it will parse this
    information and put it in [`Pixmap.xres`](pixmap.html#Pixmap.xres "Pixmap.xres"),
    [`Pixmap.yres`](pixmap.html#Pixmap.yres "Pixmap.yres"), respectively. If it finds
    no meaningful information in the input (like non-positive values or values exceeding
    4800), it will use “sane” defaults instead. The usual default value is 96, but
    it may also be 72 in some cases (e.g. for JPX images).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Optional content properties dictionary - a sub [`dictionary`](#dictionary "dictionary")
    of the PDF [`catalog`](#catalog "catalog"). The central place to store optional
    content information, which is identified by the key `/OCProperties`. This dictionary
    has two required and one optional entry: (1) `/OCGs`, required, an array listing
    all optional content groups, (2) `/D`, required, the default optional content
    configuration dictionary (OCCD), (3) `/Configs`, optional, an array of alternative
    OCCDs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Optional content configuration dictionary - a PDF [`dictionary`](#dictionary
    "dictionary") inside the PDF [`OCPD`](#OCPD "OCPD"). It stores a setting of ON
    / OFF states of OCGs and how they are presented to a PDF viewer program. Selecting
    a configuration is quick way to achieve temporary mass visibility state changes.
    After opening a PDF, the `/D` configuration of the [`OCPD`](#OCPD "OCPD") is always
    activated. Viewer should offer a way to switch between the `/D`, or one of the
    optional configurations contained in array `/Configs`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Optional content group – a [`dictionary`](#dictionary "dictionary") object used
    to control the visibility of other PDF objects like images or annotations. Independently
    on which page they are defined, objects with the same OCG can simultaneously be
    shown or hidden by setting their OCG to ON or OFF. This can be achieved via the
    user interface provided by many PDF viewers (Adobe Acrobat), or programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Optional content membership dictionary – a [`dictionary`](#dictionary "dictionary")
    object which can be used like an [`OCG`](#OCG "OCG"): it has a visibility state.
    The visibility of an OCMD is **computed:** it is a logical expression, which uses
    the state of one or more OCGs to produce a boolean value. The expression’s result
    is interpreted as ON (true) or OFF (false).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Some frequent character combinations are represented by their own special glyphs
    in more advanced fonts. Typical examples are “fi”, “fl”, “ffi” and “ffl”. These
    compounds are called *ligatures*. In PyMuPDF text extractions, there is the option
    to either return the corresponding unicode unchanged, or split ligatures up into
    their constituent parts: “fi” ==> “f” + “i”, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
