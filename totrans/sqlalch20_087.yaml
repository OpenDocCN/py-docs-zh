- en: Schema Definition Language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/schema.html](https://docs.sqlalchemy.org/en/20/core/schema.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This section references SQLAlchemy **schema metadata**, a comprehensive system
    of describing and inspecting database schemas.
  prefs: []
  type: TYPE_NORMAL
- en: The core of SQLAlchemy’s query and object mapping operations are supported by
    *database metadata*, which is comprised of Python objects that describe tables
    and other schema-level objects. These objects are at the core of three major types
    of operations - issuing CREATE and DROP statements (known as *DDL*), constructing
    SQL queries, and expressing information about structures that already exist within
    the database.
  prefs: []
  type: TYPE_NORMAL
- en: Database metadata can be expressed by explicitly naming the various components
    and their properties, using constructs such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), [`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), all of which are imported from the `sqlalchemy.schema`
    package. It can also be generated by SQLAlchemy using a process called *reflection*,
    which means you start with a single object such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), assign it a name, and then instruct SQLAlchemy to
    load all the additional information related to that name from a particular engine
    source.
  prefs: []
  type: TYPE_NORMAL
- en: A key feature of SQLAlchemy’s database metadata constructs is that they are
    designed to be used in a *declarative* style which closely resembles that of real
    DDL. They are therefore most intuitive to those who have some background in creating
    real schema generation scripts.
  prefs: []
  type: TYPE_NORMAL
- en: '[Describing Databases with MetaData](metadata.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Accessing Tables and Columns](metadata.html#accessing-tables-and-columns)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Creating and Dropping Database Tables](metadata.html#creating-and-dropping-database-tables)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Altering Database Objects through Migrations](metadata.html#altering-database-objects-through-migrations)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Specifying the Schema Name](metadata.html#specifying-the-schema-name)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Specifying a Default Schema Name with MetaData](metadata.html#specifying-a-default-schema-name-with-metadata)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Applying Dynamic Schema Naming Conventions](metadata.html#applying-dynamic-schema-naming-conventions)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Setting a Default Schema for New Connections](metadata.html#setting-a-default-schema-for-new-connections)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Schemas and Reflection](metadata.html#schemas-and-reflection)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Backend-Specific Options](metadata.html#backend-specific-options)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Column, Table, MetaData API](metadata.html#column-table-metadata-api)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Column`](metadata.html#sqlalchemy.schema.Column)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`MetaData`](metadata.html#sqlalchemy.schema.MetaData)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`SchemaConst`](metadata.html#sqlalchemy.schema.SchemaConst)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`insert_sentinel()`](metadata.html#sqlalchemy.schema.insert_sentinel)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Table`](metadata.html#sqlalchemy.schema.Table)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Reflecting Database Objects](reflection.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Overriding Reflected Columns](reflection.html#overriding-reflected-columns)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Reflecting Views](reflection.html#reflecting-views)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Reflecting All Tables at Once](reflection.html#reflecting-all-tables-at-once)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Reflecting Tables from Other Schemas](reflection.html#reflecting-tables-from-other-schemas)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Interaction of Schema-qualified Reflection with the Default Schema](reflection.html#interaction-of-schema-qualified-reflection-with-the-default-schema)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Fine Grained Reflection with Inspector](reflection.html#fine-grained-reflection-with-inspector)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Inspector`](reflection.html#sqlalchemy.engine.reflection.Inspector)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ReflectedColumn`](reflection.html#sqlalchemy.engine.interfaces.ReflectedColumn)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ReflectedComputed`](reflection.html#sqlalchemy.engine.interfaces.ReflectedComputed)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ReflectedCheckConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedCheckConstraint)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ReflectedForeignKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ReflectedIdentity`](reflection.html#sqlalchemy.engine.interfaces.ReflectedIdentity)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ReflectedIndex`](reflection.html#sqlalchemy.engine.interfaces.ReflectedIndex)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ReflectedPrimaryKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ReflectedUniqueConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ReflectedTableComment`](reflection.html#sqlalchemy.engine.interfaces.ReflectedTableComment)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Reflecting with Database-Agnostic Types](reflection.html#reflecting-with-database-agnostic-types)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Limitations of Reflection](reflection.html#limitations-of-reflection)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Column INSERT/UPDATE Defaults](defaults.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Scalar Defaults](defaults.html#scalar-defaults)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python-Executed Functions](defaults.html#python-executed-functions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Context-Sensitive Default Functions](defaults.html#context-sensitive-default-functions)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Client-Invoked SQL Expressions](defaults.html#client-invoked-sql-expressions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Server-invoked DDL-Explicit Default Expressions](defaults.html#server-invoked-ddl-explicit-default-expressions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Marking Implicitly Generated Values, timestamps, and Triggered Columns](defaults.html#marking-implicitly-generated-values-timestamps-and-triggered-columns)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Defining Sequences](defaults.html#defining-sequences)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Associating a Sequence on a SERIAL column](defaults.html#associating-a-sequence-on-a-serial-column)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Executing a Sequence Standalone](defaults.html#executing-a-sequence-standalone)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Associating a Sequence with the MetaData](defaults.html#associating-a-sequence-with-the-metadata)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Associating a Sequence as the Server Side Default](defaults.html#associating-a-sequence-as-the-server-side-default)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Computed Columns (GENERATED ALWAYS AS)](defaults.html#computed-columns-generated-always-as)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Identity Columns (GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY)](defaults.html#identity-ddl)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Default Objects API](defaults.html#default-objects-api)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Computed`](defaults.html#sqlalchemy.schema.Computed)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ColumnDefault`](defaults.html#sqlalchemy.schema.ColumnDefault)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DefaultClause`](defaults.html#sqlalchemy.schema.DefaultClause)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DefaultGenerator`](defaults.html#sqlalchemy.schema.DefaultGenerator)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`FetchedValue`](defaults.html#sqlalchemy.schema.FetchedValue)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Sequence`](defaults.html#sqlalchemy.schema.Sequence)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Identity`](defaults.html#sqlalchemy.schema.Identity)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Defining Constraints and Indexes](constraints.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Defining Foreign Keys](constraints.html#defining-foreign-keys)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Creating/Dropping Foreign Key Constraints via ALTER](constraints.html#creating-dropping-foreign-key-constraints-via-alter)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ON UPDATE and ON DELETE](constraints.html#on-update-and-on-delete)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[UNIQUE Constraint](constraints.html#unique-constraint)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CHECK Constraint](constraints.html#check-constraint)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRIMARY KEY Constraint](constraints.html#primary-key-constraint)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Setting up Constraints when using the Declarative ORM Extension](constraints.html#setting-up-constraints-when-using-the-declarative-orm-extension)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Configuring Constraint Naming Conventions](constraints.html#configuring-constraint-naming-conventions)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Configuring a Naming Convention for a MetaData Collection](constraints.html#configuring-a-naming-convention-for-a-metadata-collection)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Default Naming Convention](constraints.html#the-default-naming-convention)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Truncation of Long Names](constraints.html#truncation-of-long-names)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Creating Custom Tokens for Naming Conventions](constraints.html#creating-custom-tokens-for-naming-conventions)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Naming CHECK Constraints](constraints.html#naming-check-constraints)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Configuring Naming for Boolean, Enum, and other schema types](constraints.html#configuring-naming-for-boolean-enum-and-other-schema-types)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using Naming Conventions with ORM Declarative Mixins](constraints.html#using-naming-conventions-with-orm-declarative-mixins)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Constraints API](constraints.html#constraints-api)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Constraint`](constraints.html#sqlalchemy.schema.Constraint)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ColumnCollectionMixin`](constraints.html#sqlalchemy.schema.ColumnCollectionMixin)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ColumnCollectionConstraint`](constraints.html#sqlalchemy.schema.ColumnCollectionConstraint)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`CheckConstraint`](constraints.html#sqlalchemy.schema.CheckConstraint)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ForeignKey`](constraints.html#sqlalchemy.schema.ForeignKey)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ForeignKeyConstraint`](constraints.html#sqlalchemy.schema.ForeignKeyConstraint)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`HasConditionalDDL`](constraints.html#sqlalchemy.schema.HasConditionalDDL)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PrimaryKeyConstraint`](constraints.html#sqlalchemy.schema.PrimaryKeyConstraint)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`UniqueConstraint`](constraints.html#sqlalchemy.schema.UniqueConstraint)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`conv()`](constraints.html#sqlalchemy.schema.conv)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Indexes](constraints.html#indexes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Functional Indexes](constraints.html#functional-indexes)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Index API](constraints.html#index-api)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Index`](constraints.html#sqlalchemy.schema.Index)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Customizing DDL](ddl.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Custom DDL](ddl.html#custom-ddl)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Controlling DDL Sequences](ddl.html#controlling-ddl-sequences)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using the built-in DDLElement Classes](ddl.html#using-the-built-in-ddlelement-classes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#controlling-ddl-generation-of-constraints-and-indexes)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[DDL Expression Constructs API](ddl.html#ddl-expression-constructs-api)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`sort_tables()`](ddl.html#sqlalchemy.schema.sort_tables)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`BaseDDLElement`](ddl.html#sqlalchemy.schema.BaseDDLElement)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ExecutableDDLElement`](ddl.html#sqlalchemy.schema.ExecutableDDLElement)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DDL`](ddl.html#sqlalchemy.schema.DDL)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`_CreateDropBase`](ddl.html#sqlalchemy.schema._CreateDropBase)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DropTable`](ddl.html#sqlalchemy.schema.DropTable)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`CreateColumn`](ddl.html#sqlalchemy.schema.CreateColumn)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`CreateSequence`](ddl.html#sqlalchemy.schema.CreateSequence)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DropSequence`](ddl.html#sqlalchemy.schema.DropSequence)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`CreateIndex`](ddl.html#sqlalchemy.schema.CreateIndex)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DropIndex`](ddl.html#sqlalchemy.schema.DropIndex)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`AddConstraint`](ddl.html#sqlalchemy.schema.AddConstraint)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DropConstraint`](ddl.html#sqlalchemy.schema.DropConstraint)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`CreateSchema`](ddl.html#sqlalchemy.schema.CreateSchema)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`DropSchema`](ddl.html#sqlalchemy.schema.DropSchema)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
