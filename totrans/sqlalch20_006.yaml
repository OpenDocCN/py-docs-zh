- en: Working with Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/tutorial/data.html](https://docs.sqlalchemy.org/en/20/tutorial/data.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In [Working with Transactions and the DBAPI](dbapi_transactions.html#tutorial-working-with-transactions),
    we learned the basics of how to interact with the Python DBAPI and its transactional
    state. Then, in [Working with Database Metadata](metadata.html#tutorial-working-with-metadata),
    we learned how to represent database tables, columns, and constraints within SQLAlchemy
    using the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    and related objects. In this section we will combine both concepts above to create,
    select and manipulate data within a relational database. Our interaction with
    the database is **always** in terms of a transaction, even if we’ve set our database
    driver to use [autocommit](../core/connections.html#dbapi-autocommit) behind the
    scenes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The components of this section are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using INSERT Statements](data_insert.html#tutorial-core-insert) - to get some
    data into the database, we introduce and demonstrate the Core [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct. INSERTs from an ORM perspective
    are described in the next section [Data Manipulation with the ORM](orm_data_manipulation.html#tutorial-orm-data-manipulation).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using SELECT Statements](data_select.html#tutorial-selecting-data) - this
    section will describe in detail the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct, which is the most commonly used
    object in SQLAlchemy. The [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct emits SELECT statements for both
    Core and ORM centric applications and both use cases will be described here. Additional
    ORM use cases are also noted in the later section [Using Relationships in Queries](orm_related_objects.html#tutorial-select-relationships)
    as well as the [ORM Querying Guide](../orm/queryguide/index.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using UPDATE and DELETE Statements](data_update.html#tutorial-core-update-delete)
    - Rounding out the INSERT and SELECTion of data, this section will describe from
    a Core perspective the use of the [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") constructs. ORM-specific UPDATE and DELETE
    is similarly described in the [Data Manipulation with the ORM](orm_data_manipulation.html#tutorial-orm-data-manipulation)
    section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
