["```py\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Dec  9 08:34:06 2018\n\n@author: Jorj\n@license: GNU AFFERO GPL V3\n\nCreate a list of available symbols defined in shapes_and_symbols.py\n\nThis also demonstrates an example usage: how these symbols could be used\nas bullet-point symbols in some text.\n\n\"\"\"\n\nimport pymupdf\nimport shapes_and_symbols as sas\n\n# list of available symbol functions and their descriptions\ntlist = [\n         (sas.arrow, \"arrow (easy)\"),\n         (sas.caro, \"caro (easy)\"),\n         (sas.clover, \"clover (easy)\"),\n         (sas.diamond, \"diamond (easy)\"),\n         (sas.dontenter, \"do not enter (medium)\"),\n         (sas.frowney, \"frowney (medium)\"),\n         (sas.hand, \"hand (complex)\"),\n         (sas.heart, \"heart (easy)\"),\n         (sas.pencil, \"pencil (very complex)\"),\n         (sas.smiley, \"smiley (easy)\"),\n         ]\n\nr = pymupdf.Rect(50, 50, 100, 100)  # first rect to contain a symbol\nd = pymupdf.Rect(0, r.height + 10, 0, r.height + 10)  # displacement to next rect\np = (15, -r.height * 0.2)  # starting point of explanation text\nrlist = [r]  # rectangle list\n\nfor i in range(1, len(tlist)):  # fill in all the rectangles\n    rlist.append(rlist[i-1] + d)\n\ndoc = pymupdf.open()  # create empty PDF\npage = doc.new_page()  # create an empty page\nshape = page.new_shape()  # start a Shape (canvas)\n\nfor i, r in enumerate(rlist):\n    tlist[i][0](shape, rlist[i])  # execute symbol creation\n    shape.insert_text(rlist[i].br + p,  # insert description text\n                   tlist[i][1], fontsize=r.height/1.2)\n\n# store everything to the page's /Contents object\nshape.commit()\n\nimport os\nscriptdir = os.path.dirname(__file__)\ndoc.save(os.path.join(scriptdir, \"symbol-list.pdf\"))  # save the PDF \n```", "```py\n>>> pprint(page.get_drawings())\n[{'closePath': True,\n'color': [1.0, 0.0, 0.0],\n'dashes': '[] 0',\n'even_odd': False,\n'fill': [1.0, 1.0, 0.0],\n'items': [('c',\n Point(100.0, 150.0),\n Point(100.0, 177.614013671875),\n Point(122.38600158691406, 200.0),\n Point(150.0, 200.0)),\n ('c',\n Point(150.0, 200.0),\n Point(177.61399841308594, 200.0),\n Point(200.0, 177.614013671875),\n Point(200.0, 150.0)),\n ('c',\n Point(200.0, 150.0),\n Point(200.0, 122.385986328125),\n Point(177.61399841308594, 100.0),\n Point(150.0, 100.0)),\n ('c',\n Point(150.0, 100.0),\n Point(122.38600158691406, 100.0),\n Point(100.0, 122.385986328125),\n Point(100.0, 150.0))],\n'lineCap': (0, 0, 0),\n'lineJoin': 0,\n'opacity': 1.0,\n'rect': Rect(100.0, 100.0, 200.0, 200.0),\n'width': 1.0}]\n>>> \n```", "```py\nimport pymupdf\ndoc = pymupdf.open(\"some.file\")\npage = doc[0]\npaths = page.get_drawings()  # extract existing drawings\n# this is a list of \"paths\", which can directly be drawn again using Shape\n# -------------------------------------------------------------------------\n#\n# define some output page with the same dimensions\noutpdf = pymupdf.open()\noutpage = outpdf.new_page(width=page.rect.width, height=page.rect.height)\nshape = outpage.new_shape()  # make a drawing canvas for the output page\n# --------------------------------------\n# loop through the paths and draw them\n# --------------------------------------\nfor path in paths:\n    # ------------------------------------\n    # draw each entry of the 'items' list\n    # ------------------------------------\n    for item in path[\"items\"]:  # these are the draw commands\n        if item[0] == \"l\":  # line\n            shape.draw_line(item[1], item[2])\n        elif item[0] == \"re\":  # rectangle\n            shape.draw_rect(item[1])\n        elif item[0] == \"qu\":  # quad\n            shape.draw_quad(item[1])\n        elif item[0] == \"c\":  # curve\n            shape.draw_bezier(item[1], item[2], item[3], item[4])\n        else:\n            raise ValueError(\"unhandled drawing\", item)\n    # ------------------------------------------------------\n    # all items are drawn, now apply the common properties\n    # to finish the path\n    # ------------------------------------------------------\n    shape.finish(\n        fill=path[\"fill\"],  # fill color\n        color=path[\"color\"],  # line color\n        dashes=path[\"dashes\"],  # line dashing\n        even_odd=path.get(\"even_odd\", True),  # control color of overlaps\n        closePath=path[\"closePath\"],  # whether to connect last and first point\n        lineJoin=path[\"lineJoin\"],  # how line joins should look like\n        lineCap=max(path[\"lineCap\"]),  # how line ends should look like\n        width=path[\"width\"],  # line width\n        stroke_opacity=path.get(\"stroke_opacity\", 1),  # same value for both\n        fill_opacity=path.get(\"fill_opacity\", 1),  # opacity parameters\n        )\n# all paths processed - commit the shape to its page\nshape.commit()\noutpdf.save(\"drawings-page-0.pdf\") \n```", "```py\npaths = page.get_drawings()\nrect = paths[0][\"rect\"]  # rectangle of the 1st drawing\npage.add_redact_annot(rect)\npage.apply_redactions(0,2,1)  # potentially set options for any of images, drawings, text \n```", "```py\n# Draw a circle on the page using the Page method\npage.draw_circle((center_x, center_y), radius, color=(1, 0, 0), width=2)\n\n# Draw a circle on the page using a Shape object\nshape = page.new_shape()\nshape.draw_circle((center_x, center_y), radius)\nshape.finish(color=(1, 0, 0), width=2)\nshape.commit(overlay=True) \n```", "```py\n>>> pprint(page.get_drawings())\n[{'closePath': True,\n'color': [1.0, 0.0, 0.0],\n'dashes': '[] 0',\n'even_odd': False,\n'fill': [1.0, 1.0, 0.0],\n'items': [('c',\n Point(100.0, 150.0),\n Point(100.0, 177.614013671875),\n Point(122.38600158691406, 200.0),\n Point(150.0, 200.0)),\n ('c',\n Point(150.0, 200.0),\n Point(177.61399841308594, 200.0),\n Point(200.0, 177.614013671875),\n Point(200.0, 150.0)),\n ('c',\n Point(200.0, 150.0),\n Point(200.0, 122.385986328125),\n Point(177.61399841308594, 100.0),\n Point(150.0, 100.0)),\n ('c',\n Point(150.0, 100.0),\n Point(122.38600158691406, 100.0),\n Point(100.0, 122.385986328125),\n Point(100.0, 150.0))],\n'lineCap': (0, 0, 0),\n'lineJoin': 0,\n'opacity': 1.0,\n'rect': Rect(100.0, 100.0, 200.0, 200.0),\n'width': 1.0}]\n>>> \n```", "```py\nimport pymupdf\ndoc = pymupdf.open(\"some.file\")\npage = doc[0]\npaths = page.get_drawings()  # extract existing drawings\n# this is a list of \"paths\", which can directly be drawn again using Shape\n# -------------------------------------------------------------------------\n#\n# define some output page with the same dimensions\noutpdf = pymupdf.open()\noutpage = outpdf.new_page(width=page.rect.width, height=page.rect.height)\nshape = outpage.new_shape()  # make a drawing canvas for the output page\n# --------------------------------------\n# loop through the paths and draw them\n# --------------------------------------\nfor path in paths:\n    # ------------------------------------\n    # draw each entry of the 'items' list\n    # ------------------------------------\n    for item in path[\"items\"]:  # these are the draw commands\n        if item[0] == \"l\":  # line\n            shape.draw_line(item[1], item[2])\n        elif item[0] == \"re\":  # rectangle\n            shape.draw_rect(item[1])\n        elif item[0] == \"qu\":  # quad\n            shape.draw_quad(item[1])\n        elif item[0] == \"c\":  # curve\n            shape.draw_bezier(item[1], item[2], item[3], item[4])\n        else:\n            raise ValueError(\"unhandled drawing\", item)\n    # ------------------------------------------------------\n    # all items are drawn, now apply the common properties\n    # to finish the path\n    # ------------------------------------------------------\n    shape.finish(\n        fill=path[\"fill\"],  # fill color\n        color=path[\"color\"],  # line color\n        dashes=path[\"dashes\"],  # line dashing\n        even_odd=path.get(\"even_odd\", True),  # control color of overlaps\n        closePath=path[\"closePath\"],  # whether to connect last and first point\n        lineJoin=path[\"lineJoin\"],  # how line joins should look like\n        lineCap=max(path[\"lineCap\"]),  # how line ends should look like\n        width=path[\"width\"],  # line width\n        stroke_opacity=path.get(\"stroke_opacity\", 1),  # same value for both\n        fill_opacity=path.get(\"fill_opacity\", 1),  # opacity parameters\n        )\n# all paths processed - commit the shape to its page\nshape.commit()\noutpdf.save(\"drawings-page-0.pdf\") \n```", "```py\npaths = page.get_drawings()\nrect = paths[0][\"rect\"]  # rectangle of the 1st drawing\npage.add_redact_annot(rect)\npage.apply_redactions(0,2,1)  # potentially set options for any of images, drawings, text \n```", "```py\n# Draw a circle on the page using the Page method\npage.draw_circle((center_x, center_y), radius, color=(1, 0, 0), width=2)\n\n# Draw a circle on the page using a Shape object\nshape = page.new_shape()\nshape.draw_circle((center_x, center_y), radius)\nshape.finish(color=(1, 0, 0), width=2)\nshape.commit(overlay=True) \n```"]