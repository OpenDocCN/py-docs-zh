["```py\nArray = Any\nShape = core.Shape\n\ndef slice(operand: Array, start_indices: Sequence[int],\n          limit_indices: Sequence[int],\n          strides: Optional[Sequence[int]] = None) -> Array:\n  ... \n```", "```py\ndef shuffle(key: KeyArray, x: Array, axis: int = 0) -> jnp.ndarray:\n  ... \n```", "```py\ndef tile(A, reps):\n  try:\n    tup = tuple(reps)\n  except TypeError:\n    tup = (reps,)\n  d = len(tup)\n  ... \n```", "```py\n@jit\ndef f(x: ArrayAnnotation) -> ArrayAnnotation:\n  assert isinstance(x, core.Tracer)\n  return x \n```", "```py\ndef f(x):\n  return isinstance(x, ArrayInstance)\nx = jnp.array([1, 2, 3])\nassert f(x)       # x will be an array\nassert jit(f)(x)  # x will be a tracer \n```"]