- en: Legacy Query API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/queryguide/query.html](https://docs.sqlalchemy.org/en/20/orm/queryguide/query.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: About the Legacy Query API
  prefs: []
  type: TYPE_NORMAL
- en: This page contains the Python generated documentation for the [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") construct, which for many years was the sole SQL interface
    when working with the SQLAlchemy ORM. As of version 2.0, an all new way of working
    is now the standard approach, where the same [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct that works for Core works just as
    well for the ORM, providing a consistent interface for building queries.
  prefs: []
  type: TYPE_NORMAL
- en: For any application that is built on the SQLAlchemy ORM prior to the 2.0 API,
    the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") API will usually represents
    the vast majority of database access code within an application, and as such the
    majority of the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") API is
    **not being removed from SQLAlchemy**. The [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object behind the scenes now translates itself into a 2.0 style [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") object when the [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object is executed, so it now is just a very thin adapter
    API.
  prefs: []
  type: TYPE_NORMAL
- en: For a guide to migrating an application based on [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") to 2.0 style, see [2.0 Migration - ORM Usage](../../changelog/migration_20.html#migration-20-query-usage).
  prefs: []
  type: TYPE_NORMAL
- en: For an introduction to writing SQL for ORM objects in the 2.0 style, start with
    the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial).
    Additional reference for 2.0 style querying is at [ORM Querying Guide](index.html).
  prefs: []
  type: TYPE_NORMAL
- en: The Query Object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") is produced in terms
    of a given [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    using the [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Following is the full interface for the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Query](#sqlalchemy.orm.Query) | ORM-level SQL construction object. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: ORM-level SQL construction object.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: The ORM [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object is a
    legacy construct as of SQLAlchemy 2.0\. See the notes at the top of [Legacy Query
    API](#) for an overview, including links to migration documentation.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") objects are normally
    initially generated using the [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") method of [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), and in less common cases by instantiating the [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") directly and associating with a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") using the [`Query.with_session()`](#sqlalchemy.orm.Query.with_session
    "sqlalchemy.orm.Query.with_session") method.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.orm.Query.__init__), [add_column()](#sqlalchemy.orm.Query.add_column),
    [add_columns()](#sqlalchemy.orm.Query.add_columns), [add_entity()](#sqlalchemy.orm.Query.add_entity),
    [all()](#sqlalchemy.orm.Query.all), [apply_labels()](#sqlalchemy.orm.Query.apply_labels),
    [as_scalar()](#sqlalchemy.orm.Query.as_scalar), [autoflush()](#sqlalchemy.orm.Query.autoflush),
    [column_descriptions](#sqlalchemy.orm.Query.column_descriptions), [correlate()](#sqlalchemy.orm.Query.correlate),
    [count()](#sqlalchemy.orm.Query.count), [cte()](#sqlalchemy.orm.Query.cte), [delete()](#sqlalchemy.orm.Query.delete),
    [distinct()](#sqlalchemy.orm.Query.distinct), [enable_assertions()](#sqlalchemy.orm.Query.enable_assertions),
    [enable_eagerloads()](#sqlalchemy.orm.Query.enable_eagerloads), [except_()](#sqlalchemy.orm.Query.except_),
    [except_all()](#sqlalchemy.orm.Query.except_all), [execution_options()](#sqlalchemy.orm.Query.execution_options),
    [exists()](#sqlalchemy.orm.Query.exists), [filter()](#sqlalchemy.orm.Query.filter),
    [filter_by()](#sqlalchemy.orm.Query.filter_by), [first()](#sqlalchemy.orm.Query.first),
    [from_statement()](#sqlalchemy.orm.Query.from_statement), [get()](#sqlalchemy.orm.Query.get),
    [get_children()](#sqlalchemy.orm.Query.get_children), [get_execution_options()](#sqlalchemy.orm.Query.get_execution_options),
    [get_label_style](#sqlalchemy.orm.Query.get_label_style), [group_by()](#sqlalchemy.orm.Query.group_by),
    [having()](#sqlalchemy.orm.Query.having), [instances()](#sqlalchemy.orm.Query.instances),
    [intersect()](#sqlalchemy.orm.Query.intersect), [intersect_all()](#sqlalchemy.orm.Query.intersect_all),
    [is_single_entity](#sqlalchemy.orm.Query.is_single_entity), [join()](#sqlalchemy.orm.Query.join),
    [label()](#sqlalchemy.orm.Query.label), [lazy_loaded_from](#sqlalchemy.orm.Query.lazy_loaded_from),
    [limit()](#sqlalchemy.orm.Query.limit), [merge_result()](#sqlalchemy.orm.Query.merge_result),
    [offset()](#sqlalchemy.orm.Query.offset), [one()](#sqlalchemy.orm.Query.one),
    [one_or_none()](#sqlalchemy.orm.Query.one_or_none), [only_return_tuples()](#sqlalchemy.orm.Query.only_return_tuples),
    [options()](#sqlalchemy.orm.Query.options), [order_by()](#sqlalchemy.orm.Query.order_by),
    [outerjoin()](#sqlalchemy.orm.Query.outerjoin), [params()](#sqlalchemy.orm.Query.params),
    [populate_existing()](#sqlalchemy.orm.Query.populate_existing), [prefix_with()](#sqlalchemy.orm.Query.prefix_with),
    [reset_joinpoint()](#sqlalchemy.orm.Query.reset_joinpoint), [scalar()](#sqlalchemy.orm.Query.scalar),
    [scalar_subquery()](#sqlalchemy.orm.Query.scalar_subquery), [select_from()](#sqlalchemy.orm.Query.select_from),
    [selectable](#sqlalchemy.orm.Query.selectable), [set_label_style()](#sqlalchemy.orm.Query.set_label_style),
    [slice()](#sqlalchemy.orm.Query.slice), [statement](#sqlalchemy.orm.Query.statement),
    [subquery()](#sqlalchemy.orm.Query.subquery), [suffix_with()](#sqlalchemy.orm.Query.suffix_with),
    [tuples()](#sqlalchemy.orm.Query.tuples), [union()](#sqlalchemy.orm.Query.union),
    [union_all()](#sqlalchemy.orm.Query.union_all), [update()](#sqlalchemy.orm.Query.update),
    [value()](#sqlalchemy.orm.Query.value), [values()](#sqlalchemy.orm.Query.values),
    [where()](#sqlalchemy.orm.Query.where), [whereclause](#sqlalchemy.orm.Query.whereclause),
    [with_entities()](#sqlalchemy.orm.Query.with_entities), [with_for_update()](#sqlalchemy.orm.Query.with_for_update),
    [with_hint()](#sqlalchemy.orm.Query.with_hint), [with_labels()](#sqlalchemy.orm.Query.with_labels),
    [with_parent()](#sqlalchemy.orm.Query.with_parent), [with_session()](#sqlalchemy.orm.Query.with_session),
    [with_statement_hint()](#sqlalchemy.orm.Query.with_statement_hint), [with_transformation()](#sqlalchemy.orm.Query.with_transformation),
    [yield_per()](#sqlalchemy.orm.Query.yield_per)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    (`sqlalchemy.sql.expression._SelectFromElements`, `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    [`sqlalchemy.sql.expression.HasPrefixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), [`sqlalchemy.sql.expression.HasSuffixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes"), `sqlalchemy.sql.expression.HasHints`,
    `sqlalchemy.event.registry.EventTarget`, [`sqlalchemy.log.Identified`](../../core/internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified"), `sqlalchemy.sql.expression.Generative`, [`sqlalchemy.sql.expression.Executable`](../../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), `typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The above is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`entities` – a sequence of entities and/or SQL expressions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`session` – a [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    with which the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") will be
    associated. Optional; a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    can be associated with a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") generatively via the [`Query.with_session()`](#sqlalchemy.orm.Query.with_session
    "sqlalchemy.orm.Query.with_session") method as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query "sqlalchemy.orm.Session.query")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.with_session()`](#sqlalchemy.orm.Query.with_session "sqlalchemy.orm.Query.with_session")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Add a column expression to the list of result columns to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: [`Query.add_column()`](#sqlalchemy.orm.Query.add_column
    "sqlalchemy.orm.Query.add_column") is deprecated and will be removed in a future
    release. Please use [`Query.add_columns()`](#sqlalchemy.orm.Query.add_columns
    "sqlalchemy.orm.Query.add_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Add one or more column expressions to the list of result columns to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.add_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: add a mapped entity to the list of result columns to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.add_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Return the results represented by this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    as a list.
  prefs: []
  type: TYPE_NORMAL
- en: This results in an execution of the underlying SQL statement.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object, when asked
    to return either a sequence or iterator that consists of full ORM-mapped entities,
    will **deduplicate entries based on primary key**. See the FAQ for more details.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[My Query does not return the same number of objects as query.count() tells
    me - why?](../../faq/sessions.html#faq-query-deduplicating)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.all()`](../../core/connections.html#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 2.0: The [`Query.with_labels()`](#sqlalchemy.orm.Query.with_labels
    "sqlalchemy.orm.Query.with_labels") and [`Query.apply_labels()`](#sqlalchemy.orm.Query.apply_labels
    "sqlalchemy.orm.Query.apply_labels") method is considered legacy as of the 1.x
    series of SQLAlchemy and becomes a legacy construct in 2.0\. Use set_label_style(LABEL_STYLE_TABLENAME_PLUS_COL)
    instead. (Background on SQLAlchemy 2.0 at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), converted to a scalar subquery.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Query.as_scalar()`](#sqlalchemy.orm.Query.as_scalar
    "sqlalchemy.orm.Query.as_scalar") method is deprecated and will be removed in
    a future release. Please refer to [`Query.scalar_subquery()`](#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Return a Query with a specific ‘autoflush’ setting.
  prefs: []
  type: TYPE_NORMAL
- en: As of SQLAlchemy 1.4, the [`Query.autoflush()`](#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush") method is equivalent to using the `autoflush`
    execution option at the ORM level. See the section [Autoflush](api.html#orm-queryguide-autoflush)
    for further background on this option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Return metadata about the columns which would be returned by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: 'Format is a list of dictionaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: 'This API is available using [2.0 style](../../glossary.html#term-2.0-style)
    queries as well, documented at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Inspecting entities and columns from ORM-enabled SELECT and DML statements](api.html#queryguide-inspection)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") construct which
    will correlate the given FROM clauses to that of an enclosing [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") or [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select").
  prefs: []
  type: TYPE_NORMAL
- en: The method here accepts mapped classes, [`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") constructs, and [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") constructs as arguments, which are resolved into expression
    constructs, in addition to appropriate expression constructs.
  prefs: []
  type: TYPE_NORMAL
- en: The correlation arguments are ultimately passed to [`Select.correlate()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") after coercion to expression constructs.
  prefs: []
  type: TYPE_NORMAL
- en: The correlation arguments take effect in such cases as when `Query.from_self()`
    is used, or when a subquery as returned by [`Query.subquery()`](#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") is embedded in another [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.correlate()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Return a count of rows this the SQL formed by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") would return.
  prefs: []
  type: TYPE_NORMAL
- en: 'This generates the SQL for this Query as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The above SQL returns a single row, which is the aggregate value of the count
    function; the [`Query.count()`](#sqlalchemy.orm.Query.count "sqlalchemy.orm.Query.count")
    method then returns that single integer value.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that the value returned by count() is **not the same
    as the number of ORM objects that this Query would return from a method such as
    the .all() method**. The [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, when asked to return full entities, will **deduplicate entries based on
    primary key**, meaning if the same primary key value would appear in the results
    more than once, only one object of that primary key would be present. This does
    not apply to a query that is against individual columns.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[My Query does not return the same number of objects as query.count() tells
    me - why?](../../faq/sessions.html#faq-query-deduplicating)'
  prefs: []
  type: TYPE_NORMAL
- en: 'For fine grained control over specific columns to count, to skip the usage
    of a subquery or otherwise control of the FROM clause, or to use other aggregate
    functions, use [`expression.func`](../../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") expressions in conjunction with [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"), i.e.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[2.0 Migration - ORM Usage](../../changelog/migration_20.html#migration-20-query-usage)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") represented as a common table expression (CTE).
  prefs: []
  type: TYPE_NORMAL
- en: Parameters and usage are the same as those of the [`SelectBase.cte()`](../../core/selectable.html#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte") method; see that method for further
    details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the [PostgreSQL WITH RECURSIVE example](https://www.postgresql.org/docs/current/static/queries-with.html).
    Note that, in this example, the `included_parts` cte and the `incl_alias` alias
    of it are Core selectables, which means the columns are accessed via the `.c.`
    attribute. The `parts_alias` object is an [`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") instance of the `Part` entity, so column-mapped attributes
    are available directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.cte()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.cte
    "sqlalchemy.sql.expression.Select.cte") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Perform a DELETE with an arbitrary WHERE clause.
  prefs: []
  type: TYPE_NORMAL
- en: Deletes rows matched by this query from the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: See the section [ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)
    for important caveats and warnings, including limitations when using bulk UPDATE
    and DELETE with mapper inheritance configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**synchronize_session** – chooses the strategy to update the attributes on
    objects in the session. See the section [ORM-Enabled INSERT, UPDATE, and DELETE
    statements](dml.html#orm-expression-update-delete) for a discussion of these strategies.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the count of rows matched as returned by the database’s “row count” feature.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Apply a `DISTINCT` to the query and return the newly resulting `Query`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The ORM-level [`distinct()`](#sqlalchemy.orm.Query.distinct "sqlalchemy.orm.Query.distinct")
    call includes logic that will automatically add columns from the ORDER BY of the
    query to the columns clause of the SELECT statement, to satisfy the common need
    of the database backend that ORDER BY columns be part of the SELECT list when
    DISTINCT is used. These columns *are not* added to the list of columns actually
    fetched by the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query"), however,
    so would not affect results. The columns are passed through when using the [`Query.statement`](#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") accessor, however.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: This logic is deprecated and will be removed
    in SQLAlchemy 2.0\. See [Using DISTINCT with additional columns, but only select
    the entity](../../changelog/migration_20.html#migration-20-query-distinct) for
    a description of this use case in 2.0.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.distinct()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***expr** –'
  prefs: []
  type: TYPE_NORMAL
- en: optional column expressions. When present, the PostgreSQL dialect will render
    a `DISTINCT ON (<expressions>)` construct.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: Using *expr in other dialects is deprecated and
    will raise [`CompileError`](../../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") in a future version.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Control whether assertions are generated.
  prefs: []
  type: TYPE_NORMAL
- en: When set to False, the returned Query will not assert its state before certain
    operations, including that LIMIT/OFFSET has not been applied when filter() is
    called, no criterion exists when get() is called, and no “from_statement()” exists
    when filter()/order_by()/group_by() etc. is called. This more permissive mode
    is used by custom Query subclasses to specify criterion or other modifiers outside
    of the usual usage patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Care should be taken to ensure that the usage pattern is even possible. A statement
    applied by from_statement() will override any criterion set by filter() or order_by(),
    for example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Control whether or not eager joins and subqueries are rendered.
  prefs: []
  type: TYPE_NORMAL
- en: When set to False, the returned Query will not render eager joins regardless
    of [`joinedload()`](relationships.html#sqlalchemy.orm.joinedload "sqlalchemy.orm.joinedload"),
    [`subqueryload()`](relationships.html#sqlalchemy.orm.subqueryload "sqlalchemy.orm.subqueryload")
    options or mapper-level `lazy='joined'`/`lazy='subquery'` configurations.
  prefs: []
  type: TYPE_NORMAL
- en: This is used primarily when nesting the Query’s statement into a subquery or
    other selectable, or when using [`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Produce an EXCEPT of this Query against one or more queries.
  prefs: []
  type: TYPE_NORMAL
- en: Works the same way as `Query.union()`. See that method for usage examples.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.except_()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.except_
    "sqlalchemy.sql.expression.Select.except_") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Produce an EXCEPT ALL of this Query against one or more queries.
  prefs: []
  type: TYPE_NORMAL
- en: Works the same way as `Query.union()`. See that method for usage examples.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.except_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.except_all
    "sqlalchemy.sql.expression.Select.except_all") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Set non-SQL options which take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Options allowed here include all of those accepted by [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), as well as a series of ORM
    specific options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`populate_existing=True` - equivalent to using [`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '`autoflush=True|False` - equivalent to using [`Query.autoflush()`](#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush")'
  prefs: []
  type: TYPE_NORMAL
- en: '`yield_per=<value>` - equivalent to using [`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the `stream_results` execution option is enabled automatically if
    the `Query.yield_per()` method or execution option is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: - added ORM options to [`Query.execution_options()`](#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: The execution options may also be specified on a per execution basis when using
    [2.0 style](../../glossary.html#term-2.0-style) queries via the [`Session.execution_options`](../session_api.html#sqlalchemy.orm.Session.params.execution_options
    "sqlalchemy.orm.Session") parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") parameter should not be used
    at the level of individual ORM statement executions, as the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will not track objects from different schema translate
    maps within a single session. For multiple schema translate maps within the scope
    of a single [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    see [Horizontal Sharding](../examples.html#examples-sharding).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.get_execution_options()`](#sqlalchemy.orm.Query.get_execution_options
    "sqlalchemy.orm.Query.get_execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.execution_options
    "sqlalchemy.sql.expression.Select.execution_options") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: A convenience method that turns a query into an EXISTS subquery of the form
    EXISTS (SELECT 1 FROM … WHERE …).
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Producing SQL similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The EXISTS construct is usually used in the WHERE clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that some databases such as SQL Server don’t allow an EXISTS expression
    to be present in the columns clause of a SELECT. To select a simple boolean value
    based on the exists as a WHERE, use [`literal()`](../../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.exists()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.exists
    "sqlalchemy.sql.expression.Select.exists") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Apply the given filtering criterion to a copy of this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), using SQL expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Multiple criteria may be specified as comma separated; the effect is that they
    will be joined together using the [`and_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The criterion is any SQL expression object applicable to the WHERE clause of
    a select. String expressions are coerced into SQL expression constructs via the
    [`text()`](../../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.filter_by()`](#sqlalchemy.orm.Query.filter_by "sqlalchemy.orm.Query.filter_by")
    - filter on keyword expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.where()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Apply the given filtering criterion to a copy of this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), using keyword expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Multiple criteria may be specified as comma separated; the effect is that they
    will be joined together using the [`and_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The keyword expressions are extracted from the primary entity of the query,
    or the last entity that was the target of a call to [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.filter()`](#sqlalchemy.orm.Query.filter "sqlalchemy.orm.Query.filter")
    - filter on SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.filter_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.filter_by
    "sqlalchemy.sql.expression.Select.filter_by") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Return the first result of this `Query` or None if the result doesn’t contain
    any row.
  prefs: []
  type: TYPE_NORMAL
- en: first() applies a limit of one within the generated SQL, so that only one primary
    entity row is generated on the server side (note this may consist of multiple
    result rows if join-loaded collections are present).
  prefs: []
  type: TYPE_NORMAL
- en: Calling [`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")
    results in an execution of the underlying query.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.first()`](../../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Execute the given SELECT statement and return results.
  prefs: []
  type: TYPE_NORMAL
- en: This method bypasses all internal statement compilation, and the statement is
    executed without modification.
  prefs: []
  type: TYPE_NORMAL
- en: The statement is typically either a [`text()`](../../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") or [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, and should return the set of columns
    appropriate to the entity class represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.from_statement()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: The [`Query.get()`](#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") method is considered legacy as of the 1.x series of
    SQLAlchemy and becomes a legacy construct in 2.0\. The method is now available
    as [`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    (Background on SQLAlchemy 2.0 at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") is special
    in that it provides direct access to the identity map of the owning [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). If the given primary key identifier is present in the
    local identity map, the object is returned directly from this collection and no
    SQL is emitted, unless the object has been marked fully expired. If not present,
    a SELECT is performed in order to locate the object.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") also
    will perform a check if the object is present in the identity map and marked as
    expired - a SELECT is emitted to refresh the object as well as to ensure that
    the row is still present. If not, [`ObjectDeletedError`](../exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") is raised.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") is only
    used to return a single mapped instance, not multiple instances or individual
    column constructs, and strictly on a single primary key value. The originating
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") must be constructed in
    this way, i.e. against a single mapped entity, with no additional filtering criterion.
    Loading options via [`Query.options()`](#sqlalchemy.orm.Query.options "sqlalchemy.orm.Query.options")
    may be applied however, and will be used if the object is not yet locally present.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ident** –'
  prefs: []
  type: TYPE_NORMAL
- en: A scalar, tuple, or dictionary representing the primary key. For a composite
    (e.g. multiple column) primary key, a tuple or dictionary should be passed.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a single-column primary key, the scalar calling form is typically the most
    expedient. If the primary key of a row is the value “5”, the call looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The tuple form contains primary key values typically in the order in which
    they correspond to the mapped [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object’s primary key columns, or if the [`Mapper.primary_key`](../mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") configuration parameter were used, in the order used
    for that parameter. For example, if the primary key of a row is represented by
    the integer digits “5, 10” the call would look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The dictionary form should include as keys the mapped attribute names corresponding
    to each element of the primary key. If the mapped class has the attributes `id`,
    `version_id` as the attributes which store the object’s primary key value, the
    call would look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.3: the [`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    method now optionally accepts a dictionary of attribute names to values in order
    to indicate a primary key identifier.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The object instance, or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  prefs: []
  type: TYPE_NORMAL
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  prefs: []
  type: TYPE_NORMAL
- en: This is used for visit traversal.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Get the non-SQL options which will take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.execution_options()`](#sqlalchemy.orm.Query.execution_options "sqlalchemy.orm.Query.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.get_execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.get_execution_options
    "sqlalchemy.sql.expression.Select.get_execution_options") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the current label style.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.get_label_style()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.get_label_style
    "sqlalchemy.sql.expression.Select.get_label_style") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Apply one or more GROUP BY criterion to the query and return the newly resulting
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: All existing GROUP BY settings can be suppressed by passing `None` - this will
    suppress any GROUP BY configured on mappers as well.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: 'These sections describe GROUP BY in terms of [2.0 style](../../glossary.html#term-2.0-style)
    invocation but apply to [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Aggregate functions with GROUP BY / HAVING](../../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ordering or Grouping by a Label](../../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.group_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Apply a HAVING criterion to the query and return the newly resulting [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.having()`](#sqlalchemy.orm.Query.having "sqlalchemy.orm.Query.having")
    is used in conjunction with [`Query.group_by()`](#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by").'
  prefs: []
  type: TYPE_NORMAL
- en: 'HAVING criterion makes it possible to use filters on aggregate functions like
    COUNT, SUM, AVG, MAX, and MIN, eg.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.having()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.having
    "sqlalchemy.sql.expression.Select.having") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Return an ORM result given a [`CursorResult`](../../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") and [`QueryContext`](../internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: The [`Query.instances()`](#sqlalchemy.orm.Query.instances
    "sqlalchemy.orm.Query.instances") method is deprecated and will be removed in
    a future release. Use the Select.from_statement() method or aliased() construct
    in conjunction with Session.execute() instead.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Produce an INTERSECT of this Query against one or more queries.
  prefs: []
  type: TYPE_NORMAL
- en: Works the same way as `Query.union()`. See that method for usage examples.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.intersect()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.intersect
    "sqlalchemy.sql.expression.Select.intersect") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Produce an INTERSECT ALL of this Query against one or more queries.
  prefs: []
  type: TYPE_NORMAL
- en: Works the same way as `Query.union()`. See that method for usage examples.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.intersect_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.intersect_all
    "sqlalchemy.sql.expression.Select.intersect_all") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Indicates if this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") returns
    tuples or single entities.
  prefs: []
  type: TYPE_NORMAL
- en: Returns True if this query returns a single entity for each instance in its
    result list, and False if this query returns a tuple of entities for each result.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.11.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.only_return_tuples()`](#sqlalchemy.orm.Query.only_return_tuples "sqlalchemy.orm.Query.only_return_tuples")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Create a SQL JOIN against this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object’s criterion and apply generatively, returning the newly resulting [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple Relationship Joins**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a mapping between two classes `User` and `Address`, with a relationship
    `User.addresses` representing a collection of `Address` objects associated with
    each `User`. The most common usage of [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") is to create a JOIN along this relationship, using
    the `User.addresses` attribute as an indicator for how this should occur:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Where above, the call to [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    along `User.addresses` will result in SQL approximately equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: In the above example we refer to `User.addresses` as passed to [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") as the “on clause”, that is, it indicates how the
    “ON” portion of the JOIN should be constructed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To construct a chain of joins, multiple [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") calls may be used. The relationship-bound attribute
    implies both the left and right side of the join at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: as seen in the above example, **the order in which each call to the join() method
    occurs is important**. Query would not, for example, know how to join correctly
    if we were to specify `User`, then `Item`, then `Order`, in our chain of joins;
    in such a case, depending on the arguments passed, it may raise an error that
    it doesn’t know how to join, or it may produce invalid SQL in which case the database
    will raise an error. In correct practice, the [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method is invoked in such a way that lines up with
    how we would want the JOIN clauses in SQL to be rendered, and each call should
    represent a clear link from what precedes it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Joins to a Target Entity or Selectable**'
  prefs: []
  type: TYPE_NORMAL
- en: 'A second form of [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    allows any mapped entity or core selectable construct as a target. In this usage,
    [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join") will
    attempt to create a JOIN along the natural foreign key relationship between two
    entities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: In the above calling form, [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    is called upon to create the “on clause” automatically for us. This calling form
    will ultimately raise an error if either there are no foreign keys between the
    two entities, or if there are multiple foreign key linkages between the target
    entity and the entity or entities already present on the left side such that creating
    a join requires more information. Note that when indicating a join to a target
    without any ON clause, ORM configured relationships are not taken into account.
  prefs: []
  type: TYPE_NORMAL
- en: '**Joins to a Target with an ON Clause**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The third calling form allows both the target entity as well as the ON clause
    to be passed explicitly. A example that includes a SQL expression as the ON clause
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The above form may also use a relationship-bound attribute as the ON clause
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The above syntax can be useful for the case where we wish to join to an alias
    of a particular target entity. If we wanted to join to `Address` twice, it could
    be achieved using two aliases set up using the [`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The relationship-bound calling form can also specify a target entity using
    the [`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") method; a query equivalent to the one
    above would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '**Augmenting Built-in ON Clauses**'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a substitute for providing a full custom ON condition for an existing relationship,
    the [`PropComparator.and_()`](../internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") function may be applied to a relationship
    attribute to augment additional criteria into the ON clause; the additional criteria
    will be combined with the default criteria using AND:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Joining to Tables and Subqueries**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The target of a join may also be any table or SELECT statement, which may be
    related to a target entity or not. Use the appropriate `.subquery()` method in
    order to make a subquery out of a query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Joining to a subquery in terms of a specific relationship and/or target entity
    may be achieved by linking the subquery to the entity using [`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '**Controlling what to Join From**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In cases where the left side of the current state of [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") is not in line with what we want to join from, the [`Query.select_from()`](#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method may be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Which will produce SQL similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*props` – Incoming arguments for [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join"), the props collection in modern use should be considered
    to be a one or two argument form, either as a single “target” entity or ORM attribute-bound
    relationship, or as a target entity plus an “on clause” which may be a SQL expression
    or ORM attribute-bound relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isouter=False` – If True, the join used will be a left outer join, just as
    if the [`Query.outerjoin()`](#sqlalchemy.orm.Query.outerjoin "sqlalchemy.orm.Query.outerjoin")
    method were called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full=False` – render FULL OUTER JOIN; implies `isouter`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), converted to a scalar subquery with a label of the given
    name.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.label()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.label
    "sqlalchemy.sql.expression.Select.label") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: An [`InstanceState`](../internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    that is using this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") for
    a lazy load operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: This attribute should be viewed via the [`ORMExecuteState.lazy_loaded_from`](../session_api.html#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from
    "sqlalchemy.orm.ORMExecuteState.lazy_loaded_from") attribute, within the context
    of the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ORMExecuteState.lazy_loaded_from`](../session_api.html#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from
    "sqlalchemy.orm.ORMExecuteState.lazy_loaded_from")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Apply a `LIMIT` to the query and return the newly resulting `Query`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.limit()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Merge a result into this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object’s Session.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: The [`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") method is considered legacy as of the 1.x
    series of SQLAlchemy and becomes a legacy construct in 2.0\. The method is superseded
    by the [`merge_frozen_result()`](../internals.html#sqlalchemy.orm.merge_frozen_result
    "sqlalchemy.orm.merge_frozen_result") function. (Background on SQLAlchemy 2.0
    at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  prefs: []
  type: TYPE_NORMAL
- en: Given an iterator returned by a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    of the same structure as this one, return an identical iterator of results, with
    all mapped instances merged into the session using [`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge"). This is an optimized method which will merge
    all mapped instances, preserving the structure of the result rows and unmapped
    columns with less method overhead than that of calling [`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") explicitly for each value.
  prefs: []
  type: TYPE_NORMAL
- en: The structure of the results is determined based on the column list of this
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") - if these do not correspond,
    unchecked errors will occur.
  prefs: []
  type: TYPE_NORMAL
- en: The ‘load’ argument is the same as that of [`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge").
  prefs: []
  type: TYPE_NORMAL
- en: For an example of how [`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") is used, see the source code for the example
    [Dogpile Caching](../examples.html#examples-caching), where [`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") is used to efficiently restore state from
    a cache back into a target [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Apply an `OFFSET` to the query and return the newly resulting `Query`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.offset()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Return exactly one result or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows. Raises
    `sqlalchemy.orm.exc.MultipleResultsFound` if multiple object identities are returned,
    or if multiple rows are returned for a query that returns only scalar values as
    opposed to full identity-mapped entities.
  prefs: []
  type: TYPE_NORMAL
- en: Calling [`one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one") results
    in an execution of the underlying query.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.one()`](../../core/connections.html#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")
    - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.scalar_one()`](../../core/connections.html#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Return at most one result or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Returns `None` if the query selects no rows. Raises `sqlalchemy.orm.exc.MultipleResultsFound`
    if multiple object identities are returned, or if multiple rows are returned for
    a query that returns only scalar values as opposed to full identity-mapped entities.
  prefs: []
  type: TYPE_NORMAL
- en: Calling [`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")
    results in an execution of the underlying query.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.one_or_none()`](../../core/connections.html#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.scalar_one_or_none()`](../../core/connections.html#sqlalchemy.engine.Result.scalar_one_or_none
    "sqlalchemy.engine.Result.scalar_one_or_none") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: When set to True, the query results will always be a [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") object.
  prefs: []
  type: TYPE_NORMAL
- en: This can change a query that normally returns a single entity as a scalar to
    return a [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    result in all cases.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.tuples()`](#sqlalchemy.orm.Query.tuples "sqlalchemy.orm.Query.tuples")
    - returns tuples, but also at the typing level will type results as `Tuple`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.is_single_entity()`](#sqlalchemy.orm.Query.is_single_entity "sqlalchemy.orm.Query.is_single_entity")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object,
    applying the given list of mapper options.
  prefs: []
  type: TYPE_NORMAL
- en: Most supplied options regard changing how column- and relationship-mapped attributes
    are loaded.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Column Loading Options](columns.html#loading-columns)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Relationship Loading with Loader Options](relationships.html#relationship-loader-options)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Apply one or more ORDER BY criteria to the query and return the newly resulting
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling this method multiple times is equivalent to calling it once with all
    the clauses concatenated. All existing ORDER BY criteria may be cancelled by passing
    `None` by itself. New ORDER BY criteria may then be added by invoking [`Query.order_by()`](#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") again, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: 'These sections describe ORDER BY in terms of [2.0 style](../../glossary.html#term-2.0-style)
    invocation but apply to [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORDER BY](../../tutorial/data_select.html#tutorial-order-by) - in the [SQLAlchemy
    Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ordering or Grouping by a Label](../../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.order_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Create a left outer join against this `Query` object’s criterion and apply generatively,
    returning the newly resulting `Query`.
  prefs: []
  type: TYPE_NORMAL
- en: Usage is the same as the `join()` method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.outerjoin()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Add values for bind parameters which may have been specified in filter().
  prefs: []
  type: TYPE_NORMAL
- en: Parameters may be specified using **kwargs, or optionally a single dictionary
    as the first positional argument. The reason for both is that **kwargs is convenient,
    however some parameter dictionaries contain unicode keys in which case **kwargs
    cannot be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") that will expire
    and refresh all instances as they are loaded, or reused from the current [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: As of SQLAlchemy 1.4, the [`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") method is equivalent to using the `populate_existing`
    execution option at the ORM level. See the section [Populate Existing](api.html#orm-queryguide-populate-existing)
    for further background on this option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasPrefixes.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with") *method of* [`HasPrefixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes")'
  prefs: []
  type: TYPE_NORMAL
- en: Add one or more expressions following the statement keyword, i.e. SELECT, INSERT,
    UPDATE, or DELETE. Generative.
  prefs: []
  type: TYPE_NORMAL
- en: This is used to support backend-specific prefix keywords such as those provided
    by MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Multiple prefixes can be specified by multiple calls to [`HasPrefixes.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*prefixes` – textual or [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the INSERT, UPDATE, or DELETE keyword.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – optional string dialect name which will limit rendering of this
    prefix to only that dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query"), where
    the “join point” has been reset back to the base FROM entities of the query.
  prefs: []
  type: TYPE_NORMAL
- en: This method is usually used in conjunction with the `aliased=True` feature of
    the [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join") method.
    See the example in [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    for how this is used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Return the first element of the first result or None if no rows present. If
    multiple rows are returned, raises MultipleResultsFound.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: This results in an execution of the underlying query.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.scalar()`](../../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), converted to a scalar subquery.
  prefs: []
  type: TYPE_NORMAL
- en: Analogous to [`SelectBase.scalar_subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`Query.scalar_subquery()`](#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery") method replaces the [`Query.as_scalar()`](#sqlalchemy.orm.Query.as_scalar
    "sqlalchemy.orm.Query.as_scalar") method.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.scalar_subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.scalar_subquery
    "sqlalchemy.sql.expression.Select.scalar_subquery") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Set the FROM clause of this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.select_from()`](#sqlalchemy.orm.Query.select_from "sqlalchemy.orm.Query.select_from")
    is often used in conjunction with [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") in order to control which entity is selected from
    on the “left” side of the join.'
  prefs: []
  type: TYPE_NORMAL
- en: The entity or selectable object here effectively replaces the “left edge” of
    any calls to [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join"),
    when no joinpoint is otherwise established - usually, the default “join point”
    is the leftmost entity in the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object’s list of entities to be selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Which produces SQL equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***from_obj** – collection of one or more entities to apply to the FROM clause.
    Entities can be mapped classes, [`AliasedClass`](api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") objects, [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects as well as core [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") elements like subqueries.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")'
  prefs: []
  type: TYPE_NORMAL
- en: '`Query.select_entity_from()`'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object emitted by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: 'Used for [`inspect()`](../../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    compatibility, this is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Apply column labels to the return value of Query.statement.
  prefs: []
  type: TYPE_NORMAL
- en: Indicates that this Query’s statement accessor should return a SELECT statement
    that applies labels to all columns in the form <tablename>_<columnname>; this
    is commonly used to disambiguate columns from multiple tables which have the same
    name.
  prefs: []
  type: TYPE_NORMAL
- en: When the Query actually issues SQL to load rows, it always uses column labeling.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`Query.set_label_style()`](#sqlalchemy.orm.Query.set_label_style "sqlalchemy.orm.Query.set_label_style")
    method *only* applies the output of [`Query.statement`](#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement"), and *not* to any of the result-row invoking
    systems of [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") itself, e.g.
    [`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first"), [`Query.all()`](#sqlalchemy.orm.Query.all
    "sqlalchemy.orm.Query.all"), etc. To execute a query using [`Query.set_label_style()`](#sqlalchemy.orm.Query.set_label_style
    "sqlalchemy.orm.Query.set_label_style"), invoke the [`Query.statement`](#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") using [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.set_label_style()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Computes the “slice” of the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    represented by the given indices and returns the resulting [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: The start and stop indices behave like the argument to Python’s built-in `range()`
    function. This method provides an alternative to using `LIMIT`/`OFFSET` to get
    a slice of the query.
  prefs: []
  type: TYPE_NORMAL
- en: For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: renders as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.limit()`](#sqlalchemy.orm.Query.limit "sqlalchemy.orm.Query.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.offset()`](#sqlalchemy.orm.Query.offset "sqlalchemy.orm.Query.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.slice()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.slice
    "sqlalchemy.sql.expression.Select.slice") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: The full SELECT statement represented by this Query.
  prefs: []
  type: TYPE_NORMAL
- en: The statement by default will not have disambiguating labels applied to the
    construct unless with_labels(True) is called first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), embedded within an [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias").
  prefs: []
  type: TYPE_NORMAL
- en: Eager JOIN generation within the query is disabled.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – string name to be assigned as the alias; this is passed through to
    [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"). If `None`, a name will be deterministically
    generated at compile time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_labels` – if True, [`with_labels()`](#sqlalchemy.orm.Query.with_labels
    "sqlalchemy.orm.Query.with_labels") will be called on the [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") first to apply table-qualified labels to all columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reduce_columns` – if True, [`Select.reduce_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.reduce_columns
    "sqlalchemy.sql.expression.Select.reduce_columns") will be called on the resulting
    [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, to remove same-named columns where one also refers to the other via
    foreign key or WHERE clause equivalence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasSuffixes.suffix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with") *method of* [`HasSuffixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes")'
  prefs: []
  type: TYPE_NORMAL
- en: Add one or more expressions following the statement as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: This is used to support backend-specific suffix keywords on certain constructs.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Multiple suffixes can be specified by multiple calls to [`HasSuffixes.suffix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*suffixes` – textual or [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the target clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – Optional string dialect name which will limit rendering of this
    suffix to only that dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: return a tuple-typed form of this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: This method invokes the [`Query.only_return_tuples()`](#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples") method with a value of `True`, which
    by itself ensures that this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    will always return [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, even if the query is made against a single entity. It then also at the
    typing level will return a “typed” query, if possible, that will type result rows
    as `Tuple` objects with typed elements.
  prefs: []
  type: TYPE_NORMAL
- en: This method can be compared to the [`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") method, which returns “self”, but from a typing
    perspective returns an object that will yield typed `Tuple` objects for results.
    Typing takes effect only if this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object is a typed query object already.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Produce a UNION of this Query against one or more queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'The method accepts multiple Query objects so as to control the level of nesting.
    A series of `union()` calls such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'will nest on each `union()`, and produces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Whereas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'produces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Note that many database backends do not allow ORDER BY to be rendered on a query
    called within UNION, EXCEPT, etc. To disable all ORDER BY clauses including those
    configured on mappers, issue `query.order_by(None)` - the resulting [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object will not render ORDER BY within its SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.union()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.union
    "sqlalchemy.sql.expression.Select.union") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Produce a UNION ALL of this Query against one or more queries.
  prefs: []
  type: TYPE_NORMAL
- en: Works the same way as `Query.union()`. See that method for usage examples.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.union_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.union_all
    "sqlalchemy.sql.expression.Select.union_all") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Perform an UPDATE with an arbitrary WHERE clause.
  prefs: []
  type: TYPE_NORMAL
- en: Updates rows matched by this query in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: See the section [ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)
    for important caveats and warnings, including limitations when using arbitrary
    UPDATE and DELETE with mapper inheritance configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`values` – a dictionary with attributes names, or alternatively mapped attributes
    or SQL expressions, as keys, and literal values or sql expressions as values.
    If [parameter-ordered mode](../../tutorial/data_update.html#tutorial-parameter-ordered-updates)
    is desired, the values can be passed as a list of 2-tuples; this requires that
    the [`update.preserve_parameter_order`](../../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update") flag is passed to the [`Query.update.update_args`](#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update") dictionary as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`synchronize_session` – chooses the strategy to update the attributes on objects
    in the session. See the section [ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)
    for a discussion of these strategies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update_args` – Optional dictionary, if present will be passed to the underlying
    [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    construct as the `**kw` for the object. May be used to pass dialect-specific arguments
    such as `mysql_limit`, as well as other special arguments such as [`update.preserve_parameter_order`](../../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the count of rows matched as returned by the database’s “row count” feature.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Return a scalar result corresponding to the given column expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: [`Query.value()`](#sqlalchemy.orm.Query.value
    "sqlalchemy.orm.Query.value") is deprecated and will be removed in a future release.
    Please use [`Query.with_entities()`](#sqlalchemy.orm.Query.with_entities "sqlalchemy.orm.Query.with_entities")
    in combination with [`Query.scalar()`](#sqlalchemy.orm.Query.scalar "sqlalchemy.orm.Query.scalar")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Return an iterator yielding result tuples corresponding to the given list of
    columns
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: [`Query.values()`](#sqlalchemy.orm.Query.values
    "sqlalchemy.orm.Query.values") is deprecated and will be removed in a future release.
    Please use [`Query.with_entities()`](#sqlalchemy.orm.Query.with_entities "sqlalchemy.orm.Query.with_entities")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for [`Query.filter()`](#sqlalchemy.orm.Query.filter "sqlalchemy.orm.Query.filter").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.where()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: A readonly attribute which returns the current WHERE criterion for this Query.
  prefs: []
  type: TYPE_NORMAL
- en: This returned value is a SQL expression construct, or `None` if no criterion
    has been established.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.whereclause`](../../core/selectable.html#sqlalchemy.sql.expression.Select.whereclause
    "sqlalchemy.sql.expression.Select.whereclause") - v2 equivalent property.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") replacing
    the SELECT list with the given entities.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.with_only_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") with the
    specified options for the `FOR UPDATE` clause.
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of this method is identical to that of [`GenerativeSelect.with_for_update()`](../../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update"). When called with
    no arguments, the resulting `SELECT` statement will have a `FOR UPDATE` clause
    appended. When additional arguments are specified, backend-specific options such
    as `FOR UPDATE NOWAIT` or `LOCK IN SHARE MODE` can take effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query on a PostgreSQL backend will render like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Using `with_for_update` in the context of eager loading relationships is not
    officially supported or recommended by SQLAlchemy and may not work with certain
    queries on various database backends. When `with_for_update` is successfully used
    with a query that involves [`joinedload()`](relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload"), SQLAlchemy will attempt to emit SQL that locks all
    involved tables.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is generally a good idea to combine the use of the [`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") method when using the [`Query.with_for_update()`](#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update") method. The purpose of [`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") is to force all the data read from the
    SELECT to be populated into the ORM objects returned, even if these objects are
    already in the [identity map](../../glossary.html#term-identity-map).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.with_for_update()`](../../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") - Core level method
    with full argument and behavioral description.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing "sqlalchemy.orm.Query.populate_existing")
    - overwrites attributes of objects already loaded in the identity map.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasHints.with_hint()` *method of* `HasHints`'
  prefs: []
  type: TYPE_NORMAL
- en: Add an indexing or other executional context hint for the given selectable to
    this [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    or other selectable object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The text of the hint is rendered in the appropriate location for the database
    backend in use, relative to the given [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") passed as the `selectable` argument. The dialect
    implementation typically uses Python string substitution syntax with the token
    `%(name)s` to render the name of the table or alias. E.g. when using Oracle, the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'Would render SQL as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'The `dialect_name` option will limit the rendering of a particular hint to
    a particular backend. Such as, to add hints for both Oracle and Sybase simultaneously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.with_statement_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 2.0: The [`Query.with_labels()`](#sqlalchemy.orm.Query.with_labels
    "sqlalchemy.orm.Query.with_labels") and [`Query.apply_labels()`](#sqlalchemy.orm.Query.apply_labels
    "sqlalchemy.orm.Query.apply_labels") method is considered legacy as of the 1.x
    series of SQLAlchemy and becomes a legacy construct in 2.0\. Use set_label_style(LABEL_STYLE_TABLENAME_PLUS_COL)
    instead. (Background on SQLAlchemy 2.0 at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Add filtering criterion that relates the given instance to a child object or
    collection, using its attribute state as well as an established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: The [`Query.with_parent()`](#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent") method is considered legacy as of the 1.x
    series of SQLAlchemy and becomes a legacy construct in 2.0\. Use the [`with_parent()`](api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent") standalone construct. (Background on SQLAlchemy
    2.0 at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  prefs: []
  type: TYPE_NORMAL
- en: The method uses the [`with_parent()`](api.html#sqlalchemy.orm.with_parent "sqlalchemy.orm.with_parent")
    function to generate the clause, the result of which is passed to [`Query.filter()`](#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter").
  prefs: []
  type: TYPE_NORMAL
- en: Parameters are the same as [`with_parent()`](api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent"), with the exception that the given property can
    be None, in which case a search is performed against this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object’s target mapper.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – An instance which has some [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`property` – Class bound attribute which indicates what relationship from the
    instance should be used to reconcile the parent/child relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`from_entity` – Entity in which to consider as the left side. This defaults
    to the “zero” entity of the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") that will use
    the given [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: 'While the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object is
    normally instantiated using the [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") method, it is legal to build the [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") directly without necessarily using a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). Such a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, or any [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") already
    associated with a different [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), can produce a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object associated with a target session using this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasHints.with_statement_hint()` *method of* `HasHints`'
  prefs: []
  type: TYPE_NORMAL
- en: Add a statement hint to this [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") or other selectable object.
  prefs: []
  type: TYPE_NORMAL
- en: This method is similar to [`Select.with_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") except that it does not require
    an individual table, and instead applies to the statement as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: Hints here are specific to the backend database and may include directives such
    as isolation levels, file directives, fetch directives, etc.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.with_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.prefix_with
    "sqlalchemy.sql.expression.Select.prefix_with") - generic SELECT prefixing which
    also can suit some database-specific HINT syntaxes such as MySQL optimizer hints'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object
    transformed by the given function.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: This allows ad-hoc recipes to be created for [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Yield only `count` rows at a time.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this method is when fetching very large result sets (> 10K rows),
    to batch results in sub-collections and yield them out partially, so that the
    Python interpreter doesn’t need to declare very large areas of memory which is
    both time consuming and leads to excessive memory use. The performance from fetching
    hundreds of thousands of rows can often double when a suitable yield-per setting
    (e.g. approximately 1000) is used, even with DBAPIs that buffer rows (which are
    most).
  prefs: []
  type: TYPE_NORMAL
- en: As of SQLAlchemy 1.4, the [`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") method is equivalent to using the `yield_per`
    execution option at the ORM level. See the section [Fetching Large Result Sets
    with Yield Per](api.html#orm-queryguide-yield-per) for further background on this
    option.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Fetching Large Result Sets with Yield Per](api.html#orm-queryguide-yield-per)'
  prefs: []
  type: TYPE_NORMAL
- en: ORM-Specific Query Constructs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section has moved to [Additional ORM API Constructs](api.html#queryguide-additional).
  prefs: []
  type: TYPE_NORMAL
- en: The Query Object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") is produced in terms
    of a given [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    using the [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: Following is the full interface for the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Query](#sqlalchemy.orm.Query) | ORM-level SQL construction object. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: ORM-level SQL construction object.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: The ORM [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object is a
    legacy construct as of SQLAlchemy 2.0\. See the notes at the top of [Legacy Query
    API](#) for an overview, including links to migration documentation.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") objects are normally
    initially generated using the [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") method of [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), and in less common cases by instantiating the [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") directly and associating with a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") using the [`Query.with_session()`](#sqlalchemy.orm.Query.with_session
    "sqlalchemy.orm.Query.with_session") method.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.orm.Query.__init__), [add_column()](#sqlalchemy.orm.Query.add_column),
    [add_columns()](#sqlalchemy.orm.Query.add_columns), [add_entity()](#sqlalchemy.orm.Query.add_entity),
    [all()](#sqlalchemy.orm.Query.all), [apply_labels()](#sqlalchemy.orm.Query.apply_labels),
    [as_scalar()](#sqlalchemy.orm.Query.as_scalar), [autoflush()](#sqlalchemy.orm.Query.autoflush),
    [column_descriptions](#sqlalchemy.orm.Query.column_descriptions), [correlate()](#sqlalchemy.orm.Query.correlate),
    [count()](#sqlalchemy.orm.Query.count), [cte()](#sqlalchemy.orm.Query.cte), [delete()](#sqlalchemy.orm.Query.delete),
    [distinct()](#sqlalchemy.orm.Query.distinct), [enable_assertions()](#sqlalchemy.orm.Query.enable_assertions),
    [enable_eagerloads()](#sqlalchemy.orm.Query.enable_eagerloads), [except_()](#sqlalchemy.orm.Query.except_),
    [except_all()](#sqlalchemy.orm.Query.except_all), [execution_options()](#sqlalchemy.orm.Query.execution_options),
    [exists()](#sqlalchemy.orm.Query.exists), [filter()](#sqlalchemy.orm.Query.filter),
    [filter_by()](#sqlalchemy.orm.Query.filter_by), [first()](#sqlalchemy.orm.Query.first),
    [from_statement()](#sqlalchemy.orm.Query.from_statement), [get()](#sqlalchemy.orm.Query.get),
    [get_children()](#sqlalchemy.orm.Query.get_children), [get_execution_options()](#sqlalchemy.orm.Query.get_execution_options),
    [get_label_style](#sqlalchemy.orm.Query.get_label_style), [group_by()](#sqlalchemy.orm.Query.group_by),
    [having()](#sqlalchemy.orm.Query.having), [instances()](#sqlalchemy.orm.Query.instances),
    [intersect()](#sqlalchemy.orm.Query.intersect), [intersect_all()](#sqlalchemy.orm.Query.intersect_all),
    [is_single_entity](#sqlalchemy.orm.Query.is_single_entity), [join()](#sqlalchemy.orm.Query.join),
    [label()](#sqlalchemy.orm.Query.label), [lazy_loaded_from](#sqlalchemy.orm.Query.lazy_loaded_from),
    [limit()](#sqlalchemy.orm.Query.limit), [merge_result()](#sqlalchemy.orm.Query.merge_result),
    [offset()](#sqlalchemy.orm.Query.offset), [one()](#sqlalchemy.orm.Query.one),
    [one_or_none()](#sqlalchemy.orm.Query.one_or_none), [only_return_tuples()](#sqlalchemy.orm.Query.only_return_tuples),
    [options()](#sqlalchemy.orm.Query.options), [order_by()](#sqlalchemy.orm.Query.order_by),
    [outerjoin()](#sqlalchemy.orm.Query.outerjoin), [params()](#sqlalchemy.orm.Query.params),
    [populate_existing()](#sqlalchemy.orm.Query.populate_existing), [prefix_with()](#sqlalchemy.orm.Query.prefix_with),
    [reset_joinpoint()](#sqlalchemy.orm.Query.reset_joinpoint), [scalar()](#sqlalchemy.orm.Query.scalar),
    [scalar_subquery()](#sqlalchemy.orm.Query.scalar_subquery), [select_from()](#sqlalchemy.orm.Query.select_from),
    [selectable](#sqlalchemy.orm.Query.selectable), [set_label_style()](#sqlalchemy.orm.Query.set_label_style),
    [slice()](#sqlalchemy.orm.Query.slice), [statement](#sqlalchemy.orm.Query.statement),
    [subquery()](#sqlalchemy.orm.Query.subquery), [suffix_with()](#sqlalchemy.orm.Query.suffix_with),
    [tuples()](#sqlalchemy.orm.Query.tuples), [union()](#sqlalchemy.orm.Query.union),
    [union_all()](#sqlalchemy.orm.Query.union_all), [update()](#sqlalchemy.orm.Query.update),
    [value()](#sqlalchemy.orm.Query.value), [values()](#sqlalchemy.orm.Query.values),
    [where()](#sqlalchemy.orm.Query.where), [whereclause](#sqlalchemy.orm.Query.whereclause),
    [with_entities()](#sqlalchemy.orm.Query.with_entities), [with_for_update()](#sqlalchemy.orm.Query.with_for_update),
    [with_hint()](#sqlalchemy.orm.Query.with_hint), [with_labels()](#sqlalchemy.orm.Query.with_labels),
    [with_parent()](#sqlalchemy.orm.Query.with_parent), [with_session()](#sqlalchemy.orm.Query.with_session),
    [with_statement_hint()](#sqlalchemy.orm.Query.with_statement_hint), [with_transformation()](#sqlalchemy.orm.Query.with_transformation),
    [yield_per()](#sqlalchemy.orm.Query.yield_per)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    (`sqlalchemy.sql.expression._SelectFromElements`, `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    [`sqlalchemy.sql.expression.HasPrefixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), [`sqlalchemy.sql.expression.HasSuffixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes"), `sqlalchemy.sql.expression.HasHints`,
    `sqlalchemy.event.registry.EventTarget`, [`sqlalchemy.log.Identified`](../../core/internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified"), `sqlalchemy.sql.expression.Generative`, [`sqlalchemy.sql.expression.Executable`](../../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), `typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: Construct a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: 'The above is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`entities` – a sequence of entities and/or SQL expressions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`session` – a [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    with which the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") will be
    associated. Optional; a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    can be associated with a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") generatively via the [`Query.with_session()`](#sqlalchemy.orm.Query.with_session
    "sqlalchemy.orm.Query.with_session") method as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query "sqlalchemy.orm.Session.query")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.with_session()`](#sqlalchemy.orm.Query.with_session "sqlalchemy.orm.Query.with_session")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: Add a column expression to the list of result columns to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: [`Query.add_column()`](#sqlalchemy.orm.Query.add_column
    "sqlalchemy.orm.Query.add_column") is deprecated and will be removed in a future
    release. Please use [`Query.add_columns()`](#sqlalchemy.orm.Query.add_columns
    "sqlalchemy.orm.Query.add_columns")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Add one or more column expressions to the list of result columns to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.add_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: add a mapped entity to the list of result columns to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.add_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: Return the results represented by this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    as a list.
  prefs: []
  type: TYPE_NORMAL
- en: This results in an execution of the underlying SQL statement.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object, when asked
    to return either a sequence or iterator that consists of full ORM-mapped entities,
    will **deduplicate entries based on primary key**. See the FAQ for more details.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[My Query does not return the same number of objects as query.count() tells
    me - why?](../../faq/sessions.html#faq-query-deduplicating)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.all()`](../../core/connections.html#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 2.0: The [`Query.with_labels()`](#sqlalchemy.orm.Query.with_labels
    "sqlalchemy.orm.Query.with_labels") and [`Query.apply_labels()`](#sqlalchemy.orm.Query.apply_labels
    "sqlalchemy.orm.Query.apply_labels") method is considered legacy as of the 1.x
    series of SQLAlchemy and becomes a legacy construct in 2.0\. Use set_label_style(LABEL_STYLE_TABLENAME_PLUS_COL)
    instead. (Background on SQLAlchemy 2.0 at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), converted to a scalar subquery.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: The [`Query.as_scalar()`](#sqlalchemy.orm.Query.as_scalar
    "sqlalchemy.orm.Query.as_scalar") method is deprecated and will be removed in
    a future release. Please refer to [`Query.scalar_subquery()`](#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: Return a Query with a specific ‘autoflush’ setting.
  prefs: []
  type: TYPE_NORMAL
- en: As of SQLAlchemy 1.4, the [`Query.autoflush()`](#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush") method is equivalent to using the `autoflush`
    execution option at the ORM level. See the section [Autoflush](api.html#orm-queryguide-autoflush)
    for further background on this option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Return metadata about the columns which would be returned by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: 'Format is a list of dictionaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: 'This API is available using [2.0 style](../../glossary.html#term-2.0-style)
    queries as well, documented at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Inspecting entities and columns from ORM-enabled SELECT and DML statements](api.html#queryguide-inspection)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") construct which
    will correlate the given FROM clauses to that of an enclosing [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") or [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select").
  prefs: []
  type: TYPE_NORMAL
- en: The method here accepts mapped classes, [`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") constructs, and [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") constructs as arguments, which are resolved into expression
    constructs, in addition to appropriate expression constructs.
  prefs: []
  type: TYPE_NORMAL
- en: The correlation arguments are ultimately passed to [`Select.correlate()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") after coercion to expression constructs.
  prefs: []
  type: TYPE_NORMAL
- en: The correlation arguments take effect in such cases as when `Query.from_self()`
    is used, or when a subquery as returned by [`Query.subquery()`](#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") is embedded in another [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.correlate()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: Return a count of rows this the SQL formed by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") would return.
  prefs: []
  type: TYPE_NORMAL
- en: 'This generates the SQL for this Query as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: The above SQL returns a single row, which is the aggregate value of the count
    function; the [`Query.count()`](#sqlalchemy.orm.Query.count "sqlalchemy.orm.Query.count")
    method then returns that single integer value.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that the value returned by count() is **not the same
    as the number of ORM objects that this Query would return from a method such as
    the .all() method**. The [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, when asked to return full entities, will **deduplicate entries based on
    primary key**, meaning if the same primary key value would appear in the results
    more than once, only one object of that primary key would be present. This does
    not apply to a query that is against individual columns.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[My Query does not return the same number of objects as query.count() tells
    me - why?](../../faq/sessions.html#faq-query-deduplicating)'
  prefs: []
  type: TYPE_NORMAL
- en: 'For fine grained control over specific columns to count, to skip the usage
    of a subquery or otherwise control of the FROM clause, or to use other aggregate
    functions, use [`expression.func`](../../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") expressions in conjunction with [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"), i.e.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[2.0 Migration - ORM Usage](../../changelog/migration_20.html#migration-20-query-usage)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") represented as a common table expression (CTE).
  prefs: []
  type: TYPE_NORMAL
- en: Parameters and usage are the same as those of the [`SelectBase.cte()`](../../core/selectable.html#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte") method; see that method for further
    details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the [PostgreSQL WITH RECURSIVE example](https://www.postgresql.org/docs/current/static/queries-with.html).
    Note that, in this example, the `included_parts` cte and the `incl_alias` alias
    of it are Core selectables, which means the columns are accessed via the `.c.`
    attribute. The `parts_alias` object is an [`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") instance of the `Part` entity, so column-mapped attributes
    are available directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.cte()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.cte
    "sqlalchemy.sql.expression.Select.cte") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: Perform a DELETE with an arbitrary WHERE clause.
  prefs: []
  type: TYPE_NORMAL
- en: Deletes rows matched by this query from the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: See the section [ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)
    for important caveats and warnings, including limitations when using bulk UPDATE
    and DELETE with mapper inheritance configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**synchronize_session** – chooses the strategy to update the attributes on
    objects in the session. See the section [ORM-Enabled INSERT, UPDATE, and DELETE
    statements](dml.html#orm-expression-update-delete) for a discussion of these strategies.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the count of rows matched as returned by the database’s “row count” feature.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: Apply a `DISTINCT` to the query and return the newly resulting `Query`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The ORM-level [`distinct()`](#sqlalchemy.orm.Query.distinct "sqlalchemy.orm.Query.distinct")
    call includes logic that will automatically add columns from the ORDER BY of the
    query to the columns clause of the SELECT statement, to satisfy the common need
    of the database backend that ORDER BY columns be part of the SELECT list when
    DISTINCT is used. These columns *are not* added to the list of columns actually
    fetched by the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query"), however,
    so would not affect results. The columns are passed through when using the [`Query.statement`](#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") accessor, however.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: This logic is deprecated and will be removed
    in SQLAlchemy 2.0\. See [Using DISTINCT with additional columns, but only select
    the entity](../../changelog/migration_20.html#migration-20-query-distinct) for
    a description of this use case in 2.0.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.distinct()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***expr** –'
  prefs: []
  type: TYPE_NORMAL
- en: optional column expressions. When present, the PostgreSQL dialect will render
    a `DISTINCT ON (<expressions>)` construct.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: Using *expr in other dialects is deprecated and
    will raise [`CompileError`](../../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") in a future version.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: Control whether assertions are generated.
  prefs: []
  type: TYPE_NORMAL
- en: When set to False, the returned Query will not assert its state before certain
    operations, including that LIMIT/OFFSET has not been applied when filter() is
    called, no criterion exists when get() is called, and no “from_statement()” exists
    when filter()/order_by()/group_by() etc. is called. This more permissive mode
    is used by custom Query subclasses to specify criterion or other modifiers outside
    of the usual usage patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Care should be taken to ensure that the usage pattern is even possible. A statement
    applied by from_statement() will override any criterion set by filter() or order_by(),
    for example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Control whether or not eager joins and subqueries are rendered.
  prefs: []
  type: TYPE_NORMAL
- en: When set to False, the returned Query will not render eager joins regardless
    of [`joinedload()`](relationships.html#sqlalchemy.orm.joinedload "sqlalchemy.orm.joinedload"),
    [`subqueryload()`](relationships.html#sqlalchemy.orm.subqueryload "sqlalchemy.orm.subqueryload")
    options or mapper-level `lazy='joined'`/`lazy='subquery'` configurations.
  prefs: []
  type: TYPE_NORMAL
- en: This is used primarily when nesting the Query’s statement into a subquery or
    other selectable, or when using [`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Produce an EXCEPT of this Query against one or more queries.
  prefs: []
  type: TYPE_NORMAL
- en: Works the same way as `Query.union()`. See that method for usage examples.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.except_()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.except_
    "sqlalchemy.sql.expression.Select.except_") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: Produce an EXCEPT ALL of this Query against one or more queries.
  prefs: []
  type: TYPE_NORMAL
- en: Works the same way as `Query.union()`. See that method for usage examples.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.except_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.except_all
    "sqlalchemy.sql.expression.Select.except_all") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Set non-SQL options which take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Options allowed here include all of those accepted by [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), as well as a series of ORM
    specific options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`populate_existing=True` - equivalent to using [`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '`autoflush=True|False` - equivalent to using [`Query.autoflush()`](#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush")'
  prefs: []
  type: TYPE_NORMAL
- en: '`yield_per=<value>` - equivalent to using [`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the `stream_results` execution option is enabled automatically if
    the `Query.yield_per()` method or execution option is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: - added ORM options to [`Query.execution_options()`](#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: The execution options may also be specified on a per execution basis when using
    [2.0 style](../../glossary.html#term-2.0-style) queries via the [`Session.execution_options`](../session_api.html#sqlalchemy.orm.Session.params.execution_options
    "sqlalchemy.orm.Session") parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") parameter should not be used
    at the level of individual ORM statement executions, as the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will not track objects from different schema translate
    maps within a single session. For multiple schema translate maps within the scope
    of a single [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    see [Horizontal Sharding](../examples.html#examples-sharding).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.get_execution_options()`](#sqlalchemy.orm.Query.get_execution_options
    "sqlalchemy.orm.Query.get_execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.execution_options
    "sqlalchemy.sql.expression.Select.execution_options") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: A convenience method that turns a query into an EXISTS subquery of the form
    EXISTS (SELECT 1 FROM … WHERE …).
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: 'Producing SQL similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: 'The EXISTS construct is usually used in the WHERE clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that some databases such as SQL Server don’t allow an EXISTS expression
    to be present in the columns clause of a SELECT. To select a simple boolean value
    based on the exists as a WHERE, use [`literal()`](../../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.exists()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.exists
    "sqlalchemy.sql.expression.Select.exists") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: Apply the given filtering criterion to a copy of this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), using SQL expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 'Multiple criteria may be specified as comma separated; the effect is that they
    will be joined together using the [`and_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: The criterion is any SQL expression object applicable to the WHERE clause of
    a select. String expressions are coerced into SQL expression constructs via the
    [`text()`](../../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    construct.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.filter_by()`](#sqlalchemy.orm.Query.filter_by "sqlalchemy.orm.Query.filter_by")
    - filter on keyword expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.where()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: Apply the given filtering criterion to a copy of this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), using keyword expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: 'Multiple criteria may be specified as comma separated; the effect is that they
    will be joined together using the [`and_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: The keyword expressions are extracted from the primary entity of the query,
    or the last entity that was the target of a call to [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.filter()`](#sqlalchemy.orm.Query.filter "sqlalchemy.orm.Query.filter")
    - filter on SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.filter_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.filter_by
    "sqlalchemy.sql.expression.Select.filter_by") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: Return the first result of this `Query` or None if the result doesn’t contain
    any row.
  prefs: []
  type: TYPE_NORMAL
- en: first() applies a limit of one within the generated SQL, so that only one primary
    entity row is generated on the server side (note this may consist of multiple
    result rows if join-loaded collections are present).
  prefs: []
  type: TYPE_NORMAL
- en: Calling [`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")
    results in an execution of the underlying query.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.first()`](../../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: Execute the given SELECT statement and return results.
  prefs: []
  type: TYPE_NORMAL
- en: This method bypasses all internal statement compilation, and the statement is
    executed without modification.
  prefs: []
  type: TYPE_NORMAL
- en: The statement is typically either a [`text()`](../../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") or [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, and should return the set of columns
    appropriate to the entity class represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.from_statement()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: The [`Query.get()`](#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") method is considered legacy as of the 1.x series of
    SQLAlchemy and becomes a legacy construct in 2.0\. The method is now available
    as [`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    (Background on SQLAlchemy 2.0 at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") is special
    in that it provides direct access to the identity map of the owning [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). If the given primary key identifier is present in the
    local identity map, the object is returned directly from this collection and no
    SQL is emitted, unless the object has been marked fully expired. If not present,
    a SELECT is performed in order to locate the object.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") also
    will perform a check if the object is present in the identity map and marked as
    expired - a SELECT is emitted to refresh the object as well as to ensure that
    the row is still present. If not, [`ObjectDeletedError`](../exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") is raised.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") is only
    used to return a single mapped instance, not multiple instances or individual
    column constructs, and strictly on a single primary key value. The originating
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") must be constructed in
    this way, i.e. against a single mapped entity, with no additional filtering criterion.
    Loading options via [`Query.options()`](#sqlalchemy.orm.Query.options "sqlalchemy.orm.Query.options")
    may be applied however, and will be used if the object is not yet locally present.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ident** –'
  prefs: []
  type: TYPE_NORMAL
- en: A scalar, tuple, or dictionary representing the primary key. For a composite
    (e.g. multiple column) primary key, a tuple or dictionary should be passed.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a single-column primary key, the scalar calling form is typically the most
    expedient. If the primary key of a row is the value “5”, the call looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: 'The tuple form contains primary key values typically in the order in which
    they correspond to the mapped [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object’s primary key columns, or if the [`Mapper.primary_key`](../mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") configuration parameter were used, in the order used
    for that parameter. For example, if the primary key of a row is represented by
    the integer digits “5, 10” the call would look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: 'The dictionary form should include as keys the mapped attribute names corresponding
    to each element of the primary key. If the mapped class has the attributes `id`,
    `version_id` as the attributes which store the object’s primary key value, the
    call would look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.3: the [`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    method now optionally accepts a dictionary of attribute names to values in order
    to indicate a primary key identifier.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The object instance, or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  prefs: []
  type: TYPE_NORMAL
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  prefs: []
  type: TYPE_NORMAL
- en: This is used for visit traversal.
  prefs: []
  type: TYPE_NORMAL
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: Get the non-SQL options which will take effect during execution.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.execution_options()`](#sqlalchemy.orm.Query.execution_options "sqlalchemy.orm.Query.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.get_execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.get_execution_options
    "sqlalchemy.sql.expression.Select.get_execution_options") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: Retrieve the current label style.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.get_label_style()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.get_label_style
    "sqlalchemy.sql.expression.Select.get_label_style") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: Apply one or more GROUP BY criterion to the query and return the newly resulting
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: All existing GROUP BY settings can be suppressed by passing `None` - this will
    suppress any GROUP BY configured on mappers as well.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: 'These sections describe GROUP BY in terms of [2.0 style](../../glossary.html#term-2.0-style)
    invocation but apply to [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Aggregate functions with GROUP BY / HAVING](../../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ordering or Grouping by a Label](../../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.group_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: Apply a HAVING criterion to the query and return the newly resulting [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.having()`](#sqlalchemy.orm.Query.having "sqlalchemy.orm.Query.having")
    is used in conjunction with [`Query.group_by()`](#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by").'
  prefs: []
  type: TYPE_NORMAL
- en: 'HAVING criterion makes it possible to use filters on aggregate functions like
    COUNT, SUM, AVG, MAX, and MIN, eg.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.having()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.having
    "sqlalchemy.sql.expression.Select.having") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: Return an ORM result given a [`CursorResult`](../../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") and [`QueryContext`](../internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext").
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: The [`Query.instances()`](#sqlalchemy.orm.Query.instances
    "sqlalchemy.orm.Query.instances") method is deprecated and will be removed in
    a future release. Use the Select.from_statement() method or aliased() construct
    in conjunction with Session.execute() instead.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: Produce an INTERSECT of this Query against one or more queries.
  prefs: []
  type: TYPE_NORMAL
- en: Works the same way as `Query.union()`. See that method for usage examples.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.intersect()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.intersect
    "sqlalchemy.sql.expression.Select.intersect") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: Produce an INTERSECT ALL of this Query against one or more queries.
  prefs: []
  type: TYPE_NORMAL
- en: Works the same way as `Query.union()`. See that method for usage examples.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.intersect_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.intersect_all
    "sqlalchemy.sql.expression.Select.intersect_all") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: Indicates if this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") returns
    tuples or single entities.
  prefs: []
  type: TYPE_NORMAL
- en: Returns True if this query returns a single entity for each instance in its
    result list, and False if this query returns a tuple of entities for each result.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.11.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.only_return_tuples()`](#sqlalchemy.orm.Query.only_return_tuples "sqlalchemy.orm.Query.only_return_tuples")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Create a SQL JOIN against this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object’s criterion and apply generatively, returning the newly resulting [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple Relationship Joins**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a mapping between two classes `User` and `Address`, with a relationship
    `User.addresses` representing a collection of `Address` objects associated with
    each `User`. The most common usage of [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") is to create a JOIN along this relationship, using
    the `User.addresses` attribute as an indicator for how this should occur:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: 'Where above, the call to [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    along `User.addresses` will result in SQL approximately equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: In the above example we refer to `User.addresses` as passed to [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") as the “on clause”, that is, it indicates how the
    “ON” portion of the JOIN should be constructed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To construct a chain of joins, multiple [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") calls may be used. The relationship-bound attribute
    implies both the left and right side of the join at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: as seen in the above example, **the order in which each call to the join() method
    occurs is important**. Query would not, for example, know how to join correctly
    if we were to specify `User`, then `Item`, then `Order`, in our chain of joins;
    in such a case, depending on the arguments passed, it may raise an error that
    it doesn’t know how to join, or it may produce invalid SQL in which case the database
    will raise an error. In correct practice, the [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method is invoked in such a way that lines up with
    how we would want the JOIN clauses in SQL to be rendered, and each call should
    represent a clear link from what precedes it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Joins to a Target Entity or Selectable**'
  prefs: []
  type: TYPE_NORMAL
- en: 'A second form of [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    allows any mapped entity or core selectable construct as a target. In this usage,
    [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join") will
    attempt to create a JOIN along the natural foreign key relationship between two
    entities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: In the above calling form, [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    is called upon to create the “on clause” automatically for us. This calling form
    will ultimately raise an error if either there are no foreign keys between the
    two entities, or if there are multiple foreign key linkages between the target
    entity and the entity or entities already present on the left side such that creating
    a join requires more information. Note that when indicating a join to a target
    without any ON clause, ORM configured relationships are not taken into account.
  prefs: []
  type: TYPE_NORMAL
- en: '**Joins to a Target with an ON Clause**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The third calling form allows both the target entity as well as the ON clause
    to be passed explicitly. A example that includes a SQL expression as the ON clause
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: 'The above form may also use a relationship-bound attribute as the ON clause
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: 'The above syntax can be useful for the case where we wish to join to an alias
    of a particular target entity. If we wanted to join to `Address` twice, it could
    be achieved using two aliases set up using the [`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: 'The relationship-bound calling form can also specify a target entity using
    the [`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") method; a query equivalent to the one
    above would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '**Augmenting Built-in ON Clauses**'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a substitute for providing a full custom ON condition for an existing relationship,
    the [`PropComparator.and_()`](../internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") function may be applied to a relationship
    attribute to augment additional criteria into the ON clause; the additional criteria
    will be combined with the default criteria using AND:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Joining to Tables and Subqueries**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The target of a join may also be any table or SELECT statement, which may be
    related to a target entity or not. Use the appropriate `.subquery()` method in
    order to make a subquery out of a query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: 'Joining to a subquery in terms of a specific relationship and/or target entity
    may be achieved by linking the subquery to the entity using [`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '**Controlling what to Join From**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In cases where the left side of the current state of [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") is not in line with what we want to join from, the [`Query.select_from()`](#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method may be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: 'Which will produce SQL similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*props` – Incoming arguments for [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join"), the props collection in modern use should be considered
    to be a one or two argument form, either as a single “target” entity or ORM attribute-bound
    relationship, or as a target entity plus an “on clause” which may be a SQL expression
    or ORM attribute-bound relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isouter=False` – If True, the join used will be a left outer join, just as
    if the [`Query.outerjoin()`](#sqlalchemy.orm.Query.outerjoin "sqlalchemy.orm.Query.outerjoin")
    method were called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full=False` – render FULL OUTER JOIN; implies `isouter`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), converted to a scalar subquery with a label of the given
    name.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.label()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.label
    "sqlalchemy.sql.expression.Select.label") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: An [`InstanceState`](../internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    that is using this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") for
    a lazy load operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: This attribute should be viewed via the [`ORMExecuteState.lazy_loaded_from`](../session_api.html#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from
    "sqlalchemy.orm.ORMExecuteState.lazy_loaded_from") attribute, within the context
    of the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ORMExecuteState.lazy_loaded_from`](../session_api.html#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from
    "sqlalchemy.orm.ORMExecuteState.lazy_loaded_from")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: Apply a `LIMIT` to the query and return the newly resulting `Query`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.limit()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: Merge a result into this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object’s Session.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: The [`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") method is considered legacy as of the 1.x
    series of SQLAlchemy and becomes a legacy construct in 2.0\. The method is superseded
    by the [`merge_frozen_result()`](../internals.html#sqlalchemy.orm.merge_frozen_result
    "sqlalchemy.orm.merge_frozen_result") function. (Background on SQLAlchemy 2.0
    at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  prefs: []
  type: TYPE_NORMAL
- en: Given an iterator returned by a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    of the same structure as this one, return an identical iterator of results, with
    all mapped instances merged into the session using [`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge"). This is an optimized method which will merge
    all mapped instances, preserving the structure of the result rows and unmapped
    columns with less method overhead than that of calling [`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") explicitly for each value.
  prefs: []
  type: TYPE_NORMAL
- en: The structure of the results is determined based on the column list of this
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") - if these do not correspond,
    unchecked errors will occur.
  prefs: []
  type: TYPE_NORMAL
- en: The ‘load’ argument is the same as that of [`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge").
  prefs: []
  type: TYPE_NORMAL
- en: For an example of how [`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") is used, see the source code for the example
    [Dogpile Caching](../examples.html#examples-caching), where [`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") is used to efficiently restore state from
    a cache back into a target [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: Apply an `OFFSET` to the query and return the newly resulting `Query`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.offset()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: Return exactly one result or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows. Raises
    `sqlalchemy.orm.exc.MultipleResultsFound` if multiple object identities are returned,
    or if multiple rows are returned for a query that returns only scalar values as
    opposed to full identity-mapped entities.
  prefs: []
  type: TYPE_NORMAL
- en: Calling [`one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one") results
    in an execution of the underlying query.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.one()`](../../core/connections.html#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")
    - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.scalar_one()`](../../core/connections.html#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: Return at most one result or raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Returns `None` if the query selects no rows. Raises `sqlalchemy.orm.exc.MultipleResultsFound`
    if multiple object identities are returned, or if multiple rows are returned for
    a query that returns only scalar values as opposed to full identity-mapped entities.
  prefs: []
  type: TYPE_NORMAL
- en: Calling [`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")
    results in an execution of the underlying query.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.one_or_none()`](../../core/connections.html#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.scalar_one_or_none()`](../../core/connections.html#sqlalchemy.engine.Result.scalar_one_or_none
    "sqlalchemy.engine.Result.scalar_one_or_none") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: When set to True, the query results will always be a [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") object.
  prefs: []
  type: TYPE_NORMAL
- en: This can change a query that normally returns a single entity as a scalar to
    return a [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    result in all cases.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.tuples()`](#sqlalchemy.orm.Query.tuples "sqlalchemy.orm.Query.tuples")
    - returns tuples, but also at the typing level will type results as `Tuple`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.is_single_entity()`](#sqlalchemy.orm.Query.is_single_entity "sqlalchemy.orm.Query.is_single_entity")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object,
    applying the given list of mapper options.
  prefs: []
  type: TYPE_NORMAL
- en: Most supplied options regard changing how column- and relationship-mapped attributes
    are loaded.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Column Loading Options](columns.html#loading-columns)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Relationship Loading with Loader Options](relationships.html#relationship-loader-options)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: Apply one or more ORDER BY criteria to the query and return the newly resulting
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling this method multiple times is equivalent to calling it once with all
    the clauses concatenated. All existing ORDER BY criteria may be cancelled by passing
    `None` by itself. New ORDER BY criteria may then be added by invoking [`Query.order_by()`](#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") again, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: 'These sections describe ORDER BY in terms of [2.0 style](../../glossary.html#term-2.0-style)
    invocation but apply to [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORDER BY](../../tutorial/data_select.html#tutorial-order-by) - in the [SQLAlchemy
    Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ordering or Grouping by a Label](../../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.order_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: Create a left outer join against this `Query` object’s criterion and apply generatively,
    returning the newly resulting `Query`.
  prefs: []
  type: TYPE_NORMAL
- en: Usage is the same as the `join()` method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.outerjoin()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: Add values for bind parameters which may have been specified in filter().
  prefs: []
  type: TYPE_NORMAL
- en: Parameters may be specified using **kwargs, or optionally a single dictionary
    as the first positional argument. The reason for both is that **kwargs is convenient,
    however some parameter dictionaries contain unicode keys in which case **kwargs
    cannot be used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") that will expire
    and refresh all instances as they are loaded, or reused from the current [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: As of SQLAlchemy 1.4, the [`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") method is equivalent to using the `populate_existing`
    execution option at the ORM level. See the section [Populate Existing](api.html#orm-queryguide-populate-existing)
    for further background on this option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasPrefixes.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with") *method of* [`HasPrefixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes")'
  prefs: []
  type: TYPE_NORMAL
- en: Add one or more expressions following the statement keyword, i.e. SELECT, INSERT,
    UPDATE, or DELETE. Generative.
  prefs: []
  type: TYPE_NORMAL
- en: This is used to support backend-specific prefix keywords such as those provided
    by MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: Multiple prefixes can be specified by multiple calls to [`HasPrefixes.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*prefixes` – textual or [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the INSERT, UPDATE, or DELETE keyword.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – optional string dialect name which will limit rendering of this
    prefix to only that dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query"), where
    the “join point” has been reset back to the base FROM entities of the query.
  prefs: []
  type: TYPE_NORMAL
- en: This method is usually used in conjunction with the `aliased=True` feature of
    the [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join") method.
    See the example in [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    for how this is used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: Return the first element of the first result or None if no rows present. If
    multiple rows are returned, raises MultipleResultsFound.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: This results in an execution of the underlying query.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.scalar()`](../../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), converted to a scalar subquery.
  prefs: []
  type: TYPE_NORMAL
- en: Analogous to [`SelectBase.scalar_subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`Query.scalar_subquery()`](#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery") method replaces the [`Query.as_scalar()`](#sqlalchemy.orm.Query.as_scalar
    "sqlalchemy.orm.Query.as_scalar") method.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.scalar_subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.scalar_subquery
    "sqlalchemy.sql.expression.Select.scalar_subquery") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: Set the FROM clause of this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.select_from()`](#sqlalchemy.orm.Query.select_from "sqlalchemy.orm.Query.select_from")
    is often used in conjunction with [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") in order to control which entity is selected from
    on the “left” side of the join.'
  prefs: []
  type: TYPE_NORMAL
- en: The entity or selectable object here effectively replaces the “left edge” of
    any calls to [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join"),
    when no joinpoint is otherwise established - usually, the default “join point”
    is the leftmost entity in the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object’s list of entities to be selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: 'Which produces SQL equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '***from_obj** – collection of one or more entities to apply to the FROM clause.
    Entities can be mapped classes, [`AliasedClass`](api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") objects, [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects as well as core [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") elements like subqueries.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")'
  prefs: []
  type: TYPE_NORMAL
- en: '`Query.select_entity_from()`'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object emitted by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: 'Used for [`inspect()`](../../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    compatibility, this is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: Apply column labels to the return value of Query.statement.
  prefs: []
  type: TYPE_NORMAL
- en: Indicates that this Query’s statement accessor should return a SELECT statement
    that applies labels to all columns in the form <tablename>_<columnname>; this
    is commonly used to disambiguate columns from multiple tables which have the same
    name.
  prefs: []
  type: TYPE_NORMAL
- en: When the Query actually issues SQL to load rows, it always uses column labeling.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`Query.set_label_style()`](#sqlalchemy.orm.Query.set_label_style "sqlalchemy.orm.Query.set_label_style")
    method *only* applies the output of [`Query.statement`](#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement"), and *not* to any of the result-row invoking
    systems of [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") itself, e.g.
    [`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first"), [`Query.all()`](#sqlalchemy.orm.Query.all
    "sqlalchemy.orm.Query.all"), etc. To execute a query using [`Query.set_label_style()`](#sqlalchemy.orm.Query.set_label_style
    "sqlalchemy.orm.Query.set_label_style"), invoke the [`Query.statement`](#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") using [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.set_label_style()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: Computes the “slice” of the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    represented by the given indices and returns the resulting [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: The start and stop indices behave like the argument to Python’s built-in `range()`
    function. This method provides an alternative to using `LIMIT`/`OFFSET` to get
    a slice of the query.
  prefs: []
  type: TYPE_NORMAL
- en: For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: renders as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.limit()`](#sqlalchemy.orm.Query.limit "sqlalchemy.orm.Query.limit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.offset()`](#sqlalchemy.orm.Query.offset "sqlalchemy.orm.Query.offset")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.slice()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.slice
    "sqlalchemy.sql.expression.Select.slice") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: The full SELECT statement represented by this Query.
  prefs: []
  type: TYPE_NORMAL
- en: The statement by default will not have disambiguating labels applied to the
    construct unless with_labels(True) is called first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), embedded within an [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias").
  prefs: []
  type: TYPE_NORMAL
- en: Eager JOIN generation within the query is disabled.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – string name to be assigned as the alias; this is passed through to
    [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"). If `None`, a name will be deterministically
    generated at compile time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_labels` – if True, [`with_labels()`](#sqlalchemy.orm.Query.with_labels
    "sqlalchemy.orm.Query.with_labels") will be called on the [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") first to apply table-qualified labels to all columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reduce_columns` – if True, [`Select.reduce_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.reduce_columns
    "sqlalchemy.sql.expression.Select.reduce_columns") will be called on the resulting
    [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, to remove same-named columns where one also refers to the other via
    foreign key or WHERE clause equivalence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`HasSuffixes.suffix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with") *method of* [`HasSuffixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes")'
  prefs: []
  type: TYPE_NORMAL
- en: Add one or more expressions following the statement as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: This is used to support backend-specific suffix keywords on certain constructs.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: Multiple suffixes can be specified by multiple calls to [`HasSuffixes.suffix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*suffixes` – textual or [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the target clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – Optional string dialect name which will limit rendering of this
    suffix to only that dialect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: return a tuple-typed form of this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query").
  prefs: []
  type: TYPE_NORMAL
- en: This method invokes the [`Query.only_return_tuples()`](#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples") method with a value of `True`, which
    by itself ensures that this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    will always return [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, even if the query is made against a single entity. It then also at the
    typing level will return a “typed” query, if possible, that will type result rows
    as `Tuple` objects with typed elements.
  prefs: []
  type: TYPE_NORMAL
- en: This method can be compared to the [`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") method, which returns “self”, but from a typing
    perspective returns an object that will yield typed `Tuple` objects for results.
    Typing takes effect only if this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object is a typed query object already.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: Produce a UNION of this Query against one or more queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: 'The method accepts multiple Query objects so as to control the level of nesting.
    A series of `union()` calls such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: 'will nest on each `union()`, and produces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: 'Whereas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: 'produces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: Note that many database backends do not allow ORDER BY to be rendered on a query
    called within UNION, EXCEPT, etc. To disable all ORDER BY clauses including those
    configured on mappers, issue `query.order_by(None)` - the resulting [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object will not render ORDER BY within its SELECT statement.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.union()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.union
    "sqlalchemy.sql.expression.Select.union") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: Produce a UNION ALL of this Query against one or more queries.
  prefs: []
  type: TYPE_NORMAL
- en: Works the same way as `Query.union()`. See that method for usage examples.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.union_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.union_all
    "sqlalchemy.sql.expression.Select.union_all") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: Perform an UPDATE with an arbitrary WHERE clause.
  prefs: []
  type: TYPE_NORMAL
- en: Updates rows matched by this query in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: See the section [ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)
    for important caveats and warnings, including limitations when using arbitrary
    UPDATE and DELETE with mapper inheritance configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`values` – a dictionary with attributes names, or alternatively mapped attributes
    or SQL expressions, as keys, and literal values or sql expressions as values.
    If [parameter-ordered mode](../../tutorial/data_update.html#tutorial-parameter-ordered-updates)
    is desired, the values can be passed as a list of 2-tuples; this requires that
    the [`update.preserve_parameter_order`](../../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update") flag is passed to the [`Query.update.update_args`](#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update") dictionary as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`synchronize_session` – chooses the strategy to update the attributes on objects
    in the session. See the section [ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)
    for a discussion of these strategies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update_args` – Optional dictionary, if present will be passed to the underlying
    [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    construct as the `**kw` for the object. May be used to pass dialect-specific arguments
    such as `mysql_limit`, as well as other special arguments such as [`update.preserve_parameter_order`](../../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the count of rows matched as returned by the database’s “row count” feature.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: Return a scalar result corresponding to the given column expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: [`Query.value()`](#sqlalchemy.orm.Query.value
    "sqlalchemy.orm.Query.value") is deprecated and will be removed in a future release.
    Please use [`Query.with_entities()`](#sqlalchemy.orm.Query.with_entities "sqlalchemy.orm.Query.with_entities")
    in combination with [`Query.scalar()`](#sqlalchemy.orm.Query.scalar "sqlalchemy.orm.Query.scalar")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: Return an iterator yielding result tuples corresponding to the given list of
    columns
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.4: [`Query.values()`](#sqlalchemy.orm.Query.values
    "sqlalchemy.orm.Query.values") is deprecated and will be removed in a future release.
    Please use [`Query.with_entities()`](#sqlalchemy.orm.Query.with_entities "sqlalchemy.orm.Query.with_entities")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: A synonym for [`Query.filter()`](#sqlalchemy.orm.Query.filter "sqlalchemy.orm.Query.filter").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.where()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") - v2 equivalent method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: A readonly attribute which returns the current WHERE criterion for this Query.
  prefs: []
  type: TYPE_NORMAL
- en: This returned value is a SQL expression construct, or `None` if no criterion
    has been established.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.whereclause`](../../core/selectable.html#sqlalchemy.sql.expression.Select.whereclause
    "sqlalchemy.sql.expression.Select.whereclause") - v2 equivalent property.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") replacing
    the SELECT list with the given entities.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.with_only_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - v2 comparable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") with the
    specified options for the `FOR UPDATE` clause.
  prefs: []
  type: TYPE_NORMAL
- en: The behavior of this method is identical to that of [`GenerativeSelect.with_for_update()`](../../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update"). When called with
    no arguments, the resulting `SELECT` statement will have a `FOR UPDATE` clause
    appended. When additional arguments are specified, backend-specific options such
    as `FOR UPDATE NOWAIT` or `LOCK IN SHARE MODE` can take effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: 'The above query on a PostgreSQL backend will render like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Using `with_for_update` in the context of eager loading relationships is not
    officially supported or recommended by SQLAlchemy and may not work with certain
    queries on various database backends. When `with_for_update` is successfully used
    with a query that involves [`joinedload()`](relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload"), SQLAlchemy will attempt to emit SQL that locks all
    involved tables.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is generally a good idea to combine the use of the [`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") method when using the [`Query.with_for_update()`](#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update") method. The purpose of [`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") is to force all the data read from the
    SELECT to be populated into the ORM objects returned, even if these objects are
    already in the [identity map](../../glossary.html#term-identity-map).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`GenerativeSelect.with_for_update()`](../../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") - Core level method
    with full argument and behavioral description.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing "sqlalchemy.orm.Query.populate_existing")
    - overwrites attributes of objects already loaded in the identity map.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasHints.with_hint()` *method of* `HasHints`'
  prefs: []
  type: TYPE_NORMAL
- en: Add an indexing or other executional context hint for the given selectable to
    this [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    or other selectable object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The text of the hint is rendered in the appropriate location for the database
    backend in use, relative to the given [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") passed as the `selectable` argument. The dialect
    implementation typically uses Python string substitution syntax with the token
    `%(name)s` to render the name of the table or alias. E.g. when using Oracle, the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: 'Would render SQL as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: 'The `dialect_name` option will limit the rendering of a particular hint to
    a particular backend. Such as, to add hints for both Oracle and Sybase simultaneously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.with_statement_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 2.0: The [`Query.with_labels()`](#sqlalchemy.orm.Query.with_labels
    "sqlalchemy.orm.Query.with_labels") and [`Query.apply_labels()`](#sqlalchemy.orm.Query.apply_labels
    "sqlalchemy.orm.Query.apply_labels") method is considered legacy as of the 1.x
    series of SQLAlchemy and becomes a legacy construct in 2.0\. Use set_label_style(LABEL_STYLE_TABLENAME_PLUS_COL)
    instead. (Background on SQLAlchemy 2.0 at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: Add filtering criterion that relates the given instance to a child object or
    collection, using its attribute state as well as an established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 2.0: The [`Query.with_parent()`](#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent") method is considered legacy as of the 1.x
    series of SQLAlchemy and becomes a legacy construct in 2.0\. Use the [`with_parent()`](api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent") standalone construct. (Background on SQLAlchemy
    2.0 at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  prefs: []
  type: TYPE_NORMAL
- en: The method uses the [`with_parent()`](api.html#sqlalchemy.orm.with_parent "sqlalchemy.orm.with_parent")
    function to generate the clause, the result of which is passed to [`Query.filter()`](#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter").
  prefs: []
  type: TYPE_NORMAL
- en: Parameters are the same as [`with_parent()`](api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent"), with the exception that the given property can
    be None, in which case a search is performed against this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object’s target mapper.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – An instance which has some [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`property` – Class bound attribute which indicates what relationship from the
    instance should be used to reconcile the parent/child relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`from_entity` – Entity in which to consider as the left side. This defaults
    to the “zero” entity of the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") that will use
    the given [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: 'While the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object is
    normally instantiated using the [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") method, it is legal to build the [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") directly without necessarily using a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). Such a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, or any [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") already
    associated with a different [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), can produce a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object associated with a target session using this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `HasHints.with_statement_hint()` *method of* `HasHints`'
  prefs: []
  type: TYPE_NORMAL
- en: Add a statement hint to this [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") or other selectable object.
  prefs: []
  type: TYPE_NORMAL
- en: This method is similar to [`Select.with_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") except that it does not require
    an individual table, and instead applies to the statement as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: Hints here are specific to the backend database and may include directives such
    as isolation levels, file directives, fetch directives, etc.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.with_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Select.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.prefix_with
    "sqlalchemy.sql.expression.Select.prefix_with") - generic SELECT prefixing which
    also can suit some database-specific HINT syntaxes such as MySQL optimizer hints'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object
    transformed by the given function.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: This allows ad-hoc recipes to be created for [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: Yield only `count` rows at a time.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this method is when fetching very large result sets (> 10K rows),
    to batch results in sub-collections and yield them out partially, so that the
    Python interpreter doesn’t need to declare very large areas of memory which is
    both time consuming and leads to excessive memory use. The performance from fetching
    hundreds of thousands of rows can often double when a suitable yield-per setting
    (e.g. approximately 1000) is used, even with DBAPIs that buffer rows (which are
    most).
  prefs: []
  type: TYPE_NORMAL
- en: As of SQLAlchemy 1.4, the [`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") method is equivalent to using the `yield_per`
    execution option at the ORM level. See the section [Fetching Large Result Sets
    with Yield Per](api.html#orm-queryguide-yield-per) for further background on this
    option.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Fetching Large Result Sets with Yield Per](api.html#orm-queryguide-yield-per)'
  prefs: []
  type: TYPE_NORMAL
- en: ORM-Specific Query Constructs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section has moved to [Additional ORM API Constructs](api.html#queryguide-additional).
  prefs: []
  type: TYPE_NORMAL
