- en: Legacy Query API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统查询API
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/queryguide/query.html](https://docs.sqlalchemy.org/en/20/orm/queryguide/query.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/queryguide/query.html](https://docs.sqlalchemy.org/en/20/orm/queryguide/query.html)
- en: About the Legacy Query API
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 关于传统查询API
- en: This page contains the Python generated documentation for the [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") construct, which for many years was the sole SQL interface
    when working with the SQLAlchemy ORM. As of version 2.0, an all new way of working
    is now the standard approach, where the same [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct that works for Core works just as
    well for the ORM, providing a consistent interface for building queries.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本页包含了由Python生成的[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")构造的文档，多年来这是与SQLAlchemy
    ORM一起使用时的唯一SQL接口。从版本2.0开始，现在采用的是全新的工作方式，其中与Core相同的[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造对ORM同样有效，为构建查询提供了一致的接口。
- en: For any application that is built on the SQLAlchemy ORM prior to the 2.0 API,
    the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") API will usually represents
    the vast majority of database access code within an application, and as such the
    majority of the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") API is
    **not being removed from SQLAlchemy**. The [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object behind the scenes now translates itself into a 2.0 style [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") object when the [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object is executed, so it now is just a very thin adapter
    API.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在SQLAlchemy 2.0 API之前构建的任何应用程序，[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    API通常表示应用程序中绝大多数数据库访问代码，并且大部分[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    API **不会从SQLAlchemy中删除**。在执行[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象时，[`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象在幕后现在会将自己转换为2.0样式的[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")对象，因此现在它只是一个非常薄的适配器API。
- en: For a guide to migrating an application based on [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") to 2.0 style, see [2.0 Migration - ORM Usage](../../changelog/migration_20.html#migration-20-query-usage).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何将基于[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")的应用程序迁移到2.0样式，请参阅[2.0迁移
    - ORM用法](../../changelog/migration_20.html#migration-20-query-usage)。
- en: For an introduction to writing SQL for ORM objects in the 2.0 style, start with
    the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial).
    Additional reference for 2.0 style querying is at [ORM Querying Guide](index.html).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何以2.0样式编写ORM对象的SQL，请从[SQLAlchemy统一教程](../../tutorial/index.html#unified-tutorial)开始。2.0样式查询的其他参考资料请参阅[ORM查询指南](index.html)。
- en: The Query Object
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询对象
- en: '[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") is produced in terms
    of a given [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    using the [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") method:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")是根据给定的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")产生的，使用[`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")方法：'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Following is the full interface for the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象的完整接口。
- en: '| Object Name | Description |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Query](#sqlalchemy.orm.Query) | ORM-level SQL construction object. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| [查询](#sqlalchemy.orm.Query) | ORM级别的SQL构造对象。 |'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: ORM-level SQL construction object.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: ORM级别的SQL构造对象。
- en: Legacy Feature
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 传统特性
- en: The ORM [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object is a
    legacy construct as of SQLAlchemy 2.0\. See the notes at the top of [Legacy Query
    API](#) for an overview, including links to migration documentation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: ORM [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象是SQLAlchemy 2.0的传统构造。请参阅[传统查询API](#)顶部的注释，其中包括迁移文档的链接。
- en: '[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") objects are normally
    initially generated using the [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") method of [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), and in less common cases by instantiating the [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") directly and associating with a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") using the [`Query.with_session()`](#sqlalchemy.orm.Query.with_session
    "sqlalchemy.orm.Query.with_session") method.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[`查询`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 对象通常最初是使用 [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") 方法生成的，[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 的情况比较少是直接实例化 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    并使用 [`Query.with_session()`](#sqlalchemy.orm.Query.with_session "sqlalchemy.orm.Query.with_session")
    方法与 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    关联。'
- en: '**Members**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.orm.Query.__init__), [add_column()](#sqlalchemy.orm.Query.add_column),
    [add_columns()](#sqlalchemy.orm.Query.add_columns), [add_entity()](#sqlalchemy.orm.Query.add_entity),
    [all()](#sqlalchemy.orm.Query.all), [apply_labels()](#sqlalchemy.orm.Query.apply_labels),
    [as_scalar()](#sqlalchemy.orm.Query.as_scalar), [autoflush()](#sqlalchemy.orm.Query.autoflush),
    [column_descriptions](#sqlalchemy.orm.Query.column_descriptions), [correlate()](#sqlalchemy.orm.Query.correlate),
    [count()](#sqlalchemy.orm.Query.count), [cte()](#sqlalchemy.orm.Query.cte), [delete()](#sqlalchemy.orm.Query.delete),
    [distinct()](#sqlalchemy.orm.Query.distinct), [enable_assertions()](#sqlalchemy.orm.Query.enable_assertions),
    [enable_eagerloads()](#sqlalchemy.orm.Query.enable_eagerloads), [except_()](#sqlalchemy.orm.Query.except_),
    [except_all()](#sqlalchemy.orm.Query.except_all), [execution_options()](#sqlalchemy.orm.Query.execution_options),
    [exists()](#sqlalchemy.orm.Query.exists), [filter()](#sqlalchemy.orm.Query.filter),
    [filter_by()](#sqlalchemy.orm.Query.filter_by), [first()](#sqlalchemy.orm.Query.first),
    [from_statement()](#sqlalchemy.orm.Query.from_statement), [get()](#sqlalchemy.orm.Query.get),
    [get_children()](#sqlalchemy.orm.Query.get_children), [get_execution_options()](#sqlalchemy.orm.Query.get_execution_options),
    [get_label_style](#sqlalchemy.orm.Query.get_label_style), [group_by()](#sqlalchemy.orm.Query.group_by),
    [having()](#sqlalchemy.orm.Query.having), [instances()](#sqlalchemy.orm.Query.instances),
    [intersect()](#sqlalchemy.orm.Query.intersect), [intersect_all()](#sqlalchemy.orm.Query.intersect_all),
    [is_single_entity](#sqlalchemy.orm.Query.is_single_entity), [join()](#sqlalchemy.orm.Query.join),
    [label()](#sqlalchemy.orm.Query.label), [lazy_loaded_from](#sqlalchemy.orm.Query.lazy_loaded_from),
    [limit()](#sqlalchemy.orm.Query.limit), [merge_result()](#sqlalchemy.orm.Query.merge_result),
    [offset()](#sqlalchemy.orm.Query.offset), [one()](#sqlalchemy.orm.Query.one),
    [one_or_none()](#sqlalchemy.orm.Query.one_or_none), [only_return_tuples()](#sqlalchemy.orm.Query.only_return_tuples),
    [options()](#sqlalchemy.orm.Query.options), [order_by()](#sqlalchemy.orm.Query.order_by),
    [outerjoin()](#sqlalchemy.orm.Query.outerjoin), [params()](#sqlalchemy.orm.Query.params),
    [populate_existing()](#sqlalchemy.orm.Query.populate_existing), [prefix_with()](#sqlalchemy.orm.Query.prefix_with),
    [reset_joinpoint()](#sqlalchemy.orm.Query.reset_joinpoint), [scalar()](#sqlalchemy.orm.Query.scalar),
    [scalar_subquery()](#sqlalchemy.orm.Query.scalar_subquery), [select_from()](#sqlalchemy.orm.Query.select_from),
    [selectable](#sqlalchemy.orm.Query.selectable), [set_label_style()](#sqlalchemy.orm.Query.set_label_style),
    [slice()](#sqlalchemy.orm.Query.slice), [statement](#sqlalchemy.orm.Query.statement),
    [subquery()](#sqlalchemy.orm.Query.subquery), [suffix_with()](#sqlalchemy.orm.Query.suffix_with),
    [tuples()](#sqlalchemy.orm.Query.tuples), [union()](#sqlalchemy.orm.Query.union),
    [union_all()](#sqlalchemy.orm.Query.union_all), [update()](#sqlalchemy.orm.Query.update),
    [value()](#sqlalchemy.orm.Query.value), [values()](#sqlalchemy.orm.Query.values),
    [where()](#sqlalchemy.orm.Query.where), [whereclause](#sqlalchemy.orm.Query.whereclause),
    [with_entities()](#sqlalchemy.orm.Query.with_entities), [with_for_update()](#sqlalchemy.orm.Query.with_for_update),
    [with_hint()](#sqlalchemy.orm.Query.with_hint), [with_labels()](#sqlalchemy.orm.Query.with_labels),
    [with_parent()](#sqlalchemy.orm.Query.with_parent), [with_session()](#sqlalchemy.orm.Query.with_session),
    [with_statement_hint()](#sqlalchemy.orm.Query.with_statement_hint), [with_transformation()](#sqlalchemy.orm.Query.with_transformation),
    [yield_per()](#sqlalchemy.orm.Query.yield_per)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.orm.Query.__init__), [add_column()](#sqlalchemy.orm.Query.add_column),
    [add_columns()](#sqlalchemy.orm.Query.add_columns), [add_entity()](#sqlalchemy.orm.Query.add_entity),
    [all()](#sqlalchemy.orm.Query.all), [apply_labels()](#sqlalchemy.orm.Query.apply_labels),
    [as_scalar()](#sqlalchemy.orm.Query.as_scalar), [autoflush()](#sqlalchemy.orm.Query.autoflush),
    [column_descriptions](#sqlalchemy.orm.Query.column_descriptions), [correlate()](#sqlalchemy.orm.Query.correlate),
    [count()](#sqlalchemy.orm.Query.count), [cte()](#sqlalchemy.orm.Query.cte), [delete()](#sqlalchemy.orm.Query.delete),
    [distinct()](#sqlalchemy.orm.Query.distinct), [enable_assertions()](#sqlalchemy.orm.Query.enable_assertions),
    [enable_eagerloads()](#sqlalchemy.orm.Query.enable_eagerloads), [except_()](#sqlalchemy.orm.Query.except_),
    [except_all()](#sqlalchemy.orm.Query.except_all), [execution_options()](#sqlalchemy.orm.Query.execution_options),
    [exists()](#sqlalchemy.orm.Query.exists), [filter()](#sqlalchemy.orm.Query.filter),
    [filter_by()](#sqlalchemy.orm.Query.filter_by), [first()](#sqlalchemy.orm.Query.first),
    [from_statement()](#sqlalchemy.orm.Query.from_statement), [get()](#sqlalchemy.orm.Query.get),
    [get_children()](#sqlalchemy.orm.Query.get_children), [get_execution_options()](#sqlalchemy.orm.Query.get_execution_options),
    [get_label_style](#sqlalchemy.orm.Query.get_label_style), [group_by()](#sqlalchemy.orm.Query.group_by),
    [having()](#sqlalchemy.orm.Query.having), [instances()](#sqlalchemy.orm.Query.instances),
    [intersect()](#sqlalchemy.orm.Query.intersect), [intersect_all()](#sqlalchemy.orm.Query.intersect_all),
    [is_single_entity](#sqlalchemy.orm.Query.is_single_entity), [join()](#sqlalchemy.orm.Query.join),
    [label()](#sqlalchemy.orm.Query.label), [lazy_loaded_from](#sqlalchemy.orm.Query.lazy_loaded_from),
    [limit()](#sqlalchemy.orm.Query.limit), [merge_result()](#sqlalchemy.orm.Query.merge_result),
    [offset()](#sqlalchemy.orm.Query.offset), [one()](#sqlalchemy.orm.Query.one),
    [one_or_none()](#sqlalchemy.orm.Query.one_or_none), [only_return_tuples()](#sqlalchemy.orm.Query.only_return_tuples),
    [options()](#sqlalchemy.orm.Query.options), [order_by()](#sqlalchemy.orm.Query.order_by),
    [outerjoin()](#sqlalchemy.orm.Query.outerjoin), [params()](#sqlalchemy.orm.Query.params),
    [populate_existing()](#sqlalchemy.orm.Query.populate_existing), [prefix_with()](#sqlalchemy.orm.Query.prefix_with),
    [reset_joinpoint()](#sqlalchemy.orm.Query.reset_joinpoint), [scalar()](#sqlalchemy.orm.Query.scalar),
    [scalar_subquery()](#sqlalchemy.orm.Query.scalar_subquery), [select_from()](#sqlalchemy.orm.Query.select_from),
    [selectable](#sqlalchemy.orm.Query.selectable), [set_label_style()](#sqlalchemy.orm.Query.set_label_style),
    [slice()](#sqlalchemy.orm.Query.slice), [statement](#sqlalchemy.orm.Query.statement),
    [subquery()](#sqlalchemy.orm.Query.subquery), [suffix_with()](#sqlalchemy.orm.Query.suffix_with),
    [tuples()](#sqlalchemy.orm.Query.tuples), [union()](#sqlalchemy.orm.Query.union),
    [union_all()](#sqlalchemy.orm.Query.union_all), [update()](#sqlalchemy.orm.Query.update),
    [value()](#sqlalchemy.orm.Query.value), [values()](#sqlalchemy.orm.Query.values),
    [where()](#sqlalchemy.orm.Query.where), [whereclause](#sqlalchemy.orm.Query.whereclause),
    [with_entities()](#sqlalchemy.orm.Query.with_entities), [with_for_update()](#sqlalchemy.orm.Query.with_for_update),
    [with_hint()](#sqlalchemy.orm.Query.with_hint), [with_labels()](#sqlalchemy.orm.Query.with_labels),
    [with_parent()](#sqlalchemy.orm.Query.with_parent), [with_session()](#sqlalchemy.orm.Query.with_session),
    [with_statement_hint()](#sqlalchemy.orm.Query.with_statement_hint), [with_transformation()](#sqlalchemy.orm.Query.with_transformation),
    [yield_per()](#sqlalchemy.orm.Query.yield_per)'
- en: '**Class signature**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    (`sqlalchemy.sql.expression._SelectFromElements`, `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    [`sqlalchemy.sql.expression.HasPrefixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), [`sqlalchemy.sql.expression.HasSuffixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes"), `sqlalchemy.sql.expression.HasHints`,
    `sqlalchemy.event.registry.EventTarget`, [`sqlalchemy.log.Identified`](../../core/internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified"), `sqlalchemy.sql.expression.Generative`, [`sqlalchemy.sql.expression.Executable`](../../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), `typing.Generic`)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")（`sqlalchemy.sql.expression._SelectFromElements`，`sqlalchemy.sql.annotation.SupportsCloneAnnotations`，[`sqlalchemy.sql.expression.HasPrefixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes")，[`sqlalchemy.sql.expression.HasSuffixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes")，`sqlalchemy.sql.expression.HasHints`，`sqlalchemy.event.registry.EventTarget`，[`sqlalchemy.log.Identified`](../../core/internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified")，`sqlalchemy.sql.expression.Generative`，[`sqlalchemy.sql.expression.Executable`](../../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")，`typing.Generic`）
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Construct a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") directly.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 直接构造一个[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")。
- en: 'E.g.:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The above is equivalent to:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以上等价于：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Parameters:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`entities` – a sequence of entities and/or SQL expressions.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entities` – 一个实体和/或 SQL 表达式的序列。'
- en: '`session` – a [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    with which the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") will be
    associated. Optional; a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    can be associated with a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") generatively via the [`Query.with_session()`](#sqlalchemy.orm.Query.with_session
    "sqlalchemy.orm.Query.with_session") method as well.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 与[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")将关联的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。可选；也可以通过[`Query.with_session()`](#sqlalchemy.orm.Query.with_session
    "sqlalchemy.orm.Query.with_session")方法将[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")与[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")关联。'
- en: See also
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query "sqlalchemy.orm.Session.query")'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query "sqlalchemy.orm.Session.query")'
- en: '[`Query.with_session()`](#sqlalchemy.orm.Query.with_session "sqlalchemy.orm.Query.with_session")'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.with_session()`](#sqlalchemy.orm.Query.with_session "sqlalchemy.orm.Query.with_session")'
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Add a column expression to the list of result columns to be returned.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将列表达式添加到要返回的结果列列表中。
- en: 'Deprecated since version 1.4: [`Query.add_column()`](#sqlalchemy.orm.Query.add_column
    "sqlalchemy.orm.Query.add_column") is deprecated and will be removed in a future
    release. Please use [`Query.add_columns()`](#sqlalchemy.orm.Query.add_columns
    "sqlalchemy.orm.Query.add_columns")'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起已弃用：[`Query.add_column()`](#sqlalchemy.orm.Query.add_column "sqlalchemy.orm.Query.add_column")已弃用，并将在将来的版本中删除。请使用
    [`Query.add_columns()`](#sqlalchemy.orm.Query.add_columns "sqlalchemy.orm.Query.add_columns")
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Add one or more column expressions to the list of result columns to be returned.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个或多个列表达式添加到要返回的结果列列表中。
- en: See also
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Select.add_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns") - v2 comparable method.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.add_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns") - v2 可比较的方法。'
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: add a mapped entity to the list of result columns to be returned.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 将映射实体添加到要返回的结果列列表中。
- en: See also
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Select.add_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns") - v2 comparable method.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.add_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns") - v2 可比较的方法。'
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Return the results represented by this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    as a list.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将由此[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")表示的结果返回为列表。
- en: This results in an execution of the underlying SQL statement.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致底层 SQL 语句的执行。
- en: Warning
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object, when asked
    to return either a sequence or iterator that consists of full ORM-mapped entities,
    will **deduplicate entries based on primary key**. See the FAQ for more details.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当要求 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 对象返回由完整的 ORM 映射实体组成的序列或迭代器时，将根据主键**对条目进行去重**。有关更多详情，请参阅
    FAQ。
- en: See also
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参阅
- en: ''
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[My Query does not return the same number of objects as query.count() tells
    me - why?](../../faq/sessions.html#faq-query-deduplicating)'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[我的查询返回的对象数量与 query.count() 告诉我的数量不一致 - 为什么？](../../faq/sessions.html#faq-query-deduplicating)'
- en: See also
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.all()`](../../core/connections.html#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    - v2 comparable method.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.all()`](../../core/connections.html#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    - v2 可比较方法。'
- en: '[`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") - v2 comparable method.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") - v2 可比较方法。'
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Deprecated since version 2.0: The [`Query.with_labels()`](#sqlalchemy.orm.Query.with_labels
    "sqlalchemy.orm.Query.with_labels") and [`Query.apply_labels()`](#sqlalchemy.orm.Query.apply_labels
    "sqlalchemy.orm.Query.apply_labels") method is considered legacy as of the 1.x
    series of SQLAlchemy and becomes a legacy construct in 2.0\. Use set_label_style(LABEL_STYLE_TABLENAME_PLUS_COL)
    instead. (Background on SQLAlchemy 2.0 at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0 弃用：[`Query.with_labels()`](#sqlalchemy.orm.Query.with_labels "sqlalchemy.orm.Query.with_labels")
    和 [`Query.apply_labels()`](#sqlalchemy.orm.Query.apply_labels "sqlalchemy.orm.Query.apply_labels")
    方法被视为 SQLAlchemy 1.x 系列的遗留构造，在 2.0 中成为遗留构造。请改用 `set_label_style(LABEL_STYLE_TABLENAME_PLUS_COL)`。
    (有关 SQLAlchemy 2.0 的背景，请参阅：[SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), converted to a scalar subquery.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 表示的完整 SELECT 语句，转换为标量子查询。
- en: 'Deprecated since version 1.4: The [`Query.as_scalar()`](#sqlalchemy.orm.Query.as_scalar
    "sqlalchemy.orm.Query.as_scalar") method is deprecated and will be removed in
    a future release. Please refer to [`Query.scalar_subquery()`](#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery").'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用：[`Query.as_scalar()`](#sqlalchemy.orm.Query.as_scalar "sqlalchemy.orm.Query.as_scalar")
    方法已弃用，并将在将来的版本中删除。请参考 [`Query.scalar_subquery()`](#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery")。
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Return a Query with a specific ‘autoflush’ setting.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有特定“autoflush”设置的查询。
- en: As of SQLAlchemy 1.4, the [`Query.autoflush()`](#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush") method is equivalent to using the `autoflush`
    execution option at the ORM level. See the section [Autoflush](api.html#orm-queryguide-autoflush)
    for further background on this option.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 自 SQLAlchemy 1.4 起，[`Query.autoflush()`](#sqlalchemy.orm.Query.autoflush "sqlalchemy.orm.Query.autoflush")
    方法等效于在 ORM 级别使用 `autoflush` 执行选项。有关此选项的更多背景，请参阅 [Autoflush](api.html#orm-queryguide-autoflush)
    部分。
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Return metadata about the columns which would be returned by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 返回有关此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 将返回的列的元数据。
- en: 'Format is a list of dictionaries:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 格式是一个字典列表：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: See also
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'This API is available using [2.0 style](../../glossary.html#term-2.0-style)
    queries as well, documented at:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此 API 也可使用 [2.0 风格](../../glossary.html#term-2.0-style) 查询，文档位于：
- en: '[Inspecting entities and columns from ORM-enabled SELECT and DML statements](api.html#queryguide-inspection)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[检查来自启用 ORM 的 SELECT 和 DML 语句的实体和列](api.html#queryguide-inspection)'
- en: '[`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions")'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions")'
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Return a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") construct which
    will correlate the given FROM clauses to that of an enclosing [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") or [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select").
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 构造，将给定的 FROM 子句与封闭的
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 或 [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 关联起来。
- en: The method here accepts mapped classes, [`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") constructs, and [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") constructs as arguments, which are resolved into expression
    constructs, in addition to appropriate expression constructs.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的方法接受映射类、[`aliased()`](api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    构造和 [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    构造作为参数，这些参数会被解析为表达式构造，以及适当的表达式构造。
- en: The correlation arguments are ultimately passed to [`Select.correlate()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") after coercion to expression constructs.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，相关参数将被强制转换为表达式构造，然后传递给 [`Select.correlate()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate")。
- en: The correlation arguments take effect in such cases as when `Query.from_self()`
    is used, or when a subquery as returned by [`Query.subquery()`](#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") is embedded in another [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，相关参数会生效，例如在使用 `Query.from_self()` 时，或者在将由[`Query.subquery()`](#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery")返回的子查询嵌入到另一个[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造中时。
- en: See also
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.correlate()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") - v2 equivalent method.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.correlate()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") - v2 等效方法。'
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Return a count of rows this the SQL formed by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") would return.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")形成的 SQL 将返回的行数计数。
- en: 'This generates the SQL for this Query as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下查询的 SQL 语句：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The above SQL returns a single row, which is the aggregate value of the count
    function; the [`Query.count()`](#sqlalchemy.orm.Query.count "sqlalchemy.orm.Query.count")
    method then returns that single integer value.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 SQL 返回一个单行，即 count 函数的聚合值；然后[`Query.count()`](#sqlalchemy.orm.Query.count
    "sqlalchemy.orm.Query.count") 方法返回该单个整数值。
- en: Warning
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: It is important to note that the value returned by count() is **not the same
    as the number of ORM objects that this Query would return from a method such as
    the .all() method**. The [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, when asked to return full entities, will **deduplicate entries based on
    primary key**, meaning if the same primary key value would appear in the results
    more than once, only one object of that primary key would be present. This does
    not apply to a query that is against individual columns.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，count() 返回的值**并不等同于此 Query 通过 .all() 等方法返回的 ORM 对象数**。当 [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象被要求返回完整实体时，将根据主键**对条目进行重复消除**，这意味着如果相同的主键值在结果中出现超过一次，则只会存在一个该主键的对象。这不适用于针对单个列的查询。
- en: See also
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[My Query does not return the same number of objects as query.count() tells
    me - why?](../../faq/sessions.html#faq-query-deduplicating)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[我的查询的返回对象数与 query.count() 告诉我的不一样 - 为什么？](../../faq/sessions.html#faq-query-deduplicating)'
- en: 'For fine grained control over specific columns to count, to skip the usage
    of a subquery or otherwise control of the FROM clause, or to use other aggregate
    functions, use [`expression.func`](../../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") expressions in conjunction with [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"), i.e.:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于对特定列进行精细控制的计数，跳过子查询的使用或以其他方式控制 FROM 子句，或使用其他聚合函数，可以结合使用[`expression.func`](../../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")表达式和 [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")，例如：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: See also
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[2.0 Migration - ORM Usage](../../changelog/migration_20.html#migration-20-query-usage)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[2.0 迁移 - ORM 用法](../../changelog/migration_20.html#migration-20-query-usage)'
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") represented as a common table expression (CTE).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")表示的完整 SELECT 语句，表示为公共表达式（CTE）。
- en: Parameters and usage are the same as those of the [`SelectBase.cte()`](../../core/selectable.html#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte") method; see that method for further
    details.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 参数和用法与 [`SelectBase.cte()`](../../core/selectable.html#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte") 方法相同；有关更多详细信息，请参阅该方法。
- en: 'Here is the [PostgreSQL WITH RECURSIVE example](https://www.postgresql.org/docs/current/static/queries-with.html).
    Note that, in this example, the `included_parts` cte and the `incl_alias` alias
    of it are Core selectables, which means the columns are accessed via the `.c.`
    attribute. The `parts_alias` object is an [`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") instance of the `Part` entity, so column-mapped attributes
    are available directly:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 [PostgreSQL WITH RECURSIVE 示例](https://www.postgresql.org/docs/current/static/queries-with.html)。请注意，在此示例中，`included_parts`
    cte 和其 `incl_alias` 别名是核心可选择的，这意味着可以通过 `.c.` 属性访问列。`parts_alias` 对象是 `Part` 实体的
    [`aliased()`](api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased") 实例，因此可以直接访问列映射属性：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: See also
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`Select.cte()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.cte
    "sqlalchemy.sql.expression.Select.cte") - v2 equivalent method.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.cte()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.cte
    "sqlalchemy.sql.expression.Select.cte") - v2 等效方法。'
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Perform a DELETE with an arbitrary WHERE clause.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任意 WHERE 子句执行 DELETE。
- en: Deletes rows matched by this query from the database.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库中删除与此查询匹配的行。
- en: 'E.g.:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Warning
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: See the section [ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)
    for important caveats and warnings, including limitations when using bulk UPDATE
    and DELETE with mapper inheritance configurations.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [ORM-Enabled INSERT、UPDATE 和 DELETE 语句](dml.html#orm-expression-update-delete)
    章节以了解重要的注意事项和警告，包括在使用映射器继承配置时批量 UPDATE 和 DELETE 的限制。
- en: 'Parameters:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**synchronize_session** – chooses the strategy to update the attributes on
    objects in the session. See the section [ORM-Enabled INSERT, UPDATE, and DELETE
    statements](dml.html#orm-expression-update-delete) for a discussion of these strategies.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**synchronize_session** – 选择在会话中更新对象属性的策略。请参阅[ORM-Enabled INSERT、UPDATE 和 DELETE
    语句](dml.html#orm-expression-update-delete) 章节讨论这些策略。'
- en: 'Returns:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the count of rows matched as returned by the database’s “row count” feature.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库的“行计数”功能返回的匹配行数。
- en: See also
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM-Enabled INSERT、UPDATE 和 DELETE 语句](dml.html#orm-expression-update-delete)'
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Apply a `DISTINCT` to the query and return the newly resulting `Query`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对查询应用 `DISTINCT` 并返回新生成的 `Query`。
- en: Note
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The ORM-level [`distinct()`](#sqlalchemy.orm.Query.distinct "sqlalchemy.orm.Query.distinct")
    call includes logic that will automatically add columns from the ORDER BY of the
    query to the columns clause of the SELECT statement, to satisfy the common need
    of the database backend that ORDER BY columns be part of the SELECT list when
    DISTINCT is used. These columns *are not* added to the list of columns actually
    fetched by the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query"), however,
    so would not affect results. The columns are passed through when using the [`Query.statement`](#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") accessor, however.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 级别的 [`distinct()`](#sqlalchemy.orm.Query.distinct "sqlalchemy.orm.Query.distinct")
    调用包含逻辑，将自动将查询的 ORDER BY 中的列添加到 SELECT 语句的列子句中，以满足数据库后端的常见需求，即在使用 DISTINCT 时，ORDER
    BY 列应作为 SELECT 列的一部分。然而，这些列 *不会* 添加到实际由 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    获取的列列表中，因此不会影响结果。然而，在使用 [`Query.statement`](#sqlalchemy.orm.Query.statement "sqlalchemy.orm.Query.statement")
    访问器时，这些列会通过。
- en: 'Deprecated since version 2.0: This logic is deprecated and will be removed
    in SQLAlchemy 2.0\. See [Using DISTINCT with additional columns, but only select
    the entity](../../changelog/migration_20.html#migration-20-query-distinct) for
    a description of this use case in 2.0.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0 起已弃用：此逻辑已弃用，将在 SQLAlchemy 2.0 中删除。请参阅 [使用 DISTINCT 与其他列，但仅选择实体](../../changelog/migration_20.html#migration-20-query-distinct)
    了解 2.0 中此用例的描述。
- en: See also
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`Select.distinct()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct") - v2 equivalent method.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.distinct()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct") - v2 等效方法。'
- en: 'Parameters:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***expr** –'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '***expr** –'
- en: optional column expressions. When present, the PostgreSQL dialect will render
    a `DISTINCT ON (<expressions>)` construct.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的列表达式。当存在时，PostgreSQL 方言将呈现 `DISTINCT ON (<expressions>)` 结构。
- en: 'Deprecated since version 1.4: Using *expr in other dialects is deprecated and
    will raise [`CompileError`](../../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") in a future version.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版本起已弃用：在其他方言中使用*expr已弃用，并将在将来的版本中引发[`CompileError`](../../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")。
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Control whether assertions are generated.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 控制是否生成断言。
- en: When set to False, the returned Query will not assert its state before certain
    operations, including that LIMIT/OFFSET has not been applied when filter() is
    called, no criterion exists when get() is called, and no “from_statement()” exists
    when filter()/order_by()/group_by() etc. is called. This more permissive mode
    is used by custom Query subclasses to specify criterion or other modifiers outside
    of the usual usage patterns.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置为 False 时，返回的 Query 在某些操作之前不会断言其状态，包括调用 filter() 时未应用 LIMIT/OFFSET，调用 get()
    时不存在条件，以及调用 filter()/order_by()/group_by() 等时不存在“from_statement()”。此更宽松的模式由自定义的
    Query 子类使用，以指定标准或其他修改器在通常的使用模式之外。
- en: Care should be taken to ensure that the usage pattern is even possible. A statement
    applied by from_statement() will override any criterion set by filter() or order_by(),
    for example.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 应注意确保使用模式是可行的。例如，由from_statement()应用的语句将覆盖由filter()或order_by()设置的任何条件。
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Control whether or not eager joins and subqueries are rendered.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 控制是否呈现急切连接和子查询。
- en: When set to False, the returned Query will not render eager joins regardless
    of [`joinedload()`](relationships.html#sqlalchemy.orm.joinedload "sqlalchemy.orm.joinedload"),
    [`subqueryload()`](relationships.html#sqlalchemy.orm.subqueryload "sqlalchemy.orm.subqueryload")
    options or mapper-level `lazy='joined'`/`lazy='subquery'` configurations.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置为False时，返回的 Query 将不会渲染急切连接，无论 [`joinedload()`](relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")、[`subqueryload()`](relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload") 选项或映射器级别的 `lazy='joined'`/`lazy='subquery'` 配置如何。
- en: This is used primarily when nesting the Query’s statement into a subquery or
    other selectable, or when using [`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per").
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当将 Query 的语句嵌套到子查询或其他可选择项中时，或者当使用[`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")时主要用于。
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Produce an EXCEPT of this Query against one or more queries.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 生成此 Query 对一项或多项查询的 EXCEPT。
- en: Works the same way as `Query.union()`. See that method for usage examples.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Query.union()`的工作方式相同。请参阅该方法以获取用法示例。
- en: See also
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.except_()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.except_
    "sqlalchemy.sql.expression.Select.except_") - v2 equivalent method.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.except_()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.except_
    "sqlalchemy.sql.expression.Select.except_") - v2 等效方法。'
- en: '[PRE26]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Produce an EXCEPT ALL of this Query against one or more queries.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 生成此 Query 对一项或多项查询的 EXCEPT ALL。
- en: Works the same way as `Query.union()`. See that method for usage examples.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Query.union()`的工作方式相同。请参阅该方法以获取用法示例。
- en: See also
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.except_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.except_all
    "sqlalchemy.sql.expression.Select.except_all") - v2 equivalent method.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.except_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.except_all
    "sqlalchemy.sql.expression.Select.except_all") - v2 等效方法。'
- en: '[PRE27]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Set non-SQL options which take effect during execution.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 设置在执行期间生效的非 SQL 选项。
- en: 'Options allowed here include all of those accepted by [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), as well as a series of ORM
    specific options:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此处允许的选项包括所有被[`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")接受的选项，以及一系列 ORM 特定选项：
- en: '`populate_existing=True` - equivalent to using [`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`populate_existing=True` - 等效于使用[`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '`autoflush=True|False` - equivalent to using [`Query.autoflush()`](#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush")'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`autoflush=True|False` - 等效于使用[`Query.autoflush()`](#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush")'
- en: '`yield_per=<value>` - equivalent to using [`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield_per=<value>` - 等效于使用[`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")'
- en: Note that the `stream_results` execution option is enabled automatically if
    the `Query.yield_per()` method or execution option is used.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果使用了`Query.yield_per()`方法或执行选项，则`stream_results`执行选项会自动启用。
- en: 'New in version 1.4: - added ORM options to [`Query.execution_options()`](#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options")'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能：- 添加了ORM选项到[`Query.execution_options()`](#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options")
- en: The execution options may also be specified on a per execution basis when using
    [2.0 style](../../glossary.html#term-2.0-style) queries via the [`Session.execution_options`](../session_api.html#sqlalchemy.orm.Session.params.execution_options
    "sqlalchemy.orm.Session") parameter.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用[2.0风格](../../glossary.html#term-2.0-style)查询时，执行选项也可以在每次执行时指定，通过[`Session.execution_options`](../session_api.html#sqlalchemy.orm.Session.params.execution_options
    "sqlalchemy.orm.Session")参数。
- en: Warning
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") parameter should not be used
    at the level of individual ORM statement executions, as the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will not track objects from different schema translate
    maps within a single session. For multiple schema translate maps within the scope
    of a single [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    see [Horizontal Sharding](../examples.html#examples-sharding).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")参数不应在单个ORM语句执行的级别使用，因为[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")不会跟踪来自不同模式转换映射的对象在单个会话中。对于单个[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")范围内的多个模式转换映射，请参见[水平分片](../examples.html#examples-sharding)。'
- en: See also
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（又名流式结果）](../../core/connections.html#engine-stream-results)'
- en: '[`Query.get_execution_options()`](#sqlalchemy.orm.Query.get_execution_options
    "sqlalchemy.orm.Query.get_execution_options")'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.get_execution_options()`](#sqlalchemy.orm.Query.get_execution_options
    "sqlalchemy.orm.Query.get_execution_options")'
- en: '[`Select.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.execution_options
    "sqlalchemy.sql.expression.Select.execution_options") - v2 equivalent method.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.execution_options
    "sqlalchemy.sql.expression.Select.execution_options") - v2 等效方法。'
- en: '[PRE28]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: A convenience method that turns a query into an EXISTS subquery of the form
    EXISTS (SELECT 1 FROM … WHERE …).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方便的方法，将查询转换为形式为EXISTS（SELECT 1 FROM … WHERE …）的EXISTS子查询。
- en: 'e.g.:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE29]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Producing SQL similar to:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 生成类似于：
- en: '[PRE30]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The EXISTS construct is usually used in the WHERE clause:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: EXISTS构造通常用于WHERE子句中：
- en: '[PRE31]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Note that some databases such as SQL Server don’t allow an EXISTS expression
    to be present in the columns clause of a SELECT. To select a simple boolean value
    based on the exists as a WHERE, use [`literal()`](../../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal"):'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，某些数据库（如SQL Server）不允许在SELECT的列子句中存在EXISTS表达式。要基于存在性选择简单的布尔值作为WHERE，使用[`literal()`](../../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal")：
- en: '[PRE32]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: See also
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.exists()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.exists
    "sqlalchemy.sql.expression.Select.exists") - v2 comparable method.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.exists()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.exists
    "sqlalchemy.sql.expression.Select.exists") - v2 可比较的方法。'
- en: '[PRE33]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Apply the given filtering criterion to a copy of this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), using SQL expressions.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的过滤条件应用于此[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")的副本，使用SQL表达式。
- en: 'e.g.:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE34]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Multiple criteria may be specified as comma separated; the effect is that they
    will be joined together using the [`and_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") function:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 多个条件可以以逗号分隔的方式指定；效果是它们将使用[`and_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")函数连接在一起：
- en: '[PRE35]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The criterion is any SQL expression object applicable to the WHERE clause of
    a select. String expressions are coerced into SQL expression constructs via the
    [`text()`](../../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    construct.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 条件是适用于select的WHERE子句的任何SQL表达式对象。字符串表达式通过[`text()`](../../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造被强制转换为SQL表达式构造。
- en: See also
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.filter_by()`](#sqlalchemy.orm.Query.filter_by "sqlalchemy.orm.Query.filter_by")
    - filter on keyword expressions.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.filter_by()`](#sqlalchemy.orm.Query.filter_by "sqlalchemy.orm.Query.filter_by")
    - 根据关键字表达式进行过滤。'
- en: '[`Select.where()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") - v2 equivalent method.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.where()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") - v2 等效方法。'
- en: '[PRE36]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Apply the given filtering criterion to a copy of this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), using keyword expressions.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的过滤条件应用于此[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")的副本，使用关键字表达式。
- en: 'e.g.:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE37]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Multiple criteria may be specified as comma separated; the effect is that they
    will be joined together using the [`and_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") function:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 可以指定多个条件，以逗号分隔；其效果是它们将使用[`and_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")函数连接在一起：
- en: '[PRE38]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The keyword expressions are extracted from the primary entity of the query,
    or the last entity that was the target of a call to [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join").
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字表达式是从查询的主要实体或最后一个曾被调用过[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")的目标实体中提取的。
- en: See also
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.filter()`](#sqlalchemy.orm.Query.filter "sqlalchemy.orm.Query.filter")
    - filter on SQL expressions.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.filter()`](#sqlalchemy.orm.Query.filter "sqlalchemy.orm.Query.filter")
    - 根据SQL表达式进行过滤。'
- en: '[`Select.filter_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.filter_by
    "sqlalchemy.sql.expression.Select.filter_by") - v2 comparable method.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.filter_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.filter_by
    "sqlalchemy.sql.expression.Select.filter_by") - v2 可比较的方法。'
- en: '[PRE39]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Return the first result of this `Query` or None if the result doesn’t contain
    any row.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此`Query`的第一个结果，如果结果不包含任何行，则返回None。
- en: first() applies a limit of one within the generated SQL, so that only one primary
    entity row is generated on the server side (note this may consist of multiple
    result rows if join-loaded collections are present).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`first()`在生成的SQL中应用了一个限制为1，因此仅在服务器端生成一个主要实体行（请注意，如果存在联接加载的集合，则可能由多个结果行组成）。'
- en: Calling [`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")
    results in an execution of the underlying query.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 调用[`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")会导致基础查询的执行。
- en: See also
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one")'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one")'
- en: '[`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")'
- en: '[`Result.first()`](../../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first") - v2 comparable method.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.first()`](../../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first") - v2 可比较的方法。'
- en: '[`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") - v2 comparable method.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") - v2 可比较的方法。'
- en: '[PRE40]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Execute the given SELECT statement and return results.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 执行给定的SELECT语句并返回结果。
- en: This method bypasses all internal statement compilation, and the statement is
    executed without modification.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法绕过所有内部语句编译，并且语句在不修改的情况下执行。
- en: The statement is typically either a [`text()`](../../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") or [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, and should return the set of columns
    appropriate to the entity class represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句通常是一个[`text()`](../../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")或[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")结构，应返回与此[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")所代表的实体类相对应的列集。
- en: See also
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.from_statement()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") - v2 comparable method.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.from_statement()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") - v2 可比较的方法。'
- en: '[PRE41]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的主键标识符返回一个实例，如果找不到则返回`None`。
- en: 'Deprecated since version 2.0: The [`Query.get()`](#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") method is considered legacy as of the 1.x series of
    SQLAlchemy and becomes a legacy construct in 2.0\. The method is now available
    as [`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    (Background on SQLAlchemy 2.0 at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0 起已弃用：[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    方法被认为是 SQLAlchemy 1.x 系列的遗留部分，并且在 2.0 中成为遗留构造。该方法现在可用作 [`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get")（关于 SQLAlchemy 2.0 的背景信息，请参阅：[SQLAlchemy 2.0 - 主要迁移指南](../../changelog/migration_20.html))
- en: 'E.g.:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE42]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") is special
    in that it provides direct access to the identity map of the owning [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). If the given primary key identifier is present in the
    local identity map, the object is returned directly from this collection and no
    SQL is emitted, unless the object has been marked fully expired. If not present,
    a SELECT is performed in order to locate the object.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") 特殊之处在于它提供对所属
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    的标识映射的直接访问。如果给定的主键标识符存在于本地标识映射中，则对象将直接从此集合返回，而不会发出任何 SQL，除非对象已被标记为完全过期。如果不存在，则执行
    SELECT 来定位对象。'
- en: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") also
    will perform a check if the object is present in the identity map and marked as
    expired - a SELECT is emitted to refresh the object as well as to ensure that
    the row is still present. If not, [`ObjectDeletedError`](../exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") is raised.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") 会检查对象是否存在于标识映射中并标记为过期
    - 会发出一个 SELECT 来刷新对象并确保行仍然存在。如果不存在，则会引发 [`ObjectDeletedError`](../exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError")。'
- en: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") is only
    used to return a single mapped instance, not multiple instances or individual
    column constructs, and strictly on a single primary key value. The originating
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") must be constructed in
    this way, i.e. against a single mapped entity, with no additional filtering criterion.
    Loading options via [`Query.options()`](#sqlalchemy.orm.Query.options "sqlalchemy.orm.Query.options")
    may be applied however, and will be used if the object is not yet locally present.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") 仅用于返回单个映射实例，而不是多个实例或单个列构造，并且严格限于单个主键值。源
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 必须以这种方式构造，即针对单个映射实体，没有额外的过滤条件。可以通过
    [`Query.options()`](#sqlalchemy.orm.Query.options "sqlalchemy.orm.Query.options")
    应用加载选项，如果对象尚未在本地存在，则将使用该选项。'
- en: 'Parameters:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**ident** –'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '**ident** –'
- en: A scalar, tuple, or dictionary representing the primary key. For a composite
    (e.g. multiple column) primary key, a tuple or dictionary should be passed.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 表示主键的标量、元组或字典。对于复合（例如，多列）主键，应传递元组或字典。
- en: 'For a single-column primary key, the scalar calling form is typically the most
    expedient. If the primary key of a row is the value “5”, the call looks like:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单列主键，标量调用形式通常最为便捷。如果一行的主键是值“5”，则调用如下所示：
- en: '[PRE43]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The tuple form contains primary key values typically in the order in which
    they correspond to the mapped [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object’s primary key columns, or if the [`Mapper.primary_key`](../mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") configuration parameter were used, in the order used
    for that parameter. For example, if the primary key of a row is represented by
    the integer digits “5, 10” the call would look like:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 元组形式包含主键值，通常按照它们对应于映射的 [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象的主键列的顺序，或者如果使用了 [`Mapper.primary_key`](../mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") 配置参数，则按照该参数的使用顺序。例如，如果一行的主键由整数数字“5, 10”表示，则调用如下所示：
- en: '[PRE44]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The dictionary form should include as keys the mapped attribute names corresponding
    to each element of the primary key. If the mapped class has the attributes `id`,
    `version_id` as the attributes which store the object’s primary key value, the
    call would look like:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 字典形式应该以键的形式包含对应于主键每个元素的映射属性名称。如果映射类具有 `id`、`version_id` 作为存储对象主键值的属性，则调用将如下所示：
- en: '[PRE45]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'New in version 1.3: the [`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    method now optionally accepts a dictionary of attribute names to values in order
    to indicate a primary key identifier.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.3 中的 [`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    方法现在可选择性地接受属性名到值的字典，以指示主键标识符。
- en: 'Returns:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The object instance, or `None`.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 对象实例，或 `None`。
- en: '[PRE46]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasTraverseInternals.get_children()` *方法的* `HasTraverseInternals`'
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 `HasTraverseInternals` 的即时子 `HasTraverseInternals` 元素。
- en: This is used for visit traversal.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于访问遍历。
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 可以包含改变返回集合的标志，例如为了减少更大的遍历而返回子集合中的项目，或者从不同的上下文中返回子项（例如模式级别的集合而不是从子句级别返回）。'
- en: '[PRE47]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Get the non-SQL options which will take effect during execution.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 获取在执行期间生效的非 SQL 选项。
- en: New in version 1.3.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.3 中新增。
- en: See also
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.execution_options()`](#sqlalchemy.orm.Query.execution_options "sqlalchemy.orm.Query.execution_options")'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.execution_options()`](#sqlalchemy.orm.Query.execution_options "sqlalchemy.orm.Query.execution_options")'
- en: '[`Select.get_execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.get_execution_options
    "sqlalchemy.sql.expression.Select.get_execution_options") - v2 comparable method.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.get_execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.get_execution_options
    "sqlalchemy.sql.expression.Select.get_execution_options") - v2 可比较方法。'
- en: '[PRE48]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Retrieve the current label style.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 检索当前的标签样式。
- en: New in version 1.4.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: See also
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.get_label_style()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.get_label_style
    "sqlalchemy.sql.expression.Select.get_label_style") - v2 equivalent method.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.get_label_style()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.get_label_style
    "sqlalchemy.sql.expression.Select.get_label_style") - v2 等效方法。'
- en: '[PRE49]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Apply one or more GROUP BY criterion to the query and return the newly resulting
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query").
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个或多个 GROUP BY 准则应用于查询，并返回新生成的 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")。
- en: All existing GROUP BY settings can be suppressed by passing `None` - this will
    suppress any GROUP BY configured on mappers as well.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现有的 GROUP BY 设置都可以通过传递 `None` 来抑制 - 这将抑制任何配置在映射器上的 GROUP BY。
- en: See also
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'These sections describe GROUP BY in terms of [2.0 style](../../glossary.html#term-2.0-style)
    invocation but apply to [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    as well:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这些部分描述了 GROUP BY，是以 [2.0 样式](../../glossary.html#term-2.0-style) 调用的，但也适用于 [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")：
- en: '[Aggregate functions with GROUP BY / HAVING](../../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '[带有 GROUP BY / HAVING 的聚合函数](../../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - 在 [SQLAlchemy 统一教程](../../tutorial/index.html#unified-tutorial) 中'
- en: '[Ordering or Grouping by a Label](../../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '[按标签排序或分组](../../tutorial/data_select.html#tutorial-order-by-label) - 在 [SQLAlchemy
    统一教程](../../tutorial/index.html#unified-tutorial) 中'
- en: '[`Select.group_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by") - v2 equivalent method.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.group_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by") - v2 等效方法。'
- en: '[PRE50]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Apply a HAVING criterion to the query and return the newly resulting [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 将 HAVING 准则应用于查询，并返回新生成的 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")。
- en: '[`Query.having()`](#sqlalchemy.orm.Query.having "sqlalchemy.orm.Query.having")
    is used in conjunction with [`Query.group_by()`](#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by").'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.having()`](#sqlalchemy.orm.Query.having "sqlalchemy.orm.Query.having")
    与 [`Query.group_by()`](#sqlalchemy.orm.Query.group_by "sqlalchemy.orm.Query.group_by")
    结合使用。'
- en: 'HAVING criterion makes it possible to use filters on aggregate functions like
    COUNT, SUM, AVG, MAX, and MIN, eg.:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: HAVING条件使得可以在聚合函数（如COUNT、SUM、AVG、MAX和MIN）上使用过滤器，例如：
- en: '[PRE51]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: See also
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.having()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.having
    "sqlalchemy.sql.expression.Select.having") - v2 equivalent method.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.having()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.having
    "sqlalchemy.sql.expression.Select.having") - v2等效方法。'
- en: '[PRE52]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Return an ORM result given a [`CursorResult`](../../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") and [`QueryContext`](../internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext").
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 针对[`CursorResult`](../../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")和[`QueryContext`](../internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext")返回一个ORM结果。
- en: 'Deprecated since version 2.0: The [`Query.instances()`](#sqlalchemy.orm.Query.instances
    "sqlalchemy.orm.Query.instances") method is deprecated and will be removed in
    a future release. Use the Select.from_statement() method or aliased() construct
    in conjunction with Session.execute() instead.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 自2.0版本起已弃用：[`Query.instances()`](#sqlalchemy.orm.Query.instances "sqlalchemy.orm.Query.instances")方法已弃用，并将在将来的版本中移除。请改为使用Select.from_statement()方法或与Session.execute()结合使用aliased()构造。
- en: '[PRE53]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Produce an INTERSECT of this Query against one or more queries.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 对此查询与一个或多个查询进行INTERSECT。
- en: Works the same way as `Query.union()`. See that method for usage examples.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Query.union()`的工作方式相同。参见该方法的使用示例。
- en: See also
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.intersect()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.intersect
    "sqlalchemy.sql.expression.Select.intersect") - v2 equivalent method.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.intersect()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.intersect
    "sqlalchemy.sql.expression.Select.intersect") - v2等效方法。'
- en: '[PRE54]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Produce an INTERSECT ALL of this Query against one or more queries.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 对此查询与一个或多个查询进行INTERSECT ALL。
- en: Works the same way as `Query.union()`. See that method for usage examples.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Query.union()`的工作方式相同。参见该方法的使用示例。
- en: See also
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.intersect_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.intersect_all
    "sqlalchemy.sql.expression.Select.intersect_all") - v2 equivalent method.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.intersect_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.intersect_all
    "sqlalchemy.sql.expression.Select.intersect_all") - v2等效方法。'
- en: '[PRE55]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Indicates if this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") returns
    tuples or single entities.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")是否返回元组或单个实体。
- en: Returns True if this query returns a single entity for each instance in its
    result list, and False if this query returns a tuple of entities for each result.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此查询对其结果列表中的每个实例返回单个实体，则返回True，如果此查询对其结果返回实体的元组，则返回False。
- en: New in version 1.3.11.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.3.11开始的新功能。
- en: See also
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.only_return_tuples()`](#sqlalchemy.orm.Query.only_return_tuples "sqlalchemy.orm.Query.only_return_tuples")'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.only_return_tuples()`](#sqlalchemy.orm.Query.only_return_tuples "sqlalchemy.orm.Query.only_return_tuples")'
- en: '[PRE56]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Create a SQL JOIN against this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object’s criterion and apply generatively, returning the newly resulting [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 创建针对此[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象的标准的SQL JOIN，并应用生成性地返回新生成的[`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")。
- en: '**Simple Relationship Joins**'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '**简单关系连接**'
- en: 'Consider a mapping between two classes `User` and `Address`, with a relationship
    `User.addresses` representing a collection of `Address` objects associated with
    each `User`. The most common usage of [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") is to create a JOIN along this relationship, using
    the `User.addresses` attribute as an indicator for how this should occur:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑两个类`User`和`Address`之间的映射，其中存在一个关系`User.addresses`表示与每个`User`关联的`Address`对象的集合。[`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")的最常见用法是沿着这个关系创建一个JOIN，使用`User.addresses`属性作为指示器指示应该如何发生：
- en: '[PRE57]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Where above, the call to [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    along `User.addresses` will result in SQL approximately equivalent to:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '在上面的情况下，调用[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")沿着`User.addresses`将导致大致等同于以下SQL的结果： '
- en: '[PRE58]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: In the above example we refer to `User.addresses` as passed to [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") as the “on clause”, that is, it indicates how the
    “ON” portion of the JOIN should be constructed.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们将`User.addresses`称为传递给[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")的“on
    clause”，即，它指示如何构造JOIN的“ON”部分。
- en: 'To construct a chain of joins, multiple [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") calls may be used. The relationship-bound attribute
    implies both the left and right side of the join at once:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建连接的链，可以使用多个[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")调用。关联绑定属性一次暗示了连接的左侧和右侧：
- en: '[PRE59]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Note
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: as seen in the above example, **the order in which each call to the join() method
    occurs is important**. Query would not, for example, know how to join correctly
    if we were to specify `User`, then `Item`, then `Order`, in our chain of joins;
    in such a case, depending on the arguments passed, it may raise an error that
    it doesn’t know how to join, or it may produce invalid SQL in which case the database
    will raise an error. In correct practice, the [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method is invoked in such a way that lines up with
    how we would want the JOIN clauses in SQL to be rendered, and each call should
    represent a clear link from what precedes it.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 如上例所示，**调用join()方法的顺序很重要**。例如，如果我们在连接链中依次指定`User`、`Item`和`Order`，则Query将不知道如何正确连接；在这种情况下，根据传递的参数，它可能会引发一个不知道如何连接的错误，或者可能会产生无效的SQL，数据库会因此而引发错误。在正确的实践中，应以使JOIN子句在SQL中呈现的方式调用[`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")方法，并且每个调用应表示与之前内容的清晰链接。
- en: '**Joins to a Target Entity or Selectable**'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '**连接到目标实体或可选择项**'
- en: 'A second form of [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    allows any mapped entity or core selectable construct as a target. In this usage,
    [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join") will
    attempt to create a JOIN along the natural foreign key relationship between two
    entities:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种形式的[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")允许将任何映射实体或核心可选择构造作为目标。在此用法中，[`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")将尝试沿着两个实体之间的自然外键关系创建一个JOIN：
- en: '[PRE60]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: In the above calling form, [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    is called upon to create the “on clause” automatically for us. This calling form
    will ultimately raise an error if either there are no foreign keys between the
    two entities, or if there are multiple foreign key linkages between the target
    entity and the entity or entities already present on the left side such that creating
    a join requires more information. Note that when indicating a join to a target
    without any ON clause, ORM configured relationships are not taken into account.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述调用形式中，[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")会自动为我们创建“on子句”。如果两个实体之间没有外键，或者如果目标实体与已在左侧的实体之间存在多个外键链接，从而创建连接需要更多信息，则此调用形式最终会引发错误。请注意，当指示连接到一个没有ON子句的目标时，不会考虑ORM配置的关系。
- en: '**Joins to a Target with an ON Clause**'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '**连接到具有ON子句的目标**'
- en: 'The third calling form allows both the target entity as well as the ON clause
    to be passed explicitly. A example that includes a SQL expression as the ON clause
    is as follows:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种调用形式允许显式传递目标实体以及ON子句。一个包含SQL表达式作为ON子句的示例如下：
- en: '[PRE61]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The above form may also use a relationship-bound attribute as the ON clause
    as well:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 上述形式也可以使用一个关联绑定属性作为ON子句：
- en: '[PRE62]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The above syntax can be useful for the case where we wish to join to an alias
    of a particular target entity. If we wanted to join to `Address` twice, it could
    be achieved using two aliases set up using the [`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语法对于希望连接到特定目标实体的别名的情况很有用。如果我们想要两次连接到`Address`，可以使用[`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")函数设置两个别名：
- en: '[PRE63]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The relationship-bound calling form can also specify a target entity using
    the [`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") method; a query equivalent to the one
    above would be:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 使用关联绑定调用形式还可以使用[`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")方法指定目标实体；与上面的查询等效的查询如下：
- en: '[PRE64]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '**Augmenting Built-in ON Clauses**'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '**增强内置ON子句**'
- en: 'As a substitute for providing a full custom ON condition for an existing relationship,
    the [`PropComparator.and_()`](../internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") function may be applied to a relationship
    attribute to augment additional criteria into the ON clause; the additional criteria
    will be combined with the default criteria using AND:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 作为为现有关系提供完整自定义ON条件的替代方法，可以将[`PropComparator.and_()`](../internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_")函数应用于关系属性，以将额外条件增加到ON子句中；附加条件将使用AND与默认条件组合：
- en: '[PRE65]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: New in version 1.4.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '**Joining to Tables and Subqueries**'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '**连接到表和子查询**'
- en: 'The target of a join may also be any table or SELECT statement, which may be
    related to a target entity or not. Use the appropriate `.subquery()` method in
    order to make a subquery out of a query:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 加入的目标也可以是任何表或SELECT语句，它可能与目标实体相关或不相关。使用适当的`.subquery()`方法以将查询转换为子查询：
- en: '[PRE66]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Joining to a subquery in terms of a specific relationship and/or target entity
    may be achieved by linking the subquery to the entity using [`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased"):'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用[`aliased()`](api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")将子查询链接到实体，可以以特定关系和/或目标实体的术语连接到子查询：
- en: '[PRE67]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '**Controlling what to Join From**'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制从何处连接**'
- en: 'In cases where the left side of the current state of [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") is not in line with what we want to join from, the [`Query.select_from()`](#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method may be used:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '在当前[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")状态的左侧与我们要连接的内容不一致的情况下，可以使用[`Query.select_from()`](#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")方法： '
- en: '[PRE68]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Which will produce SQL similar to:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成类似于以下SQL：
- en: '[PRE69]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: See also
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") - v2 equivalent method.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") - v2 相当的方法。'
- en: 'Parameters:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*props` – Incoming arguments for [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join"), the props collection in modern use should be considered
    to be a one or two argument form, either as a single “target” entity or ORM attribute-bound
    relationship, or as a target entity plus an “on clause” which may be a SQL expression
    or ORM attribute-bound relationship.'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*props` – 用于[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")的传入参数，现代用法中的props集合应视为一种或两种参数形式，即作为单个“目标”实体或ORM属性绑定关系，或作为目标实体加上一个“on
    clause”，该“on clause”可以是SQL表达式或ORM属性绑定关系。'
- en: '`isouter=False` – If True, the join used will be a left outer join, just as
    if the [`Query.outerjoin()`](#sqlalchemy.orm.Query.outerjoin "sqlalchemy.orm.Query.outerjoin")
    method were called.'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isouter=False` – 如果为True，则使用的连接将是左外连接，就像调用了[`Query.outerjoin()`](#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin")方法一样。'
- en: '`full=False` – render FULL OUTER JOIN; implies `isouter`.'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full=False` – 渲染FULL OUTER JOIN；隐含`isouter`。'
- en: '[PRE70]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), converted to a scalar subquery with a label of the given
    name.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")表示的完整SELECT语句，转换为具有给定名称标签的标量子查询。
- en: See also
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.label()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.label
    "sqlalchemy.sql.expression.Select.label") - v2 comparable method.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.label()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.label
    "sqlalchemy.sql.expression.Select.label") - v2 类似的方法。'
- en: '[PRE71]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: An [`InstanceState`](../internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    that is using this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") for
    a lazy load operation.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 正在将此[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")用于惰性加载操作的[`InstanceState`](../internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。
- en: 'Deprecated since version 1.4: This attribute should be viewed via the [`ORMExecuteState.lazy_loaded_from`](../session_api.html#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from
    "sqlalchemy.orm.ORMExecuteState.lazy_loaded_from") attribute, within the context
    of the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始不推荐使用：此属性应通过[`ORMExecuteState.lazy_loaded_from`](../session_api.html#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from
    "sqlalchemy.orm.ORMExecuteState.lazy_loaded_from")属性查看，在[`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件的上下文中。
- en: See also
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ORMExecuteState.lazy_loaded_from`](../session_api.html#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from
    "sqlalchemy.orm.ORMExecuteState.lazy_loaded_from")'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ORMExecuteState.lazy_loaded_from`](../session_api.html#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from
    "sqlalchemy.orm.ORMExecuteState.lazy_loaded_from")'
- en: '[PRE72]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Apply a `LIMIT` to the query and return the newly resulting `Query`.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 对查询应用 `LIMIT` 并返回新生成的 `Query`。
- en: See also
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.limit()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") - v2 equivalent method.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.limit()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") - v2 等效方法。'
- en: '[PRE73]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Merge a result into this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object’s Session.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 将结果合并到此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 对象的会话中。
- en: 'Deprecated since version 2.0: The [`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") method is considered legacy as of the 1.x
    series of SQLAlchemy and becomes a legacy construct in 2.0\. The method is superseded
    by the [`merge_frozen_result()`](../internals.html#sqlalchemy.orm.merge_frozen_result
    "sqlalchemy.orm.merge_frozen_result") function. (Background on SQLAlchemy 2.0
    at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0 弃用：[`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result "sqlalchemy.orm.Query.merge_result")
    方法被视为 SQLAlchemy 1.x 系列的遗留构造，并在 2.0 中成为遗留构造。该方法已被 [`merge_frozen_result()`](../internals.html#sqlalchemy.orm.merge_frozen_result
    "sqlalchemy.orm.merge_frozen_result") 函数取代。 （有关 SQLAlchemy 2.0 的背景信息，请参阅：[SQLAlchemy
    2.0 - 主要迁移指南](../../changelog/migration_20.html)）
- en: Given an iterator returned by a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    of the same structure as this one, return an identical iterator of results, with
    all mapped instances merged into the session using [`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge"). This is an optimized method which will merge
    all mapped instances, preserving the structure of the result rows and unmapped
    columns with less method overhead than that of calling [`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") explicitly for each value.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 给定与此查询相同结构的 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 返回的迭代器，返回一个相同的结果迭代器，所有映射实例都使用
    [`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    合并到会话中。 这是一种优化方法，将合并所有映射实例，保留结果行的结构和未映射列，比显式为每个值调用 [`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") 的方法开销小。
- en: The structure of the results is determined based on the column list of this
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") - if these do not correspond,
    unchecked errors will occur.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的结构是基于此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 的列列表确定的 -
    如果这些列不对应，将会发生未经检查的错误。
- en: The ‘load’ argument is the same as that of [`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge").
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: ‘load’ 参数与 [`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") 相同。
- en: For an example of how [`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") is used, see the source code for the example
    [Dogpile Caching](../examples.html#examples-caching), where [`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") is used to efficiently restore state from
    a cache back into a target [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 [`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result "sqlalchemy.orm.Query.merge_result")
    的用法示例，请参阅示例 [Dogpile Caching](../examples.html#examples-caching) 的源代码，其中 [`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") 用于有效地从缓存中恢复状态到目标 [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。
- en: '[PRE74]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Apply an `OFFSET` to the query and return the newly resulting `Query`.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 对查询应用 `OFFSET` ��返回新生成的 `Query`。
- en: See also
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.offset()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset") - v2 equivalent method.'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.offset()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset") - v2 等效方法。'
- en: '[PRE75]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Return exactly one result or raise an exception.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 返回确切的一个结果或引发异常。
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows. Raises
    `sqlalchemy.orm.exc.MultipleResultsFound` if multiple object identities are returned,
    or if multiple rows are returned for a query that returns only scalar values as
    opposed to full identity-mapped entities.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查询未选择任何行，则引发 `sqlalchemy.orm.exc.NoResultFound`。如果返回多个对象标识，或者对于仅返回标量值而不是完全映射实体的查询返回多行，则引发
    `sqlalchemy.orm.exc.MultipleResultsFound`。
- en: Calling [`one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one") results
    in an execution of the underlying query.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 调用[`one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one")会导致执行底层查询。
- en: See also
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")'
- en: '[`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")'
- en: '[`Result.one()`](../../core/connections.html#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")
    - v2 comparable method.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one()`](../../core/connections.html#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")
    - v2 可比较方法。'
- en: '[`Result.scalar_one()`](../../core/connections.html#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") - v2 comparable method.'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalar_one()`](../../core/connections.html#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") - v2 可比较方法。'
- en: '[PRE76]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Return at most one result or raise an exception.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 返回最多一个结果或引发异常。
- en: Returns `None` if the query selects no rows. Raises `sqlalchemy.orm.exc.MultipleResultsFound`
    if multiple object identities are returned, or if multiple rows are returned for
    a query that returns only scalar values as opposed to full identity-mapped entities.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查询未选择任何行，则返回`None`。 如果返回多个对象标识，或者如果对于返回标量值而不是完整标识映射的实体的查询返回多行，则引发`sqlalchemy.orm.exc.MultipleResultsFound`。
- en: Calling [`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")
    results in an execution of the underlying query.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 调用[`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")会导致执行底层查询。
- en: See also
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")'
- en: '[`Query.one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one")'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one")'
- en: '[`Result.one_or_none()`](../../core/connections.html#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none") - v2 comparable method.'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one_or_none()`](../../core/connections.html#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none") - v2 可比较方法。'
- en: '[`Result.scalar_one_or_none()`](../../core/connections.html#sqlalchemy.engine.Result.scalar_one_or_none
    "sqlalchemy.engine.Result.scalar_one_or_none") - v2 comparable method.'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalar_one_or_none()`](../../core/connections.html#sqlalchemy.engine.Result.scalar_one_or_none
    "sqlalchemy.engine.Result.scalar_one_or_none") - v2 可比较方法。'
- en: '[PRE77]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: When set to True, the query results will always be a [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") object.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置为True时，查询结果将始终是一个[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: This can change a query that normally returns a single entity as a scalar to
    return a [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    result in all cases.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以将通常返回单个实体作为标量的查询，在所有情况下返回一个[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")结果。
- en: See also
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Query.tuples()`](#sqlalchemy.orm.Query.tuples "sqlalchemy.orm.Query.tuples")
    - returns tuples, but also at the typing level will type results as `Tuple`.'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.tuples()`](#sqlalchemy.orm.Query.tuples "sqlalchemy.orm.Query.tuples")
    - 返回元组，但在类型级别上也将结果类型化为`Tuple`。'
- en: '[`Query.is_single_entity()`](#sqlalchemy.orm.Query.is_single_entity "sqlalchemy.orm.Query.is_single_entity")'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.is_single_entity()`](#sqlalchemy.orm.Query.is_single_entity "sqlalchemy.orm.Query.is_single_entity")'
- en: '[`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") - v2 comparable method.'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") - v2 可比较方法。'
- en: '[PRE78]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object,
    applying the given list of mapper options.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象，应用给定的映射器选项列表。
- en: Most supplied options regard changing how column- and relationship-mapped attributes
    are loaded.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数提供的选项都涉及更改如何加载列和关系映射的属性。
- en: See also
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Column Loading Options](columns.html#loading-columns)'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '[列加载选项](columns.html#loading-columns)'
- en: '[Relationship Loading with Loader Options](relationships.html#relationship-loader-options)'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用加载选项进行关系加载](relationships.html#relationship-loader-options)'
- en: '[PRE79]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Apply one or more ORDER BY criteria to the query and return the newly resulting
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query").
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 应用一个或多个ORDER BY标准到查询，并返回新生成的[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")。
- en: 'e.g.:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE80]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Calling this method multiple times is equivalent to calling it once with all
    the clauses concatenated. All existing ORDER BY criteria may be cancelled by passing
    `None` by itself. New ORDER BY criteria may then be added by invoking [`Query.order_by()`](#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") again, e.g.:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 多次调用此方法等效于一次将所有子句连接起来调用。所有现有的 ORDER BY 条件都可以通过单独传递`None`来取消。然后可以通过再次调用[`Query.order_by()`](#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by")来添加新的 ORDER BY 条件，例如：
- en: '[PRE81]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: See also
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'These sections describe ORDER BY in terms of [2.0 style](../../glossary.html#term-2.0-style)
    invocation but apply to [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    as well:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 这些部分描述了按[2.0风格](../../glossary.html#term-2.0-style)调用的 ORDER BY，但也适用于[`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")：
- en: '[ORDER BY](../../tutorial/data_select.html#tutorial-order-by) - in the [SQLAlchemy
    Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORDER BY](../../tutorial/data_select.html#tutorial-order-by) - 在[SQLAlchemy
    统一教程](../../tutorial/index.html#unified-tutorial)中'
- en: '[Ordering or Grouping by a Label](../../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '[按标签排序或分组](../../tutorial/data_select.html#tutorial-order-by-label) - 在[SQLAlchemy
    统一教程](../../tutorial/index.html#unified-tutorial)中'
- en: '[`Select.order_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by") - v2 equivalent method.'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.order_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by") - v2 等效方法。'
- en: '[PRE82]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Create a left outer join against this `Query` object’s criterion and apply generatively,
    returning the newly resulting `Query`.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`Query`对象的条件上创建左外连接，并在生成式上应用，返回新生成的`Query`。
- en: Usage is the same as the `join()` method.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方法与`join()`方法相同。
- en: See also
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.outerjoin()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") - v2 equivalent method.'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.outerjoin()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") - v2 等效方法。'
- en: '[PRE83]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Add values for bind parameters which may have been specified in filter().
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 为可能已在 filter() 中指定的绑定参数添加值。
- en: Parameters may be specified using **kwargs, or optionally a single dictionary
    as the first positional argument. The reason for both is that **kwargs is convenient,
    however some parameter dictionaries contain unicode keys in which case **kwargs
    cannot be used.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 参数可以使用**kwargs指定，或者作为第一个位置参数使用单个字典。两者之所以都存在是因为**kwargs很方便，但是一些参数字典包含Unicode键，**kwargs就不能用。
- en: '[PRE84]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Return a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") that will expire
    and refresh all instances as they are loaded, or reused from the current [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个将在加载时过期并刷新所有实例，或者从当前[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中重用的[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")。
- en: As of SQLAlchemy 1.4, the [`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") method is equivalent to using the `populate_existing`
    execution option at the ORM level. See the section [Populate Existing](api.html#orm-queryguide-populate-existing)
    for further background on this option.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 从SQLAlchemy 1.4开始，[`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")方法等效于在ORM级别使用`populate_existing`执行选项。有关此选项的更多背景信息，请参见
    [填充现有](api.html#orm-queryguide-populate-existing) 部分。
- en: '[PRE85]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '*inherited from the* [`HasPrefixes.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with") *method of* [`HasPrefixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes")'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasPrefixes.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with") *方法的* [`HasPrefixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes")'
- en: Add one or more expressions following the statement keyword, i.e. SELECT, INSERT,
    UPDATE, or DELETE. Generative.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 在语句关键字后添加一个或多个表达式，即 SELECT、INSERT、UPDATE 或 DELETE。生成式。
- en: This is used to support backend-specific prefix keywords such as those provided
    by MySQL.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于支持特定于后端的前缀关键字，例如 MySQL 提供的关键字。
- en: 'E.g.:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE86]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Multiple prefixes can be specified by multiple calls to [`HasPrefixes.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with").
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过多次调用[`HasPrefixes.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with")来指定多个前缀。
- en: 'Parameters:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*prefixes` – textual or [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the INSERT, UPDATE, or DELETE keyword.'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*prefixes` – 文本或[`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 构造，将在插入、更新或删除关键字之后呈现。'
- en: '`dialect` – optional string dialect name which will limit rendering of this
    prefix to only that dialect.'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 可选的字符串方言名称，将仅限于将此前缀呈现为该方言。'
- en: '[PRE87]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query"), where
    the “join point” has been reset back to the base FROM entities of the query.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")，其中“连接点”已被重置回查询的基本FROM实体。
- en: This method is usually used in conjunction with the `aliased=True` feature of
    the [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join") method.
    See the example in [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    for how this is used.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法通常与 [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    方法的 `aliased=True` 特性一起使用。请参阅 [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    中的示例，了解其使用方法。
- en: '[PRE88]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Return the first element of the first result or None if no rows present. If
    multiple rows are returned, raises MultipleResultsFound.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 返回第一个结果的第一个元素，如果没有行存在则返回 None。如果返回多行，则引发 MultipleResultsFound。
- en: '[PRE89]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: This results in an execution of the underlying query.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致执行基础查询。
- en: See also
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.scalar()`](../../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") - v2 comparable method.'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalar()`](../../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") - v2 可比较方法。'
- en: '[PRE90]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), converted to a scalar subquery.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 表示的完整SELECT语句，转换为标量子查询。
- en: Analogous to [`SelectBase.scalar_subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 [`SelectBase.scalar_subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")。
- en: 'Changed in version 1.4: The [`Query.scalar_subquery()`](#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery") method replaces the [`Query.as_scalar()`](#sqlalchemy.orm.Query.as_scalar
    "sqlalchemy.orm.Query.as_scalar") method.'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 `1.4` 起变更：[`Query.scalar_subquery()`](#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery") 方法取代了 [`Query.as_scalar()`](#sqlalchemy.orm.Query.as_scalar
    "sqlalchemy.orm.Query.as_scalar") 方法。
- en: See also
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.scalar_subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.scalar_subquery
    "sqlalchemy.sql.expression.Select.scalar_subquery") - v2 comparable method.'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.scalar_subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.scalar_subquery
    "sqlalchemy.sql.expression.Select.scalar_subquery") - v2 可比较方法。'
- en: '[PRE91]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Set the FROM clause of this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    explicitly.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 显式设置此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 的 FROM 子句。
- en: '[`Query.select_from()`](#sqlalchemy.orm.Query.select_from "sqlalchemy.orm.Query.select_from")
    is often used in conjunction with [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") in order to control which entity is selected from
    on the “left” side of the join.'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.select_from()`](#sqlalchemy.orm.Query.select_from "sqlalchemy.orm.Query.select_from")
    常常与 [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join") 结合使用，以控制从连接的“左”侧选择的实体。'
- en: The entity or selectable object here effectively replaces the “left edge” of
    any calls to [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join"),
    when no joinpoint is otherwise established - usually, the default “join point”
    is the leftmost entity in the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object’s list of entities to be selected.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的实体或可选择对象有效地替换了任何对 [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    的调用的“左边缘”，当没有其他方式建立连接点时 - 通常，默认的“连接点”是查询对象的要选择的实体列表中最左边的实体。
- en: 'A typical example:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的例子：
- en: '[PRE92]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Which produces SQL equivalent to:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成等效于以下SQL：
- en: '[PRE93]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Parameters:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***from_obj** – collection of one or more entities to apply to the FROM clause.
    Entities can be mapped classes, [`AliasedClass`](api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") objects, [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects as well as core [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") elements like subqueries.'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '***from_obj** – 一个或多个要应用于FROM子句的实体集合。实体可以是映射类、[`AliasedClass`](api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")对象、[`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象，以及核心[`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")元素，如子查询。'
- en: See also
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")'
- en: '`Query.select_entity_from()`'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '`Query.select_entity_from()`'
- en: '[`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") - v2 equivalent method.'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") - v2等效方法。'
- en: '[PRE94]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Return the [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object emitted by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")发出的[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")对象。
- en: 'Used for [`inspect()`](../../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    compatibility, this is equivalent to:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 用于[`inspect()`](../../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")兼容性，这相当于：
- en: '[PRE95]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Apply column labels to the return value of Query.statement.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 将列标签应用于Query.statement的返回值。
- en: Indicates that this Query’s statement accessor should return a SELECT statement
    that applies labels to all columns in the form <tablename>_<columnname>; this
    is commonly used to disambiguate columns from multiple tables which have the same
    name.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此查询的语句访问器应返回一个SELECT语句，该语句将标签应用于形式为<tablename>_<columnname>的所有列；这通常用于消除具有相同名称的多个表中的列的歧义。
- en: When the Query actually issues SQL to load rows, it always uses column labeling.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 当查询实际发出SQL以加载行时，它总是使用列标签。
- en: Note
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The [`Query.set_label_style()`](#sqlalchemy.orm.Query.set_label_style "sqlalchemy.orm.Query.set_label_style")
    method *only* applies the output of [`Query.statement`](#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement"), and *not* to any of the result-row invoking
    systems of [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") itself, e.g.
    [`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first"), [`Query.all()`](#sqlalchemy.orm.Query.all
    "sqlalchemy.orm.Query.all"), etc. To execute a query using [`Query.set_label_style()`](#sqlalchemy.orm.Query.set_label_style
    "sqlalchemy.orm.Query.set_label_style"), invoke the [`Query.statement`](#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") using [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"):'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.set_label_style()`](#sqlalchemy.orm.Query.set_label_style "sqlalchemy.orm.Query.set_label_style")方法*仅*应用于[`Query.statement`](#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement")的输出，*不*应用于[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")本身的任何结果行调用系统，例如[`Query.first()`](#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first")，[`Query.all()`](#sqlalchemy.orm.Query.all "sqlalchemy.orm.Query.all")等。要使用[`Query.set_label_style()`](#sqlalchemy.orm.Query.set_label_style
    "sqlalchemy.orm.Query.set_label_style")执行查询，请使用[`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")调用[`Query.statement`](#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement")：'
- en: '[PRE97]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: New in version 1.4.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版本中的新功能。
- en: See also
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.set_label_style()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") - v2 equivalent method.'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.set_label_style()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") - v2等效方法。'
- en: '[PRE98]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Computes the “slice” of the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    represented by the given indices and returns the resulting [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 计算由给定索引表示的[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")的“切片”，并返回结果[`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")。
- en: The start and stop indices behave like the argument to Python’s built-in `range()`
    function. This method provides an alternative to using `LIMIT`/`OFFSET` to get
    a slice of the query.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 开始和停止索引的行为类似于Python内置`range()`函数的参数。此方法提供了使用`LIMIT`/`OFFSET`来获取查询的切片的替代方法。
- en: For example,
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，
- en: '[PRE99]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: renders as
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染为
- en: '[PRE100]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: See also
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.limit()`](#sqlalchemy.orm.Query.limit "sqlalchemy.orm.Query.limit")'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.limit()`](#sqlalchemy.orm.Query.limit "sqlalchemy.orm.Query.limit")'
- en: '[`Query.offset()`](#sqlalchemy.orm.Query.offset "sqlalchemy.orm.Query.offset")'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.offset()`](#sqlalchemy.orm.Query.offset "sqlalchemy.orm.Query.offset")'
- en: '[`Select.slice()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.slice
    "sqlalchemy.sql.expression.Select.slice") - v2 equivalent method.'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.slice()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.slice
    "sqlalchemy.sql.expression.Select.slice") - v2 等效方法。'
- en: '[PRE101]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: The full SELECT statement represented by this Query.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 由此 Query 表示的完整 SELECT 语句。
- en: The statement by default will not have disambiguating labels applied to the
    construct unless with_labels(True) is called first.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 该语句默认情况下不会对构造应用歧义标签，除非首先调用 with_labels(True)。
- en: '[PRE102]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), embedded within an [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias").
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 表示的完整 SELECT 语句，嵌入在一个
    [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    中。
- en: Eager JOIN generation within the query is disabled.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 查询中禁用了急切的 JOIN 生成。
- en: See also
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery") - v2 comparable method.'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery") - v2 可比较方法。'
- en: 'Parameters:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – string name to be assigned as the alias; this is passed through to
    [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"). If `None`, a name will be deterministically
    generated at compile time.'
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 要分配为别名的字符串名称；这将传递给 [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")。如果为 `None`，则在编译时将确定性地生成一个名称。'
- en: '`with_labels` – if True, [`with_labels()`](#sqlalchemy.orm.Query.with_labels
    "sqlalchemy.orm.Query.with_labels") will be called on the [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") first to apply table-qualified labels to all columns.'
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_labels` – 如果为 True，则首先将 [`with_labels()`](#sqlalchemy.orm.Query.with_labels
    "sqlalchemy.orm.Query.with_labels") 应用于 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")，以将表限定标签应用于所有列。'
- en: '`reduce_columns` – if True, [`Select.reduce_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.reduce_columns
    "sqlalchemy.sql.expression.Select.reduce_columns") will be called on the resulting
    [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, to remove same-named columns where one also refers to the other via
    foreign key or WHERE clause equivalence.'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reduce_columns` – 如果为 True，则将调用 [`Select.reduce_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.reduce_columns
    "sqlalchemy.sql.expression.Select.reduce_columns") 来删除结果 [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造中的同名列，其中一个还通过外键或 WHERE 子句等价关系引用另一个。'
- en: '[PRE103]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '*inherited from the* [`HasSuffixes.suffix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with") *method of* [`HasSuffixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes")'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasSuffixes.suffix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with") *方法* [`HasSuffixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes")'
- en: Add one or more expressions following the statement as a whole.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 将作为整个语句后的一个或多个表达式添加。
- en: This is used to support backend-specific suffix keywords on certain constructs.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于支持特定于后端的后缀关键字在某些构造上。
- en: 'E.g.:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE104]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Multiple suffixes can be specified by multiple calls to [`HasSuffixes.suffix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with").
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过多次调用 [`HasSuffixes.suffix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with") 来指定多个后缀。
- en: 'Parameters:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*suffixes` – textual or [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the target clause.'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*suffixes` – 将在目标子句后呈现的文本或 [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 构造。'
- en: '`dialect` – Optional string dialect name which will limit rendering of this
    suffix to only that dialect.'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 可选的字符串方言名称，将限制仅将此后缀呈现为该方言。'
- en: '[PRE105]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: return a tuple-typed form of this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query").
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 返回这个[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")的元组类型形式。
- en: This method invokes the [`Query.only_return_tuples()`](#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples") method with a value of `True`, which
    by itself ensures that this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    will always return [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, even if the query is made against a single entity. It then also at the
    typing level will return a “typed” query, if possible, that will type result rows
    as `Tuple` objects with typed elements.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法调用[`Query.only_return_tuples()`](#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples")方法，并将其值设置为`True`，这本身就确保了这个[`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")总是返回[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象，即使查询是针对单个实体的。然后，它还会在类型级别返回一个“类型化”的查询，如果可能的话，该查询将将结果行类型化为具有类型的元组对象。
- en: This method can be compared to the [`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") method, which returns “self”, but from a typing
    perspective returns an object that will yield typed `Tuple` objects for results.
    Typing takes effect only if this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object is a typed query object already.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可以与[`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples")方法进行比较，该方法返回“self”，但从类型的角度来看，返回一个将产生带有类型的`Tuple`对象的对象。只有当这个[`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象已经是一个类型化的查询对象时，类型才会生效。
- en: New in version 2.0.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: See also
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") - v2 equivalent method.'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") - v2等效方法。'
- en: '[PRE106]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Produce a UNION of this Query against one or more queries.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个或多个查询执行UNION。
- en: 'e.g.:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE107]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'The method accepts multiple Query objects so as to control the level of nesting.
    A series of `union()` calls such as:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法接受多个查询对象，以控制嵌套的级别。一系列`union()`调用，如下所示：
- en: '[PRE108]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'will nest on each `union()`, and produces:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 将在每个`union()`上进行嵌套，并生成：
- en: '[PRE109]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Whereas:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 而：
- en: '[PRE110]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'produces:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 生成：
- en: '[PRE111]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Note that many database backends do not allow ORDER BY to be rendered on a query
    called within UNION, EXCEPT, etc. To disable all ORDER BY clauses including those
    configured on mappers, issue `query.order_by(None)` - the resulting [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object will not render ORDER BY within its SELECT statement.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，许多数据库后端不允许在UNION、EXCEPT等内部调用的查询上渲染ORDER BY。要禁用所有ORDER BY子句，包括在映射器上配置的子句，请发出`query.order_by(None)`
    - 结果的[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象将不会在其SELECT语句中渲染ORDER
    BY。
- en: See also
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.union()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.union
    "sqlalchemy.sql.expression.Select.union") - v2 equivalent method.'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.union()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.union
    "sqlalchemy.sql.expression.Select.union") - v2等效方法。'
- en: '[PRE112]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Produce a UNION ALL of this Query against one or more queries.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个或多个查询执行UNION ALL。
- en: Works the same way as `Query.union()`. See that method for usage examples.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Query.union()`的工作方式相同。请参阅该方法以获取用法示例。
- en: See also
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.union_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.union_all
    "sqlalchemy.sql.expression.Select.union_all") - v2 equivalent method.'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.union_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.union_all
    "sqlalchemy.sql.expression.Select.union_all") - v2等效方法。'
- en: '[PRE113]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Perform an UPDATE with an arbitrary WHERE clause.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任意WHERE子句执行UPDATE。
- en: Updates rows matched by this query in the database.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 更新数据库中与此查询匹配的行。
- en: 'E.g.:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE114]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Warning
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: See the section [ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)
    for important caveats and warnings, including limitations when using arbitrary
    UPDATE and DELETE with mapper inheritance configurations.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[ORM启用的INSERT、UPDATE和DELETE语句](dml.html#orm-expression-update-delete)一节，了解重要的警告和注意事项，包括在使用任意UPDATE和DELETE与映射器继承配置时的限制。
- en: 'Parameters:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`values` – a dictionary with attributes names, or alternatively mapped attributes
    or SQL expressions, as keys, and literal values or sql expressions as values.
    If [parameter-ordered mode](../../tutorial/data_update.html#tutorial-parameter-ordered-updates)
    is desired, the values can be passed as a list of 2-tuples; this requires that
    the [`update.preserve_parameter_order`](../../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update") flag is passed to the [`Query.update.update_args`](#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update") dictionary as well.'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values` – 一个包含属性名称的字典，或者作为键的映射属性或 SQL 表达式，以及作为值的文字值或 SQL 表达式。如果希望使用 [参数排序模式](../../tutorial/data_update.html#tutorial-parameter-ordered-updates)，则值可以作为
    2 元组的列表传递；这要求将 [`update.preserve_parameter_order`](../../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update") 标志也传递给 [`Query.update.update_args`](#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update") 字典。'
- en: '`synchronize_session` – chooses the strategy to update the attributes on objects
    in the session. See the section [ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)
    for a discussion of these strategies.'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`synchronize_session` – 选择在会话中更新对象属性的策略。参见 [ORM-Enabled INSERT, UPDATE, and
    DELETE statements](dml.html#orm-expression-update-delete) 章节，讨论这些策略。'
- en: '`update_args` – Optional dictionary, if present will be passed to the underlying
    [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    construct as the `**kw` for the object. May be used to pass dialect-specific arguments
    such as `mysql_limit`, as well as other special arguments such as [`update.preserve_parameter_order`](../../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update").'
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update_args` – 可选字典，如果存在，则会作为对象的 [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 构造函数的 `**kw` 参数传递给底层。可以用于传递特定于方言的参数，如 `mysql_limit`，以及其他特殊参数，如
    [`update.preserve_parameter_order`](../../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update")。'
- en: 'Returns:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the count of rows matched as returned by the database’s “row count” feature.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库的“行计数”功能返回的匹配行数。
- en: See also
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)'
- en: '[PRE115]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Return a scalar result corresponding to the given column expression.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与给定列表达式对应的标量结果。
- en: 'Deprecated since version 1.4: [`Query.value()`](#sqlalchemy.orm.Query.value
    "sqlalchemy.orm.Query.value") is deprecated and will be removed in a future release.
    Please use [`Query.with_entities()`](#sqlalchemy.orm.Query.with_entities "sqlalchemy.orm.Query.with_entities")
    in combination with [`Query.scalar()`](#sqlalchemy.orm.Query.scalar "sqlalchemy.orm.Query.scalar")'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起弃用：[`Query.value()`](#sqlalchemy.orm.Query.value "sqlalchemy.orm.Query.value")
    已弃用，并将在将来的版本中删除。请结合使用 [`Query.with_entities()`](#sqlalchemy.orm.Query.with_entities
    "sqlalchemy.orm.Query.with_entities") 和 [`Query.scalar()`](#sqlalchemy.orm.Query.scalar
    "sqlalchemy.orm.Query.scalar")。
- en: '[PRE116]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Return an iterator yielding result tuples corresponding to the given list of
    columns
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个迭代器，生成与给定列列表对应的结果元组。
- en: 'Deprecated since version 1.4: [`Query.values()`](#sqlalchemy.orm.Query.values
    "sqlalchemy.orm.Query.values") is deprecated and will be removed in a future release.
    Please use [`Query.with_entities()`](#sqlalchemy.orm.Query.with_entities "sqlalchemy.orm.Query.with_entities")'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起弃用：[`Query.values()`](#sqlalchemy.orm.Query.values "sqlalchemy.orm.Query.values")
    已弃用，并将在将来的版本中删除。请使用 [`Query.with_entities()`](#sqlalchemy.orm.Query.with_entities
    "sqlalchemy.orm.Query.with_entities")。
- en: '[PRE117]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: A synonym for [`Query.filter()`](#sqlalchemy.orm.Query.filter "sqlalchemy.orm.Query.filter").
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.filter()`](#sqlalchemy.orm.Query.filter "sqlalchemy.orm.Query.filter")
    的别名。'
- en: New in version 1.4.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: See also
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Select.where()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") - v2 equivalent method.'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.where()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") - v2 等效方法。'
- en: '[PRE118]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: A readonly attribute which returns the current WHERE criterion for this Query.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此查询的当前 WHERE 条件的只读属性。
- en: This returned value is a SQL expression construct, or `None` if no criterion
    has been established.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的值是一个 SQL 表达式构造，如果没有建立条件，则为 `None`。
- en: See also
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Select.whereclause`](../../core/selectable.html#sqlalchemy.sql.expression.Select.whereclause
    "sqlalchemy.sql.expression.Select.whereclause") - v2 equivalent property.'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.whereclause`](../../core/selectable.html#sqlalchemy.sql.expression.Select.whereclause
    "sqlalchemy.sql.expression.Select.whereclause") - v2 等效属性。'
- en: '[PRE119]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") replacing
    the SELECT list with the given entities.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用给定实体替换 SELECT 列表的新[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")。
- en: 'e.g.:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE120]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: See also
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.with_only_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - v2 comparable method.'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.with_only_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - v2 可比较方法。'
- en: '[PRE121]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") with the
    specified options for the `FOR UPDATE` clause.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个具有指定`FOR UPDATE`子句选项的新[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")。
- en: The behavior of this method is identical to that of [`GenerativeSelect.with_for_update()`](../../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update"). When called with
    no arguments, the resulting `SELECT` statement will have a `FOR UPDATE` clause
    appended. When additional arguments are specified, backend-specific options such
    as `FOR UPDATE NOWAIT` or `LOCK IN SHARE MODE` can take effect.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的行为与[`GenerativeSelect.with_for_update()`](../../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update")相同。当没有参数调用时，生成的 `SELECT`
    语句将附加一个 `FOR UPDATE` 子句。当指定了额外的参数时，如 `FOR UPDATE NOWAIT` 或 `LOCK IN SHARE MODE`，特定于后端的选项会生效。
- en: 'E.g.:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE122]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'The above query on a PostgreSQL backend will render like:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 后端上执行上述查询会呈现如下：
- en: '[PRE123]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Warning
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Using `with_for_update` in the context of eager loading relationships is not
    officially supported or recommended by SQLAlchemy and may not work with certain
    queries on various database backends. When `with_for_update` is successfully used
    with a query that involves [`joinedload()`](relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload"), SQLAlchemy will attempt to emit SQL that locks all
    involved tables.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`with_for_update`来进行急加载关系时，它并不受 SQLAlchemy 官方支持或推荐，并且可能无法与各种数据库后端上的某些查询一起正常工作。当成功使用`with_for_update`与涉及到[`joinedload()`](relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")的查询时，SQLAlchemy 将尝试生成锁定所有涉及的表的 SQL。
- en: Note
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is generally a good idea to combine the use of the [`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") method when using the [`Query.with_for_update()`](#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update") method. The purpose of [`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") is to force all the data read from the
    SELECT to be populated into the ORM objects returned, even if these objects are
    already in the [identity map](../../glossary.html#term-identity-map).
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在使用[`Query.with_for_update()`](#sqlalchemy.orm.Query.with_for_update "sqlalchemy.orm.Query.with_for_update")方法时，结合使用[`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")方法是一个好主意。[`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")的目的是强制将从 SELECT 中读取的所有数据都填充到返回的 ORM 对象中，即使这些对象已经存在于[标识映射](../../glossary.html#term-identity-map)中。
- en: See also
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.with_for_update()`](../../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") - Core level method
    with full argument and behavioral description.'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.with_for_update()`](../../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") - 具有完整参数和行为描述的核心级方法。'
- en: '[`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing "sqlalchemy.orm.Query.populate_existing")
    - overwrites attributes of objects already loaded in the identity map.'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing "sqlalchemy.orm.Query.populate_existing")
    - 覆盖已加载到标识映射中的对象的属性。'
- en: '[PRE124]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '*inherited from the* `HasHints.with_hint()` *method of* `HasHints`'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasHints.with_hint()` *方法的* `HasHints`'
- en: Add an indexing or other executional context hint for the given selectable to
    this [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    or other selectable object.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定的可选对象添加索引或其他执行上下文提示到这个[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")或其他可选对象中。
- en: 'The text of the hint is rendered in the appropriate location for the database
    backend in use, relative to the given [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") passed as the `selectable` argument. The dialect
    implementation typically uses Python string substitution syntax with the token
    `%(name)s` to render the name of the table or alias. E.g. when using Oracle, the
    following:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 提示的文本将根据正在使用的数据库后端在给定的 [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或 [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") 中的适当位置进行渲染。方言实现通常使用 Python 字符串替换语法，其中令牌 `%(name)s`
    用于呈现表或别名的名称。例如，在使用 Oracle 时，以下内容：
- en: '[PRE125]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Would render SQL as:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染 SQL 如下：
- en: '[PRE126]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'The `dialect_name` option will limit the rendering of a particular hint to
    a particular backend. Such as, to add hints for both Oracle and Sybase simultaneously:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '`dialect_name` 选项将限制特定后端的特定提示的渲染。例如，同时为 Oracle 和 Sybase 添加提示：'
- en: '[PRE127]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: See also
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.with_statement_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint")'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.with_statement_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint")'
- en: '[PRE128]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Deprecated since version 2.0: The [`Query.with_labels()`](#sqlalchemy.orm.Query.with_labels
    "sqlalchemy.orm.Query.with_labels") and [`Query.apply_labels()`](#sqlalchemy.orm.Query.apply_labels
    "sqlalchemy.orm.Query.apply_labels") method is considered legacy as of the 1.x
    series of SQLAlchemy and becomes a legacy construct in 2.0\. Use set_label_style(LABEL_STYLE_TABLENAME_PLUS_COL)
    instead. (Background on SQLAlchemy 2.0 at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2.0 版本起弃用：[`Query.with_labels()`](#sqlalchemy.orm.Query.with_labels "sqlalchemy.orm.Query.with_labels")
    和 [`Query.apply_labels()`](#sqlalchemy.orm.Query.apply_labels "sqlalchemy.orm.Query.apply_labels")
    方法在 SQLAlchemy 1.x 系列中被视为遗留，且在 2.0 版本中成为遗留构造。请改用 set_label_style(LABEL_STYLE_TABLENAME_PLUS_COL)。（关于
    SQLAlchemy 2.0 的背景信息请参见：[SQLAlchemy 2.0 - 主要迁移指南](../../changelog/migration_20.html)）
- en: '[PRE129]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Add filtering criterion that relates the given instance to a child object or
    collection, using its attribute state as well as an established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 添加筛选条件，将给定实例与子对象或集合关联起来，使用其属性状态以及已建立的 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 配置。
- en: 'Deprecated since version 2.0: The [`Query.with_parent()`](#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent") method is considered legacy as of the 1.x
    series of SQLAlchemy and becomes a legacy construct in 2.0\. Use the [`with_parent()`](api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent") standalone construct. (Background on SQLAlchemy
    2.0 at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2.0 版本起弃用：[`Query.with_parent()`](#sqlalchemy.orm.Query.with_parent "sqlalchemy.orm.Query.with_parent")
    方法在 SQLAlchemy 1.x 系列中被视为遗留，且在 2.0 版本中成为遗留构造。请使用独立构造的 [`with_parent()`](api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent")。（关于 SQLAlchemy 2.0 的背景信息请参见：[SQLAlchemy 2.0 - 主要迁移指南](../../changelog/migration_20.html)）
- en: The method uses the [`with_parent()`](api.html#sqlalchemy.orm.with_parent "sqlalchemy.orm.with_parent")
    function to generate the clause, the result of which is passed to [`Query.filter()`](#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter").
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法使用 [`with_parent()`](api.html#sqlalchemy.orm.with_parent "sqlalchemy.orm.with_parent")
    函数生成子句，其结果传递给 [`Query.filter()`](#sqlalchemy.orm.Query.filter "sqlalchemy.orm.Query.filter")。
- en: Parameters are the same as [`with_parent()`](api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent"), with the exception that the given property can
    be None, in which case a search is performed against this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object’s target mapper.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 参数与 [`with_parent()`](api.html#sqlalchemy.orm.with_parent "sqlalchemy.orm.with_parent")
    相同，唯一的例外是给定属性可以为 None，在这种情况下，将针对此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象的目标映射器执行搜索。
- en: 'Parameters:'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – An instance which has some [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 具有一些 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 的实例。'
- en: '`property` – Class bound attribute which indicates what relationship from the
    instance should be used to reconcile the parent/child relationship.'
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`property` – 表示应使用实例哪个关系来协调父/子关系的类绑定属性。'
- en: '`from_entity` – Entity in which to consider as the left side. This defaults
    to the “zero” entity of the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    itself.'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from_entity` – 要考虑为左侧的实体。默认为[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")本身的“零”实体。'
- en: '[PRE130]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Return a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") that will use
    the given [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个将使用给定[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的[`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")。
- en: 'While the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object is
    normally instantiated using the [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") method, it is legal to build the [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") directly without necessarily using a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). Such a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, or any [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") already
    associated with a different [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), can produce a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object associated with a target session using this method:'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象通常是使用[`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")方法实例化的，但也可以直接构建[`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")而无需必然使用[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。这样的[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象，或者已与不同[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")关联的任何[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象，可以使用此方法生成一个与目标会话关联的新[`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象：
- en: '[PRE131]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '*inherited from the* `HasHints.with_statement_hint()` *method of* `HasHints`'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasHints.with_statement_hint()` *方法的* `HasHints`'
- en: Add a statement hint to this [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") or other selectable object.
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 为此[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")或其他可选择的对象添加语句提示。
- en: This method is similar to [`Select.with_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") except that it does not require
    an individual table, and instead applies to the statement as a whole.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法类似于[`Select.with_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint")，不过不需要单独的表，而是适用于整个语句。
- en: Hints here are specific to the backend database and may include directives such
    as isolation levels, file directives, fetch directives, etc.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的提示是特定于后端数据库的，并且可能包括隔离级别、文件指令、提取指令等指令。
- en: See also
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.with_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint")'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.with_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint")'
- en: '[`Select.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.prefix_with
    "sqlalchemy.sql.expression.Select.prefix_with") - generic SELECT prefixing which
    also can suit some database-specific HINT syntaxes such as MySQL optimizer hints'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.prefix_with
    "sqlalchemy.sql.expression.Select.prefix_with") - 通用的SELECT前缀，也可以适用于某些数据库特定的HINT语法，如MySQL优化器提示'
- en: '[PRE133]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object
    transformed by the given function.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 通过给定的函数返回一个经过转换的新[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象。
- en: 'E.g.:'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE134]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: This allows ad-hoc recipes to be created for [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许为[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象创建临时配方。
- en: '[PRE135]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Yield only `count` rows at a time.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 一次只产出`count`行。
- en: The purpose of this method is when fetching very large result sets (> 10K rows),
    to batch results in sub-collections and yield them out partially, so that the
    Python interpreter doesn’t need to declare very large areas of memory which is
    both time consuming and leads to excessive memory use. The performance from fetching
    hundreds of thousands of rows can often double when a suitable yield-per setting
    (e.g. approximately 1000) is used, even with DBAPIs that buffer rows (which are
    most).
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的目的是在获取非常大的结果集（> 10K行）时，将结果批处理到子集合中并部分地将其产出，以便Python解释器不需要声明非常大的内存区域，这既费时又导致内存使用过多。当使用合适的产出设置（例如大约1000）时，即使使用缓冲行的DBAPI（大多数情况下都是），从获取数十万行的性能通常也会提高一倍。
- en: As of SQLAlchemy 1.4, the [`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") method is equivalent to using the `yield_per`
    execution option at the ORM level. See the section [Fetching Large Result Sets
    with Yield Per](api.html#orm-queryguide-yield-per) for further background on this
    option.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 从SQLAlchemy 1.4开始，[`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per "sqlalchemy.orm.Query.yield_per")方法等同于在ORM级别使用`yield_per`执行选项。有关此选项的更多背景信息，请参阅[使用Yield
    Per获取大型结果集](api.html#orm-queryguide-yield-per)部分。
- en: See also
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Fetching Large Result Sets with Yield Per](api.html#orm-queryguide-yield-per)'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用Yield Per获取大型结果集](api.html#orm-queryguide-yield-per)'
- en: ORM-Specific Query Constructs
  id: totrans-605
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ORM特定查询构造
- en: This section has moved to [Additional ORM API Constructs](api.html#queryguide-additional).
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 本节已移至[附加ORM API构造](api.html#queryguide-additional)。
- en: The Query Object
  id: totrans-607
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询对象
- en: '[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") is produced in terms
    of a given [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    using the [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") method:'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")是根据给定的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")使用[`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")方法生成的：'
- en: '[PRE136]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Following is the full interface for the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象的完整接口。
- en: '| Object Name | Description |'
  id: totrans-611
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-612
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Query](#sqlalchemy.orm.Query) | ORM-level SQL construction object. |'
  id: totrans-613
  prefs: []
  type: TYPE_TB
  zh: '| [Query](#sqlalchemy.orm.Query) | ORM级别的SQL构造对象。 |'
- en: '[PRE137]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: ORM-level SQL construction object.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: ORM级别的SQL构造对象。
- en: Legacy Feature
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留功能
- en: The ORM [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object is a
    legacy construct as of SQLAlchemy 2.0\. See the notes at the top of [Legacy Query
    API](#) for an overview, including links to migration documentation.
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 'ORM [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象是SQLAlchemy 2.0的遗留构造。请参阅[遗留查询API](#)顶部的注释，包括迁移文档的链接。 '
- en: '[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") objects are normally
    initially generated using the [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") method of [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), and in less common cases by instantiating the [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") directly and associating with a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") using the [`Query.with_session()`](#sqlalchemy.orm.Query.with_session
    "sqlalchemy.orm.Query.with_session") method.'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 对象通常最初是使用[`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")方法从[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")生成的，并在较少的情况下通过直接实例化[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")并使用[`Query.with_session()`](#sqlalchemy.orm.Query.with_session
    "sqlalchemy.orm.Query.with_session")方法与[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")关联。'
- en: '**Members**'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.orm.Query.__init__), [add_column()](#sqlalchemy.orm.Query.add_column),
    [add_columns()](#sqlalchemy.orm.Query.add_columns), [add_entity()](#sqlalchemy.orm.Query.add_entity),
    [all()](#sqlalchemy.orm.Query.all), [apply_labels()](#sqlalchemy.orm.Query.apply_labels),
    [as_scalar()](#sqlalchemy.orm.Query.as_scalar), [autoflush()](#sqlalchemy.orm.Query.autoflush),
    [column_descriptions](#sqlalchemy.orm.Query.column_descriptions), [correlate()](#sqlalchemy.orm.Query.correlate),
    [count()](#sqlalchemy.orm.Query.count), [cte()](#sqlalchemy.orm.Query.cte), [delete()](#sqlalchemy.orm.Query.delete),
    [distinct()](#sqlalchemy.orm.Query.distinct), [enable_assertions()](#sqlalchemy.orm.Query.enable_assertions),
    [enable_eagerloads()](#sqlalchemy.orm.Query.enable_eagerloads), [except_()](#sqlalchemy.orm.Query.except_),
    [except_all()](#sqlalchemy.orm.Query.except_all), [execution_options()](#sqlalchemy.orm.Query.execution_options),
    [exists()](#sqlalchemy.orm.Query.exists), [filter()](#sqlalchemy.orm.Query.filter),
    [filter_by()](#sqlalchemy.orm.Query.filter_by), [first()](#sqlalchemy.orm.Query.first),
    [from_statement()](#sqlalchemy.orm.Query.from_statement), [get()](#sqlalchemy.orm.Query.get),
    [get_children()](#sqlalchemy.orm.Query.get_children), [get_execution_options()](#sqlalchemy.orm.Query.get_execution_options),
    [get_label_style](#sqlalchemy.orm.Query.get_label_style), [group_by()](#sqlalchemy.orm.Query.group_by),
    [having()](#sqlalchemy.orm.Query.having), [instances()](#sqlalchemy.orm.Query.instances),
    [intersect()](#sqlalchemy.orm.Query.intersect), [intersect_all()](#sqlalchemy.orm.Query.intersect_all),
    [is_single_entity](#sqlalchemy.orm.Query.is_single_entity), [join()](#sqlalchemy.orm.Query.join),
    [label()](#sqlalchemy.orm.Query.label), [lazy_loaded_from](#sqlalchemy.orm.Query.lazy_loaded_from),
    [limit()](#sqlalchemy.orm.Query.limit), [merge_result()](#sqlalchemy.orm.Query.merge_result),
    [offset()](#sqlalchemy.orm.Query.offset), [one()](#sqlalchemy.orm.Query.one),
    [one_or_none()](#sqlalchemy.orm.Query.one_or_none), [only_return_tuples()](#sqlalchemy.orm.Query.only_return_tuples),
    [options()](#sqlalchemy.orm.Query.options), [order_by()](#sqlalchemy.orm.Query.order_by),
    [outerjoin()](#sqlalchemy.orm.Query.outerjoin), [params()](#sqlalchemy.orm.Query.params),
    [populate_existing()](#sqlalchemy.orm.Query.populate_existing), [prefix_with()](#sqlalchemy.orm.Query.prefix_with),
    [reset_joinpoint()](#sqlalchemy.orm.Query.reset_joinpoint), [scalar()](#sqlalchemy.orm.Query.scalar),
    [scalar_subquery()](#sqlalchemy.orm.Query.scalar_subquery), [select_from()](#sqlalchemy.orm.Query.select_from),
    [selectable](#sqlalchemy.orm.Query.selectable), [set_label_style()](#sqlalchemy.orm.Query.set_label_style),
    [slice()](#sqlalchemy.orm.Query.slice), [statement](#sqlalchemy.orm.Query.statement),
    [subquery()](#sqlalchemy.orm.Query.subquery), [suffix_with()](#sqlalchemy.orm.Query.suffix_with),
    [tuples()](#sqlalchemy.orm.Query.tuples), [union()](#sqlalchemy.orm.Query.union),
    [union_all()](#sqlalchemy.orm.Query.union_all), [update()](#sqlalchemy.orm.Query.update),
    [value()](#sqlalchemy.orm.Query.value), [values()](#sqlalchemy.orm.Query.values),
    [where()](#sqlalchemy.orm.Query.where), [whereclause](#sqlalchemy.orm.Query.whereclause),
    [with_entities()](#sqlalchemy.orm.Query.with_entities), [with_for_update()](#sqlalchemy.orm.Query.with_for_update),
    [with_hint()](#sqlalchemy.orm.Query.with_hint), [with_labels()](#sqlalchemy.orm.Query.with_labels),
    [with_parent()](#sqlalchemy.orm.Query.with_parent), [with_session()](#sqlalchemy.orm.Query.with_session),
    [with_statement_hint()](#sqlalchemy.orm.Query.with_statement_hint), [with_transformation()](#sqlalchemy.orm.Query.with_transformation),
    [yield_per()](#sqlalchemy.orm.Query.yield_per)'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.orm.Query.__init__), [add_column()](#sqlalchemy.orm.Query.add_column),
    [add_columns()](#sqlalchemy.orm.Query.add_columns), [add_entity()](#sqlalchemy.orm.Query.add_entity),
    [all()](#sqlalchemy.orm.Query.all), [apply_labels()](#sqlalchemy.orm.Query.apply_labels),
    [as_scalar()](#sqlalchemy.orm.Query.as_scalar), [autoflush()](#sqlalchemy.orm.Query.autoflush),
    [column_descriptions](#sqlalchemy.orm.Query.column_descriptions), [correlate()](#sqlalchemy.orm.Query.correlate),
    [count()](#sqlalchemy.orm.Query.count), [cte()](#sqlalchemy.orm.Query.cte), [delete()](#sqlalchemy.orm.Query.delete),
    [distinct()](#sqlalchemy.orm.Query.distinct), [enable_assertions()](#sqlalchemy.orm.Query.enable_assertions),
    [enable_eagerloads()](#sqlalchemy.orm.Query.enable_eagerloads), [except_()](#sqlalchemy.orm.Query.except_),
    [except_all()](#sqlalchemy.orm.Query.except_all), [execution_options()](#sqlalchemy.orm.Query.execution_options),
    [exists()](#sqlalchemy.orm.Query.exists), [filter()](#sqlalchemy.orm.Query.filter),
    [filter_by()](#sqlalchemy.orm.Query.filter_by), [first()](#sqlalchemy.orm.Query.first),
    [from_statement()](#sqlalchemy.orm.Query.from_statement), [get()](#sqlalchemy.orm.Query.get),
    [get_children()](#sqlalchemy.orm.Query.get_children), [get_execution_options()](#sqlalchemy.orm.Query.get_execution_options),
    [get_label_style](#sqlalchemy.orm.Query.get_label_style), [group_by()](#sqlalchemy.orm.Query.group_by),
    [having()](#sqlalchemy.orm.Query.having), [instances()](#sqlalchemy.orm.Query.instances),
    [intersect()](#sqlalchemy.orm.Query.intersect), [intersect_all()](#sqlalchemy.orm.Query.intersect_all),
    [is_single_entity](#sqlalchemy.orm.Query.is_single_entity), [join()](#sqlalchemy.orm.Query.join),
    [label()](#sqlalchemy.orm.Query.label), [lazy_loaded_from](#sqlalchemy.orm.Query.lazy_loaded_from),
    [limit()](#sqlalchemy.orm.Query.limit), [merge_result()](#sqlalchemy.orm.Query.merge_result),
    [offset()](#sqlalchemy.orm.Query.offset), [one()](#sqlalchemy.orm.Query.one),
    [one_or_none()](#sqlalchemy.orm.Query.one_or_none), [only_return_tuples()](#sqlalchemy.orm.Query.only_return_tuples),
    [options()](#sqlalchemy.orm.Query.options), [order_by()](#sqlalchemy.orm.Query.order_by),
    [outerjoin()](#sqlalchemy.orm.Query.outerjoin), [params()](#sqlalchemy.orm.Query.params),
    [populate_existing()](#sqlalchemy.orm.Query.populate_existing), [prefix_with()](#sqlalchemy.orm.Query.prefix_with),
    [reset_joinpoint()](#sqlalchemy.orm.Query.reset_joinpoint), [scalar()](#sqlalchemy.orm.Query.scalar),
    [scalar_subquery()](#sqlalchemy.orm.Query.scalar_subquery), [select_from()](#sqlalchemy.orm.Query.select_from),
    [selectable](#sqlalchemy.orm.Query.selectable), [set_label_style()](#sqlalchemy.orm.Query.set_label_style),
    [slice()](#sqlalchemy.orm.Query.slice), [statement](#sqlalchemy.orm.Query.statement),
    [subquery()](#sqlalchemy.orm.Query.subquery), [suffix_with()](#sqlalchemy.orm.Query.suffix_with),
    [tuples()](#sqlalchemy.orm.Query.tuples), [union()](#sqlalchemy.orm.Query.union),
    [union_all()](#sqlalchemy.orm.Query.union_all), [update()](#sqlalchemy.orm.Query.update),
    [value()](#sqlalchemy.orm.Query.value), [values()](#sqlalchemy.orm.Query.values),
    [where()](#sqlalchemy.orm.Query.where), [whereclause](#sqlalchemy.orm.Query.whereclause),
    [with_entities()](#sqlalchemy.orm.Query.with_entities), [with_for_update()](#sqlalchemy.orm.Query.with_for_update),
    [with_hint()](#sqlalchemy.orm.Query.with_hint), [with_labels()](#sqlalchemy.orm.Query.with_labels),
    [with_parent()](#sqlalchemy.orm.Query.with_parent), [with_session()](#sqlalchemy.orm.Query.with_session),
    [with_statement_hint()](#sqlalchemy.orm.Query.with_statement_hint), [with_transformation()](#sqlalchemy.orm.Query.with_transformation),
    [yield_per()](#sqlalchemy.orm.Query.yield_per)'
- en: '**Class signature**'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    (`sqlalchemy.sql.expression._SelectFromElements`, `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    [`sqlalchemy.sql.expression.HasPrefixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), [`sqlalchemy.sql.expression.HasSuffixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes"), `sqlalchemy.sql.expression.HasHints`,
    `sqlalchemy.event.registry.EventTarget`, [`sqlalchemy.log.Identified`](../../core/internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified"), `sqlalchemy.sql.expression.Generative`, [`sqlalchemy.sql.expression.Executable`](../../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), `typing.Generic`)
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") (`sqlalchemy.sql.expression._SelectFromElements`,
    `sqlalchemy.sql.annotation.SupportsCloneAnnotations`, [`sqlalchemy.sql.expression.HasPrefixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes"), [`sqlalchemy.sql.expression.HasSuffixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes"), `sqlalchemy.sql.expression.HasHints`,
    `sqlalchemy.event.registry.EventTarget`, [`sqlalchemy.log.Identified`](../../core/internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified"), `sqlalchemy.sql.expression.Generative`, [`sqlalchemy.sql.expression.Executable`](../../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable"), `typing.Generic`)
- en: '[PRE138]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: Construct a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") directly.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 直接构造一个 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")。
- en: 'E.g.:'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE139]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'The above is equivalent to:'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 以上等同于：
- en: '[PRE140]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: 'Parameters:'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`entities` – a sequence of entities and/or SQL expressions.'
  id: totrans-630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entities` – 一个实体和/或 SQL 表达式序列。'
- en: '`session` – a [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    with which the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") will be
    associated. Optional; a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    can be associated with a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") generatively via the [`Query.with_session()`](#sqlalchemy.orm.Query.with_session
    "sqlalchemy.orm.Query.with_session") method as well.'
  id: totrans-631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session` – 一个 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")，将与
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 关联。可选；也可以通过 [`Query.with_session()`](#sqlalchemy.orm.Query.with_session
    "sqlalchemy.orm.Query.with_session") 方法将 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    与 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    关联。'
- en: See also
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query "sqlalchemy.orm.Session.query")'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query "sqlalchemy.orm.Session.query")'
- en: '[`Query.with_session()`](#sqlalchemy.orm.Query.with_session "sqlalchemy.orm.Query.with_session")'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.with_session()`](#sqlalchemy.orm.Query.with_session "sqlalchemy.orm.Query.with_session")'
- en: '[PRE141]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: Add a column expression to the list of result columns to be returned.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个列表达式添加到要返回的结果列列表中。
- en: 'Deprecated since version 1.4: [`Query.add_column()`](#sqlalchemy.orm.Query.add_column
    "sqlalchemy.orm.Query.add_column") is deprecated and will be removed in a future
    release. Please use [`Query.add_columns()`](#sqlalchemy.orm.Query.add_columns
    "sqlalchemy.orm.Query.add_columns")'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起已弃用：[`Query.add_column()`](#sqlalchemy.orm.Query.add_column "sqlalchemy.orm.Query.add_column")
    已弃用，将在未来的发布中删除。请使用 [`Query.add_columns()`](#sqlalchemy.orm.Query.add_columns "sqlalchemy.orm.Query.add_columns")
- en: '[PRE142]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Add one or more column expressions to the list of result columns to be returned.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个或多个列表达式添加到要返回的结果列列表中。
- en: See also
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.add_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns") - v2 comparable method.'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.add_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns") - v2 可比较的方法。'
- en: '[PRE143]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: add a mapped entity to the list of result columns to be returned.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个映射实体添加到要返回的结果列列表中。
- en: See also
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.add_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns") - v2 comparable method.'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.add_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.add_columns
    "sqlalchemy.sql.expression.Select.add_columns") - v2 可比较的方法。'
- en: '[PRE144]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: Return the results represented by this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    as a list.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 将此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 表示的结果作为列表返回。
- en: This results in an execution of the underlying SQL statement.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致底层 SQL 语句的执行。
- en: Warning
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object, when asked
    to return either a sequence or iterator that consists of full ORM-mapped entities,
    will **deduplicate entries based on primary key**. See the FAQ for more details.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 当询问 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 对象返回由全 ORM 映射的实体组成的序列或迭代器时，将**根据主键对条目进行去重**。有关更多详细信息，请参阅
    FAQ。
- en: See also
  id: totrans-651
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参阅
- en: ''
  id: totrans-652
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[My Query does not return the same number of objects as query.count() tells
    me - why?](../../faq/sessions.html#faq-query-deduplicating)'
  id: totrans-653
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[我的查询返回的对象数与 query.count() 告诉我的不同 - 为什么？](../../faq/sessions.html#faq-query-deduplicating)'
- en: See also
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.all()`](../../core/connections.html#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    - v2 comparable method.'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.all()`](../../core/connections.html#sqlalchemy.engine.Result.all "sqlalchemy.engine.Result.all")
    - v2 可比较的方法。'
- en: '[`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") - v2 comparable method.'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") - v2 可比较的方法。'
- en: '[PRE145]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'Deprecated since version 2.0: The [`Query.with_labels()`](#sqlalchemy.orm.Query.with_labels
    "sqlalchemy.orm.Query.with_labels") and [`Query.apply_labels()`](#sqlalchemy.orm.Query.apply_labels
    "sqlalchemy.orm.Query.apply_labels") method is considered legacy as of the 1.x
    series of SQLAlchemy and becomes a legacy construct in 2.0\. Use set_label_style(LABEL_STYLE_TABLENAME_PLUS_COL)
    instead. (Background on SQLAlchemy 2.0 at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2.0 版以来已弃用：[`Query.with_labels()`](#sqlalchemy.orm.Query.with_labels "sqlalchemy.orm.Query.with_labels")
    和 [`Query.apply_labels()`](#sqlalchemy.orm.Query.apply_labels "sqlalchemy.orm.Query.apply_labels")
    方法被视为 SQLAlchemy 1.x 系列的传统构造，并在 2.0 版中成为传统构造。请改用 set_label_style(LABEL_STYLE_TABLENAME_PLUS_COL)。
    (有关 SQLAlchemy 2.0 的背景，请参阅：[SQLAlchemy 2.0 - 主要迁移指南](../../changelog/migration_20.html))
- en: '[PRE146]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), converted to a scalar subquery.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 将由此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 表示的完整 SELECT 语句转换为标量子查询。
- en: 'Deprecated since version 1.4: The [`Query.as_scalar()`](#sqlalchemy.orm.Query.as_scalar
    "sqlalchemy.orm.Query.as_scalar") method is deprecated and will be removed in
    a future release. Please refer to [`Query.scalar_subquery()`](#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery").'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4 版以来已弃用：[`Query.as_scalar()`](#sqlalchemy.orm.Query.as_scalar "sqlalchemy.orm.Query.as_scalar")
    方法已弃用，并将在将来的版本中删除。请参阅 [`Query.scalar_subquery()`](#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery")。
- en: '[PRE147]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Return a Query with a specific ‘autoflush’ setting.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 返回具有特定 'autoflush' 设置的查询。
- en: As of SQLAlchemy 1.4, the [`Query.autoflush()`](#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush") method is equivalent to using the `autoflush`
    execution option at the ORM level. See the section [Autoflush](api.html#orm-queryguide-autoflush)
    for further background on this option.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 自 SQLAlchemy 1.4 起，[`Query.autoflush()`](#sqlalchemy.orm.Query.autoflush "sqlalchemy.orm.Query.autoflush")
    方法等同于在 ORM 级别使用 `autoflush` 执行选项。有关此选项的更多背景，请参阅[自动刷新](api.html#orm-queryguide-autoflush)部分。
- en: '[PRE148]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: Return metadata about the columns which would be returned by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 返回的列的元数据。
- en: 'Format is a list of dictionaries:'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 格式是一个字典列表：
- en: '[PRE149]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: See also
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'This API is available using [2.0 style](../../glossary.html#term-2.0-style)
    queries as well, documented at:'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 此 API 也可以使用 [2.0 风格](../../glossary.html#term-2.0-style) 查询，在以下文档中有所记录：
- en: '[Inspecting entities and columns from ORM-enabled SELECT and DML statements](api.html#queryguide-inspection)'
  id: totrans-671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[检查来自启用 ORM 的 SELECT 和 DML 语句的实体和列](api.html#queryguide-inspection)'
- en: '[`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions")'
  id: totrans-672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions")'
- en: '[PRE150]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: Return a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") construct which
    will correlate the given FROM clauses to that of an enclosing [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") or [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select").
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个将给定的 FROM 子句与封闭的 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    或 [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    相关联的 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 构造。
- en: The method here accepts mapped classes, [`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") constructs, and [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") constructs as arguments, which are resolved into expression
    constructs, in addition to appropriate expression constructs.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的方法接受映射类、[`aliased()`](api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    构造和 [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    构造作为参数，它们会被解析为表达式构造，以及适当的表达式构造。
- en: The correlation arguments are ultimately passed to [`Select.correlate()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") after coercion to expression constructs.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 相关参数最终在转换为表达式构造后传递给 [`Select.correlate()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate")。
- en: The correlation arguments take effect in such cases as when `Query.from_self()`
    is used, or when a subquery as returned by [`Query.subquery()`](#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") is embedded in another [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 在诸如使用 `Query.from_self()` 或者当由 [`Query.subquery()`](#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") 返回的子查询嵌入到另一个 [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造中时，相关参数才会生效。
- en: See also
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.correlate()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") - v2 equivalent method.'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.correlate()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.correlate
    "sqlalchemy.sql.expression.Select.correlate") - v2 等效方法。'
- en: '[PRE151]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Return a count of rows this the SQL formed by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") would return.
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 生成的 SQL 所返回的行数的计数。
- en: 'This generates the SQL for this Query as follows:'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成此查询的 SQL 如下：
- en: '[PRE152]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: The above SQL returns a single row, which is the aggregate value of the count
    function; the [`Query.count()`](#sqlalchemy.orm.Query.count "sqlalchemy.orm.Query.count")
    method then returns that single integer value.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 SQL 返回单行，这是计数函数的聚合值；然后 [`Query.count()`](#sqlalchemy.orm.Query.count "sqlalchemy.orm.Query.count")
    方法返回该单个整数值。
- en: Warning
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: It is important to note that the value returned by count() is **not the same
    as the number of ORM objects that this Query would return from a method such as
    the .all() method**. The [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, when asked to return full entities, will **deduplicate entries based on
    primary key**, meaning if the same primary key value would appear in the results
    more than once, only one object of that primary key would be present. This does
    not apply to a query that is against individual columns.
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，count() 返回的值 **与此 Query 从 .all() 方法等返回的 ORM 对象数不同**。当 [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象被要求返回完整实体时，将根据主键去重，这意味着如果相同的主键值在结果中出现多次，则只会存在一个该主键的对象。这不适用于针对单个列的查询。
- en: See also
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[My Query does not return the same number of objects as query.count() tells
    me - why?](../../faq/sessions.html#faq-query-deduplicating)'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: '[我的查询返回的对象数量与 query.count() 告诉我的不同 - 为什么？](../../faq/sessions.html#faq-query-deduplicating)'
- en: 'For fine grained control over specific columns to count, to skip the usage
    of a subquery or otherwise control of the FROM clause, or to use other aggregate
    functions, use [`expression.func`](../../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") expressions in conjunction with [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"), i.e.:'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 要对特定列进行精细控制以进行计数，跳过子查询的使用或以其他方式控制 FROM 子句，或者使用其他聚合函数，请结合 [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") 中的 [`expression.func`](../../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") 表达式，例如：
- en: '[PRE153]'
  id: totrans-690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: See also
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[2.0 Migration - ORM Usage](../../changelog/migration_20.html#migration-20-query-usage)'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '[2.0 迁移 - ORM 使用](../../changelog/migration_20.html#migration-20-query-usage)'
- en: '[PRE154]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") represented as a common table expression (CTE).
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 表示的完整 SELECT 语句，表示为一个通用表达式（CTE）。
- en: Parameters and usage are the same as those of the [`SelectBase.cte()`](../../core/selectable.html#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte") method; see that method for further
    details.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 参数和用法与[`SelectBase.cte()`](../../core/selectable.html#sqlalchemy.sql.expression.SelectBase.cte
    "sqlalchemy.sql.expression.SelectBase.cte")方法相同；请参阅该方法以获取更多详细信息。
- en: 'Here is the [PostgreSQL WITH RECURSIVE example](https://www.postgresql.org/docs/current/static/queries-with.html).
    Note that, in this example, the `included_parts` cte and the `incl_alias` alias
    of it are Core selectables, which means the columns are accessed via the `.c.`
    attribute. The `parts_alias` object is an [`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") instance of the `Part` entity, so column-mapped attributes
    are available directly:'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是[PostgreSQL WITH RECURSIVE 示例](https://www.postgresql.org/docs/current/static/queries-with.html)。请注意，在此示例中，`included_parts`
    cte 和其别名`incl_alias`都是 Core 可选择项，这意味着可以通过`.c.`属性访问列。`parts_alias`对象是`Part`实体的[`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")实例，因此可以直接访问映射到列的属性：
- en: '[PRE155]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: See also
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.cte()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.cte
    "sqlalchemy.sql.expression.Select.cte") - v2 equivalent method.'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.cte()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.cte
    "sqlalchemy.sql.expression.Select.cte") - v2 等效方法。'
- en: '[PRE156]'
  id: totrans-700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: Perform a DELETE with an arbitrary WHERE clause.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任意 WHERE 子句执行 DELETE。
- en: Deletes rows matched by this query from the database.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库中删除此查询匹配的行。
- en: 'E.g.:'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE157]'
  id: totrans-704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: Warning
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: See the section [ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)
    for important caveats and warnings, including limitations when using bulk UPDATE
    and DELETE with mapper inheritance configurations.
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[ORM-Enabled INSERT、UPDATE 和 DELETE 语句](dml.html#orm-expression-update-delete)以获取重要的注意事项和警告，包括在使用
    mapper 继承配置时使用批量 UPDATE 和 DELETE 时的限制。
- en: 'Parameters:'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**synchronize_session** – chooses the strategy to update the attributes on
    objects in the session. See the section [ORM-Enabled INSERT, UPDATE, and DELETE
    statements](dml.html#orm-expression-update-delete) for a discussion of these strategies.'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: '**synchronize_session** – 选择更新会话中对象属性的策略。请参阅[ORM-Enabled INSERT、UPDATE 和 DELETE
    语句](dml.html#orm-expression-update-delete)部分，了解这些策略的讨论。'
- en: 'Returns:'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the count of rows matched as returned by the database’s “row count” feature.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 由数据库的“行计数”功能返回的匹配行数。
- en: See also
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM-Enabled INSERT、UPDATE 和 DELETE 语句](dml.html#orm-expression-update-delete)'
- en: '[PRE158]'
  id: totrans-713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Apply a `DISTINCT` to the query and return the newly resulting `Query`.
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 对查询应用`DISTINCT`并返回新结果的`Query`。
- en: Note
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The ORM-level [`distinct()`](#sqlalchemy.orm.Query.distinct "sqlalchemy.orm.Query.distinct")
    call includes logic that will automatically add columns from the ORDER BY of the
    query to the columns clause of the SELECT statement, to satisfy the common need
    of the database backend that ORDER BY columns be part of the SELECT list when
    DISTINCT is used. These columns *are not* added to the list of columns actually
    fetched by the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query"), however,
    so would not affect results. The columns are passed through when using the [`Query.statement`](#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") accessor, however.
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 级别的[`distinct()`](#sqlalchemy.orm.Query.distinct "sqlalchemy.orm.Query.distinct")调用包括逻辑，将查询的
    ORDER BY 中的列自动添加到 SELECT 语句的列子句中，以满足数据库后端的常见需求，即使用 DISTINCT 时，ORDER BY 列必须是 SELECT
    列的一部分。然而，这些列*不会*添加到实际由[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")获取的列列表中，因此不会影响结果。但是，在使用[`Query.statement`](#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement")访问器时，这些列会被传递。
- en: 'Deprecated since version 2.0: This logic is deprecated and will be removed
    in SQLAlchemy 2.0\. See [Using DISTINCT with additional columns, but only select
    the entity](../../changelog/migration_20.html#migration-20-query-distinct) for
    a description of this use case in 2.0.'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0 起已弃用：此逻辑已弃用，并将在 SQLAlchemy 2.0 中删除。请参阅[仅选择实体时使用 DISTINCT 添加额外列](../../changelog/migration_20.html#migration-20-query-distinct)以获取
    2.0 版中此用例的描述。
- en: See also
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.distinct()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct") - v2 equivalent method.'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.distinct()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.distinct
    "sqlalchemy.sql.expression.Select.distinct") - v2 等效方法。'
- en: 'Parameters:'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***expr** –'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: '***expr** –'
- en: optional column expressions. When present, the PostgreSQL dialect will render
    a `DISTINCT ON (<expressions>)` construct.
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的列表达式。当存在时，PostgreSQL 方言将渲染`DISTINCT ON (<expressions>)`结构。
- en: 'Deprecated since version 1.4: Using *expr in other dialects is deprecated and
    will raise [`CompileError`](../../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") in a future version.'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.4版弃用：在其他方言中使用*expr已弃用，并将在将来的版本中引发[`CompileError`](../../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")。
- en: '[PRE159]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: Control whether assertions are generated.
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 控制是否生成断言。
- en: When set to False, the returned Query will not assert its state before certain
    operations, including that LIMIT/OFFSET has not been applied when filter() is
    called, no criterion exists when get() is called, and no “from_statement()” exists
    when filter()/order_by()/group_by() etc. is called. This more permissive mode
    is used by custom Query subclasses to specify criterion or other modifiers outside
    of the usual usage patterns.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置为False时，返回的查询在执行某些操作之前不会断言其状态，包括在调用`filter()`时未应用LIMIT/OFFSET，在调用`get()`时不存在条件，以及在调用`filter()`/`order_by()`/`group_by()`时不存在“from_statement()”。
    此更宽松的模式由自定义查询子类使用，以指定通常用法模式之外的条件或其他修改器。
- en: Care should be taken to ensure that the usage pattern is even possible. A statement
    applied by from_statement() will override any criterion set by filter() or order_by(),
    for example.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 应注意确保使用模式是可行的。 例如，由`from_statement()`应用的语句将覆盖`filter()`或`order_by()`设置的任何条件。
- en: '[PRE160]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Control whether or not eager joins and subqueries are rendered.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 控制是否渲染急切连接和子查询。
- en: When set to False, the returned Query will not render eager joins regardless
    of [`joinedload()`](relationships.html#sqlalchemy.orm.joinedload "sqlalchemy.orm.joinedload"),
    [`subqueryload()`](relationships.html#sqlalchemy.orm.subqueryload "sqlalchemy.orm.subqueryload")
    options or mapper-level `lazy='joined'`/`lazy='subquery'` configurations.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置为False时，返回的查询不会渲染急切连接，而不管[`joinedload()`](relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")，[`subqueryload()`](relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload")选项或映射级别的`lazy='joined'`/`lazy='subquery'`配置。
- en: This is used primarily when nesting the Query’s statement into a subquery or
    other selectable, or when using [`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per").
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 主要用于将查询的语句嵌套到子查询或其他可选择项中，或者使用[`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")时。
- en: '[PRE161]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: Produce an EXCEPT of this Query against one or more queries.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个或多个查询产生此查询的差集。
- en: Works the same way as `Query.union()`. See that method for usage examples.
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Query.union()`的工作方式相同。 有关用法示例，请参见该方法。
- en: See also
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.except_()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.except_
    "sqlalchemy.sql.expression.Select.except_") - v2 equivalent method.'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.except_()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.except_
    "sqlalchemy.sql.expression.Select.except_") - v2等效方法。'
- en: '[PRE162]'
  id: totrans-737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Produce an EXCEPT ALL of this Query against one or more queries.
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个或多个查询产生此查询的全集。
- en: Works the same way as `Query.union()`. See that method for usage examples.
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Query.union()`的工作方式相同。 有关用法示例，请参见该方法。
- en: See also
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.except_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.except_all
    "sqlalchemy.sql.expression.Select.except_all") - v2 equivalent method.'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.except_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.except_all
    "sqlalchemy.sql.expression.Select.except_all") - v2等效方法。'
- en: '[PRE163]'
  id: totrans-742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Set non-SQL options which take effect during execution.
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 设置在执行期间生效的非SQL选项。
- en: 'Options allowed here include all of those accepted by [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), as well as a series of ORM
    specific options:'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 此处允许的选项包括[`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")接受的所有选项，以及一系列ORM特定选项：
- en: '`populate_existing=True` - equivalent to using [`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: '`populate_existing=True` - 相当于使用[`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '`autoflush=True|False` - equivalent to using [`Query.autoflush()`](#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush")'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: '`autoflush=True|False` - 相当于使用[`Query.autoflush()`](#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush")'
- en: '`yield_per=<value>` - equivalent to using [`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield_per=<value>` - 相当于使用[`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")'
- en: Note that the `stream_results` execution option is enabled automatically if
    the `Query.yield_per()` method or execution option is used.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果使用`Query.yield_per()`方法或执行选项，则`stream_results`执行选项会自动启用。
- en: 'New in version 1.4: - added ORM options to [`Query.execution_options()`](#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options")'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本中新增：- 在 [`Query.execution_options()`](#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options") 中添加了 ORM 选项
- en: The execution options may also be specified on a per execution basis when using
    [2.0 style](../../glossary.html#term-2.0-style) queries via the [`Session.execution_options`](../session_api.html#sqlalchemy.orm.Session.params.execution_options
    "sqlalchemy.orm.Session") parameter.
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [2.0 风格](../../glossary.html#term-2.0-style) 查询时，也可以在每次执行时指定执行选项，通过 [`Session.execution_options`](../session_api.html#sqlalchemy.orm.Session.params.execution_options
    "sqlalchemy.orm.Session") 参数。
- en: Warning
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") parameter should not be used
    at the level of individual ORM statement executions, as the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will not track objects from different schema translate
    maps within a single session. For multiple schema translate maps within the scope
    of a single [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    see [Horizontal Sharding](../examples.html#examples-sharding).
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 不应在单个 ORM 语句执行的级别使用 [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 参数，因为 [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 不会跟踪来自单个会话中的不同模式转换映射的对象。对于在单个 [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 范围内的多个模式转换映射，请参阅[水平分片](../examples.html#examples-sharding)。
- en: See also
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（即流式结果）](../../core/connections.html#engine-stream-results)'
- en: '[`Query.get_execution_options()`](#sqlalchemy.orm.Query.get_execution_options
    "sqlalchemy.orm.Query.get_execution_options")'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.get_execution_options()`](#sqlalchemy.orm.Query.get_execution_options
    "sqlalchemy.orm.Query.get_execution_options")'
- en: '[`Select.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.execution_options
    "sqlalchemy.sql.expression.Select.execution_options") - v2 equivalent method.'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.execution_options
    "sqlalchemy.sql.expression.Select.execution_options") - v2 相当的方法。'
- en: '[PRE164]'
  id: totrans-757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: A convenience method that turns a query into an EXISTS subquery of the form
    EXISTS (SELECT 1 FROM … WHERE …).
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方便的方法，将查询转换为 EXISTS 子查询的形式 EXISTS (SELECT 1 FROM … WHERE …)。
- en: 'e.g.:'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE165]'
  id: totrans-760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'Producing SQL similar to:'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 生成类似于以下 SQL：
- en: '[PRE166]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'The EXISTS construct is usually used in the WHERE clause:'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: EXISTS 构造通常用于 WHERE 子句中：
- en: '[PRE167]'
  id: totrans-764
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'Note that some databases such as SQL Server don’t allow an EXISTS expression
    to be present in the columns clause of a SELECT. To select a simple boolean value
    based on the exists as a WHERE, use [`literal()`](../../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal"):'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一些数据库（如 SQL Server）不允许在 SELECT 的列子句中出现 EXISTS 表达式。要根据 EXISTS 在 WHERE 中作为
    WHERE 子句的简单布尔值选择，请使用 [`literal()`](../../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal")：
- en: '[PRE168]'
  id: totrans-766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: See also
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.exists()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.exists
    "sqlalchemy.sql.expression.Select.exists") - v2 comparable method.'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.exists()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.exists
    "sqlalchemy.sql.expression.Select.exists") - v2 相当的方法。'
- en: '[PRE169]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: Apply the given filtering criterion to a copy of this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), using SQL expressions.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的过滤条件应用于此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 的副本，使用
    SQL 表达式。
- en: 'e.g.:'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE170]'
  id: totrans-772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'Multiple criteria may be specified as comma separated; the effect is that they
    will be joined together using the [`and_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") function:'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 可以指定多个条件，用逗号分隔；效果是它们将使用 [`and_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") 函数连接在一起：
- en: '[PRE171]'
  id: totrans-774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: The criterion is any SQL expression object applicable to the WHERE clause of
    a select. String expressions are coerced into SQL expression constructs via the
    [`text()`](../../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    construct.
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 条件可以是任何适用于 select WHERE 子句的 SQL 表达式对象。字符串表达式会通过 [`text()`](../../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造转换为 SQL 表达式结构。
- en: See also
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.filter_by()`](#sqlalchemy.orm.Query.filter_by "sqlalchemy.orm.Query.filter_by")
    - filter on keyword expressions.'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.filter_by()`](#sqlalchemy.orm.Query.filter_by "sqlalchemy.orm.Query.filter_by")
    - 使用关键字表达式进行过滤。'
- en: '[`Select.where()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") - v2 equivalent method.'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.where()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") - v2 相当的方法。'
- en: '[PRE172]'
  id: totrans-779
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: Apply the given filtering criterion to a copy of this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), using keyword expressions.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的过滤条件应用于此[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")的副本，使用关键字表达式。
- en: 'e.g.:'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE173]'
  id: totrans-782
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'Multiple criteria may be specified as comma separated; the effect is that they
    will be joined together using the [`and_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") function:'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 可以指定多个条件，用逗号分隔；效果是它们将使用[`and_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")函数连接在一起：
- en: '[PRE174]'
  id: totrans-784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: The keyword expressions are extracted from the primary entity of the query,
    or the last entity that was the target of a call to [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join").
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字表达式是从查询的主要实体中提取的，或者是最后一个被调用[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")的目标实体。
- en: See also
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.filter()`](#sqlalchemy.orm.Query.filter "sqlalchemy.orm.Query.filter")
    - filter on SQL expressions.'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.filter()`](#sqlalchemy.orm.Query.filter "sqlalchemy.orm.Query.filter")
    - 根据SQL表达式进行过滤。'
- en: '[`Select.filter_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.filter_by
    "sqlalchemy.sql.expression.Select.filter_by") - v2 comparable method.'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.filter_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.filter_by
    "sqlalchemy.sql.expression.Select.filter_by") - v2 相当的方法。'
- en: '[PRE175]'
  id: totrans-789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: Return the first result of this `Query` or None if the result doesn’t contain
    any row.
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此`Query`的第一个结果，如果结果不包含任何行，则返回`None`。
- en: first() applies a limit of one within the generated SQL, so that only one primary
    entity row is generated on the server side (note this may consist of multiple
    result rows if join-loaded collections are present).
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: first()在生成的SQL中应用了一个限制为一的限制，因此只在服务器端生成一个主实体行（请注意，如果存在联接加载的集合，则可能由多个结果行组成）。
- en: Calling [`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")
    results in an execution of the underlying query.
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 调用[`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")会导致基础查询的执行。
- en: See also
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one")'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one")'
- en: '[`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")'
- en: '[`Result.first()`](../../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first") - v2 comparable method.'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.first()`](../../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first") - v2 相当的方法。'
- en: '[`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") - v2 comparable method.'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalars()`](../../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") - v2 相当的方法。'
- en: '[PRE176]'
  id: totrans-798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Execute the given SELECT statement and return results.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 执行给定的SELECT语句并返回结果。
- en: This method bypasses all internal statement compilation, and the statement is
    executed without modification.
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法绕过所有内部语句编译，并且语句在不经修改的情况下执行。
- en: The statement is typically either a [`text()`](../../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") or [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, and should return the set of columns
    appropriate to the entity class represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 语句通常是[`text()`](../../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")或[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造，并且应返回适合此[`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")所代表的实体类的列集。
- en: See also
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.from_statement()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") - v2 comparable method.'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.from_statement()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") - v2 相当的方法。'
- en: '[PRE177]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的主键标识符返回一个实例，如果未找到则返回`None`。
- en: 'Deprecated since version 2.0: The [`Query.get()`](#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") method is considered legacy as of the 1.x series of
    SQLAlchemy and becomes a legacy construct in 2.0\. The method is now available
    as [`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    (Background on SQLAlchemy 2.0 at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本2.0起弃用：[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    方法被认为是SQLAlchemy 1.x系列的遗留功能，并在2.0版本中成为遗留构造。该方法现在作为 [`Session.get()`](../session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") 可用（有关SQLAlchemy 2.0的背景，请参见：[SQLAlchemy 2.0 - 主要迁移指南](../../changelog/migration_20.html)）
- en: 'E.g.:'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE178]'
  id: totrans-808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") is special
    in that it provides direct access to the identity map of the owning [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). If the given primary key identifier is present in the
    local identity map, the object is returned directly from this collection and no
    SQL is emitted, unless the object has been marked fully expired. If not present,
    a SELECT is performed in order to locate the object.'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") 在提供对所属
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    的标识映射的直接访问方面是特殊的。如果给定的主键标识符存在于本地标识映射中，则对象将直接从该集合返回，而不会发出SQL，除非对象已被标记为完全过期。如果不存在，则执行SELECT以定位对象。'
- en: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") also
    will perform a check if the object is present in the identity map and marked as
    expired - a SELECT is emitted to refresh the object as well as to ensure that
    the row is still present. If not, [`ObjectDeletedError`](../exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") is raised.'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") 也会检查对象是否存在于标识映射中并标记为过期
    - 发出一个SELECT来刷新对象以及确保行仍然存在。如果不是，[`ObjectDeletedError`](../exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") 被引发。'
- en: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") is only
    used to return a single mapped instance, not multiple instances or individual
    column constructs, and strictly on a single primary key value. The originating
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") must be constructed in
    this way, i.e. against a single mapped entity, with no additional filtering criterion.
    Loading options via [`Query.options()`](#sqlalchemy.orm.Query.options "sqlalchemy.orm.Query.options")
    may be applied however, and will be used if the object is not yet locally present.'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get") 仅用于返回单个映射实例，而不是多个实例或单个列构造，并且严格地基于单个主键值。源
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 必须以这种方式构造，即针对单个映射实体，没有额外的过滤条件。但是，可以通过[`Query.options()`](#sqlalchemy.orm.Query.options
    "sqlalchemy.orm.Query.options") 应用加载选项，并且如果对象尚未在本地存在，则将使用该选项。'
- en: 'Parameters:'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**ident** –'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: '**ident** –'
- en: A scalar, tuple, or dictionary representing the primary key. For a composite
    (e.g. multiple column) primary key, a tuple or dictionary should be passed.
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 代表主键的标量、元组或字典。对于复合（例如多列）主键，应传递元组或字典。
- en: 'For a single-column primary key, the scalar calling form is typically the most
    expedient. If the primary key of a row is the value “5”, the call looks like:'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单列主键，标量调用形式通常是最方便的。如果一行的主键是值“5”，则调用如下所示：
- en: '[PRE179]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: 'The tuple form contains primary key values typically in the order in which
    they correspond to the mapped [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object’s primary key columns, or if the [`Mapper.primary_key`](../mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") configuration parameter were used, in the order used
    for that parameter. For example, if the primary key of a row is represented by
    the integer digits “5, 10” the call would look like:'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 元组形式包含主键值，通常按照它们对应于映射的[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象的主键列的顺序，或者如果使用了[`Mapper.primary_key`](../mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") 配置参数，则按照该参数的顺序使用。例如，如果一行的主键由整数数字“5, 10”表示，调用将如下所示：
- en: '[PRE180]'
  id: totrans-818
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'The dictionary form should include as keys the mapped attribute names corresponding
    to each element of the primary key. If the mapped class has the attributes `id`,
    `version_id` as the attributes which store the object’s primary key value, the
    call would look like:'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 字典形式应将映射属性名称作为每个主键元素对应的键。如果映射类具有 `id`、`version_id` 作为存储对象主键值的属性，则调用如下：
- en: '[PRE181]'
  id: totrans-820
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: 'New in version 1.3: the [`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    method now optionally accepts a dictionary of attribute names to values in order
    to indicate a primary key identifier.'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3 中的新功能：[`Query.get()`](#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")
    方法现在可选地接受属性名称到值的字典，以指示主键标识符。
- en: 'Returns:'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The object instance, or `None`.
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 对象实例，或 `None`。
- en: '[PRE182]'
  id: totrans-824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '*inherited from the* `HasTraverseInternals.get_children()` *method of* `HasTraverseInternals`'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasTraverseInternals.get_children()` *方法的* `HasTraverseInternals`'
- en: Return immediate child `HasTraverseInternals` elements of this `HasTraverseInternals`.
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 `HasTraverseInternals` 的直接子级 `HasTraverseInternals` 元素。
- en: This is used for visit traversal.
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于访问遍历。
- en: '**kw may contain flags that change the collection that is returned, for example
    to return a subset of items in order to cut down on larger traversals, or to return
    child items from a different context (such as schema-level collections instead
    of clause-level).'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: '**kw 可能包含改变返回的集合的标志，例如为了减少更大的遍历而返回子集，或者从不同上下文（例如模式级别集合而不是从子句级别）返回子项。'
- en: '[PRE183]'
  id: totrans-829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: Get the non-SQL options which will take effect during execution.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 获取在执行期间生效的非 SQL 选项。
- en: New in version 1.3.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3 中的新功能。
- en: See also
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.execution_options()`](#sqlalchemy.orm.Query.execution_options "sqlalchemy.orm.Query.execution_options")'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.execution_options()`](#sqlalchemy.orm.Query.execution_options "sqlalchemy.orm.Query.execution_options")'
- en: '[`Select.get_execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.get_execution_options
    "sqlalchemy.sql.expression.Select.get_execution_options") - v2 comparable method.'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.get_execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.get_execution_options
    "sqlalchemy.sql.expression.Select.get_execution_options") - v2 可比较方法。'
- en: '[PRE184]'
  id: totrans-835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Retrieve the current label style.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 检索当前的标签样式。
- en: New in version 1.4.
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: See also
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.get_label_style()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.get_label_style
    "sqlalchemy.sql.expression.Select.get_label_style") - v2 equivalent method.'
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.get_label_style()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.get_label_style
    "sqlalchemy.sql.expression.Select.get_label_style") - v2 等效方法。'
- en: '[PRE185]'
  id: totrans-840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: Apply one or more GROUP BY criterion to the query and return the newly resulting
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query").
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 对查询应用一个或多个 GROUP BY 准则，并返回新生成的 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")。
- en: All existing GROUP BY settings can be suppressed by passing `None` - this will
    suppress any GROUP BY configured on mappers as well.
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现有的 GROUP BY 设置都可以通过传递 `None` 来抑制 - 这也会抑制映射器上配置的任何 GROUP BY。
- en: See also
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'These sections describe GROUP BY in terms of [2.0 style](../../glossary.html#term-2.0-style)
    invocation but apply to [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    as well:'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 这些部分描述了 GROUP BY 的 [2.0 风格](../../glossary.html#term-2.0-style) 调用，但同样适用于 [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")：
- en: '[Aggregate functions with GROUP BY / HAVING](../../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: '[带有 GROUP BY / HAVING 的聚合函数](../../tutorial/data_select.html#tutorial-group-by-w-aggregates)
    - 在 [SQLAlchemy 统一教程](../../tutorial/index.html#unified-tutorial) 中'
- en: '[Ordering or Grouping by a Label](../../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: '[按标签排序或分组](../../tutorial/data_select.html#tutorial-order-by-label) - 在 [SQLAlchemy
    统一教程](../../tutorial/index.html#unified-tutorial) 中'
- en: '[`Select.group_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by") - v2 equivalent method.'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.group_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.group_by
    "sqlalchemy.sql.expression.Select.group_by") - v2 等效方法。'
- en: '[PRE186]'
  id: totrans-848
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: Apply a HAVING criterion to the query and return the newly resulting [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 对查询应用 HAVING 准则，并返回新生成的 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")。
- en: '[`Query.having()`](#sqlalchemy.orm.Query.having "sqlalchemy.orm.Query.having")
    is used in conjunction with [`Query.group_by()`](#sqlalchemy.orm.Query.group_by
    "sqlalchemy.orm.Query.group_by").'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.having()`](#sqlalchemy.orm.Query.having "sqlalchemy.orm.Query.having")
    与 [`Query.group_by()`](#sqlalchemy.orm.Query.group_by "sqlalchemy.orm.Query.group_by")
    结合使用。'
- en: 'HAVING criterion makes it possible to use filters on aggregate functions like
    COUNT, SUM, AVG, MAX, and MIN, eg.:'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: HAVING 条件使得可以对像 COUNT、SUM、AVG、MAX 和 MIN 这样的聚合函数使用过滤器，例如：
- en: '[PRE187]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: See also
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Select.having()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.having
    "sqlalchemy.sql.expression.Select.having") - v2 equivalent method.'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.having()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.having
    "sqlalchemy.sql.expression.Select.having") - v2 等效方法。'
- en: '[PRE188]'
  id: totrans-855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: Return an ORM result given a [`CursorResult`](../../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") and [`QueryContext`](../internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext").
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定 [`CursorResult`](../../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") 和 [`QueryContext`](../internals.html#sqlalchemy.orm.QueryContext
    "sqlalchemy.orm.QueryContext") 的情况下返回 ORM 结果。
- en: 'Deprecated since version 2.0: The [`Query.instances()`](#sqlalchemy.orm.Query.instances
    "sqlalchemy.orm.Query.instances") method is deprecated and will be removed in
    a future release. Use the Select.from_statement() method or aliased() construct
    in conjunction with Session.execute() instead.'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0 起已弃用：[`Query.instances()`](#sqlalchemy.orm.Query.instances "sqlalchemy.orm.Query.instances")
    方法已弃用，并将在以后的版本中删除。请改用 Select.from_statement() 方法或与 Session.execute() 结合使用的 aliased()
    构造。
- en: '[PRE189]'
  id: totrans-858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: Produce an INTERSECT of this Query against one or more queries.
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 对此查询与一个或多个查询进行 INTERSECT 操作。
- en: Works the same way as `Query.union()`. See that method for usage examples.
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `Query.union()` 的工作方式相同。查看该方法以获取使用示例。
- en: See also
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Select.intersect()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.intersect
    "sqlalchemy.sql.expression.Select.intersect") - v2 equivalent method.'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.intersect()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.intersect
    "sqlalchemy.sql.expression.Select.intersect") - v2 等效方法。'
- en: '[PRE190]'
  id: totrans-863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: Produce an INTERSECT ALL of this Query against one or more queries.
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 对此查询与一个或多个查询进行 INTERSECT ALL 操作。
- en: Works the same way as `Query.union()`. See that method for usage examples.
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `Query.union()` 的工作方式相同。查看该方法以获取使用示例。
- en: See also
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Select.intersect_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.intersect_all
    "sqlalchemy.sql.expression.Select.intersect_all") - v2 equivalent method.'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.intersect_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.intersect_all
    "sqlalchemy.sql.expression.Select.intersect_all") - v2 等效方法。'
- en: '[PRE191]'
  id: totrans-868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: Indicates if this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") returns
    tuples or single entities.
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 返回元组还是单个实体。
- en: Returns True if this query returns a single entity for each instance in its
    result list, and False if this query returns a tuple of entities for each result.
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此查询为其结果列表中的每个实例返回单个实体，则返回 True，如果此查询为每个结果返回实体元组，则返回 False。
- en: New in version 1.3.11.
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.3.11 中新增。
- en: See also
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Query.only_return_tuples()`](#sqlalchemy.orm.Query.only_return_tuples "sqlalchemy.orm.Query.only_return_tuples")'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.only_return_tuples()`](#sqlalchemy.orm.Query.only_return_tuples "sqlalchemy.orm.Query.only_return_tuples")'
- en: '[PRE192]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Create a SQL JOIN against this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object’s criterion and apply generatively, returning the newly resulting [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 创建针对此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 对象的条件的 SQL JOIN，并以生成方式应用，返回新生成的
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")。
- en: '**Simple Relationship Joins**'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: '**简单关系连接**'
- en: 'Consider a mapping between two classes `User` and `Address`, with a relationship
    `User.addresses` representing a collection of `Address` objects associated with
    each `User`. The most common usage of [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") is to create a JOIN along this relationship, using
    the `User.addresses` attribute as an indicator for how this should occur:'
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑两个类 `User` 和 `Address` 之间的映射，其中关系 `User.addresses` 表示与每个 `User` 关联的 `Address`
    对象的集合。[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    的最常见用法是沿着这个关系创建 JOIN，使用 `User.addresses` 属性作为指示器来指示如何发生这种情况：
- en: '[PRE193]'
  id: totrans-878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: 'Where above, the call to [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    along `User.addresses` will result in SQL approximately equivalent to:'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，沿着 `User.addresses` 调用 [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    将导致大致等同于以下 SQL：
- en: '[PRE194]'
  id: totrans-880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: In the above example we refer to `User.addresses` as passed to [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") as the “on clause”, that is, it indicates how the
    “ON” portion of the JOIN should be constructed.
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们将`User.addresses`称为传递给 [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 的“on clause”，也就是说，它指示了“JOIN”的“ON”部分应如何构建。
- en: 'To construct a chain of joins, multiple [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") calls may be used. The relationship-bound attribute
    implies both the left and right side of the join at once:'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一系列连接，可以使用多个[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")调用。关系绑定的属性同时暗示连接的左侧和右侧：
- en: '[PRE195]'
  id: totrans-883
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: Note
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: as seen in the above example, **the order in which each call to the join() method
    occurs is important**. Query would not, for example, know how to join correctly
    if we were to specify `User`, then `Item`, then `Order`, in our chain of joins;
    in such a case, depending on the arguments passed, it may raise an error that
    it doesn’t know how to join, or it may produce invalid SQL in which case the database
    will raise an error. In correct practice, the [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method is invoked in such a way that lines up with
    how we would want the JOIN clauses in SQL to be rendered, and each call should
    represent a clear link from what precedes it.
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 如上例所示，**每次调用join()方法的顺序很重要**。例如，如果我们在连接链中指定`User`、然后是`Item`、然后是`Order`，那么Query不会正确知道如何连接；在这种情况下，根据传递的参数，它可能会引发一个无法连接的错误，或者它可能会生成无效的SQL，而数据库会引发一个错误。在正确的实践中，应以使得JOIN子句在SQL中呈现的方式调用[`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")方法，并且每次调用应该表示与之前内容的清晰关联。
- en: '**Joins to a Target Entity or Selectable**'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: '**连接到目标实体或可选择的**'
- en: 'A second form of [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    allows any mapped entity or core selectable construct as a target. In this usage,
    [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join") will
    attempt to create a JOIN along the natural foreign key relationship between two
    entities:'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")的第二种形式允许任何映射实体或核心可选择的构造作为目标。在这种用法中，[`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")将尝试沿着两个实体之间的自然外键关系创建一个JOIN：'
- en: '[PRE196]'
  id: totrans-888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: In the above calling form, [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    is called upon to create the “on clause” automatically for us. This calling form
    will ultimately raise an error if either there are no foreign keys between the
    two entities, or if there are multiple foreign key linkages between the target
    entity and the entity or entities already present on the left side such that creating
    a join requires more information. Note that when indicating a join to a target
    without any ON clause, ORM configured relationships are not taken into account.
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述调用形式中，[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")被调用来自动为我们创建“on子句”。如果两个实体之间没有外键，或者如果目标实体和左侧已存在的实体之间有多个外键链接，以至于创建连接需要更多信息，则此调用形式最终将引发错误。请注意，在指示对没有任何ON子句的目标的连接时，不会考虑ORM配置的关系。
- en: '**Joins to a Target with an ON Clause**'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: '**连接到具有ON子句的目标**'
- en: 'The third calling form allows both the target entity as well as the ON clause
    to be passed explicitly. A example that includes a SQL expression as the ON clause
    is as follows:'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种调用形式允许显式传递目标实体以及ON子句。包含SQL表达式作为ON子句的示例如下所示：
- en: '[PRE197]'
  id: totrans-892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: 'The above form may also use a relationship-bound attribute as the ON clause
    as well:'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: 上述形式也可以使用一个与关系绑定的属性作为ON子句：
- en: '[PRE198]'
  id: totrans-894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: 'The above syntax can be useful for the case where we wish to join to an alias
    of a particular target entity. If we wanted to join to `Address` twice, it could
    be achieved using two aliases set up using the [`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function:'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语法对于我们希望连接到特定目标实体的别名的情况可能很有用。如果我们想要两次连接到`Address`，可以使用[`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")函数设置两个别名：
- en: '[PRE199]'
  id: totrans-896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: 'The relationship-bound calling form can also specify a target entity using
    the [`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") method; a query equivalent to the one
    above would be:'
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: 与关系绑定的调用形式还可以使用[`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")方法指定目标实体；一个与上述相同的查询将是：
- en: '[PRE200]'
  id: totrans-898
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '**Augmenting Built-in ON Clauses**'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: '**扩充内置的ON子句**'
- en: 'As a substitute for providing a full custom ON condition for an existing relationship,
    the [`PropComparator.and_()`](../internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") function may be applied to a relationship
    attribute to augment additional criteria into the ON clause; the additional criteria
    will be combined with the default criteria using AND:'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 作为为现有关系提供完整自定义ON条件的替代方法，可以将[`PropComparator.and_()`](../internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_")函数应用于关系属性，以将其他条件合并到ON子句中；其他条件将与默认条件使用AND组合：
- en: '[PRE201]'
  id: totrans-901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: New in version 1.4.
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版本中新增。
- en: '**Joining to Tables and Subqueries**'
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: '**加入表格和子查询**'
- en: 'The target of a join may also be any table or SELECT statement, which may be
    related to a target entity or not. Use the appropriate `.subquery()` method in
    order to make a subquery out of a query:'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 加入的目标也可以是任何表格或SELECT语句，它可以与目标实体相关联，也可以不相关联。使用适当的`.subquery()`方法以将查询转换为子查询：
- en: '[PRE202]'
  id: totrans-905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: 'Joining to a subquery in terms of a specific relationship and/or target entity
    may be achieved by linking the subquery to the entity using [`aliased()`](api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased"):'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用[`aliased()`](api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")将子查询链接到实体，可以在特定关系和/或目标实体方面加入子查询：
- en: '[PRE203]'
  id: totrans-907
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '**Controlling what to Join From**'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制加入来源**'
- en: 'In cases where the left side of the current state of [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") is not in line with what we want to join from, the [`Query.select_from()`](#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from") method may be used:'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")状态的左侧与我们想要加入的内容不一致的情况下，可以使用[`Query.select_from()`](#sqlalchemy.orm.Query.select_from
    "sqlalchemy.orm.Query.select_from")方法：
- en: '[PRE204]'
  id: totrans-910
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: 'Which will produce SQL similar to:'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生类似于以下的SQL：
- en: '[PRE205]'
  id: totrans-912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: See also
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") - v2 equivalent method.'
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") - v2等效方法。'
- en: 'Parameters:'
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*props` – Incoming arguments for [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join"), the props collection in modern use should be considered
    to be a one or two argument form, either as a single “target” entity or ORM attribute-bound
    relationship, or as a target entity plus an “on clause” which may be a SQL expression
    or ORM attribute-bound relationship.'
  id: totrans-916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*props` – [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")的传入参数，现代用法中的props集合应被视为一种或两种参数形式，要么是一个“目标”实体或ORM属性绑定的关系，要么是一个目标实体加上一个“on子句”，该子句可以是SQL表达式或ORM属性绑定的关系。'
- en: '`isouter=False` – If True, the join used will be a left outer join, just as
    if the [`Query.outerjoin()`](#sqlalchemy.orm.Query.outerjoin "sqlalchemy.orm.Query.outerjoin")
    method were called.'
  id: totrans-917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isouter=False` – 如果为True，则使用的连接将是左外连接，就像调用[`Query.outerjoin()`](#sqlalchemy.orm.Query.outerjoin
    "sqlalchemy.orm.Query.outerjoin")方法一样。'
- en: '`full=False` – render FULL OUTER JOIN; implies `isouter`.'
  id: totrans-918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`full=False` – 渲染FULL OUTER JOIN；意味着`isouter`。'
- en: '[PRE206]'
  id: totrans-919
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), converted to a scalar subquery with a label of the given
    name.
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")表示的完整SELECT语句，转换为具有给定名称标签的标量子查询。
- en: See also
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.label()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.label
    "sqlalchemy.sql.expression.Select.label") - v2 comparable method.'
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.label()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.label
    "sqlalchemy.sql.expression.Select.label") - v2可比较方法。'
- en: '[PRE207]'
  id: totrans-923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: An [`InstanceState`](../internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    that is using this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") for
    a lazy load operation.
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")进行惰性加载操作的[`InstanceState`](../internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。
- en: 'Deprecated since version 1.4: This attribute should be viewed via the [`ORMExecuteState.lazy_loaded_from`](../session_api.html#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from
    "sqlalchemy.orm.ORMExecuteState.lazy_loaded_from") attribute, within the context
    of the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event.'
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.4版本起弃用：此属性应通过[`ORMExecuteState.lazy_loaded_from`](../session_api.html#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from
    "sqlalchemy.orm.ORMExecuteState.lazy_loaded_from")属性查看，在[`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件的上下文中。
- en: See also
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ORMExecuteState.lazy_loaded_from`](../session_api.html#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from
    "sqlalchemy.orm.ORMExecuteState.lazy_loaded_from")'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ORMExecuteState.lazy_loaded_from`](../session_api.html#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from
    "sqlalchemy.orm.ORMExecuteState.lazy_loaded_from")'
- en: '[PRE208]'
  id: totrans-928
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: Apply a `LIMIT` to the query and return the newly resulting `Query`.
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 将`LIMIT`应用于查询并返回新结果的`Query`。
- en: See also
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`Select.limit()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") - v2 equivalent method.'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.limit()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") - v2等效方法。'
- en: '[PRE209]'
  id: totrans-932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: Merge a result into this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object’s Session.
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个结果合并到这个[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象的会话中。
- en: 'Deprecated since version 2.0: The [`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") method is considered legacy as of the 1.x
    series of SQLAlchemy and becomes a legacy construct in 2.0\. The method is superseded
    by the [`merge_frozen_result()`](../internals.html#sqlalchemy.orm.merge_frozen_result
    "sqlalchemy.orm.merge_frozen_result") function. (Background on SQLAlchemy 2.0
    at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: 自2.0版开始弃用：[`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result "sqlalchemy.orm.Query.merge_result")方法被认为是SQLAlchemy
    1.x系列的遗留方法，并在2.0版中成为遗留构造。 该方法被[`merge_frozen_result()`](../internals.html#sqlalchemy.orm.merge_frozen_result
    "sqlalchemy.orm.merge_frozen_result")函数取代。（有关SQLAlchemy 2.0的背景，请参阅：[SQLAlchemy
    2.0 - 主要迁移指南](../../changelog/migration_20.html)）
- en: Given an iterator returned by a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    of the same structure as this one, return an identical iterator of results, with
    all mapped instances merged into the session using [`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge"). This is an optimized method which will merge
    all mapped instances, preserving the structure of the result rows and unmapped
    columns with less method overhead than that of calling [`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") explicitly for each value.
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 给定与此相同结构的[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")返回的迭代器，返回一个相同的结果迭代器，所有映射实例都使用[`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")合并到会话中。 这是一种优化方法，将合并所有映射实例，保留结果行的结构和未映射列，比直接为每个值显式调用[`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")方法的方法开销小。
- en: The structure of the results is determined based on the column list of this
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") - if these do not correspond,
    unchecked errors will occur.
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
  zh: 结果的结构是基于这个[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")的列列表来确定的 -
    如果它们不对应，将会发生未经检查的错误。
- en: The ‘load’ argument is the same as that of [`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge").
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: ‘load’参数与[`Session.merge()`](../session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")相同。
- en: For an example of how [`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") is used, see the source code for the example
    [Dogpile Caching](../examples.html#examples-caching), where [`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result") is used to efficiently restore state from
    a cache back into a target [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何使用[`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result "sqlalchemy.orm.Query.merge_result")的示例，请参阅示例[Dogpile
    Caching](../examples.html#examples-caching)的源代码，其中[`Query.merge_result()`](#sqlalchemy.orm.Query.merge_result
    "sqlalchemy.orm.Query.merge_result")用于有效地从缓存中恢复状态到目标[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。
- en: '[PRE210]'
  id: totrans-939
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: Apply an `OFFSET` to the query and return the newly resulting `Query`.
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 将`OFFSET`应用于查询并返回新结果的`Query`。
- en: See also
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[`Select.offset()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset") - v2 equivalent method.'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.offset()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset") - v2等效方法。'
- en: '[PRE211]'
  id: totrans-943
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: Return exactly one result or raise an exception.
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个结果或引发异常。
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows. Raises
    `sqlalchemy.orm.exc.MultipleResultsFound` if multiple object identities are returned,
    or if multiple rows are returned for a query that returns only scalar values as
    opposed to full identity-mapped entities.
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查询未选择任何行，则引发`sqlalchemy.orm.exc.NoResultFound`。 如果返回多个对象标识，或者如果返回多行用于仅返回标量值而不是完整身份映射实体的查询，则引发`sqlalchemy.orm.exc.MultipleResultsFound`。
- en: Calling [`one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one") results
    in an execution of the underlying query.
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 调用[`one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one")会执行基础查询。
- en: See also
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")'
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")'
- en: '[`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")'
- en: '[`Result.one()`](../../core/connections.html#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")
    - v2 comparable method.'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one()`](../../core/connections.html#sqlalchemy.engine.Result.one "sqlalchemy.engine.Result.one")
    - v2 可比较的方法。'
- en: '[`Result.scalar_one()`](../../core/connections.html#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") - v2 comparable method.'
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalar_one()`](../../core/connections.html#sqlalchemy.engine.Result.scalar_one
    "sqlalchemy.engine.Result.scalar_one") - v2 可比较的方法。'
- en: '[PRE212]'
  id: totrans-952
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: Return at most one result or raise an exception.
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 返回最多一个结果或引发异常。
- en: Returns `None` if the query selects no rows. Raises `sqlalchemy.orm.exc.MultipleResultsFound`
    if multiple object identities are returned, or if multiple rows are returned for
    a query that returns only scalar values as opposed to full identity-mapped entities.
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查询不选择任何行，则返回`None`。如果返回了多个对象标识或者对于只返回标量值而不是完整身份映射实体的查询返回了多行，则会引发`sqlalchemy.orm.exc.MultipleResultsFound`异常。
- en: Calling [`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")
    results in an execution of the underlying query.
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 调用[`Query.one_or_none()`](#sqlalchemy.orm.Query.one_or_none "sqlalchemy.orm.Query.one_or_none")会执行基础查询。
- en: See also
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")'
- en: '[`Query.one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one")'
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.one()`](#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one")'
- en: '[`Result.one_or_none()`](../../core/connections.html#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none") - v2 comparable method.'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.one_or_none()`](../../core/connections.html#sqlalchemy.engine.Result.one_or_none
    "sqlalchemy.engine.Result.one_or_none") - v2 可比较的方法。'
- en: '[`Result.scalar_one_or_none()`](../../core/connections.html#sqlalchemy.engine.Result.scalar_one_or_none
    "sqlalchemy.engine.Result.scalar_one_or_none") - v2 comparable method.'
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalar_one_or_none()`](../../core/connections.html#sqlalchemy.engine.Result.scalar_one_or_none
    "sqlalchemy.engine.Result.scalar_one_or_none") - v2 可比较的方法。'
- en: '[PRE213]'
  id: totrans-961
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: When set to True, the query results will always be a [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") object.
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置为 True 时，查询结果将始终是一个[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: This can change a query that normally returns a single entity as a scalar to
    return a [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    result in all cases.
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以将通常返回标量的单个实体的查询更改为在所有情况下返回[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")结果。
- en: See also
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.tuples()`](#sqlalchemy.orm.Query.tuples "sqlalchemy.orm.Query.tuples")
    - returns tuples, but also at the typing level will type results as `Tuple`.'
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.tuples()`](#sqlalchemy.orm.Query.tuples "sqlalchemy.orm.Query.tuples")
    - 返回元组，但在类型级别上也将结果类型化为`Tuple`。'
- en: '[`Query.is_single_entity()`](#sqlalchemy.orm.Query.is_single_entity "sqlalchemy.orm.Query.is_single_entity")'
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.is_single_entity()`](#sqlalchemy.orm.Query.is_single_entity "sqlalchemy.orm.Query.is_single_entity")'
- en: '[`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") - v2 comparable method.'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") - v2 可比较的方法。'
- en: '[PRE214]'
  id: totrans-968
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: Return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object,
    applying the given list of mapper options.
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象，应用给定的映射器选项列表。
- en: Most supplied options regard changing how column- and relationship-mapped attributes
    are loaded.
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数提供的选项涉及更改如何加载列和关系映射的属性。
- en: See also
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column Loading Options](columns.html#loading-columns)'
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: '[列加载选项](columns.html#loading-columns)'
- en: '[Relationship Loading with Loader Options](relationships.html#relationship-loader-options)'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用加载器选项进行关系加载](relationships.html#relationship-loader-options)'
- en: '[PRE215]'
  id: totrans-974
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: Apply one or more ORDER BY criteria to the query and return the newly resulting
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query").
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 对查询应用一个或多个 ORDER BY 条件，并返回新生成的[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")。
- en: 'e.g.:'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE216]'
  id: totrans-977
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: 'Calling this method multiple times is equivalent to calling it once with all
    the clauses concatenated. All existing ORDER BY criteria may be cancelled by passing
    `None` by itself. New ORDER BY criteria may then be added by invoking [`Query.order_by()`](#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") again, e.g.:'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: 多次调用此方法等同于一次调用并连接所有子句。所有现有的 ORDER BY 条件可以通过仅传递 `None` 来取消。然后可以通过再次调用 [`Query.order_by()`](#sqlalchemy.orm.Query.order_by
    "sqlalchemy.orm.Query.order_by") 来添加新的 ORDER BY 条件，例如：
- en: '[PRE217]'
  id: totrans-979
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: See also
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: 'These sections describe ORDER BY in terms of [2.0 style](../../glossary.html#term-2.0-style)
    invocation but apply to [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    as well:'
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: 这些部分以 [2.0 风格](../../glossary.html#term-2.0-style) 调用 ORDER BY 描述，但也适用于 [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")：
- en: '[ORDER BY](../../tutorial/data_select.html#tutorial-order-by) - in the [SQLAlchemy
    Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORDER BY](../../tutorial/data_select.html#tutorial-order-by) - 在 [SQLAlchemy
    统一教程](../../tutorial/index.html#unified-tutorial) 中'
- en: '[Ordering or Grouping by a Label](../../tutorial/data_select.html#tutorial-order-by-label)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: '[按标签排序或分组](../../tutorial/data_select.html#tutorial-order-by-label) - 在 [SQLAlchemy
    统一教程](../../tutorial/index.html#unified-tutorial) 中'
- en: '[`Select.order_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by") - v2 equivalent method.'
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.order_by()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.order_by
    "sqlalchemy.sql.expression.Select.order_by") - v2 等效方法。'
- en: '[PRE218]'
  id: totrans-985
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: Create a left outer join against this `Query` object’s criterion and apply generatively,
    returning the newly resulting `Query`.
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 对此 `Query` 对象的条件创建一个左外连接，并生成应用，返回新生成的 `Query`。
- en: Usage is the same as the `join()` method.
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: 用法与 `join()` 方法相同。
- en: See also
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Select.outerjoin()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") - v2 equivalent method.'
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.outerjoin()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.outerjoin
    "sqlalchemy.sql.expression.Select.outerjoin") - v2 等效方法。'
- en: '[PRE219]'
  id: totrans-990
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: Add values for bind parameters which may have been specified in filter().
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 为在 filter() 中指定的绑定参数添加值。
- en: Parameters may be specified using **kwargs, or optionally a single dictionary
    as the first positional argument. The reason for both is that **kwargs is convenient,
    however some parameter dictionaries contain unicode keys in which case **kwargs
    cannot be used.
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: 参数可以使用 **kwargs 指定，或者作为第一个位置参数使用一个可选的字典。两者之所以同时存在是因为 **kwargs 方便，但是一些参数字典包含
    unicode 键，此时无法使用 **kwargs。
- en: '[PRE220]'
  id: totrans-993
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: Return a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") that will expire
    and refresh all instances as they are loaded, or reused from the current [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")，它将在加载时使所有实例过期并刷新，或从当前
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    复用。
- en: As of SQLAlchemy 1.4, the [`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") method is equivalent to using the `populate_existing`
    execution option at the ORM level. See the section [Populate Existing](api.html#orm-queryguide-populate-existing)
    for further background on this option.
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: 自 SQLAlchemy 1.4 起，[`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") 方法等同于在 ORM 级别使用 `populate_existing`
    执行选项。有关此选项的更多背景，请参见 [Populate Existing](api.html#orm-queryguide-populate-existing)
    部分。
- en: '[PRE221]'
  id: totrans-996
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '*inherited from the* [`HasPrefixes.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with") *method of* [`HasPrefixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes")'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasPrefixes.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with") *方法的* [`HasPrefixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes")'
- en: Add one or more expressions following the statement keyword, i.e. SELECT, INSERT,
    UPDATE, or DELETE. Generative.
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 在语句关键字之后添加一个或多个表达式，即 SELECT、INSERT、UPDATE 或 DELETE。生成的。
- en: This is used to support backend-specific prefix keywords such as those provided
    by MySQL.
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于支持特定于后端的前缀关键字，例如 MySQL 提供的关键字。
- en: 'E.g.:'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE222]'
  id: totrans-1001
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: Multiple prefixes can be specified by multiple calls to [`HasPrefixes.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with").
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过多次调用 [`HasPrefixes.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasPrefixes.prefix_with
    "sqlalchemy.sql.expression.HasPrefixes.prefix_with") 来指定多个前缀。
- en: 'Parameters:'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*prefixes` – textual or [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the INSERT, UPDATE, or DELETE keyword.'
  id: totrans-1004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*prefixes` – 文本或[`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")构造，将在INSERT、UPDATE或DELETE关键字之后呈现。'
- en: '`dialect` – optional string dialect name which will limit rendering of this
    prefix to only that dialect.'
  id: totrans-1005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 可选的字符串方言名称，将限制仅将此前缀呈现到该方言。'
- en: '[PRE223]'
  id: totrans-1006
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: Return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query"), where
    the “join point” has been reset back to the base FROM entities of the query.
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")，其中“连接点”已重置回查询的基本FROM实体。
- en: This method is usually used in conjunction with the `aliased=True` feature of
    the [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join") method.
    See the example in [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    for how this is used.
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法通常与[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")方法的`aliased=True`特性一起使用。有关其用法，请参见[`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")中的示例。
- en: '[PRE224]'
  id: totrans-1009
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: Return the first element of the first result or None if no rows present. If
    multiple rows are returned, raises MultipleResultsFound.
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: 返回第一个结果的第一个元素，如果没有行，则返回None。如果返回多行，则引发MultipleResultsFound。
- en: '[PRE225]'
  id: totrans-1011
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: This results in an execution of the underlying query.
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: 这会导致底层查询的执行。
- en: See also
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.scalar()`](../../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") - v2 comparable method.'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.scalar()`](../../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar") - v2可比较的方法。'
- en: '[PRE226]'
  id: totrans-1015
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), converted to a scalar subquery.
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")表示的完整SELECT语句，转换为标量子查询。
- en: Analogous to [`SelectBase.scalar_subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery").
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于[`SelectBase.scalar_subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.SelectBase.scalar_subquery
    "sqlalchemy.sql.expression.SelectBase.scalar_subquery")。
- en: 'Changed in version 1.4: The [`Query.scalar_subquery()`](#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery") method replaces the [`Query.as_scalar()`](#sqlalchemy.orm.Query.as_scalar
    "sqlalchemy.orm.Query.as_scalar") method.'
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中更改：[`Query.scalar_subquery()`](#sqlalchemy.orm.Query.scalar_subquery
    "sqlalchemy.orm.Query.scalar_subquery")方法替换了[`Query.as_scalar()`](#sqlalchemy.orm.Query.as_scalar
    "sqlalchemy.orm.Query.as_scalar")方法。
- en: See also
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.scalar_subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.scalar_subquery
    "sqlalchemy.sql.expression.Select.scalar_subquery") - v2 comparable method.'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.scalar_subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.scalar_subquery
    "sqlalchemy.sql.expression.Select.scalar_subquery") - v2可比较的方法。'
- en: '[PRE227]'
  id: totrans-1021
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: Set the FROM clause of this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    explicitly.
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: 明确设置此[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")的FROM子句。
- en: '[`Query.select_from()`](#sqlalchemy.orm.Query.select_from "sqlalchemy.orm.Query.select_from")
    is often used in conjunction with [`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") in order to control which entity is selected from
    on the “left” side of the join.'
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.select_from()`](#sqlalchemy.orm.Query.select_from "sqlalchemy.orm.Query.select_from")通常与[`Query.join()`](#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")结合使用，以控制在连接的“左”侧选择哪个实体。'
- en: The entity or selectable object here effectively replaces the “left edge” of
    any calls to [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join"),
    when no joinpoint is otherwise established - usually, the default “join point”
    is the leftmost entity in the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object’s list of entities to be selected.
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的实体或可选择对象有效地替换了任何对[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")的调用的“左边缘”，否则，当没有其他方式建立连接点时，通常默认的“连接点”是[`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的实体列表中的最左边的实体。
- en: 'A typical example:'
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的例子：
- en: '[PRE228]'
  id: totrans-1026
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: 'Which produces SQL equivalent to:'
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生等效于以下SQL的结果：
- en: '[PRE229]'
  id: totrans-1028
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: 'Parameters:'
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '***from_obj** – collection of one or more entities to apply to the FROM clause.
    Entities can be mapped classes, [`AliasedClass`](api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") objects, [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects as well as core [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") elements like subqueries.'
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: '***from_obj** – 用于应用于 FROM 子句的一个或多个实体的集合。实体可以是映射类，[`AliasedClass`](api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") 对象，[`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 对象以及核心 [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 元素，如子查询。'
- en: See also
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join") -
    [`Query.join()`](#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join") 方法。'
- en: '`Query.select_entity_from()`'
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: '`Query.select_entity_from()`'
- en: '[`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") - v2 equivalent method.'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") - v2 相关的方法。'
- en: '[PRE230]'
  id: totrans-1035
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: Return the [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object emitted by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 发出的 [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 对象。
- en: 'Used for [`inspect()`](../../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    compatibility, this is equivalent to:'
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 用于 [`inspect()`](../../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    兼容性，这相当于：
- en: '[PRE231]'
  id: totrans-1038
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-1039
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: Apply column labels to the return value of Query.statement.
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 将列标签应用于 Query.statement 的返回值。
- en: Indicates that this Query’s statement accessor should return a SELECT statement
    that applies labels to all columns in the form <tablename>_<columnname>; this
    is commonly used to disambiguate columns from multiple tables which have the same
    name.
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此 Query 的语句访问器应返回一个 SELECT 语句，该语句对所有列应用标签的形式为 <tablename>_<columnname>；这通常用于消除具有相同名称的多个表的列的歧义性。
- en: When the Query actually issues SQL to load rows, it always uses column labeling.
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Query 实际发出 SQL 加载行时，它总是使用列标签。
- en: Note
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The [`Query.set_label_style()`](#sqlalchemy.orm.Query.set_label_style "sqlalchemy.orm.Query.set_label_style")
    method *only* applies the output of [`Query.statement`](#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement"), and *not* to any of the result-row invoking
    systems of [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") itself, e.g.
    [`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first"), [`Query.all()`](#sqlalchemy.orm.Query.all
    "sqlalchemy.orm.Query.all"), etc. To execute a query using [`Query.set_label_style()`](#sqlalchemy.orm.Query.set_label_style
    "sqlalchemy.orm.Query.set_label_style"), invoke the [`Query.statement`](#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement") using [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"):'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.set_label_style()`](#sqlalchemy.orm.Query.set_label_style "sqlalchemy.orm.Query.set_label_style")
    方法*仅*适用于 [`Query.statement`](#sqlalchemy.orm.Query.statement "sqlalchemy.orm.Query.statement")
    的输出，*不*适用于 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 本身的任何结果行调用系统，例如
    [`Query.first()`](#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")，[`Query.all()`](#sqlalchemy.orm.Query.all
    "sqlalchemy.orm.Query.all") 等。要使用 [`Query.set_label_style()`](#sqlalchemy.orm.Query.set_label_style
    "sqlalchemy.orm.Query.set_label_style") 执行查询，请使用 [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 调用 [`Query.statement`](#sqlalchemy.orm.Query.statement
    "sqlalchemy.orm.Query.statement")：'
- en: '[PRE233]'
  id: totrans-1045
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: New in version 1.4.
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: See also
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.set_label_style()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") - v2 equivalent method.'
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.set_label_style()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.set_label_style
    "sqlalchemy.sql.expression.Select.set_label_style") - v2 相关的方法。'
- en: '[PRE234]'
  id: totrans-1049
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: Computes the “slice” of the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    represented by the given indices and returns the resulting [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query").
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: 计算由给定索引表示的 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 的“切片”，并返回生成的
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")。
- en: The start and stop indices behave like the argument to Python’s built-in `range()`
    function. This method provides an alternative to using `LIMIT`/`OFFSET` to get
    a slice of the query.
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: 开始和停止索引的行为类似于 Python 内置函数 `range()` 的参数。此方法提供了一种替代使用 `LIMIT`/`OFFSET` 来获取查询切片的方法。
- en: For example,
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，
- en: '[PRE235]'
  id: totrans-1053
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: renders as
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染为
- en: '[PRE236]'
  id: totrans-1055
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: See also
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Query.limit()`](#sqlalchemy.orm.Query.limit "sqlalchemy.orm.Query.limit")'
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.limit()`](#sqlalchemy.orm.Query.limit "sqlalchemy.orm.Query.limit")'
- en: '[`Query.offset()`](#sqlalchemy.orm.Query.offset "sqlalchemy.orm.Query.offset")'
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.offset()`](#sqlalchemy.orm.Query.offset "sqlalchemy.orm.Query.offset")'
- en: '[`Select.slice()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.slice
    "sqlalchemy.sql.expression.Select.slice") - v2 equivalent method.'
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.slice()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.slice
    "sqlalchemy.sql.expression.Select.slice") - v2 等效方法。'
- en: '[PRE237]'
  id: totrans-1060
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: The full SELECT statement represented by this Query.
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: 由此查询表示的完整SELECT语句。
- en: The statement by default will not have disambiguating labels applied to the
    construct unless with_labels(True) is called first.
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，语句不会对构造应用歧义性标签，除非首先调用`with_labels(True)`。
- en: '[PRE238]'
  id: totrans-1063
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: Return the full SELECT statement represented by this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), embedded within an [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias").
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")表示的完整SELECT语句，嵌入在[`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")中。
- en: Eager JOIN generation within the query is disabled.
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: 查询中的急切JOIN生成被禁用。
- en: See also
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery") - v2 comparable method.'
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery") - v2 可比较方法。'
- en: 'Parameters:'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – string name to be assigned as the alias; this is passed through to
    [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias"). If `None`, a name will be deterministically
    generated at compile time.'
  id: totrans-1069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 要分配为别名的字符串名称；这将通过[`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")传递。如果为`None`，则在编译时将确定性地生成一个名称。'
- en: '`with_labels` – if True, [`with_labels()`](#sqlalchemy.orm.Query.with_labels
    "sqlalchemy.orm.Query.with_labels") will be called on the [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") first to apply table-qualified labels to all columns.'
  id: totrans-1070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_labels` – 如果为True，则首先将在[`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")上调用[`with_labels()`](#sqlalchemy.orm.Query.with_labels
    "sqlalchemy.orm.Query.with_labels")，以将表限定标签应用于所有列。'
- en: '`reduce_columns` – if True, [`Select.reduce_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.reduce_columns
    "sqlalchemy.sql.expression.Select.reduce_columns") will be called on the resulting
    [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    construct, to remove same-named columns where one also refers to the other via
    foreign key or WHERE clause equivalence.'
  id: totrans-1071
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reduce_columns` – 如果为True，则将在生成的[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造上调用[`Select.reduce_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.reduce_columns
    "sqlalchemy.sql.expression.Select.reduce_columns")，以删除通过外键或WHERE子句等价关系相互引用的同名列。'
- en: '[PRE239]'
  id: totrans-1072
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '*inherited from the* [`HasSuffixes.suffix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with") *method of* [`HasSuffixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes")'
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasSuffixes.suffix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with") *方法的* [`HasSuffixes`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes")'
- en: Add one or more expressions following the statement as a whole.
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 在语句后添加一个或多个表达式。
- en: This is used to support backend-specific suffix keywords on certain constructs.
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于支持特定于后端的后缀关键字在某些构造上。
- en: 'E.g.:'
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE240]'
  id: totrans-1077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: Multiple suffixes can be specified by multiple calls to [`HasSuffixes.suffix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with").
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过多次调用[`HasSuffixes.suffix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.HasSuffixes.suffix_with
    "sqlalchemy.sql.expression.HasSuffixes.suffix_with")来指定多个后缀。
- en: 'Parameters:'
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*suffixes` – textual or [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") construct which will be rendered following
    the target clause.'
  id: totrans-1080
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*suffixes` – 文本或[`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")构造，将在目标子句后呈现。'
- en: '`dialect` – Optional string dialect name which will limit rendering of this
    suffix to only that dialect.'
  id: totrans-1081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 可选的字符串方言名称，它将限制此后缀的呈现仅限于该方言。'
- en: '[PRE241]'
  id: totrans-1082
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: return a tuple-typed form of this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query").
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 的元组形式。
- en: This method invokes the [`Query.only_return_tuples()`](#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples") method with a value of `True`, which
    by itself ensures that this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    will always return [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects, even if the query is made against a single entity. It then also at the
    typing level will return a “typed” query, if possible, that will type result rows
    as `Tuple` objects with typed elements.
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法调用了 [`Query.only_return_tuples()`](#sqlalchemy.orm.Query.only_return_tuples
    "sqlalchemy.orm.Query.only_return_tuples") 方法，并将其值设为 `True`，这本身就确保了这个 [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 将始终返回 [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 对象，即使查询只针对单个实体也是如此。它还在类型级别返回一个“类型化”的查询，如果可能的话，将结果行类型化为带有类型的
    `Tuple` 对象。
- en: This method can be compared to the [`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") method, which returns “self”, but from a typing
    perspective returns an object that will yield typed `Tuple` objects for results.
    Typing takes effect only if this [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object is a typed query object already.
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可以与 [`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") 方法进行比较，后者返回“self”，但从类型的角度来看，返回一个对象，该对象将为结果生成带有类型的
    `Tuple` 对象。仅当此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 对象已经是一个类型化的查询对象时，类型才会生效。
- en: New in version 2.0.
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中的新功能。
- en: See also
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") - v2 equivalent method.'
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Result.tuples()`](../../core/connections.html#sqlalchemy.engine.Result.tuples
    "sqlalchemy.engine.Result.tuples") - v2 等效方法。'
- en: '[PRE242]'
  id: totrans-1089
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: Produce a UNION of this Query against one or more queries.
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
  zh: 生成该查询与一个或多个查询的UNION。
- en: 'e.g.:'
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE243]'
  id: totrans-1092
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: 'The method accepts multiple Query objects so as to control the level of nesting.
    A series of `union()` calls such as:'
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法接受多个查询对象，以控制嵌套级别。例如一系列的 `union()` 调用：
- en: '[PRE244]'
  id: totrans-1094
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: 'will nest on each `union()`, and produces:'
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: 将在每个 `union()` 上进行嵌套，并产生：
- en: '[PRE245]'
  id: totrans-1096
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: 'Whereas:'
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
  zh: '而:'
- en: '[PRE246]'
  id: totrans-1098
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: 'produces:'
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: 产生：
- en: '[PRE247]'
  id: totrans-1100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: Note that many database backends do not allow ORDER BY to be rendered on a query
    called within UNION, EXCEPT, etc. To disable all ORDER BY clauses including those
    configured on mappers, issue `query.order_by(None)` - the resulting [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object will not render ORDER BY within its SELECT statement.
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，许多数据库后端不允许在UNION、EXCEPT等中调用的查询上渲染ORDER BY。要禁用所有ORDER BY子句，包括在映射器上配置的子句，请发出
    `query.order_by(None)` - 结果的 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象不会在其SELECT语句中渲染ORDER BY。
- en: See also
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.union()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.union
    "sqlalchemy.sql.expression.Select.union") - v2 equivalent method.'
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.union()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.union
    "sqlalchemy.sql.expression.Select.union") - v2 等效方法。'
- en: '[PRE248]'
  id: totrans-1104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: Produce a UNION ALL of this Query against one or more queries.
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 生成该查询与一个或多个查询的 UNION ALL。
- en: Works the same way as `Query.union()`. See that method for usage examples.
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `Query.union()` 的工作方式相同。查看该方法以获取用法示例。
- en: See also
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.union_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.union_all
    "sqlalchemy.sql.expression.Select.union_all") - v2 equivalent method.'
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.union_all()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.union_all
    "sqlalchemy.sql.expression.Select.union_all") - v2 等效方法。'
- en: '[PRE249]'
  id: totrans-1109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: Perform an UPDATE with an arbitrary WHERE clause.
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任意WHERE子句执行UPDATE。
- en: Updates rows matched by this query in the database.
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: 更新数据库中与此查询匹配的行。
- en: 'E.g.:'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE250]'
  id: totrans-1113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: Warning
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: See the section [ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)
    for important caveats and warnings, including limitations when using arbitrary
    UPDATE and DELETE with mapper inheritance configurations.
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[ORM-启用的INSERT、UPDATE和DELETE语句](dml.html#orm-expression-update-delete)部分以获取重要的注意事项和警告，包括在使用任意UPDATE和DELETE与映射器继承配置时的限制。
- en: 'Parameters:'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`values` – a dictionary with attributes names, or alternatively mapped attributes
    or SQL expressions, as keys, and literal values or sql expressions as values.
    If [parameter-ordered mode](../../tutorial/data_update.html#tutorial-parameter-ordered-updates)
    is desired, the values can be passed as a list of 2-tuples; this requires that
    the [`update.preserve_parameter_order`](../../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update") flag is passed to the [`Query.update.update_args`](#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update") dictionary as well.'
  id: totrans-1117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values` – 一个带有属性名的字典，或者作为键的映射属性或 SQL 表达式，以及作为值的文字值或 SQL 表达式。 如果需要[参数顺序模式](../../tutorial/data_update.html#tutorial-parameter-ordered-updates)，则可以将值作为
    2 元组列表传递； 这需要还将 [`update.preserve_parameter_order`](../../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update") 标志传递给 [`Query.update.update_args`](#sqlalchemy.orm.Query.update.params.update_args
    "sqlalchemy.orm.Query.update") 字典。'
- en: '`synchronize_session` – chooses the strategy to update the attributes on objects
    in the session. See the section [ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)
    for a discussion of these strategies.'
  id: totrans-1118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`synchronize_session` – 选择更新会话中对象属性的策略。 有关这些策略的讨论，请参阅 [启用 ORM 的 INSERT、UPDATE
    和 DELETE 语句](dml.html#orm-expression-update-delete) 部分。'
- en: '`update_args` – Optional dictionary, if present will be passed to the underlying
    [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    construct as the `**kw` for the object. May be used to pass dialect-specific arguments
    such as `mysql_limit`, as well as other special arguments such as [`update.preserve_parameter_order`](../../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update").'
  id: totrans-1119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update_args` – 可选字典，如果存在，则作为对象的 `**kw` 传递给底层的 [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 构造。 可以用于传递特定于方言的参数，如 `mysql_limit`，以及其他特殊参数，如
    [`update.preserve_parameter_order`](../../core/dml.html#sqlalchemy.sql.expression.update.params.preserve_parameter_order
    "sqlalchemy.sql.expression.update")。'
- en: 'Returns:'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the count of rows matched as returned by the database’s “row count” feature.
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库的“行计数”功能返回的匹配行数。
- en: See also
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](dml.html#orm-expression-update-delete)'
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: '[启用 ORM 的 INSERT、UPDATE 和 DELETE 语句](dml.html#orm-expression-update-delete)'
- en: '[PRE251]'
  id: totrans-1124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: Return a scalar result corresponding to the given column expression.
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与给定列表对应的标量结果。
- en: 'Deprecated since version 1.4: [`Query.value()`](#sqlalchemy.orm.Query.value
    "sqlalchemy.orm.Query.value") is deprecated and will be removed in a future release.
    Please use [`Query.with_entities()`](#sqlalchemy.orm.Query.with_entities "sqlalchemy.orm.Query.with_entities")
    in combination with [`Query.scalar()`](#sqlalchemy.orm.Query.scalar "sqlalchemy.orm.Query.scalar")'
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起弃用：[`Query.value()`](#sqlalchemy.orm.Query.value "sqlalchemy.orm.Query.value")已弃用，将在将来的版本中删除。
    请使用 [`Query.with_entities()`](#sqlalchemy.orm.Query.with_entities "sqlalchemy.orm.Query.with_entities")
    与 [`Query.scalar()`](#sqlalchemy.orm.Query.scalar "sqlalchemy.orm.Query.scalar")
    结合使用。
- en: '[PRE252]'
  id: totrans-1127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: Return an iterator yielding result tuples corresponding to the given list of
    columns
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个迭代器，产生与给定列列表对应的结果元组
- en: 'Deprecated since version 1.4: [`Query.values()`](#sqlalchemy.orm.Query.values
    "sqlalchemy.orm.Query.values") is deprecated and will be removed in a future release.
    Please use [`Query.with_entities()`](#sqlalchemy.orm.Query.with_entities "sqlalchemy.orm.Query.with_entities")'
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起弃用：[`Query.values()`](#sqlalchemy.orm.Query.values "sqlalchemy.orm.Query.values")已弃用，将在将来的版本中删除。
    请使用 [`Query.with_entities()`](#sqlalchemy.orm.Query.with_entities "sqlalchemy.orm.Query.with_entities")
- en: '[PRE253]'
  id: totrans-1130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: A synonym for [`Query.filter()`](#sqlalchemy.orm.Query.filter "sqlalchemy.orm.Query.filter").
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.filter()`](#sqlalchemy.orm.Query.filter "sqlalchemy.orm.Query.filter")的同义词。'
- en: New in version 1.4.
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: See also
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.where()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") - v2 equivalent method.'
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.where()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") - v2 等效方法。'
- en: '[PRE254]'
  id: totrans-1135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: A readonly attribute which returns the current WHERE criterion for this Query.
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: 只读属性，返回此查询的当前 WHERE 条件。
- en: This returned value is a SQL expression construct, or `None` if no criterion
    has been established.
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: 此返回值是一个 SQL 表达式构造，如果没有建立条件，则为 `None`。
- en: See also
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.whereclause`](../../core/selectable.html#sqlalchemy.sql.expression.Select.whereclause
    "sqlalchemy.sql.expression.Select.whereclause") - v2 equivalent property.'
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.whereclause`](../../core/selectable.html#sqlalchemy.sql.expression.Select.whereclause
    "sqlalchemy.sql.expression.Select.whereclause") - v2 等效属性。'
- en: '[PRE255]'
  id: totrans-1140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: Return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") replacing
    the SELECT list with the given entities.
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个用给定实体替换 SELECT 列的新 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")。
- en: 'e.g.:'
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE256]'
  id: totrans-1143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: See also
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Select.with_only_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - v2 comparable method.'
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.with_only_columns()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_only_columns
    "sqlalchemy.sql.expression.Select.with_only_columns") - v2 可比较的方法。'
- en: '[PRE257]'
  id: totrans-1146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") with the
    specified options for the `FOR UPDATE` clause.
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个带有指定选项的新 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")，用于 `FOR
    UPDATE` 子句。
- en: The behavior of this method is identical to that of [`GenerativeSelect.with_for_update()`](../../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update"). When called with
    no arguments, the resulting `SELECT` statement will have a `FOR UPDATE` clause
    appended. When additional arguments are specified, backend-specific options such
    as `FOR UPDATE NOWAIT` or `LOCK IN SHARE MODE` can take effect.
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的行为与 [`GenerativeSelect.with_for_update()`](../../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") 相同。当不带参数调用时，生成的
    `SELECT` 语句将附加一个 `FOR UPDATE` 子句。当指定其他参数时，后端特定选项，如 `FOR UPDATE NOWAIT` 或 `LOCK
    IN SHARE MODE` 可以生效。
- en: 'E.g.:'
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE258]'
  id: totrans-1150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: 'The above query on a PostgreSQL backend will render like:'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 后端上执行上述查询将呈现如下：
- en: '[PRE259]'
  id: totrans-1152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: Warning
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Using `with_for_update` in the context of eager loading relationships is not
    officially supported or recommended by SQLAlchemy and may not work with certain
    queries on various database backends. When `with_for_update` is successfully used
    with a query that involves [`joinedload()`](relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload"), SQLAlchemy will attempt to emit SQL that locks all
    involved tables.
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: 在急加载关系的上下文中使用 `with_for_update` 不受 SQLAlchemy 官方支持或推荐，并且可能无法与各种数据库后端上的某些查询一起使用。当成功使用
    `with_for_update` 与涉及 [`joinedload()`](relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") 的查询时，SQLAlchemy 将尝试发出锁定所有涉及表的 SQL。
- en: Note
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is generally a good idea to combine the use of the [`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") method when using the [`Query.with_for_update()`](#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update") method. The purpose of [`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") is to force all the data read from the
    SELECT to be populated into the ORM objects returned, even if these objects are
    already in the [identity map](../../glossary.html#term-identity-map).
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: 通常建议在使用 [`Query.with_for_update()`](#sqlalchemy.orm.Query.with_for_update "sqlalchemy.orm.Query.with_for_update")
    方法时结合使用 [`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") 方法。[`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") 的目的是强制将从 SELECT 中读取的所有数据填充到返回的 ORM 对象中，即使这些对象已经在[标识映射](../../glossary.html#term-identity-map)中。
- en: See also
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`GenerativeSelect.with_for_update()`](../../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") - Core level method
    with full argument and behavioral description.'
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: '[`GenerativeSelect.with_for_update()`](../../core/selectable.html#sqlalchemy.sql.expression.GenerativeSelect.with_for_update
    "sqlalchemy.sql.expression.GenerativeSelect.with_for_update") - 具有完整参数和行为描述的核心级方法。'
- en: '[`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing "sqlalchemy.orm.Query.populate_existing")
    - overwrites attributes of objects already loaded in the identity map.'
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](#sqlalchemy.orm.Query.populate_existing "sqlalchemy.orm.Query.populate_existing")
    - 覆盖已加载到标识映射中的对象的属性。'
- en: '[PRE260]'
  id: totrans-1160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '*inherited from the* `HasHints.with_hint()` *method of* `HasHints`'
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasHints.with_hint()` *方法的* `HasHints` *方法*'
- en: Add an indexing or other executional context hint for the given selectable to
    this [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    or other selectable object.
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: 为给定的可选择对象添加索引或其他执行上下文提示到此 [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 或其他可选择对象。
- en: 'The text of the hint is rendered in the appropriate location for the database
    backend in use, relative to the given [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") passed as the `selectable` argument. The dialect
    implementation typically uses Python string substitution syntax with the token
    `%(name)s` to render the name of the table or alias. E.g. when using Oracle, the
    following:'
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: 提示文本在使用的数据库后端的适当位置呈现，相对于作为 `selectable` 参数传递的给定 [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或 [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")。方言实现通常使用 Python 字符串替换语法，其中的令牌 `%(name)s` 用于呈现表或别名的名称。例如，当使用
    Oracle 时，以下内容：
- en: '[PRE261]'
  id: totrans-1164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: 'Would render SQL as:'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 渲染如下：
- en: '[PRE262]'
  id: totrans-1166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: 'The `dialect_name` option will limit the rendering of a particular hint to
    a particular backend. Such as, to add hints for both Oracle and Sybase simultaneously:'
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: '`dialect_name` 选项将限制特定后端的特定提示的呈现。例如，同时为 Oracle 和 Sybase 添加提示：'
- en: '[PRE263]'
  id: totrans-1168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: See also
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: 也请参见
- en: '[`Select.with_statement_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint")'
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.with_statement_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_statement_hint
    "sqlalchemy.sql.expression.Select.with_statement_hint")'
- en: '[PRE264]'
  id: totrans-1171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: 'Deprecated since version 2.0: The [`Query.with_labels()`](#sqlalchemy.orm.Query.with_labels
    "sqlalchemy.orm.Query.with_labels") and [`Query.apply_labels()`](#sqlalchemy.orm.Query.apply_labels
    "sqlalchemy.orm.Query.apply_labels") method is considered legacy as of the 1.x
    series of SQLAlchemy and becomes a legacy construct in 2.0\. Use set_label_style(LABEL_STYLE_TABLENAME_PLUS_COL)
    instead. (Background on SQLAlchemy 2.0 at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2.0 版本起已废弃：[`Query.with_labels()`](#sqlalchemy.orm.Query.with_labels "sqlalchemy.orm.Query.with_labels")
    和 [`Query.apply_labels()`](#sqlalchemy.orm.Query.apply_labels "sqlalchemy.orm.Query.apply_labels")
    方法被认为是 SQLAlchemy 1.x 系列的遗留代码，并在 2.0 版本中成为遗留构造。请改用 `set_label_style(LABEL_STYLE_TABLENAME_PLUS_COL)`。
    (关于 SQLAlchemy 2.0 的背景信息请参见：[SQLAlchemy 2.0 - 主要迁移指南](../../changelog/migration_20.html))
- en: '[PRE265]'
  id: totrans-1173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: Add filtering criterion that relates the given instance to a child object or
    collection, using its attribute state as well as an established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration.
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: 添加筛选条件，将给定实例与子对象或集合关联起来，同时使用其属性状态和已建立的 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 配置。
- en: 'Deprecated since version 2.0: The [`Query.with_parent()`](#sqlalchemy.orm.Query.with_parent
    "sqlalchemy.orm.Query.with_parent") method is considered legacy as of the 1.x
    series of SQLAlchemy and becomes a legacy construct in 2.0\. Use the [`with_parent()`](api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent") standalone construct. (Background on SQLAlchemy
    2.0 at: [SQLAlchemy 2.0 - Major Migration Guide](../../changelog/migration_20.html))'
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2.0 版本起已废弃：[`Query.with_parent()`](#sqlalchemy.orm.Query.with_parent "sqlalchemy.orm.Query.with_parent")
    方法被认为是 SQLAlchemy 1.x 系列的遗留代码，并在 2.0 版本中成为遗留构造。请使用独立构造 [`with_parent()`](api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent")。(关于 SQLAlchemy 2.0 的背景信息请参见：[SQLAlchemy 2.0 - 主要迁移指南](../../changelog/migration_20.html))
- en: The method uses the [`with_parent()`](api.html#sqlalchemy.orm.with_parent "sqlalchemy.orm.with_parent")
    function to generate the clause, the result of which is passed to [`Query.filter()`](#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter").
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法使用 [`with_parent()`](api.html#sqlalchemy.orm.with_parent "sqlalchemy.orm.with_parent")
    函数生成子句，其结果传递给 [`Query.filter()`](#sqlalchemy.orm.Query.filter "sqlalchemy.orm.Query.filter")。
- en: Parameters are the same as [`with_parent()`](api.html#sqlalchemy.orm.with_parent
    "sqlalchemy.orm.with_parent"), with the exception that the given property can
    be None, in which case a search is performed against this [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object’s target mapper.
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: 参数与 [`with_parent()`](api.html#sqlalchemy.orm.with_parent "sqlalchemy.orm.with_parent")
    相同，但给定的属性可以为 None，在这种情况下，将对此 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象的目标映射执行搜索。
- en: 'Parameters:'
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – An instance which has some [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  id: totrans-1179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 一个具有一些 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 的实例。'
- en: '`property` – Class bound attribute which indicates what relationship from the
    instance should be used to reconcile the parent/child relationship.'
  id: totrans-1180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`property` – 类绑定属性，指示应从实例中使用哪个关系来协调父/子关系。'
- en: '`from_entity` – Entity in which to consider as the left side. This defaults
    to the “zero” entity of the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    itself.'
  id: totrans-1181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from_entity` – 将其视为左侧的实体。 默认为 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    本身的“零”实体。'
- en: '[PRE266]'
  id: totrans-1182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: Return a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") that will use
    the given [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: '返回一个将使用给定 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    的 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")。 '
- en: 'While the [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object is
    normally instantiated using the [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") method, it is legal to build the [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") directly without necessarily using a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). Such a [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, or any [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") already
    associated with a different [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), can produce a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object associated with a target session using this method:'
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然通常使用 [`Session.query()`](../session_api.html#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") 方法来实例化 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象，但也可以直接构建 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 对象，而无需必须使用
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
    这样的 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 对象，或者已经与不同 [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 关联的任何 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query")，可以使用这种方法产生与目标会话相关联的新的
    [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 对象：
- en: '[PRE267]'
  id: totrans-1185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-1186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '*inherited from the* `HasHints.with_statement_hint()` *method of* `HasHints`'
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `HasHints.with_statement_hint()` *方法的* `HasHints`'
- en: Add a statement hint to this [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") or other selectable object.
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: 向此 [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    或其他可选择对象添加语句提示。
- en: This method is similar to [`Select.with_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint") except that it does not require
    an individual table, and instead applies to the statement as a whole.
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法类似于 [`Select.with_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint")，但不需要单独的表，而是适用于整个语句。
- en: Hints here are specific to the backend database and may include directives such
    as isolation levels, file directives, fetch directives, etc.
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的提示是特定于后端数据库的，并且可能包括诸如隔离级别、文件指令、提取指令等的指令。
- en: See also
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Select.with_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint")'
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.with_hint()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.with_hint
    "sqlalchemy.sql.expression.Select.with_hint")'
- en: '[`Select.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.prefix_with
    "sqlalchemy.sql.expression.Select.prefix_with") - generic SELECT prefixing which
    also can suit some database-specific HINT syntaxes such as MySQL optimizer hints'
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Select.prefix_with()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.prefix_with
    "sqlalchemy.sql.expression.Select.prefix_with") - 通用的 SELECT 前缀，也可以适用于某些特定于数据库的
    HINT 语法，例如 MySQL 优化器提示'
- en: '[PRE269]'
  id: totrans-1194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: Return a new [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") object
    transformed by the given function.
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个通过给定函数转换的新的 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 对象。
- en: 'E.g.:'
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE270]'
  id: totrans-1197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: This allows ad-hoc recipes to be created for [`Query`](#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") objects.
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许为 [`Query`](#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 对象创建临时配方。
- en: '[PRE271]'
  id: totrans-1199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: Yield only `count` rows at a time.
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: 每次仅产生 `count` 行。
- en: The purpose of this method is when fetching very large result sets (> 10K rows),
    to batch results in sub-collections and yield them out partially, so that the
    Python interpreter doesn’t need to declare very large areas of memory which is
    both time consuming and leads to excessive memory use. The performance from fetching
    hundreds of thousands of rows can often double when a suitable yield-per setting
    (e.g. approximately 1000) is used, even with DBAPIs that buffer rows (which are
    most).
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的目的是在获取非常大的结果集（> 10K 行）时，将结果批处理为子集合并部分地输出它们，以便 Python 解释器不需要声明非常大的内存区域，这既费时又导致内存使用过多。
    当使用适当的 yield-per 设置时（例如，大约为 1000），即使使用缓冲行的 DBAPI（大多数情况下），从获取数十万行的性能也经常会翻倍。
- en: As of SQLAlchemy 1.4, the [`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") method is equivalent to using the `yield_per`
    execution option at the ORM level. See the section [Fetching Large Result Sets
    with Yield Per](api.html#orm-queryguide-yield-per) for further background on this
    option.
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: 从 SQLAlchemy 1.4 开始，[`Query.yield_per()`](#sqlalchemy.orm.Query.yield_per "sqlalchemy.orm.Query.yield_per")
    方法等同于在 ORM 级别使用 `yield_per` 执行选项。有关此选项的更多背景信息，请参见 [使用 Yield Per 获取大型结果集](api.html#orm-queryguide-yield-per)
    部分。
- en: See also
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Fetching Large Result Sets with Yield Per](api.html#orm-queryguide-yield-per)'
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Yield Per 获取大型结果集](api.html#orm-queryguide-yield-per)'
- en: ORM-Specific Query Constructs
  id: totrans-1205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ORM 特定查询构造
- en: This section has moved to [Additional ORM API Constructs](api.html#queryguide-additional).
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: 本节已移至 [附加 ORM API 构造](api.html#queryguide-additional)。
