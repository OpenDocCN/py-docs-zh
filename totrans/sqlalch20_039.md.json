["```py\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import DeclarativeBase, relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String)\n\n    addresses = relationship(\"Address\", backref=\"user\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n    id = mapped_column(Integer, primary_key=True)\n    email = mapped_column(String)\n    user_id = mapped_column(Integer, ForeignKey(\"user.id\"))\n```", "```py\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import DeclarativeBase, relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String)\n\n    addresses = relationship(\"Address\", back_populates=\"user\")\n\nclass Address(Base):\n    __tablename__ = \"address\"\n    id = mapped_column(Integer, primary_key=True)\n    email = mapped_column(String)\n    user_id = mapped_column(Integer, ForeignKey(\"user.id\"))\n\n    user = relationship(\"User\", back_populates=\"addresses\")\n```", "```py\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import DeclarativeBase, relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String)\n\n    addresses = relationship(\n        \"Address\",\n        primaryjoin=(\n            \"and_(User.id==Address.user_id, Address.email.startswith('tony'))\"\n        ),\n        backref=\"user\",\n    )\n\nclass Address(Base):\n    __tablename__ = \"address\"\n    id = mapped_column(Integer, primary_key=True)\n    email = mapped_column(String)\n    user_id = mapped_column(Integer, ForeignKey(\"user.id\"))\n```", "```py\n>>> print(User.addresses.property.primaryjoin)\n\"user\".id = address.user_id AND address.email LIKE :email_1 || '%%'\n>>>\n>>> print(Address.user.property.primaryjoin)\n\"user\".id = address.user_id AND address.email LIKE :email_1 || '%%'\n>>>\n```", "```py\n# <other imports>\nfrom sqlalchemy.orm import backref\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String)\n\n    addresses = relationship(\n        \"Address\",\n        backref=backref(\"user\", lazy=\"joined\"),\n    )\n```", "```py\nfrom sqlalchemy import Column, ForeignKey, Integer, String\nfrom sqlalchemy.orm import DeclarativeBase, relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String)\n\n    addresses = relationship(\n        \"Address\",\n        primaryjoin=(\n            \"and_(User.id==Address.user_id, Address.email.startswith('tony'))\"\n        ),\n        backref=\"user\",\n    )\n\nclass Address(Base):\n    __tablename__ = \"address\"\n    id = mapped_column(Integer, primary_key=True)\n    email = mapped_column(String)\n    user_id = mapped_column(Integer, ForeignKey(\"user.id\"))\n```", "```py\n>>> print(User.addresses.property.primaryjoin)\n\"user\".id = address.user_id AND address.email LIKE :email_1 || '%%'\n>>>\n>>> print(Address.user.property.primaryjoin)\n\"user\".id = address.user_id AND address.email LIKE :email_1 || '%%'\n>>>\n```", "```py\n# <other imports>\nfrom sqlalchemy.orm import backref\n\nclass User(Base):\n    __tablename__ = \"user\"\n    id = mapped_column(Integer, primary_key=True)\n    name = mapped_column(String)\n\n    addresses = relationship(\n        \"Address\",\n        backref=backref(\"user\", lazy=\"joined\"),\n    )\n```"]