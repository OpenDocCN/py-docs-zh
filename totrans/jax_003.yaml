- en: Quickstart
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速入门
- en: 原文：[`jax.readthedocs.io/en/latest/quickstart.html`](https://jax.readthedocs.io/en/latest/quickstart.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/quickstart.html`](https://jax.readthedocs.io/en/latest/quickstart.html)
- en: '**JAX a library for array-oriented numerical computation (*à la* [NumPy](https://numpy.org/)),
    with automatic differentiation and JIT compilation to enable high-performance
    machine learning research**.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**JAX 是一个面向数组的数值计算库（*à la* [NumPy](https://numpy.org/)），具有自动微分和 JIT 编译功能，以支持高性能的机器学习研究**。'
- en: 'This document provides a quick overview of essential JAX features, so you can
    get started with JAX quickly:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档提供了 JAX 主要功能的快速概述，让您可以快速开始使用 JAX：
- en: JAX provides a unified NumPy-like interface to computations that run on CPU,
    GPU, or TPU, in local or distributed settings.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 提供了一个统一的类似于 NumPy 的接口，用于在 CPU、GPU 或 TPU 上运行的计算，在本地或分布式设置中。
- en: JAX features built-in Just-In-Time (JIT) compilation via [Open XLA](https://github.com/openxla),
    an open-source machine learning compiler ecosystem.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 通过 [Open XLA](https://github.com/openxla) 内置了即时编译（JIT）功能，这是一个开源的机器学习编译器生态系统。
- en: JAX functions support efficient evaluation of gradients via its automatic differentiation
    transformations.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 函数支持通过其自动微分转换有效地评估梯度。
- en: JAX functions can be automatically vectorized to efficiently map them over arrays
    representing batches of inputs.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX 函数可以自动向量化，以有效地将它们映射到表示输入批次的数组上。
- en: Installation
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: 'JAX can be installed for CPU on Linux, Windows, and macOS directly from the
    [Python Package Index](https://pypi.org/project/jax/):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 可以直接从 [Python Package Index](https://pypi.org/project/jax/) 安装 JAX 用于 Linux、Windows
    和 macOS 上的 CPU：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'or, for NVIDIA GPU:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，对于NVIDIA GPU：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For more detailed platform-specific installation information, check out Installing
    JAX.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更详细的特定平台安装信息，请查看安装 JAX。
- en: JAX as NumPy
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JAX 就像 NumPy 一样
- en: 'Most JAX usage is through the familiar `jax.numpy` API, which is typically
    imported under the `jnp` alias:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 JAX 的使用是通过熟悉的 `jax.numpy` API 进行的，通常在 `jnp` 别名下导入：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With this import, you can immediately use JAX in a similar manner to typical
    NumPy programs, including using NumPy-style array creation functions, Python functions
    and operators, and array attributes and methods:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个导入，您可以立即像使用典型的 NumPy 程序一样使用 JAX，包括使用 NumPy 风格的数组创建函数、Python 函数和操作符，以及数组属性和方法：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You’ll find a few differences between JAX arrays and NumPy arrays once you begin
    digging-in; these are explored in [🔪 JAX - The Sharp Bits 🔪](https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您开始深入研究，您会发现 JAX 数组和 NumPy 数组之间存在一些差异；这些差异在 [🔪 JAX - The Sharp Bits 🔪](https://jax.readthedocs.io/en/latest/notebooks/Common_Gotchas_in_JAX.html)
    中进行了探讨。
- en: Just-in-time compilation with `jax.jit()`
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`jax.jit()`进行即时编译
- en: JAX runs transparently on the GPU or TPU (falling back to CPU if you don’t have
    one). However, in the above example, JAX is dispatching kernels to the chip one
    operation at a time. If we have a sequence of operations, we can use the `jax.jit()`
    function to compile this sequence of operations together using XLA.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 可以在 GPU 或 TPU 上透明运行（如果没有，则退回到 CPU）。然而，在上述示例中，JAX 是一次将核心分派到芯片上的操作。如果我们有一系列操作，我们可以使用
    `jax.jit()` 函数将这些操作一起编译为 XLA。
- en: 'We can use IPython’s `%timeit` to quickly benchmark our `selu` function, using
    `block_until_ready()` to account for JAX’s dynamic dispatch (See Asynchronous
    dispatch):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 IPython 的 `%timeit` 快速测试我们的 `selu` 函数，使用 `block_until_ready()` 来考虑 JAX
    的动态分派（请参阅异步分派）：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: (notice we’ve used `jax.random` to generate some random numbers; for details
    on how to generate random numbers in JAX, check out Pseudorandom numbers).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: （请注意，我们已经使用 `jax.random` 生成了一些随机数；有关如何在 JAX 中生成随机数的详细信息，请查看伪随机数）。
- en: We can speed the execution of this function with the `jax.jit()` transformation,
    which will jit-compile the first time `selu` is called and will be cached thereafter.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `jax.jit()` 转换来加速此函数的执行，该转换将在首次调用 `selu` 时进行 JIT 编译，并在此后进行缓存。
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The above timing represent execution on CPU, but the same code can be run on
    GPU or TPU, typically for an even greater speedup.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述时间表示在 CPU 上执行，但同样的代码可以在 GPU 或 TPU 上运行，通常会有更大的加速效果。
- en: For more on JIT compilation in JAX, check out Just-in-time compilation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多关于 JAX 中 JIT 编译的信息，请查看即时编译。
- en: Taking derivatives with `jax.grad()`
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `jax.grad()` 计算导数
- en: 'In addition to transforming functions via JIT compilation, JAX also provides
    other transformations. One such transformation is `jax.grad()`, which performs
    [automatic differentiation (autodiff)](https://en.wikipedia.org/wiki/Automatic_differentiation):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 除了通过 JIT 编译转换函数外，JAX 还提供其他转换功能。其中一种转换是 `jax.grad()`，它执行[自动微分 (autodiff)](https://en.wikipedia.org/wiki/Automatic_differentiation)：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let’s verify with finite differences that our result is correct.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用有限差分来验证我们的结果是否正确。
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `grad()` and `jit()` transformations compose and can be mixed arbitrarily.
    In the above example we jitted `sum_logistic` and then took its derivative. We
    can go further:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`grad()` 和 `jit()` 转换可以任意组合并混合使用。在上面的示例中，我们对 `sum_logistic` 进行了 JIT 编译，然后取了它的导数。我们可以进一步进行：'
- en: '[PRE13]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Beyond scalar-valued functions, the `jax.jacobian()` transformation can be
    used to compute the full Jacobian matrix for vector-valued functions:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标量值函数外，`jax.jacobian()` 转换还可用于计算向量值函数的完整雅可比矩阵：
- en: '[PRE15]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For more advanced autodiff operations, you can use `jax.vjp()` for reverse-mode
    vector-Jacobian products, and `jax.jvp()` and `jax.linearize()` for forward-mode
    Jacobian-vector products. The two can be composed arbitrarily with one another,
    and with other JAX transformations. For example, `jax.jvp()` and `jax.vjp()` are
    used to define the forward-mode `jax.jacfwd()` and reverse-mode `jax.jacrev()`
    for computing Jacobians in forward- and reverse-mode, respectively. Here’s one
    way to compose them to make a function that efficiently computes full Hessian
    matrices:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更高级的自动微分操作，您可以使用 `jax.vjp()` 来进行反向模式向量-雅可比积分，以及使用 `jax.jvp()` 和 `jax.linearize()`
    进行正向模式雅可比-向量积分。这两者可以任意组合，也可以与其他 JAX 转换组合使用。例如，`jax.jvp()` 和 `jax.vjp()` 用于定义正向模式
    `jax.jacfwd()` 和反向模式 `jax.jacrev()`，用于计算正向和反向模式下的雅可比矩阵。以下是组合它们以有效计算完整 Hessian
    矩阵的一种方法：
- en: '[PRE17]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This kind of composition produces efficient code in practice; this is more-or-less
    how JAX’s built-in `jax.hessian()` function is implemented.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这种组合在实践中产生了高效的代码；这基本上是 JAX 内置的 `jax.hessian()` 函数的实现方式。
- en: For more on automatic differentiation in JAX, check out Automatic differentiation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于 JAX 中的自动微分，请查看自动微分。
- en: Auto-vectorization with `jax.vmap()`
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `jax.vmap()` 进行自动向量化
- en: Another useful transformation is `vmap()`, the vectorizing map. It has the familiar
    semantics of mapping a function along array axes, but instead of explicitly looping
    over function calls, it transforms the function into a natively vectorized version
    for better performance. When composed with `jit()`, it can be just as performant
    as manually rewriting your function operate over an extra batch dimension.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的转换是 `vmap()`，即向量化映射。它具有沿数组轴映射函数的熟悉语义，但与显式循环函数调用不同，它将函数转换为本地向量化版本，以获得更好的性能。与
    `jit()` 组合时，它可以与手动重写函数以处理额外批处理维度的性能相媲美。
- en: We’re going to work with a simple example, and promote matrix-vector products
    into matrix-matrix products using `vmap()`. Although this is easy to do by hand
    in this specific case, the same technique can apply to more complicated functions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将处理一个简单的示例，并使用 `vmap()` 将矩阵-向量乘法提升为矩阵-矩阵乘法。虽然在这种特定情况下手动完成这一点很容易，但相同的技术也适用于更复杂的函数。
- en: '[PRE19]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `apply_matrix` function maps a vector to a vector, but we may want to apply
    it row-wise across a matrix. We could do this by looping over the batch dimension
    in Python, but this usually results in poor performance.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`apply_matrix` 函数将一个向量映射到另一个向量，但我们可能希望将其逐行应用于矩阵。在 Python 中，我们可以通过循环遍历批处理维度来实现这一点，但通常导致性能不佳。'
- en: '[PRE20]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'A programmer familiar with the the `jnp.dot` function might recognize that
    `apply_matrix` can be rewritten to avoid explicit looping, using the built-in
    batching semantics of `jnp.dot`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 熟悉 `jnp.dot` 函数的程序员可能会意识到，可以重写 `apply_matrix` 来避免显式循环，利用 `jnp.dot` 的内置批处理语义：
- en: '[PRE22]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'However, as functions become more complicated, this kind of manual batching
    becomes more difficult and error-prone. The `vmap()` transformation is designed
    to automatically transform a function into a batch-aware version:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着函数变得更加复杂，这种手动批处理变得更加困难且容易出错。`vmap()` 转换旨在自动将函数转换为支持批处理的版本：
- en: '[PRE24]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As you would expect, `vmap()` can be arbitrarily composed with `jit()`, `grad()`,
    and any other JAX transformation.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所预期的那样，`vmap()` 可以与 `jit()`、`grad()` 和任何其他 JAX 转换任意组合。
- en: For more on automatic vectorization in JAX, check out Automatic vectorization.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于 JAX 中的自动向量化，请查看自动向量化。
- en: This is just a taste of what JAX can do. We’re really excited to see what you
    do with it!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是 JAX 能做的一小部分。我们非常期待看到你用它做些什么！
