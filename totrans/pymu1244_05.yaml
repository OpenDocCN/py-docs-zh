- en: The Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/the-basics.html](https://pymupdf.readthedocs.io/en/latest/the-basics.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '## Opening a File'
  prefs: []
  type: TYPE_NORMAL
- en: 'To open a file, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: See the [list of supported file types](how-to-open-a-file.html#supported-file-types)
    and [The How to Guide on Opening Files](how-to-open-a-file.html#howtoopenafile)
    for more advanced options.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *  ## Extract text from a PDF'
  prefs: []
  type: TYPE_NORMAL
- en: 'To extract all the text from a PDF file, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Of course it is not just PDF which can have text extracted - all the [supported
    document file formats](about.html#about-feature-matrix) such as MOBI, EPUB, TXT
    can have their text extracted.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If your document contains image based text content the use OCR on the page
    for subsequent text extraction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There are many more examples which explain how to extract text from specific
    areas or how to extract tables from documents. Please refer to the [How to Guide
    for Text](recipes-text.html#recipestext).
  prefs: []
  type: TYPE_NORMAL
- en: You can now also [extract text in Markdown format](rag.html#rag-outputting-as-md).
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.get_text()`](page.html#Page.get_text "Page.get_text")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Extract images from a PDF'
  prefs: []
  type: TYPE_NORMAL
- en: 'To extract all the images from a PDF file, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: There are many more examples which explain how to extract text from specific
    areas or how to extract tables from documents. Please refer to the [How to Guide
    for Text](recipes-text.html#recipestext).
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.get_images()`](page.html#Page.get_images "Page.get_images")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pixmap](pixmap.html#pixmap)  ## Extract vector graphics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To extract all the vector graphics from a document page, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will return a dictionary of paths for any vector drawings found on the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Please refer to: [How to Extract Drawings](recipes-drawing-and-graphics.html#recipesdrawingandgraphics-extract-drawings).'
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.get_drawings()`](page.html#Page.get_drawings "Page.get_drawings")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Merging PDF files'
  prefs: []
  type: TYPE_NORMAL
- en: 'To merge PDF files, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Merging PDF files with other types of file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With [`Document.insert_file()`](document.html#Document.insert_file "Document.insert_file")
    you can invoke the method to merge [supported files](how-to-open-a-file.html#supported-file-types)
    with PDF. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: It is easy to join PDFs with [`Document.insert_pdf()`](document.html#Document.insert_pdf
    "Document.insert_pdf") & [`Document.insert_file()`](document.html#Document.insert_file
    "Document.insert_file"). Given open PDF documents, you can copy page ranges from
    one to the other. You can select the point where the copied pages should be placed,
    you can revert the page sequence and also change page rotation. This Wiki [article](https://github.com/pymupdf/PyMuPDF/wiki/Inserting-Pages-from-other-PDFs)
    contains a full description.
  prefs: []
  type: TYPE_NORMAL
- en: 'The GUI script [join.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/join-documents/join.py)
    uses this method to join a list of files while also joining the respective table
    of contents segments. It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![_images/img-pdfjoiner.jpg](../Images/152902cdc5245997f9ae031b888bd9d3.png)](_images/img-pdfjoiner.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.insert_pdf()`](document.html#Document.insert_pdf "Document.insert_pdf")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Document.insert_file()`](document.html#Document.insert_file "Document.insert_file")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Working with Coordinates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is one *mathematical term* that you should feel comfortable with when
    using **PyMuPDF** - **“coordinates”**. Please have a quick look at the [Coordinates](app3.html#coordinates)
    section to understand the coordinate system to help you with positioning objects
    and understand your document space.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Adding a watermark to a PDF'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a watermark to a PDF file, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: Adding watermarks is essentially as simple as adding an image at the base of
    each PDF page. You should ensure that the image has the required opacity and aspect
    ratio to make it look the way you need it to.
  prefs: []
  type: TYPE_NORMAL
- en: In the example above a new image is created from each file reference, but to
    be more performant (by saving memory and file size) this image data should be
    referenced only once - see the code example and explanation on [`Page.insert_image()`](page.html#Page.insert_image
    "Page.insert_image") for the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.bound()`](page.html#Page.bound "Page.bound")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Adding an image to a PDF'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add an image to a PDF file, for example a logo, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: As with the watermark example you should ensure to be more performant by only
    referencing the image once if possible - see the code example and explanation
    on [`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image").
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Rotating a PDF'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a rotation to a page, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.set_rotation()`](page.html#Page.set_rotation "Page.set_rotation")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Cropping a PDF'
  prefs: []
  type: TYPE_NORMAL
- en: 'To crop a page to a defined [Rect](rect.html#rect), do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.set_cropbox()`](page.html#Page.set_cropbox "Page.set_cropbox")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Attaching Files'
  prefs: []
  type: TYPE_NORMAL
- en: 'To attach another file to a page, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: When adding the file with [`Page.add_file_annot()`](page.html#Page.add_file_annot
    "Page.add_file_annot") note that the third parameter for the `filename` should
    include the actual file extension. Without this the attachment possibly will not
    be able to be recognized as being something which can be opened. For example,
    if the `filename` is just *“attachment”* when view the resulting PDF and attempting
    to open the attachment you may well get an error. However, with *“attachment.pdf”*
    this can be recognized and opened by PDF viewers as a valid file type.
  prefs: []
  type: TYPE_NORMAL
- en: The default icon for the attachment is by default a “push pin”, however you
    can change this by setting the `icon` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Document.tobytes()`](document.html#Document.tobytes "Document.tobytes")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.add_file_annot()`](page.html#Page.add_file_annot "Page.add_file_annot")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Embedding Files'
  prefs: []
  type: TYPE_NORMAL
- en: 'To embed a file to a document, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: As with [attaching files](#the-basics-attaching-files), when adding the file
    with [`Document.embfile_add()`](document.html#Document.embfile_add "Document.embfile_add")
    note that the first parameter for the `filename` should include the actual file
    extension.
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.tobytes()`](document.html#Document.tobytes "Document.tobytes")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Document.embfile_add()`](document.html#Document.embfile_add "Document.embfile_add")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Deleting Pages'
  prefs: []
  type: TYPE_NORMAL
- en: 'To delete a page from a document, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To delete a multiple pages from a document, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: What happens if I delete a page referred to by bookmarks or hyperlinks?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A bookmark (entry in the Table of Contents) will become inactive and will no
    longer navigate to any page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A hyperlink will be removed from the page that contains it. The visible content
    on that page will not otherwise be changed in any way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: The page index is zero-based, so to delete page 10 of a document you would do
    the following `doc.delete_page(9)`.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, `doc.delete_pages(from_page=9, to_page=14)` will delete pages 10
    - 15 inclusive.
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.delete_page()`](document.html#Document.delete_page "Document.delete_page")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Document.delete_pages()`](document.html#Document.delete_pages "Document.delete_pages")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Re-Arranging Pages'
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the sequence of pages, i.e. re-arrange pages, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.move_page()`](document.html#Document.move_page "Document.move_page")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Copying Pages'
  prefs: []
  type: TYPE_NORMAL
- en: 'To copy pages, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.copy_page()`](document.html#Document.copy_page "Document.copy_page")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Selecting Pages'
  prefs: []
  type: TYPE_NORMAL
- en: 'To select pages, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: With PyMuPDF you have all options to copy, move, delete or re-arrange the pages
    of a PDF. Intuitive methods exist that allow you to do this on a page-by-page
    level, like the [`Document.copy_page()`](document.html#Document.copy_page "Document.copy_page")
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Or you alternatively prepare a complete new page layout in form of a Python
    sequence, that contains the page numbers you want, in the sequence you want, and
    as many times as you want each page. The following may illustrate what can be
    done with [`Document.select()`](document.html#Document.select "Document.select")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s prepare a PDF for double-sided printing (on a printer not directly
    supporting this):'
  prefs: []
  type: TYPE_NORMAL
- en: 'The number of pages is given by `len(doc)` (equal to `doc.page_count`). The
    following lists represent the even and the odd page numbers, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This snippet creates the respective sub documents which can then be used to
    print the document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: For more information also have a look at this Wiki [article](https://github.com/pymupdf/PyMuPDF/wiki/Rearranging-Pages-of-a-PDF).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example will reverse the order of all pages (**extremely fast:**
    sub-second time for the 756 pages of the [Adobe PDF References](app3.html#adobemanual)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This snippet duplicates the PDF with itself so that it will contain the pages
    *0, 1, …, n, 0, 1, …, n* **(extremely fast and without noticeably increasing the
    file size!)**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.select()`](document.html#Document.select "Document.select")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Adding Blank Pages'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a blank page, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use this to create the page with another pre-defined paper format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The convenience function [`paper_size()`](functions.html#paper_size "paper_size")
    knows over 40 industry standard paper formats to choose from. To see them, inspect
    dictionary `paperSizes`. Pass the desired dictionary key to [`paper_size()`](functions.html#paper_size
    "paper_size") to retrieve the paper dimensions. Upper and lower case is supported.
    If you append “-L” to the format name, the landscape version is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a 3-liner that creates a PDF: with one empty page. Its file size is
    460 bytes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.new_page()`](document.html#Document.new_page "Document.new_page")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`paperSizes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Inserting Pages with Text Content'
  prefs: []
  type: TYPE_NORMAL
- en: Using the [`Document.insert_page()`](document.html#Document.insert_page "Document.insert_page")
    method also inserts a new page and accepts the same [`width`](irect.html#IRect.width
    "IRect.width") and [`height`](irect.html#IRect.height "IRect.height") parameters.
    But it lets you also insert arbitrary text into the new page and returns the number
    of inserted lines.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: The text parameter can be a (sequence of) string (assuming UTF-8 encoding).
    Insertion will start at [Point](point.html#point) (50, 72), which is one inch
    below top of page and 50 points from the left. The number of inserted text lines
    is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.insert_page()`](document.html#Document.insert_page "Document.insert_page")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Splitting Single Pages'
  prefs: []
  type: TYPE_NORMAL
- en: 'This deals with splitting up pages of a PDF in arbitrary pieces. For example,
    you may have a PDF with *Letter* format pages which you want to print with a magnification
    factor of four: each page is split up in 4 pieces which each going to a separate
    PDF page in *Letter* format again.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-posterize.png](../Images/357d3711aa806c0456c5f4d784a1dc49.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.cropbox_position()`](page.html#Page.cropbox_position "Page.cropbox_position")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.show_pdf_page()`](page.html#Page.show_pdf_page "Page.show_pdf_page")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Combining Single Pages'
  prefs: []
  type: TYPE_NORMAL
- en: This deals with joining PDF pages to form a new PDF with pages each combining
    two or four original ones (also called “2-up”, “4-up”, etc.). This could be used
    to create booklets or thumbnail-like overviews.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-4up.png](../Images/fa3604463ab84cc2374f109a7c72253d.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.cropbox_position()`](page.html#Page.cropbox_position "Page.cropbox_position")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.show_pdf_page()`](page.html#Page.show_pdf_page "Page.show_pdf_page")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## PDF Encryption & Decryption'
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting with version 1.16.0, PDF decryption and encryption (using passwords)
    are fully supported. You can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Check whether a document is password protected / (still) encrypted ([`Document.needs_pass`](document.html#Document.needs_pass
    "Document.needs_pass"), [`Document.is_encrypted`](document.html#Document.is_encrypted
    "Document.is_encrypted")).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gain access authorization to a document ([`Document.authenticate()`](document.html#Document.authenticate
    "Document.authenticate")).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set encryption details for PDF files using [`Document.save()`](document.html#Document.save
    "Document.save") or `Document.write()` and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: decrypt or encrypt the content
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: set password(s)
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: set the encryption method
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: set permission details
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'A PDF document may have two different passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: The **owner password** provides full access rights, including changing passwords,
    encryption method, or permission detail.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **user password** provides access to document content according to the established
    permission details. If present, opening the PDF in a viewer will require providing
    it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Method [`Document.authenticate()`](document.html#Document.authenticate "Document.authenticate")
    will automatically establish access rights according to the password used.
  prefs: []
  type: TYPE_NORMAL
- en: The following snippet creates a new PDF and encrypts it with separate user and
    owner passwords. Permissions are granted to print, copy and annotate, but no changes
    are allowed to someone authenticating with the user password.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Opening this document with some viewer (Nitro Reader 5) reflects these settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-encrypting.jpg](../Images/9914d48b964e479f469dc44f3904247e.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Decrypting** will automatically happen on save as before when no encryption
    parameters are provided.'
  prefs: []
  type: TYPE_NORMAL
- en: To **keep the encryption method** of a PDF save it using `encryption=pymupdf.PDF_ENCRYPT_KEEP`.
    If `doc.can_save_incrementally() == True`, an incremental save is also possible.
  prefs: []
  type: TYPE_NORMAL
- en: To **change the encryption method** specify the full range of options above
    (`encryption`, `owner_pw`, `user_pw`, [`permissions`](document.html#Document.permissions
    "Document.permissions")). An incremental save is **not possible** in this case.
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.save()`](document.html#Document.save "Document.save")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Extracting Tables from a Page'
  prefs: []
  type: TYPE_NORMAL
- en: Tables can be found and extracted from any document [Page](page.html#page).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.find_tables()`](page.html#Page.find_tables "Page.find_tables")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important
  prefs: []
  type: TYPE_NORMAL
- en: There is also the [pdf2docx extract tables method](https://pdf2docx.readthedocs.io/en/latest/quickstart.table.html)
    which is capable of table extraction if you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *  ## Getting Page Links'
  prefs: []
  type: TYPE_NORMAL
- en: Links can be extracted from a [Page](page.html#page) to return [Link](link.html#link)
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.first_link()`](page.html#Page.first_link "Page.first_link")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Getting All Annotations from a Document'
  prefs: []
  type: TYPE_NORMAL
- en: Annotations ([Annot](annot.html#annot)) on pages can be retrieved with the `page.annots()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.annots()`](page.html#Page.annots "Page.annots")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Redacting content from a **PDF**'
  prefs: []
  type: TYPE_NORMAL
- en: Redactions are special types of annotations which can be marked onto a document
    page to denote an area on the page which should be securely removed. After marking
    an area with a rectangle then this area will be marked for *redaction*, once the
    redaction is *applied* then the content is securly removed.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example if we wanted to redact all instances of the name “Jane Doe” from
    a document we could do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Another example could be redacting an area of a page, but not to redact any
    line art (i.e. vector graphics) within the defined area, by setting a parameter
    flag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Once a redacted version of a document is saved then the redacted content in
    the **PDF** is *irretrievable*. Thus, a redacted area in a document removes text
    and graphics completely from that area.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: The are a few options for creating and applying redactions to a page, for the
    full API details to understand the parameters to control these options refer to
    the API reference.
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.add_redact_annot()`](page.html#Page.add_redact_annot "Page.add_redact_annot")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.apply_redactions()`](page.html#Page.apply_redactions "Page.apply_redactions")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *  ## Converting PDF Documents'
  prefs: []
  type: TYPE_NORMAL
- en: We recommend the [pdf2docx](https://pdf2docx.readthedocs.io/en/latest/) library
    which uses **PyMuPDF** and the **python-docx** library to provide simple document
    conversion from **PDF** to **DOCX** format.
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)
    ## Opening a File'
  prefs: []
  type: TYPE_NORMAL
- en: 'To open a file, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: See the [list of supported file types](how-to-open-a-file.html#supported-file-types)
    and [The How to Guide on Opening Files](how-to-open-a-file.html#howtoopenafile)
    for more advanced options.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Extract text from a PDF'
  prefs: []
  type: TYPE_NORMAL
- en: 'To extract all the text from a PDF file, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Of course it is not just PDF which can have text extracted - all the [supported
    document file formats](about.html#about-feature-matrix) such as MOBI, EPUB, TXT
    can have their text extracted.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If your document contains image based text content the use OCR on the page
    for subsequent text extraction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: There are many more examples which explain how to extract text from specific
    areas or how to extract tables from documents. Please refer to the [How to Guide
    for Text](recipes-text.html#recipestext).
  prefs: []
  type: TYPE_NORMAL
- en: You can now also [extract text in Markdown format](rag.html#rag-outputting-as-md).
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.get_text()`](page.html#Page.get_text "Page.get_text")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Extract images from a PDF'
  prefs: []
  type: TYPE_NORMAL
- en: 'To extract all the images from a PDF file, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: There are many more examples which explain how to extract text from specific
    areas or how to extract tables from documents. Please refer to the [How to Guide
    for Text](recipes-text.html#recipestext).
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.get_images()`](page.html#Page.get_images "Page.get_images")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pixmap](pixmap.html#pixmap)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Extract vector graphics'
  prefs: []
  type: TYPE_NORMAL
- en: 'To extract all the vector graphics from a document page, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This will return a dictionary of paths for any vector drawings found on the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Please refer to: [How to Extract Drawings](recipes-drawing-and-graphics.html#recipesdrawingandgraphics-extract-drawings).'
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.get_drawings()`](page.html#Page.get_drawings "Page.get_drawings")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Merging PDF files'
  prefs: []
  type: TYPE_NORMAL
- en: 'To merge PDF files, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Merging PDF files with other types of file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With [`Document.insert_file()`](document.html#Document.insert_file "Document.insert_file")
    you can invoke the method to merge [supported files](how-to-open-a-file.html#supported-file-types)
    with PDF. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: It is easy to join PDFs with [`Document.insert_pdf()`](document.html#Document.insert_pdf
    "Document.insert_pdf") & [`Document.insert_file()`](document.html#Document.insert_file
    "Document.insert_file"). Given open PDF documents, you can copy page ranges from
    one to the other. You can select the point where the copied pages should be placed,
    you can revert the page sequence and also change page rotation. This Wiki [article](https://github.com/pymupdf/PyMuPDF/wiki/Inserting-Pages-from-other-PDFs)
    contains a full description.
  prefs: []
  type: TYPE_NORMAL
- en: 'The GUI script [join.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/join-documents/join.py)
    uses this method to join a list of files while also joining the respective table
    of contents segments. It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![_images/img-pdfjoiner.jpg](../Images/152902cdc5245997f9ae031b888bd9d3.png)](_images/img-pdfjoiner.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.insert_pdf()`](document.html#Document.insert_pdf "Document.insert_pdf")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Document.insert_file()`](document.html#Document.insert_file "Document.insert_file")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Merging PDF files with other types of file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With [`Document.insert_file()`](document.html#Document.insert_file "Document.insert_file")
    you can invoke the method to merge [supported files](how-to-open-a-file.html#supported-file-types)
    with PDF. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: It is easy to join PDFs with [`Document.insert_pdf()`](document.html#Document.insert_pdf
    "Document.insert_pdf") & [`Document.insert_file()`](document.html#Document.insert_file
    "Document.insert_file"). Given open PDF documents, you can copy page ranges from
    one to the other. You can select the point where the copied pages should be placed,
    you can revert the page sequence and also change page rotation. This Wiki [article](https://github.com/pymupdf/PyMuPDF/wiki/Inserting-Pages-from-other-PDFs)
    contains a full description.
  prefs: []
  type: TYPE_NORMAL
- en: 'The GUI script [join.py](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/join-documents/join.py)
    uses this method to join a list of files while also joining the respective table
    of contents segments. It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[![_images/img-pdfjoiner.jpg](../Images/152902cdc5245997f9ae031b888bd9d3.png)](_images/img-pdfjoiner.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.insert_pdf()`](document.html#Document.insert_pdf "Document.insert_pdf")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Document.insert_file()`](document.html#Document.insert_file "Document.insert_file")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Coordinates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is one *mathematical term* that you should feel comfortable with when
    using **PyMuPDF** - **“coordinates”**. Please have a quick look at the [Coordinates](app3.html#coordinates)
    section to understand the coordinate system to help you with positioning objects
    and understand your document space.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Adding a watermark to a PDF'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a watermark to a PDF file, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: Adding watermarks is essentially as simple as adding an image at the base of
    each PDF page. You should ensure that the image has the required opacity and aspect
    ratio to make it look the way you need it to.
  prefs: []
  type: TYPE_NORMAL
- en: In the example above a new image is created from each file reference, but to
    be more performant (by saving memory and file size) this image data should be
    referenced only once - see the code example and explanation on [`Page.insert_image()`](page.html#Page.insert_image
    "Page.insert_image") for the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.bound()`](page.html#Page.bound "Page.bound")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Adding an image to a PDF'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add an image to a PDF file, for example a logo, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: As with the watermark example you should ensure to be more performant by only
    referencing the image once if possible - see the code example and explanation
    on [`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image").
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Rotating a PDF'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a rotation to a page, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.set_rotation()`](page.html#Page.set_rotation "Page.set_rotation")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Cropping a PDF'
  prefs: []
  type: TYPE_NORMAL
- en: 'To crop a page to a defined [Rect](rect.html#rect), do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.set_cropbox()`](page.html#Page.set_cropbox "Page.set_cropbox")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Attaching Files'
  prefs: []
  type: TYPE_NORMAL
- en: 'To attach another file to a page, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: When adding the file with [`Page.add_file_annot()`](page.html#Page.add_file_annot
    "Page.add_file_annot") note that the third parameter for the `filename` should
    include the actual file extension. Without this the attachment possibly will not
    be able to be recognized as being something which can be opened. For example,
    if the `filename` is just *“attachment”* when view the resulting PDF and attempting
    to open the attachment you may well get an error. However, with *“attachment.pdf”*
    this can be recognized and opened by PDF viewers as a valid file type.
  prefs: []
  type: TYPE_NORMAL
- en: The default icon for the attachment is by default a “push pin”, however you
    can change this by setting the `icon` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Document.tobytes()`](document.html#Document.tobytes "Document.tobytes")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.add_file_annot()`](page.html#Page.add_file_annot "Page.add_file_annot")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Embedding Files'
  prefs: []
  type: TYPE_NORMAL
- en: 'To embed a file to a document, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: As with [attaching files](#the-basics-attaching-files), when adding the file
    with [`Document.embfile_add()`](document.html#Document.embfile_add "Document.embfile_add")
    note that the first parameter for the `filename` should include the actual file
    extension.
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.tobytes()`](document.html#Document.tobytes "Document.tobytes")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Document.embfile_add()`](document.html#Document.embfile_add "Document.embfile_add")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Deleting Pages'
  prefs: []
  type: TYPE_NORMAL
- en: 'To delete a page from a document, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'To delete a multiple pages from a document, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: What happens if I delete a page referred to by bookmarks or hyperlinks?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A bookmark (entry in the Table of Contents) will become inactive and will no
    longer navigate to any page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A hyperlink will be removed from the page that contains it. The visible content
    on that page will not otherwise be changed in any way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: The page index is zero-based, so to delete page 10 of a document you would do
    the following `doc.delete_page(9)`.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, `doc.delete_pages(from_page=9, to_page=14)` will delete pages 10
    - 15 inclusive.
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.delete_page()`](document.html#Document.delete_page "Document.delete_page")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Document.delete_pages()`](document.html#Document.delete_pages "Document.delete_pages")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: What happens if I delete a page referred to by bookmarks or hyperlinks?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A bookmark (entry in the Table of Contents) will become inactive and will no
    longer navigate to any page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A hyperlink will be removed from the page that contains it. The visible content
    on that page will not otherwise be changed in any way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: The page index is zero-based, so to delete page 10 of a document you would do
    the following `doc.delete_page(9)`.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, `doc.delete_pages(from_page=9, to_page=14)` will delete pages 10
    - 15 inclusive.
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.delete_page()`](document.html#Document.delete_page "Document.delete_page")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Document.delete_pages()`](document.html#Document.delete_pages "Document.delete_pages")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Re-Arranging Pages'
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the sequence of pages, i.e. re-arrange pages, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.move_page()`](document.html#Document.move_page "Document.move_page")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Copying Pages'
  prefs: []
  type: TYPE_NORMAL
- en: 'To copy pages, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.copy_page()`](document.html#Document.copy_page "Document.copy_page")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Selecting Pages'
  prefs: []
  type: TYPE_NORMAL
- en: 'To select pages, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: With PyMuPDF you have all options to copy, move, delete or re-arrange the pages
    of a PDF. Intuitive methods exist that allow you to do this on a page-by-page
    level, like the [`Document.copy_page()`](document.html#Document.copy_page "Document.copy_page")
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Or you alternatively prepare a complete new page layout in form of a Python
    sequence, that contains the page numbers you want, in the sequence you want, and
    as many times as you want each page. The following may illustrate what can be
    done with [`Document.select()`](document.html#Document.select "Document.select")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s prepare a PDF for double-sided printing (on a printer not directly
    supporting this):'
  prefs: []
  type: TYPE_NORMAL
- en: 'The number of pages is given by `len(doc)` (equal to `doc.page_count`). The
    following lists represent the even and the odd page numbers, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'This snippet creates the respective sub documents which can then be used to
    print the document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: For more information also have a look at this Wiki [article](https://github.com/pymupdf/PyMuPDF/wiki/Rearranging-Pages-of-a-PDF).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example will reverse the order of all pages (**extremely fast:**
    sub-second time for the 756 pages of the [Adobe PDF References](app3.html#adobemanual)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'This snippet duplicates the PDF with itself so that it will contain the pages
    *0, 1, …, n, 0, 1, …, n* **(extremely fast and without noticeably increasing the
    file size!)**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.select()`](document.html#Document.select "Document.select")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Adding Blank Pages'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a blank page, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use this to create the page with another pre-defined paper format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The convenience function [`paper_size()`](functions.html#paper_size "paper_size")
    knows over 40 industry standard paper formats to choose from. To see them, inspect
    dictionary `paperSizes`. Pass the desired dictionary key to [`paper_size()`](functions.html#paper_size
    "paper_size") to retrieve the paper dimensions. Upper and lower case is supported.
    If you append “-L” to the format name, the landscape version is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a 3-liner that creates a PDF: with one empty page. Its file size is
    460 bytes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.new_page()`](document.html#Document.new_page "Document.new_page")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`paperSizes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Inserting Pages with Text Content'
  prefs: []
  type: TYPE_NORMAL
- en: Using the [`Document.insert_page()`](document.html#Document.insert_page "Document.insert_page")
    method also inserts a new page and accepts the same [`width`](irect.html#IRect.width
    "IRect.width") and [`height`](irect.html#IRect.height "IRect.height") parameters.
    But it lets you also insert arbitrary text into the new page and returns the number
    of inserted lines.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: The text parameter can be a (sequence of) string (assuming UTF-8 encoding).
    Insertion will start at [Point](point.html#point) (50, 72), which is one inch
    below top of page and 50 points from the left. The number of inserted text lines
    is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.insert_page()`](document.html#Document.insert_page "Document.insert_page")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Splitting Single Pages'
  prefs: []
  type: TYPE_NORMAL
- en: 'This deals with splitting up pages of a PDF in arbitrary pieces. For example,
    you may have a PDF with *Letter* format pages which you want to print with a magnification
    factor of four: each page is split up in 4 pieces which each going to a separate
    PDF page in *Letter* format again.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-posterize.png](../Images/357d3711aa806c0456c5f4d784a1dc49.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.cropbox_position()`](page.html#Page.cropbox_position "Page.cropbox_position")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.show_pdf_page()`](page.html#Page.show_pdf_page "Page.show_pdf_page")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Combining Single Pages'
  prefs: []
  type: TYPE_NORMAL
- en: This deals with joining PDF pages to form a new PDF with pages each combining
    two or four original ones (also called “2-up”, “4-up”, etc.). This could be used
    to create booklets or thumbnail-like overviews.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-4up.png](../Images/fa3604463ab84cc2374f109a7c72253d.png)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.cropbox_position()`](page.html#Page.cropbox_position "Page.cropbox_position")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.show_pdf_page()`](page.html#Page.show_pdf_page "Page.show_pdf_page")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## PDF Encryption & Decryption'
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting with version 1.16.0, PDF decryption and encryption (using passwords)
    are fully supported. You can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Check whether a document is password protected / (still) encrypted ([`Document.needs_pass`](document.html#Document.needs_pass
    "Document.needs_pass"), [`Document.is_encrypted`](document.html#Document.is_encrypted
    "Document.is_encrypted")).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gain access authorization to a document ([`Document.authenticate()`](document.html#Document.authenticate
    "Document.authenticate")).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set encryption details for PDF files using [`Document.save()`](document.html#Document.save
    "Document.save") or `Document.write()` and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: decrypt or encrypt the content
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: set password(s)
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: set the encryption method
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: set permission details
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'A PDF document may have two different passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: The **owner password** provides full access rights, including changing passwords,
    encryption method, or permission detail.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **user password** provides access to document content according to the established
    permission details. If present, opening the PDF in a viewer will require providing
    it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Method [`Document.authenticate()`](document.html#Document.authenticate "Document.authenticate")
    will automatically establish access rights according to the password used.
  prefs: []
  type: TYPE_NORMAL
- en: The following snippet creates a new PDF and encrypts it with separate user and
    owner passwords. Permissions are granted to print, copy and annotate, but no changes
    are allowed to someone authenticating with the user password.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Opening this document with some viewer (Nitro Reader 5) reflects these settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![_images/img-encrypting.jpg](../Images/9914d48b964e479f469dc44f3904247e.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Decrypting** will automatically happen on save as before when no encryption
    parameters are provided.'
  prefs: []
  type: TYPE_NORMAL
- en: To **keep the encryption method** of a PDF save it using `encryption=pymupdf.PDF_ENCRYPT_KEEP`.
    If `doc.can_save_incrementally() == True`, an incremental save is also possible.
  prefs: []
  type: TYPE_NORMAL
- en: To **change the encryption method** specify the full range of options above
    (`encryption`, `owner_pw`, `user_pw`, [`permissions`](document.html#Document.permissions
    "Document.permissions")). An incremental save is **not possible** in this case.
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.save()`](document.html#Document.save "Document.save")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Extracting Tables from a Page'
  prefs: []
  type: TYPE_NORMAL
- en: Tables can be found and extracted from any document [Page](page.html#page).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.find_tables()`](page.html#Page.find_tables "Page.find_tables")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important
  prefs: []
  type: TYPE_NORMAL
- en: There is also the [pdf2docx extract tables method](https://pdf2docx.readthedocs.io/en/latest/quickstart.table.html)
    which is capable of table extraction if you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Getting Page Links'
  prefs: []
  type: TYPE_NORMAL
- en: Links can be extracted from a [Page](page.html#page) to return [Link](link.html#link)
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.first_link()`](page.html#Page.first_link "Page.first_link")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Getting All Annotations from a Document'
  prefs: []
  type: TYPE_NORMAL
- en: Annotations ([Annot](annot.html#annot)) on pages can be retrieved with the `page.annots()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.annots()`](page.html#Page.annots "Page.annots")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Redacting content from a **PDF**'
  prefs: []
  type: TYPE_NORMAL
- en: Redactions are special types of annotations which can be marked onto a document
    page to denote an area on the page which should be securely removed. After marking
    an area with a rectangle then this area will be marked for *redaction*, once the
    redaction is *applied* then the content is securly removed.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example if we wanted to redact all instances of the name “Jane Doe” from
    a document we could do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Another example could be redacting an area of a page, but not to redact any
    line art (i.e. vector graphics) within the defined area, by setting a parameter
    flag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Once a redacted version of a document is saved then the redacted content in
    the **PDF** is *irretrievable*. Thus, a redacted area in a document removes text
    and graphics completely from that area.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Taking it further**'
  prefs: []
  type: TYPE_NORMAL
- en: The are a few options for creating and applying redactions to a page, for the
    full API details to understand the parameters to control these options refer to
    the API reference.
  prefs: []
  type: TYPE_NORMAL
- en: '**API reference**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Page.add_redact_annot()`](page.html#Page.add_redact_annot "Page.add_redact_annot")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.apply_redactions()`](page.html#Page.apply_redactions "Page.apply_redactions")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '## Converting PDF Documents'
  prefs: []
  type: TYPE_NORMAL
- en: We recommend the [pdf2docx](https://pdf2docx.readthedocs.io/en/latest/) library
    which uses **PyMuPDF** and the **python-docx** library to provide simple document
    conversion from **PDF** to **DOCX** format.
  prefs: []
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
