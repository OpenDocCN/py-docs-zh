["```py\n>>> from sqlalchemy import select\n>>> stmt = select(user_table).where(user_table.c.name == \"spongebob\")\n>>> print(stmt)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  :name_1 \n```", "```py\n>>> with engine.connect() as conn:\n...     for row in conn.execute(stmt):\n...         print(row)\nBEGIN  (implicit)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\n[...]  ('spongebob',)\n(1, 'spongebob', 'Spongebob Squarepants')\nROLLBACK \n```", "```py\n>>> stmt = select(User).where(User.name == \"spongebob\")\n>>> with Session(engine) as session:\n...     for row in session.execute(stmt):\n...         print(row)\nBEGIN  (implicit)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\n[...]  ('spongebob',)\n(User(id=1, name='spongebob', fullname='Spongebob Squarepants'),)\nROLLBACK \n```", "```py\n>>> print(select(user_table))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account \n```", "```py\n>>> print(select(user_table.c.name, user_table.c.fullname))\nSELECT  user_account.name,  user_account.fullname\nFROM  user_account \n```", "```py\n>>> print(select(user_table.c[\"name\", \"fullname\"]))\nSELECT  user_account.name,  user_account.fullname\nFROM  user_account \n```", "```py\n>>> print(select(User))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account \n```", "```py\n>>> row = session.execute(select(User)).first()\nBEGIN...\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\n>>> row\n(User(id=1, name='spongebob', fullname='Spongebob Squarepants'),)\n```", "```py\n>>> row[0]\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\n```", "```py\n>>> user = session.scalars(select(User)).first()\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\n>>> user\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\n```", "```py\n>>> print(select(User.name, User.fullname))\nSELECT  user_account.name,  user_account.fullname\nFROM  user_account \n```", "```py\n>>> row = session.execute(select(User.name, User.fullname)).first()\nSELECT  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\n>>> row\n('spongebob', 'Spongebob Squarepants')\n```", "```py\n>>> session.execute(\n...     select(User.name, Address).where(User.id == Address.user_id).order_by(Address.id)\n... ).all()\nSELECT  user_account.name,  address.id,  address.email_address,  address.user_id\nFROM  user_account,  address\nWHERE  user_account.id  =  address.user_id  ORDER  BY  address.id\n[...]  ()\n[('spongebob', Address(id=1, email_address='spongebob@sqlalchemy.org')),\n('sandy', Address(id=2, email_address='sandy@sqlalchemy.org')),\n('sandy', Address(id=3, email_address='sandy@squirrelpower.org'))]\n```", "```py\n>>> from sqlalchemy import func, cast\n>>> stmt = select(\n...     (\"Username: \" + user_table.c.name).label(\"username\"),\n... ).order_by(user_table.c.name)\n>>> with engine.connect() as conn:\n...     for row in conn.execute(stmt):\n...         print(f\"{row.username}\")\nBEGIN  (implicit)\nSELECT  ?  ||  user_account.name  AS  username\nFROM  user_account  ORDER  BY  user_account.name\n[...]  ('Username: ',)\nUsername: patrick\nUsername: sandy\nUsername: spongebob\nROLLBACK \n```", "```py\n>>> from sqlalchemy import text\n>>> stmt = select(text(\"'some phrase'\"), user_table.c.name).order_by(user_table.c.name)\n>>> with engine.connect() as conn:\n...     print(conn.execute(stmt).all())\nBEGIN  (implicit)\nSELECT  'some phrase',  user_account.name\nFROM  user_account  ORDER  BY  user_account.name\n[generated  in  ...]  ()\n[('some phrase', 'patrick'), ('some phrase', 'sandy'), ('some phrase', 'spongebob')]\nROLLBACK \n```", "```py\n>>> from sqlalchemy import literal_column\n>>> stmt = select(literal_column(\"'some phrase'\").label(\"p\"), user_table.c.name).order_by(\n...     user_table.c.name\n... )\n>>> with engine.connect() as conn:\n...     for row in conn.execute(stmt):\n...         print(f\"{row.p}, {row.name}\")\nBEGIN  (implicit)\nSELECT  'some phrase'  AS  p,  user_account.name\nFROM  user_account  ORDER  BY  user_account.name\n[generated  in  ...]  ()\nsome phrase, patrick\nsome phrase, sandy\nsome phrase, spongebob\nROLLBACK \n```", "```py\n>>> print(user_table.c.name == \"squidward\")\nuser_account.name = :name_1\n\n>>> print(address_table.c.user_id > 10)\naddress.user_id > :user_id_1\n```", "```py\n>>> print(select(user_table).where(user_table.c.name == \"squidward\"))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  :name_1 \n```", "```py\n>>> print(\n...     select(address_table.c.email_address)\n...     .where(user_table.c.name == \"squidward\")\n...     .where(address_table.c.user_id == user_table.c.id)\n... )\nSELECT  address.email_address\nFROM  address,  user_account\nWHERE  user_account.name  =  :name_1  AND  address.user_id  =  user_account.id \n```", "```py\n>>> print(\n...     select(address_table.c.email_address).where(\n...         user_table.c.name == \"squidward\",\n...         address_table.c.user_id == user_table.c.id,\n...     )\n... )\nSELECT  address.email_address\nFROM  address,  user_account\nWHERE  user_account.name  =  :name_1  AND  address.user_id  =  user_account.id \n```", "```py\n>>> from sqlalchemy import and_, or_\n>>> print(\n...     select(Address.email_address).where(\n...         and_(\n...             or_(User.name == \"squidward\", User.name == \"sandy\"),\n...             Address.user_id == User.id,\n...         )\n...     )\n... )\nSELECT  address.email_address\nFROM  address,  user_account\nWHERE  (user_account.name  =  :name_1  OR  user_account.name  =  :name_2)\nAND  address.user_id  =  user_account.id \n```", "```py\n>>> print(select(User).filter_by(name=\"spongebob\", fullname=\"Spongebob Squarepants\"))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  :name_1  AND  user_account.fullname  =  :fullname_1 \n```", "```py\n>>> print(select(user_table.c.name))\nSELECT  user_account.name\nFROM  user_account \n```", "```py\n>>> print(select(user_table.c.name, address_table.c.email_address))\nSELECT  user_account.name,  address.email_address\nFROM  user_account,  address \n```", "```py\n>>> print(\n...     select(user_table.c.name, address_table.c.email_address).join_from(\n...         user_table, address_table\n...     )\n... )\nSELECT  user_account.name,  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\n>>> print(select(user_table.c.name, address_table.c.email_address).join(address_table))\nSELECT  user_account.name,  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\n>>> print(select(address_table.c.email_address).select_from(user_table).join(address_table))\nSELECT  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\n>>> from sqlalchemy import func\n>>> print(select(func.count(\"*\")).select_from(user_table))\nSELECT  count(:count_2)  AS  count_1\nFROM  user_account \n```", "```py\n>>> print(\n...     select(address_table.c.email_address)\n...     .select_from(user_table)\n...     .join(address_table, user_table.c.id == address_table.c.user_id)\n... )\nSELECT  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\n>>> print(select(user_table).join(address_table, isouter=True))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account  LEFT  OUTER  JOIN  address  ON  user_account.id  =  address.user_id\n>>> print(select(user_table).join(address_table, full=True))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account  FULL  OUTER  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\n>>> print(select(user_table).order_by(user_table.c.name))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account  ORDER  BY  user_account.name \n```", "```py\n>>> print(select(User).order_by(User.fullname.desc()))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account  ORDER  BY  user_account.fullname  DESC \n```", "```py\n>>> from sqlalchemy import func\n>>> count_fn = func.count(user_table.c.id)\n>>> print(count_fn)\ncount(user_account.id) \n```", "```py\n>>> with engine.connect() as conn:\n...     result = conn.execute(\n...         select(User.name, func.count(Address.id).label(\"count\"))\n...         .join(Address)\n...         .group_by(User.name)\n...         .having(func.count(Address.id) > 1)\n...     )\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  user_account.name,  count(address.id)  AS  count\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id  GROUP  BY  user_account.name\nHAVING  count(address.id)  >  ?\n[...]  (1,)\n[('sandy', 2)]\nROLLBACK \n```", "```py\n>>> from sqlalchemy import func, desc\n>>> stmt = (\n...     select(Address.user_id, func.count(Address.id).label(\"num_addresses\"))\n...     .group_by(\"user_id\")\n...     .order_by(\"user_id\", desc(\"num_addresses\"))\n... )\n>>> print(stmt)\nSELECT  address.user_id,  count(address.id)  AS  num_addresses\nFROM  address  GROUP  BY  address.user_id  ORDER  BY  address.user_id,  num_addresses  DESC \n```", "```py\n>>> user_alias_1 = user_table.alias()\n>>> user_alias_2 = user_table.alias()\n>>> print(\n...     select(user_alias_1.c.name, user_alias_2.c.name).join_from(\n...         user_alias_1, user_alias_2, user_alias_1.c.id > user_alias_2.c.id\n...     )\n... )\nSELECT  user_account_1.name,  user_account_2.name  AS  name_1\nFROM  user_account  AS  user_account_1\nJOIN  user_account  AS  user_account_2  ON  user_account_1.id  >  user_account_2.id \n```", "```py\n>>> from sqlalchemy.orm import aliased\n>>> address_alias_1 = aliased(Address)\n>>> address_alias_2 = aliased(Address)\n>>> print(\n...     select(User)\n...     .join_from(User, address_alias_1)\n...     .where(address_alias_1.email_address == \"patrick@aol.com\")\n...     .join_from(User, address_alias_2)\n...     .where(address_alias_2.email_address == \"patrick@gmail.com\")\n... )\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nJOIN  address  AS  address_1  ON  user_account.id  =  address_1.user_id\nJOIN  address  AS  address_2  ON  user_account.id  =  address_2.user_id\nWHERE  address_1.email_address  =  :email_address_1\nAND  address_2.email_address  =  :email_address_2 \n```", "```py\n>>> subq = (\n...     select(func.count(address_table.c.id).label(\"count\"), address_table.c.user_id)\n...     .group_by(address_table.c.user_id)\n...     .subquery()\n... )\n```", "```py\n>>> print(subq)\nSELECT  count(address.id)  AS  count,  address.user_id\nFROM  address  GROUP  BY  address.user_id \n```", "```py\n>>> print(select(subq.c.user_id, subq.c.count))\nSELECT  anon_1.user_id,  anon_1.count\nFROM  (SELECT  count(address.id)  AS  count,  address.user_id  AS  user_id\nFROM  address  GROUP  BY  address.user_id)  AS  anon_1 \n```", "```py\n>>> stmt = select(user_table.c.name, user_table.c.fullname, subq.c.count).join_from(\n...     user_table, subq\n... )\n\n>>> print(stmt)\nSELECT  user_account.name,  user_account.fullname,  anon_1.count\nFROM  user_account  JOIN  (SELECT  count(address.id)  AS  count,  address.user_id  AS  user_id\nFROM  address  GROUP  BY  address.user_id)  AS  anon_1  ON  user_account.id  =  anon_1.user_id \n```", "```py\n>>> subq = (\n...     select(func.count(address_table.c.id).label(\"count\"), address_table.c.user_id)\n...     .group_by(address_table.c.user_id)\n...     .cte()\n... )\n\n>>> stmt = select(user_table.c.name, user_table.c.fullname, subq.c.count).join_from(\n...     user_table, subq\n... )\n\n>>> print(stmt)\nWITH  anon_1  AS\n(SELECT  count(address.id)  AS  count,  address.user_id  AS  user_id\nFROM  address  GROUP  BY  address.user_id)\n  SELECT  user_account.name,  user_account.fullname,  anon_1.count\nFROM  user_account  JOIN  anon_1  ON  user_account.id  =  anon_1.user_id \n```", "```py\n>>> subq = select(Address).where(~Address.email_address.like(\"%@aol.com\")).subquery()\n>>> address_subq = aliased(Address, subq)\n>>> stmt = (\n...     select(User, address_subq)\n...     .join_from(User, address_subq)\n...     .order_by(User.id, address_subq.id)\n... )\n>>> with Session(engine) as session:\n...     for user, address in session.execute(stmt):\n...         print(f\"{user} {address}\")\nBEGIN  (implicit)\nSELECT  user_account.id,  user_account.name,  user_account.fullname,\nanon_1.id  AS  id_1,  anon_1.email_address,  anon_1.user_id\nFROM  user_account  JOIN\n(SELECT  address.id  AS  id,  address.email_address  AS  email_address,  address.user_id  AS  user_id\nFROM  address\nWHERE  address.email_address  NOT  LIKE  ?)  AS  anon_1  ON  user_account.id  =  anon_1.user_id\nORDER  BY  user_account.id,  anon_1.id\n[...]  ('%@aol.com',)\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants') Address(id=1, email_address='spongebob@sqlalchemy.org')\nUser(id=2, name='sandy', fullname='Sandy Cheeks') Address(id=2, email_address='sandy@sqlalchemy.org')\nUser(id=2, name='sandy', fullname='Sandy Cheeks') Address(id=3, email_address='sandy@squirrelpower.org')\nROLLBACK \n```", "```py\n>>> cte_obj = select(Address).where(~Address.email_address.like(\"%@aol.com\")).cte()\n>>> address_cte = aliased(Address, cte_obj)\n>>> stmt = (\n...     select(User, address_cte)\n...     .join_from(User, address_cte)\n...     .order_by(User.id, address_cte.id)\n... )\n>>> with Session(engine) as session:\n...     for user, address in session.execute(stmt):\n...         print(f\"{user} {address}\")\nBEGIN  (implicit)\nWITH  anon_1  AS\n(SELECT  address.id  AS  id,  address.email_address  AS  email_address,  address.user_id  AS  user_id\nFROM  address\nWHERE  address.email_address  NOT  LIKE  ?)\nSELECT  user_account.id,  user_account.name,  user_account.fullname,\nanon_1.id  AS  id_1,  anon_1.email_address,  anon_1.user_id\nFROM  user_account\nJOIN  anon_1  ON  user_account.id  =  anon_1.user_id\nORDER  BY  user_account.id,  anon_1.id\n[...]  ('%@aol.com',)\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants') Address(id=1, email_address='spongebob@sqlalchemy.org')\nUser(id=2, name='sandy', fullname='Sandy Cheeks') Address(id=2, email_address='sandy@sqlalchemy.org')\nUser(id=2, name='sandy', fullname='Sandy Cheeks') Address(id=3, email_address='sandy@squirrelpower.org')\nROLLBACK \n```", "```py\n>>> subq = (\n...     select(func.count(address_table.c.id))\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .scalar_subquery()\n... )\n>>> print(subq)\n(SELECT  count(address.id)  AS  count_1\nFROM  address,  user_account\nWHERE  user_account.id  =  address.user_id) \n```", "```py\n>>> print(subq == 5)\n(SELECT  count(address.id)  AS  count_1\nFROM  address,  user_account\nWHERE  user_account.id  =  address.user_id)  =  :param_1 \n```", "```py\n>>> stmt = select(user_table.c.name, subq.label(\"address_count\"))\n>>> print(stmt)\nSELECT  user_account.name,  (SELECT  count(address.id)  AS  count_1\nFROM  address\nWHERE  user_account.id  =  address.user_id)  AS  address_count\nFROM  user_account \n```", "```py\n>>> stmt = (\n...     select(\n...         user_table.c.name,\n...         address_table.c.email_address,\n...         subq.label(\"address_count\"),\n...     )\n...     .join_from(user_table, address_table)\n...     .order_by(user_table.c.id, address_table.c.id)\n... )\n>>> print(stmt)\nTraceback (most recent call last):\n...\nInvalidRequestError: Select statement '<... Select object at ...>' returned\nno FROM clauses due to auto-correlation; specify correlate(<tables>) to\ncontrol correlation manually.\n```", "```py\n>>> subq = (\n...     select(func.count(address_table.c.id))\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .scalar_subquery()\n...     .correlate(user_table)\n... )\n```", "```py\n>>> with engine.connect() as conn:\n...     result = conn.execute(\n...         select(\n...             user_table.c.name,\n...             address_table.c.email_address,\n...             subq.label(\"address_count\"),\n...         )\n...         .join_from(user_table, address_table)\n...         .order_by(user_table.c.id, address_table.c.id)\n...     )\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  user_account.name,  address.email_address,  (SELECT  count(address.id)  AS  count_1\nFROM  address\nWHERE  user_account.id  =  address.user_id)  AS  address_count\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id  ORDER  BY  user_account.id,  address.id\n[...]  ()\n[('spongebob', 'spongebob@sqlalchemy.org', 1), ('sandy', 'sandy@sqlalchemy.org', 2),\n ('sandy', 'sandy@squirrelpower.org', 2)]\nROLLBACK \n```", "```py\n>>> subq = (\n...     select(\n...         func.count(address_table.c.id).label(\"address_count\"),\n...         address_table.c.email_address,\n...         address_table.c.user_id,\n...     )\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .lateral()\n... )\n>>> stmt = (\n...     select(user_table.c.name, subq.c.address_count, subq.c.email_address)\n...     .join_from(user_table, subq)\n...     .order_by(user_table.c.id, subq.c.email_address)\n... )\n>>> print(stmt)\nSELECT  user_account.name,  anon_1.address_count,  anon_1.email_address\nFROM  user_account\nJOIN  LATERAL  (SELECT  count(address.id)  AS  address_count,\naddress.email_address  AS  email_address,  address.user_id  AS  user_id\nFROM  address\nWHERE  user_account.id  =  address.user_id)  AS  anon_1\nON  user_account.id  =  anon_1.user_id\nORDER  BY  user_account.id,  anon_1.email_address \n```", "```py\n>>> from sqlalchemy import union_all\n>>> stmt1 = select(user_table).where(user_table.c.name == \"sandy\")\n>>> stmt2 = select(user_table).where(user_table.c.name == \"spongebob\")\n>>> u = union_all(stmt1, stmt2)\n>>> with engine.connect() as conn:\n...     result = conn.execute(u)\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\nUNION  ALL  SELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\n[generated  in  ...]  ('sandy',  'spongebob')\n[(2, 'sandy', 'Sandy Cheeks'), (1, 'spongebob', 'Spongebob Squarepants')]\nROLLBACK \n```", "```py\n>>> u_subq = u.subquery()\n>>> stmt = (\n...     select(u_subq.c.name, address_table.c.email_address)\n...     .join_from(address_table, u_subq)\n...     .order_by(u_subq.c.name, address_table.c.email_address)\n... )\n>>> with engine.connect() as conn:\n...     result = conn.execute(stmt)\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  anon_1.name,  address.email_address\nFROM  address  JOIN\n  (SELECT  user_account.id  AS  id,  user_account.name  AS  name,  user_account.fullname  AS  fullname\n  FROM  user_account\n  WHERE  user_account.name  =  ?\nUNION  ALL\n  SELECT  user_account.id  AS  id,  user_account.name  AS  name,  user_account.fullname  AS  fullname\n  FROM  user_account\n  WHERE  user_account.name  =  ?)\nAS  anon_1  ON  anon_1.id  =  address.user_id\nORDER  BY  anon_1.name,  address.email_address\n[generated  in  ...]  ('sandy',  'spongebob')\n[('sandy', 'sandy@sqlalchemy.org'), ('sandy', 'sandy@squirrelpower.org'), ('spongebob', 'spongebob@sqlalchemy.org')]\nROLLBACK \n```", "```py\n>>> stmt1 = select(User).where(User.name == \"sandy\")\n>>> stmt2 = select(User).where(User.name == \"spongebob\")\n>>> u = union_all(stmt1, stmt2)\n```", "```py\n>>> orm_stmt = select(User).from_statement(u)\n>>> with Session(engine) as session:\n...     for obj in session.execute(orm_stmt).scalars():\n...         print(obj)\nBEGIN  (implicit)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?  UNION  ALL  SELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\n[generated  in  ...]  ('sandy',  'spongebob')\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\nROLLBACK \n```", "```py\n>>> user_alias = aliased(User, u.subquery())\n>>> orm_stmt = select(user_alias).order_by(user_alias.id)\n>>> with Session(engine) as session:\n...     for obj in session.execute(orm_stmt).scalars():\n...         print(obj)\nBEGIN  (implicit)\nSELECT  anon_1.id,  anon_1.name,  anon_1.fullname\nFROM  (SELECT  user_account.id  AS  id,  user_account.name  AS  name,  user_account.fullname  AS  fullname\nFROM  user_account\nWHERE  user_account.name  =  ?  UNION  ALL  SELECT  user_account.id  AS  id,  user_account.name  AS  name,  user_account.fullname  AS  fullname\nFROM  user_account\nWHERE  user_account.name  =  ?)  AS  anon_1  ORDER  BY  anon_1.id\n[generated  in  ...]  ('sandy',  'spongebob')\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\nROLLBACK \n```", "```py\n>>> subq = (\n...     select(func.count(address_table.c.id))\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .group_by(address_table.c.user_id)\n...     .having(func.count(address_table.c.id) > 1)\n... ).exists()\n>>> with engine.connect() as conn:\n...     result = conn.execute(select(user_table.c.name).where(subq))\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  user_account.name\nFROM  user_account\nWHERE  EXISTS  (SELECT  count(address.id)  AS  count_1\nFROM  address\nWHERE  user_account.id  =  address.user_id  GROUP  BY  address.user_id\nHAVING  count(address.id)  >  ?)\n[...]  (1,)\n[('sandy',)]\nROLLBACK \n```", "```py\n>>> subq = (\n...     select(address_table.c.id).where(user_table.c.id == address_table.c.user_id)\n... ).exists()\n>>> with engine.connect() as conn:\n...     result = conn.execute(select(user_table.c.name).where(~subq))\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  user_account.name\nFROM  user_account\nWHERE  NOT  (EXISTS  (SELECT  address.id\nFROM  address\nWHERE  user_account.id  =  address.user_id))\n[...]  ()\n[('patrick',)]\nROLLBACK \n```", "```py\n    >>> print(select(func.count()).select_from(user_table))\n    SELECT  count(*)  AS  count_1\n    FROM  user_account \n    ```", "```py\n    >>> print(select(func.lower(\"A String With Much UPPERCASE\")))\n    SELECT  lower(:lower_2)  AS  lower_1 \n    ```", "```py\n    >>> stmt = select(func.now())\n    >>> with engine.connect() as conn:\n    ...     result = conn.execute(stmt)\n    ...     print(result.all())\n    BEGIN  (implicit)\n    SELECT  CURRENT_TIMESTAMP  AS  now_1\n    [...]  ()\n    [(datetime.datetime(...),)]\n    ROLLBACK \n    ```", "```py\n>>> print(select(func.some_crazy_function(user_table.c.name, 17)))\nSELECT  some_crazy_function(user_account.name,  :some_crazy_function_2)  AS  some_crazy_function_1\nFROM  user_account \n```", "```py\n>>> from sqlalchemy.dialects import postgresql\n>>> print(select(func.now()).compile(dialect=postgresql.dialect()))\nSELECT  now()  AS  now_1\n>>> from sqlalchemy.dialects import oracle\n>>> print(select(func.now()).compile(dialect=oracle.dialect()))\nSELECT  CURRENT_TIMESTAMP  AS  now_1  FROM  DUAL \n```", "```py\n>>> func.now().type\nDateTime()\n```", "```py\n>>> from sqlalchemy import JSON\n>>> function_expr = func.json_object('{a, 1, b, \"def\", c, 3.5}', type_=JSON)\n```", "```py\n>>> stmt = select(function_expr[\"def\"])\n>>> print(stmt)\nSELECT  json_object(:json_object_1)[:json_object_2]  AS  anon_1 \n```", "```py\n>>> m1 = func.max(Column(\"some_int\", Integer))\n>>> m1.type\nInteger()\n\n>>> m2 = func.max(Column(\"some_str\", String))\n>>> m2.type\nString()\n```", "```py\n>>> func.now().type\nDateTime()\n>>> func.current_date().type\nDate()\n```", "```py\n>>> func.concat(\"x\", \"y\").type\nString()\n```", "```py\n>>> func.upper(\"lowercase\").type\nNullType()\n```", "```py\n>>> print(select(func.upper(\"lowercase\") + \" suffix\"))\nSELECT  upper(:upper_1)  ||  :upper_2  AS  anon_1 \n```", "```py\n    >>> func.count().type\n    Integer()\n    ```", "```py\n    >>> func.json_object('{\"a\", \"b\"}').type\n    NullType()\n    ```", "```py\n>>> stmt = (\n...     select(\n...         func.row_number().over(partition_by=user_table.c.name),\n...         user_table.c.name,\n...         address_table.c.email_address,\n...     )\n...     .select_from(user_table)\n...     .join(address_table)\n... )\n>>> with engine.connect() as conn:  \n...     result = conn.execute(stmt)\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  row_number()  OVER  (PARTITION  BY  user_account.name)  AS  anon_1,\nuser_account.name,  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id\n[...]  ()\n[(1, 'sandy', 'sandy@sqlalchemy.org'), (2, 'sandy', 'sandy@squirrelpower.org'), (1, 'spongebob', 'spongebob@sqlalchemy.org')]\nROLLBACK \n```", "```py\n>>> stmt = (\n...     select(\n...         func.count().over(order_by=user_table.c.name),\n...         user_table.c.name,\n...         address_table.c.email_address,\n...     )\n...     .select_from(user_table)\n...     .join(address_table)\n... )\n>>> with engine.connect() as conn:  \n...     result = conn.execute(stmt)\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  count(*)  OVER  (ORDER  BY  user_account.name)  AS  anon_1,\nuser_account.name,  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id\n[...]  ()\n[(2, 'sandy', 'sandy@sqlalchemy.org'), (2, 'sandy', 'sandy@squirrelpower.org'), (3, 'spongebob', 'spongebob@sqlalchemy.org')]\nROLLBACK \n```", "```py\n>>> print(\n...     func.unnest(\n...         func.percentile_disc([0.25, 0.5, 0.75, 1]).within_group(user_table.c.name)\n...     )\n... )\nunnest(percentile_disc(:percentile_disc_1)  WITHIN  GROUP  (ORDER  BY  user_account.name)) \n```", "```py\n>>> stmt = (\n...     select(\n...         func.count(address_table.c.email_address).filter(user_table.c.name == \"sandy\"),\n...         func.count(address_table.c.email_address).filter(\n...             user_table.c.name == \"spongebob\"\n...         ),\n...     )\n...     .select_from(user_table)\n...     .join(address_table)\n... )\n>>> with engine.connect() as conn:  \n...     result = conn.execute(stmt)\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  count(address.email_address)  FILTER  (WHERE  user_account.name  =  ?)  AS  anon_1,\ncount(address.email_address)  FILTER  (WHERE  user_account.name  =  ?)  AS  anon_2\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id\n[...]  ('sandy',  'spongebob')\n[(2, 1)]\nROLLBACK \n```", "```py\n>>> onetwothree = func.json_each('[\"one\", \"two\", \"three\"]').table_valued(\"value\")\n>>> stmt = select(onetwothree).where(onetwothree.c.value.in_([\"two\", \"three\"]))\n>>> with engine.connect() as conn:\n...     result = conn.execute(stmt)\n...     result.all()\nBEGIN  (implicit)\nSELECT  anon_1.value\nFROM  json_each(?)  AS  anon_1\nWHERE  anon_1.value  IN  (?,  ?)\n[...]  ('[\"one\", \"two\", \"three\"]',  'two',  'three')\n[('two',), ('three',)]\nROLLBACK \n```", "```py\n>>> from sqlalchemy import select, func\n>>> stmt = select(func.json_array_elements('[\"one\", \"two\"]').column_valued(\"x\"))\n>>> print(stmt)\nSELECT  x\nFROM  json_array_elements(:json_array_elements_1)  AS  x \n```", "```py\n>>> from sqlalchemy.dialects import oracle\n>>> stmt = select(func.scalar_strings(5).column_valued(\"s\"))\n>>> print(stmt.compile(dialect=oracle.dialect()))\nSELECT  s.COLUMN_VALUE\nFROM  TABLE  (scalar_strings(:scalar_strings_1))  s \n```", "```py\n>>> from sqlalchemy import cast\n>>> stmt = select(cast(user_table.c.id, String))\n>>> with engine.connect() as conn:\n...     result = conn.execute(stmt)\n...     result.all()\nBEGIN  (implicit)\nSELECT  CAST(user_account.id  AS  VARCHAR)  AS  id\nFROM  user_account\n[...]  ()\n[('1',), ('2',), ('3',)]\nROLLBACK \n```", "```py\n>>> from sqlalchemy import JSON\n>>> print(cast(\"{'a': 'b'}\", JSON)[\"a\"])\nCAST(:param_1  AS  JSON)[:param_2] \n```", "```py\n>>> import json\n>>> from sqlalchemy import JSON\n>>> from sqlalchemy import type_coerce\n>>> from sqlalchemy.dialects import mysql\n>>> s = select(type_coerce({\"some_key\": {\"foo\": \"bar\"}}, JSON)[\"some_key\"])\n>>> print(s.compile(dialect=mysql.dialect()))\nSELECT  JSON_EXTRACT(%s,  %s)  AS  anon_1 \n```", "```py\n>>> from sqlalchemy import select\n>>> stmt = select(user_table).where(user_table.c.name == \"spongebob\")\n>>> print(stmt)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  :name_1 \n```", "```py\n>>> with engine.connect() as conn:\n...     for row in conn.execute(stmt):\n...         print(row)\nBEGIN  (implicit)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\n[...]  ('spongebob',)\n(1, 'spongebob', 'Spongebob Squarepants')\nROLLBACK \n```", "```py\n>>> stmt = select(User).where(User.name == \"spongebob\")\n>>> with Session(engine) as session:\n...     for row in session.execute(stmt):\n...         print(row)\nBEGIN  (implicit)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\n[...]  ('spongebob',)\n(User(id=1, name='spongebob', fullname='Spongebob Squarepants'),)\nROLLBACK \n```", "```py\n>>> print(select(user_table))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account \n```", "```py\n>>> print(select(user_table.c.name, user_table.c.fullname))\nSELECT  user_account.name,  user_account.fullname\nFROM  user_account \n```", "```py\n>>> print(select(user_table.c[\"name\", \"fullname\"]))\nSELECT  user_account.name,  user_account.fullname\nFROM  user_account \n```", "```py\n>>> print(select(User))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account \n```", "```py\n>>> row = session.execute(select(User)).first()\nBEGIN...\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\n>>> row\n(User(id=1, name='spongebob', fullname='Spongebob Squarepants'),)\n```", "```py\n>>> row[0]\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\n```", "```py\n>>> user = session.scalars(select(User)).first()\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\n>>> user\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\n```", "```py\n>>> print(select(User.name, User.fullname))\nSELECT  user_account.name,  user_account.fullname\nFROM  user_account \n```", "```py\n>>> row = session.execute(select(User.name, User.fullname)).first()\nSELECT  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\n>>> row\n('spongebob', 'Spongebob Squarepants')\n```", "```py\n>>> session.execute(\n...     select(User.name, Address).where(User.id == Address.user_id).order_by(Address.id)\n... ).all()\nSELECT  user_account.name,  address.id,  address.email_address,  address.user_id\nFROM  user_account,  address\nWHERE  user_account.id  =  address.user_id  ORDER  BY  address.id\n[...]  ()\n[('spongebob', Address(id=1, email_address='spongebob@sqlalchemy.org')),\n('sandy', Address(id=2, email_address='sandy@sqlalchemy.org')),\n('sandy', Address(id=3, email_address='sandy@squirrelpower.org'))]\n```", "```py\n>>> from sqlalchemy import func, cast\n>>> stmt = select(\n...     (\"Username: \" + user_table.c.name).label(\"username\"),\n... ).order_by(user_table.c.name)\n>>> with engine.connect() as conn:\n...     for row in conn.execute(stmt):\n...         print(f\"{row.username}\")\nBEGIN  (implicit)\nSELECT  ?  ||  user_account.name  AS  username\nFROM  user_account  ORDER  BY  user_account.name\n[...]  ('Username: ',)\nUsername: patrick\nUsername: sandy\nUsername: spongebob\nROLLBACK \n```", "```py\n>>> from sqlalchemy import text\n>>> stmt = select(text(\"'some phrase'\"), user_table.c.name).order_by(user_table.c.name)\n>>> with engine.connect() as conn:\n...     print(conn.execute(stmt).all())\nBEGIN  (implicit)\nSELECT  'some phrase',  user_account.name\nFROM  user_account  ORDER  BY  user_account.name\n[generated  in  ...]  ()\n[('some phrase', 'patrick'), ('some phrase', 'sandy'), ('some phrase', 'spongebob')]\nROLLBACK \n```", "```py\n>>> from sqlalchemy import literal_column\n>>> stmt = select(literal_column(\"'some phrase'\").label(\"p\"), user_table.c.name).order_by(\n...     user_table.c.name\n... )\n>>> with engine.connect() as conn:\n...     for row in conn.execute(stmt):\n...         print(f\"{row.p}, {row.name}\")\nBEGIN  (implicit)\nSELECT  'some phrase'  AS  p,  user_account.name\nFROM  user_account  ORDER  BY  user_account.name\n[generated  in  ...]  ()\nsome phrase, patrick\nsome phrase, sandy\nsome phrase, spongebob\nROLLBACK \n```", "```py\n>>> print(select(User))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account \n```", "```py\n>>> row = session.execute(select(User)).first()\nBEGIN...\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\n>>> row\n(User(id=1, name='spongebob', fullname='Spongebob Squarepants'),)\n```", "```py\n>>> row[0]\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\n```", "```py\n>>> user = session.scalars(select(User)).first()\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\n>>> user\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\n```", "```py\n>>> print(select(User.name, User.fullname))\nSELECT  user_account.name,  user_account.fullname\nFROM  user_account \n```", "```py\n>>> row = session.execute(select(User.name, User.fullname)).first()\nSELECT  user_account.name,  user_account.fullname\nFROM  user_account\n[...]  ()\n>>> row\n('spongebob', 'Spongebob Squarepants')\n```", "```py\n>>> session.execute(\n...     select(User.name, Address).where(User.id == Address.user_id).order_by(Address.id)\n... ).all()\nSELECT  user_account.name,  address.id,  address.email_address,  address.user_id\nFROM  user_account,  address\nWHERE  user_account.id  =  address.user_id  ORDER  BY  address.id\n[...]  ()\n[('spongebob', Address(id=1, email_address='spongebob@sqlalchemy.org')),\n('sandy', Address(id=2, email_address='sandy@sqlalchemy.org')),\n('sandy', Address(id=3, email_address='sandy@squirrelpower.org'))]\n```", "```py\n>>> from sqlalchemy import func, cast\n>>> stmt = select(\n...     (\"Username: \" + user_table.c.name).label(\"username\"),\n... ).order_by(user_table.c.name)\n>>> with engine.connect() as conn:\n...     for row in conn.execute(stmt):\n...         print(f\"{row.username}\")\nBEGIN  (implicit)\nSELECT  ?  ||  user_account.name  AS  username\nFROM  user_account  ORDER  BY  user_account.name\n[...]  ('Username: ',)\nUsername: patrick\nUsername: sandy\nUsername: spongebob\nROLLBACK \n```", "```py\n>>> from sqlalchemy import text\n>>> stmt = select(text(\"'some phrase'\"), user_table.c.name).order_by(user_table.c.name)\n>>> with engine.connect() as conn:\n...     print(conn.execute(stmt).all())\nBEGIN  (implicit)\nSELECT  'some phrase',  user_account.name\nFROM  user_account  ORDER  BY  user_account.name\n[generated  in  ...]  ()\n[('some phrase', 'patrick'), ('some phrase', 'sandy'), ('some phrase', 'spongebob')]\nROLLBACK \n```", "```py\n>>> from sqlalchemy import literal_column\n>>> stmt = select(literal_column(\"'some phrase'\").label(\"p\"), user_table.c.name).order_by(\n...     user_table.c.name\n... )\n>>> with engine.connect() as conn:\n...     for row in conn.execute(stmt):\n...         print(f\"{row.p}, {row.name}\")\nBEGIN  (implicit)\nSELECT  'some phrase'  AS  p,  user_account.name\nFROM  user_account  ORDER  BY  user_account.name\n[generated  in  ...]  ()\nsome phrase, patrick\nsome phrase, sandy\nsome phrase, spongebob\nROLLBACK \n```", "```py\n>>> print(user_table.c.name == \"squidward\")\nuser_account.name = :name_1\n\n>>> print(address_table.c.user_id > 10)\naddress.user_id > :user_id_1\n```", "```py\n>>> print(select(user_table).where(user_table.c.name == \"squidward\"))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  :name_1 \n```", "```py\n>>> print(\n...     select(address_table.c.email_address)\n...     .where(user_table.c.name == \"squidward\")\n...     .where(address_table.c.user_id == user_table.c.id)\n... )\nSELECT  address.email_address\nFROM  address,  user_account\nWHERE  user_account.name  =  :name_1  AND  address.user_id  =  user_account.id \n```", "```py\n>>> print(\n...     select(address_table.c.email_address).where(\n...         user_table.c.name == \"squidward\",\n...         address_table.c.user_id == user_table.c.id,\n...     )\n... )\nSELECT  address.email_address\nFROM  address,  user_account\nWHERE  user_account.name  =  :name_1  AND  address.user_id  =  user_account.id \n```", "```py\n>>> from sqlalchemy import and_, or_\n>>> print(\n...     select(Address.email_address).where(\n...         and_(\n...             or_(User.name == \"squidward\", User.name == \"sandy\"),\n...             Address.user_id == User.id,\n...         )\n...     )\n... )\nSELECT  address.email_address\nFROM  address,  user_account\nWHERE  (user_account.name  =  :name_1  OR  user_account.name  =  :name_2)\nAND  address.user_id  =  user_account.id \n```", "```py\n>>> print(select(User).filter_by(name=\"spongebob\", fullname=\"Spongebob Squarepants\"))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  :name_1  AND  user_account.fullname  =  :fullname_1 \n```", "```py\n>>> print(select(user_table.c.name))\nSELECT  user_account.name\nFROM  user_account \n```", "```py\n>>> print(select(user_table.c.name, address_table.c.email_address))\nSELECT  user_account.name,  address.email_address\nFROM  user_account,  address \n```", "```py\n>>> print(\n...     select(user_table.c.name, address_table.c.email_address).join_from(\n...         user_table, address_table\n...     )\n... )\nSELECT  user_account.name,  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\n>>> print(select(user_table.c.name, address_table.c.email_address).join(address_table))\nSELECT  user_account.name,  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\n>>> print(select(address_table.c.email_address).select_from(user_table).join(address_table))\nSELECT  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\n>>> from sqlalchemy import func\n>>> print(select(func.count(\"*\")).select_from(user_table))\nSELECT  count(:count_2)  AS  count_1\nFROM  user_account \n```", "```py\n>>> print(\n...     select(address_table.c.email_address)\n...     .select_from(user_table)\n...     .join(address_table, user_table.c.id == address_table.c.user_id)\n... )\nSELECT  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\n>>> print(select(user_table).join(address_table, isouter=True))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account  LEFT  OUTER  JOIN  address  ON  user_account.id  =  address.user_id\n>>> print(select(user_table).join(address_table, full=True))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account  FULL  OUTER  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\n>>> print(\n...     select(address_table.c.email_address)\n...     .select_from(user_table)\n...     .join(address_table, user_table.c.id == address_table.c.user_id)\n... )\nSELECT  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\n>>> print(select(user_table).join(address_table, isouter=True))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account  LEFT  OUTER  JOIN  address  ON  user_account.id  =  address.user_id\n>>> print(select(user_table).join(address_table, full=True))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account  FULL  OUTER  JOIN  address  ON  user_account.id  =  address.user_id \n```", "```py\n>>> print(select(user_table).order_by(user_table.c.name))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account  ORDER  BY  user_account.name \n```", "```py\n>>> print(select(User).order_by(User.fullname.desc()))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account  ORDER  BY  user_account.fullname  DESC \n```", "```py\n>>> from sqlalchemy import func\n>>> count_fn = func.count(user_table.c.id)\n>>> print(count_fn)\ncount(user_account.id) \n```", "```py\n>>> with engine.connect() as conn:\n...     result = conn.execute(\n...         select(User.name, func.count(Address.id).label(\"count\"))\n...         .join(Address)\n...         .group_by(User.name)\n...         .having(func.count(Address.id) > 1)\n...     )\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  user_account.name,  count(address.id)  AS  count\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id  GROUP  BY  user_account.name\nHAVING  count(address.id)  >  ?\n[...]  (1,)\n[('sandy', 2)]\nROLLBACK \n```", "```py\n>>> from sqlalchemy import func, desc\n>>> stmt = (\n...     select(Address.user_id, func.count(Address.id).label(\"num_addresses\"))\n...     .group_by(\"user_id\")\n...     .order_by(\"user_id\", desc(\"num_addresses\"))\n... )\n>>> print(stmt)\nSELECT  address.user_id,  count(address.id)  AS  num_addresses\nFROM  address  GROUP  BY  address.user_id  ORDER  BY  address.user_id,  num_addresses  DESC \n```", "```py\n>>> print(select(user_table).order_by(user_table.c.name))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account  ORDER  BY  user_account.name \n```", "```py\n>>> print(select(User).order_by(User.fullname.desc()))\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account  ORDER  BY  user_account.fullname  DESC \n```", "```py\n>>> from sqlalchemy import func\n>>> count_fn = func.count(user_table.c.id)\n>>> print(count_fn)\ncount(user_account.id) \n```", "```py\n>>> with engine.connect() as conn:\n...     result = conn.execute(\n...         select(User.name, func.count(Address.id).label(\"count\"))\n...         .join(Address)\n...         .group_by(User.name)\n...         .having(func.count(Address.id) > 1)\n...     )\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  user_account.name,  count(address.id)  AS  count\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id  GROUP  BY  user_account.name\nHAVING  count(address.id)  >  ?\n[...]  (1,)\n[('sandy', 2)]\nROLLBACK \n```", "```py\n>>> from sqlalchemy import func, desc\n>>> stmt = (\n...     select(Address.user_id, func.count(Address.id).label(\"num_addresses\"))\n...     .group_by(\"user_id\")\n...     .order_by(\"user_id\", desc(\"num_addresses\"))\n... )\n>>> print(stmt)\nSELECT  address.user_id,  count(address.id)  AS  num_addresses\nFROM  address  GROUP  BY  address.user_id  ORDER  BY  address.user_id,  num_addresses  DESC \n```", "```py\n>>> user_alias_1 = user_table.alias()\n>>> user_alias_2 = user_table.alias()\n>>> print(\n...     select(user_alias_1.c.name, user_alias_2.c.name).join_from(\n...         user_alias_1, user_alias_2, user_alias_1.c.id > user_alias_2.c.id\n...     )\n... )\nSELECT  user_account_1.name,  user_account_2.name  AS  name_1\nFROM  user_account  AS  user_account_1\nJOIN  user_account  AS  user_account_2  ON  user_account_1.id  >  user_account_2.id \n```", "```py\n>>> from sqlalchemy.orm import aliased\n>>> address_alias_1 = aliased(Address)\n>>> address_alias_2 = aliased(Address)\n>>> print(\n...     select(User)\n...     .join_from(User, address_alias_1)\n...     .where(address_alias_1.email_address == \"patrick@aol.com\")\n...     .join_from(User, address_alias_2)\n...     .where(address_alias_2.email_address == \"patrick@gmail.com\")\n... )\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nJOIN  address  AS  address_1  ON  user_account.id  =  address_1.user_id\nJOIN  address  AS  address_2  ON  user_account.id  =  address_2.user_id\nWHERE  address_1.email_address  =  :email_address_1\nAND  address_2.email_address  =  :email_address_2 \n```", "```py\n>>> from sqlalchemy.orm import aliased\n>>> address_alias_1 = aliased(Address)\n>>> address_alias_2 = aliased(Address)\n>>> print(\n...     select(User)\n...     .join_from(User, address_alias_1)\n...     .where(address_alias_1.email_address == \"patrick@aol.com\")\n...     .join_from(User, address_alias_2)\n...     .where(address_alias_2.email_address == \"patrick@gmail.com\")\n... )\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nJOIN  address  AS  address_1  ON  user_account.id  =  address_1.user_id\nJOIN  address  AS  address_2  ON  user_account.id  =  address_2.user_id\nWHERE  address_1.email_address  =  :email_address_1\nAND  address_2.email_address  =  :email_address_2 \n```", "```py\n>>> subq = (\n...     select(func.count(address_table.c.id).label(\"count\"), address_table.c.user_id)\n...     .group_by(address_table.c.user_id)\n...     .subquery()\n... )\n```", "```py\n>>> print(subq)\nSELECT  count(address.id)  AS  count,  address.user_id\nFROM  address  GROUP  BY  address.user_id \n```", "```py\n>>> print(select(subq.c.user_id, subq.c.count))\nSELECT  anon_1.user_id,  anon_1.count\nFROM  (SELECT  count(address.id)  AS  count,  address.user_id  AS  user_id\nFROM  address  GROUP  BY  address.user_id)  AS  anon_1 \n```", "```py\n>>> stmt = select(user_table.c.name, user_table.c.fullname, subq.c.count).join_from(\n...     user_table, subq\n... )\n\n>>> print(stmt)\nSELECT  user_account.name,  user_account.fullname,  anon_1.count\nFROM  user_account  JOIN  (SELECT  count(address.id)  AS  count,  address.user_id  AS  user_id\nFROM  address  GROUP  BY  address.user_id)  AS  anon_1  ON  user_account.id  =  anon_1.user_id \n```", "```py\n>>> subq = (\n...     select(func.count(address_table.c.id).label(\"count\"), address_table.c.user_id)\n...     .group_by(address_table.c.user_id)\n...     .cte()\n... )\n\n>>> stmt = select(user_table.c.name, user_table.c.fullname, subq.c.count).join_from(\n...     user_table, subq\n... )\n\n>>> print(stmt)\nWITH  anon_1  AS\n(SELECT  count(address.id)  AS  count,  address.user_id  AS  user_id\nFROM  address  GROUP  BY  address.user_id)\n  SELECT  user_account.name,  user_account.fullname,  anon_1.count\nFROM  user_account  JOIN  anon_1  ON  user_account.id  =  anon_1.user_id \n```", "```py\n>>> subq = select(Address).where(~Address.email_address.like(\"%@aol.com\")).subquery()\n>>> address_subq = aliased(Address, subq)\n>>> stmt = (\n...     select(User, address_subq)\n...     .join_from(User, address_subq)\n...     .order_by(User.id, address_subq.id)\n... )\n>>> with Session(engine) as session:\n...     for user, address in session.execute(stmt):\n...         print(f\"{user} {address}\")\nBEGIN  (implicit)\nSELECT  user_account.id,  user_account.name,  user_account.fullname,\nanon_1.id  AS  id_1,  anon_1.email_address,  anon_1.user_id\nFROM  user_account  JOIN\n(SELECT  address.id  AS  id,  address.email_address  AS  email_address,  address.user_id  AS  user_id\nFROM  address\nWHERE  address.email_address  NOT  LIKE  ?)  AS  anon_1  ON  user_account.id  =  anon_1.user_id\nORDER  BY  user_account.id,  anon_1.id\n[...]  ('%@aol.com',)\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants') Address(id=1, email_address='spongebob@sqlalchemy.org')\nUser(id=2, name='sandy', fullname='Sandy Cheeks') Address(id=2, email_address='sandy@sqlalchemy.org')\nUser(id=2, name='sandy', fullname='Sandy Cheeks') Address(id=3, email_address='sandy@squirrelpower.org')\nROLLBACK \n```", "```py\n>>> cte_obj = select(Address).where(~Address.email_address.like(\"%@aol.com\")).cte()\n>>> address_cte = aliased(Address, cte_obj)\n>>> stmt = (\n...     select(User, address_cte)\n...     .join_from(User, address_cte)\n...     .order_by(User.id, address_cte.id)\n... )\n>>> with Session(engine) as session:\n...     for user, address in session.execute(stmt):\n...         print(f\"{user} {address}\")\nBEGIN  (implicit)\nWITH  anon_1  AS\n(SELECT  address.id  AS  id,  address.email_address  AS  email_address,  address.user_id  AS  user_id\nFROM  address\nWHERE  address.email_address  NOT  LIKE  ?)\nSELECT  user_account.id,  user_account.name,  user_account.fullname,\nanon_1.id  AS  id_1,  anon_1.email_address,  anon_1.user_id\nFROM  user_account\nJOIN  anon_1  ON  user_account.id  =  anon_1.user_id\nORDER  BY  user_account.id,  anon_1.id\n[...]  ('%@aol.com',)\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants') Address(id=1, email_address='spongebob@sqlalchemy.org')\nUser(id=2, name='sandy', fullname='Sandy Cheeks') Address(id=2, email_address='sandy@sqlalchemy.org')\nUser(id=2, name='sandy', fullname='Sandy Cheeks') Address(id=3, email_address='sandy@squirrelpower.org')\nROLLBACK \n```", "```py\n>>> subq = (\n...     select(func.count(address_table.c.id).label(\"count\"), address_table.c.user_id)\n...     .group_by(address_table.c.user_id)\n...     .cte()\n... )\n\n>>> stmt = select(user_table.c.name, user_table.c.fullname, subq.c.count).join_from(\n...     user_table, subq\n... )\n\n>>> print(stmt)\nWITH  anon_1  AS\n(SELECT  count(address.id)  AS  count,  address.user_id  AS  user_id\nFROM  address  GROUP  BY  address.user_id)\n  SELECT  user_account.name,  user_account.fullname,  anon_1.count\nFROM  user_account  JOIN  anon_1  ON  user_account.id  =  anon_1.user_id \n```", "```py\n>>> subq = select(Address).where(~Address.email_address.like(\"%@aol.com\")).subquery()\n>>> address_subq = aliased(Address, subq)\n>>> stmt = (\n...     select(User, address_subq)\n...     .join_from(User, address_subq)\n...     .order_by(User.id, address_subq.id)\n... )\n>>> with Session(engine) as session:\n...     for user, address in session.execute(stmt):\n...         print(f\"{user} {address}\")\nBEGIN  (implicit)\nSELECT  user_account.id,  user_account.name,  user_account.fullname,\nanon_1.id  AS  id_1,  anon_1.email_address,  anon_1.user_id\nFROM  user_account  JOIN\n(SELECT  address.id  AS  id,  address.email_address  AS  email_address,  address.user_id  AS  user_id\nFROM  address\nWHERE  address.email_address  NOT  LIKE  ?)  AS  anon_1  ON  user_account.id  =  anon_1.user_id\nORDER  BY  user_account.id,  anon_1.id\n[...]  ('%@aol.com',)\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants') Address(id=1, email_address='spongebob@sqlalchemy.org')\nUser(id=2, name='sandy', fullname='Sandy Cheeks') Address(id=2, email_address='sandy@sqlalchemy.org')\nUser(id=2, name='sandy', fullname='Sandy Cheeks') Address(id=3, email_address='sandy@squirrelpower.org')\nROLLBACK \n```", "```py\n>>> cte_obj = select(Address).where(~Address.email_address.like(\"%@aol.com\")).cte()\n>>> address_cte = aliased(Address, cte_obj)\n>>> stmt = (\n...     select(User, address_cte)\n...     .join_from(User, address_cte)\n...     .order_by(User.id, address_cte.id)\n... )\n>>> with Session(engine) as session:\n...     for user, address in session.execute(stmt):\n...         print(f\"{user} {address}\")\nBEGIN  (implicit)\nWITH  anon_1  AS\n(SELECT  address.id  AS  id,  address.email_address  AS  email_address,  address.user_id  AS  user_id\nFROM  address\nWHERE  address.email_address  NOT  LIKE  ?)\nSELECT  user_account.id,  user_account.name,  user_account.fullname,\nanon_1.id  AS  id_1,  anon_1.email_address,  anon_1.user_id\nFROM  user_account\nJOIN  anon_1  ON  user_account.id  =  anon_1.user_id\nORDER  BY  user_account.id,  anon_1.id\n[...]  ('%@aol.com',)\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants') Address(id=1, email_address='spongebob@sqlalchemy.org')\nUser(id=2, name='sandy', fullname='Sandy Cheeks') Address(id=2, email_address='sandy@sqlalchemy.org')\nUser(id=2, name='sandy', fullname='Sandy Cheeks') Address(id=3, email_address='sandy@squirrelpower.org')\nROLLBACK \n```", "```py\n>>> subq = (\n...     select(func.count(address_table.c.id))\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .scalar_subquery()\n... )\n>>> print(subq)\n(SELECT  count(address.id)  AS  count_1\nFROM  address,  user_account\nWHERE  user_account.id  =  address.user_id) \n```", "```py\n>>> print(subq == 5)\n(SELECT  count(address.id)  AS  count_1\nFROM  address,  user_account\nWHERE  user_account.id  =  address.user_id)  =  :param_1 \n```", "```py\n>>> stmt = select(user_table.c.name, subq.label(\"address_count\"))\n>>> print(stmt)\nSELECT  user_account.name,  (SELECT  count(address.id)  AS  count_1\nFROM  address\nWHERE  user_account.id  =  address.user_id)  AS  address_count\nFROM  user_account \n```", "```py\n>>> stmt = (\n...     select(\n...         user_table.c.name,\n...         address_table.c.email_address,\n...         subq.label(\"address_count\"),\n...     )\n...     .join_from(user_table, address_table)\n...     .order_by(user_table.c.id, address_table.c.id)\n... )\n>>> print(stmt)\nTraceback (most recent call last):\n...\nInvalidRequestError: Select statement '<... Select object at ...>' returned\nno FROM clauses due to auto-correlation; specify correlate(<tables>) to\ncontrol correlation manually.\n```", "```py\n>>> subq = (\n...     select(func.count(address_table.c.id))\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .scalar_subquery()\n...     .correlate(user_table)\n... )\n```", "```py\n>>> with engine.connect() as conn:\n...     result = conn.execute(\n...         select(\n...             user_table.c.name,\n...             address_table.c.email_address,\n...             subq.label(\"address_count\"),\n...         )\n...         .join_from(user_table, address_table)\n...         .order_by(user_table.c.id, address_table.c.id)\n...     )\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  user_account.name,  address.email_address,  (SELECT  count(address.id)  AS  count_1\nFROM  address\nWHERE  user_account.id  =  address.user_id)  AS  address_count\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id  ORDER  BY  user_account.id,  address.id\n[...]  ()\n[('spongebob', 'spongebob@sqlalchemy.org', 1), ('sandy', 'sandy@sqlalchemy.org', 2),\n ('sandy', 'sandy@squirrelpower.org', 2)]\nROLLBACK \n```", "```py\n>>> subq = (\n...     select(\n...         func.count(address_table.c.id).label(\"address_count\"),\n...         address_table.c.email_address,\n...         address_table.c.user_id,\n...     )\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .lateral()\n... )\n>>> stmt = (\n...     select(user_table.c.name, subq.c.address_count, subq.c.email_address)\n...     .join_from(user_table, subq)\n...     .order_by(user_table.c.id, subq.c.email_address)\n... )\n>>> print(stmt)\nSELECT  user_account.name,  anon_1.address_count,  anon_1.email_address\nFROM  user_account\nJOIN  LATERAL  (SELECT  count(address.id)  AS  address_count,\naddress.email_address  AS  email_address,  address.user_id  AS  user_id\nFROM  address\nWHERE  user_account.id  =  address.user_id)  AS  anon_1\nON  user_account.id  =  anon_1.user_id\nORDER  BY  user_account.id,  anon_1.email_address \n```", "```py\n>>> subq = (\n...     select(\n...         func.count(address_table.c.id).label(\"address_count\"),\n...         address_table.c.email_address,\n...         address_table.c.user_id,\n...     )\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .lateral()\n... )\n>>> stmt = (\n...     select(user_table.c.name, subq.c.address_count, subq.c.email_address)\n...     .join_from(user_table, subq)\n...     .order_by(user_table.c.id, subq.c.email_address)\n... )\n>>> print(stmt)\nSELECT  user_account.name,  anon_1.address_count,  anon_1.email_address\nFROM  user_account\nJOIN  LATERAL  (SELECT  count(address.id)  AS  address_count,\naddress.email_address  AS  email_address,  address.user_id  AS  user_id\nFROM  address\nWHERE  user_account.id  =  address.user_id)  AS  anon_1\nON  user_account.id  =  anon_1.user_id\nORDER  BY  user_account.id,  anon_1.email_address \n```", "```py\n>>> from sqlalchemy import union_all\n>>> stmt1 = select(user_table).where(user_table.c.name == \"sandy\")\n>>> stmt2 = select(user_table).where(user_table.c.name == \"spongebob\")\n>>> u = union_all(stmt1, stmt2)\n>>> with engine.connect() as conn:\n...     result = conn.execute(u)\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\nUNION  ALL  SELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\n[generated  in  ...]  ('sandy',  'spongebob')\n[(2, 'sandy', 'Sandy Cheeks'), (1, 'spongebob', 'Spongebob Squarepants')]\nROLLBACK \n```", "```py\n>>> u_subq = u.subquery()\n>>> stmt = (\n...     select(u_subq.c.name, address_table.c.email_address)\n...     .join_from(address_table, u_subq)\n...     .order_by(u_subq.c.name, address_table.c.email_address)\n... )\n>>> with engine.connect() as conn:\n...     result = conn.execute(stmt)\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  anon_1.name,  address.email_address\nFROM  address  JOIN\n  (SELECT  user_account.id  AS  id,  user_account.name  AS  name,  user_account.fullname  AS  fullname\n  FROM  user_account\n  WHERE  user_account.name  =  ?\nUNION  ALL\n  SELECT  user_account.id  AS  id,  user_account.name  AS  name,  user_account.fullname  AS  fullname\n  FROM  user_account\n  WHERE  user_account.name  =  ?)\nAS  anon_1  ON  anon_1.id  =  address.user_id\nORDER  BY  anon_1.name,  address.email_address\n[generated  in  ...]  ('sandy',  'spongebob')\n[('sandy', 'sandy@sqlalchemy.org'), ('sandy', 'sandy@squirrelpower.org'), ('spongebob', 'spongebob@sqlalchemy.org')]\nROLLBACK \n```", "```py\n>>> stmt1 = select(User).where(User.name == \"sandy\")\n>>> stmt2 = select(User).where(User.name == \"spongebob\")\n>>> u = union_all(stmt1, stmt2)\n```", "```py\n>>> orm_stmt = select(User).from_statement(u)\n>>> with Session(engine) as session:\n...     for obj in session.execute(orm_stmt).scalars():\n...         print(obj)\nBEGIN  (implicit)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?  UNION  ALL  SELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\n[generated  in  ...]  ('sandy',  'spongebob')\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\nROLLBACK \n```", "```py\n>>> user_alias = aliased(User, u.subquery())\n>>> orm_stmt = select(user_alias).order_by(user_alias.id)\n>>> with Session(engine) as session:\n...     for obj in session.execute(orm_stmt).scalars():\n...         print(obj)\nBEGIN  (implicit)\nSELECT  anon_1.id,  anon_1.name,  anon_1.fullname\nFROM  (SELECT  user_account.id  AS  id,  user_account.name  AS  name,  user_account.fullname  AS  fullname\nFROM  user_account\nWHERE  user_account.name  =  ?  UNION  ALL  SELECT  user_account.id  AS  id,  user_account.name  AS  name,  user_account.fullname  AS  fullname\nFROM  user_account\nWHERE  user_account.name  =  ?)  AS  anon_1  ORDER  BY  anon_1.id\n[generated  in  ...]  ('sandy',  'spongebob')\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\nROLLBACK \n```", "```py\n>>> stmt1 = select(User).where(User.name == \"sandy\")\n>>> stmt2 = select(User).where(User.name == \"spongebob\")\n>>> u = union_all(stmt1, stmt2)\n```", "```py\n>>> orm_stmt = select(User).from_statement(u)\n>>> with Session(engine) as session:\n...     for obj in session.execute(orm_stmt).scalars():\n...         print(obj)\nBEGIN  (implicit)\nSELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?  UNION  ALL  SELECT  user_account.id,  user_account.name,  user_account.fullname\nFROM  user_account\nWHERE  user_account.name  =  ?\n[generated  in  ...]  ('sandy',  'spongebob')\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\nROLLBACK \n```", "```py\n>>> user_alias = aliased(User, u.subquery())\n>>> orm_stmt = select(user_alias).order_by(user_alias.id)\n>>> with Session(engine) as session:\n...     for obj in session.execute(orm_stmt).scalars():\n...         print(obj)\nBEGIN  (implicit)\nSELECT  anon_1.id,  anon_1.name,  anon_1.fullname\nFROM  (SELECT  user_account.id  AS  id,  user_account.name  AS  name,  user_account.fullname  AS  fullname\nFROM  user_account\nWHERE  user_account.name  =  ?  UNION  ALL  SELECT  user_account.id  AS  id,  user_account.name  AS  name,  user_account.fullname  AS  fullname\nFROM  user_account\nWHERE  user_account.name  =  ?)  AS  anon_1  ORDER  BY  anon_1.id\n[generated  in  ...]  ('sandy',  'spongebob')\nUser(id=1, name='spongebob', fullname='Spongebob Squarepants')\nUser(id=2, name='sandy', fullname='Sandy Cheeks')\nROLLBACK \n```", "```py\n>>> subq = (\n...     select(func.count(address_table.c.id))\n...     .where(user_table.c.id == address_table.c.user_id)\n...     .group_by(address_table.c.user_id)\n...     .having(func.count(address_table.c.id) > 1)\n... ).exists()\n>>> with engine.connect() as conn:\n...     result = conn.execute(select(user_table.c.name).where(subq))\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  user_account.name\nFROM  user_account\nWHERE  EXISTS  (SELECT  count(address.id)  AS  count_1\nFROM  address\nWHERE  user_account.id  =  address.user_id  GROUP  BY  address.user_id\nHAVING  count(address.id)  >  ?)\n[...]  (1,)\n[('sandy',)]\nROLLBACK \n```", "```py\n>>> subq = (\n...     select(address_table.c.id).where(user_table.c.id == address_table.c.user_id)\n... ).exists()\n>>> with engine.connect() as conn:\n...     result = conn.execute(select(user_table.c.name).where(~subq))\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  user_account.name\nFROM  user_account\nWHERE  NOT  (EXISTS  (SELECT  address.id\nFROM  address\nWHERE  user_account.id  =  address.user_id))\n[...]  ()\n[('patrick',)]\nROLLBACK \n```", "```py\n    >>> print(select(func.count()).select_from(user_table))\n    SELECT  count(*)  AS  count_1\n    FROM  user_account \n    ```", "```py\n    >>> print(select(func.lower(\"A String With Much UPPERCASE\")))\n    SELECT  lower(:lower_2)  AS  lower_1 \n    ```", "```py\n    >>> stmt = select(func.now())\n    >>> with engine.connect() as conn:\n    ...     result = conn.execute(stmt)\n    ...     print(result.all())\n    BEGIN  (implicit)\n    SELECT  CURRENT_TIMESTAMP  AS  now_1\n    [...]  ()\n    [(datetime.datetime(...),)]\n    ROLLBACK \n    ```", "```py\n>>> print(select(func.some_crazy_function(user_table.c.name, 17)))\nSELECT  some_crazy_function(user_account.name,  :some_crazy_function_2)  AS  some_crazy_function_1\nFROM  user_account \n```", "```py\n>>> from sqlalchemy.dialects import postgresql\n>>> print(select(func.now()).compile(dialect=postgresql.dialect()))\nSELECT  now()  AS  now_1\n>>> from sqlalchemy.dialects import oracle\n>>> print(select(func.now()).compile(dialect=oracle.dialect()))\nSELECT  CURRENT_TIMESTAMP  AS  now_1  FROM  DUAL \n```", "```py\n>>> func.now().type\nDateTime()\n```", "```py\n>>> from sqlalchemy import JSON\n>>> function_expr = func.json_object('{a, 1, b, \"def\", c, 3.5}', type_=JSON)\n```", "```py\n>>> stmt = select(function_expr[\"def\"])\n>>> print(stmt)\nSELECT  json_object(:json_object_1)[:json_object_2]  AS  anon_1 \n```", "```py\n>>> m1 = func.max(Column(\"some_int\", Integer))\n>>> m1.type\nInteger()\n\n>>> m2 = func.max(Column(\"some_str\", String))\n>>> m2.type\nString()\n```", "```py\n>>> func.now().type\nDateTime()\n>>> func.current_date().type\nDate()\n```", "```py\n>>> func.concat(\"x\", \"y\").type\nString()\n```", "```py\n>>> func.upper(\"lowercase\").type\nNullType()\n```", "```py\n>>> print(select(func.upper(\"lowercase\") + \" suffix\"))\nSELECT  upper(:upper_1)  ||  :upper_2  AS  anon_1 \n```", "```py\n    >>> func.count().type\n    Integer()\n    ```", "```py\n    >>> func.json_object('{\"a\", \"b\"}').type\n    NullType()\n    ```", "```py\n>>> stmt = (\n...     select(\n...         func.row_number().over(partition_by=user_table.c.name),\n...         user_table.c.name,\n...         address_table.c.email_address,\n...     )\n...     .select_from(user_table)\n...     .join(address_table)\n... )\n>>> with engine.connect() as conn:  \n...     result = conn.execute(stmt)\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  row_number()  OVER  (PARTITION  BY  user_account.name)  AS  anon_1,\nuser_account.name,  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id\n[...]  ()\n[(1, 'sandy', 'sandy@sqlalchemy.org'), (2, 'sandy', 'sandy@squirrelpower.org'), (1, 'spongebob', 'spongebob@sqlalchemy.org')]\nROLLBACK \n```", "```py\n>>> stmt = (\n...     select(\n...         func.count().over(order_by=user_table.c.name),\n...         user_table.c.name,\n...         address_table.c.email_address,\n...     )\n...     .select_from(user_table)\n...     .join(address_table)\n... )\n>>> with engine.connect() as conn:  \n...     result = conn.execute(stmt)\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  count(*)  OVER  (ORDER  BY  user_account.name)  AS  anon_1,\nuser_account.name,  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id\n[...]  ()\n[(2, 'sandy', 'sandy@sqlalchemy.org'), (2, 'sandy', 'sandy@squirrelpower.org'), (3, 'spongebob', 'spongebob@sqlalchemy.org')]\nROLLBACK \n```", "```py\n>>> print(\n...     func.unnest(\n...         func.percentile_disc([0.25, 0.5, 0.75, 1]).within_group(user_table.c.name)\n...     )\n... )\nunnest(percentile_disc(:percentile_disc_1)  WITHIN  GROUP  (ORDER  BY  user_account.name)) \n```", "```py\n>>> stmt = (\n...     select(\n...         func.count(address_table.c.email_address).filter(user_table.c.name == \"sandy\"),\n...         func.count(address_table.c.email_address).filter(\n...             user_table.c.name == \"spongebob\"\n...         ),\n...     )\n...     .select_from(user_table)\n...     .join(address_table)\n... )\n>>> with engine.connect() as conn:  \n...     result = conn.execute(stmt)\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  count(address.email_address)  FILTER  (WHERE  user_account.name  =  ?)  AS  anon_1,\ncount(address.email_address)  FILTER  (WHERE  user_account.name  =  ?)  AS  anon_2\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id\n[...]  ('sandy',  'spongebob')\n[(2, 1)]\nROLLBACK \n```", "```py\n>>> onetwothree = func.json_each('[\"one\", \"two\", \"three\"]').table_valued(\"value\")\n>>> stmt = select(onetwothree).where(onetwothree.c.value.in_([\"two\", \"three\"]))\n>>> with engine.connect() as conn:\n...     result = conn.execute(stmt)\n...     result.all()\nBEGIN  (implicit)\nSELECT  anon_1.value\nFROM  json_each(?)  AS  anon_1\nWHERE  anon_1.value  IN  (?,  ?)\n[...]  ('[\"one\", \"two\", \"three\"]',  'two',  'three')\n[('two',), ('three',)]\nROLLBACK \n```", "```py\n>>> from sqlalchemy import select, func\n>>> stmt = select(func.json_array_elements('[\"one\", \"two\"]').column_valued(\"x\"))\n>>> print(stmt)\nSELECT  x\nFROM  json_array_elements(:json_array_elements_1)  AS  x \n```", "```py\n>>> from sqlalchemy.dialects import oracle\n>>> stmt = select(func.scalar_strings(5).column_valued(\"s\"))\n>>> print(stmt.compile(dialect=oracle.dialect()))\nSELECT  s.COLUMN_VALUE\nFROM  TABLE  (scalar_strings(:scalar_strings_1))  s \n```", "```py\n>>> func.now().type\nDateTime()\n```", "```py\n>>> from sqlalchemy import JSON\n>>> function_expr = func.json_object('{a, 1, b, \"def\", c, 3.5}', type_=JSON)\n```", "```py\n>>> stmt = select(function_expr[\"def\"])\n>>> print(stmt)\nSELECT  json_object(:json_object_1)[:json_object_2]  AS  anon_1 \n```", "```py\n>>> m1 = func.max(Column(\"some_int\", Integer))\n>>> m1.type\nInteger()\n\n>>> m2 = func.max(Column(\"some_str\", String))\n>>> m2.type\nString()\n```", "```py\n>>> func.now().type\nDateTime()\n>>> func.current_date().type\nDate()\n```", "```py\n>>> func.concat(\"x\", \"y\").type\nString()\n```", "```py\n>>> func.upper(\"lowercase\").type\nNullType()\n```", "```py\n>>> print(select(func.upper(\"lowercase\") + \" suffix\"))\nSELECT  upper(:upper_1)  ||  :upper_2  AS  anon_1 \n```", "```py\n    >>> func.count().type\n    Integer()\n    ```", "```py\n    >>> func.json_object('{\"a\", \"b\"}').type\n    NullType()\n    ```", "```py\n>>> stmt = (\n...     select(\n...         func.row_number().over(partition_by=user_table.c.name),\n...         user_table.c.name,\n...         address_table.c.email_address,\n...     )\n...     .select_from(user_table)\n...     .join(address_table)\n... )\n>>> with engine.connect() as conn:  \n...     result = conn.execute(stmt)\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  row_number()  OVER  (PARTITION  BY  user_account.name)  AS  anon_1,\nuser_account.name,  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id\n[...]  ()\n[(1, 'sandy', 'sandy@sqlalchemy.org'), (2, 'sandy', 'sandy@squirrelpower.org'), (1, 'spongebob', 'spongebob@sqlalchemy.org')]\nROLLBACK \n```", "```py\n>>> stmt = (\n...     select(\n...         func.count().over(order_by=user_table.c.name),\n...         user_table.c.name,\n...         address_table.c.email_address,\n...     )\n...     .select_from(user_table)\n...     .join(address_table)\n... )\n>>> with engine.connect() as conn:  \n...     result = conn.execute(stmt)\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  count(*)  OVER  (ORDER  BY  user_account.name)  AS  anon_1,\nuser_account.name,  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id\n[...]  ()\n[(2, 'sandy', 'sandy@sqlalchemy.org'), (2, 'sandy', 'sandy@squirrelpower.org'), (3, 'spongebob', 'spongebob@sqlalchemy.org')]\nROLLBACK \n```", "```py\n>>> print(\n...     func.unnest(\n...         func.percentile_disc([0.25, 0.5, 0.75, 1]).within_group(user_table.c.name)\n...     )\n... )\nunnest(percentile_disc(:percentile_disc_1)  WITHIN  GROUP  (ORDER  BY  user_account.name)) \n```", "```py\n>>> stmt = (\n...     select(\n...         func.count(address_table.c.email_address).filter(user_table.c.name == \"sandy\"),\n...         func.count(address_table.c.email_address).filter(\n...             user_table.c.name == \"spongebob\"\n...         ),\n...     )\n...     .select_from(user_table)\n...     .join(address_table)\n... )\n>>> with engine.connect() as conn:  \n...     result = conn.execute(stmt)\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  count(address.email_address)  FILTER  (WHERE  user_account.name  =  ?)  AS  anon_1,\ncount(address.email_address)  FILTER  (WHERE  user_account.name  =  ?)  AS  anon_2\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id\n[...]  ('sandy',  'spongebob')\n[(2, 1)]\nROLLBACK \n```", "```py\n>>> onetwothree = func.json_each('[\"one\", \"two\", \"three\"]').table_valued(\"value\")\n>>> stmt = select(onetwothree).where(onetwothree.c.value.in_([\"two\", \"three\"]))\n>>> with engine.connect() as conn:\n...     result = conn.execute(stmt)\n...     result.all()\nBEGIN  (implicit)\nSELECT  anon_1.value\nFROM  json_each(?)  AS  anon_1\nWHERE  anon_1.value  IN  (?,  ?)\n[...]  ('[\"one\", \"two\", \"three\"]',  'two',  'three')\n[('two',), ('three',)]\nROLLBACK \n```", "```py\n>>> from sqlalchemy import select, func\n>>> stmt = select(func.json_array_elements('[\"one\", \"two\"]').column_valued(\"x\"))\n>>> print(stmt)\nSELECT  x\nFROM  json_array_elements(:json_array_elements_1)  AS  x \n```", "```py\n>>> from sqlalchemy.dialects import oracle\n>>> stmt = select(func.scalar_strings(5).column_valued(\"s\"))\n>>> print(stmt.compile(dialect=oracle.dialect()))\nSELECT  s.COLUMN_VALUE\nFROM  TABLE  (scalar_strings(:scalar_strings_1))  s \n```", "```py\n>>> stmt = (\n...     select(\n...         func.row_number().over(partition_by=user_table.c.name),\n...         user_table.c.name,\n...         address_table.c.email_address,\n...     )\n...     .select_from(user_table)\n...     .join(address_table)\n... )\n>>> with engine.connect() as conn:  \n...     result = conn.execute(stmt)\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  row_number()  OVER  (PARTITION  BY  user_account.name)  AS  anon_1,\nuser_account.name,  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id\n[...]  ()\n[(1, 'sandy', 'sandy@sqlalchemy.org'), (2, 'sandy', 'sandy@squirrelpower.org'), (1, 'spongebob', 'spongebob@sqlalchemy.org')]\nROLLBACK \n```", "```py\n>>> stmt = (\n...     select(\n...         func.count().over(order_by=user_table.c.name),\n...         user_table.c.name,\n...         address_table.c.email_address,\n...     )\n...     .select_from(user_table)\n...     .join(address_table)\n... )\n>>> with engine.connect() as conn:  \n...     result = conn.execute(stmt)\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  count(*)  OVER  (ORDER  BY  user_account.name)  AS  anon_1,\nuser_account.name,  address.email_address\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id\n[...]  ()\n[(2, 'sandy', 'sandy@sqlalchemy.org'), (2, 'sandy', 'sandy@squirrelpower.org'), (3, 'spongebob', 'spongebob@sqlalchemy.org')]\nROLLBACK \n```", "```py\n>>> print(\n...     func.unnest(\n...         func.percentile_disc([0.25, 0.5, 0.75, 1]).within_group(user_table.c.name)\n...     )\n... )\nunnest(percentile_disc(:percentile_disc_1)  WITHIN  GROUP  (ORDER  BY  user_account.name)) \n```", "```py\n>>> stmt = (\n...     select(\n...         func.count(address_table.c.email_address).filter(user_table.c.name == \"sandy\"),\n...         func.count(address_table.c.email_address).filter(\n...             user_table.c.name == \"spongebob\"\n...         ),\n...     )\n...     .select_from(user_table)\n...     .join(address_table)\n... )\n>>> with engine.connect() as conn:  \n...     result = conn.execute(stmt)\n...     print(result.all())\nBEGIN  (implicit)\nSELECT  count(address.email_address)  FILTER  (WHERE  user_account.name  =  ?)  AS  anon_1,\ncount(address.email_address)  FILTER  (WHERE  user_account.name  =  ?)  AS  anon_2\nFROM  user_account  JOIN  address  ON  user_account.id  =  address.user_id\n[...]  ('sandy',  'spongebob')\n[(2, 1)]\nROLLBACK \n```", "```py\n>>> onetwothree = func.json_each('[\"one\", \"two\", \"three\"]').table_valued(\"value\")\n>>> stmt = select(onetwothree).where(onetwothree.c.value.in_([\"two\", \"three\"]))\n>>> with engine.connect() as conn:\n...     result = conn.execute(stmt)\n...     result.all()\nBEGIN  (implicit)\nSELECT  anon_1.value\nFROM  json_each(?)  AS  anon_1\nWHERE  anon_1.value  IN  (?,  ?)\n[...]  ('[\"one\", \"two\", \"three\"]',  'two',  'three')\n[('two',), ('three',)]\nROLLBACK \n```", "```py\n>>> from sqlalchemy import select, func\n>>> stmt = select(func.json_array_elements('[\"one\", \"two\"]').column_valued(\"x\"))\n>>> print(stmt)\nSELECT  x\nFROM  json_array_elements(:json_array_elements_1)  AS  x \n```", "```py\n>>> from sqlalchemy.dialects import oracle\n>>> stmt = select(func.scalar_strings(5).column_valued(\"s\"))\n>>> print(stmt.compile(dialect=oracle.dialect()))\nSELECT  s.COLUMN_VALUE\nFROM  TABLE  (scalar_strings(:scalar_strings_1))  s \n```", "```py\n>>> from sqlalchemy import cast\n>>> stmt = select(cast(user_table.c.id, String))\n>>> with engine.connect() as conn:\n...     result = conn.execute(stmt)\n...     result.all()\nBEGIN  (implicit)\nSELECT  CAST(user_account.id  AS  VARCHAR)  AS  id\nFROM  user_account\n[...]  ()\n[('1',), ('2',), ('3',)]\nROLLBACK \n```", "```py\n>>> from sqlalchemy import JSON\n>>> print(cast(\"{'a': 'b'}\", JSON)[\"a\"])\nCAST(:param_1  AS  JSON)[:param_2] \n```", "```py\n>>> import json\n>>> from sqlalchemy import JSON\n>>> from sqlalchemy import type_coerce\n>>> from sqlalchemy.dialects import mysql\n>>> s = select(type_coerce({\"some_key\": {\"foo\": \"bar\"}}, JSON)[\"some_key\"])\n>>> print(s.compile(dialect=mysql.dialect()))\nSELECT  JSON_EXTRACT(%s,  %s)  AS  anon_1 \n```", "```py\n>>> import json\n>>> from sqlalchemy import JSON\n>>> from sqlalchemy import type_coerce\n>>> from sqlalchemy.dialects import mysql\n>>> s = select(type_coerce({\"some_key\": {\"foo\": \"bar\"}}, JSON)[\"some_key\"])\n>>> print(s.compile(dialect=mysql.dialect()))\nSELECT  JSON_EXTRACT(%s,  %s)  AS  anon_1 \n```"]