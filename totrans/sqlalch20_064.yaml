- en: Association Proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/associationproxy.html](https://docs.sqlalchemy.org/en/20/orm/extensions/associationproxy.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`associationproxy` is used to create a read/write view of a target attribute
    across a relationship. It essentially conceals the usage of a “middle” attribute
    between two endpoints, and can be used to cherry-pick fields from both a collection
    of related objects or scalar relationship. or to reduce the verbosity of using
    the association object pattern. Applied creatively, the association proxy allows
    the construction of sophisticated collections and dictionary views of virtually
    any geometry, persisted to the database using standard, transparently configured
    relational patterns.'
  prefs: []
  type: TYPE_NORMAL
- en: '## Simplifying Scalar Collections'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a many-to-many mapping between two classes, `User` and `Keyword`.
    Each `User` can have any number of `Keyword` objects, and vice-versa (the many-to-many
    pattern is described at [Many To Many](../basic_relationships.html#relationships-many-to-many)).
    The example below illustrates this pattern in the same way, with the exception
    of an extra attribute added to the `User` class called `User.keywords`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the above example, [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") is applied to the `User`
    class to produce a “view” of the `kw` relationship, which exposes the string value
    of `.keyword` associated with each `Keyword` object. It also creates new `Keyword`
    objects transparently when strings are added to the collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To understand the mechanics of this, first review the behavior of `User` and
    `Keyword` without using the `.keywords` association proxy. Normally, reading and
    manipulating the collection of “keyword” strings associated with `User` requires
    traversal from each collection element to the `.keyword` attribute, which can
    be awkward. The example below illustrates the identical series of operations applied
    without using the association proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    object produced by the [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") function is an instance of
    a [Python descriptor](https://docs.python.org/howto/descriptor.html), and is not
    considered to be “mapped” by the [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") in any way. Therefore, it’s always indicated inline within
    the class definition of the mapped class, regardless of whether Declarative or
    Imperative mappings are used.
  prefs: []
  type: TYPE_NORMAL
- en: The proxy functions by operating upon the underlying mapped attribute or collection
    in response to operations, and changes made via the proxy are immediately apparent
    in the mapped attribute, as well as vice versa. The underlying attribute remains
    fully accessible.
  prefs: []
  type: TYPE_NORMAL
- en: When first accessed, the association proxy performs introspection operations
    on the target collection so that its behavior corresponds correctly. Details such
    as if the locally proxied attribute is a collection (as is typical) or a scalar
    reference, as well as if the collection acts like a set, list, or dictionary is
    taken into account, so that the proxy should act just like the underlying collection
    or attribute does.
  prefs: []
  type: TYPE_NORMAL
- en: '### Creation of New Values'
  prefs: []
  type: TYPE_NORMAL
- en: 'When a list `append()` event (or set `add()`, dictionary `__setitem__()`, or
    scalar assignment event) is intercepted by the association proxy, it instantiates
    a new instance of the “intermediary” object using its constructor, passing as
    a single argument the given value. In our example above, an operation like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Is translated by the association proxy into the operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The example works here because we have designed the constructor for `Keyword`
    to accept a single positional argument, `keyword`. For those cases where a single-argument
    constructor isn’t feasible, the association proxy’s creational behavior can be
    customized using the [`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy") argument, which references
    a callable (i.e. Python function) that will produce a new object instance given
    the singular argument. Below we illustrate this using a lambda as is typical:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `creator` function accepts a single argument in the case of a list- or set-
    based collection, or a scalar attribute. In the case of a dictionary-based collection,
    it accepts two arguments, “key” and “value”. An example of this is below in [Proxying
    to Dictionary Based Collections](#proxying-dictionaries).
  prefs: []
  type: TYPE_NORMAL
- en: Simplifying Association Objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The “association object” pattern is an extended form of a many-to-many relationship,
    and is described at [Association Object](../basic_relationships.html#association-pattern).
    Association proxies are useful for keeping “association objects” out of the way
    during regular use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose our `user_keyword` table above had additional columns which we’d like
    to map explicitly, but in most cases we don’t require direct access to these attributes.
    Below, we illustrate a new mapping which introduces the `UserKeywordAssociation`
    class, which is mapped to the `user_keyword` table illustrated earlier. This class
    adds an additional column `special_key`, a value which we occasionally want to
    access, but not in the usual case. We create an association proxy on the `User`
    class called `keywords`, which will bridge the gap from the `user_keyword_associations`
    collection of `User` to the `.keyword` attribute present on each `UserKeywordAssociation`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'With the above configuration, we can operate upon the `.keywords` collection
    of each `User` object, each of which exposes a collection of `Keyword` objects
    that are obtained from the underlying `UserKeywordAssociation` elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This example is in contrast to the example illustrated previously at [Simplifying
    Scalar Collections](#associationproxy-scalar-collections), where the association
    proxy exposed a collection of strings, rather than a collection of composed objects.
    In this case, each `.keywords.append()` operation is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `UserKeywordAssociation` object has two attributes that are both populated
    within the scope of the `append()` operation of the association proxy; `.keyword`,
    which refers to the `Keyword` object, and `.user`, which refers to the `User`
    object. The `.keyword` attribute is populated first, as the association proxy
    generates a new `UserKeywordAssociation` object in response to the `.append()`
    operation, assigning the given `Keyword` instance to the `.keyword` attribute.
    Then, as the `UserKeywordAssociation` object is appended to the `User.user_keyword_associations`
    collection, the `UserKeywordAssociation.user` attribute, configured as `back_populates`
    for `User.user_keyword_associations`, is initialized upon the given `UserKeywordAssociation`
    instance to refer to the parent `User` receiving the append operation. The `special_key`
    argument above is left at its default value of `None`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For those cases where we do want `special_key` to have a value, we create the
    `UserKeywordAssociation` object explicitly. Below we assign all three attributes,
    wherein the assignment of `.user` during construction, has the effect of appending
    the new `UserKeywordAssociation` to the `User.user_keyword_associations` collection
    (via the relationship):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The association proxy returns to us a collection of `Keyword` objects represented
    by all these operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '## Proxying to Dictionary Based Collections'
  prefs: []
  type: TYPE_NORMAL
- en: The association proxy can proxy to dictionary based collections as well. SQLAlchemy
    mappings usually use the [`attribute_keyed_dict()`](../collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict") collection type to create dictionary collections,
    as well as the extended techniques described in [Custom Dictionary-Based Collections](../collection_api.html#id1).
  prefs: []
  type: TYPE_NORMAL
- en: The association proxy adjusts its behavior when it detects the usage of a dictionary-based
    collection. When new values are added to the dictionary, the association proxy
    instantiates the intermediary object by passing two arguments to the creation
    function instead of one, the key and the value. As always, this creation function
    defaults to the constructor of the intermediary class, and can be customized using
    the `creator` argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below, we modify our `UserKeywordAssociation` example such that the `User.user_keyword_associations`
    collection will now be mapped using a dictionary, where the `UserKeywordAssociation.special_key`
    argument will be used as the key for the dictionary. We also apply a `creator`
    argument to the `User.keywords` proxy so that these values are assigned appropriately
    when new elements are added to the dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We illustrate the `.keywords` collection as a dictionary, mapping the `UserKeywordAssociation.special_key`
    value to `Keyword` objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]  ## Composite Association Proxies'
  prefs: []
  type: TYPE_NORMAL
- en: 'Given our previous examples of proxying from relationship to scalar attribute,
    proxying across an association object, and proxying dictionaries, we can combine
    all three techniques together to give `User` a `keywords` dictionary that deals
    strictly with the string value of `special_key` mapped to the string `keyword`.
    Both the `UserKeywordAssociation` and `Keyword` classes are entirely concealed.
    This is achieved by building an association proxy on `User` that refers to an
    association proxy present on `UserKeywordAssociation`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`User.keywords` is now a dictionary of string to string, where `UserKeywordAssociation`
    and `Keyword` objects are created and removed for us transparently using the association
    proxy. In the example below, we illustrate usage of the assignment operator, also
    appropriately handled by the association proxy, to apply a dictionary value to
    the collection at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: One caveat with our example above is that because `Keyword` objects are created
    for each dictionary set operation, the example fails to maintain uniqueness for
    the `Keyword` objects on their string name, which is a typical requirement for
    a tagging scenario such as this one. For this use case the recipe [UniqueObject](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/UniqueObject),
    or a comparable creational strategy, is recommended, which will apply a “lookup
    first, then create” strategy to the constructor of the `Keyword` class, so that
    an already existing `Keyword` is returned if the given name is already present.
  prefs: []
  type: TYPE_NORMAL
- en: Querying with Association Proxies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    features simple SQL construction capabilities which work at the class level in
    a similar way as other ORM-mapped attributes, and provide rudimentary filtering
    support primarily based on the SQL `EXISTS` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The primary purpose of the association proxy extension is to allow for improved
    persistence and object-access patterns with mapped object instances that are already
    loaded. The class-bound querying feature is of limited use and will not replace
    the need to refer to the underlying attributes when constructing SQL queries with
    JOINs, eager loading options, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this section, assume a class with both an association proxy that refers
    to a column, as well as an association proxy that refers to a related object,
    as in the example mapping below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The SQL generated takes the form of a correlated subquery against the EXISTS
    SQL operator so that it can be used in a WHERE clause without the need for additional
    modifications to the enclosing query. If the immediate target of an association
    proxy is a **mapped column expression**, standard column operators can be used
    which will be embedded in the subquery. For example a straight equality operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'a LIKE operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'For association proxies where the immediate target is a **related object or
    collection, or another association proxy or attribute on the related object**,
    relationship-oriented operators can be used instead, such as [`PropComparator.has()`](../internals.html#sqlalchemy.orm.PropComparator.has
    "sqlalchemy.orm.PropComparator.has") and [`PropComparator.any()`](../internals.html#sqlalchemy.orm.PropComparator.any
    "sqlalchemy.orm.PropComparator.any"). The `User.keywords` attribute is in fact
    two association proxies linked together, so when using this proxy for generating
    SQL phrases, we get two levels of EXISTS subqueries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This is not the most efficient form of SQL, so while association proxies can
    be convenient for generating WHERE criteria quickly, SQL results should be inspected
    and “unrolled” into explicit JOIN criteria for best use, especially when chaining
    association proxies together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3: Association proxy features distinct querying modes
    based on the type of target. See [AssociationProxy now provides standard column
    operators for a column-oriented target](../../changelog/migration_13.html#change-4351).'
  prefs: []
  type: TYPE_NORMAL
- en: '## Cascading Scalar Deletes'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given a mapping as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'An assignment to `A.b` will generate an `AB` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The `A.b` association is scalar, and includes use of the parameter [`AssociationProxy.cascade_scalar_deletes`](#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy"). When this parameter is enabled,
    setting `A.b` to `None` will remove `A.ab` as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: When [`AssociationProxy.cascade_scalar_deletes`](#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy") is not set, the association
    object `a.ab` above would remain in place.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this is not the behavior for collection-based association proxies;
    in that case, the intermediary association object is always removed when members
    of the proxied collection are removed. Whether or not the row is deleted depends
    on the relationship cascade setting.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Cascades](../cascades.html#unitofwork-cascades)'
  prefs: []
  type: TYPE_NORMAL
- en: Scalar Relationships
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The example below illustrates the use of the association proxy on the many
    side of of a one-to-many relationship, accessing attributes of a scalar object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'A summary of the steps of `my_snack` can be printed using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: API Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [association_proxy](#sqlalchemy.ext.associationproxy.association_proxy)(target_collection,
    attr, *, [creator, getset_factory, proxy_factory, proxy_bulk_set, info, cascade_scalar_deletes,
    create_on_none_assignment, init, repr, default, default_factory, compare, kw_only])
    | Return a Python property implementing a view of a target attribute which references
    an attribute on members of the target. |'
  prefs: []
  type: TYPE_TB
- en: '| [AssociationProxy](#sqlalchemy.ext.associationproxy.AssociationProxy) | A
    descriptor that presents a read/write view of an object attribute. |'
  prefs: []
  type: TYPE_TB
- en: '| [AssociationProxyExtensionType](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType)
    | An enumeration. |'
  prefs: []
  type: TYPE_TB
- en: '| [AssociationProxyInstance](#sqlalchemy.ext.associationproxy.AssociationProxyInstance)
    | A per-class object that serves class- and object-specific results. |'
  prefs: []
  type: TYPE_TB
- en: '| [ColumnAssociationProxyInstance](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance)
    | an [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that has a database
    column as a target. |'
  prefs: []
  type: TYPE_TB
- en: '| [ObjectAssociationProxyInstance](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance)
    | an [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that has an object
    as a target. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Return a Python property implementing a view of a target attribute which references
    an attribute on members of the target.
  prefs: []
  type: TYPE_NORMAL
- en: The returned value is an instance of [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy").
  prefs: []
  type: TYPE_NORMAL
- en: Implements a Python property representing a relationship as a collection of
    simpler values, or a scalar value. The proxied property will mimic the collection
    type of the target (list, dict or set), or, in the case of a one to one relationship,
    a simple scalar value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target_collection` – Name of the attribute that is the immediate target. This
    attribute is typically mapped by [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") to link to a target collection, but can also be
    a many-to-one or non-scalar relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attr` – Attribute on the associated instance or instances that are available
    on instances of the target object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`creator` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Defines custom behavior when new items are added to the proxied collection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By default, adding new items to the collection will trigger a construction of
    an instance of the target object, passing the given item as a positional argument
    to the target constructor. For cases where this isn’t sufficient, [`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy") can supply a callable that
    will construct the object in the appropriate way, given the item that was passed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For list- and set- oriented collections, a single argument is passed to the
    callable. For dictionary oriented collections, two arguments are passed, corresponding
    to the key and value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The [`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy") callable is also invoked
    for scalar (i.e. many-to-one, one-to-one) relationships. If the current value
    of the target relationship attribute is `None`, the callable is used to construct
    a new object. If an object value already exists, the given attribute value is
    populated onto that object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Creation of New Values](#associationproxy-creator)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`cascade_scalar_deletes` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when True, indicates that setting the proxied value to `None`, or deleting it
    via `del`, should also remove the source object. Only applies to scalar attributes.
    Normally, removing the proxied target will not remove the proxy source, as this
    object may have other state that is still to be kept.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Cascading Scalar Deletes](#cascade-scalar-deletes) - complete usage example'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`create_on_none_assignment` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when True, indicates that setting the proxied value to `None` should **create**
    the source object if it does not exist, using the creator. Only applies to scalar
    attributes. This is mutually exclusive vs. the `assocation_proxy.cascade_scalar_deletes`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.18.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`init` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    specifies if the mapped attribute should be part of the `__init__()` method as
    generated by the dataclass process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`repr` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    specifies if the attribute established by this [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") should be part of the `__repr__()`
    method as generated by the dataclass process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`default_factory` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    specifies a default-value generation function that will take place as part of
    the `__init__()` method as generated by the dataclass process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`compare` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    indicates if this field should be included in comparison operations when generating
    the `__eq__()` and `__ne__()` methods for the mapped class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`kw_only` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    indicates if this field should be marked as keyword-only when generating the `__init__()`
    method as generated by the dataclass process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`info` – optional, will be assigned to [`AssociationProxy.info`](#sqlalchemy.ext.associationproxy.AssociationProxy.info
    "sqlalchemy.ext.associationproxy.AssociationProxy.info") if present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following additional parameters involve injection of custom behaviors within
    the [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    object and are for advanced use only:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getset_factory` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional. Proxied attribute access is automatically handled by routines that
    get and set values based on the attr argument for this proxy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you would like to customize this behavior, you may supply a getset_factory
    callable that produces a tuple of getter and setter functions. The factory is
    called with two arguments, the abstract type of the underlying collection and
    this proxy instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`proxy_factory` – Optional. The type of collection to emulate is determined
    by sniffing the target collection. If your collection type can’t be determined
    by duck typing or you’d like to use a different collection implementation, you
    may supply a factory function to produce those collections. Only applicable to
    non-scalar relationships.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proxy_bulk_set` – Optional, use with proxy_factory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: A descriptor that presents a read/write view of an object attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.ext.associationproxy.AssociationProxy.__init__), [cascade_scalar_deletes](#sqlalchemy.ext.associationproxy.AssociationProxy.cascade_scalar_deletes),
    [create_on_none_assignment](#sqlalchemy.ext.associationproxy.AssociationProxy.create_on_none_assignment),
    [creator](#sqlalchemy.ext.associationproxy.AssociationProxy.creator), [extension_type](#sqlalchemy.ext.associationproxy.AssociationProxy.extension_type),
    [for_class()](#sqlalchemy.ext.associationproxy.AssociationProxy.for_class), [getset_factory](#sqlalchemy.ext.associationproxy.AssociationProxy.getset_factory),
    [info](#sqlalchemy.ext.associationproxy.AssociationProxy.info), [is_aliased_class](#sqlalchemy.ext.associationproxy.AssociationProxy.is_aliased_class),
    [is_attribute](#sqlalchemy.ext.associationproxy.AssociationProxy.is_attribute),
    [is_bundle](#sqlalchemy.ext.associationproxy.AssociationProxy.is_bundle), [is_clause_element](#sqlalchemy.ext.associationproxy.AssociationProxy.is_clause_element),
    [is_instance](#sqlalchemy.ext.associationproxy.AssociationProxy.is_instance),
    [is_mapper](#sqlalchemy.ext.associationproxy.AssociationProxy.is_mapper), [is_property](#sqlalchemy.ext.associationproxy.AssociationProxy.is_property),
    [is_selectable](#sqlalchemy.ext.associationproxy.AssociationProxy.is_selectable),
    [key](#sqlalchemy.ext.associationproxy.AssociationProxy.key), [proxy_bulk_set](#sqlalchemy.ext.associationproxy.AssociationProxy.proxy_bulk_set),
    [proxy_factory](#sqlalchemy.ext.associationproxy.AssociationProxy.proxy_factory),
    [target_collection](#sqlalchemy.ext.associationproxy.AssociationProxy.target_collection),
    [value_attr](#sqlalchemy.ext.associationproxy.AssociationProxy.value_attr)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.associationproxy.AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") ([`sqlalchemy.orm.base.InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `sqlalchemy.orm.base.ORMDescriptor`,
    `sqlalchemy.orm._DCAttributeOptions`, `sqlalchemy.ext.associationproxy._AssociationProxyProtocol`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy").
  prefs: []
  type: TYPE_NORMAL
- en: The [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    object is typically constructed using the [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") constructor function. See
    the description of [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") for a description of all
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The extension type, if any. Defaults to `NotExtension.NOT_EXTENSION`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`HybridExtensionType`](hybrid.html#sqlalchemy.ext.hybrid.HybridExtensionType
    "sqlalchemy.ext.hybrid.HybridExtensionType")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyExtensionType`](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Return the internal state local to a specific mapped class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g., given a class `User`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'If we access this [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") from [`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors"), and we want to view the target class
    for this proxy as mapped by `User`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This returns an instance of [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that is specific to
    the `User` class. The [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") object remains agnostic of
    its parent class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`class_` – the class that we are returning state for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`obj` – optional, an instance of the class that is required if the attribute
    refers to a polymorphic target, e.g. where we have to look at the type of the
    actual destination object to get the complete path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New in version 1.3: - [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") no longer stores any state
    specific to a particular parent class; the state is now stored in per-class [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `InspectionAttrInfo.info` *attribute of* [`InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo")'
  prefs: []
  type: TYPE_NORMAL
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr").
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary is generated when first accessed. Alternatively, it can be specified
    as a constructor argument to the [`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), or [`composite()`](../composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") functions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryableAttribute.info`](../internals.html#sqlalchemy.orm.QueryableAttribute.info
    "sqlalchemy.orm.QueryableAttribute.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SchemaItem.info`](../../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `InspectionAttr.is_aliased_class` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  prefs: []
  type: TYPE_NORMAL
- en: True if this object is an instance of [`AliasedClass`](../queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is a Python [descriptor](../../glossary.html#term-descriptor).
  prefs: []
  type: TYPE_NORMAL
- en: This can refer to one of many types. Usually a [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") which handles attributes events on behalf
    of a [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty").
    But can also be an extension type such as [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") or [`hybrid_property`](hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property"). The [`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") will refer to a constant identifying
    the specific subtype.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `InspectionAttr.is_bundle` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  prefs: []
  type: TYPE_NORMAL
- en: True if this object is an instance of [`Bundle`](../queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `InspectionAttr.is_clause_element` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  prefs: []
  type: TYPE_NORMAL
- en: True if this object is an instance of [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `InspectionAttr.is_instance` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  prefs: []
  type: TYPE_NORMAL
- en: True if this object is an instance of [`InstanceState`](../internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `InspectionAttr.is_mapper` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  prefs: []
  type: TYPE_NORMAL
- en: True if this object is an instance of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `InspectionAttr.is_property` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  prefs: []
  type: TYPE_NORMAL
- en: True if this object is an instance of [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `InspectionAttr.is_selectable` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  prefs: []
  type: TYPE_NORMAL
- en: Return True if this object is an instance of [`Selectable`](../../core/selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: A per-class object that serves class- and object-specific results.
  prefs: []
  type: TYPE_NORMAL
- en: This is used by [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") when it is invoked in terms
    of a specific class or instance of a class, i.e. when it is used as a regular
    Python descriptor.
  prefs: []
  type: TYPE_NORMAL
- en: 'When referring to the [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") as a normal Python descriptor,
    the [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") is the object that
    actually serves the information. Under normal circumstances, its presence is transparent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'In the special case that the [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") object is being accessed directly,
    in order to get an explicit handle to the [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance"), use the [`AssociationProxy.for_class()`](#sqlalchemy.ext.associationproxy.AssociationProxy.for_class
    "sqlalchemy.ext.associationproxy.AssociationProxy.for_class") method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__eq__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__eq__),
    [__le__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__lt__),
    [__ne__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__ne__),
    [all_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.all_), [any()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any_), [asc()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr), [between()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.collate),
    [collection_class](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.collection_class),
    [concat()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.contains),
    [delete()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.delete),
    [desc()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.desc), [distinct()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.endswith),
    [for_proxy()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.for_proxy),
    [get()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.get), [has()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.ilike), [in_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.in_),
    [info](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.info), [is_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.isnot), [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.like), [local_attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.match), [not_ilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate),
    [parent](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.parent), [regexp_match()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar), [set()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.set),
    [startswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.timetuple)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") (`sqlalchemy.orm.base.SQLORMOperations`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__eq__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `==` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a = b`. If the target is `None`, produces
    `a IS NULL`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a <= b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a < b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `!=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Produce a proxied ‘any’ expression using EXISTS.
  prefs: []
  type: TYPE_NORMAL
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Return a tuple of `(local_attr, remote_attr)`.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute was originally intended to facilitate using the [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method to join across the two relationships at once,
    however this makes use of a deprecated calling style.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `select.join()` or [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") with an association proxy, the current method is
    to make use of the [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") and [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") attributes
    separately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: A future release may seek to provide a more succinct join pattern for association
    proxy attributes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") clause against the parent object, given the
    lower and upper range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise AND operation, typically via the `&` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise OR operation, typically via the `|` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a custom boolean operator.
  prefs: []
  type: TYPE_NORMAL
- en: This method is shorthand for calling [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") clause against the parent object, given the
    collation string.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘concat’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘contains’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘endswith’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Produce a proxied ‘has’ expression using EXISTS.
  prefs: []
  type: TYPE_NORMAL
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces an expression either of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'Or on backends that support the ILIKE operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `in` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `column IN <other>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The given parameter `other` may be:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of literal values, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An empty list, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A bound parameter, e.g. [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The database would be passed a bound parameter for each value:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.2: added “expanding” bound parameters'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is usually a correlated scalar
    select:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** – a list of literals, a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `like` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces the expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: The ‘local’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../../dialects/postgresql.html#postgresql-match).'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Oracle - renders `CONTAINS(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a generic operator function.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: 'produces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: is a bitwise AND of the value in `somecolumn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`precedence` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`is_comparison` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_type` – a [`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python_impl` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Redefining and Creating New Operators](../../core/custom_types.html#types-operators)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using custom operators in join conditions](../join_conditions.html#relationship-custom-operator)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`op` – Operator callable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp replace’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pattern` – The replacement string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: The ‘remote’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Reverse operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Usage is the same as [`operate()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") proxies a scalar relationship
    on the local side.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `startswith` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: The intermediary class handled by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: Intercepted append/set/assignment events will result in the generation of new
    instances of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Hack, allows datetime objects to be compared on the LHS.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: an [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that has an object
    as a target.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__le__()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.__lt__),
    [all_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.all_),
    [any()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.any_),
    [asc()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.attr),
    [between()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.collate),
    [concat()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.contains),
    [desc()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.desc),
    [distinct()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.endswith),
    [has()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.ilike),
    [in_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.in_),
    [is_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.isnot),
    [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.like),
    [local_attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.match),
    [not_ilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate),
    [regexp_match()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.scalar),
    [startswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.timetuple)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance`](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance
    "sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance") ([`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a <= b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a < b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.any()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.any") *method of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a proxied ‘any’ expression using EXISTS.
  prefs: []
  type: TYPE_NORMAL
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr") *attribute of*
    [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a tuple of `(local_attr, remote_attr)`.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute was originally intended to facilitate using the [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method to join across the two relationships at once,
    however this makes use of a deprecated calling style.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `select.join()` or [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") with an association proxy, the current method is
    to make use of the [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") and [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") attributes
    separately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: A future release may seek to provide a more succinct join pattern for association
    proxy attributes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") clause against the parent object, given the
    lower and upper range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise AND operation, typically via the `&` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise OR operation, typically via the `|` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a custom boolean operator.
  prefs: []
  type: TYPE_NORMAL
- en: This method is shorthand for calling [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") clause against the parent object, given the
    collation string.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘concat’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: Produce a proxied ‘contains’ expression using EXISTS.
  prefs: []
  type: TYPE_NORMAL
- en: This expression will be a composed product using the `Comparator.any()`, `Comparator.has()`,
    and/or `Comparator.contains()` operators of the underlying proxied attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘endswith’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.has()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.has") *method of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a proxied ‘has’ expression using EXISTS.
  prefs: []
  type: TYPE_NORMAL
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces an expression either of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: 'Or on backends that support the ILIKE operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `in` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `column IN <other>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The given parameter `other` may be:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of literal values, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An empty list, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A bound parameter, e.g. [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The database would be passed a bound parameter for each value:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.2: added “expanding” bound parameters'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is usually a correlated scalar
    select:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** – a list of literals, a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `like` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces the expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: The ‘local’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../../dialects/postgresql.html#postgresql-match).'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Oracle - renders `CONTAINS(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a generic operator function.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: 'produces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: is a bitwise AND of the value in `somecolumn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`precedence` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`is_comparison` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_type` – a [`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python_impl` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Redefining and Creating New Operators](../../core/custom_types.html#types-operators)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using custom operators in join conditions](../join_conditions.html#relationship-custom-operator)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`op` – Operator callable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp replace’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pattern` – The replacement string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: The ‘remote’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Reverse operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Usage is the same as [`operate()`](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.scalar`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: Return `True` if this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") proxies a scalar relationship
    on the local side.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `startswith` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: The intermediary class handled by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: Intercepted append/set/assignment events will result in the generation of new
    instances of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Hack, allows datetime objects to be compared on the LHS.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: an [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that has a database
    column as a target.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__le__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__lt__),
    [__ne__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__ne__),
    [all_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.all_),
    [any()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.any_),
    [asc()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.attr),
    [between()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.collate),
    [concat()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.contains),
    [desc()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.desc),
    [distinct()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.endswith),
    [has()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.ilike),
    [in_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.in_),
    [is_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.isnot),
    [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.like),
    [local_attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.match),
    [not_ilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate),
    [regexp_match()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.scalar),
    [startswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.timetuple)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance`](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance
    "sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance") ([`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a <= b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a < b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `!=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.any()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.any") *method of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a proxied ‘any’ expression using EXISTS.
  prefs: []
  type: TYPE_NORMAL
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr") *attribute of*
    [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a tuple of `(local_attr, remote_attr)`.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute was originally intended to facilitate using the [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method to join across the two relationships at once,
    however this makes use of a deprecated calling style.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `select.join()` or [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") with an association proxy, the current method is
    to make use of the [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") and [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") attributes
    separately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: A future release may seek to provide a more succinct join pattern for association
    proxy attributes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") clause against the parent object, given the
    lower and upper range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise AND operation, typically via the `&` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise OR operation, typically via the `|` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a custom boolean operator.
  prefs: []
  type: TYPE_NORMAL
- en: This method is shorthand for calling [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") clause against the parent object, given the
    collation string.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘concat’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘contains’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE330]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE331]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE332]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘endswith’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE340]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE341]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE342]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE343]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.has()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.has") *method of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a proxied ‘has’ expression using EXISTS.
  prefs: []
  type: TYPE_NORMAL
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE349]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE350]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE351]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE352]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE353]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE357]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE358]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE359]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE360]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE361]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces an expression either of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: 'Or on backends that support the ILIKE operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE366]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `in` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `column IN <other>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The given parameter `other` may be:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of literal values, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE368]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE369]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE370]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An empty list, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE371]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE372]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A bound parameter, e.g. [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE373]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE374]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE375]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The database would be passed a bound parameter for each value:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE376]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.2: added “expanding” bound parameters'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE377]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is usually a correlated scalar
    select:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE378]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE379]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** – a list of literals, a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE389]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE390]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE391]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE392]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE393]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `like` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces the expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE397]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: The ‘local’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../../dialects/postgresql.html#postgresql-match).'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Oracle - renders `CONTAINS(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a generic operator function.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: 'produces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: is a bitwise AND of the value in `somecolumn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`precedence` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`is_comparison` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_type` – a [`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python_impl` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE414]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE415]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Redefining and Creating New Operators](../../core/custom_types.html#types-operators)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using custom operators in join conditions](../join_conditions.html#relationship-custom-operator)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: Operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`op` – Operator callable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp replace’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pattern` – The replacement string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: The ‘remote’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Reverse operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Usage is the same as [`operate()`](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.scalar`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: Return `True` if this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") proxies a scalar relationship
    on the local side.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `startswith` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE428]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE430]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE431]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE432]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: The intermediary class handled by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: Intercepted append/set/assignment events will result in the generation of new
    instances of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Hack, allows datetime objects to be compared on the LHS.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: An enumeration.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[ASSOCIATION_PROXY](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType.ASSOCIATION_PROXY)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.associationproxy.AssociationProxyExtensionType`](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType") ([`sqlalchemy.orm.base.InspectionAttrExtensionType`](../internals.html#sqlalchemy.orm.InspectionAttrExtensionType
    "sqlalchemy.orm.base.InspectionAttrExtensionType"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: Symbol indicating an [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr") that’s of type [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy").
  prefs: []
  type: TYPE_NORMAL
- en: Is assigned to the [`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '## Simplifying Scalar Collections'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a many-to-many mapping between two classes, `User` and `Keyword`.
    Each `User` can have any number of `Keyword` objects, and vice-versa (the many-to-many
    pattern is described at [Many To Many](../basic_relationships.html#relationships-many-to-many)).
    The example below illustrates this pattern in the same way, with the exception
    of an extra attribute added to the `User` class called `User.keywords`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: 'In the above example, [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") is applied to the `User`
    class to produce a “view” of the `kw` relationship, which exposes the string value
    of `.keyword` associated with each `Keyword` object. It also creates new `Keyword`
    objects transparently when strings are added to the collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: 'To understand the mechanics of this, first review the behavior of `User` and
    `Keyword` without using the `.keywords` association proxy. Normally, reading and
    manipulating the collection of “keyword” strings associated with `User` requires
    traversal from each collection element to the `.keyword` attribute, which can
    be awkward. The example below illustrates the identical series of operations applied
    without using the association proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: The [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    object produced by the [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") function is an instance of
    a [Python descriptor](https://docs.python.org/howto/descriptor.html), and is not
    considered to be “mapped” by the [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") in any way. Therefore, it’s always indicated inline within
    the class definition of the mapped class, regardless of whether Declarative or
    Imperative mappings are used.
  prefs: []
  type: TYPE_NORMAL
- en: The proxy functions by operating upon the underlying mapped attribute or collection
    in response to operations, and changes made via the proxy are immediately apparent
    in the mapped attribute, as well as vice versa. The underlying attribute remains
    fully accessible.
  prefs: []
  type: TYPE_NORMAL
- en: When first accessed, the association proxy performs introspection operations
    on the target collection so that its behavior corresponds correctly. Details such
    as if the locally proxied attribute is a collection (as is typical) or a scalar
    reference, as well as if the collection acts like a set, list, or dictionary is
    taken into account, so that the proxy should act just like the underlying collection
    or attribute does.
  prefs: []
  type: TYPE_NORMAL
- en: '### Creation of New Values'
  prefs: []
  type: TYPE_NORMAL
- en: 'When a list `append()` event (or set `add()`, dictionary `__setitem__()`, or
    scalar assignment event) is intercepted by the association proxy, it instantiates
    a new instance of the “intermediary” object using its constructor, passing as
    a single argument the given value. In our example above, an operation like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: 'Is translated by the association proxy into the operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: 'The example works here because we have designed the constructor for `Keyword`
    to accept a single positional argument, `keyword`. For those cases where a single-argument
    constructor isn’t feasible, the association proxy’s creational behavior can be
    customized using the [`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy") argument, which references
    a callable (i.e. Python function) that will produce a new object instance given
    the singular argument. Below we illustrate this using a lambda as is typical:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: 'The `creator` function accepts a single argument in the case of a list- or
    set- based collection, or a scalar attribute. In the case of a dictionary-based
    collection, it accepts two arguments, “key” and “value”. An example of this is
    below in [Proxying to Dictionary Based Collections](#proxying-dictionaries).  ###
    Creation of New Values'
  prefs: []
  type: TYPE_NORMAL
- en: 'When a list `append()` event (or set `add()`, dictionary `__setitem__()`, or
    scalar assignment event) is intercepted by the association proxy, it instantiates
    a new instance of the “intermediary” object using its constructor, passing as
    a single argument the given value. In our example above, an operation like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: 'Is translated by the association proxy into the operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: 'The example works here because we have designed the constructor for `Keyword`
    to accept a single positional argument, `keyword`. For those cases where a single-argument
    constructor isn’t feasible, the association proxy’s creational behavior can be
    customized using the [`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy") argument, which references
    a callable (i.e. Python function) that will produce a new object instance given
    the singular argument. Below we illustrate this using a lambda as is typical:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: The `creator` function accepts a single argument in the case of a list- or set-
    based collection, or a scalar attribute. In the case of a dictionary-based collection,
    it accepts two arguments, “key” and “value”. An example of this is below in [Proxying
    to Dictionary Based Collections](#proxying-dictionaries).
  prefs: []
  type: TYPE_NORMAL
- en: Simplifying Association Objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The “association object” pattern is an extended form of a many-to-many relationship,
    and is described at [Association Object](../basic_relationships.html#association-pattern).
    Association proxies are useful for keeping “association objects” out of the way
    during regular use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose our `user_keyword` table above had additional columns which we’d like
    to map explicitly, but in most cases we don’t require direct access to these attributes.
    Below, we illustrate a new mapping which introduces the `UserKeywordAssociation`
    class, which is mapped to the `user_keyword` table illustrated earlier. This class
    adds an additional column `special_key`, a value which we occasionally want to
    access, but not in the usual case. We create an association proxy on the `User`
    class called `keywords`, which will bridge the gap from the `user_keyword_associations`
    collection of `User` to the `.keyword` attribute present on each `UserKeywordAssociation`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: 'With the above configuration, we can operate upon the `.keywords` collection
    of each `User` object, each of which exposes a collection of `Keyword` objects
    that are obtained from the underlying `UserKeywordAssociation` elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: 'This example is in contrast to the example illustrated previously at [Simplifying
    Scalar Collections](#associationproxy-scalar-collections), where the association
    proxy exposed a collection of strings, rather than a collection of composed objects.
    In this case, each `.keywords.append()` operation is equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: The `UserKeywordAssociation` object has two attributes that are both populated
    within the scope of the `append()` operation of the association proxy; `.keyword`,
    which refers to the `Keyword` object, and `.user`, which refers to the `User`
    object. The `.keyword` attribute is populated first, as the association proxy
    generates a new `UserKeywordAssociation` object in response to the `.append()`
    operation, assigning the given `Keyword` instance to the `.keyword` attribute.
    Then, as the `UserKeywordAssociation` object is appended to the `User.user_keyword_associations`
    collection, the `UserKeywordAssociation.user` attribute, configured as `back_populates`
    for `User.user_keyword_associations`, is initialized upon the given `UserKeywordAssociation`
    instance to refer to the parent `User` receiving the append operation. The `special_key`
    argument above is left at its default value of `None`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For those cases where we do want `special_key` to have a value, we create the
    `UserKeywordAssociation` object explicitly. Below we assign all three attributes,
    wherein the assignment of `.user` during construction, has the effect of appending
    the new `UserKeywordAssociation` to the `User.user_keyword_associations` collection
    (via the relationship):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: 'The association proxy returns to us a collection of `Keyword` objects represented
    by all these operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: '## Proxying to Dictionary Based Collections'
  prefs: []
  type: TYPE_NORMAL
- en: The association proxy can proxy to dictionary based collections as well. SQLAlchemy
    mappings usually use the [`attribute_keyed_dict()`](../collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict") collection type to create dictionary collections,
    as well as the extended techniques described in [Custom Dictionary-Based Collections](../collection_api.html#id1).
  prefs: []
  type: TYPE_NORMAL
- en: The association proxy adjusts its behavior when it detects the usage of a dictionary-based
    collection. When new values are added to the dictionary, the association proxy
    instantiates the intermediary object by passing two arguments to the creation
    function instead of one, the key and the value. As always, this creation function
    defaults to the constructor of the intermediary class, and can be customized using
    the `creator` argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below, we modify our `UserKeywordAssociation` example such that the `User.user_keyword_associations`
    collection will now be mapped using a dictionary, where the `UserKeywordAssociation.special_key`
    argument will be used as the key for the dictionary. We also apply a `creator`
    argument to the `User.keywords` proxy so that these values are assigned appropriately
    when new elements are added to the dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: 'We illustrate the `.keywords` collection as a dictionary, mapping the `UserKeywordAssociation.special_key`
    value to `Keyword` objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: '## Composite Association Proxies'
  prefs: []
  type: TYPE_NORMAL
- en: 'Given our previous examples of proxying from relationship to scalar attribute,
    proxying across an association object, and proxying dictionaries, we can combine
    all three techniques together to give `User` a `keywords` dictionary that deals
    strictly with the string value of `special_key` mapped to the string `keyword`.
    Both the `UserKeywordAssociation` and `Keyword` classes are entirely concealed.
    This is achieved by building an association proxy on `User` that refers to an
    association proxy present on `UserKeywordAssociation`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: '`User.keywords` is now a dictionary of string to string, where `UserKeywordAssociation`
    and `Keyword` objects are created and removed for us transparently using the association
    proxy. In the example below, we illustrate usage of the assignment operator, also
    appropriately handled by the association proxy, to apply a dictionary value to
    the collection at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: One caveat with our example above is that because `Keyword` objects are created
    for each dictionary set operation, the example fails to maintain uniqueness for
    the `Keyword` objects on their string name, which is a typical requirement for
    a tagging scenario such as this one. For this use case the recipe [UniqueObject](https://www.sqlalchemy.org/trac/wiki/UsageRecipes/UniqueObject),
    or a comparable creational strategy, is recommended, which will apply a “lookup
    first, then create” strategy to the constructor of the `Keyword` class, so that
    an already existing `Keyword` is returned if the given name is already present.
  prefs: []
  type: TYPE_NORMAL
- en: Querying with Association Proxies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    features simple SQL construction capabilities which work at the class level in
    a similar way as other ORM-mapped attributes, and provide rudimentary filtering
    support primarily based on the SQL `EXISTS` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The primary purpose of the association proxy extension is to allow for improved
    persistence and object-access patterns with mapped object instances that are already
    loaded. The class-bound querying feature is of limited use and will not replace
    the need to refer to the underlying attributes when constructing SQL queries with
    JOINs, eager loading options, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this section, assume a class with both an association proxy that refers
    to a column, as well as an association proxy that refers to a related object,
    as in the example mapping below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: 'The SQL generated takes the form of a correlated subquery against the EXISTS
    SQL operator so that it can be used in a WHERE clause without the need for additional
    modifications to the enclosing query. If the immediate target of an association
    proxy is a **mapped column expression**, standard column operators can be used
    which will be embedded in the subquery. For example a straight equality operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: 'a LIKE operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: 'For association proxies where the immediate target is a **related object or
    collection, or another association proxy or attribute on the related object**,
    relationship-oriented operators can be used instead, such as [`PropComparator.has()`](../internals.html#sqlalchemy.orm.PropComparator.has
    "sqlalchemy.orm.PropComparator.has") and [`PropComparator.any()`](../internals.html#sqlalchemy.orm.PropComparator.any
    "sqlalchemy.orm.PropComparator.any"). The `User.keywords` attribute is in fact
    two association proxies linked together, so when using this proxy for generating
    SQL phrases, we get two levels of EXISTS subqueries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: This is not the most efficient form of SQL, so while association proxies can
    be convenient for generating WHERE criteria quickly, SQL results should be inspected
    and “unrolled” into explicit JOIN criteria for best use, especially when chaining
    association proxies together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.3: Association proxy features distinct querying modes
    based on the type of target. See [AssociationProxy now provides standard column
    operators for a column-oriented target](../../changelog/migration_13.html#change-4351).'
  prefs: []
  type: TYPE_NORMAL
- en: '## Cascading Scalar Deletes'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given a mapping as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: 'An assignment to `A.b` will generate an `AB` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: 'The `A.b` association is scalar, and includes use of the parameter [`AssociationProxy.cascade_scalar_deletes`](#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy"). When this parameter is enabled,
    setting `A.b` to `None` will remove `A.ab` as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: When [`AssociationProxy.cascade_scalar_deletes`](#sqlalchemy.ext.associationproxy.AssociationProxy.params.cascade_scalar_deletes
    "sqlalchemy.ext.associationproxy.AssociationProxy") is not set, the association
    object `a.ab` above would remain in place.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this is not the behavior for collection-based association proxies;
    in that case, the intermediary association object is always removed when members
    of the proxied collection are removed. Whether or not the row is deleted depends
    on the relationship cascade setting.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Cascades](../cascades.html#unitofwork-cascades)'
  prefs: []
  type: TYPE_NORMAL
- en: Scalar Relationships
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The example below illustrates the use of the association proxy on the many
    side of of a one-to-many relationship, accessing attributes of a scalar object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: 'A summary of the steps of `my_snack` can be printed using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: API Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [association_proxy](#sqlalchemy.ext.associationproxy.association_proxy)(target_collection,
    attr, *, [creator, getset_factory, proxy_factory, proxy_bulk_set, info, cascade_scalar_deletes,
    create_on_none_assignment, init, repr, default, default_factory, compare, kw_only])
    | Return a Python property implementing a view of a target attribute which references
    an attribute on members of the target. |'
  prefs: []
  type: TYPE_TB
- en: '| [AssociationProxy](#sqlalchemy.ext.associationproxy.AssociationProxy) | A
    descriptor that presents a read/write view of an object attribute. |'
  prefs: []
  type: TYPE_TB
- en: '| [AssociationProxyExtensionType](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType)
    | An enumeration. |'
  prefs: []
  type: TYPE_TB
- en: '| [AssociationProxyInstance](#sqlalchemy.ext.associationproxy.AssociationProxyInstance)
    | A per-class object that serves class- and object-specific results. |'
  prefs: []
  type: TYPE_TB
- en: '| [ColumnAssociationProxyInstance](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance)
    | an [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that has a database
    column as a target. |'
  prefs: []
  type: TYPE_TB
- en: '| [ObjectAssociationProxyInstance](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance)
    | an [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that has an object
    as a target. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: Return a Python property implementing a view of a target attribute which references
    an attribute on members of the target.
  prefs: []
  type: TYPE_NORMAL
- en: The returned value is an instance of [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy").
  prefs: []
  type: TYPE_NORMAL
- en: Implements a Python property representing a relationship as a collection of
    simpler values, or a scalar value. The proxied property will mimic the collection
    type of the target (list, dict or set), or, in the case of a one to one relationship,
    a simple scalar value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target_collection` – Name of the attribute that is the immediate target. This
    attribute is typically mapped by [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") to link to a target collection, but can also be
    a many-to-one or non-scalar relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attr` – Attribute on the associated instance or instances that are available
    on instances of the target object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`creator` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Defines custom behavior when new items are added to the proxied collection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By default, adding new items to the collection will trigger a construction of
    an instance of the target object, passing the given item as a positional argument
    to the target constructor. For cases where this isn’t sufficient, [`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy") can supply a callable that
    will construct the object in the appropriate way, given the item that was passed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For list- and set- oriented collections, a single argument is passed to the
    callable. For dictionary oriented collections, two arguments are passed, corresponding
    to the key and value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The [`association_proxy.creator`](#sqlalchemy.ext.associationproxy.association_proxy.params.creator
    "sqlalchemy.ext.associationproxy.association_proxy") callable is also invoked
    for scalar (i.e. many-to-one, one-to-one) relationships. If the current value
    of the target relationship attribute is `None`, the callable is used to construct
    a new object. If an object value already exists, the given attribute value is
    populated onto that object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Creation of New Values](#associationproxy-creator)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`cascade_scalar_deletes` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when True, indicates that setting the proxied value to `None`, or deleting it
    via `del`, should also remove the source object. Only applies to scalar attributes.
    Normally, removing the proxied target will not remove the proxy source, as this
    object may have other state that is still to be kept.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Cascading Scalar Deletes](#cascade-scalar-deletes) - complete usage example'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`create_on_none_assignment` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when True, indicates that setting the proxied value to `None` should **create**
    the source object if it does not exist, using the creator. Only applies to scalar
    attributes. This is mutually exclusive vs. the `assocation_proxy.cascade_scalar_deletes`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.18.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`init` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    specifies if the mapped attribute should be part of the `__init__()` method as
    generated by the dataclass process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`repr` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    specifies if the attribute established by this [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") should be part of the `__repr__()`
    method as generated by the dataclass process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`default_factory` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    specifies a default-value generation function that will take place as part of
    the `__init__()` method as generated by the dataclass process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`compare` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    indicates if this field should be included in comparison operations when generating
    the `__eq__()` and `__ne__()` methods for the mapped class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`kw_only` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific to [Declarative Dataclass Mapping](../dataclasses.html#orm-declarative-native-dataclasses),
    indicates if this field should be marked as keyword-only when generating the `__init__()`
    method as generated by the dataclass process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.0b4.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`info` – optional, will be assigned to [`AssociationProxy.info`](#sqlalchemy.ext.associationproxy.AssociationProxy.info
    "sqlalchemy.ext.associationproxy.AssociationProxy.info") if present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following additional parameters involve injection of custom behaviors within
    the [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    object and are for advanced use only:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getset_factory` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional. Proxied attribute access is automatically handled by routines that
    get and set values based on the attr argument for this proxy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you would like to customize this behavior, you may supply a getset_factory
    callable that produces a tuple of getter and setter functions. The factory is
    called with two arguments, the abstract type of the underlying collection and
    this proxy instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`proxy_factory` – Optional. The type of collection to emulate is determined
    by sniffing the target collection. If your collection type can’t be determined
    by duck typing or you’d like to use a different collection implementation, you
    may supply a factory function to produce those collections. Only applicable to
    non-scalar relationships.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proxy_bulk_set` – Optional, use with proxy_factory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: A descriptor that presents a read/write view of an object attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.ext.associationproxy.AssociationProxy.__init__), [cascade_scalar_deletes](#sqlalchemy.ext.associationproxy.AssociationProxy.cascade_scalar_deletes),
    [create_on_none_assignment](#sqlalchemy.ext.associationproxy.AssociationProxy.create_on_none_assignment),
    [creator](#sqlalchemy.ext.associationproxy.AssociationProxy.creator), [extension_type](#sqlalchemy.ext.associationproxy.AssociationProxy.extension_type),
    [for_class()](#sqlalchemy.ext.associationproxy.AssociationProxy.for_class), [getset_factory](#sqlalchemy.ext.associationproxy.AssociationProxy.getset_factory),
    [info](#sqlalchemy.ext.associationproxy.AssociationProxy.info), [is_aliased_class](#sqlalchemy.ext.associationproxy.AssociationProxy.is_aliased_class),
    [is_attribute](#sqlalchemy.ext.associationproxy.AssociationProxy.is_attribute),
    [is_bundle](#sqlalchemy.ext.associationproxy.AssociationProxy.is_bundle), [is_clause_element](#sqlalchemy.ext.associationproxy.AssociationProxy.is_clause_element),
    [is_instance](#sqlalchemy.ext.associationproxy.AssociationProxy.is_instance),
    [is_mapper](#sqlalchemy.ext.associationproxy.AssociationProxy.is_mapper), [is_property](#sqlalchemy.ext.associationproxy.AssociationProxy.is_property),
    [is_selectable](#sqlalchemy.ext.associationproxy.AssociationProxy.is_selectable),
    [key](#sqlalchemy.ext.associationproxy.AssociationProxy.key), [proxy_bulk_set](#sqlalchemy.ext.associationproxy.AssociationProxy.proxy_bulk_set),
    [proxy_factory](#sqlalchemy.ext.associationproxy.AssociationProxy.proxy_factory),
    [target_collection](#sqlalchemy.ext.associationproxy.AssociationProxy.target_collection),
    [value_attr](#sqlalchemy.ext.associationproxy.AssociationProxy.value_attr)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.associationproxy.AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") ([`sqlalchemy.orm.base.InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo"), `sqlalchemy.orm.base.ORMDescriptor`,
    `sqlalchemy.orm._DCAttributeOptions`, `sqlalchemy.ext.associationproxy._AssociationProxyProtocol`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy").
  prefs: []
  type: TYPE_NORMAL
- en: The [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy "sqlalchemy.ext.associationproxy.AssociationProxy")
    object is typically constructed using the [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") constructor function. See
    the description of [`association_proxy()`](#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") for a description of all
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE470]'
  prefs: []
  type: TYPE_PRE
- en: The extension type, if any. Defaults to `NotExtension.NOT_EXTENSION`
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`HybridExtensionType`](hybrid.html#sqlalchemy.ext.hybrid.HybridExtensionType
    "sqlalchemy.ext.hybrid.HybridExtensionType")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyExtensionType`](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE471]'
  prefs: []
  type: TYPE_PRE
- en: Return the internal state local to a specific mapped class.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g., given a class `User`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: 'If we access this [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") from [`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors"), and we want to view the target class
    for this proxy as mapped by `User`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: This returns an instance of [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that is specific to
    the `User` class. The [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") object remains agnostic of
    its parent class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`class_` – the class that we are returning state for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`obj` – optional, an instance of the class that is required if the attribute
    refers to a polymorphic target, e.g. where we have to look at the type of the
    actual destination object to get the complete path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New in version 1.3: - [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") no longer stores any state
    specific to a particular parent class; the state is now stored in per-class [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE474]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE475]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `InspectionAttrInfo.info` *attribute of* [`InspectionAttrInfo`](../internals.html#sqlalchemy.orm.InspectionAttrInfo
    "sqlalchemy.orm.base.InspectionAttrInfo")'
  prefs: []
  type: TYPE_NORMAL
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr").
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary is generated when first accessed. Alternatively, it can be specified
    as a constructor argument to the [`column_property()`](../mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), or [`composite()`](../composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") functions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueryableAttribute.info`](../internals.html#sqlalchemy.orm.QueryableAttribute.info
    "sqlalchemy.orm.QueryableAttribute.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SchemaItem.info`](../../core/metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE476]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `InspectionAttr.is_aliased_class` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  prefs: []
  type: TYPE_NORMAL
- en: True if this object is an instance of [`AliasedClass`](../queryguide/api.html#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE477]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is a Python [descriptor](../../glossary.html#term-descriptor).
  prefs: []
  type: TYPE_NORMAL
- en: This can refer to one of many types. Usually a [`QueryableAttribute`](../internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") which handles attributes events on behalf
    of a [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty "sqlalchemy.orm.MapperProperty").
    But can also be an extension type such as [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") or [`hybrid_property`](hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property"). The [`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") will refer to a constant identifying
    the specific subtype.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Mapper.all_orm_descriptors`](../mapping_api.html#sqlalchemy.orm.Mapper.all_orm_descriptors
    "sqlalchemy.orm.Mapper.all_orm_descriptors")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE478]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `InspectionAttr.is_bundle` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  prefs: []
  type: TYPE_NORMAL
- en: True if this object is an instance of [`Bundle`](../queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE479]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `InspectionAttr.is_clause_element` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  prefs: []
  type: TYPE_NORMAL
- en: True if this object is an instance of [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE480]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `InspectionAttr.is_instance` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  prefs: []
  type: TYPE_NORMAL
- en: True if this object is an instance of [`InstanceState`](../internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE481]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `InspectionAttr.is_mapper` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  prefs: []
  type: TYPE_NORMAL
- en: True if this object is an instance of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE482]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `InspectionAttr.is_property` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  prefs: []
  type: TYPE_NORMAL
- en: True if this object is an instance of [`MapperProperty`](../internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE483]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `InspectionAttr.is_selectable` *attribute of* [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr")'
  prefs: []
  type: TYPE_NORMAL
- en: Return True if this object is an instance of [`Selectable`](../../core/selectable.html#sqlalchemy.sql.expression.Selectable
    "sqlalchemy.sql.expression.Selectable").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE484]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE485]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE486]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE487]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE488]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE489]'
  prefs: []
  type: TYPE_PRE
- en: A per-class object that serves class- and object-specific results.
  prefs: []
  type: TYPE_NORMAL
- en: This is used by [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") when it is invoked in terms
    of a specific class or instance of a class, i.e. when it is used as a regular
    Python descriptor.
  prefs: []
  type: TYPE_NORMAL
- en: 'When referring to the [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") as a normal Python descriptor,
    the [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") is the object that
    actually serves the information. Under normal circumstances, its presence is transparent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE490]'
  prefs: []
  type: TYPE_PRE
- en: 'In the special case that the [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") object is being accessed directly,
    in order to get an explicit handle to the [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance"), use the [`AssociationProxy.for_class()`](#sqlalchemy.ext.associationproxy.AssociationProxy.for_class
    "sqlalchemy.ext.associationproxy.AssociationProxy.for_class") method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE491]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__eq__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__eq__),
    [__le__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__lt__),
    [__ne__()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.__ne__),
    [all_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.all_), [any()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any_), [asc()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr), [between()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.collate),
    [collection_class](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.collection_class),
    [concat()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.contains),
    [delete()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.delete),
    [desc()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.desc), [distinct()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.endswith),
    [for_proxy()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.for_proxy),
    [get()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.get), [has()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.ilike), [in_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.in_),
    [info](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.info), [is_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.isnot), [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.like), [local_attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.match), [not_ilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate),
    [parent](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.parent), [regexp_match()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar), [set()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.set),
    [startswith()](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.timetuple)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") (`sqlalchemy.orm.base.SQLORMOperations`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE492]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__eq__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `==` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a = b`. If the target is `None`, produces
    `a IS NULL`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE493]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a <= b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE494]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a < b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE495]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `!=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE496]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE497]'
  prefs: []
  type: TYPE_PRE
- en: Produce a proxied ‘any’ expression using EXISTS.
  prefs: []
  type: TYPE_NORMAL
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE498]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE499]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE500]'
  prefs: []
  type: TYPE_PRE
- en: Return a tuple of `(local_attr, remote_attr)`.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute was originally intended to facilitate using the [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method to join across the two relationships at once,
    however this makes use of a deprecated calling style.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `select.join()` or [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") with an association proxy, the current method is
    to make use of the [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") and [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") attributes
    separately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE501]'
  prefs: []
  type: TYPE_PRE
- en: A future release may seek to provide a more succinct join pattern for association
    proxy attributes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE502]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") clause against the parent object, given the
    lower and upper range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE503]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise AND operation, typically via the `&` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE504]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE505]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE506]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise OR operation, typically via the `|` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE507]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE508]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE509]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a custom boolean operator.
  prefs: []
  type: TYPE_NORMAL
- en: This method is shorthand for calling [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE510]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") clause against the parent object, given the
    collation string.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE511]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE512]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘concat’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE513]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘contains’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE514]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE515]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE516]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE517]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE518]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE519]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE520]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE521]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE522]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE523]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE524]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘endswith’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE525]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE526]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE527]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE528]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE529]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE530]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE531]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE532]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE533]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE534]'
  prefs: []
  type: TYPE_PRE
- en: Produce a proxied ‘has’ expression using EXISTS.
  prefs: []
  type: TYPE_NORMAL
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE535]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE536]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE537]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE538]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE539]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE540]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE541]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE542]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE543]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE544]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE545]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE546]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE547]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE548]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE549]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE550]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE551]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces an expression either of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE552]'
  prefs: []
  type: TYPE_PRE
- en: 'Or on backends that support the ILIKE operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE553]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE554]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE555]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE556]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `in` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `column IN <other>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The given parameter `other` may be:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of literal values, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE557]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE558]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE559]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An empty list, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE560]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE561]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A bound parameter, e.g. [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE562]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE563]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE564]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The database would be passed a bound parameter for each value:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE565]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.2: added “expanding” bound parameters'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE566]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is usually a correlated scalar
    select:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE567]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE568]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** – a list of literals, a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE569]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE570]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE571]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE572]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE573]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE574]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE575]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE576]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE577]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE578]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE579]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE580]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE581]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE582]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE583]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE584]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `like` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces the expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE585]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE586]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE587]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE588]'
  prefs: []
  type: TYPE_PRE
- en: The ‘local’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE589]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../../dialects/postgresql.html#postgresql-match).'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Oracle - renders `CONTAINS(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE590]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE591]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE592]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE593]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE594]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE595]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE596]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE597]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE598]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE599]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE600]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a generic operator function.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE601]'
  prefs: []
  type: TYPE_PRE
- en: 'produces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE602]'
  prefs: []
  type: TYPE_PRE
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE603]'
  prefs: []
  type: TYPE_PRE
- en: is a bitwise AND of the value in `somecolumn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`precedence` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`is_comparison` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_type` – a [`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python_impl` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE604]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE605]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Redefining and Creating New Operators](../../core/custom_types.html#types-operators)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using custom operators in join conditions](../join_conditions.html#relationship-custom-operator)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE606]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE607]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`op` – Operator callable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE608]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE609]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE610]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE611]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp replace’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE612]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pattern` – The replacement string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE613]'
  prefs: []
  type: TYPE_PRE
- en: The ‘remote’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE614]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Reverse operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Usage is the same as [`operate()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.operate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE615]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") proxies a scalar relationship
    on the local side.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE616]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE617]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `startswith` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE618]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE619]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE620]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE621]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE622]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE623]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE624]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE625]'
  prefs: []
  type: TYPE_PRE
- en: The intermediary class handled by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: Intercepted append/set/assignment events will result in the generation of new
    instances of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE626]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Hack, allows datetime objects to be compared on the LHS.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE627]'
  prefs: []
  type: TYPE_PRE
- en: an [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that has an object
    as a target.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__le__()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.__lt__),
    [all_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.all_),
    [any()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.any_),
    [asc()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.attr),
    [between()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.collate),
    [concat()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.contains),
    [desc()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.desc),
    [distinct()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.endswith),
    [has()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.ilike),
    [in_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.in_),
    [is_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.isnot),
    [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.like),
    [local_attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.match),
    [not_ilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate),
    [regexp_match()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.scalar),
    [startswith()](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.timetuple)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance`](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance
    "sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance") ([`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE628]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a <= b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE629]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a < b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE630]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE631]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.any()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.any") *method of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a proxied ‘any’ expression using EXISTS.
  prefs: []
  type: TYPE_NORMAL
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE632]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE633]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE634]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr") *attribute of*
    [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a tuple of `(local_attr, remote_attr)`.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute was originally intended to facilitate using the [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method to join across the two relationships at once,
    however this makes use of a deprecated calling style.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `select.join()` or [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") with an association proxy, the current method is
    to make use of the [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") and [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") attributes
    separately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE635]'
  prefs: []
  type: TYPE_PRE
- en: A future release may seek to provide a more succinct join pattern for association
    proxy attributes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE636]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") clause against the parent object, given the
    lower and upper range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE637]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise AND operation, typically via the `&` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE638]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE639]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE640]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise OR operation, typically via the `|` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE641]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE642]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE643]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a custom boolean operator.
  prefs: []
  type: TYPE_NORMAL
- en: This method is shorthand for calling [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE644]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") clause against the parent object, given the
    collation string.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE645]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘concat’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE646]'
  prefs: []
  type: TYPE_PRE
- en: Produce a proxied ‘contains’ expression using EXISTS.
  prefs: []
  type: TYPE_NORMAL
- en: This expression will be a composed product using the `Comparator.any()`, `Comparator.has()`,
    and/or `Comparator.contains()` operators of the underlying proxied attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE647]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE648]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE649]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘endswith’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE650]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE651]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE652]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE653]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE654]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE655]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE656]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE657]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.has()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.has") *method of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a proxied ‘has’ expression using EXISTS.
  prefs: []
  type: TYPE_NORMAL
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE658]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE659]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE660]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE661]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE662]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE663]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE664]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE665]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE666]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE667]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE668]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE669]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE670]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE671]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE672]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE673]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE674]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces an expression either of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE675]'
  prefs: []
  type: TYPE_PRE
- en: 'Or on backends that support the ILIKE operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE676]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE677]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE678]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE679]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `in` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `column IN <other>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The given parameter `other` may be:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of literal values, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE680]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE681]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE682]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An empty list, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE683]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE684]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A bound parameter, e.g. [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE685]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE686]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE687]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The database would be passed a bound parameter for each value:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE688]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.2: added “expanding” bound parameters'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE689]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is usually a correlated scalar
    select:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE690]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE691]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** – a list of literals, a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE692]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE693]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE694]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE695]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE696]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE697]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE698]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE699]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE700]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE701]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE702]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE703]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE704]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE705]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE706]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `like` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces the expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE707]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE708]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE709]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE710]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: The ‘local’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE711]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../../dialects/postgresql.html#postgresql-match).'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Oracle - renders `CONTAINS(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE712]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE713]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE714]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE715]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE716]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE717]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE718]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE719]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE720]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE721]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE722]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a generic operator function.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE723]'
  prefs: []
  type: TYPE_PRE
- en: 'produces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE724]'
  prefs: []
  type: TYPE_PRE
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE725]'
  prefs: []
  type: TYPE_PRE
- en: is a bitwise AND of the value in `somecolumn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`precedence` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`is_comparison` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_type` – a [`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python_impl` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE726]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE727]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Redefining and Creating New Operators](../../core/custom_types.html#types-operators)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using custom operators in join conditions](../join_conditions.html#relationship-custom-operator)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE728]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.operate
    "sqlalchemy.sql.expression.Operators.operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE729]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`op` – Operator callable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE730]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE731]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE732]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp replace’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE733]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pattern` – The replacement string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE734]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: The ‘remote’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE735]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Reverse operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Usage is the same as [`operate()`](#sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.ObjectAssociationProxyInstance.operate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE736]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.scalar`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: Return `True` if this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") proxies a scalar relationship
    on the local side.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE737]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `startswith` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE738]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE739]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE740]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE741]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE742]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE743]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE744]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE745]'
  prefs: []
  type: TYPE_PRE
- en: The intermediary class handled by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: Intercepted append/set/assignment events will result in the generation of new
    instances of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE746]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Hack, allows datetime objects to be compared on the LHS.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE747]'
  prefs: []
  type: TYPE_PRE
- en: an [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") that has a database
    column as a target.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__le__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__le__),
    [__lt__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__lt__),
    [__ne__()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.__ne__),
    [all_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.all_),
    [any()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.any),
    [any_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.any_),
    [asc()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.asc),
    [attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.attr),
    [between()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.between),
    [bitwise_and()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_and),
    [bitwise_lshift()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_lshift),
    [bitwise_not()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_not),
    [bitwise_or()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_or),
    [bitwise_rshift()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_rshift),
    [bitwise_xor()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bitwise_xor),
    [bool_op()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.bool_op),
    [collate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.collate),
    [concat()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.concat),
    [contains()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.contains),
    [desc()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.desc),
    [distinct()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.distinct),
    [endswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.endswith),
    [has()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.has),
    [icontains()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.icontains),
    [iendswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.iendswith),
    [ilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.ilike),
    [in_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.in_),
    [is_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_),
    [is_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_distinct_from),
    [is_not()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_not),
    [is_not_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.is_not_distinct_from),
    [isnot()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.isnot),
    [isnot_distinct_from()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.isnot_distinct_from),
    [istartswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.istartswith),
    [like()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.like),
    [local_attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.local_attr),
    [match()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.match),
    [not_ilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_ilike),
    [not_in()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_in),
    [not_like()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.not_like),
    [notilike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notilike),
    [notin_()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notin_),
    [notlike()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.notlike),
    [nulls_first()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nulls_first),
    [nulls_last()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nulls_last),
    [nullsfirst()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nullsfirst),
    [nullslast()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.nullslast),
    [op()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.op), [operate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate),
    [regexp_match()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.regexp_match),
    [regexp_replace()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.regexp_replace),
    [remote_attr](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.remote_attr),
    [reverse_operate()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.reverse_operate),
    [scalar](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.scalar),
    [startswith()](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.startswith),
    [target_class](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.target_class),
    [timetuple](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.timetuple)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance`](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance
    "sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance") ([`sqlalchemy.ext.associationproxy.AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE748]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__le__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a <= b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE749]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__lt__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a < b`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE750]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.expression.ColumnOperators.__ne__` *method
    of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `!=` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a != b`. If the target is `None`,
    produces `a IS NOT NULL`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE751]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.all_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.all_
    "sqlalchemy.sql.expression.ColumnOperators.all_") method with the **legacy** version
    of this method, the [`Comparator.all()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.all
    "sqlalchemy.types.ARRAY.Comparator.all") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE752]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.any()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.any
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.any") *method of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a proxied ‘any’ expression using EXISTS.
  prefs: []
  type: TYPE_NORMAL
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE753]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce an [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") for examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: be sure to not confuse the newer [`ColumnOperators.any_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.any_
    "sqlalchemy.sql.expression.ColumnOperators.any_") method with the **legacy** version
    of this method, the [`Comparator.any()`](../../core/type_basics.html#sqlalchemy.types.ARRAY.Comparator.any
    "sqlalchemy.types.ARRAY.Comparator.any") method that’s specific to [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), which uses a different calling style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE754]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.asc
    "sqlalchemy.sql.expression.ColumnOperators.asc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`asc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.asc
    "sqlalchemy.sql.expression.asc") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE755]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr") *attribute of*
    [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a tuple of `(local_attr, remote_attr)`.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute was originally intended to facilitate using the [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method to join across the two relationships at once,
    however this makes use of a deprecated calling style.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `select.join()` or [`Query.join()`](../queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") with an association proxy, the current method is
    to make use of the [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") and [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") attributes
    separately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE756]'
  prefs: []
  type: TYPE_PRE
- en: A future release may seek to provide a more succinct join pattern for association
    proxy attributes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE757]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.between
    "sqlalchemy.sql.expression.ColumnOperators.between") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`between()`](../../core/sqlelement.html#sqlalchemy.sql.expression.between
    "sqlalchemy.sql.expression.between") clause against the parent object, given the
    lower and upper range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE758]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_and()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise AND operation, typically via the `&` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE759]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_lshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise LSHIFT operation, typically via the `<<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE760]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise NOT operation, typically via the `~` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE761]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_or()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise OR operation, typically via the `|` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE762]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_rshift()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise RSHIFT operation, typically via the `>>` operator.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE763]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.bitwise_xor()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a bitwise XOR operation, typically via the `^` operator, or `#` for
    PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Bitwise Operators](../../core/operators.html#operators-bitwise)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE764]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a custom boolean operator.
  prefs: []
  type: TYPE_NORMAL
- en: This method is shorthand for calling [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and passing the [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") flag with True. A key advantage to using
    [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") is that when using column constructs,
    the “boolean” nature of the returned expression will be present for [**PEP 484**](https://peps.python.org/pep-0484/)
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE765]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.collate
    "sqlalchemy.sql.expression.ColumnOperators.collate") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate") clause against the parent object, given the
    collation string.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`collate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.collate
    "sqlalchemy.sql.expression.collate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE766]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.concat()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.concat
    "sqlalchemy.sql.expression.ColumnOperators.concat") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘concat’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `a || b`, or uses the `concat()` operator
    on MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE767]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘contains’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the middle of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE768]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE769]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.contains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.contains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE770]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE771]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE772]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE773]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE774]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE775]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.desc
    "sqlalchemy.sql.expression.ColumnOperators.desc") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`desc()`](../../core/sqlelement.html#sqlalchemy.sql.expression.desc
    "sqlalchemy.sql.expression.desc") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE776]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.distinct
    "sqlalchemy.sql.expression.ColumnOperators.distinct") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`distinct()`](../../core/sqlelement.html#sqlalchemy.sql.expression.distinct
    "sqlalchemy.sql.expression.distinct") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE777]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the ‘endswith’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the end of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE778]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE779]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.endswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE780]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE781]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE782]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE783]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.endswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.endswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE784]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE785]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.has()`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.has
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.has") *method of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a proxied ‘has’ expression using EXISTS.
  prefs: []
  type: TYPE_NORMAL
- en: This expression will be a composed product using the `Comparator.any()` and/or
    `Comparator.has()` operators of the underlying proxied attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE786]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.icontains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `icontains` operator, e.g. case insensitive version of [`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    middle of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE787]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE788]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.icontains.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.icontains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.icontains") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE789]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE790]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE791]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE792]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.contains.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.contains"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE793]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE794]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.iendswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `iendswith` operator, e.g. case insensitive version of [`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    end of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE795]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE796]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.iendswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE797]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE798]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE799]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE800]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.iendswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE801]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE802]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `ilike` operator, e.g. case insensitive LIKE.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces an expression either of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE803]'
  prefs: []
  type: TYPE_PRE
- en: 'Or on backends that support the ILIKE operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE804]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE805]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE806]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE807]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `in` operator.
  prefs: []
  type: TYPE_NORMAL
- en: In a column context, produces the clause `column IN <other>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The given parameter `other` may be:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of literal values, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE808]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the list of items is converted to a set of bound parameters
    the same length as the list given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE809]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A list of tuples may be provided if the comparison is against a [`tuple_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.tuple_
    "sqlalchemy.sql.expression.tuple_") containing multiple expressions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE810]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An empty list, e.g.:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE811]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders an “empty set” expression. These
    expressions are tailored to individual backends and are generally trying to get
    an empty SELECT statement as a subquery. Such as on SQLite, the expression is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE812]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Changed in version 1.4: empty IN expressions now use an execution-time generated
    SELECT subquery in all cases.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A bound parameter, e.g. [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam"), may be used if it includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE813]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, the expression renders a special non-SQL placeholder
    expression that looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE814]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This placeholder expression is intercepted at statement execution time to be
    converted into the variable number of bound parameter form illustrated earlier.
    If the statement were executed as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE815]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The database would be passed a bound parameter for each value:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE816]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.2: added “expanding” bound parameters'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If an empty list is passed, a special “empty list” expression, which is specific
    to the database in use, is rendered. On SQLite this would be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE817]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.3: “expanding” bound parameters now support empty lists'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, which is usually a correlated scalar
    select:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE818]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this calling form, [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") renders as given:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE819]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**other** – a list of literals, a [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, or a [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") construct that includes the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") flag set to True.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE820]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS` may be desirable if
    comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE821]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS DISTINCT FROM b” on most platforms; on some such as SQLite may
    render “a IS NOT b”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE822]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not
    "sqlalchemy.sql.expression.ColumnOperators.is_not") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE823]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.is_not_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.is_not_distinct_from") *method of*
    [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE824]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot
    "sqlalchemy.sql.expression.ColumnOperators.isnot") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, `IS NOT` is generated automatically when comparing to a value of `None`,
    which resolves to `NULL`. However, explicit usage of `IS NOT` may be desirable
    if comparing to boolean values on certain platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not()` operator is renamed from `isnot()` in
    previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.is_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.is_
    "sqlalchemy.sql.expression.ColumnOperators.is_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE825]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.isnot_distinct_from()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from
    "sqlalchemy.sql.expression.ColumnOperators.isnot_distinct_from") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `IS NOT DISTINCT FROM` operator.
  prefs: []
  type: TYPE_NORMAL
- en: Renders “a IS NOT DISTINCT FROM b” on most platforms; on some such as SQLite
    may render “a IS b”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `is_not_distinct_from()` operator is renamed from
    `isnot_distinct_from()` in previous releases. The previous name remains available
    for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE826]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.istartswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `istartswith` operator, e.g. case insensitive version of [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith").
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against an insensitive match for the
    start of a string value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE827]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE828]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.istartswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE829]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE830]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE831]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE832]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.istartswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE833]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE834]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `like` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a column context, produces the expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE835]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE836]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'optional escape character, renders the `ESCAPE` keyword, e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE837]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE838]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: The ‘local’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE839]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.match
    "sqlalchemy.sql.expression.ColumnOperators.match") attempts to resolve to a MATCH-like
    function or operator provided by the backend. Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x @@ plainto_tsquery(y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: `plainto_tsquery()` is used instead of `to_tsquery()`
    for PostgreSQL now; for compatibility with other forms, see [Full Text Search](../../dialects/postgresql.html#postgresql-match).'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: MySQL - renders `MATCH (x) AGAINST (y IN BOOLEAN MODE)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`match`](../../dialects/mysql.html#sqlalchemy.dialects.mysql.match "sqlalchemy.dialects.mysql.match")
    - MySQL specific construct with additional features.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Oracle - renders `CONTAINS(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “MATCH”.
    This is compatible with SQLite, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE840]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_ilike
    "sqlalchemy.sql.expression.ColumnOperators.not_ilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE841]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE842]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.not_like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_like
    "sqlalchemy.sql.expression.ColumnOperators.not_like") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE843]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notilike
    "sqlalchemy.sql.expression.ColumnOperators.notilike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT ILIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike"), i.e. `~x.ilike(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_ilike()` operator is renamed from `notilike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.ilike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.ilike
    "sqlalchemy.sql.expression.ColumnOperators.ilike")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE844]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notin_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notin_
    "sqlalchemy.sql.expression.ColumnOperators.notin_") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT IN` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_"), i.e. `~x.in_(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case that `other` is an empty sequence, the compiler produces an “empty
    not in” expression. This defaults to the expression “1 = 1” to produce true in
    all cases. The [`create_engine.empty_in_strategy`](../../core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy
    "sqlalchemy.create_engine") may be used to alter this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_in()` operator is renamed from `notin_()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.2: The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") operators now produce a “static”
    expression for an empty IN sequence by default.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE845]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.notlike()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.notlike
    "sqlalchemy.sql.expression.ColumnOperators.notlike") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: implement the `NOT LIKE` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to using negation with [`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like"), i.e. `~x.like(y)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `not_like()` operator is renamed from `notlike()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE846]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_first
    "sqlalchemy.sql.expression.ColumnOperators.nulls_first") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE847]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nulls_last
    "sqlalchemy.sql.expression.ColumnOperators.nulls_last") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE848]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullsfirst()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullsfirst
    "sqlalchemy.sql.expression.ColumnOperators.nullsfirst") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_first()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_first()` operator is renamed from `nullsfirst()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE849]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.nullslast()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.nullslast
    "sqlalchemy.sql.expression.ColumnOperators.nullslast") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a [`nulls_last()`](../../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") clause against the parent object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `nulls_last()` operator is renamed from `nullslast()`
    in previous releases. The previous name remains available for backwards compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE850]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Produce a generic operator function.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE851]'
  prefs: []
  type: TYPE_PRE
- en: 'produces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE852]'
  prefs: []
  type: TYPE_PRE
- en: 'This function can also be used to make bitwise operators explicit. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE853]'
  prefs: []
  type: TYPE_PRE
- en: is a bitwise AND of the value in `somecolumn`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`opstring` – a string which will be output as the infix operator between this
    element and the expression passed to the generated function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`precedence` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: precedence which the database is expected to apply to the operator in SQL expressions.
    This integer value acts as a hint for the SQL compiler to know when explicit parenthesis
    should be rendered around a particular operation. A lower number will cause the
    expression to be parenthesized when applied against another operator with higher
    precedence. The default value of `0` is lower than all operators except for the
    comma (`,`) and `AS` operators. A value of 100 will be higher or equal to all
    operators, and -100 will be lower than or equal to all operators.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[I’m using op() to generate a custom operator and my parenthesis are not coming
    out correctly](../../faq/sqlexpressions.html#faq-sql-expression-op-parenthesis)
    - detailed description of how the SQLAlchemy SQL compiler renders parenthesis'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`is_comparison` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: legacy; if True, the operator will be considered as a “comparison” operator,
    that is which evaluates to a boolean true/false value, like `==`, `>`, etc. This
    flag is provided so that ORM relationships can establish that the operator is
    a comparison operator when used in a custom join condition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using the `is_comparison` parameter is superseded by using the [`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") method instead; this more succinct
    operator sets this parameter automatically, but also provides correct [**PEP 484**](https://peps.python.org/pep-0484/)
    typing support as the returned object will express a “boolean” datatype, i.e.
    `BinaryExpression[bool]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_type` – a [`TypeEngine`](../../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") class or object that will force the return type
    of an expression produced by this operator to be of that type. By default, operators
    that specify [`Operators.op.is_comparison`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.is_comparison
    "sqlalchemy.sql.expression.Operators.op") will resolve to [`Boolean`](../../core/type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean"), and those that do not will be of the same type as
    the left-hand operand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python_impl` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an optional Python function that can evaluate two Python values in the same
    way as this operator works when run on the database server. Useful for in-Python
    SQL expression evaluation functions, such as for ORM hybrid attributes, and the
    ORM “evaluator” used to match objects in a session after a multi-row update or
    delete.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE854]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The operator for the above expression will also work for non-SQL left and right
    objects:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE855]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Operators.bool_op()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Redefining and Creating New Operators](../../core/custom_types.html#types-operators)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using custom operators in join conditions](../join_conditions.html#relationship-custom-operator)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE856]'
  prefs: []
  type: TYPE_PRE
- en: Operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: This is the lowest level of operation, raises `NotImplementedError` by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Overriding this on a subclass can allow common behavior to be applied to all
    operations. For example, overriding [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators") to apply `func.lower()` to the left
    and right side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE857]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`op` – Operator callable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*other` – the ‘other’ side of the operation. Will be a single scalar for most
    operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kwargs` – modifiers. These may be passed by special operators such as `ColumnOperators.contains()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE858]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp match’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE859]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") attempts to resolve
    to a REGEXP-like function or operator provided by the backend, however the specific
    regular expression syntax and flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: PostgreSQL - renders `x ~ y` or `x !~ y` when negated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle - renders `REGEXP_LIKE(x, y)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite - uses SQLite’s `REGEXP` placeholder operator and calls into the Python
    `re.match()` builtin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: other backends may provide special implementations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backends without any special implementation will emit the operator as “REGEXP”
    or “NOT REGEXP”. This is compatible with SQLite and MySQL, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Regular expression support is currently implemented for Oracle, PostgreSQL,
    MySQL and MariaDB. Partial support is available for SQLite. Support among third-party
    dialects may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern. When
    using the ignore case flag ‘i’ in PostgreSQL, the ignore case regexp match operator
    `~*` or `!~*` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE860]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a database-specific ‘regexp replace’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE861]'
  prefs: []
  type: TYPE_PRE
- en: '[`ColumnOperators.regexp_replace()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") attempts to resolve
    to a REGEXP_REPLACE-like function provided by the backend, that usually emit the
    function `REGEXP_REPLACE()`. However, the specific regular expression syntax and
    flags available are **not backend agnostic**.'
  prefs: []
  type: TYPE_NORMAL
- en: Regular expression replacement support is currently implemented for Oracle,
    PostgreSQL, MySQL 8 or greater and MariaDB. Support among third-party dialects
    may vary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` – The regular expression pattern string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pattern` – The replacement string or column clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flags` – Any regular expression string flags to apply, passed as plain Python
    string only. These flags are backend specific. Some backends, like PostgreSQL
    and MariaDB, may alternatively specify the flags as part of the pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.48,: 2.0.18 Note that due to an implementation error,
    the “flags” parameter previously accepted SQL expression objects such as column
    expressions in addition to plain Python strings. This implementation did not work
    correctly with caching and was removed; strings only should be passed for the
    “flags” parameter, as these flags are rendered as literal inline values within
    SQL expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.regexp_match()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE862]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.remote_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.remote_attr") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: The ‘remote’ class attribute referenced by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AssociationProxyInstance.local_attr`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.local_attr")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE863]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`Operators.reverse_operate()`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators.reverse_operate
    "sqlalchemy.sql.expression.Operators.reverse_operate") *method of* [`Operators`](../../core/sqlelement.html#sqlalchemy.sql.expression.Operators
    "sqlalchemy.sql.expression.Operators")'
  prefs: []
  type: TYPE_NORMAL
- en: Reverse operate on an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Usage is the same as [`operate()`](#sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate
    "sqlalchemy.ext.associationproxy.ColumnAssociationProxyInstance.operate").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE864]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`AssociationProxyInstance.scalar`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance.scalar") *attribute
    of* [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance")'
  prefs: []
  type: TYPE_NORMAL
- en: Return `True` if this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance") proxies a scalar relationship
    on the local side.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE865]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.startswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") *method of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `startswith` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Produces a LIKE expression that tests against a match for the start of a string
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE866]'
  prefs: []
  type: TYPE_PRE
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE867]'
  prefs: []
  type: TYPE_PRE
- en: Since the operator uses `LIKE`, wildcard characters `"%"` and `"_"` that are
    present inside the <other> expression will behave like wildcards as well. For
    literal string values, the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag may be set to `True`
    to apply escaping to occurrences of these characters within the string value so
    that they match as themselves and not as wildcard characters. Alternatively, the
    [`ColumnOperators.startswith.escape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") parameter will establish
    a given character as an escape character which can be of use when the target expression
    is not a literal string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`other` – expression to be compared. This is usually a plain string value,
    but can also be an arbitrary SQL expression. LIKE wildcard characters `%` and
    `_` are not escaped by default unless the [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith") flag is set to True.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoescape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: boolean; when True, establishes an escape character within the LIKE expression,
    then applies it to all occurrences of `"%"`, `"_"` and the escape character itself
    within the comparison value, which is assumed to be a literal string and not a
    SQL expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE868]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE869]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the value of `:param` as `"foo/%bar"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`escape` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a character which when given will render with the `ESCAPE` keyword to establish
    that character as the escape character. This character can then be placed preceding
    occurrences of `%` and `_` to allow them to act as themselves and not wildcard
    characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An expression such as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE870]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Will render as:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE871]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The parameter may also be combined with [`ColumnOperators.startswith.autoescape`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith.params.autoescape
    "sqlalchemy.sql.expression.ColumnOperators.startswith"):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE872]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Where above, the given literal parameter will be converted to `"foo^%bar^^bat"`
    before being passed to the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.endswith()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.endswith
    "sqlalchemy.sql.expression.ColumnOperators.endswith")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.contains()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ColumnOperators.like()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like
    "sqlalchemy.sql.expression.ColumnOperators.like")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE873]'
  prefs: []
  type: TYPE_PRE
- en: The intermediary class handled by this [`AssociationProxyInstance`](#sqlalchemy.ext.associationproxy.AssociationProxyInstance
    "sqlalchemy.ext.associationproxy.AssociationProxyInstance").
  prefs: []
  type: TYPE_NORMAL
- en: Intercepted append/set/assignment events will result in the generation of new
    instances of this class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE874]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* [`ColumnOperators.timetuple`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.timetuple
    "sqlalchemy.sql.expression.ColumnOperators.timetuple") *attribute of* [`ColumnOperators`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators
    "sqlalchemy.sql.expression.ColumnOperators")'
  prefs: []
  type: TYPE_NORMAL
- en: Hack, allows datetime objects to be compared on the LHS.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE875]'
  prefs: []
  type: TYPE_PRE
- en: An enumeration.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[ASSOCIATION_PROXY](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType.ASSOCIATION_PROXY)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.associationproxy.AssociationProxyExtensionType`](#sqlalchemy.ext.associationproxy.AssociationProxyExtensionType
    "sqlalchemy.ext.associationproxy.AssociationProxyExtensionType") ([`sqlalchemy.orm.base.InspectionAttrExtensionType`](../internals.html#sqlalchemy.orm.InspectionAttrExtensionType
    "sqlalchemy.orm.base.InspectionAttrExtensionType"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE876]'
  prefs: []
  type: TYPE_PRE
- en: Symbol indicating an [`InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.InspectionAttr") that’s of type [`AssociationProxy`](#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy").
  prefs: []
  type: TYPE_NORMAL
- en: Is assigned to the [`InspectionAttr.extension_type`](../internals.html#sqlalchemy.orm.InspectionAttr.extension_type
    "sqlalchemy.orm.InspectionAttr.extension_type") attribute.
  prefs: []
  type: TYPE_NORMAL
