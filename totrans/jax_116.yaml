- en: jax.random module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jax.random 模块
- en: 原文：[`jax.readthedocs.io/en/latest/jax.random.html`](https://jax.readthedocs.io/en/latest/jax.random.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jax.random.html`](https://jax.readthedocs.io/en/latest/jax.random.html)
- en: Utilities for pseudo-random number generation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 伪随机数生成的实用程序。
- en: The `jax.random` package provides a number of routines for deterministic generation
    of sequences of pseudorandom numbers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`jax.random` 包提供了多种例程，用于确定性生成伪随机数序列。'
- en: Basic usage
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本用法
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: PRNG keys
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PRNG keys
- en: 'Unlike the *stateful* pseudorandom number generators (PRNGs) that users of
    NumPy and SciPy may be accustomed to, JAX random functions all require an explicit
    PRNG state to be passed as a first argument. The random state is described by
    a special array element type that we call a **key**, usually generated by the
    `jax.random.key()` function:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 与 NumPy 和 SciPy 用户习惯的 *有状态* 伪随机数生成器（PRNGs）不同，JAX 随机函数都要求作为第一个参数传递一个显式的 PRNG
    状态。随机状态由我们称之为 **key** 的特殊数组元素类型描述，通常由 `jax.random.key()` 函数生成：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This key can then be used in any of JAX’s random number generation routines:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以在 JAX 的任何随机数生成例程中使用该 key：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note that using a key does not modify it, so reusing the same key will lead
    to the same result:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，使用 key 不会修改它，因此重复使用相同的 key 将导致相同的结果：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you need a new random number, you can use `jax.random.split()` to generate
    new subkeys:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要新的随机数，可以使用 `jax.random.split()` 生成新的子 key：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Typed key arrays, with element types such as `key<fry>` above, were introduced
    in JAX v0.4.16\. Before then, keys were conventionally represented in `uint32`
    arrays, whose final dimension represented the key’s bit-level representation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 类型化的 key 数组，例如上述 `key<fry>`，在 JAX v0.4.16 中引入。在此之前，key 通常以 `uint32` 数组表示，其最终维度表示
    key 的位级表示。
- en: Both forms of key array can still be created and used with the `jax.random`
    module. New-style typed key arrays are made with `jax.random.key()`. Legacy `uint32`
    key arrays are made with `jax.random.PRNGKey()`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 两种形式的 key 数组仍然可以通过 `jax.random` 模块创建和使用。新式的类型化 key 数组使用 `jax.random.key()` 创建。传统的
    `uint32` key 数组使用 `jax.random.PRNGKey()` 创建。
- en: To convert between the two, use `jax.random.key_data()` and `jax.random.wrap_key_data()`.
    The legacy key format may be needed when interfacing with systems outside of JAX
    (e.g. exporting arrays to a serializable format), or when passing keys to JAX-based
    libraries that assume the legacy format.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要在两者之间进行转换，使用 `jax.random.key_data()` 和 `jax.random.wrap_key_data()`。当与 JAX
    外部系统（例如将数组导出为可序列化格式）交互或将 key 传递给基于 JAX 的库时，可能需要传统的 key 格式。
- en: 'Otherwise, typed keys are recommended. Caveats of legacy keys relative to typed
    ones include:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，建议使用类型化的 key。传统 key 相对于类型化 key 的注意事项包括：
- en: They have an extra trailing dimension.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们有一个额外的尾维度。
- en: They have a numeric dtype (`uint32`), allowing for operations that are typically
    not meant to be carried out over keys, such as integer arithmetic.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们具有数字数据类型 (`uint32`)，允许进行通常不用于 key 的操作，例如整数算术。
- en: They do not carry information about the RNG implementation. When legacy keys
    are passed to `jax.random` functions, a global configuration setting determines
    the RNG implementation (see “Advanced RNG configuration” below).
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们不包含有关 RNG 实现的信息。当传统 key 传递给 `jax.random` 函数时，全局配置设置确定 RNG 实现（参见下文的“高级 RNG
    配置”）。
- en: To learn more about this upgrade, and the design of key types, see [JEP 9263](https://jax.readthedocs.io/en/latest/jep/9263-typed-keys.html).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于此升级以及 key 类型设计的信息，请参阅 [JEP 9263](https://jax.readthedocs.io/en/latest/jep/9263-typed-keys.html)。
- en: Advanced
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级
- en: Design and background
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设计和背景
- en: '**TLDR**: JAX PRNG = [Threefry counter PRNG](http://www.thesalmons.org/john/random123/papers/random123sc11.pdf)
    + a functional array-oriented [splitting model](https://dl.acm.org/citation.cfm?id=2503784)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**TLDR**：JAX PRNG = [Threefry counter PRNG](http://www.thesalmons.org/john/random123/papers/random123sc11.pdf)
    + 一个功能数组导向的 [分裂模型](https://dl.acm.org/citation.cfm?id=2503784)'
- en: See [docs/jep/263-prng.md](https://github.com/google/jax/blob/main/docs/jep/263-prng.md)
    for more details.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息，请参阅 [docs/jep/263-prng.md](https://github.com/google/jax/blob/main/docs/jep/263-prng.md)。
- en: 'To summarize, among other requirements, the JAX PRNG aims to:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，JAX PRNG 还包括但不限于以下要求：
- en: ensure reproducibility,
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保可重现性，
- en: parallelize well, both in terms of vectorization (generating array values) and
    multi-replica, multi-core computation. In particular it should not use sequencing
    constraints between random function calls.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 良好的并行化，无论是向量化（生成数组值）还是多副本、多核计算。特别是它不应在随机函数调用之间使用顺序约束。
- en: Advanced RNG configuration
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高级 RNG 配置
- en: JAX provides several PRNG implementations. A specific one can be selected with
    the optional impl keyword argument to jax.random.key. When no impl option is passed
    to the key constructor, the implementation is determined by the global jax_default_prng_impl
    configuration flag.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 提供了几种 PRNG 实现。可以通过可选的 impl 关键字参数选择特定的实现。如果在密钥构造函数中没有传递 impl 选项，则实现由全局 jax_default_prng_impl
    配置标志确定。
- en: '**default**, “threefry2x32”: [A counter-based PRNG built around the Threefry
    hash function](http://www.thesalmons.org/john/random123/papers/random123sc11.pdf).'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认**，“threefry2x32”: [基于 Threefry 哈希函数构建的基于计数器的 PRNG](http://www.thesalmons.org/john/random123/papers/random123sc11.pdf)。'
- en: '*experimental* A PRNG that thinly wraps the XLA Random Bit Generator (RBG)
    algorithm. See [TF doc](https://www.tensorflow.org/xla/operation_semantics#rngbitgenerator).'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实验性* 一种仅包装了 XLA 随机位生成器（RBG）算法的 PRNG。请参阅 [TF 文档](https://www.tensorflow.org/xla/operation_semantics#rngbitgenerator)。'
- en: “rbg” uses ThreeFry for splitting, and XLA RBG for data generation.
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “rbg” 使用 ThreeFry 进行分割，并使用 XLA RBG 进行数据生成。
- en: “unsafe_rbg” exists only for demonstration purposes, using RBG both for splitting
    (using an untested made up algorithm) and generating.
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “unsafe_rbg” 仅用于演示目的，使用 RBG 进行分割（使用未经测试的虚构算法）和生成。
- en: The random streams generated by these experimental implementations haven’t been
    subject to any empirical randomness testing (e.g. Big Crush). The random bits
    generated may change between JAX versions.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些实验性实现生成的随机流尚未经过任何经验随机性测试（例如 Big Crush）。生成的随机比特可能会在 JAX 的不同版本之间变化。
- en: 'The possible reasons not use the default RNG are:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用默认 RNG 的可能原因是：
- en: it may be slow to compile (specifically for Google Cloud TPUs)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可能编译速度较慢（特别是对于 Google Cloud TPU）
- en: it’s slower to execute on TPUs
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 TPU 上执行速度较慢
- en: it doesn’t support efficient automatic sharding / partitioning
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不支持高效的自动分片/分区
- en: 'Here is a short summary:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个简短的总结：
- en: '| Property | Threefry | Threefry* | rbg | unsafe_rbg | rbg** | unsafe_rbg**
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | Threefry | Threefry* | rbg | unsafe_rbg | rbg** | unsafe_rbg** |'
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- | --- | --- |'
- en: '| Fastest on TPU |  |  | ✅ | ✅ | ✅ | ✅ |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 在 TPU 上最快 |  |  | ✅ | ✅ | ✅ | ✅ |'
- en: '| efficiently shardable (w/ pjit) |  | ✅ |  |  | ✅ | ✅ |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 可以高效分片（使用 pjit） |  | ✅ |  |  | ✅ | ✅ |'
- en: '| identical across shardings | ✅ | ✅ | ✅ | ✅ |  |  |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 在分片中相同 | ✅ | ✅ | ✅ | ✅ |  |  |'
- en: '| identical across CPU/GPU/TPU | ✅ | ✅ |  |  |  |  |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 在 CPU/GPU/TPU 上相同 | ✅ | ✅ |  |  |  |  |'
- en: '| identical across JAX/XLA versions | ✅ | ✅ |  |  |  |  |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 在 JAX/XLA 版本间相同 | ✅ | ✅ |  |  |  |  |'
- en: '(*): with `jax_threefry_partitionable=1` set'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '(*): 设置了`jax_threefry_partitionable=1`'
- en: '(**): with `XLA_FLAGS=--xla_tpu_spmd_rng_bit_generator_unsafe=1` set'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '(**): 设置了`XLA_FLAGS=--xla_tpu_spmd_rng_bit_generator_unsafe=1`'
- en: The difference between “rbg” and “unsafe_rbg” is that while “rbg” uses a less
    robust/studied hash function for random value generation (but not for jax.random.split
    or jax.random.fold_in), “unsafe_rbg” additionally uses less robust hash functions
    for jax.random.split and jax.random.fold_in. Therefore less safe in the sense
    that the quality of random streams it generates from different keys is less well
    understood.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: “rbg” 和 “unsafe_rbg” 之间的区别在于，“rbg” 用于生成随机值时使用了较不稳定/研究较少的哈希函数（但不用于 jax.random.split
    或 jax.random.fold_in），而 “unsafe_rbg” 还额外在 jax.random.split 和 jax.random.fold_in
    中使用了更不稳定的哈希函数。因此，在不同密钥生成的随机流质量方面不那么安全。
- en: For more about jax_threefry_partitionable, see [`jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html#generating-random-numbers`](https://jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html#generating-random-numbers)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关 jax_threefry_partitionable 的更多信息，请参阅[`jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html#generating-random-numbers`](https://jax.readthedocs.io/en/latest/notebooks/Distributed_arrays_and_automatic_parallelization.html#generating-random-numbers)
- en: API Reference
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 参考
- en: Key Creation & Manipulation
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 密钥创建与操作
- en: '| `PRNGKey`(seed, *[, impl]) | Create a pseudo-random number generator (PRNG)
    key given an integer seed. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `PRNGKey`(seed, *[, impl]) | 给定整数种子创建伪随机数生成器（PRNG）密钥。 |'
- en: '| `key`(seed, *[, impl]) | Create a pseudo-random number generator (PRNG) key
    given an integer seed. |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `key`(seed, *[, impl]) | 给定整数种子创建伪随机数生成器（PRNG）密钥。 |'
- en: '| `key_data`(keys) | Recover the bits of key data underlying a PRNG key array.
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `key_data`（密钥） | 恢复 PRNG 密钥数组下的密钥数据位。 |'
- en: '| `wrap_key_data`(key_bits_array, *[, impl]) | Wrap an array of key data bits
    into a PRNG key array. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `wrap_key_data`(key_bits_array, *[, impl]) | 将密钥数据位数组包装成 PRNG 密钥数组。 |'
- en: '| `fold_in`(key, data) | Folds in data to a PRNG key to form a new PRNG key.
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `fold_in`(key, data) | 将数据折叠到 PRNG 密钥中，形成新的 PRNG 密钥。 |'
- en: '| `split`(key[, num]) | Splits a PRNG key into num new keys by adding a leading
    axis. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `split`(key[, num]) | 将 PRNG 密钥按添加一个前导轴拆分为 num 个新密钥。 |'
- en: '| `clone`(key) | Clone a key for reuse |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `clone`(key) | 克隆一个密钥以便重复使用。 |'
- en: Random Samplers
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 随机抽样器
- en: '| `ball`(key, d[, p, shape, dtype]) | Sample uniformly from the unit Lp ball.
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `ball`(key, d[, p, shape, dtype]) | 从单位 Lp 球中均匀采样。 |'
- en: '| `bernoulli`(key[, p, shape]) | Sample Bernoulli random values with given
    shape and mean. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `bernoulli`(key[, p, shape]) | 采样给定形状和均值的伯努利分布随机值。 |'
- en: '| `beta`(key, a, b[, shape, dtype]) | Sample Beta random values with given
    shape and float dtype. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `beta`(key, a, b[, shape, dtype]) | 采样给定形状和浮点数数据类型的贝塔分布随机值。 |'
- en: '| `binomial`(key, n, p[, shape, dtype]) | Sample Binomial random values with
    given shape and float dtype. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `binomial`(key, n, p[, shape, dtype]) | 采样给定形状和浮点数数据类型的二项分布随机值。 |'
- en: '| `bits`(key[, shape, dtype]) | Sample uniform bits in the form of unsigned
    integers. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `bits`(key[, shape, dtype]) | 以无符号整数的形式采样均匀比特。 |'
- en: '| `categorical`(key, logits[, axis, shape]) | Sample random values from categorical
    distributions. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `categorical`(key, logits[, axis, shape]) | 从分类分布中采样随机值。 |'
- en: '| `cauchy`(key[, shape, dtype]) | Sample Cauchy random values with given shape
    and float dtype. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `cauchy`(key[, shape, dtype]) | 采样给定形状和浮点数数据类型的柯西分布随机值。 |'
- en: '| `chisquare`(key, df[, shape, dtype]) | Sample Chisquare random values with
    given shape and float dtype. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `chisquare`(key, df[, shape, dtype]) | 采样给定形状和浮点数数据类型的卡方分布随机值。 |'
- en: '| `choice`(key, a[, shape, replace, p, axis]) | Generates a random sample from
    a given array. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `choice`(key, a[, shape, replace, p, axis]) | 从给定数组中生成随机样本。 |'
- en: '| `dirichlet`(key, alpha[, shape, dtype]) | Sample Dirichlet random values
    with given shape and float dtype. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `dirichlet`(key, alpha[, shape, dtype]) | 采样给定形状和浮点数数据类型的狄利克雷分布随机值。 |'
- en: '| `double_sided_maxwell`(key, loc, scale[, ...]) | Sample from a double sided
    Maxwell distribution. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `double_sided_maxwell`(key, loc, scale[, ...]) | 从双边 Maxwell 分布中采样。 |'
- en: '| `exponential`(key[, shape, dtype]) | Sample Exponential random values with
    given shape and float dtype. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `exponential`(key[, shape, dtype]) | 采样给定形状和浮点数数据类型的指数分布随机值。 |'
- en: '| `f`(key, dfnum, dfden[, shape, dtype]) | Sample F-distribution random values
    with given shape and float dtype. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `f`(key, dfnum, dfden[, shape, dtype]) | 采样给定形状和浮点数数据类型的 F 分布随机值。 |'
- en: '| `gamma`(key, a[, shape, dtype]) | Sample Gamma random values with given shape
    and float dtype. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `gamma`(key, a[, shape, dtype]) | 采样给定形状和浮点数数据类型的伽马分布随机值。 |'
- en: '| `generalized_normal`(key, p[, shape, dtype]) | Sample from the generalized
    normal distribution. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `generalized_normal`(key, p[, shape, dtype]) | 从广义正态分布中采样。 |'
- en: '| `geometric`(key, p[, shape, dtype]) | Sample Geometric random values with
    given shape and float dtype. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `geometric`(key, p[, shape, dtype]) | 采样给定形状和浮点数数据类型的几何分布随机值。'
- en: '| `gumbel`(key[, shape, dtype]) | Sample Gumbel random values with given shape
    and float dtype. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `gumbel`(key[, shape, dtype]) | 采样给定形状和浮点数数据类型的 Gumbel 分布随机值。 |'
- en: '| `laplace`(key[, shape, dtype]) | Sample Laplace random values with given
    shape and float dtype. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `laplace`(key[, shape, dtype]) | 采样给定形状和浮点数数据类型的拉普拉斯分布随机值。 |'
- en: '| `loggamma`(key, a[, shape, dtype]) | Sample log-gamma random values with
    given shape and float dtype. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `loggamma`(key, a[, shape, dtype]) | 采样给定形状和浮点数数据类型的对数伽马分布随机值。 |'
- en: '| `logistic`(key[, shape, dtype]) | Sample logistic random values with given
    shape and float dtype. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `logistic`(key[, shape, dtype]) | 采样给定形状和浮点数数据类型的 logistic 随机值。 |'
- en: '| `lognormal`(key[, sigma, shape, dtype]) | Sample lognormal random values
    with given shape and float dtype. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `lognormal`(key[, sigma, shape, dtype]) | 采样给定形状和浮点数数据类型的对数正态分布随机值。 |'
- en: '| `maxwell`(key[, shape, dtype]) | Sample from a one sided Maxwell distribution.
    |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `maxwell`(key[, shape, dtype]) | 从单边 Maxwell 分布中采样。 |'
- en: '| `multivariate_normal`(key, mean, cov[, shape, ...]) | Sample multivariate
    normal random values with given mean and covariance. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `multivariate_normal`(key, mean, cov[, shape, ...]) | 采样给定均值和协方差的多变量正态分布随机值。
    |'
- en: '| `normal`(key[, shape, dtype]) | Sample standard normal random values with
    given shape and float dtype. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `normal`(key[, shape, dtype]) | 采样给定形状和浮点数数据类型的标准正态分布随机值。 |'
- en: '| `orthogonal`(key, n[, shape, dtype]) | Sample uniformly from the orthogonal
    group O(n). |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `orthogonal`(key, n[, shape, dtype]) | 从正交群 O(n) 中均匀采样。 |'
- en: '| `pareto`(key, b[, shape, dtype]) | Sample Pareto random values with given
    shape and float dtype. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `pareto`(key, b[, shape, dtype]) | 采样给定形状和浮点数数据类型的帕累托分布随机值。 |'
- en: '| `permutation`(key, x[, axis, independent]) | Returns a randomly permuted
    array or range. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `permutation`(key, x[, axis, independent]) | 返回随机排列的数组或范围。 |'
- en: '| `poisson`(key, lam[, shape, dtype]) | Sample Poisson random values with given
    shape and integer dtype. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `poisson`(key, lam[, shape, dtype]) | 采样给定形状和整数数据类型的泊松分布随机值。 |'
- en: '| `rademacher`(key[, shape, dtype]) | Sample from a Rademacher distribution.
    |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `rademacher`(key[, shape, dtype]) | 从Rademacher分布中采样。 |'
- en: '| `randint`(key, shape, minval, maxval[, dtype]) | Sample uniform random values
    in minval, maxval) with given shape/dtype. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `randint`(key, shape, minval, maxval[, dtype]) | 用给定的形状和数据类型在[minval, maxval)范围内示例均匀随机整数值。
    |'
- en: '| [`rayleigh`(key, scale[, shape, dtype]) | Sample Rayleigh random values with
    given shape and float dtype. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [`rayleigh`(key, scale[, shape, dtype]) | 用给定的形状和浮点数数据类型示例瑞利随机值。 |'
- en: '| `t`(key, df[, shape, dtype]) | Sample Student''s t random values with given
    shape and float dtype. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `t`(key, df[, shape, dtype]) | 用给定的形状和浮点数数据类型示例学生t分布随机值。 |'
- en: '| `triangular`(key, left, mode, right[, shape, ...]) | Sample Triangular random
    values with given shape and float dtype. |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `triangular`(key, left, mode, right[, shape, ...]) | 用给定的形状和浮点数数据类型示例三角形随机值。
    |'
- en: '| `truncated_normal`(key, lower, upper[, shape, ...]) | Sample truncated standard
    normal random values with given shape and dtype. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `truncated_normal`(key, lower, upper[, shape, ...]) | 用给定的形状和数据类型示例截断标准正态随机值。
    |'
- en: '| `uniform`(key[, shape, dtype, minval, maxval]) | Sample uniform random values
    in minval, maxval) with given shape/dtype. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `uniform`(key[, shape, dtype, minval, maxval]) | 用给定的形状和数据类型在[minval, maxval)范围内示例均匀随机值。
    |'
- en: '| [`wald`(key, mean[, shape, dtype]) | Sample Wald random values with given
    shape and float dtype. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| [`wald`(key, mean[, shape, dtype]) | 用给定的形状和浮点数数据类型示例瓦尔德随机值。 |'
- en: '| `weibull_min`(key, scale, concentration[, ...]) | Sample from a Weibull distribution.
    |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `weibull_min`(key, scale, concentration[, ...]) | 从威布尔分布中采样。 |'
