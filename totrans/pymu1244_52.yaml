- en: Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/functions.html](https://pymupdf.readthedocs.io/en/latest/functions.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The following are miscellaneous functions and attributes on a fairly low-level
    technical detail.
  prefs: []
  type: TYPE_NORMAL
- en: Some functions provide detail access to PDF structures. Others are stripped-down,
    high performance versions of other functions which provide more information.
  prefs: []
  type: TYPE_NORMAL
- en: Yet others are handy, general-purpose utilities.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Function** | **Short Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Annot.apn_bbox` | PDF only: bbox of the appearance object |'
  prefs: []
  type: TYPE_TB
- en: '| `Annot.apn_matrix` | PDF only: the matrix of the appearance object |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.is_wrapped`](#Page.is_wrapped "Page.is_wrapped") | check whether contents
    wrapping is present |'
  prefs: []
  type: TYPE_TB
- en: '| [`adobe_glyph_names()`](#adobe_glyph_names "adobe_glyph_names") | list of
    glyph names defined in **Adobe Glyph List** |'
  prefs: []
  type: TYPE_TB
- en: '| [`adobe_glyph_unicodes()`](#adobe_glyph_unicodes "adobe_glyph_unicodes")
    | list of unicodes defined in **Adobe Glyph List** |'
  prefs: []
  type: TYPE_TB
- en: '| [`Annot.clean_contents()`](#Annot.clean_contents "Annot.clean_contents")
    | PDF only: clean the annot’s [`contents`](glossary.html#contents "contents")
    object |'
  prefs: []
  type: TYPE_TB
- en: '| `Annot.set_apn_bbox()` | PDF only: set the bbox of the appearance object
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Annot.set_apn_matrix()` | PDF only: set the matrix of the appearance object
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`ConversionHeader()`](#ConversionHeader "ConversionHeader") | return header
    string for *get_text* methods |'
  prefs: []
  type: TYPE_TB
- en: '| [`ConversionTrailer()`](#ConversionTrailer "ConversionTrailer") | return
    trailer string for *get_text* methods |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.del_xml_metadata()`](#Document.del_xml_metadata "Document.del_xml_metadata")
    | PDF only: remove XML metadata |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.get_char_widths()`](#Document.get_char_widths "Document.get_char_widths")
    | PDF only: return a list of glyph widths of a font |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.get_new_xref()`](#Document.get_new_xref "Document.get_new_xref")
    | PDF only: create and return a new [`xref`](glossary.html#xref "xref") entry
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.is_stream()`](#Document.is_stream "Document.is_stream") | PDF
    only: check whether an [`xref`](glossary.html#xref "xref") is a stream object
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.xml_metadata_xref()`](#Document.xml_metadata_xref "Document.xml_metadata_xref")
    | PDF only: return XML metadata [`xref`](glossary.html#xref "xref") number |'
  prefs: []
  type: TYPE_TB
- en: '| [`Document.xref_length()`](#Document.xref_length "Document.xref_length")
    | PDF only: return length of [`xref`](glossary.html#xref "xref") table |'
  prefs: []
  type: TYPE_TB
- en: '| [`EMPTY_IRECT()`](#EMPTY_IRECT "EMPTY_IRECT") | return the (standard) empty
    / invalid rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`EMPTY_QUAD()`](#EMPTY_QUAD "EMPTY_QUAD") | return the (standard) empty
    / invalid quad |'
  prefs: []
  type: TYPE_TB
- en: '| [`EMPTY_RECT()`](#EMPTY_RECT "EMPTY_RECT") | return the (standard) empty
    / invalid rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_pdf_now()`](#get_pdf_now "get_pdf_now") | return the current timestamp
    in PDF format |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_pdf_str()`](#get_pdf_str "get_pdf_str") | return PDF-compatible string
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_text_length()`](#get_text_length "get_text_length") | return string
    length for a given font & [`fontsize`](glossary.html#fontsize "fontsize") |'
  prefs: []
  type: TYPE_TB
- en: '| [`glyph_name_to_unicode()`](#glyph_name_to_unicode "glyph_name_to_unicode")
    | return unicode from a glyph name |'
  prefs: []
  type: TYPE_TB
- en: '| [`image_profile()`](#image_profile "image_profile") | return a dictionary
    of basic image properties |'
  prefs: []
  type: TYPE_TB
- en: '| [`INFINITE_IRECT()`](#INFINITE_IRECT "INFINITE_IRECT") | return the (only
    existing) infinite rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`INFINITE_QUAD()`](#INFINITE_QUAD "INFINITE_QUAD") | return the (only existing)
    infinite quad |'
  prefs: []
  type: TYPE_TB
- en: '| [`INFINITE_RECT()`](#INFINITE_RECT "INFINITE_RECT") | return the (only existing)
    infinite rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`make_table()`](#make_table "make_table") | split rectangle in sub-rectangles
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.clean_contents()`](#Page.clean_contents "Page.clean_contents") | PDF
    only: clean the page’s [`contents`](glossary.html#contents "contents") objects
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_bboxlog()`](#Page.get_bboxlog "Page.get_bboxlog") | list of rectangles
    that envelop text, drawing or image objects |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_contents()`](#Page.get_contents "Page.get_contents") | PDF only:
    return a list of content [`xref`](glossary.html#xref "xref") numbers |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_displaylist()`](#Page.get_displaylist "Page.get_displaylist")
    | create the page’s display list |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_text_blocks()`](#Page.get_text_blocks "Page.get_text_blocks")
    | extract text blocks as a Python list |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_text_words()`](#Page.get_text_words "Page.get_text_words") | extract
    text words as a Python list |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.get_texttrace()`](#Page.get_texttrace "Page.get_texttrace") | low-level
    text information |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.read_contents()`](#Page.read_contents "Page.read_contents") | PDF
    only: get complete, concatenated /Contents source |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.run()`](#Page.run "Page.run") | run a page through a device |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.set_contents()`](#Page.set_contents "Page.set_contents") | PDF only:
    set page’s [`contents`](glossary.html#contents "contents") to some [`xref`](glossary.html#xref
    "xref") |'
  prefs: []
  type: TYPE_TB
- en: '| [`Page.wrap_contents()`](#Page.wrap_contents "Page.wrap_contents") | wrap
    contents with stacking commands |'
  prefs: []
  type: TYPE_TB
- en: '| [`css_for_pymupdf_font()`](#css_for_pymupdf_font "css_for_pymupdf_font")
    | create CSS source for a font in package pymupdf_fonts |'
  prefs: []
  type: TYPE_TB
- en: '| [`paper_rect()`](#paper_rect "paper_rect") | return rectangle for a known
    paper format |'
  prefs: []
  type: TYPE_TB
- en: '| [`paper_size()`](#paper_size "paper_size") | return width, height for a known
    paper format |'
  prefs: []
  type: TYPE_TB
- en: '| [`paper_sizes()`](#paper_sizes "paper_sizes") | dictionary of pre-defined
    paper formats |'
  prefs: []
  type: TYPE_TB
- en: '| [`planish_line()`](#planish_line "planish_line") | matrix to map a line to
    the x-axis |'
  prefs: []
  type: TYPE_TB
- en: '| [`recover_char_quad()`](#recover_char_quad "recover_char_quad") | compute
    the quad of a char (“rawdict”) |'
  prefs: []
  type: TYPE_TB
- en: '| [`recover_line_quad()`](#recover_line_quad "recover_line_quad") | compute
    the quad of a subset of line spans |'
  prefs: []
  type: TYPE_TB
- en: '| [`recover_quad()`](#recover_quad "recover_quad") | compute the quad of a
    span (“dict”, “rawdict”) |'
  prefs: []
  type: TYPE_TB
- en: '| [`recover_span_quad()`](#recover_span_quad "recover_span_quad") | compute
    the quad of a subset of span characters |'
  prefs: []
  type: TYPE_TB
- en: '| [`sRGB_to_pdf()`](#sRGB_to_pdf "sRGB_to_pdf") | return PDF RGB color tuple
    from an sRGB integer |'
  prefs: []
  type: TYPE_TB
- en: '| [`sRGB_to_rgb()`](#sRGB_to_rgb "sRGB_to_rgb") | return (R, G, B) color tuple
    from an sRGB integer |'
  prefs: []
  type: TYPE_TB
- en: '| [`unicode_to_glyph_name()`](#unicode_to_glyph_name "unicode_to_glyph_name")
    | return glyph name from a unicode |'
  prefs: []
  type: TYPE_TB
- en: '| [`get_tessdata()`](#get_tessdata "get_tessdata") | locates the language support
    of the Tesseract-OCR installation |'
  prefs: []
  type: TYPE_TB
- en: '| [`fitz_fontdescriptors`](#fitz_fontdescriptors "fitz_fontdescriptors") |
    dictionary of available supplement fonts |'
  prefs: []
  type: TYPE_TB
- en: '| [`TESSDATA_PREFIX`](#TESSDATA_PREFIX "TESSDATA_PREFIX") | a copy of `os.environ["TESSDATA_PREFIX"]`
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`pdfcolor`](#pdfcolor "pdfcolor") | dictionary of almost 500 RGB colors
    in PDF format. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Convenience function to return width and height of a known paper format code.
    These values are given in pixels for the standard resolution 72 pixels = 1 inch.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Currently defined formats include **‘A0’** through **‘A10’**, **‘B0’** through
    **‘B10’**, **‘C0’** through **‘C10’**, **‘Card-4x6’**, **‘Card-5x7’**, **‘Commercial’**,
    **‘Executive’**, **‘Invoice’**, **‘Ledger’**, **‘Legal’**, **‘Legal-13’**, **‘Letter’**,
    **‘Monarch’** and **‘Tabloid-Extra’**, each in either portrait or landscape format.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A format name must be supplied as a string (case **in** sensitive), optionally
    suffixed with “-L” (landscape) or “-P” (portrait). No suffix defaults to portrait.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**s** (*str*) – any format name from above in upper or lower case, like *“A4”*
    or *“letter-l”*.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: tuple
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*(width, height)* of the paper format. For an unknown format *(-1, -1)* is
    returned. Examples: *pymupdf.paper_size(“A4”)* returns *(595, 842)* and *pymupdf.paper_size(“letter-l”)*
    delivers *(792, 612)*.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Convenience function to return a [Rect](rect.html#rect) for a known paper format.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**s** (*str*) – any format name supported by [`paper_size()`](#paper_size "paper_size").'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*pymupdf.Rect(0, 0, width, height)* with *width, height=pymupdf.paper_size(s)*.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*New in v1.17.4*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Convenience function returning a PDF color triple (red, green, blue) for a given
    sRGB color integer as it occurs in [`Page.get_text()`](page.html#Page.get_text
    "Page.get_text") dictionaries “dict” and “rawdict”.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**srgb** (*int*) – an integer of format RRGGBB, where each color component
    is an integer in range(255).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a tuple (red, green, blue) with float items in interval *0 <= item <= 1* representing
    the same color. Example `sRGB_to_pdf(0xff0000) = (1, 0, 0)` (red).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*New in v1.17.4*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Convenience function returning a color (red, green, blue) for a given *sRGB*
    color integer.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**srgb** (*int*) – an integer of format RRGGBB, where each color component
    is an integer in range(255).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a tuple (red, green, blue) with integer items in `range(256)` representing the
    same color. Example `sRGB_to_pdf(0xff0000) = (255, 0, 0)` (red).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*New in v1.18.0*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Return the unicode number of a glyph name based on the **Adobe Glyph List**.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**name** (*str*) – the name of some glyph. The function is based on the [Adobe
    Glyph List](https://github.com/adobe-type-tools/agl-aglfn/blob/master/glyphlist.txt).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: int
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the unicode. Invalid *name* entries return `0xfffd (65533)`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A similar functionality is provided by package [fontTools](https://pypi.org/project/fonttools/)
    in its *agl* sub-package.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*New in v1.18.0*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Return the glyph name of a unicode number, based on the **Adobe Glyph List**.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**ch** (*int*) –'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the unicode given by e.g. `ord("ß")`. The function is based on the [Adobe Glyph
    List](https://github.com/adobe-type-tools/agl-aglfn/blob/master/glyphlist.txt).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: str
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the glyph name. E.g. `pymupdf.unicode_to_glyph_name(ord("Ä"))` returns `'Adieresis'`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A similar functionality is provided by package [fontTools](https://pypi.org/project/fonttools/):
    in its *agl* sub-package.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*New in v1.18.0*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Return a list of glyph names defined in the **Adobe Glyph List**.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: list
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: list of strings.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A similar functionality is provided by package [fontTools](https://pypi.org/project/fonttools/)
    in its *agl* sub-package.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*New in v1.18.0*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Return a list of unicodes for there exists a glyph name in the **Adobe Glyph
    List**.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: list
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: list of integers.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A similar functionality is provided by package [fontTools](https://pypi.org/project/fonttools/)
    in its *agl* sub-package.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*New in v1.21.0*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Utility function for use with “Story” applications.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Create CSS `@font-face` items for the given fontcode in pymupdf-fonts. Creates
    a CSS font-family for all fonts starting with string “fontcode”.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The font naming convention in package pymupdf-fonts is “fontcode<sf>”, where
    the suffix “sf” is one of “” (empty), “it”/”i”, “bo”/”b” or “bi”. These suffixes
    thus represent the regular, italic, bold or bold-italic variants of that font.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For example, font code “notos” refers to fonts
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “notos” - “Noto Sans Regular”
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: “notosit” - “Noto Sans Italic”
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: “notosbo” - “Noto Sans Bold”
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: “notosbi” - “Noto Sans Bold Italic”
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The function creates (up to) four CSS `@font-face` definitions and collectively
    assigns the `font-family` name “notos” to them (or the “name” value if provided).
    Associated font buffers are placed / added to the provided archive.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To use the font in the Python API for [Story](story-class.html#story), execute
    `.set_font(fontcode)` (or “name” if given). The correct font weight or style will
    automatically be selected as required.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For example to replace the “sans-serif” HTML standard (i.e. Helvetica) with
    the above “notos”, execute the following. Whenever “sans-serif” is used (whether
    explicitly or implicitly), the Noto Sans fonts will be selected.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`CSS = pymupdf.css_for_pymupdf_font("notos", name="sans-serif", archive=...)`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Expects and returns the CSS source, with the new CSS definitions appended.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**fontcode** (*str*) – one of the font codes present in package [pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/)
    (usually) representing the regular version of the font family.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**CSS** (*str*) – any already existing CSS source, or `None`. The function
    will append its new definitions to this. This is the string that **must be used**
    as `user_css` when creating the [Story](story-class.html#story).'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**archive** – [Archive](archive-class.html#archive), **mandatory**. All font
    binaries (i.e. up to four) found for “fontcode” will be added to the archive.
    This is the archive that **must be used** as [Archive](archive-class.html#archive)
    when creating the [Story](story-class.html#story).'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**name** (*str*) – the name under which the “fontcode” fonts should be found.
    If omitted, “fontcode” will be used.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: str
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Modified CSS, with appended `@font-face` statements for each font variant of
    fontcode. Fontbuffers associated with “fontcode” will have been added to ‘archive’.
    The function will automatically find up to 4 font variants. All pymupdf-fonts
    (that are no special purpose like math or music, etc.) have regular, bold, italic
    and bold-italic variants. To see currently available font codes check `pymupdf.fitz_fontdescriptors.keys()`.
    This will show something like `dict_keys(['cascadia', 'cascadiai', 'cascadiab',
    'cascadiabi', 'figbo', 'figo', 'figbi', 'figit', 'fimbo', 'fimo', 'spacembo',
    'spacembi', 'spacemit', 'spacemo', 'math', 'music', 'symbol1', 'symbol2', 'notosbo',
    'notosbi', 'notosit', 'notos', 'ubuntu', 'ubuntubo', 'ubuntubi', 'ubuntuit', 'ubuntm',
    'ubuntmbo', 'ubuntmbi', 'ubuntmit'])`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here is a complete snippet for using the “Noto Sans” font instead of “Helvetica”:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*New in v1.17.4*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Convenience function to split a rectangle into sub-rectangles of equal size.
    Returns a list of `rows` lists, each containing `cols` [Rect](rect.html#rect)
    items. Each sub-rectangle can then be addressed by its row and column index.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – the rectangle to split.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**cols** (*int*) – the desired number of columns.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**rows** (*int*) – the desired number of rows.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'a list of [Rect](rect.html#rect) objects of equal size, whose union equals
    *rect*. Here is the layout of a 3x4 table created by `cell = pymupdf.make_table(rect,
    cols=4, rows=3)`:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[![_images/img-make-table.jpg](../Images/6bf1bfa810af2800868eb3ec5cac8b5a.png)](_images/img-make-table.jpg)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: New in version 1.16.2)*
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Return a matrix which maps the line from p1 to p2 to the x-axis such that p1
    will become (0,0) and p2 a point with the same distance to (0,0).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**p1** (*point_like*) – starting point of the line.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**p2** (*point_like*) – end point of the line.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Matrix](matrix.html#matrix)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'a matrix which combines a rotation and a translation:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[![_images/img-planish.png](../Images/296562958c4e2200851f587535f49465.png)](_images/img-planish.png)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A dictionary of pre-defines paper formats. Used as basis for [`paper_size()`](#paper_size
    "paper_size").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: New in v1.17.5
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A dictionary of usable fonts from repository [pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/).
    Items are keyed by their reserved fontname and provide information like this:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If `pymupdf-fonts` is not installed, the dictionary is empty.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The dictionary keys can be used to define a [Font](font.html#font) via e.g.
    `font = pymupdf.Font("fimo")` – just like you can do it with the builtin fonts
    “Helvetica” and friends.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: New in v1.19.4
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Copy of `os.environ["TESSDATA_PREFIX"]` for convenient checking whether there
    is integrated Tesseract OCR support.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If this attribute is `None`, Tesseract-OCR is either not installed, or the environment
    variable is not set to point to Tesseract’s language support folder.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This variable is now checked before OCR functions are tried. This prevents verbose
    messages from MuPDF.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: New in v1.19.6
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Contains about 500 RGB colors in PDF format with the color name as key. To see
    what is there, you can obviously look at `pymupdf.pdfcolor.keys()`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`pymupdf.pdfcolor["red"] = (1.0, 0.0, 0.0)`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`pymupdf.pdfcolor["skyblue"] = (0.5294117647058824, 0.807843137254902, 0.9215686274509803)`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`pymupdf.pdfcolor["wheat"] = (0.9607843137254902, 0.8705882352941177, 0.7019607843137254)`'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Convenience function to return the current local timestamp in PDF compatible
    format, e.g. *D:20170501121525-04’00’* for local datetime May 1, 2017, 12:15:25
    in a timezone 4 hours westward of the UTC meridian.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: str
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: current local PDF timestamp.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: New in version 1.14.7
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Calculate the length of text on output with a given **builtin** font, [`fontsize`](glossary.html#fontsize
    "fontsize") and encoding.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**text** (*str*) – the text string.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**fontname** (*str*) – the fontname. Must be one of either the [PDF Base 14
    Fonts](app3.html#base-14-fonts) or the CJK fonts, identified by their “reserved”
    fontnames (see table in [`Page.insert_font()`](page.html#Page.insert_font "Page.insert_font")).'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**fontsize** (*float*) – the [`fontsize`](glossary.html#fontsize "fontsize").'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**encoding** (*int*) – the encoding to use. Besides 0 = Latin, 1 = Greek and
    2 = Cyrillic (Russian) are available. Relevant for Base-14 fonts “Helvetica”,
    “Courier” and “Times” and their variants only. Make sure to use the same value
    as in the corresponding text insertion.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: float
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the length in points the string will have (e.g. when used in [`Page.insert_text()`](page.html#Page.insert_text
    "Page.insert_text")).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This function will only do the calculation – it won’t insert font nor text.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The [Font](font.html#font) class offers a similar method, [`Font.text_length()`](font.html#Font.text_length
    "Font.text_length"), which supports Base-14 fonts and any font with a character
    map (CMap, Type 0 fonts).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you use this function to determine the required rectangle width for the
    ([Page](page.html#page) or [Shape](shape.html#shape)) *insert_textbox* methods,
    be aware that they calculate on a **by-character level**. Because of rounding
    effects, this will mostly lead to a slightly larger number: *sum([pymupdf.get_text_length(c)
    for c in text]) > pymupdf.get_text_length(text)*. So either (1) do the same, or
    (2) use something like *pymupdf.get_text_length(text + “’”)* for your calculation.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Make a PDF-compatible string: if the text contains code points *ord(c) > 255*,
    then it will be converted to UTF-16BE with BOM as a hexadecimal character string
    enclosed in “<>” brackets like *<feff…>*. Otherwise, it will return the string
    enclosed in (round) brackets, replacing any characters outside the ASCII range
    with some special code. Also, every “(”, “)” or backslash is escaped with a backslash.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**text** (*str*) – the object to convert'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: str
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PDF-compatible string enclosed in either *()* or *<>*.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: New in v1.16.7
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in v1.19.5: also return natural image orientation extracted from EXIF
    data if present.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in v1.22.5: always return `None` in error cases instead of an empty
    dictionary.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Show important properties of an image provided as a memory area. Its main purpose
    is to avoid using other Python packages just to determine them.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**stream** (*bytes**|**bytearray**|**BytesIO**|**file*) – either an image in
    memory or an **opened** file. An image in memory may be any of the formats `bytes`,
    `bytearray` or `io.BytesIO`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: dict
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'No exception is ever raised. In case of an error, `None` is returned. Otherwise,
    there are the following items:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'There is the following relation to **Exif** information encoded in `orientation`,
    and correspondingly in the [`transform`](point.html#Point.transform "Point.transform")
    matrix-like (quoted from MuPDF documentation, *ccw* = counter-clockwise):'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Undefined
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 0 degree ccw rotation. (Exif = 1)
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 90 degree ccw rotation. (Exif = 8)
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 180 degree ccw rotation. (Exif = 3)
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 270 degree ccw rotation. (Exif = 6)
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: flip on X. (Exif = 2)
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: flip on X, then rotate ccw by 90 degrees. (Exif = 5)
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: flip on X, then rotate ccw by 180 degrees. (Exif = 4)
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: flip on X, then rotate ccw by 270 degrees. (Exif = 7)
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For some “exotic” images (FAX encodings, RAW formats and the like), this method
    will not work. You can however still work with such images in PyMuPDF, e.g. by
    using [`Document.extract_image()`](document.html#Document.extract_image "Document.extract_image")
    or create pixmaps via `Pixmap(doc, xref)`. These methods will automatically convert
    exotic images to the PNG format before returning results.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also get the properties of images embedded in a PDF, via their [`xref`](glossary.html#xref
    "xref"). In this case make sure to extract the raw stream: `pymupdf.image_profile(doc.xref_stream_raw(xref))`.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: Images as returned by the image blocks of [`Page.get_text()`](page.html#Page.get_text
    "Page.get_text") using “dict” or “rawdict” options are also supported.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Return the header string required to make a valid document out of page text
    outputs.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**output** (*str*) – type of document. Use the same as the output parameter
    of *get_text()*.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**filename** (*str*) – optional arbitrary name to use in output types “json”
    and “xml”.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: str
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Return the trailer string required to make a valid document out of page text
    outputs. See [`Page.get_text()`](page.html#Page.get_text "Page.get_text") for
    an example.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**output** (*str*) – type of document. Use the same as the output parameter
    of *get_text()*.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: str
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Delete an object containing XML-based metadata from the PDF. (Py-) MuPDF does
    not support XML-based metadata. Use this if you want to make sure that the conventional
    metadata dictionary will be used exclusively. Many thirdparty PDF programs insert
    their own metadata in XML format and thus may override what you store in the conventional
    dictionary. This method deletes any such reference, and the corresponding PDF
    object will be deleted during next garbage collection of the file.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Return the XML-based metadata [`xref`](glossary.html#xref "xref") of the PDF
    if present – also refer to [`Document.del_xml_metadata()`](#Document.del_xml_metadata
    "Document.del_xml_metadata"). You can use it to retrieve the content via [`Document.xref_stream()`](document.html#Document.xref_stream
    "Document.xref_stream") and then work with it using some XML software.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: int
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[`xref`](glossary.html#xref "xref") of PDF file level XML metadata – or 0 if
    none exists.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Run a page through a device.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**dev** ([Device](device.html#device)) – Device, obtained from one of the [Device](device.html#device)
    constructors.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**transform** ([Matrix](matrix.html#matrix)) – Transformation to apply to the
    page. Set it to [Identity](identity.html#identity) if no transformation is desired.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: New in v1.19.0
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in v1.22.0: optionally also return the OCG name applicable to the boundary
    box.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'a list of rectangles that envelop text, image or drawing objects. Each item
    is a tuple `(type, (x0, y0, x1, y1))` where the second tuple consists of rectangle
    coordinates, and *type* is one of the following values. If `layers=True`, there
    is a third item containing the OCG name or `None`: `(type, (x0, y0, x1, y1), None)`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`"fill-text"` – normal text (painted without character borders)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"stroke-text"` – text showing character borders only'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"ignore-text"` – text that should not be displayed (e.g. as used by OCR text
    layers)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"fill-path"` – drawing with fill color (and no border)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"stroke-path"` – drawing with border (and no fill color)'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"fill-image"` – displays an image'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"fill-shade"` – display a shading'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The item sequence represents the **sequence in which these commands are executed**
    to build the page’s appearance. Therefore, if an item’s bbox intersects or contains
    that of a previous item, then the previous item may be (partially) covered / hidden.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: So this list can be used to detect such situations. An item’s index in this
    list equals the value of a `"seqno"` in dictionaries as returned by [`Page.get_drawings()`](page.html#Page.get_drawings
    "Page.get_drawings") and [`Page.get_texttrace()`](#Page.get_texttrace "Page.get_texttrace").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: New in v1.18.16
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in v1.19.0: added key “seqno”.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in v1.19.1: stroke and fill colors now always are either RGB or GRAY'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in v1.19.3: span and character bboxes are now also correct if `dir
    != (1, 0)`.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in v1.22.0: add new dictionary key “layer”.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return low-level text information of the page. The method is available for
    **all** document types. The result is a list of Python dictionaries with the following
    content:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Details:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Information above tagged with “(1)” has the same meaning and value as explained
    in [TextPage](textpage.html#textpage).
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Please note that the font [`flags`](annot.html#Annot.flags "Annot.flags") value
    will never contain a *superscript* flag bit: the detection of superscripts is
    done within MuPDF [TextPage](textpage.html#textpage) code – it is not a property
    of any font.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Also note, that the text *color* is encoded as the usual tuple of floats 0 <=
    f <= 1 – not in sRGB format. Depending on `span["type"]`, interpret this as fill
    color or stroke color.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There are 3 text span types:'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '0: Filled text – equivalent to PDF text rendering mode 0 (`0 Tr`, the default
    in PDF), only each character’s “inside” is shown.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '1: Stroked text – equivalent to `1 Tr`, only the character borders are shown.'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '3: Ignored text – equivalent to `3 Tr` (hidden text).'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Line width in this context is important only for processing `span["type"] !=
    0`: it determines the thickness of the character’s border line. This value may
    not be provided at all with the text data. In this case, a value of 5% of the
    [`fontsize`](glossary.html#fontsize "fontsize") (`span["size"] * 0,05`) is generated.
    Often, an “artificial” bold text in PDF is created by `2 Tr`. There is no equivalent
    span type for this case. Instead, respective text is represented by two consecutive
    spans – which are identical in every aspect, except for their types, which are
    0, resp 1\. It is your responsibility to handle this type of situation - in [`Page.get_text()`](page.html#Page.get_text
    "Page.get_text"), MuPDF is doing this for you.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: For data compactness, the character’s unicode is provided here. Use built-in
    function `chr()` for the character itself.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The alpha / opacity value of the span’s text, `0 <= opacity <= 1`, 0 is invisible
    text, 1 (100%) is intransparent. Depending on `span["type"]`, interpret this value
    as *fill* opacity or, resp. *stroke* opacity.
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*(Changed in v1.19.0)* This value is equal or close to `char["bbox"]` of “rawdict”.
    In particular, the bbox **height** value is always computed as if **“small glyph
    heights”** had been requested.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*(New in v1.19.0)* This is the union of all character bboxes.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*(New in v1.19.0)* Enumerates the commands that build up the page’s appearance.
    Can be used to find out whether text is effectively hidden by objects, which are
    painted “later”, or *over* some object. So if there is a drawing or image with
    a higher sequence number, whose bbox overlaps (parts of) this text span, one may
    assume that such an object hides the resp. text. Different text spans have identical
    sequence numbers if they were created in one go.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*(New in v1.22.0)* The name of the Optional Content Group (OCG) if applicable
    or `None`.'
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here is a list of similarities and differences of `page.get_texttrace()` compared
    to `page.get_text("rawdict")`:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The method is up to **twice as fast,** compared to “rawdict” extraction. Depends
    on the amount of text.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The returned data is very **much smaller in size** – although it provides more
    information.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Additional types of text **invisibility can be detected**: opacity = 0 or type
    > 1 or overlapping bbox of an object with a higher sequence number.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: If MuPDF returns unicode 0xFFFD (65533) for unrecognized characters, you may
    still be able to deduct desired information from the glyph id.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: The `span["chars"]` **contains no spaces**, **except** the document creator
    has explicitly coded them. They **will never be generated** like it happens in
    [`Page.get_text()`](page.html#Page.get_text "Page.get_text") methods. To provide
    some help for doing your own computations here, the width of a space character
    is given. This value is derived from the font where possible. Otherwise the value
    of a fallback font is taken.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: There is no effort to organize text like it happens for a [TextPage](textpage.html#textpage)
    (the hierarchy of blocks, lines, spans, and characters). Characters are simply
    extracted in sequence, one by one, and put in a span. Whenever any of the span’s
    characteristics changes, a new span is started. So you may find characters with
    different `origin.y` values in the same span (which means they would appear in
    different lines). You cannot assume, that span characters are sorted in any particular
    order – you must make sense of the info yourself, taking `span["dir"]`, `span["wmode"]`,
    etc. into account.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Ligatures are represented like this:'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'MuPDF handles the following ligatures: “fi”, “ff”, “fl”, “ft”, “st”, “ffi”,
    and “ffl” (only the first 3 are mostly ever used). If the page contains e.g. ligature
    “fi”, you will find the following two character items subsequent to each other:'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: This means that the bbox of the first ligature character is the area containing
    the complete, compound glyph. Subsequent ligature components are recognizable
    by their glyph value -1 and a bbox of width zero.
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You may want to replace those 2 or 3 char tuples by one, that represents the
    ligature itself. Use the following mapping of ligatures to unicodes:'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"ff" -> 0xFB00`'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"fi" -> 0xFB01`'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"fl" -> 0xFB02`'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"ffi" -> 0xFB03`'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"ffl" -> 0xFB04`'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"ft" -> 0xFB05`'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"st" -> 0xFB06`'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'So you may want to replace the two example tuples above by the following single
    one: `(0xFB01, glyph, (x, y), (x0, y0, x1, y1))` (there is usually no need to
    lookup the correct glyph id for 0xFB01 in the resp. font, but you may execute
    `font.has_glyph(0xFB01)` and use its return value).'
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Changed in v1.19.3:** Similar to other text extraction methods, the character
    and span bboxes envelop the character quads. To recover the quads, follow the
    same methods [`recover_quad()`](#recover_quad "recover_quad"), [`recover_char_quad()`](#recover_char_quad
    "recover_char_quad") or [`recover_span_quad()`](#recover_span_quad "recover_span_quad")
    as explained in [Structure of Dictionary Outputs](textpage.html#textpagedict).
    Use either `None` or `span["dir"]` for the writing direction.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Changed in v1.21.1:** If applicable, the name of the OCG is shown in `"layer"`.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Ensures that the page’s so-called graphics state is balanced and new content
    can be inserted correctly.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In versions 1.24.1+ of PyMuPDF the method was improved and is being executed
    automatically as required, so you should no longer need to concern yourself with
    it.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This method obsoletes the use of [`Page.clean_contents()`](#Page.clean_contents
    "Page.clean_contents") in most cases. The advantage this method is a small footprint
    in terms of processing time and a low impact on the data size of incremental saves.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Indicate whether the page’s so-called graphic state is balanced. If `False`,
    [`Page.wrap_contents()`](#Page.wrap_contents "Page.wrap_contents") should be executed
    if new content is inserted (only relevant in `overlay=True` mode). In newer versions
    (1.24.1+), this check and corresponding adjustments are automatically executed
    – you therefore should not be concerned about this anymore.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: bool
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Deprecated wrapper for [`TextPage.extractBLOCKS()`](textpage.html#TextPage.extractBLOCKS
    "TextPage.extractBLOCKS"). Use [`Page.get_text()`](page.html#Page.get_text "Page.get_text")
    with the “blocks” option instead.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: list[tuple]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Deprecated wrapper for [`TextPage.extractWORDS()`](textpage.html#TextPage.extractWORDS
    "TextPage.extractWORDS"). Use [`Page.get_text()`](page.html#Page.get_text "Page.get_text")
    with the “words” option instead.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: list[tuple]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Run a page through a list device and return its display list.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[DisplayList](displaylist.html#displaylist)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the display list of the page.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'PDF only: Retrieve a list of [`xref`](glossary.html#xref "xref") of [`contents`](glossary.html#contents
    "contents") objects of a page. May be empty or contain multiple integers. If the
    page is cleaned ([`Page.clean_contents()`](#Page.clean_contents "Page.clean_contents")),
    it will be one entry at most. The “source” of each `/Contents` object can be individually
    read by [`Document.xref_stream()`](document.html#Document.xref_stream "Document.xref_stream")
    using an item of this list. Method [`Page.read_contents()`](#Page.read_contents
    "Page.read_contents") in contrast walks through this list and concatenates the
    corresponding sources into one `bytes` object.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: list[int]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'PDF only: Let the page’s `/Contents` key point to this xref. Any previously
    used contents objects will be ignored and can be removed via garbage collection.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Changed in v1.17.6
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'PDF only: Clean and concatenate all [`contents`](glossary.html#contents "contents")
    objects associated with this page. “Cleaning” includes syntactical corrections,
    standardizations and “pretty printing” of the contents stream. Discrepancies between
    [`contents`](glossary.html#contents "contents") and [`resources`](glossary.html#resources
    "resources") objects will also be corrected if sanitize is true. See [`Page.get_contents()`](#Page.get_contents
    "Page.get_contents") for more details.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Changed in version 1.16.0 Annotations are no longer implicitly cleaned by this
    method. Use [`Annot.clean_contents()`](#Annot.clean_contents "Annot.clean_contents")
    separately.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**sanitize** (*bool*) – *(new in v1.17.6)* if true, synchronization between
    resources and their actual use in the contents object is snychronized. For example,
    if a font is not actually used for any text of the page, then it will be deleted
    from the `/Resources/Font` object.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is a complex function which may generate large amounts of new data and
    render old data unused. It is **not recommended** using it together with the **incremental
    save** option. Also note that the resulting singleton new */Contents* object is
    **uncompressed**. So you should save to a **new file** using options *“deflate=True,
    garbage=3”*.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*New in version 1.17.0.* Return the concatenation of all [`contents`](glossary.html#contents
    "contents") objects associated with the page – without cleaning or otherwise modifying
    them. Use this method whenever you need to parse this source in its entirety without
    having to bother how many separate contents objects exist.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: bytes
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Clean the [`contents`](glossary.html#contents "contents") streams associated
    with the annotation. This is the same type of action which [`Page.clean_contents()`](#Page.clean_contents
    "Page.clean_contents") performs – just restricted to this annotation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Return a list of character glyphs and their widths for a font that is present
    in the document. A font must be specified by its PDF cross reference number [`xref`](glossary.html#xref
    "xref"). This function is called automatically from [`Page.insert_text()`](page.html#Page.insert_text
    "Page.insert_text") and [`Page.insert_textbox()`](page.html#Page.insert_textbox
    "Page.insert_textbox"). So you should rarely need to do this yourself.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**xref** (*int*) – cross reference number of a font embedded in the PDF. To
    find a font [`xref`](glossary.html#xref "xref"), use e.g. *doc.get_page_fonts(pno)*
    of page number *pno* and take the first entry of one of the returned list entries.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**limit** (*int*) – limits the number of returned entries. The default of 256
    is enforced for all fonts that only support 1-byte characters, so-called “simple
    fonts” (checked by this method). All [PDF Base 14 Fonts](app3.html#base-14-fonts)
    are simple fonts.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: list
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a list of *limit* tuples. Each character *c* has an entry *(g, w)* in this list
    with an index of *ord(c)*. Entry *g* (integer) of the tuple is the glyph id of
    the character, and float *w* is its normalized width. The actual width for some
    [`fontsize`](glossary.html#fontsize "fontsize") can be calculated as *w * fontsize*.
    For simple fonts, the *g* entry can always be safely ignored. In all other cases
    *g* is the basis for graphically representing *c*.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This function calculates the pixel width of a string called *text*:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: New in version 1.14.14
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'PDF only: Check whether the object represented by [`xref`](glossary.html#xref
    "xref") is a [`stream`](glossary.html#stream "stream") type. Return is *False*
    if not a PDF or if the number is outside the valid xref range.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**xref** (*int*) – [`xref`](glossary.html#xref "xref") number.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*True* if the object definition is followed by data wrapped in keyword pair
    *stream*, *endstream*.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Increase the [`xref`](glossary.html#xref "xref") by one entry and return that
    number. This can then be used to insert a new object.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'int :returns: the number of the new [`xref`](glossary.html#xref "xref") entry.
    Please note, that only a new entry in the PDF’s cross reference table is created.
    At this point, there will not yet exist a PDF object associated with it. To create
    an (empty) object with this number use `doc.update_xref(xref, "<<>>")`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Return length of [`xref`](glossary.html#xref "xref") table.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: int
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the number of entries in the [`xref`](glossary.html#xref "xref") table.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Compute the quadrilateral of a text span extracted via options “dict” or “rawdict”
    of [`Page.get_text()`](page.html#Page.get_text "Page.get_text").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**line_dir** (*tuple*) – `line["dir"]` of the owning line. Use `None` for a
    span from [`Page.get_texttrace()`](#Page.get_texttrace "Page.get_texttrace").'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**span** (*dict*) – the span.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the [Quad](quad.html#quad) of the span, usable for text marker annotations (‘Highlight’,
    etc.).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Compute the quadrilateral of a text character extracted via option “rawdict”
    of [`Page.get_text()`](page.html#Page.get_text "Page.get_text").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**line_dir** (*tuple*) – `line["dir"]` of the owning line. Use `None` for a
    span from [`Page.get_texttrace()`](#Page.get_texttrace "Page.get_texttrace").'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**span** (*dict*) – the span.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**char** (*dict*) – the character.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the [Quad](quad.html#quad) of the character, usable for text marker annotations
    (‘Highlight’, etc.).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Compute the quadrilateral of a subset of characters of a span extracted via
    option “rawdict” of [`Page.get_text()`](page.html#Page.get_text "Page.get_text").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**line_dir** (*tuple*) – `line["dir"]` of the owning line. Use `None` for a
    span from [`Page.get_texttrace()`](#Page.get_texttrace "Page.get_texttrace").'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**span** (*dict*) – the span.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**chars** (*list*) – the characters to consider. If given, the selected extraction
    option must be “rawdict”.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the [Quad](quad.html#quad) of the selected characters, usable for text marker
    annotations (‘Highlight’, etc.).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Compute the quadrilateral of a subset of spans of a text line extracted via
    options “dict” or “rawdict” of [`Page.get_text()`](page.html#Page.get_text "Page.get_text").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**line** (*dict*) – the line.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**spans** (*list*) – a sub-list of `line["spans"]`. If omitted, the full line
    quad will be returned.'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the [Quad](quad.html#quad) of the selected line spans, usable for text marker
    annotations (‘Highlight’, etc.).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Return the name of Tesseract’s language support folder. Use this function if
    the environment variable [`TESSDATA_PREFIX`](#TESSDATA_PREFIX "TESSDATA_PREFIX")
    has not been set.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`os.getenv("TESSDATA_PREFIX")` if not `None`. Otherwise, if Tesseract-OCR is
    installed, locate the name of `tessdata`. If no installation is found, return
    `False`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The folder name can be used as parameter `tessdata` in methods [`Page.get_textpage_ocr()`](page.html#Page.get_textpage_ocr
    "Page.get_textpage_ocr"), [`Pixmap.pdfocr_save()`](pixmap.html#Pixmap.pdfocr_save
    "Pixmap.pdfocr_save") and [`Pixmap.pdfocr_tobytes()`](pixmap.html#Pixmap.pdfocr_tobytes
    "Pixmap.pdfocr_tobytes").
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Return the (unique) infinite rectangle `Rect(-2147483648.0, -2147483648.0,
    2147483520.0, 2147483520.0)`, resp. the [IRect](irect.html#irect) and [Quad](quad.html#quad)
    counterparts. It is the largest possible rectangle: all valid rectangles are contained
    in it.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Return the “standard” empty and invalid rectangle `Rect(2147483520.0, 2147483520.0,
    -2147483648.0, -2147483648.0)` resp. quad. Its top-left and bottom-right point
    values are reversed compared to the infinite rectangle. It will e.g. be used to
    indicate empty bboxes in `page.get_text("dict")` dictionaries. There are however
    infinitely many empty or invalid rectangles.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
