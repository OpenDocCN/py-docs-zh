- en: Connection Pooling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/pooling.html](https://docs.sqlalchemy.org/en/20/core/pooling.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A connection pool is a standard technique used to maintain long running connections
    in memory for efficient re-use, as well as to provide management for the total
    number of connections an application might use simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: Particularly for server-side web applications, a connection pool is the standard
    way to maintain a “pool” of active database connections in memory which are reused
    across requests.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy includes several connection pool implementations which integrate
    with the [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
    They can also be used directly for applications that want to add pooling to an
    otherwise plain DBAPI approach.
  prefs: []
  type: TYPE_NORMAL
- en: Connection Pool Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    returned by the [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    function in most cases has a [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    integrated, pre-configured with reasonable pooling defaults. If you’re reading
    this section only to learn how to enable pooling - congratulations! You’re already
    done.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    tuning parameters can be passed directly to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as keyword arguments: `pool_size`, `max_overflow`,
    `pool_recycle` and `pool_timeout`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: All SQLAlchemy pool implementations have in common that none of them “pre create”
    connections - all implementations wait until first use before creating a connection.
    At that point, if no additional concurrent checkout requests for more connections
    are made, no additional connections are created. This is why it’s perfectly fine
    for [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    to default to using a [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    of size five without regard to whether or not the application really needs five
    connections queued up - the pool would only grow to that size if the application
    actually used five connections concurrently, in which case the usage of a small
    pool is an entirely appropriate default behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") class
    is **not compatible with asyncio**. When using [`create_async_engine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") to create an instance of [`AsyncEngine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine"), the [`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") class, which makes use of an asyncio-compatible
    queue implementation, is used instead.
  prefs: []
  type: TYPE_NORMAL
- en: '## Switching Pool Implementations'
  prefs: []
  type: TYPE_NORMAL
- en: 'The usual way to use a different kind of pool with [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") is to use the `poolclass` argument. This argument
    accepts a class imported from the `sqlalchemy.pool` module, and handles the details
    of building the pool for you. A common use case here is when connection pooling
    is to be disabled, which can be achieved by using the [`NullPool`](#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Using a Custom Connection Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the section [Custom DBAPI connect() arguments / on-connect routines](engines.html#custom-dbapi-args)
    for a rundown of the various connection customization routines.
  prefs: []
  type: TYPE_NORMAL
- en: Constructing a Pool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use a [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") by itself,
    the `creator` function is the only argument that’s required and is passed first,
    followed by any additional options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'DBAPI connections can then be procured from the pool using the [`Pool.connect()`](#sqlalchemy.pool.Pool.connect
    "sqlalchemy.pool.Pool.connect") function. The return value of this method is a
    DBAPI connection that’s contained within a transparent proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The purpose of the transparent proxy is to intercept the `close()` call, such
    that instead of the DBAPI connection being closed, it is returned to the pool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The proxy also returns its contained DBAPI connection to the pool when it is
    garbage collected, though it’s not deterministic in Python that this occurs immediately
    (though it is typical with cPython). This usage is not recommended however and
    in particular is not supported with asyncio DBAPI drivers.
  prefs: []
  type: TYPE_NORMAL
- en: '## Reset On Return'
  prefs: []
  type: TYPE_NORMAL
- en: The pool includes “reset on return” behavior which will call the `rollback()`
    method of the DBAPI connection when the connection is returned to the pool. This
    is so that any existing transactional state is removed from the connection, which
    includes not just uncommitted data but table and row locks as well. For most DBAPIs,
    the call to `rollback()` is inexpensive, and if the DBAPI has already completed
    a transaction, the method should be a no-op.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling Reset on Return for non-transactional connections
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For very specific cases where this `rollback()` is not useful, such as when
    using a connection that is configured for [autocommit](connections.html#dbapi-autocommit-understanding)
    or when using a database that has no ACID capabilities such as the MyISAM engine
    of MySQL, the reset-on-return behavior can be disabled, which is typically done
    for performance reasons. This can be affected by using the [`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter of [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"),
    which is also available from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine"), passing a value of `None`. This is illustrated in
    the example below, in conjunction with the [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter setting of `AUTOCOMMIT`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The above engine won’t actually perform ROLLBACK when connections are returned
    to the pool; since AUTOCOMMIT is enabled, the driver will also not perform any
    BEGIN operation.
  prefs: []
  type: TYPE_NORMAL
- en: Custom Reset-on-Return Schemes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: “reset on return” consisting of a single `rollback()` may not be sufficient
    for some use cases; in particular, applications which make use of temporary tables
    may wish for these tables to be automatically removed on connection checkin. Some
    (but notably not all) backends include features that can “reset” such tables within
    the scope of a database connection, which may be a desirable behavior for connection
    pool reset. Other server resources such as prepared statement handles and server-side
    statement caches may persist beyond the checkin process, which may or may not
    be desirable, depending on specifics. Again, some (but again not all) backends
    may provide for a means of resetting this state. The two SQLAlchemy included dialects
    which are known to have such reset schemes include Microsoft SQL Server, where
    an undocumented but widely known stored procedure called `sp_reset_connection`
    is often used, and PostgreSQL, which has a well-documented series of commands
    including `DISCARD` `RESET`, `DEALLOCATE`, and `UNLISTEN`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example illustrates how to replace reset on return with the Microsoft
    SQL Server `sp_reset_connection` stored procedure, using the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event hook. The [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") parameter is set to `None` so that the custom scheme
    can replace the default behavior completely. The custom hook implementation calls
    `.rollback()` in any case, as it’s usually important that the DBAPI’s own tracking
    of commit/rollback will remain consistent with the state of the transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 2.0.0b3: Added additional state arguments to the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event and additionally ensured the event
    is invoked for all “reset” occurrences, so that it’s appropriate as a place for
    custom “reset” handlers. Previous schemes which use the [`PoolEvents.checkin()`](events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") handler remain usable as well.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Temporary Table / Resource Reset for Connection Pooling](../dialects/mssql.html#mssql-reset-on-return)
    - in the [Microsoft SQL Server](../dialects/mssql.html) documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Temporary Table / Resource Reset for Connection Pooling](../dialects/postgresql.html#postgresql-reset-on-return)
    in the [PostgreSQL](../dialects/postgresql.html) documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging reset-on-return events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Logging for pool events including reset on return can be set `logging.DEBUG`
    log level along with the `sqlalchemy.pool` logger, or by setting [`create_engine.echo_pool`](engines.html#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") to `"debug"` when using [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The above pool will show verbose logging including reset on return:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Pool Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Connection pools support an event interface that allows hooks to execute upon
    first connect, upon each new connection, and upon checkout and checkin of connections.
    See [`PoolEvents`](events.html#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: '## Dealing with Disconnects'
  prefs: []
  type: TYPE_NORMAL
- en: The connection pool has the ability to refresh individual connections as well
    as its entire set of connections, setting the previously pooled connections as
    “invalid”. A common use case is allow the connection pool to gracefully recover
    when the database server has been restarted, and all previously established connections
    are no longer functional. There are two approaches to this.
  prefs: []
  type: TYPE_NORMAL
- en: '### Disconnect Handling - Pessimistic'
  prefs: []
  type: TYPE_NORMAL
- en: The pessimistic approach refers to emitting a test statement on the SQL connection
    at the start of each connection pool checkout, to test that the database connection
    is still viable. The implementation is dialect-specific, and makes use of either
    a DBAPI-specific ping method, or by using a simple SQL statement like “SELECT
    1”, in order to test the connection for liveness.
  prefs: []
  type: TYPE_NORMAL
- en: The approach adds a small bit of overhead to the connection checkout process,
    however is otherwise the most simple and reliable approach to completely eliminating
    database errors due to stale pooled connections. The calling application does
    not need to be concerned about organizing operations to be able to recover from
    stale connections checked out from the pool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pessimistic testing of connections upon checkout is achievable by using the
    [`Pool.pre_ping`](#sqlalchemy.pool.Pool.params.pre_ping "sqlalchemy.pool.Pool")
    argument, available from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") via the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The “pre ping” feature operates on a per-dialect basis either by invoking a
    DBAPI-specific “ping” method, or if not available will emit SQL equivalent to
    “SELECT 1”, catching any errors and detecting the error as a “disconnect” situation.
    If the ping / error check determines that the connection is not usable, the connection
    will be immediately recycled, and all other pooled connections older than the
    current time are invalidated, so that the next time they are checked out, they
    will also be recycled before use.
  prefs: []
  type: TYPE_NORMAL
- en: If the database is still not available when “pre ping” runs, then the initial
    connect will fail and the error for failure to connect will be propagated normally.
    In the uncommon situation that the database is available for connections, but
    is not able to respond to a “ping”, the “pre_ping” will try up to three times
    before giving up, propagating the database error last received.
  prefs: []
  type: TYPE_NORMAL
- en: It is critical to note that the pre-ping approach **does not accommodate for
    connections dropped in the middle of transactions or other SQL operations**. If
    the database becomes unavailable while a transaction is in progress, the transaction
    will be lost and the database error will be raised. While the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object will detect a “disconnect” situation and
    recycle the connection as well as invalidate the rest of the connection pool when
    this condition occurs, the individual operation where the exception was raised
    will be lost, and it’s up to the application to either abandon the operation,
    or retry the whole transaction again. If the engine is configured using DBAPI-level
    autocommit connections, as described at [Setting Transaction Isolation Levels
    including DBAPI Autocommit](connections.html#dbapi-autocommit), a connection **may**
    be reconnected transparently mid-operation using events. See the section [How
    Do I “Retry” a Statement Execution Automatically?](../faq/connections.html#faq-execute-retry)
    for an example.
  prefs: []
  type: TYPE_NORMAL
- en: For dialects that make use of “SELECT 1” and catch errors in order to detect
    disconnects, the disconnection test may be augmented for new backend-specific
    error messages using the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") hook.
  prefs: []
  type: TYPE_NORMAL
- en: '#### Custom / Legacy Pessimistic Ping'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") was added, the “pre-ping” approach historically has
    been performed manually using the [`ConnectionEvents.engine_connect()`](events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") engine event. The most common
    recipe for this is below, for reference purposes in case an application is already
    using such a recipe, or special behaviors are needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The above recipe has the advantage that we are making use of SQLAlchemy’s facilities
    for detecting those DBAPI exceptions that are known to indicate a “disconnect”
    situation, as well as the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object’s ability to correctly invalidate the current
    connection pool when this condition occurs and allowing the current [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") to re-validate onto a new DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: Disconnect Handling - Optimistic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When pessimistic handling is not employed, as well as when the database is shutdown
    and/or restarted in the middle of a connection’s period of use within a transaction,
    the other approach to dealing with stale / closed connections is to let SQLAlchemy
    handle disconnects as they occur, at which point all connections in the pool are
    invalidated, meaning they are assumed to be stale and will be refreshed upon next
    checkout. This behavior assumes the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    is used in conjunction with a [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). The [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") has logic which can detect disconnection events and
    refresh the pool automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    attempts to use a DBAPI connection, and an exception is raised that corresponds
    to a “disconnect” event, the connection is invalidated. The [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") then calls the [`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate
    "sqlalchemy.pool.Pool.recreate") method, effectively invalidating all connections
    not currently checked out so that they are replaced with new ones upon next checkout.
    This flow is illustrated by the code example below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The above example illustrates that no special intervention is needed to refresh
    the pool, which continues normally after a disconnection event is detected. However,
    one database exception is raised, per each connection that is in use while the
    database unavailability event occurred. In a typical web application using an
    ORM Session, the above condition would correspond to a single request failing
    with a 500 error, then the web application continuing normally beyond that. Hence
    the approach is “optimistic” in that frequent database restarts are not anticipated.
  prefs: []
  type: TYPE_NORMAL
- en: '#### Setting Pool Recycle'
  prefs: []
  type: TYPE_NORMAL
- en: 'An additional setting that can augment the “optimistic” approach is to set
    the pool recycle parameter. This parameter prevents the pool from using a particular
    connection that has passed a certain age, and is appropriate for database backends
    such as MySQL that automatically close connections that have been stale after
    a particular period of time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Above, any DBAPI connection that has been open for more than one hour will
    be invalidated and replaced, upon next checkout. Note that the invalidation **only**
    occurs during checkout - not on any connections that are held in a checked out
    state. `pool_recycle` is a function of the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    itself, independent of whether or not an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is in use.  ### More on Invalidation'
  prefs: []
  type: TYPE_NORMAL
- en: The [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") provides “connection
    invalidation” services which allow both explicit invalidation of a connection
    as well as automatic invalidation in response to conditions that are determined
    to render a connection unusable.
  prefs: []
  type: TYPE_NORMAL
- en: “Invalidation” means that a particular DBAPI connection is removed from the
    pool and discarded. The `.close()` method is called on this connection if it is
    not clear that the connection itself might not be closed, however if this method
    fails, the exception is logged but the operation still proceeds.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using a [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    the [`Connection.invalidate()`](connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method is the usual entrypoint to explicit
    invalidation. Other conditions by which a DBAPI connection might be invalidated
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: a DBAPI exception such as [`OperationalError`](exceptions.html#sqlalchemy.exc.OperationalError
    "sqlalchemy.exc.OperationalError"), raised when a method like `connection.execute()`
    is called, is detected as indicating a so-called “disconnect” condition. As the
    Python DBAPI provides no standard system for determining the nature of an exception,
    all SQLAlchemy dialects include a system called `is_disconnect()` which will examine
    the contents of an exception object, including the string message and any potential
    error codes included with it, in order to determine if this exception indicates
    that the connection is no longer usable. If this is the case, the `_ConnectionFairy.invalidate()`
    method is called and the DBAPI connection is then discarded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the connection is returned to the pool, and calling the `connection.rollback()`
    or `connection.commit()` methods, as dictated by the pool’s “reset on return”
    behavior, throws an exception. A final attempt at calling `.close()` on the connection
    will be made, and it is then discarded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a listener implementing [`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") raises the [`DisconnectionError`](exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError") exception, indicating that the connection
    won’t be usable and a new connection attempt needs to be made.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All invalidations which occur will invoke the [`PoolEvents.invalidate()`](events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate") event.  ### Supporting new database
    error codes for disconnect scenarios'
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy dialects each include a routine called `is_disconnect()` that is
    invoked whenever a DBAPI exception is encountered. The DBAPI exception object
    is passed to this method, where dialect-specific heuristics will then determine
    if the error code received indicates that the database connection has been “disconnected”,
    or is in an otherwise unusable state which indicates it should be recycled. The
    heuristics applied here may be customized using the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook, which is typically
    established via the owning [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object. Using this hook, all errors which occur are
    delivered passing along a contextual object known as [`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext"). Custom event hooks may control whether
    or not a particular error should be considered a “disconnect” situation or not,
    as well as if this disconnect should cause the entire connection pool to be invalidated
    or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to add support to consider the Oracle error codes `DPY-1001` and
    `DPY-4011` to be handled as disconnect codes, apply an event handler to the engine
    after creation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The above error processing function will be invoked for all Oracle errors raised,
    including those caught when using the [pool pre ping](#pool-disconnects-pessimistic)
    feature for those backends that rely upon disconnect error handling (new in 2.0).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")  ## Using FIFO vs. LIFO'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") class
    features a flag called [`QueuePool.use_lifo`](#sqlalchemy.pool.QueuePool.params.use_lifo
    "sqlalchemy.pool.QueuePool"), which can also be accessed from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") via the flag [`create_engine.pool_use_lifo`](engines.html#sqlalchemy.create_engine.params.pool_use_lifo
    "sqlalchemy.create_engine"). Setting this flag to `True` causes the pool’s “queue”
    behavior to instead be that of a “stack”, e.g. the last connection to be returned
    to the pool is the first one to be used on the next request. In contrast to the
    pool’s long- standing behavior of first-in-first-out, which produces a round-robin
    effect of using each connection in the pool in series, lifo mode allows excess
    connections to remain idle in the pool, allowing server-side timeout schemes to
    close these connections out. The difference between FIFO and LIFO is basically
    whether or not its desirable for the pool to keep a full set of connections ready
    to go even during idle periods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Above, we also make use of the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") flag so that connections which are closed from the
    server side are gracefully handled by the connection pool and replaced with a
    new connection.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the flag only applies to [`QueuePool`](#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") use.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Dealing with Disconnects](#pool-disconnects)  ## Using Connection Pools with
    Multiprocessing or os.fork()'
  prefs: []
  type: TYPE_NORMAL
- en: It’s critical that when using a connection pool, and by extension when using
    an [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    created via [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine"),
    that the pooled connections **are not shared to a forked process**. TCP connections
    are represented as file descriptors, which usually work across process boundaries,
    meaning this will cause concurrent access to the file descriptor on behalf of
    two or more entirely independent Python interpreter states.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on specifics of the driver and OS, the issues that arise here range
    from non-working connections to socket connections that are used by multiple processes
    concurrently, leading to broken messaging (the latter case is typically the most
    common).
  prefs: []
  type: TYPE_NORMAL
- en: 'The SQLAlchemy [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    object refers to a connection pool of existing database connections. So when this
    object is replicated to a child process, the goal is to ensure that no database
    connections are carried over. There are four general approaches to this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Disable pooling using [`NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool").
    This is the most simplistic, one shot system that prevents the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") from using any connection more than once:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") on any given [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), passing the [`Engine.dispose.close`](connections.html#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose") parameter with a value of `False`, within
    the initialize phase of the child process. This is so that the new process will
    not touch any of the parent process’ connections and will instead start with new
    connections. **This is the recommended approach**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.4.33: Added the [`Engine.dispose.close`](connections.html#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose") parameter to allow the replacement of a connection
    pool in a child process without interfering with the connections used by the parent
    process.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Call [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") **directly before** the child process is created.
    This will also cause the child process to start with a new connection pool, while
    ensuring the parent connections are not transferred to the child process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An event handler can be applied to the connection pool that tests for connections
    being shared across process boundaries, and invalidates them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Above, we use an approach similar to that described in [Disconnect Handling
    - Pessimistic](#pool-disconnects-pessimistic) to treat a DBAPI connection that
    originated in a different parent process as an “invalid” connection, coercing
    the pool to recycle the connection record to make a new connection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The above strategies will accommodate the case of an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") being shared among processes. The above steps alone
    are not sufficient for the case of sharing a specific [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") over a process boundary; prefer to keep the scope
    of a particular [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    local to a single process (and thread). It’s additionally not supported to share
    any kind of ongoing transactional state directly across a process boundary, such
    as an ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object that’s begun a transaction and references active `Connection` instances;
    again prefer to create new [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects in new processes.
  prefs: []
  type: TYPE_NORMAL
- en: Using a pool instance directly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A pool implementation can be used directly without an engine. This could be
    used in applications that just wish to use the pool behavior without all other
    SQLAlchemy features. In the example below the default pool for the `MySQLdb` dialect
    is obtained using [`create_pool_from_url()`](engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If the type of pool to create is not specified, the default one for the dialect
    will be used. To specify it directly the `poolclass` argument can be used, like
    in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '## API Documentation - Available Pool Implementations'
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [_ConnectionFairy](#sqlalchemy.pool._ConnectionFairy) | Proxies a DBAPI connection
    and provides return-on-dereference support. |'
  prefs: []
  type: TYPE_TB
- en: '| [_ConnectionRecord](#sqlalchemy.pool._ConnectionRecord) | Maintains a position
    in a connection pool which references a pooled connection. |'
  prefs: []
  type: TYPE_TB
- en: '| [AssertionPool](#sqlalchemy.pool.AssertionPool) | A [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") that allows at most one checked out connection at any
    given time. |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncAdaptedQueuePool](#sqlalchemy.pool.AsyncAdaptedQueuePool) | An asyncio-compatible
    version of [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [ConnectionPoolEntry](#sqlalchemy.pool.ConnectionPoolEntry) | Interface for
    the object that maintains an individual database connection on behalf of a [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [ManagesConnection](#sqlalchemy.pool.ManagesConnection) | Common base for
    the two connection-management interfaces [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") and [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"). |'
  prefs: []
  type: TYPE_TB
- en: '| [NullPool](#sqlalchemy.pool.NullPool) | A Pool which does not pool connections.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Pool](#sqlalchemy.pool.Pool) | Abstract base class for connection pools.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [PoolProxiedConnection](#sqlalchemy.pool.PoolProxiedConnection) | A connection-like
    adapter for a [**PEP 249**](https://peps.python.org/pep-0249/) DBAPI connection,
    which includes additional methods specific to the [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") implementation. |'
  prefs: []
  type: TYPE_TB
- en: '| [QueuePool](#sqlalchemy.pool.QueuePool) | A [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") that imposes a limit on the number of open connections.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [SingletonThreadPool](#sqlalchemy.pool.SingletonThreadPool) | A Pool that
    maintains one connection per thread. |'
  prefs: []
  type: TYPE_TB
- en: '| [StaticPool](#sqlalchemy.pool.StaticPool) | A Pool of exactly one connection,
    used for all requests. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for connection pools.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.pool.Pool.__init__), [connect()](#sqlalchemy.pool.Pool.connect),
    [dispose()](#sqlalchemy.pool.Pool.dispose), [recreate()](#sqlalchemy.pool.Pool.recreate)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    ([`sqlalchemy.log.Identified`](internals.html#sqlalchemy.log.Identified "sqlalchemy.log.Identified"),
    `sqlalchemy.event.registry.EventTarget`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Pool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`creator` – a callable function that returns a DB-API connection object. The
    function will be called with parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recycle` – If set to a value other than -1, number of seconds between connection
    recycling, which means upon checkout, if this timeout is surpassed the connection
    will be closed and replaced with a newly opened connection. Defaults to -1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logging_name` – String identifier which will be used within the “name” field
    of logging records generated within the “sqlalchemy.pool” logger. Defaults to
    a hexstring of the object’s id.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`echo` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, the connection pool will log informational output such as when connections
    are invalidated as well as when connections are recycled to the default log handler,
    which defaults to `sys.stdout` for output.. If set to the string `"debug"`, the
    logging will include pool checkouts and checkins.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The [`Pool.echo`](#sqlalchemy.pool.Pool.params.echo "sqlalchemy.pool.Pool")
    parameter can also be set from the [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") call by using the [`create_engine.echo_pool`](engines.html#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Configuring Logging](engines.html#dbengine-logging) - further detail on how
    to configure logging.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`reset_on_return` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine steps to take on connections as they are returned to the pool, which
    were not otherwise handled by a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). Available from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") via the [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return "sqlalchemy.pool.Pool")
    can have any of these values:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"rollback"` - call rollback() on the connection, to release locks and transaction
    resources. This is the default value. The vast majority of use cases should leave
    this value set.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"commit"` - call commit() on the connection, to release locks and transaction
    resources. A commit here may be desirable for databases that cache query plans
    if a commit is emitted, such as Microsoft SQL Server. However, this value is more
    dangerous than ‘rollback’ because any data changes present on the transaction
    are committed unconditionally.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`None` - don’t do anything on the connection. This setting may be appropriate
    if the database / DBAPI works in pure “autocommit” mode at all times, or if a
    custom reset handler is established using the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event handler.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True` - same as ‘rollback’, this is here for backwards compatibility.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False` - same as None, this is here for backwards compatibility.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For further customization of reset on return, the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event hook may be used which can perform
    any connection activity desired on reset.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Reset On Return](#pool-reset-on-return)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`events` – a list of 2-tuples, each of the form `(callable, target)` which
    will be passed to [`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    upon construction. Provided here so that event listeners can be assigned via [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") before dialect-level listeners are applied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    that will handle the job of calling rollback(), close(), or commit() on DBAPI
    connections. If omitted, a built-in “stub” dialect is used. Applications that
    make use of [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    should not use this parameter as it is handled by the engine creation strategy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pre_ping` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, the pool will emit a “ping” (typically “SELECT 1”, but is dialect-specific)
    on the connection upon checkout, to test if the connection is alive or not. If
    not, the connection is transparently re-connected and upon success, all other
    pooled connections established prior to that timestamp are invalidated. Requires
    that a dialect is passed as well to interpret the disconnection error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Return a DBAPI connection from the pool.
  prefs: []
  type: TYPE_NORMAL
- en: The connection is instrumented such that when its `close()` method is called,
    the connection will be returned to the pool.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of this pool.
  prefs: []
  type: TYPE_NORMAL
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.Pool.dispose
    "sqlalchemy.pool.Pool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: A [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") that imposes a limit
    on the number of open connections.
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") is the
    default pooling implementation used for all [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects other than SQLite with a `:memory:` database.'
  prefs: []
  type: TYPE_NORMAL
- en: The [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") class
    **is not compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"). The [`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") class is used automatically when using
    [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"), if no other kind of pool is specified.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool "sqlalchemy.pool.AsyncAdaptedQueuePool")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.pool.QueuePool.__init__), [dispose()](#sqlalchemy.pool.QueuePool.dispose),
    [recreate()](#sqlalchemy.pool.QueuePool.recreate)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Construct a QueuePool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`creator` – a callable function that returns a DB-API connection object, same
    as that of [`Pool.creator`](#sqlalchemy.pool.Pool.params.creator "sqlalchemy.pool.Pool").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pool_size` – The size of the pool to be maintained, defaults to 5\. This is
    the largest number of connections that will be kept persistently in the pool.
    Note that the pool begins with no connections; once this number of connections
    is requested, that number of connections will remain. `pool_size` can be set to
    0 to indicate no size limit; to disable pooling, use a [`NullPool`](#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_overflow` – The maximum overflow size of the pool. When the number of
    checked-out connections reaches the size set in pool_size, additional connections
    will be returned up to this limit. When those additional connections are returned
    to the pool, they are disconnected and discarded. It follows then that the total
    number of simultaneous connections the pool will allow is pool_size + max_overflow,
    and the total number of “sleeping” connections the pool will allow is pool_size.
    max_overflow can be set to -1 to indicate no overflow limit; no limit will be
    placed on the total number of concurrent connections. Defaults to 10.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timeout` – The number of seconds to wait before giving up on returning a connection.
    Defaults to 30.0\. This can be a float but is subject to the limitations of Python
    time functions which may not be reliable in the tens of milliseconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_lifo` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: use LIFO (last-in-first-out) when retrieving connections instead of FIFO (first-in-first-out).
    Using LIFO, a server-side timeout scheme can reduce the number of connections
    used during non-peak periods of use. When planning for server-side timeouts, ensure
    that a recycle or pre-ping strategy is in use to gracefully handle stale connections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Using FIFO vs. LIFO](#pool-use-lifo)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Dealing with Disconnects](#pool-disconnects)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**kw` – Other keyword arguments including [`Pool.recycle`](#sqlalchemy.pool.Pool.params.recycle
    "sqlalchemy.pool.Pool"), [`Pool.echo`](#sqlalchemy.pool.Pool.params.echo "sqlalchemy.pool.Pool"),
    [`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return "sqlalchemy.pool.Pool")
    and others are passed to the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    constructor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of this pool.
  prefs: []
  type: TYPE_NORMAL
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.QueuePool.dispose
    "sqlalchemy.pool.QueuePool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: An asyncio-compatible version of [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool").
  prefs: []
  type: TYPE_NORMAL
- en: This pool is used by default when using [`AsyncEngine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") engines that were generated from [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"). It uses an asyncio-compatible queue
    implementation that does not use `threading.Lock`.
  prefs: []
  type: TYPE_NORMAL
- en: The arguments and operation of [`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") are otherwise identical to that of [`QueuePool`](#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool").
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") ([`sqlalchemy.pool.impl.QueuePool`](#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.impl.QueuePool"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: A Pool that maintains one connection per thread.
  prefs: []
  type: TYPE_NORMAL
- en: Maintains one connection per each thread, never moving a connection to a thread
    other than the one which it was created in.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: the [`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    will call `.close()` on arbitrary connections that exist beyond the size setting
    of `pool_size`, e.g. if more unique **thread identities** than what `pool_size`
    states are used. This cleanup is non-deterministic and not sensitive to whether
    or not the connections linked to those thread identities are currently in use.
  prefs: []
  type: TYPE_NORMAL
- en: '[`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    may be improved in a future release, however in its current status it is generally
    used only for test scenarios using a SQLite `:memory:` database and is not recommended
    for production use.'
  prefs: []
  type: TYPE_NORMAL
- en: The [`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    class **is not compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine").
  prefs: []
  type: TYPE_NORMAL
- en: 'Options are the same as those of [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"),
    as well as:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pool_size** – The number of threads in which to maintain connections at once.
    Defaults to five.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    is used by the SQLite dialect automatically when a memory-based database is used.
    See [SQLite](../dialects/sqlite.html).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[connect()](#sqlalchemy.pool.SingletonThreadPool.connect), [dispose()](#sqlalchemy.pool.SingletonThreadPool.dispose),
    [recreate()](#sqlalchemy.pool.SingletonThreadPool.recreate)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.base.Pool"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Return a DBAPI connection from the pool.
  prefs: []
  type: TYPE_NORMAL
- en: The connection is instrumented such that when its `close()` method is called,
    the connection will be returned to the pool.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of this pool.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.SingletonThreadPool.dispose
    "sqlalchemy.pool.SingletonThreadPool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: A [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") that allows at most
    one checked out connection at any given time.
  prefs: []
  type: TYPE_NORMAL
- en: This will raise an exception if more than one connection is checked out at a
    time. Useful for debugging code that is using more connections than desired.
  prefs: []
  type: TYPE_NORMAL
- en: The [`AssertionPool`](#sqlalchemy.pool.AssertionPool "sqlalchemy.pool.AssertionPool")
    class **is compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[dispose()](#sqlalchemy.pool.AssertionPool.dispose), [recreate()](#sqlalchemy.pool.AssertionPool.recreate)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.AssertionPool`](#sqlalchemy.pool.AssertionPool "sqlalchemy.pool.AssertionPool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of this pool.
  prefs: []
  type: TYPE_NORMAL
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.AssertionPool.dispose
    "sqlalchemy.pool.AssertionPool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: A Pool which does not pool connections.
  prefs: []
  type: TYPE_NORMAL
- en: Instead it literally opens and closes the underlying DB-API connection per each
    connection open/close.
  prefs: []
  type: TYPE_NORMAL
- en: Reconnect-related functions such as `recycle` and connection invalidation are
    not supported by this Pool implementation, since no connections are held persistently.
  prefs: []
  type: TYPE_NORMAL
- en: The [`NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool") class
    **is compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[dispose()](#sqlalchemy.pool.NullPool.dispose), [recreate()](#sqlalchemy.pool.NullPool.recreate)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of this pool.
  prefs: []
  type: TYPE_NORMAL
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.NullPool.dispose
    "sqlalchemy.pool.NullPool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: A Pool of exactly one connection, used for all requests.
  prefs: []
  type: TYPE_NORMAL
- en: Reconnect-related functions such as `recycle` and connection invalidation (which
    is also used to support auto-reconnect) are only partially supported right now
    and may not yield good results.
  prefs: []
  type: TYPE_NORMAL
- en: The [`StaticPool`](#sqlalchemy.pool.StaticPool "sqlalchemy.pool.StaticPool")
    class **is compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[dispose()](#sqlalchemy.pool.StaticPool.dispose), [recreate()](#sqlalchemy.pool.StaticPool.recreate)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.StaticPool`](#sqlalchemy.pool.StaticPool "sqlalchemy.pool.StaticPool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of this pool.
  prefs: []
  type: TYPE_NORMAL
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.StaticPool.dispose
    "sqlalchemy.pool.StaticPool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Common base for the two connection-management interfaces [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") and [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry").
  prefs: []
  type: TYPE_NORMAL
- en: These two objects are typically exposed in the public facing API via the connection
    pool event hooks, documented at [`PoolEvents`](events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[dbapi_connection](#sqlalchemy.pool.ManagesConnection.dbapi_connection), [driver_connection](#sqlalchemy.pool.ManagesConnection.driver_connection),
    [info](#sqlalchemy.pool.ManagesConnection.info), [invalidate()](#sqlalchemy.pool.ManagesConnection.invalidate),
    [record_info](#sqlalchemy.pool.ManagesConnection.record_info)'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: A reference to the actual DBAPI connection being tracked.
  prefs: []
  type: TYPE_NORMAL
- en: This is a [**PEP 249**](https://peps.python.org/pep-0249/)-compliant object
    that for traditional sync-style dialects is provided by the third-party DBAPI
    implementation in use. For asyncio dialects, the implementation is typically an
    adapter object provided by the SQLAlchemy dialect itself; the underlying asyncio
    object is available via the [`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy’s interface for the DBAPI connection is based on the [`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") protocol object
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The “driver level” connection object as used by the Python DBAPI or database
    driver.
  prefs: []
  type: TYPE_NORMAL
- en: For traditional [**PEP 249**](https://peps.python.org/pep-0249/) DBAPI implementations,
    this object will be the same object as that of [`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection"). For an asyncio database
    driver, this will be the ultimate “connection” object used by that driver, such
    as the `asyncpg.Connection` object which will not have standard pep-249 methods.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Info dictionary associated with the underlying DBAPI connection referred to
    by this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")
    instance, allowing user-defined data to be associated with the connection.
  prefs: []
  type: TYPE_NORMAL
- en: The data in this dictionary is persistent for the lifespan of the DBAPI connection
    itself, including across pool checkins and checkouts. When the connection is invalidated
    and replaced with a new one, this dictionary is cleared.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns a dictionary that is local to that [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"). Therefore the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") attribute will always provide a Python
    dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Mark the managed connection as invalidated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`e` – an exception object indicating a reason for the invalidation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`soft` – if True, the connection isn’t closed; instead, this connection will
    be recycled on next checkout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[More on Invalidation](#pool-connection-invalidation)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Persistent info dictionary associated with this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.ManagesConnection").
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary, the lifespan of this dictionary
    is that of the [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    which owns it; therefore this dictionary will persist across reconnects and connection
    invalidation for a particular entry in the connection pool.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns None. Contrast to the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary which is never None.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Interface for the object that maintains an individual database connection on
    behalf of a [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") instance.
  prefs: []
  type: TYPE_NORMAL
- en: The [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    object represents the long term maintainance of a particular connection for a
    pool, including expiring or invalidating that connection to have it replaced with
    a new one, which will continue to be maintained by that same [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") instance. Compared to [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection"), which is the short-term, per-checkout
    connection manager, this object lasts for the lifespan of a particular “slot”
    within a connection pool.
  prefs: []
  type: TYPE_NORMAL
- en: The [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    object is mostly visible to public-facing API code when it is delivered to connection
    pool event hooks, such as [`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") and [`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout").
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0: [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") provides the public facing interface for
    the [`_ConnectionRecord`](#sqlalchemy.pool._ConnectionRecord "sqlalchemy.pool._ConnectionRecord")
    internal class.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[close()](#sqlalchemy.pool.ConnectionPoolEntry.close), [dbapi_connection](#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection),
    [driver_connection](#sqlalchemy.pool.ConnectionPoolEntry.driver_connection), [in_use](#sqlalchemy.pool.ConnectionPoolEntry.in_use),
    [info](#sqlalchemy.pool.ConnectionPoolEntry.info), [invalidate()](#sqlalchemy.pool.ConnectionPoolEntry.invalidate),
    [record_info](#sqlalchemy.pool.ConnectionPoolEntry.record_info)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") ([`sqlalchemy.pool.base.ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Close the DBAPI connection managed by this connection pool entry.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: A reference to the actual DBAPI connection being tracked.
  prefs: []
  type: TYPE_NORMAL
- en: This is a [**PEP 249**](https://peps.python.org/pep-0249/)-compliant object
    that for traditional sync-style dialects is provided by the third-party DBAPI
    implementation in use. For asyncio dialects, the implementation is typically an
    adapter object provided by the SQLAlchemy dialect itself; the underlying asyncio
    object is available via the [`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy’s interface for the DBAPI connection is based on the [`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") protocol object
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The “driver level” connection object as used by the Python DBAPI or database
    driver.
  prefs: []
  type: TYPE_NORMAL
- en: For traditional [**PEP 249**](https://peps.python.org/pep-0249/) DBAPI implementations,
    this object will be the same object as that of [`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection"). For an asyncio database
    driver, this will be the ultimate “connection” object used by that driver, such
    as the `asyncpg.Connection` object which will not have standard pep-249 methods.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Return True the connection is currently checked out
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `ManagesConnection.info` *attribute of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  prefs: []
  type: TYPE_NORMAL
- en: Info dictionary associated with the underlying DBAPI connection referred to
    by this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")
    instance, allowing user-defined data to be associated with the connection.
  prefs: []
  type: TYPE_NORMAL
- en: The data in this dictionary is persistent for the lifespan of the DBAPI connection
    itself, including across pool checkins and checkouts. When the connection is invalidated
    and replaced with a new one, this dictionary is cleared.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns a dictionary that is local to that [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"). Therefore the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") attribute will always provide a Python
    dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `ManagesConnection.invalidate()` *method of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  prefs: []
  type: TYPE_NORMAL
- en: Mark the managed connection as invalidated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`e` – an exception object indicating a reason for the invalidation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`soft` – if True, the connection isn’t closed; instead, this connection will
    be recycled on next checkout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[More on Invalidation](#pool-connection-invalidation)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `ManagesConnection.record_info` *attribute of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  prefs: []
  type: TYPE_NORMAL
- en: Persistent info dictionary associated with this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.ManagesConnection").
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary, the lifespan of this dictionary
    is that of the [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    which owns it; therefore this dictionary will persist across reconnects and connection
    invalidation for a particular entry in the connection pool.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns None. Contrast to the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary which is never None.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: A connection-like adapter for a [**PEP 249**](https://peps.python.org/pep-0249/)
    DBAPI connection, which includes additional methods specific to the [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    is the public-facing interface for the internal [`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") implementation object; users familiar with
    [`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy "sqlalchemy.pool._ConnectionFairy")
    can consider this object to be equivalent.'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0: [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") provides the public- facing interface
    for the [`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy "sqlalchemy.pool._ConnectionFairy")
    internal class.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[close()](#sqlalchemy.pool.PoolProxiedConnection.close), [dbapi_connection](#sqlalchemy.pool.PoolProxiedConnection.dbapi_connection),
    [detach()](#sqlalchemy.pool.PoolProxiedConnection.detach), [driver_connection](#sqlalchemy.pool.PoolProxiedConnection.driver_connection),
    [info](#sqlalchemy.pool.PoolProxiedConnection.info), [invalidate()](#sqlalchemy.pool.PoolProxiedConnection.invalidate),
    [is_detached](#sqlalchemy.pool.PoolProxiedConnection.is_detached), [is_valid](#sqlalchemy.pool.PoolProxiedConnection.is_valid),
    [record_info](#sqlalchemy.pool.PoolProxiedConnection.record_info)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") ([`sqlalchemy.pool.base.ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Release this connection back to the pool.
  prefs: []
  type: TYPE_NORMAL
- en: The [`PoolProxiedConnection.close()`](#sqlalchemy.pool.PoolProxiedConnection.close
    "sqlalchemy.pool.PoolProxiedConnection.close") method shadows the [**PEP 249**](https://peps.python.org/pep-0249/)
    `.close()` method, altering its behavior to instead [release](../glossary.html#term-release)
    the proxied connection back to the connection pool.
  prefs: []
  type: TYPE_NORMAL
- en: Upon release to the pool, whether the connection stays “opened” and pooled in
    the Python process, versus actually closed out and removed from the Python process,
    is based on the pool implementation in use and its configuration and current state.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: A reference to the actual DBAPI connection being tracked.
  prefs: []
  type: TYPE_NORMAL
- en: This is a [**PEP 249**](https://peps.python.org/pep-0249/)-compliant object
    that for traditional sync-style dialects is provided by the third-party DBAPI
    implementation in use. For asyncio dialects, the implementation is typically an
    adapter object provided by the SQLAlchemy dialect itself; the underlying asyncio
    object is available via the [`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy’s interface for the DBAPI connection is based on the [`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") protocol object
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Separate this connection from its Pool.
  prefs: []
  type: TYPE_NORMAL
- en: This means that the connection will no longer be returned to the pool when closed,
    and will instead be literally closed. The associated [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") is de-associated from this DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: Note that any overall connection limiting constraints imposed by a Pool implementation
    may be violated after a detach, as the detached connection is removed from the
    pool’s knowledge and control.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: The “driver level” connection object as used by the Python DBAPI or database
    driver.
  prefs: []
  type: TYPE_NORMAL
- en: For traditional [**PEP 249**](https://peps.python.org/pep-0249/) DBAPI implementations,
    this object will be the same object as that of [`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection"). For an asyncio database
    driver, this will be the ultimate “connection” object used by that driver, such
    as the `asyncpg.Connection` object which will not have standard pep-249 methods.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `ManagesConnection.info` *attribute of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  prefs: []
  type: TYPE_NORMAL
- en: Info dictionary associated with the underlying DBAPI connection referred to
    by this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")
    instance, allowing user-defined data to be associated with the connection.
  prefs: []
  type: TYPE_NORMAL
- en: The data in this dictionary is persistent for the lifespan of the DBAPI connection
    itself, including across pool checkins and checkouts. When the connection is invalidated
    and replaced with a new one, this dictionary is cleared.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns a dictionary that is local to that [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"). Therefore the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") attribute will always provide a Python
    dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `ManagesConnection.invalidate()` *method of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  prefs: []
  type: TYPE_NORMAL
- en: Mark the managed connection as invalidated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`e` – an exception object indicating a reason for the invalidation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`soft` – if True, the connection isn’t closed; instead, this connection will
    be recycled on next checkout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[More on Invalidation](#pool-connection-invalidation)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") is detached from its pool.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") still refers to an active DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `ManagesConnection.record_info` *attribute of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  prefs: []
  type: TYPE_NORMAL
- en: Persistent info dictionary associated with this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.ManagesConnection").
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary, the lifespan of this dictionary
    is that of the [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    which owns it; therefore this dictionary will persist across reconnects and connection
    invalidation for a particular entry in the connection pool.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns None. Contrast to the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary which is never None.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Proxies a DBAPI connection and provides return-on-dereference support.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal object used by the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    implementation to provide context management to a DBAPI connection delivered by
    that [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"). The public facing
    interface for this class is described by the [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") class. See that class for public API
    details.
  prefs: []
  type: TYPE_NORMAL
- en: The name “fairy” is inspired by the fact that the [`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") object’s lifespan is transitory, as it lasts
    only for the length of a specific DBAPI connection being checked out from the
    pool, and additionally that as a transparent proxy, it is mostly invisible.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class `sqlalchemy.pool._ConnectionFairy` ([`sqlalchemy.pool.base.PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.base.PoolProxiedConnection"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Maintains a position in a connection pool which references a pooled connection.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal object used by the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    implementation to provide context management to a DBAPI connection maintained
    by that [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"). The public facing
    interface for this class is described by the [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") class. See that class for public API details.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class `sqlalchemy.pool._ConnectionRecord` ([`sqlalchemy.pool.base.ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.base.ConnectionPoolEntry"))
  prefs: []
  type: TYPE_NORMAL
- en: Connection Pool Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    returned by the [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    function in most cases has a [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    integrated, pre-configured with reasonable pooling defaults. If you’re reading
    this section only to learn how to enable pooling - congratulations! You’re already
    done.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    tuning parameters can be passed directly to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as keyword arguments: `pool_size`, `max_overflow`,
    `pool_recycle` and `pool_timeout`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: All SQLAlchemy pool implementations have in common that none of them “pre create”
    connections - all implementations wait until first use before creating a connection.
    At that point, if no additional concurrent checkout requests for more connections
    are made, no additional connections are created. This is why it’s perfectly fine
    for [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    to default to using a [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    of size five without regard to whether or not the application really needs five
    connections queued up - the pool would only grow to that size if the application
    actually used five connections concurrently, in which case the usage of a small
    pool is an entirely appropriate default behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") class
    is **not compatible with asyncio**. When using [`create_async_engine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") to create an instance of [`AsyncEngine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine"), the [`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") class, which makes use of an asyncio-compatible
    queue implementation, is used instead.
  prefs: []
  type: TYPE_NORMAL
- en: '## Switching Pool Implementations'
  prefs: []
  type: TYPE_NORMAL
- en: 'The usual way to use a different kind of pool with [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") is to use the `poolclass` argument. This argument
    accepts a class imported from the `sqlalchemy.pool` module, and handles the details
    of building the pool for you. A common use case here is when connection pooling
    is to be disabled, which can be achieved by using the [`NullPool`](#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Using a Custom Connection Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the section [Custom DBAPI connect() arguments / on-connect routines](engines.html#custom-dbapi-args)
    for a rundown of the various connection customization routines.
  prefs: []
  type: TYPE_NORMAL
- en: Constructing a Pool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use a [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") by itself,
    the `creator` function is the only argument that’s required and is passed first,
    followed by any additional options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'DBAPI connections can then be procured from the pool using the [`Pool.connect()`](#sqlalchemy.pool.Pool.connect
    "sqlalchemy.pool.Pool.connect") function. The return value of this method is a
    DBAPI connection that’s contained within a transparent proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'The purpose of the transparent proxy is to intercept the `close()` call, such
    that instead of the DBAPI connection being closed, it is returned to the pool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The proxy also returns its contained DBAPI connection to the pool when it is
    garbage collected, though it’s not deterministic in Python that this occurs immediately
    (though it is typical with cPython). This usage is not recommended however and
    in particular is not supported with asyncio DBAPI drivers.
  prefs: []
  type: TYPE_NORMAL
- en: '## Reset On Return'
  prefs: []
  type: TYPE_NORMAL
- en: The pool includes “reset on return” behavior which will call the `rollback()`
    method of the DBAPI connection when the connection is returned to the pool. This
    is so that any existing transactional state is removed from the connection, which
    includes not just uncommitted data but table and row locks as well. For most DBAPIs,
    the call to `rollback()` is inexpensive, and if the DBAPI has already completed
    a transaction, the method should be a no-op.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling Reset on Return for non-transactional connections
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For very specific cases where this `rollback()` is not useful, such as when
    using a connection that is configured for [autocommit](connections.html#dbapi-autocommit-understanding)
    or when using a database that has no ACID capabilities such as the MyISAM engine
    of MySQL, the reset-on-return behavior can be disabled, which is typically done
    for performance reasons. This can be affected by using the [`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter of [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"),
    which is also available from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine"), passing a value of `None`. This is illustrated in
    the example below, in conjunction with the [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter setting of `AUTOCOMMIT`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: The above engine won’t actually perform ROLLBACK when connections are returned
    to the pool; since AUTOCOMMIT is enabled, the driver will also not perform any
    BEGIN operation.
  prefs: []
  type: TYPE_NORMAL
- en: Custom Reset-on-Return Schemes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: “reset on return” consisting of a single `rollback()` may not be sufficient
    for some use cases; in particular, applications which make use of temporary tables
    may wish for these tables to be automatically removed on connection checkin. Some
    (but notably not all) backends include features that can “reset” such tables within
    the scope of a database connection, which may be a desirable behavior for connection
    pool reset. Other server resources such as prepared statement handles and server-side
    statement caches may persist beyond the checkin process, which may or may not
    be desirable, depending on specifics. Again, some (but again not all) backends
    may provide for a means of resetting this state. The two SQLAlchemy included dialects
    which are known to have such reset schemes include Microsoft SQL Server, where
    an undocumented but widely known stored procedure called `sp_reset_connection`
    is often used, and PostgreSQL, which has a well-documented series of commands
    including `DISCARD` `RESET`, `DEALLOCATE`, and `UNLISTEN`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example illustrates how to replace reset on return with the Microsoft
    SQL Server `sp_reset_connection` stored procedure, using the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event hook. The [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") parameter is set to `None` so that the custom scheme
    can replace the default behavior completely. The custom hook implementation calls
    `.rollback()` in any case, as it’s usually important that the DBAPI’s own tracking
    of commit/rollback will remain consistent with the state of the transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 2.0.0b3: Added additional state arguments to the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event and additionally ensured the event
    is invoked for all “reset” occurrences, so that it’s appropriate as a place for
    custom “reset” handlers. Previous schemes which use the [`PoolEvents.checkin()`](events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") handler remain usable as well.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Temporary Table / Resource Reset for Connection Pooling](../dialects/mssql.html#mssql-reset-on-return)
    - in the [Microsoft SQL Server](../dialects/mssql.html) documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Temporary Table / Resource Reset for Connection Pooling](../dialects/postgresql.html#postgresql-reset-on-return)
    in the [PostgreSQL](../dialects/postgresql.html) documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging reset-on-return events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Logging for pool events including reset on return can be set `logging.DEBUG`
    log level along with the `sqlalchemy.pool` logger, or by setting [`create_engine.echo_pool`](engines.html#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") to `"debug"` when using [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The above pool will show verbose logging including reset on return:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Disabling Reset on Return for non-transactional connections
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For very specific cases where this `rollback()` is not useful, such as when
    using a connection that is configured for [autocommit](connections.html#dbapi-autocommit-understanding)
    or when using a database that has no ACID capabilities such as the MyISAM engine
    of MySQL, the reset-on-return behavior can be disabled, which is typically done
    for performance reasons. This can be affected by using the [`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter of [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"),
    which is also available from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine"), passing a value of `None`. This is illustrated in
    the example below, in conjunction with the [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter setting of `AUTOCOMMIT`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: The above engine won’t actually perform ROLLBACK when connections are returned
    to the pool; since AUTOCOMMIT is enabled, the driver will also not perform any
    BEGIN operation.
  prefs: []
  type: TYPE_NORMAL
- en: Custom Reset-on-Return Schemes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: “reset on return” consisting of a single `rollback()` may not be sufficient
    for some use cases; in particular, applications which make use of temporary tables
    may wish for these tables to be automatically removed on connection checkin. Some
    (but notably not all) backends include features that can “reset” such tables within
    the scope of a database connection, which may be a desirable behavior for connection
    pool reset. Other server resources such as prepared statement handles and server-side
    statement caches may persist beyond the checkin process, which may or may not
    be desirable, depending on specifics. Again, some (but again not all) backends
    may provide for a means of resetting this state. The two SQLAlchemy included dialects
    which are known to have such reset schemes include Microsoft SQL Server, where
    an undocumented but widely known stored procedure called `sp_reset_connection`
    is often used, and PostgreSQL, which has a well-documented series of commands
    including `DISCARD` `RESET`, `DEALLOCATE`, and `UNLISTEN`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example illustrates how to replace reset on return with the Microsoft
    SQL Server `sp_reset_connection` stored procedure, using the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event hook. The [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") parameter is set to `None` so that the custom scheme
    can replace the default behavior completely. The custom hook implementation calls
    `.rollback()` in any case, as it’s usually important that the DBAPI’s own tracking
    of commit/rollback will remain consistent with the state of the transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 2.0.0b3: Added additional state arguments to the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event and additionally ensured the event
    is invoked for all “reset” occurrences, so that it’s appropriate as a place for
    custom “reset” handlers. Previous schemes which use the [`PoolEvents.checkin()`](events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") handler remain usable as well.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Temporary Table / Resource Reset for Connection Pooling](../dialects/mssql.html#mssql-reset-on-return)
    - in the [Microsoft SQL Server](../dialects/mssql.html) documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Temporary Table / Resource Reset for Connection Pooling](../dialects/postgresql.html#postgresql-reset-on-return)
    in the [PostgreSQL](../dialects/postgresql.html) documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging reset-on-return events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Logging for pool events including reset on return can be set `logging.DEBUG`
    log level along with the `sqlalchemy.pool` logger, or by setting [`create_engine.echo_pool`](engines.html#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") to `"debug"` when using [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'The above pool will show verbose logging including reset on return:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Pool Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Connection pools support an event interface that allows hooks to execute upon
    first connect, upon each new connection, and upon checkout and checkin of connections.
    See [`PoolEvents`](events.html#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: '## Dealing with Disconnects'
  prefs: []
  type: TYPE_NORMAL
- en: The connection pool has the ability to refresh individual connections as well
    as its entire set of connections, setting the previously pooled connections as
    “invalid”. A common use case is allow the connection pool to gracefully recover
    when the database server has been restarted, and all previously established connections
    are no longer functional. There are two approaches to this.
  prefs: []
  type: TYPE_NORMAL
- en: '### Disconnect Handling - Pessimistic'
  prefs: []
  type: TYPE_NORMAL
- en: The pessimistic approach refers to emitting a test statement on the SQL connection
    at the start of each connection pool checkout, to test that the database connection
    is still viable. The implementation is dialect-specific, and makes use of either
    a DBAPI-specific ping method, or by using a simple SQL statement like “SELECT
    1”, in order to test the connection for liveness.
  prefs: []
  type: TYPE_NORMAL
- en: The approach adds a small bit of overhead to the connection checkout process,
    however is otherwise the most simple and reliable approach to completely eliminating
    database errors due to stale pooled connections. The calling application does
    not need to be concerned about organizing operations to be able to recover from
    stale connections checked out from the pool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pessimistic testing of connections upon checkout is achievable by using the
    [`Pool.pre_ping`](#sqlalchemy.pool.Pool.params.pre_ping "sqlalchemy.pool.Pool")
    argument, available from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") via the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: The “pre ping” feature operates on a per-dialect basis either by invoking a
    DBAPI-specific “ping” method, or if not available will emit SQL equivalent to
    “SELECT 1”, catching any errors and detecting the error as a “disconnect” situation.
    If the ping / error check determines that the connection is not usable, the connection
    will be immediately recycled, and all other pooled connections older than the
    current time are invalidated, so that the next time they are checked out, they
    will also be recycled before use.
  prefs: []
  type: TYPE_NORMAL
- en: If the database is still not available when “pre ping” runs, then the initial
    connect will fail and the error for failure to connect will be propagated normally.
    In the uncommon situation that the database is available for connections, but
    is not able to respond to a “ping”, the “pre_ping” will try up to three times
    before giving up, propagating the database error last received.
  prefs: []
  type: TYPE_NORMAL
- en: It is critical to note that the pre-ping approach **does not accommodate for
    connections dropped in the middle of transactions or other SQL operations**. If
    the database becomes unavailable while a transaction is in progress, the transaction
    will be lost and the database error will be raised. While the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object will detect a “disconnect” situation and
    recycle the connection as well as invalidate the rest of the connection pool when
    this condition occurs, the individual operation where the exception was raised
    will be lost, and it’s up to the application to either abandon the operation,
    or retry the whole transaction again. If the engine is configured using DBAPI-level
    autocommit connections, as described at [Setting Transaction Isolation Levels
    including DBAPI Autocommit](connections.html#dbapi-autocommit), a connection **may**
    be reconnected transparently mid-operation using events. See the section [How
    Do I “Retry” a Statement Execution Automatically?](../faq/connections.html#faq-execute-retry)
    for an example.
  prefs: []
  type: TYPE_NORMAL
- en: For dialects that make use of “SELECT 1” and catch errors in order to detect
    disconnects, the disconnection test may be augmented for new backend-specific
    error messages using the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") hook.
  prefs: []
  type: TYPE_NORMAL
- en: '#### Custom / Legacy Pessimistic Ping'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") was added, the “pre-ping” approach historically has
    been performed manually using the [`ConnectionEvents.engine_connect()`](events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") engine event. The most common
    recipe for this is below, for reference purposes in case an application is already
    using such a recipe, or special behaviors are needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: The above recipe has the advantage that we are making use of SQLAlchemy’s facilities
    for detecting those DBAPI exceptions that are known to indicate a “disconnect”
    situation, as well as the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object’s ability to correctly invalidate the current
    connection pool when this condition occurs and allowing the current [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") to re-validate onto a new DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: Disconnect Handling - Optimistic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When pessimistic handling is not employed, as well as when the database is shutdown
    and/or restarted in the middle of a connection’s period of use within a transaction,
    the other approach to dealing with stale / closed connections is to let SQLAlchemy
    handle disconnects as they occur, at which point all connections in the pool are
    invalidated, meaning they are assumed to be stale and will be refreshed upon next
    checkout. This behavior assumes the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    is used in conjunction with a [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). The [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") has logic which can detect disconnection events and
    refresh the pool automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    attempts to use a DBAPI connection, and an exception is raised that corresponds
    to a “disconnect” event, the connection is invalidated. The [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") then calls the [`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate
    "sqlalchemy.pool.Pool.recreate") method, effectively invalidating all connections
    not currently checked out so that they are replaced with new ones upon next checkout.
    This flow is illustrated by the code example below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: The above example illustrates that no special intervention is needed to refresh
    the pool, which continues normally after a disconnection event is detected. However,
    one database exception is raised, per each connection that is in use while the
    database unavailability event occurred. In a typical web application using an
    ORM Session, the above condition would correspond to a single request failing
    with a 500 error, then the web application continuing normally beyond that. Hence
    the approach is “optimistic” in that frequent database restarts are not anticipated.
  prefs: []
  type: TYPE_NORMAL
- en: '#### Setting Pool Recycle'
  prefs: []
  type: TYPE_NORMAL
- en: 'An additional setting that can augment the “optimistic” approach is to set
    the pool recycle parameter. This parameter prevents the pool from using a particular
    connection that has passed a certain age, and is appropriate for database backends
    such as MySQL that automatically close connections that have been stale after
    a particular period of time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Above, any DBAPI connection that has been open for more than one hour will
    be invalidated and replaced, upon next checkout. Note that the invalidation **only**
    occurs during checkout - not on any connections that are held in a checked out
    state. `pool_recycle` is a function of the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    itself, independent of whether or not an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is in use.  ### More on Invalidation'
  prefs: []
  type: TYPE_NORMAL
- en: The [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") provides “connection
    invalidation” services which allow both explicit invalidation of a connection
    as well as automatic invalidation in response to conditions that are determined
    to render a connection unusable.
  prefs: []
  type: TYPE_NORMAL
- en: “Invalidation” means that a particular DBAPI connection is removed from the
    pool and discarded. The `.close()` method is called on this connection if it is
    not clear that the connection itself might not be closed, however if this method
    fails, the exception is logged but the operation still proceeds.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using a [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    the [`Connection.invalidate()`](connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method is the usual entrypoint to explicit
    invalidation. Other conditions by which a DBAPI connection might be invalidated
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: a DBAPI exception such as [`OperationalError`](exceptions.html#sqlalchemy.exc.OperationalError
    "sqlalchemy.exc.OperationalError"), raised when a method like `connection.execute()`
    is called, is detected as indicating a so-called “disconnect” condition. As the
    Python DBAPI provides no standard system for determining the nature of an exception,
    all SQLAlchemy dialects include a system called `is_disconnect()` which will examine
    the contents of an exception object, including the string message and any potential
    error codes included with it, in order to determine if this exception indicates
    that the connection is no longer usable. If this is the case, the `_ConnectionFairy.invalidate()`
    method is called and the DBAPI connection is then discarded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the connection is returned to the pool, and calling the `connection.rollback()`
    or `connection.commit()` methods, as dictated by the pool’s “reset on return”
    behavior, throws an exception. A final attempt at calling `.close()` on the connection
    will be made, and it is then discarded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a listener implementing [`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") raises the [`DisconnectionError`](exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError") exception, indicating that the connection
    won’t be usable and a new connection attempt needs to be made.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All invalidations which occur will invoke the [`PoolEvents.invalidate()`](events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate") event.  ### Supporting new database
    error codes for disconnect scenarios'
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy dialects each include a routine called `is_disconnect()` that is
    invoked whenever a DBAPI exception is encountered. The DBAPI exception object
    is passed to this method, where dialect-specific heuristics will then determine
    if the error code received indicates that the database connection has been “disconnected”,
    or is in an otherwise unusable state which indicates it should be recycled. The
    heuristics applied here may be customized using the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook, which is typically
    established via the owning [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object. Using this hook, all errors which occur are
    delivered passing along a contextual object known as [`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext"). Custom event hooks may control whether
    or not a particular error should be considered a “disconnect” situation or not,
    as well as if this disconnect should cause the entire connection pool to be invalidated
    or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to add support to consider the Oracle error codes `DPY-1001` and
    `DPY-4011` to be handled as disconnect codes, apply an event handler to the engine
    after creation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: The above error processing function will be invoked for all Oracle errors raised,
    including those caught when using the [pool pre ping](#pool-disconnects-pessimistic)
    feature for those backends that rely upon disconnect error handling (new in 2.0).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")  ### Disconnect Handling - Pessimistic'
  prefs: []
  type: TYPE_NORMAL
- en: The pessimistic approach refers to emitting a test statement on the SQL connection
    at the start of each connection pool checkout, to test that the database connection
    is still viable. The implementation is dialect-specific, and makes use of either
    a DBAPI-specific ping method, or by using a simple SQL statement like “SELECT
    1”, in order to test the connection for liveness.
  prefs: []
  type: TYPE_NORMAL
- en: The approach adds a small bit of overhead to the connection checkout process,
    however is otherwise the most simple and reliable approach to completely eliminating
    database errors due to stale pooled connections. The calling application does
    not need to be concerned about organizing operations to be able to recover from
    stale connections checked out from the pool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pessimistic testing of connections upon checkout is achievable by using the
    [`Pool.pre_ping`](#sqlalchemy.pool.Pool.params.pre_ping "sqlalchemy.pool.Pool")
    argument, available from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") via the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: The “pre ping” feature operates on a per-dialect basis either by invoking a
    DBAPI-specific “ping” method, or if not available will emit SQL equivalent to
    “SELECT 1”, catching any errors and detecting the error as a “disconnect” situation.
    If the ping / error check determines that the connection is not usable, the connection
    will be immediately recycled, and all other pooled connections older than the
    current time are invalidated, so that the next time they are checked out, they
    will also be recycled before use.
  prefs: []
  type: TYPE_NORMAL
- en: If the database is still not available when “pre ping” runs, then the initial
    connect will fail and the error for failure to connect will be propagated normally.
    In the uncommon situation that the database is available for connections, but
    is not able to respond to a “ping”, the “pre_ping” will try up to three times
    before giving up, propagating the database error last received.
  prefs: []
  type: TYPE_NORMAL
- en: It is critical to note that the pre-ping approach **does not accommodate for
    connections dropped in the middle of transactions or other SQL operations**. If
    the database becomes unavailable while a transaction is in progress, the transaction
    will be lost and the database error will be raised. While the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object will detect a “disconnect” situation and
    recycle the connection as well as invalidate the rest of the connection pool when
    this condition occurs, the individual operation where the exception was raised
    will be lost, and it’s up to the application to either abandon the operation,
    or retry the whole transaction again. If the engine is configured using DBAPI-level
    autocommit connections, as described at [Setting Transaction Isolation Levels
    including DBAPI Autocommit](connections.html#dbapi-autocommit), a connection **may**
    be reconnected transparently mid-operation using events. See the section [How
    Do I “Retry” a Statement Execution Automatically?](../faq/connections.html#faq-execute-retry)
    for an example.
  prefs: []
  type: TYPE_NORMAL
- en: For dialects that make use of “SELECT 1” and catch errors in order to detect
    disconnects, the disconnection test may be augmented for new backend-specific
    error messages using the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") hook.
  prefs: []
  type: TYPE_NORMAL
- en: '#### Custom / Legacy Pessimistic Ping'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") was added, the “pre-ping” approach historically has
    been performed manually using the [`ConnectionEvents.engine_connect()`](events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") engine event. The most common
    recipe for this is below, for reference purposes in case an application is already
    using such a recipe, or special behaviors are needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'The above recipe has the advantage that we are making use of SQLAlchemy’s facilities
    for detecting those DBAPI exceptions that are known to indicate a “disconnect”
    situation, as well as the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object’s ability to correctly invalidate the current
    connection pool when this condition occurs and allowing the current [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") to re-validate onto a new DBAPI connection.  ####
    Custom / Legacy Pessimistic Ping'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") was added, the “pre-ping” approach historically has
    been performed manually using the [`ConnectionEvents.engine_connect()`](events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") engine event. The most common
    recipe for this is below, for reference purposes in case an application is already
    using such a recipe, or special behaviors are needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: The above recipe has the advantage that we are making use of SQLAlchemy’s facilities
    for detecting those DBAPI exceptions that are known to indicate a “disconnect”
    situation, as well as the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object’s ability to correctly invalidate the current
    connection pool when this condition occurs and allowing the current [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") to re-validate onto a new DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: Disconnect Handling - Optimistic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When pessimistic handling is not employed, as well as when the database is shutdown
    and/or restarted in the middle of a connection’s period of use within a transaction,
    the other approach to dealing with stale / closed connections is to let SQLAlchemy
    handle disconnects as they occur, at which point all connections in the pool are
    invalidated, meaning they are assumed to be stale and will be refreshed upon next
    checkout. This behavior assumes the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    is used in conjunction with a [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). The [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") has logic which can detect disconnection events and
    refresh the pool automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    attempts to use a DBAPI connection, and an exception is raised that corresponds
    to a “disconnect” event, the connection is invalidated. The [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") then calls the [`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate
    "sqlalchemy.pool.Pool.recreate") method, effectively invalidating all connections
    not currently checked out so that they are replaced with new ones upon next checkout.
    This flow is illustrated by the code example below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: The above example illustrates that no special intervention is needed to refresh
    the pool, which continues normally after a disconnection event is detected. However,
    one database exception is raised, per each connection that is in use while the
    database unavailability event occurred. In a typical web application using an
    ORM Session, the above condition would correspond to a single request failing
    with a 500 error, then the web application continuing normally beyond that. Hence
    the approach is “optimistic” in that frequent database restarts are not anticipated.
  prefs: []
  type: TYPE_NORMAL
- en: '#### Setting Pool Recycle'
  prefs: []
  type: TYPE_NORMAL
- en: 'An additional setting that can augment the “optimistic” approach is to set
    the pool recycle parameter. This parameter prevents the pool from using a particular
    connection that has passed a certain age, and is appropriate for database backends
    such as MySQL that automatically close connections that have been stale after
    a particular period of time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Above, any DBAPI connection that has been open for more than one hour will
    be invalidated and replaced, upon next checkout. Note that the invalidation **only**
    occurs during checkout - not on any connections that are held in a checked out
    state. `pool_recycle` is a function of the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    itself, independent of whether or not an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is in use.  #### Setting Pool Recycle'
  prefs: []
  type: TYPE_NORMAL
- en: 'An additional setting that can augment the “optimistic” approach is to set
    the pool recycle parameter. This parameter prevents the pool from using a particular
    connection that has passed a certain age, and is appropriate for database backends
    such as MySQL that automatically close connections that have been stale after
    a particular period of time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Above, any DBAPI connection that has been open for more than one hour will be
    invalidated and replaced, upon next checkout. Note that the invalidation **only**
    occurs during checkout - not on any connections that are held in a checked out
    state. `pool_recycle` is a function of the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    itself, independent of whether or not an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is in use.
  prefs: []
  type: TYPE_NORMAL
- en: '### More on Invalidation'
  prefs: []
  type: TYPE_NORMAL
- en: The [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") provides “connection
    invalidation” services which allow both explicit invalidation of a connection
    as well as automatic invalidation in response to conditions that are determined
    to render a connection unusable.
  prefs: []
  type: TYPE_NORMAL
- en: “Invalidation” means that a particular DBAPI connection is removed from the
    pool and discarded. The `.close()` method is called on this connection if it is
    not clear that the connection itself might not be closed, however if this method
    fails, the exception is logged but the operation still proceeds.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using a [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    the [`Connection.invalidate()`](connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method is the usual entrypoint to explicit
    invalidation. Other conditions by which a DBAPI connection might be invalidated
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: a DBAPI exception such as [`OperationalError`](exceptions.html#sqlalchemy.exc.OperationalError
    "sqlalchemy.exc.OperationalError"), raised when a method like `connection.execute()`
    is called, is detected as indicating a so-called “disconnect” condition. As the
    Python DBAPI provides no standard system for determining the nature of an exception,
    all SQLAlchemy dialects include a system called `is_disconnect()` which will examine
    the contents of an exception object, including the string message and any potential
    error codes included with it, in order to determine if this exception indicates
    that the connection is no longer usable. If this is the case, the `_ConnectionFairy.invalidate()`
    method is called and the DBAPI connection is then discarded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the connection is returned to the pool, and calling the `connection.rollback()`
    or `connection.commit()` methods, as dictated by the pool’s “reset on return”
    behavior, throws an exception. A final attempt at calling `.close()` on the connection
    will be made, and it is then discarded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a listener implementing [`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") raises the [`DisconnectionError`](exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError") exception, indicating that the connection
    won’t be usable and a new connection attempt needs to be made.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All invalidations which occur will invoke the [`PoolEvents.invalidate()`](events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate") event.
  prefs: []
  type: TYPE_NORMAL
- en: '### Supporting new database error codes for disconnect scenarios'
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy dialects each include a routine called `is_disconnect()` that is
    invoked whenever a DBAPI exception is encountered. The DBAPI exception object
    is passed to this method, where dialect-specific heuristics will then determine
    if the error code received indicates that the database connection has been “disconnected”,
    or is in an otherwise unusable state which indicates it should be recycled. The
    heuristics applied here may be customized using the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook, which is typically
    established via the owning [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object. Using this hook, all errors which occur are
    delivered passing along a contextual object known as [`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext"). Custom event hooks may control whether
    or not a particular error should be considered a “disconnect” situation or not,
    as well as if this disconnect should cause the entire connection pool to be invalidated
    or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to add support to consider the Oracle error codes `DPY-1001` and
    `DPY-4011` to be handled as disconnect codes, apply an event handler to the engine
    after creation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: The above error processing function will be invoked for all Oracle errors raised,
    including those caught when using the [pool pre ping](#pool-disconnects-pessimistic)
    feature for those backends that rely upon disconnect error handling (new in 2.0).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")'
  prefs: []
  type: TYPE_NORMAL
- en: '## Using FIFO vs. LIFO'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") class
    features a flag called [`QueuePool.use_lifo`](#sqlalchemy.pool.QueuePool.params.use_lifo
    "sqlalchemy.pool.QueuePool"), which can also be accessed from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") via the flag [`create_engine.pool_use_lifo`](engines.html#sqlalchemy.create_engine.params.pool_use_lifo
    "sqlalchemy.create_engine"). Setting this flag to `True` causes the pool’s “queue”
    behavior to instead be that of a “stack”, e.g. the last connection to be returned
    to the pool is the first one to be used on the next request. In contrast to the
    pool’s long- standing behavior of first-in-first-out, which produces a round-robin
    effect of using each connection in the pool in series, lifo mode allows excess
    connections to remain idle in the pool, allowing server-side timeout schemes to
    close these connections out. The difference between FIFO and LIFO is basically
    whether or not its desirable for the pool to keep a full set of connections ready
    to go even during idle periods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Above, we also make use of the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") flag so that connections which are closed from the
    server side are gracefully handled by the connection pool and replaced with a
    new connection.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the flag only applies to [`QueuePool`](#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") use.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Dealing with Disconnects](#pool-disconnects)'
  prefs: []
  type: TYPE_NORMAL
- en: '## Using Connection Pools with Multiprocessing or os.fork()'
  prefs: []
  type: TYPE_NORMAL
- en: It’s critical that when using a connection pool, and by extension when using
    an [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    created via [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine"),
    that the pooled connections **are not shared to a forked process**. TCP connections
    are represented as file descriptors, which usually work across process boundaries,
    meaning this will cause concurrent access to the file descriptor on behalf of
    two or more entirely independent Python interpreter states.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on specifics of the driver and OS, the issues that arise here range
    from non-working connections to socket connections that are used by multiple processes
    concurrently, leading to broken messaging (the latter case is typically the most
    common).
  prefs: []
  type: TYPE_NORMAL
- en: 'The SQLAlchemy [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    object refers to a connection pool of existing database connections. So when this
    object is replicated to a child process, the goal is to ensure that no database
    connections are carried over. There are four general approaches to this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Disable pooling using [`NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool").
    This is the most simplistic, one shot system that prevents the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") from using any connection more than once:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") on any given [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), passing the [`Engine.dispose.close`](connections.html#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose") parameter with a value of `False`, within
    the initialize phase of the child process. This is so that the new process will
    not touch any of the parent process’ connections and will instead start with new
    connections. **This is the recommended approach**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'New in version 1.4.33: Added the [`Engine.dispose.close`](connections.html#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose") parameter to allow the replacement of a connection
    pool in a child process without interfering with the connections used by the parent
    process.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Call [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") **directly before** the child process is created.
    This will also cause the child process to start with a new connection pool, while
    ensuring the parent connections are not transferred to the child process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'An event handler can be applied to the connection pool that tests for connections
    being shared across process boundaries, and invalidates them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Above, we use an approach similar to that described in [Disconnect Handling
    - Pessimistic](#pool-disconnects-pessimistic) to treat a DBAPI connection that
    originated in a different parent process as an “invalid” connection, coercing
    the pool to recycle the connection record to make a new connection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The above strategies will accommodate the case of an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") being shared among processes. The above steps alone
    are not sufficient for the case of sharing a specific [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") over a process boundary; prefer to keep the scope
    of a particular [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    local to a single process (and thread). It’s additionally not supported to share
    any kind of ongoing transactional state directly across a process boundary, such
    as an ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object that’s begun a transaction and references active `Connection` instances;
    again prefer to create new [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects in new processes.
  prefs: []
  type: TYPE_NORMAL
- en: Using a pool instance directly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A pool implementation can be used directly without an engine. This could be
    used in applications that just wish to use the pool behavior without all other
    SQLAlchemy features. In the example below the default pool for the `MySQLdb` dialect
    is obtained using [`create_pool_from_url()`](engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'If the type of pool to create is not specified, the default one for the dialect
    will be used. To specify it directly the `poolclass` argument can be used, like
    in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '## API Documentation - Available Pool Implementations'
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [_ConnectionFairy](#sqlalchemy.pool._ConnectionFairy) | Proxies a DBAPI connection
    and provides return-on-dereference support. |'
  prefs: []
  type: TYPE_TB
- en: '| [_ConnectionRecord](#sqlalchemy.pool._ConnectionRecord) | Maintains a position
    in a connection pool which references a pooled connection. |'
  prefs: []
  type: TYPE_TB
- en: '| [AssertionPool](#sqlalchemy.pool.AssertionPool) | A [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") that allows at most one checked out connection at any
    given time. |'
  prefs: []
  type: TYPE_TB
- en: '| [AsyncAdaptedQueuePool](#sqlalchemy.pool.AsyncAdaptedQueuePool) | An asyncio-compatible
    version of [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [ConnectionPoolEntry](#sqlalchemy.pool.ConnectionPoolEntry) | Interface for
    the object that maintains an individual database connection on behalf of a [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [ManagesConnection](#sqlalchemy.pool.ManagesConnection) | Common base for
    the two connection-management interfaces [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") and [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"). |'
  prefs: []
  type: TYPE_TB
- en: '| [NullPool](#sqlalchemy.pool.NullPool) | A Pool which does not pool connections.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Pool](#sqlalchemy.pool.Pool) | Abstract base class for connection pools.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [PoolProxiedConnection](#sqlalchemy.pool.PoolProxiedConnection) | A connection-like
    adapter for a [**PEP 249**](https://peps.python.org/pep-0249/) DBAPI connection,
    which includes additional methods specific to the [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") implementation. |'
  prefs: []
  type: TYPE_TB
- en: '| [QueuePool](#sqlalchemy.pool.QueuePool) | A [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") that imposes a limit on the number of open connections.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [SingletonThreadPool](#sqlalchemy.pool.SingletonThreadPool) | A Pool that
    maintains one connection per thread. |'
  prefs: []
  type: TYPE_TB
- en: '| [StaticPool](#sqlalchemy.pool.StaticPool) | A Pool of exactly one connection,
    used for all requests. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Abstract base class for connection pools.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.pool.Pool.__init__), [connect()](#sqlalchemy.pool.Pool.connect),
    [dispose()](#sqlalchemy.pool.Pool.dispose), [recreate()](#sqlalchemy.pool.Pool.recreate)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    ([`sqlalchemy.log.Identified`](internals.html#sqlalchemy.log.Identified "sqlalchemy.log.Identified"),
    `sqlalchemy.event.registry.EventTarget`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Construct a Pool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`creator` – a callable function that returns a DB-API connection object. The
    function will be called with parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recycle` – If set to a value other than -1, number of seconds between connection
    recycling, which means upon checkout, if this timeout is surpassed the connection
    will be closed and replaced with a newly opened connection. Defaults to -1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logging_name` – String identifier which will be used within the “name” field
    of logging records generated within the “sqlalchemy.pool” logger. Defaults to
    a hexstring of the object’s id.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`echo` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, the connection pool will log informational output such as when connections
    are invalidated as well as when connections are recycled to the default log handler,
    which defaults to `sys.stdout` for output.. If set to the string `"debug"`, the
    logging will include pool checkouts and checkins.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The [`Pool.echo`](#sqlalchemy.pool.Pool.params.echo "sqlalchemy.pool.Pool")
    parameter can also be set from the [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") call by using the [`create_engine.echo_pool`](engines.html#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Configuring Logging](engines.html#dbengine-logging) - further detail on how
    to configure logging.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`reset_on_return` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine steps to take on connections as they are returned to the pool, which
    were not otherwise handled by a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). Available from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") via the [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") parameter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return "sqlalchemy.pool.Pool")
    can have any of these values:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"rollback"` - call rollback() on the connection, to release locks and transaction
    resources. This is the default value. The vast majority of use cases should leave
    this value set.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"commit"` - call commit() on the connection, to release locks and transaction
    resources. A commit here may be desirable for databases that cache query plans
    if a commit is emitted, such as Microsoft SQL Server. However, this value is more
    dangerous than ‘rollback’ because any data changes present on the transaction
    are committed unconditionally.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`None` - don’t do anything on the connection. This setting may be appropriate
    if the database / DBAPI works in pure “autocommit” mode at all times, or if a
    custom reset handler is established using the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event handler.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True` - same as ‘rollback’, this is here for backwards compatibility.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False` - same as None, this is here for backwards compatibility.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For further customization of reset on return, the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event hook may be used which can perform
    any connection activity desired on reset.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Reset On Return](#pool-reset-on-return)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`events` – a list of 2-tuples, each of the form `(callable, target)` which
    will be passed to [`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    upon construction. Provided here so that event listeners can be assigned via [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") before dialect-level listeners are applied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialect` – a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    that will handle the job of calling rollback(), close(), or commit() on DBAPI
    connections. If omitted, a built-in “stub” dialect is used. Applications that
    make use of [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    should not use this parameter as it is handled by the engine creation strategy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pre_ping` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if True, the pool will emit a “ping” (typically “SELECT 1”, but is dialect-specific)
    on the connection upon checkout, to test if the connection is alive or not. If
    not, the connection is transparently re-connected and upon success, all other
    pooled connections established prior to that timestamp are invalidated. Requires
    that a dialect is passed as well to interpret the disconnection error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Return a DBAPI connection from the pool.
  prefs: []
  type: TYPE_NORMAL
- en: The connection is instrumented such that when its `close()` method is called,
    the connection will be returned to the pool.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of this pool.
  prefs: []
  type: TYPE_NORMAL
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.Pool.dispose
    "sqlalchemy.pool.Pool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: A [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") that imposes a limit
    on the number of open connections.
  prefs: []
  type: TYPE_NORMAL
- en: '[`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") is the
    default pooling implementation used for all [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects other than SQLite with a `:memory:` database.'
  prefs: []
  type: TYPE_NORMAL
- en: The [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") class
    **is not compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"). The [`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") class is used automatically when using
    [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"), if no other kind of pool is specified.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool "sqlalchemy.pool.AsyncAdaptedQueuePool")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.pool.QueuePool.__init__), [dispose()](#sqlalchemy.pool.QueuePool.dispose),
    [recreate()](#sqlalchemy.pool.QueuePool.recreate)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Construct a QueuePool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`creator` – a callable function that returns a DB-API connection object, same
    as that of [`Pool.creator`](#sqlalchemy.pool.Pool.params.creator "sqlalchemy.pool.Pool").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pool_size` – The size of the pool to be maintained, defaults to 5\. This is
    the largest number of connections that will be kept persistently in the pool.
    Note that the pool begins with no connections; once this number of connections
    is requested, that number of connections will remain. `pool_size` can be set to
    0 to indicate no size limit; to disable pooling, use a [`NullPool`](#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_overflow` – The maximum overflow size of the pool. When the number of
    checked-out connections reaches the size set in pool_size, additional connections
    will be returned up to this limit. When those additional connections are returned
    to the pool, they are disconnected and discarded. It follows then that the total
    number of simultaneous connections the pool will allow is pool_size + max_overflow,
    and the total number of “sleeping” connections the pool will allow is pool_size.
    max_overflow can be set to -1 to indicate no overflow limit; no limit will be
    placed on the total number of concurrent connections. Defaults to 10.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timeout` – The number of seconds to wait before giving up on returning a connection.
    Defaults to 30.0\. This can be a float but is subject to the limitations of Python
    time functions which may not be reliable in the tens of milliseconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_lifo` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: use LIFO (last-in-first-out) when retrieving connections instead of FIFO (first-in-first-out).
    Using LIFO, a server-side timeout scheme can reduce the number of connections
    used during non-peak periods of use. When planning for server-side timeouts, ensure
    that a recycle or pre-ping strategy is in use to gracefully handle stale connections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Using FIFO vs. LIFO](#pool-use-lifo)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Dealing with Disconnects](#pool-disconnects)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**kw` – Other keyword arguments including [`Pool.recycle`](#sqlalchemy.pool.Pool.params.recycle
    "sqlalchemy.pool.Pool"), [`Pool.echo`](#sqlalchemy.pool.Pool.params.echo "sqlalchemy.pool.Pool"),
    [`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return "sqlalchemy.pool.Pool")
    and others are passed to the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    constructor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of this pool.
  prefs: []
  type: TYPE_NORMAL
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.QueuePool.dispose
    "sqlalchemy.pool.QueuePool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: An asyncio-compatible version of [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool").
  prefs: []
  type: TYPE_NORMAL
- en: This pool is used by default when using [`AsyncEngine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") engines that were generated from [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"). It uses an asyncio-compatible queue
    implementation that does not use `threading.Lock`.
  prefs: []
  type: TYPE_NORMAL
- en: The arguments and operation of [`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") are otherwise identical to that of [`QueuePool`](#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool").
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") ([`sqlalchemy.pool.impl.QueuePool`](#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.impl.QueuePool"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: A Pool that maintains one connection per thread.
  prefs: []
  type: TYPE_NORMAL
- en: Maintains one connection per each thread, never moving a connection to a thread
    other than the one which it was created in.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: the [`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    will call `.close()` on arbitrary connections that exist beyond the size setting
    of `pool_size`, e.g. if more unique **thread identities** than what `pool_size`
    states are used. This cleanup is non-deterministic and not sensitive to whether
    or not the connections linked to those thread identities are currently in use.
  prefs: []
  type: TYPE_NORMAL
- en: '[`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    may be improved in a future release, however in its current status it is generally
    used only for test scenarios using a SQLite `:memory:` database and is not recommended
    for production use.'
  prefs: []
  type: TYPE_NORMAL
- en: The [`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    class **is not compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine").
  prefs: []
  type: TYPE_NORMAL
- en: 'Options are the same as those of [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"),
    as well as:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pool_size** – The number of threads in which to maintain connections at once.
    Defaults to five.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    is used by the SQLite dialect automatically when a memory-based database is used.
    See [SQLite](../dialects/sqlite.html).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[connect()](#sqlalchemy.pool.SingletonThreadPool.connect), [dispose()](#sqlalchemy.pool.SingletonThreadPool.dispose),
    [recreate()](#sqlalchemy.pool.SingletonThreadPool.recreate)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.base.Pool"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Return a DBAPI connection from the pool.
  prefs: []
  type: TYPE_NORMAL
- en: The connection is instrumented such that when its `close()` method is called,
    the connection will be returned to the pool.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of this pool.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.SingletonThreadPool.dispose
    "sqlalchemy.pool.SingletonThreadPool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: A [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") that allows at most
    one checked out connection at any given time.
  prefs: []
  type: TYPE_NORMAL
- en: This will raise an exception if more than one connection is checked out at a
    time. Useful for debugging code that is using more connections than desired.
  prefs: []
  type: TYPE_NORMAL
- en: The [`AssertionPool`](#sqlalchemy.pool.AssertionPool "sqlalchemy.pool.AssertionPool")
    class **is compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[dispose()](#sqlalchemy.pool.AssertionPool.dispose), [recreate()](#sqlalchemy.pool.AssertionPool.recreate)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.AssertionPool`](#sqlalchemy.pool.AssertionPool "sqlalchemy.pool.AssertionPool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of this pool.
  prefs: []
  type: TYPE_NORMAL
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.AssertionPool.dispose
    "sqlalchemy.pool.AssertionPool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: A Pool which does not pool connections.
  prefs: []
  type: TYPE_NORMAL
- en: Instead it literally opens and closes the underlying DB-API connection per each
    connection open/close.
  prefs: []
  type: TYPE_NORMAL
- en: Reconnect-related functions such as `recycle` and connection invalidation are
    not supported by this Pool implementation, since no connections are held persistently.
  prefs: []
  type: TYPE_NORMAL
- en: The [`NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool") class
    **is compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[dispose()](#sqlalchemy.pool.NullPool.dispose), [recreate()](#sqlalchemy.pool.NullPool.recreate)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of this pool.
  prefs: []
  type: TYPE_NORMAL
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.NullPool.dispose
    "sqlalchemy.pool.NullPool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: A Pool of exactly one connection, used for all requests.
  prefs: []
  type: TYPE_NORMAL
- en: Reconnect-related functions such as `recycle` and connection invalidation (which
    is also used to support auto-reconnect) are only partially supported right now
    and may not yield good results.
  prefs: []
  type: TYPE_NORMAL
- en: The [`StaticPool`](#sqlalchemy.pool.StaticPool "sqlalchemy.pool.StaticPool")
    class **is compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[dispose()](#sqlalchemy.pool.StaticPool.dispose), [recreate()](#sqlalchemy.pool.StaticPool.recreate)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.StaticPool`](#sqlalchemy.pool.StaticPool "sqlalchemy.pool.StaticPool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Dispose of this pool.
  prefs: []
  type: TYPE_NORMAL
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.StaticPool.dispose
    "sqlalchemy.pool.StaticPool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Common base for the two connection-management interfaces [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") and [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry").
  prefs: []
  type: TYPE_NORMAL
- en: These two objects are typically exposed in the public facing API via the connection
    pool event hooks, documented at [`PoolEvents`](events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents").
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[dbapi_connection](#sqlalchemy.pool.ManagesConnection.dbapi_connection), [driver_connection](#sqlalchemy.pool.ManagesConnection.driver_connection),
    [info](#sqlalchemy.pool.ManagesConnection.info), [invalidate()](#sqlalchemy.pool.ManagesConnection.invalidate),
    [record_info](#sqlalchemy.pool.ManagesConnection.record_info)'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: A reference to the actual DBAPI connection being tracked.
  prefs: []
  type: TYPE_NORMAL
- en: This is a [**PEP 249**](https://peps.python.org/pep-0249/)-compliant object
    that for traditional sync-style dialects is provided by the third-party DBAPI
    implementation in use. For asyncio dialects, the implementation is typically an
    adapter object provided by the SQLAlchemy dialect itself; the underlying asyncio
    object is available via the [`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy’s interface for the DBAPI connection is based on the [`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") protocol object
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: The “driver level” connection object as used by the Python DBAPI or database
    driver.
  prefs: []
  type: TYPE_NORMAL
- en: For traditional [**PEP 249**](https://peps.python.org/pep-0249/) DBAPI implementations,
    this object will be the same object as that of [`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection"). For an asyncio database
    driver, this will be the ultimate “connection” object used by that driver, such
    as the `asyncpg.Connection` object which will not have standard pep-249 methods.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Info dictionary associated with the underlying DBAPI connection referred to
    by this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")
    instance, allowing user-defined data to be associated with the connection.
  prefs: []
  type: TYPE_NORMAL
- en: The data in this dictionary is persistent for the lifespan of the DBAPI connection
    itself, including across pool checkins and checkouts. When the connection is invalidated
    and replaced with a new one, this dictionary is cleared.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns a dictionary that is local to that [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"). Therefore the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") attribute will always provide a Python
    dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Mark the managed connection as invalidated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`e` – an exception object indicating a reason for the invalidation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`soft` – if True, the connection isn’t closed; instead, this connection will
    be recycled on next checkout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[More on Invalidation](#pool-connection-invalidation)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: Persistent info dictionary associated with this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.ManagesConnection").
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary, the lifespan of this dictionary
    is that of the [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    which owns it; therefore this dictionary will persist across reconnects and connection
    invalidation for a particular entry in the connection pool.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns None. Contrast to the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary which is never None.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: Interface for the object that maintains an individual database connection on
    behalf of a [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") instance.
  prefs: []
  type: TYPE_NORMAL
- en: The [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    object represents the long term maintainance of a particular connection for a
    pool, including expiring or invalidating that connection to have it replaced with
    a new one, which will continue to be maintained by that same [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") instance. Compared to [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection"), which is the short-term, per-checkout
    connection manager, this object lasts for the lifespan of a particular “slot”
    within a connection pool.
  prefs: []
  type: TYPE_NORMAL
- en: The [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    object is mostly visible to public-facing API code when it is delivered to connection
    pool event hooks, such as [`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") and [`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout").
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0: [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") provides the public facing interface for
    the [`_ConnectionRecord`](#sqlalchemy.pool._ConnectionRecord "sqlalchemy.pool._ConnectionRecord")
    internal class.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[close()](#sqlalchemy.pool.ConnectionPoolEntry.close), [dbapi_connection](#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection),
    [driver_connection](#sqlalchemy.pool.ConnectionPoolEntry.driver_connection), [in_use](#sqlalchemy.pool.ConnectionPoolEntry.in_use),
    [info](#sqlalchemy.pool.ConnectionPoolEntry.info), [invalidate()](#sqlalchemy.pool.ConnectionPoolEntry.invalidate),
    [record_info](#sqlalchemy.pool.ConnectionPoolEntry.record_info)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") ([`sqlalchemy.pool.base.ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Close the DBAPI connection managed by this connection pool entry.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: A reference to the actual DBAPI connection being tracked.
  prefs: []
  type: TYPE_NORMAL
- en: This is a [**PEP 249**](https://peps.python.org/pep-0249/)-compliant object
    that for traditional sync-style dialects is provided by the third-party DBAPI
    implementation in use. For asyncio dialects, the implementation is typically an
    adapter object provided by the SQLAlchemy dialect itself; the underlying asyncio
    object is available via the [`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy’s interface for the DBAPI connection is based on the [`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") protocol object
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: The “driver level” connection object as used by the Python DBAPI or database
    driver.
  prefs: []
  type: TYPE_NORMAL
- en: For traditional [**PEP 249**](https://peps.python.org/pep-0249/) DBAPI implementations,
    this object will be the same object as that of [`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection"). For an asyncio database
    driver, this will be the ultimate “connection” object used by that driver, such
    as the `asyncpg.Connection` object which will not have standard pep-249 methods.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Return True the connection is currently checked out
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `ManagesConnection.info` *attribute of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  prefs: []
  type: TYPE_NORMAL
- en: Info dictionary associated with the underlying DBAPI connection referred to
    by this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")
    instance, allowing user-defined data to be associated with the connection.
  prefs: []
  type: TYPE_NORMAL
- en: The data in this dictionary is persistent for the lifespan of the DBAPI connection
    itself, including across pool checkins and checkouts. When the connection is invalidated
    and replaced with a new one, this dictionary is cleared.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns a dictionary that is local to that [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"). Therefore the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") attribute will always provide a Python
    dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `ManagesConnection.invalidate()` *method of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  prefs: []
  type: TYPE_NORMAL
- en: Mark the managed connection as invalidated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`e` – an exception object indicating a reason for the invalidation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`soft` – if True, the connection isn’t closed; instead, this connection will
    be recycled on next checkout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[More on Invalidation](#pool-connection-invalidation)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `ManagesConnection.record_info` *attribute of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  prefs: []
  type: TYPE_NORMAL
- en: Persistent info dictionary associated with this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.ManagesConnection").
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary, the lifespan of this dictionary
    is that of the [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    which owns it; therefore this dictionary will persist across reconnects and connection
    invalidation for a particular entry in the connection pool.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns None. Contrast to the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary which is never None.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: A connection-like adapter for a [**PEP 249**](https://peps.python.org/pep-0249/)
    DBAPI connection, which includes additional methods specific to the [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    is the public-facing interface for the internal [`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") implementation object; users familiar with
    [`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy "sqlalchemy.pool._ConnectionFairy")
    can consider this object to be equivalent.'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0: [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") provides the public- facing interface
    for the [`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy "sqlalchemy.pool._ConnectionFairy")
    internal class.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[close()](#sqlalchemy.pool.PoolProxiedConnection.close), [dbapi_connection](#sqlalchemy.pool.PoolProxiedConnection.dbapi_connection),
    [detach()](#sqlalchemy.pool.PoolProxiedConnection.detach), [driver_connection](#sqlalchemy.pool.PoolProxiedConnection.driver_connection),
    [info](#sqlalchemy.pool.PoolProxiedConnection.info), [invalidate()](#sqlalchemy.pool.PoolProxiedConnection.invalidate),
    [is_detached](#sqlalchemy.pool.PoolProxiedConnection.is_detached), [is_valid](#sqlalchemy.pool.PoolProxiedConnection.is_valid),
    [record_info](#sqlalchemy.pool.PoolProxiedConnection.record_info)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.pool.PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") ([`sqlalchemy.pool.base.ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: Release this connection back to the pool.
  prefs: []
  type: TYPE_NORMAL
- en: The [`PoolProxiedConnection.close()`](#sqlalchemy.pool.PoolProxiedConnection.close
    "sqlalchemy.pool.PoolProxiedConnection.close") method shadows the [**PEP 249**](https://peps.python.org/pep-0249/)
    `.close()` method, altering its behavior to instead [release](../glossary.html#term-release)
    the proxied connection back to the connection pool.
  prefs: []
  type: TYPE_NORMAL
- en: Upon release to the pool, whether the connection stays “opened” and pooled in
    the Python process, versus actually closed out and removed from the Python process,
    is based on the pool implementation in use and its configuration and current state.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: A reference to the actual DBAPI connection being tracked.
  prefs: []
  type: TYPE_NORMAL
- en: This is a [**PEP 249**](https://peps.python.org/pep-0249/)-compliant object
    that for traditional sync-style dialects is provided by the third-party DBAPI
    implementation in use. For asyncio dialects, the implementation is typically an
    adapter object provided by the SQLAlchemy dialect itself; the underlying asyncio
    object is available via the [`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy’s interface for the DBAPI connection is based on the [`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") protocol object
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Separate this connection from its Pool.
  prefs: []
  type: TYPE_NORMAL
- en: This means that the connection will no longer be returned to the pool when closed,
    and will instead be literally closed. The associated [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") is de-associated from this DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: Note that any overall connection limiting constraints imposed by a Pool implementation
    may be violated after a detach, as the detached connection is removed from the
    pool’s knowledge and control.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: The “driver level” connection object as used by the Python DBAPI or database
    driver.
  prefs: []
  type: TYPE_NORMAL
- en: For traditional [**PEP 249**](https://peps.python.org/pep-0249/) DBAPI implementations,
    this object will be the same object as that of [`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection"). For an asyncio database
    driver, this will be the ultimate “connection” object used by that driver, such
    as the `asyncpg.Connection` object which will not have standard pep-249 methods.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `ManagesConnection.info` *attribute of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  prefs: []
  type: TYPE_NORMAL
- en: Info dictionary associated with the underlying DBAPI connection referred to
    by this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")
    instance, allowing user-defined data to be associated with the connection.
  prefs: []
  type: TYPE_NORMAL
- en: The data in this dictionary is persistent for the lifespan of the DBAPI connection
    itself, including across pool checkins and checkouts. When the connection is invalidated
    and replaced with a new one, this dictionary is cleared.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns a dictionary that is local to that [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"). Therefore the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") attribute will always provide a Python
    dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `ManagesConnection.invalidate()` *method of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  prefs: []
  type: TYPE_NORMAL
- en: Mark the managed connection as invalidated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`e` – an exception object indicating a reason for the invalidation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`soft` – if True, the connection isn’t closed; instead, this connection will
    be recycled on next checkout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[More on Invalidation](#pool-connection-invalidation)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") is detached from its pool.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") still refers to an active DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `ManagesConnection.record_info` *attribute of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  prefs: []
  type: TYPE_NORMAL
- en: Persistent info dictionary associated with this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.ManagesConnection").
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary, the lifespan of this dictionary
    is that of the [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    which owns it; therefore this dictionary will persist across reconnects and connection
    invalidation for a particular entry in the connection pool.
  prefs: []
  type: TYPE_NORMAL
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns None. Contrast to the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary which is never None.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: Proxies a DBAPI connection and provides return-on-dereference support.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal object used by the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    implementation to provide context management to a DBAPI connection delivered by
    that [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"). The public facing
    interface for this class is described by the [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") class. See that class for public API
    details.
  prefs: []
  type: TYPE_NORMAL
- en: The name “fairy” is inspired by the fact that the [`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") object’s lifespan is transitory, as it lasts
    only for the length of a specific DBAPI connection being checked out from the
    pool, and additionally that as a transparent proxy, it is mostly invisible.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class `sqlalchemy.pool._ConnectionFairy` ([`sqlalchemy.pool.base.PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.base.PoolProxiedConnection"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Maintains a position in a connection pool which references a pooled connection.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal object used by the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    implementation to provide context management to a DBAPI connection maintained
    by that [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"). The public facing
    interface for this class is described by the [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") class. See that class for public API details.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class `sqlalchemy.pool._ConnectionRecord` ([`sqlalchemy.pool.base.ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.base.ConnectionPoolEntry"))
  prefs: []
  type: TYPE_NORMAL
