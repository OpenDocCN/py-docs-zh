- en: Connection Pooling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接池
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/pooling.html](https://docs.sqlalchemy.org/en/20/core/pooling.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/pooling.html](https://docs.sqlalchemy.org/en/20/core/pooling.html)
- en: A connection pool is a standard technique used to maintain long running connections
    in memory for efficient re-use, as well as to provide management for the total
    number of connections an application might use simultaneously.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 连接池是一种标准技术，用于在内存中维护长时间运行的连接以进行有效重用，并为应用程序可能同时使用的连接总数提供管理。
- en: Particularly for server-side web applications, a connection pool is the standard
    way to maintain a “pool” of active database connections in memory which are reused
    across requests.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是对于服务器端 Web 应用程序，连接池是在内存中维护一组活动数据库连接并在请求之间重用的标准方式。
- en: SQLAlchemy includes several connection pool implementations which integrate
    with the [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine").
    They can also be used directly for applications that want to add pooling to an
    otherwise plain DBAPI approach.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 包含几种连接池实现，它们与[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")集成。它们也可以直接用于希望为其他普通 DBAPI 方法添加连接池的应用程序。
- en: Connection Pool Configuration
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接池配置
- en: The [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    returned by the [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    function in most cases has a [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    integrated, pre-configured with reasonable pooling defaults. If you’re reading
    this section only to learn how to enable pooling - congratulations! You’re already
    done.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    函数返回的 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    大多数情况下都已集成了一个 [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")，预先配置了合理的池默认值。如果你只是想学习如何启用连接池
    - 恭喜！你已经完成了。'
- en: 'The most common [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    tuning parameters can be passed directly to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as keyword arguments: `pool_size`, `max_overflow`,
    `pool_recycle` and `pool_timeout`. For example:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的 [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") 调整参数可以直接作为关键字参数传递给
    [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")：`pool_size`、`max_overflow`、`pool_recycle`
    和 `pool_timeout`。例如：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: All SQLAlchemy pool implementations have in common that none of them “pre create”
    connections - all implementations wait until first use before creating a connection.
    At that point, if no additional concurrent checkout requests for more connections
    are made, no additional connections are created. This is why it’s perfectly fine
    for [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    to default to using a [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    of size five without regard to whether or not the application really needs five
    connections queued up - the pool would only grow to that size if the application
    actually used five connections concurrently, in which case the usage of a small
    pool is an entirely appropriate default behavior.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 SQLAlchemy 连接池实现的共同点是它们都不会“预先创建”连接 - 所有实现都会等待首次使用之前才创建连接。在那时，如果没有额外的并发检出请求需要更多连接，就不会创建额外的连接。这就是为什么
    [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    默认使用大小为五的 [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    是完全可以的，而不管应用程序是否真的需要排队五个连接 - 只有当应用程序实际上同时使用五个连接时，池才会增长到该大小，这种使用小池的行为是完全合适的默认行为。
- en: Note
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") class
    is **not compatible with asyncio**. When using [`create_async_engine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") to create an instance of [`AsyncEngine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine"), the [`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") class, which makes use of an asyncio-compatible
    queue implementation, is used instead.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")类**不兼容asyncio**。当使用[`create_async_engine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")创建[`AsyncEngine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine")实例时，将使用[`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool")类，该类使用与asyncio兼容的队列实现。'
- en: '## Switching Pool Implementations'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '## 切换池实现'
- en: 'The usual way to use a different kind of pool with [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") is to use the `poolclass` argument. This argument
    accepts a class imported from the `sqlalchemy.pool` module, and handles the details
    of building the pool for you. A common use case here is when connection pooling
    is to be disabled, which can be achieved by using the [`NullPool`](#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") implementation:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不同类型的池与[`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")的通常方法是使用`poolclass`参数。此参数接受从`sqlalchemy.pool`模块导入的类，并为您处理构建池的详细信息。这里的一个常见用例是禁用连接池，可以通过使用[`NullPool`](#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool")实现来实现：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using a Custom Connection Function
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用自定义连接函数
- en: See the section [Custom DBAPI connect() arguments / on-connect routines](engines.html#custom-dbapi-args)
    for a rundown of the various connection customization routines.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[自定义DBAPI connect()参数 / on-connect routines](engines.html#custom-dbapi-args)一节，了解各种连接定制例程。
- en: Constructing a Pool
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建池
- en: 'To use a [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") by itself,
    the `creator` function is the only argument that’s required and is passed first,
    followed by any additional options:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要单独使用[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")，则`creator`函数是唯一需要的参数，并首先传递，然后是任何其他选项：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'DBAPI connections can then be procured from the pool using the [`Pool.connect()`](#sqlalchemy.pool.Pool.connect
    "sqlalchemy.pool.Pool.connect") function. The return value of this method is a
    DBAPI connection that’s contained within a transparent proxy:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[`Pool.connect()`](#sqlalchemy.pool.Pool.connect "sqlalchemy.pool.Pool.connect")函数从池中获取DBAPI连接。此方法的返回值是一个包含在透明代理中的DBAPI连接：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The purpose of the transparent proxy is to intercept the `close()` call, such
    that instead of the DBAPI connection being closed, it is returned to the pool:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 透明代理的目的是拦截`close()`调用，这样，DBAPI连接不会关闭，而是返回到池中：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The proxy also returns its contained DBAPI connection to the pool when it is
    garbage collected, though it’s not deterministic in Python that this occurs immediately
    (though it is typical with cPython). This usage is not recommended however and
    in particular is not supported with asyncio DBAPI drivers.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当代理被垃圾回收时，它还将其包含的DBAPI连接返回到池中，尽管在Python中并非确定性地立即发生这种情况（尽管在cPython中通常是这样）。然而，不建议使用此用法，特别是不支持与asyncio
    DBAPI驱动程序一起使用。
- en: '## Reset On Return'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '## 返回时重置'
- en: The pool includes “reset on return” behavior which will call the `rollback()`
    method of the DBAPI connection when the connection is returned to the pool. This
    is so that any existing transactional state is removed from the connection, which
    includes not just uncommitted data but table and row locks as well. For most DBAPIs,
    the call to `rollback()` is inexpensive, and if the DBAPI has already completed
    a transaction, the method should be a no-op.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 池包括“返回时重置”行为，当连接返回到池时，将调用DBAPI连接的`rollback()`方法。这样做是为了从连接中删除任何现有的事务状态，这不仅包括未提交的数据，还包括表和行锁。对于大多数DBAPIs，调用`rollback()`是廉价的，如果DBAPI已经完成了一个事务，则该方法应该是无操作的。
- en: Disabling Reset on Return for non-transactional connections
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禁用非事务连接的返回时重置
- en: 'For very specific cases where this `rollback()` is not useful, such as when
    using a connection that is configured for [autocommit](connections.html#dbapi-autocommit-understanding)
    or when using a database that has no ACID capabilities such as the MyISAM engine
    of MySQL, the reset-on-return behavior can be disabled, which is typically done
    for performance reasons. This can be affected by using the [`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter of [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"),
    which is also available from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine"), passing a value of `None`. This is illustrated in
    the example below, in conjunction with the [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter setting of `AUTOCOMMIT`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些特定情况下`rollback()`不起作用的情况，例如使用配置为[autocommit](connections.html#dbapi-autocommit-understanding)或使用没有ACID功能的数据库（如MySQL的MyISAM引擎）的连接时，可以禁用归还时重置行为，通常出于性能原因。可以通过使用[`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool")参数来实现，该参数也可以从[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")中使用[`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine")传递值为`None`来实现。下面的示例中演示了这一点，结合了`AUTOCOMMIT`的[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")参数设置：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The above engine won’t actually perform ROLLBACK when connections are returned
    to the pool; since AUTOCOMMIT is enabled, the driver will also not perform any
    BEGIN operation.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述引擎在连接返回到池中时实际上不会执行回滚操作；由于启用了AUTOCOMMIT，驱动程序也不会执行任何BEGIN操作。
- en: Custom Reset-on-Return Schemes
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义归还时重置方案
- en: “reset on return” consisting of a single `rollback()` may not be sufficient
    for some use cases; in particular, applications which make use of temporary tables
    may wish for these tables to be automatically removed on connection checkin. Some
    (but notably not all) backends include features that can “reset” such tables within
    the scope of a database connection, which may be a desirable behavior for connection
    pool reset. Other server resources such as prepared statement handles and server-side
    statement caches may persist beyond the checkin process, which may or may not
    be desirable, depending on specifics. Again, some (but again not all) backends
    may provide for a means of resetting this state. The two SQLAlchemy included dialects
    which are known to have such reset schemes include Microsoft SQL Server, where
    an undocumented but widely known stored procedure called `sp_reset_connection`
    is often used, and PostgreSQL, which has a well-documented series of commands
    including `DISCARD` `RESET`, `DEALLOCATE`, and `UNLISTEN`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 仅包含单个`rollback()`的“归还时重置”对于某些用例可能不足够；特别是，使用临时表的应用程序可能希望在连接归还时自动删除这些表。一些（但并非所有）后端包括可以在数据库连接范围内“重置”这些表的功能，这可能是连接池重置的理想行为。其他服务器资源，如准备好的语句句柄和服务器端语句缓存，可能会在归还过程之后持续存在，具体取决于具体情况是否希望这样。同样，一些（但再次并非所有）后端可能提供一种重置此状态的方法。已知具有此类重置方案的两个SQLAlchemy包含的方言包括Microsoft
    SQL Server，其中通常使用一个名为`sp_reset_connection`的未记录但广为人知的存储过程，以及PostgreSQL，后者具有一系列良好记录的命令，包括`DISCARD`、`RESET`、`DEALLOCATE`和`UNLISTEN`。
- en: 'The following example illustrates how to replace reset on return with the Microsoft
    SQL Server `sp_reset_connection` stored procedure, using the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event hook. The [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") parameter is set to `None` so that the custom scheme
    can replace the default behavior completely. The custom hook implementation calls
    `.rollback()` in any case, as it’s usually important that the DBAPI’s own tracking
    of commit/rollback will remain consistent with the state of the transaction:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了如何使用 [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件钩子将返回时的重置替换为 Microsoft SQL Server 的 `sp_reset_connection`
    存储过程。[`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") 参数设置为 `None`，以便自定义方案完全替换默认行为。自定义钩子实现在任何情况下调用 `.rollback()`，因为通常重要的是
    DBAPI 自己的提交/回滚跟事务状态保持一致：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Changed in version 2.0.0b3: Added additional state arguments to the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event and additionally ensured the event
    is invoked for all “reset” occurrences, so that it’s appropriate as a place for
    custom “reset” handlers. Previous schemes which use the [`PoolEvents.checkin()`](events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") handler remain usable as well.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0.0b3 起进行了更改：在 [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件中添加了额外的状态参数，并且确保该事件在所有“重置”发生时都被调用，以便作为自定义“重置”处理程序的适当位置。之前使用
    [`PoolEvents.checkin()`](events.html#sqlalchemy.events.PoolEvents.checkin "sqlalchemy.events.PoolEvents.checkin")
    处理程序的方案仍然可用。
- en: See also
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Temporary Table / Resource Reset for Connection Pooling](../dialects/mssql.html#mssql-reset-on-return)
    - in the [Microsoft SQL Server](../dialects/mssql.html) documentation'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用于连接池的临时表/资源重置](../dialects/mssql.html#mssql-reset-on-return) - 在 [Microsoft
    SQL Server](../dialects/mssql.html) 文档中'
- en: '[Temporary Table / Resource Reset for Connection Pooling](../dialects/postgresql.html#postgresql-reset-on-return)
    in the [PostgreSQL](../dialects/postgresql.html) documentation'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用于连接池的临时表/资源重置](../dialects/postgresql.html#postgresql-reset-on-return) -
    在 [PostgreSQL](../dialects/postgresql.html) 文档中'
- en: Logging reset-on-return events
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录返回时重置事件
- en: 'Logging for pool events including reset on return can be set `logging.DEBUG`
    log level along with the `sqlalchemy.pool` logger, or by setting [`create_engine.echo_pool`](engines.html#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") to `"debug"` when using [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 记录池事件，包括返回时重置，可以将其设置为 `logging.DEBUG` 日志级别以及 `sqlalchemy.pool` 记录器，或者在使用 [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 时通过将 [`create_engine.echo_pool`](engines.html#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") 设置为 `"debug"` 来设置：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The above pool will show verbose logging including reset on return:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上述池将显示详细的日志，包括返回时的重置：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Pool Events
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 池事件
- en: Connection pools support an event interface that allows hooks to execute upon
    first connect, upon each new connection, and upon checkout and checkin of connections.
    See [`PoolEvents`](events.html#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")
    for details.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 连接池支持事件接口，允许在第一次连接、每次新连接、以及连接的签出和签入时执行钩子。详情请参阅 [`PoolEvents`](events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents")。
- en: '## Dealing with Disconnects'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '## 处理断开连接'
- en: The connection pool has the ability to refresh individual connections as well
    as its entire set of connections, setting the previously pooled connections as
    “invalid”. A common use case is allow the connection pool to gracefully recover
    when the database server has been restarted, and all previously established connections
    are no longer functional. There are two approaches to this.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 连接池具有刷新单个连接以及其整套连接的能力，将先前池化的连接设置为“无效”。常见用例是在数据库服务器重新启动时允许连接池优雅地恢复，并且所有先前建立的连接都不再可用。有两种方法可以做到这一点。
- en: '### Disconnect Handling - Pessimistic'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '### 断开连接处理 - 悲观'
- en: The pessimistic approach refers to emitting a test statement on the SQL connection
    at the start of each connection pool checkout, to test that the database connection
    is still viable. The implementation is dialect-specific, and makes use of either
    a DBAPI-specific ping method, or by using a simple SQL statement like “SELECT
    1”, in order to test the connection for liveness.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 悲观方法是指在每次连接池检出时发出SQL连接上的测试语句，以测试数据库连接是否仍然可行。该实现是方言特定的，并且利用特定于DBAPI的ping方法，或者使用简单的SQL语句如“SELECT
    1”，以便测试连接的活动性。
- en: The approach adds a small bit of overhead to the connection checkout process,
    however is otherwise the most simple and reliable approach to completely eliminating
    database errors due to stale pooled connections. The calling application does
    not need to be concerned about organizing operations to be able to recover from
    stale connections checked out from the pool.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法会在连接检出过程中增加一小部分额外开销，但除此之外，它是完全消除因连接池中的过期连接而导致数据库错误的最简单和可靠的方法。调用应用程序无需担心组织操作以从池中恢复过期连接。
- en: 'Pessimistic testing of connections upon checkout is achievable by using the
    [`Pool.pre_ping`](#sqlalchemy.pool.Pool.params.pre_ping "sqlalchemy.pool.Pool")
    argument, available from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") via the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") argument:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用[`Pool.pre_ping`](#sqlalchemy.pool.Pool.params.pre_ping "sqlalchemy.pool.Pool")参数来实现对连接的悲观检测，该参数可通过[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")的[`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine")参数获得：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The “pre ping” feature operates on a per-dialect basis either by invoking a
    DBAPI-specific “ping” method, or if not available will emit SQL equivalent to
    “SELECT 1”, catching any errors and detecting the error as a “disconnect” situation.
    If the ping / error check determines that the connection is not usable, the connection
    will be immediately recycled, and all other pooled connections older than the
    current time are invalidated, so that the next time they are checked out, they
    will also be recycled before use.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: “预 ping”功能根据每个方言的基础，通过调用特定于DBAPI的“ping”方法，或者如果不可用，则发出与“SELECT 1”等效的SQL，捕获任何错误并将错误检测为“断开”情况。如果ping/错误检查确定连接不可用，则连接将立即被重新使用，并且所有比当前时间更早的其他池连接都将无效，以便下次检出时它们也将在使用前被重新使用。
- en: If the database is still not available when “pre ping” runs, then the initial
    connect will fail and the error for failure to connect will be propagated normally.
    In the uncommon situation that the database is available for connections, but
    is not able to respond to a “ping”, the “pre_ping” will try up to three times
    before giving up, propagating the database error last received.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库在“预 ping”运行时仍然不可用，则初始连接将失败，并且无法连接的错误将正常传播。在数据库可用于连接但无法响应“ping”的情况下，将在放弃之前尝试最多三次“pre_ping”，并传播最后收到的数据库错误。
- en: It is critical to note that the pre-ping approach **does not accommodate for
    connections dropped in the middle of transactions or other SQL operations**. If
    the database becomes unavailable while a transaction is in progress, the transaction
    will be lost and the database error will be raised. While the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object will detect a “disconnect” situation and
    recycle the connection as well as invalidate the rest of the connection pool when
    this condition occurs, the individual operation where the exception was raised
    will be lost, and it’s up to the application to either abandon the operation,
    or retry the whole transaction again. If the engine is configured using DBAPI-level
    autocommit connections, as described at [Setting Transaction Isolation Levels
    including DBAPI Autocommit](connections.html#dbapi-autocommit), a connection **may**
    be reconnected transparently mid-operation using events. See the section [How
    Do I “Retry” a Statement Execution Automatically?](../faq/connections.html#faq-execute-retry)
    for an example.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 需要特别注意的是，预检测方法**不适用于事务中断开连接或其他SQL操作**的情况。如果数据库在事务进行中变得不可用，则事务将丢失并引发数据库错误。虽然[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象会检测到“断开连接”情况并重新使用连接以及在此情况发生时使其余连接池失效，但引发异常的单个操作将丢失，并且由应用程序来放弃操作或重新尝试整个事务。如果引擎使用DBAPI级别的自动提交连接配置，如[设置事务隔离级别，包括DBAPI自动提交](connections.html#dbapi-autocommit)，则可能会使用事件在操作中透明地重新连接。有关示例，请参阅[如何“自动重试”语句执行？](../faq/connections.html#faq-execute-retry)。
- en: For dialects that make use of “SELECT 1” and catch errors in order to detect
    disconnects, the disconnection test may be augmented for new backend-specific
    error messages using the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") hook.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用“SELECT 1”并捕获错误以检测断开连接的方言，可以使用[`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")钩子为新的后端特定错误消息增加断开连接测试。
- en: '#### Custom / Legacy Pessimistic Ping'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 自定义 / 传统悲观 Ping'
- en: 'Before [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") was added, the “pre-ping” approach historically has
    been performed manually using the [`ConnectionEvents.engine_connect()`](events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") engine event. The most common
    recipe for this is below, for reference purposes in case an application is already
    using such a recipe, or special behaviors are needed:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine")添加之前，历史上一直使用[`ConnectionEvents.engine_connect()`](events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect")引擎事件手动执行“预检测”方法。下面是最常见的方法，供参考，以防应用程序已经使用此方法，或者需要特殊行为：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The above recipe has the advantage that we are making use of SQLAlchemy’s facilities
    for detecting those DBAPI exceptions that are known to indicate a “disconnect”
    situation, as well as the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object’s ability to correctly invalidate the current
    connection pool when this condition occurs and allowing the current [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") to re-validate onto a new DBAPI connection.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以上方法的优点在于，我们利用了SQLAlchemy检测那些已知指示“断开连接”情况的DBAPI异常的设施，以及[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象在此情况发生时正确使当前连接池失效并允许当前[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")重新验证到新的DBAPI连接。
- en: Disconnect Handling - Optimistic
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 断开连接处理 - 乐观
- en: When pessimistic handling is not employed, as well as when the database is shutdown
    and/or restarted in the middle of a connection’s period of use within a transaction,
    the other approach to dealing with stale / closed connections is to let SQLAlchemy
    handle disconnects as they occur, at which point all connections in the pool are
    invalidated, meaning they are assumed to be stale and will be refreshed upon next
    checkout. This behavior assumes the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    is used in conjunction with a [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). The [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") has logic which can detect disconnection events and
    refresh the pool automatically.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当不采用悲观处理时，以及当数据库在事务中使用连接期间关闭和/或重新启动时，处理陈旧/关闭连接的另一种方法是让SQLAlchemy在发生断开连接时处理它们，在这时，池中的所有连接都被标记为无效，这意味着它们被认为是陈旧的，并将在下次检出时刷新。此行为假定[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")与[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")一起使用。[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")具有可以检测到断开连接事件并自动刷新池的逻辑。
- en: 'When the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    attempts to use a DBAPI connection, and an exception is raised that corresponds
    to a “disconnect” event, the connection is invalidated. The [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") then calls the [`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate
    "sqlalchemy.pool.Pool.recreate") method, effectively invalidating all connections
    not currently checked out so that they are replaced with new ones upon next checkout.
    This flow is illustrated by the code example below:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")尝试使用DBAPI连接，并且引发与“断开连接”事件相对应的异常时，连接将被标记为无效。然后，[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")调用[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate
    "sqlalchemy.pool.Pool.recreate")方法，有效地使所有当前未检出的连接无效，以便在下次检出时用新连接替换它们。下面的代码示例说明了这个流程：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The above example illustrates that no special intervention is needed to refresh
    the pool, which continues normally after a disconnection event is detected. However,
    one database exception is raised, per each connection that is in use while the
    database unavailability event occurred. In a typical web application using an
    ORM Session, the above condition would correspond to a single request failing
    with a 500 error, then the web application continuing normally beyond that. Hence
    the approach is “optimistic” in that frequent database restarts are not anticipated.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例说明，在检测到断开连接事件后，无需任何特殊干预即可刷新池，池会继续正常运行。但是，对于每个在数据库不可用事件发生时处于使用状态的连接，都会引发一个数据库异常。在使用ORM会话的典型Web应用程序中，上述条件将对应于请求失败并出现500错误，然后Web应用程序在那之后正常继续。因此，该方法是“乐观”的，因为不会预期频繁的数据库重启。
- en: '#### Setting Pool Recycle'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 设置池回收'
- en: 'An additional setting that can augment the “optimistic” approach is to set
    the pool recycle parameter. This parameter prevents the pool from using a particular
    connection that has passed a certain age, and is appropriate for database backends
    such as MySQL that automatically close connections that have been stale after
    a particular period of time:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 可以增强“乐观”方法的附加设置是设置池回收参数。此参数防止池使用已经过一定时期的特定连接，并且适用于自动在一段时间后关闭失效连接的数据库后端，例如MySQL：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Above, any DBAPI connection that has been open for more than one hour will
    be invalidated and replaced, upon next checkout. Note that the invalidation **only**
    occurs during checkout - not on any connections that are held in a checked out
    state. `pool_recycle` is a function of the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    itself, independent of whether or not an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is in use.  ### More on Invalidation'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以上，任何已打开超过一小时的DBAPI连接将在下次检出时被标记为无效并替换。请注意，这种无效化**仅**发生在检出时 - 不会发生在任何处于已检出状态的连接上。`pool_recycle`是[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")本身的一个函数，独立于是否正在使用[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。### 更多关于无效化的内容
- en: The [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") provides “connection
    invalidation” services which allow both explicit invalidation of a connection
    as well as automatic invalidation in response to conditions that are determined
    to render a connection unusable.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")提供了“连接失效”服务，允许显式无效连接以及响应确定使连接无法使用的条件自动无效连接。'
- en: “Invalidation” means that a particular DBAPI connection is removed from the
    pool and discarded. The `.close()` method is called on this connection if it is
    not clear that the connection itself might not be closed, however if this method
    fails, the exception is logged but the operation still proceeds.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: “失效”意味着特定的DBAPI连接从池中移除并丢弃。如果不清楚连接本身是否已关闭，则会调用此连接的`.close()`方法，但是如果此方法失败，则会记录异常但操作仍将继续。
- en: 'When using a [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    the [`Connection.invalidate()`](connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method is the usual entrypoint to explicit
    invalidation. Other conditions by which a DBAPI connection might be invalidated
    include:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")时，[`Connection.invalidate()`](connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate")方法是显式无效的通常入口点。导致DBAPI连接失效的其他条件包括：
- en: a DBAPI exception such as [`OperationalError`](exceptions.html#sqlalchemy.exc.OperationalError
    "sqlalchemy.exc.OperationalError"), raised when a method like `connection.execute()`
    is called, is detected as indicating a so-called “disconnect” condition. As the
    Python DBAPI provides no standard system for determining the nature of an exception,
    all SQLAlchemy dialects include a system called `is_disconnect()` which will examine
    the contents of an exception object, including the string message and any potential
    error codes included with it, in order to determine if this exception indicates
    that the connection is no longer usable. If this is the case, the `_ConnectionFairy.invalidate()`
    method is called and the DBAPI connection is then discarded.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当调用诸如`connection.execute()`之类的方法时引发DBAPI异常，比如[`OperationalError`](exceptions.html#sqlalchemy.exc.OperationalError
    "sqlalchemy.exc.OperationalError")，则被检测为所谓的“断开连接”条件。由于Python DBAPI没有提供用于确定异常性质的标准系统，因此所有的SQLAlchemy方言都包括一个名为`is_disconnect()`的系统，该系统将检查异常对象的内容，包括字符串消息和其中包含的任何潜在错误代码，以确定此异常是否表明连接不再可用。如果是这种情况，则调用`_ConnectionFairy.invalidate()`方法，然后丢弃DBAPI连接。
- en: When the connection is returned to the pool, and calling the `connection.rollback()`
    or `connection.commit()` methods, as dictated by the pool’s “reset on return”
    behavior, throws an exception. A final attempt at calling `.close()` on the connection
    will be made, and it is then discarded.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当连接返回到池中，并且调用连接的`connection.rollback()`或`connection.commit()`方法，根据池的“重置返回”行为，抛出异常。将尝试最终调用`.close()`关闭连接，然后丢弃它。
- en: When a listener implementing [`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") raises the [`DisconnectionError`](exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError") exception, indicating that the connection
    won’t be usable and a new connection attempt needs to be made.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当实现[`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout")的监听器引发[`DisconnectionError`](exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError")异常时，表示连接无法使用，需要进行新的连接尝试。
- en: 'All invalidations which occur will invoke the [`PoolEvents.invalidate()`](events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate") event.  ### Supporting new database
    error codes for disconnect scenarios'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '所有发生的失效都将调用[`PoolEvents.invalidate()`](events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate")事件。  ### 支持断开连接情况的新数据库错误代码'
- en: SQLAlchemy dialects each include a routine called `is_disconnect()` that is
    invoked whenever a DBAPI exception is encountered. The DBAPI exception object
    is passed to this method, where dialect-specific heuristics will then determine
    if the error code received indicates that the database connection has been “disconnected”,
    or is in an otherwise unusable state which indicates it should be recycled. The
    heuristics applied here may be customized using the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook, which is typically
    established via the owning [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object. Using this hook, all errors which occur are
    delivered passing along a contextual object known as [`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext"). Custom event hooks may control whether
    or not a particular error should be considered a “disconnect” situation or not,
    as well as if this disconnect should cause the entire connection pool to be invalidated
    or not.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 方言每个都包含一个名为 `is_disconnect()` 的例程，当遇到 DBAPI 异常时会调用它。DBAPI 异常对象被传递到这个方法，在那里方言特定的启发法则将确定接收到的错误代码是否表明数据库连接已被“断开”，或者处于其他不可用状态，这表明它应该被回收利用。在这里应用的启发法则可以使用
    [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 事件钩子进行定制，该事件钩子通常通过所属的 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象建立。使用这个钩子，发生的所有错误都将传递一个称为 [`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext") 的上下文对象。自定义事件钩子可以控制是否应该将特定错误视为“断开”情况，以及是否应该导致整个连接池无效。
- en: 'For example, to add support to consider the Oracle error codes `DPY-1001` and
    `DPY-4011` to be handled as disconnect codes, apply an event handler to the engine
    after creation:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为了添加支持将 Oracle 错误代码 `DPY-1001` 和 `DPY-4011` 视为断开代码进行处理，可以在创建之后向引擎应用一个事件处理程序：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The above error processing function will be invoked for all Oracle errors raised,
    including those caught when using the [pool pre ping](#pool-disconnects-pessimistic)
    feature for those backends that rely upon disconnect error handling (new in 2.0).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 上述错误处理函数将为所有 Oracle 错误被引发时调用，包括那些在使用 [池预 ping](#pool-disconnects-pessimistic)
    功能时捕获的错误，用于依赖于断开错误处理的后端（在 2.0 中新增）。
- en: See also
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")  ## Using FIFO vs. LIFO'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")  ## 使用 FIFO vs. LIFO'
- en: 'The [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") class
    features a flag called [`QueuePool.use_lifo`](#sqlalchemy.pool.QueuePool.params.use_lifo
    "sqlalchemy.pool.QueuePool"), which can also be accessed from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") via the flag [`create_engine.pool_use_lifo`](engines.html#sqlalchemy.create_engine.params.pool_use_lifo
    "sqlalchemy.create_engine"). Setting this flag to `True` causes the pool’s “queue”
    behavior to instead be that of a “stack”, e.g. the last connection to be returned
    to the pool is the first one to be used on the next request. In contrast to the
    pool’s long- standing behavior of first-in-first-out, which produces a round-robin
    effect of using each connection in the pool in series, lifo mode allows excess
    connections to remain idle in the pool, allowing server-side timeout schemes to
    close these connections out. The difference between FIFO and LIFO is basically
    whether or not its desirable for the pool to keep a full set of connections ready
    to go even during idle periods:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") 类包含一个名为
    [`QueuePool.use_lifo`](#sqlalchemy.pool.QueuePool.params.use_lifo "sqlalchemy.pool.QueuePool")
    的标志，该标志也可以通过 [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    中的标志 [`create_engine.pool_use_lifo`](engines.html#sqlalchemy.create_engine.params.pool_use_lifo
    "sqlalchemy.create_engine") 进行访问。将此标志设置为 `True` 会导致池的“队列”行为变为“堆栈”行为，例如，返回到池的最后一个连接将在下一次请求时首先使用。与池的先入先出长期行为相反，即产生池中每个连接的循环效果，LIFO
    模式允许多余的连接在池中保持空闲，从而允许服务器端超时方案关闭这些连接。FIFO 和 LIFO 之间的区别基本上是池是否在空闲期间保持完整的连接集：'
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Above, we also make use of the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") flag so that connections which are closed from the
    server side are gracefully handled by the connection pool and replaced with a
    new connection.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我们还使用 [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") 标志，以便服务器端关闭的连接能够被连接池优雅地处理，并替换为新连接。
- en: Note that the flag only applies to [`QueuePool`](#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") use.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注意该标志仅适用于 [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    使用。
- en: New in version 1.3.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.3中新增。
- en: See also
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Dealing with Disconnects](#pool-disconnects)  ## Using Connection Pools with
    Multiprocessing or os.fork()'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[处理断开连接](#pool-disconnects)  ## 使用连接池与多进程或 os.fork()'
- en: It’s critical that when using a connection pool, and by extension when using
    an [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    created via [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine"),
    that the pooled connections **are not shared to a forked process**. TCP connections
    are represented as file descriptors, which usually work across process boundaries,
    meaning this will cause concurrent access to the file descriptor on behalf of
    two or more entirely independent Python interpreter states.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用连接池时，以及当使用通过 [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    创建的 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    时，至关重要的是，池化的连接**不会共享到一个分叉的进程**。TCP连接被表示为文件描述符，通常跨越进程边界工作，这意味着这将导致两个或更多完全独立的 Python
    解释器状态代表的文件描述符被并发访问。
- en: Depending on specifics of the driver and OS, the issues that arise here range
    from non-working connections to socket connections that are used by multiple processes
    concurrently, leading to broken messaging (the latter case is typically the most
    common).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 根据驱动程序和操作系统的具体情况，此处出现的问题范围从无法工作的连接到被多个进程同时使用的套接字连接，导致消息传递中断（后一种情况通常最常见）。
- en: 'The SQLAlchemy [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    object refers to a connection pool of existing database connections. So when this
    object is replicated to a child process, the goal is to ensure that no database
    connections are carried over. There are four general approaches to this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    对象指的是一组现有数据库连接的连接池。因此，当这个对象被复制到子进程时，目标是确保没有数据库连接被传递过去。有四种常用的方法：
- en: 'Disable pooling using [`NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool").
    This is the most simplistic, one shot system that prevents the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") from using any connection more than once:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 [`NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool") 禁用连接池。这是最简单的、一次性系统，防止
    [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    多次使用任何连接：
- en: '[PRE15]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Call [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") on any given [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), passing the [`Engine.dispose.close`](connections.html#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose") parameter with a value of `False`, within
    the initialize phase of the child process. This is so that the new process will
    not touch any of the parent process’ connections and will instead start with new
    connections. **This is the recommended approach**:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在子进程的初始化阶段，对任何给定的 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    调用 [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose "sqlalchemy.engine.Engine.dispose")，传递
    [`Engine.dispose.close`](connections.html#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose") 参数值为 `False`。这样新进程就不会触及父进程的任何连接，而是开始使用新连接。**这是推荐的方法**：
- en: '[PRE16]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'New in version 1.4.33: Added the [`Engine.dispose.close`](connections.html#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose") parameter to allow the replacement of a connection
    pool in a child process without interfering with the connections used by the parent
    process.'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本1.4.33中新增：添加了 [`Engine.dispose.close`](connections.html#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose") 参数，允许在子进程中替换连接池而不会干扰父进程使用的连接。
- en: 'Call [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") **directly before** the child process is created.
    This will also cause the child process to start with a new connection pool, while
    ensuring the parent connections are not transferred to the child process:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建子进程之前直接调用[`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")。这也将导致子进程以新的连接池启动，同时确保父连接不会传递给子进程：
- en: '[PRE17]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'An event handler can be applied to the connection pool that tests for connections
    being shared across process boundaries, and invalidates them:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以应用于连接池的事件处理程序来测试跨进程边界共享的连接，并使其失效。
- en: '[PRE18]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Above, we use an approach similar to that described in [Disconnect Handling
    - Pessimistic](#pool-disconnects-pessimistic) to treat a DBAPI connection that
    originated in a different parent process as an “invalid” connection, coercing
    the pool to recycle the connection record to make a new connection.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述示例中，我们使用了类似于[Disconnect Handling - Pessimistic](#pool-disconnects-pessimistic)中描述的方法来处理在不同父进程中起源的DBAPI连接，将其视为“无效”连接，迫使池回收连接记录以建立新连接。
- en: The above strategies will accommodate the case of an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") being shared among processes. The above steps alone
    are not sufficient for the case of sharing a specific [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") over a process boundary; prefer to keep the scope
    of a particular [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    local to a single process (and thread). It’s additionally not supported to share
    any kind of ongoing transactional state directly across a process boundary, such
    as an ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object that’s begun a transaction and references active `Connection` instances;
    again prefer to create new [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects in new processes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 上述策略将适应共享在进程之间的[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的情况。但仅凭上述步骤尚不足以处理跨进程边界共享特定[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的情况；最好将特定[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的范围保持在单个进程（和线程）内。此外，不支持直接跨进程边界共享任何正在进行的事务状态，例如已开始事务并引用活动`Connection`实例的ORM
    [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象；同样，最好在新进程中创建新的[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象。
- en: Using a pool instance directly
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接使用池实例
- en: 'A pool implementation can be used directly without an engine. This could be
    used in applications that just wish to use the pool behavior without all other
    SQLAlchemy features. In the example below the default pool for the `MySQLdb` dialect
    is obtained using [`create_pool_from_url()`](engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url"):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 可以直接使用池实现而不需要引擎。这可用于只希望使用池行为而不需要所有其他SQLAlchemy功能的应用程序。在下面的示例中，使用[`create_pool_from_url()`](engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url")获取`MySQLdb`方言的默认池：
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If the type of pool to create is not specified, the default one for the dialect
    will be used. To specify it directly the `poolclass` argument can be used, like
    in the following example:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未指定要创建的池的类型，则将使用方言的默认池。要直接指定它，可以使用`poolclass`参数，就像以下示例中一样：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '## API Documentation - Available Pool Implementations'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '## API文档 - 可用的池实现'
- en: '| Object Name | Description |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [_ConnectionFairy](#sqlalchemy.pool._ConnectionFairy) | Proxies a DBAPI connection
    and provides return-on-dereference support. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [_ConnectionFairy](#sqlalchemy.pool._ConnectionFairy) | 代理一个DBAPI连接并提供对解除引用的支持。
    |'
- en: '| [_ConnectionRecord](#sqlalchemy.pool._ConnectionRecord) | Maintains a position
    in a connection pool which references a pooled connection. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [_ConnectionRecord](#sqlalchemy.pool._ConnectionRecord) | 维护连接池中的位置，引用一个池化连接。
    |'
- en: '| [AssertionPool](#sqlalchemy.pool.AssertionPool) | A [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") that allows at most one checked out connection at any
    given time. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [AssertionPool](#sqlalchemy.pool.AssertionPool) | 允许同时最多检出一个连接的[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")。 |'
- en: '| [AsyncAdaptedQueuePool](#sqlalchemy.pool.AsyncAdaptedQueuePool) | An asyncio-compatible
    version of [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool").
    |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [AsyncAdaptedQueuePool](#sqlalchemy.pool.AsyncAdaptedQueuePool) | [`QueuePool`](#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool")的一个与asyncio兼容的版本。 |'
- en: '| [ConnectionPoolEntry](#sqlalchemy.pool.ConnectionPoolEntry) | Interface for
    the object that maintains an individual database connection on behalf of a [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") instance. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| [ConnectionPoolEntry](#sqlalchemy.pool.ConnectionPoolEntry) | 代表[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")实例上的单个数据库连接的对象的接口。 |'
- en: '| [ManagesConnection](#sqlalchemy.pool.ManagesConnection) | Common base for
    the two connection-management interfaces [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") and [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"). |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| [ManagesConnection](#sqlalchemy.pool.ManagesConnection) | 两个连接管理接口[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")和[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")的通用基类。 |'
- en: '| [NullPool](#sqlalchemy.pool.NullPool) | A Pool which does not pool connections.
    |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| [NullPool](#sqlalchemy.pool.NullPool) | 不池化连接的连接池。 |'
- en: '| [Pool](#sqlalchemy.pool.Pool) | Abstract base class for connection pools.
    |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| [Pool](#sqlalchemy.pool.Pool) | 连接池的抽象基类。 |'
- en: '| [PoolProxiedConnection](#sqlalchemy.pool.PoolProxiedConnection) | A connection-like
    adapter for a [**PEP 249**](https://peps.python.org/pep-0249/) DBAPI connection,
    which includes additional methods specific to the [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") implementation. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| [PoolProxiedConnection](#sqlalchemy.pool.PoolProxiedConnection) | 一个用于[**PEP
    249**](https://peps.python.org/pep-0249/) DBAPI连接的类似连接适配器，包括特定于[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")实现的附加方法。 |'
- en: '| [QueuePool](#sqlalchemy.pool.QueuePool) | A [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") that imposes a limit on the number of open connections.
    |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| [QueuePool](#sqlalchemy.pool.QueuePool) | 对打开连接数量施加限制的[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")。 |'
- en: '| [SingletonThreadPool](#sqlalchemy.pool.SingletonThreadPool) | A Pool that
    maintains one connection per thread. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| [SingletonThreadPool](#sqlalchemy.pool.SingletonThreadPool) | 一个每个线程维护一个连接的连接池。
    |'
- en: '| [StaticPool](#sqlalchemy.pool.StaticPool) | A Pool of exactly one connection,
    used for all requests. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [StaticPool](#sqlalchemy.pool.StaticPool) | 一个连接池，用于所有请求的一个连接。 |'
- en: '[PRE21]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Abstract base class for connection pools.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 连接池的抽象基类。
- en: '**Members**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.pool.Pool.__init__), [connect()](#sqlalchemy.pool.Pool.connect),
    [dispose()](#sqlalchemy.pool.Pool.dispose), [recreate()](#sqlalchemy.pool.Pool.recreate)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.pool.Pool.__init__), [connect()](#sqlalchemy.pool.Pool.connect),
    [dispose()](#sqlalchemy.pool.Pool.dispose), [recreate()](#sqlalchemy.pool.Pool.recreate)'
- en: '**Class signature**'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    ([`sqlalchemy.log.Identified`](internals.html#sqlalchemy.log.Identified "sqlalchemy.log.Identified"),
    `sqlalchemy.event.registry.EventTarget`)
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.pool.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") ([`sqlalchemy.log.Identified`](internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified"), `sqlalchemy.event.registry.EventTarget`)
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Construct a Pool.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个连接池。
- en: 'Parameters:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`creator` – a callable function that returns a DB-API connection object. The
    function will be called with parameters.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`creator` – 一个可调用的函数，返回一个DB-API连接对象。该函数将使用参数调用。'
- en: '`recycle` – If set to a value other than -1, number of seconds between connection
    recycling, which means upon checkout, if this timeout is surpassed the connection
    will be closed and replaced with a newly opened connection. Defaults to -1.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recycle` – 如果设置为除-1之外的值，连接回收之间的秒数，这意味着在签出时，如果超过此超时，则连接将被关闭并替换为新打开的连接。默认为-1。'
- en: '`logging_name` – String identifier which will be used within the “name” field
    of logging records generated within the “sqlalchemy.pool” logger. Defaults to
    a hexstring of the object’s id.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logging_name` – 将在“sqlalchemy.pool”记录器中生成的日志记录的“name”字段中使用的字符串标识符。默认为对象的id的十六进制字符串。'
- en: '`echo` –'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`echo` –'
- en: if True, the connection pool will log informational output such as when connections
    are invalidated as well as when connections are recycled to the default log handler,
    which defaults to `sys.stdout` for output.. If set to the string `"debug"`, the
    logging will include pool checkouts and checkins.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，连接池将记录信息输出，例如当连接无效时以及当连接被回收到默认日志处理程序时，该处理程序默认为`sys.stdout`输出。如果设置为字符串`"debug"`，日志将包括池的签出和签入。
- en: The [`Pool.echo`](#sqlalchemy.pool.Pool.params.echo "sqlalchemy.pool.Pool")
    parameter can also be set from the [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") call by using the [`create_engine.echo_pool`](engines.html#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") parameter.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Pool.echo`](#sqlalchemy.pool.Pool.params.echo "sqlalchemy.pool.Pool")参数也可以通过在[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")调用中使用[`create_engine.echo_pool`](engines.html#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine")参数进行设置。'
- en: See also
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Logging](engines.html#dbengine-logging) - further detail on how
    to configure logging.'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置日志记录](engines.html#dbengine-logging) - 关于如何配置日志记录的更多详细信息。'
- en: '`reset_on_return` –'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reset_on_return` –'
- en: Determine steps to take on connections as they are returned to the pool, which
    were not otherwise handled by a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). Available from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") via the [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") parameter.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确定在连接被返回到池中时需要采取的步骤，这些步骤不会被[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")以外的方式处理。可通过[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")中的[`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine")参数获得。
- en: '[`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return "sqlalchemy.pool.Pool")
    can have any of these values:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return "sqlalchemy.pool.Pool")可以具有以下任一值：'
- en: '`"rollback"` - call rollback() on the connection, to release locks and transaction
    resources. This is the default value. The vast majority of use cases should leave
    this value set.'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"rollback"` - 在连接上调用rollback()，以释放锁定和事务资源。这是默认值。绝大多数用例应该保持此值设置。'
- en: '`"commit"` - call commit() on the connection, to release locks and transaction
    resources. A commit here may be desirable for databases that cache query plans
    if a commit is emitted, such as Microsoft SQL Server. However, this value is more
    dangerous than ‘rollback’ because any data changes present on the transaction
    are committed unconditionally.'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"commit"` - 在连接上调用commit()，以释放锁定和事务资源。如果发出了commit，这里可能对缓存查询计划的数据库（如Microsoft
    SQL Server）是有利的。但是，这个值比‘rollback’更危险，因为事务上的任何数据更改都会无条件提交。'
- en: '`None` - don’t do anything on the connection. This setting may be appropriate
    if the database / DBAPI works in pure “autocommit” mode at all times, or if a
    custom reset handler is established using the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event handler.'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`None` - 在连接上不执行任何操作。如果数据库/DBAPI始终以纯“自动提交”模式工作，或者如果使用[`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")事件处理程序建立了自定义重置处理程序，则此设置可能是合适的。'
- en: '`True` - same as ‘rollback’, this is here for backwards compatibility.'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`True` - 与‘rollback’相同，这是为了向后兼容而存在的。'
- en: '`False` - same as None, this is here for backwards compatibility.'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`False` - 与None相同，这是为了向后兼容而存在的。'
- en: For further customization of reset on return, the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event hook may be used which can perform
    any connection activity desired on reset.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要进一步定制重置操作，可以使用[`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")事件钩子，该钩子可以在重置时执行任何所需的连接活动。
- en: See also
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reset On Return](#pool-reset-on-return)'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[重置操作](#pool-reset-on-return)'
- en: '[`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")'
- en: '`events` – a list of 2-tuples, each of the form `(callable, target)` which
    will be passed to [`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    upon construction. Provided here so that event listeners can be assigned via [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") before dialect-level listeners are applied.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`events` – 一个2元组列表，每个元组的形式为`(callable, target)`，将在构造时传递给[`listen()`](event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen")。提供此处是为了在应用方言级别的监听器之前，可以通过[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")分配事件监听器。'
- en: '`dialect` – a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    that will handle the job of calling rollback(), close(), or commit() on DBAPI
    connections. If omitted, a built-in “stub” dialect is used. Applications that
    make use of [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    should not use this parameter as it is handled by the engine creation strategy.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 一个将负责在DBAPI连接上调用rollback()、close()或commit()的[`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")。如果省略，则使用内置的“存根”方言。使用[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")的应用程序不应使用此参数，因为它由引擎创建策略处理。'
- en: '`pre_ping` –'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pre_ping` –'
- en: if True, the pool will emit a “ping” (typically “SELECT 1”, but is dialect-specific)
    on the connection upon checkout, to test if the connection is alive or not. If
    not, the connection is transparently re-connected and upon success, all other
    pooled connections established prior to that timestamp are invalidated. Requires
    that a dialect is passed as well to interpret the disconnection error.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，池将在检出连接时发出“ping”（通常为“SELECT 1”，但是与方言有关）来测试连接是否存活。如果没有，连接将被透明地重新连接，并在成功后，此时间戳之前建立的所有其他池化连接将无效。需要传递方言以解释断开连接错误。
- en: New in version 1.2.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从1.2版本开始新增。
- en: '[PRE23]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Return a DBAPI connection from the pool.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 从池中返回一个DBAPI连接。
- en: The connection is instrumented such that when its `close()` method is called,
    the connection will be returned to the pool.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 连接被仪器化，这样当调用其`close()`方法时，连接将会返回到池中。
- en: '[PRE24]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Dispose of this pool.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 处置此池。
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法会使得已经检出的连接保持打开状态，因为它只影响处于池中空闲的连接。
- en: See also
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
- en: '[PRE25]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的与此相同类的[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")，并配置相同的创建参数。
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.Pool.dispose
    "sqlalchemy.pool.Pool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法与[`dispose()`](#sqlalchemy.pool.Pool.dispose "sqlalchemy.pool.Pool.dispose")结合使用，以关闭整个[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")并在其位置创建一个新的。
- en: '[PRE26]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: A [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") that imposes a limit
    on the number of open connections.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 对打开连接数量施加限制的[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")。
- en: '[`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") is the
    default pooling implementation used for all [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects other than SQLite with a `:memory:` database.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") 是除了带有`:memory:`数据库的SQLite外，所有[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象的默认池化实现。'
- en: The [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") class
    **is not compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"). The [`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") class is used automatically when using
    [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"), if no other kind of pool is specified.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") 类**不兼容**于asyncio和[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")。当使用[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")时，如果没有指定其他类型的池，将自动使用[`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool")类。'
- en: See also
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool "sqlalchemy.pool.AsyncAdaptedQueuePool")'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool "sqlalchemy.pool.AsyncAdaptedQueuePool")'
- en: '**Members**'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.pool.QueuePool.__init__), [dispose()](#sqlalchemy.pool.QueuePool.dispose),
    [recreate()](#sqlalchemy.pool.QueuePool.recreate)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.pool.QueuePool.__init__), [dispose()](#sqlalchemy.pool.QueuePool.dispose),
    [recreate()](#sqlalchemy.pool.QueuePool.recreate)'
- en: '**Class signature**'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.pool.QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
- en: '[PRE27]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Construct a QueuePool.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 QueuePool。
- en: 'Parameters:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`creator` – a callable function that returns a DB-API connection object, same
    as that of [`Pool.creator`](#sqlalchemy.pool.Pool.params.creator "sqlalchemy.pool.Pool").'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`creator` – 一个可调用函数，返回一个与[`Pool.creator`](#sqlalchemy.pool.Pool.params.creator
    "sqlalchemy.pool.Pool")相同的 DB-API 连接对象。'
- en: '`pool_size` – The size of the pool to be maintained, defaults to 5\. This is
    the largest number of connections that will be kept persistently in the pool.
    Note that the pool begins with no connections; once this number of connections
    is requested, that number of connections will remain. `pool_size` can be set to
    0 to indicate no size limit; to disable pooling, use a [`NullPool`](#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") instead.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool_size` – 要维护的池的大小，默认为 5。这是池中将持续保留的连接数的最大值。注意，池开始时没有连接；一旦请求了这么多连接，这么多连接就会保留下来。`pool_size`
    可以设置为 0 表示没有大小限制；要禁用池，请使用 [`NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool")。'
- en: '`max_overflow` – The maximum overflow size of the pool. When the number of
    checked-out connections reaches the size set in pool_size, additional connections
    will be returned up to this limit. When those additional connections are returned
    to the pool, they are disconnected and discarded. It follows then that the total
    number of simultaneous connections the pool will allow is pool_size + max_overflow,
    and the total number of “sleeping” connections the pool will allow is pool_size.
    max_overflow can be set to -1 to indicate no overflow limit; no limit will be
    placed on the total number of concurrent connections. Defaults to 10.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_overflow` – 池的最大溢出大小。当检出的连接数量达到池大小设置的大小时，将返回额外的连接，直到达到此限制为止。当这些额外的连接返回到池时，它们将被断开并丢弃。因此，池允许的同时连接总数为
    pool_size + max_overflow，池允许的“休眠”连接总数为 pool_size。max_overflow 可以设置为 -1 表示没有溢出限制；并发连接的总数不受限制。默认为
    10。'
- en: '`timeout` – The number of seconds to wait before giving up on returning a connection.
    Defaults to 30.0\. This can be a float but is subject to the limitations of Python
    time functions which may not be reliable in the tens of milliseconds.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timeout` – 在放弃返回连接之前等待的秒数。默认为 30.0。这可以是一个浮点数，但受 Python 时间函数的限制，可能不可靠达到十毫秒的级别。'
- en: '`use_lifo` –'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_lifo` –'
- en: use LIFO (last-in-first-out) when retrieving connections instead of FIFO (first-in-first-out).
    Using LIFO, a server-side timeout scheme can reduce the number of connections
    used during non-peak periods of use. When planning for server-side timeouts, ensure
    that a recycle or pre-ping strategy is in use to gracefully handle stale connections.
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 LIFO（后进先出）而不是 FIFO（先进先出）来检索连接。使用 LIFO，服务器端的超时方案可以减少在非高峰使用期间使用的连接数。在计划服务器端超时时，请确保使用了重新循环或预先
    ping 策略以优雅地处理过时的连接。
- en: New in version 1.3.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.3 中的新功能。
- en: See also
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Using FIFO vs. LIFO](#pool-use-lifo)'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 FIFO vs. LIFO](#pool-use-lifo)'
- en: '[Dealing with Disconnects](#pool-disconnects)'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[处理断开连接](#pool-disconnects)'
- en: '`**kw` – Other keyword arguments including [`Pool.recycle`](#sqlalchemy.pool.Pool.params.recycle
    "sqlalchemy.pool.Pool"), [`Pool.echo`](#sqlalchemy.pool.Pool.params.echo "sqlalchemy.pool.Pool"),
    [`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return "sqlalchemy.pool.Pool")
    and others are passed to the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    constructor.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 其他关键字参数，包括[`Pool.recycle`](#sqlalchemy.pool.Pool.params.recycle "sqlalchemy.pool.Pool")、[`Pool.echo`](#sqlalchemy.pool.Pool.params.echo
    "sqlalchemy.pool.Pool")、[`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") 和其他参数，都将传递给 [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    构造函数。'
- en: '[PRE28]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Dispose of this pool.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 处置此池。
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法使得可能存在检出的连接保持打开状态，因为它只影响池中空闲的连接。
- en: See also
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 亦参见
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
- en: '[PRE29]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")，与当前的池具有相同的类，并配置了相同的创建参数。
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.QueuePool.dispose
    "sqlalchemy.pool.QueuePool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法与 [`dispose()`](#sqlalchemy.pool.QueuePool.dispose "sqlalchemy.pool.QueuePool.dispose")
    结合使用，关闭整个 [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 并在其位置创建一个新的。
- en: '[PRE30]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: An asyncio-compatible version of [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool").
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") 的 asyncio
    兼容版本。'
- en: This pool is used by default when using [`AsyncEngine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") engines that were generated from [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"). It uses an asyncio-compatible queue
    implementation that does not use `threading.Lock`.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 当从 [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") 生成的 [`AsyncEngine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") 引擎时，默认使用此池。它使用不使用 `threading.Lock` 的 asyncio
    兼容队列实现。
- en: The arguments and operation of [`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") are otherwise identical to that of [`QueuePool`](#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool").
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool "sqlalchemy.pool.AsyncAdaptedQueuePool")
    的参数和操作与 [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    相同。'
- en: '**Class signature**'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") ([`sqlalchemy.pool.impl.QueuePool`](#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.impl.QueuePool"))
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.pool.AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") ([`sqlalchemy.pool.impl.QueuePool`](#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.impl.QueuePool"))
- en: '[PRE31]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: A Pool that maintains one connection per thread.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 每个线程维护一个连接的池。
- en: Maintains one connection per each thread, never moving a connection to a thread
    other than the one which it was created in.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 每个线程维护一个连接，从不将连接移动到创建它的线程之外的线程中。
- en: Warning
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: the [`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    will call `.close()` on arbitrary connections that exist beyond the size setting
    of `pool_size`, e.g. if more unique **thread identities** than what `pool_size`
    states are used. This cleanup is non-deterministic and not sensitive to whether
    or not the connections linked to those thread identities are currently in use.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    将在存在超过 `pool_size` 设置的任意连接时调用 `.close()`，例如，如果使用的唯一 **线程标识** 多于 `pool_size` 指定的数量。此清理是非确定性的，并且不受连接是否正在使用与线程标识相关联的影响。'
- en: '[`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    may be improved in a future release, however in its current status it is generally
    used only for test scenarios using a SQLite `:memory:` database and is not recommended
    for production use.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的版本中，[`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    可能会改进，但在目前的状态下，通常仅用于使用 SQLite `:memory:` 数据库的测试场景，并不建议用于生产环境。
- en: The [`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    class **is not compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine").
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    类**不兼容** asyncio 和 [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")。'
- en: 'Options are the same as those of [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"),
    as well as:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 选项与 [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 相同，还包括：
- en: 'Parameters:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**pool_size** – The number of threads in which to maintain connections at once.
    Defaults to five.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**pool_size** – 一次性维护连接的线程数。默认为五。'
- en: '[`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    is used by the SQLite dialect automatically when a memory-based database is used.
    See [SQLite](../dialects/sqlite.html).'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用基于内存的数据库时，SQLite 方言会自动使用 [`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool")。参见 [SQLite](../dialects/sqlite.html)。
- en: '**Members**'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[connect()](#sqlalchemy.pool.SingletonThreadPool.connect), [dispose()](#sqlalchemy.pool.SingletonThreadPool.dispose),
    [recreate()](#sqlalchemy.pool.SingletonThreadPool.recreate)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '[connect()](#sqlalchemy.pool.SingletonThreadPool.connect), [dispose()](#sqlalchemy.pool.SingletonThreadPool.dispose),
    [recreate()](#sqlalchemy.pool.SingletonThreadPool.recreate)'
- en: '**Class signature**'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.base.Pool"))
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.pool.SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.base.Pool"))
- en: '[PRE32]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Return a DBAPI connection from the pool.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 从池中返回一个 DBAPI 连接。
- en: The connection is instrumented such that when its `close()` method is called,
    the connection will be returned to the pool.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 连接被仪器化，以便在调用其 `close()` 方法时，连接将返回到池中。
- en: '[PRE33]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Dispose of this pool.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 处理此池。
- en: '[PRE34]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")，与此相同类的并配置有相同的创建参数。
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.SingletonThreadPool.dispose
    "sqlalchemy.pool.SingletonThreadPool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法与 [`dispose()`](#sqlalchemy.pool.SingletonThreadPool.dispose "sqlalchemy.pool.SingletonThreadPool.dispose")
    结合使用，关闭整个 [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 并在其位置创建一个新的。
- en: '[PRE35]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: A [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") that allows at most
    one checked out connection at any given time.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 允许在任何给定时间最多只有一个已签出连接的 [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")。
- en: This will raise an exception if more than one connection is checked out at a
    time. Useful for debugging code that is using more connections than desired.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果同时签出了多个连接，则会引发异常。 用于调试使用比预期更多的连接的代码。
- en: The [`AssertionPool`](#sqlalchemy.pool.AssertionPool "sqlalchemy.pool.AssertionPool")
    class **is compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine").
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssertionPool`](#sqlalchemy.pool.AssertionPool "sqlalchemy.pool.AssertionPool")
    类 **与** asyncio 兼容，[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")。'
- en: '**Members**'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[dispose()](#sqlalchemy.pool.AssertionPool.dispose), [recreate()](#sqlalchemy.pool.AssertionPool.recreate)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '[dispose()](#sqlalchemy.pool.AssertionPool.dispose), [recreate()](#sqlalchemy.pool.AssertionPool.recreate)'
- en: '**Class signature**'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.AssertionPool`](#sqlalchemy.pool.AssertionPool "sqlalchemy.pool.AssertionPool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.pool.AssertionPool`](#sqlalchemy.pool.AssertionPool "sqlalchemy.pool.AssertionPool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
- en: '[PRE36]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Dispose of this pool.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 处理此池。
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法使得可能保持已签出连接处于打开状态，因为它仅影响池中处于空闲状态的连接。
- en: See also
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
- en: '[PRE37]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")，与此相同类的并配置有相同的创建参数。
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.AssertionPool.dispose
    "sqlalchemy.pool.AssertionPool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法与 [`dispose()`](#sqlalchemy.pool.AssertionPool.dispose "sqlalchemy.pool.AssertionPool.dispose")
    结合使用，关闭整个 [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 并在其位置创建一个新的。
- en: '[PRE38]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: A Pool which does not pool connections.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 不池化连接的 Pool。
- en: Instead it literally opens and closes the underlying DB-API connection per each
    connection open/close.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，它会为每个连接的打开/关闭字面上打开并关闭底层的 DB-API 连接。
- en: Reconnect-related functions such as `recycle` and connection invalidation are
    not supported by this Pool implementation, since no connections are held persistently.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 此 Pool 实现不支持与重新连接相关的函数，如 `recycle` 和连接失效，因为没有持续保留连接。
- en: The [`NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool") class
    **is compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine").
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool")类与asyncio和[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")兼容。'
- en: '**Members**'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[dispose()](#sqlalchemy.pool.NullPool.dispose), [recreate()](#sqlalchemy.pool.NullPool.recreate)'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '[dispose()](#sqlalchemy.pool.NullPool.dispose), [recreate()](#sqlalchemy.pool.NullPool.recreate)'
- en: '**Class signature**'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.pool.NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool")（[`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.base.Pool")）
- en: '[PRE39]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Dispose of this pool.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 处置此池。
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法使得可能存在检出的连接仍然保持打开状态，因为它只影响池中处于空闲状态的连接。
- en: See also
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
- en: '[PRE40]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")，与此相同类别的，并配置有相同的创建参数。
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.NullPool.dispose
    "sqlalchemy.pool.NullPool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法与[`dispose()`](#sqlalchemy.pool.NullPool.dispose "sqlalchemy.pool.NullPool.dispose")一起使用，以关闭整个[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")并创建一个新的。
- en: '[PRE41]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: A Pool of exactly one connection, used for all requests.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 一种仅包含一个连接的池，用于所有请求。
- en: Reconnect-related functions such as `recycle` and connection invalidation (which
    is also used to support auto-reconnect) are only partially supported right now
    and may not yield good results.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 重新连接相关的函数，如`recycle`和连接失效（也用于支持自动重新连接），目前只支持部分，并且可能不会产生良好的结果。
- en: The [`StaticPool`](#sqlalchemy.pool.StaticPool "sqlalchemy.pool.StaticPool")
    class **is compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine").
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '[`StaticPool`](#sqlalchemy.pool.StaticPool "sqlalchemy.pool.StaticPool")类与asyncio和[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")兼容。'
- en: '**Members**'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[dispose()](#sqlalchemy.pool.StaticPool.dispose), [recreate()](#sqlalchemy.pool.StaticPool.recreate)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '[dispose()](#sqlalchemy.pool.StaticPool.dispose), [recreate()](#sqlalchemy.pool.StaticPool.recreate)'
- en: '**Class signature**'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.StaticPool`](#sqlalchemy.pool.StaticPool "sqlalchemy.pool.StaticPool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.pool.StaticPool`](#sqlalchemy.pool.StaticPool "sqlalchemy.pool.StaticPool")（[`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.base.Pool")）
- en: '[PRE42]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Dispose of this pool.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 处置此池。
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法使得可能存在检出的连接仍然保持打开状态，因为它只影响池中处于空闲状态的连接。
- en: See also
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
- en: '[PRE43]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")，与此相同类别的，并配置有相同的创建参数。
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.StaticPool.dispose
    "sqlalchemy.pool.StaticPool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法与[`dispose()`](#sqlalchemy.pool.StaticPool.dispose "sqlalchemy.pool.StaticPool.dispose")一起使用，以关闭整个[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")并创建一个新的。
- en: '[PRE44]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Common base for the two connection-management interfaces [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") and [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry").
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 两个连接管理接口[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")和[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")的通用基类。
- en: These two objects are typically exposed in the public facing API via the connection
    pool event hooks, documented at [`PoolEvents`](events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents").
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个对象通常通过连接池事件钩子在公共 API 中公开，文档位于[`PoolEvents`](events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents")。
- en: '**Members**'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[dbapi_connection](#sqlalchemy.pool.ManagesConnection.dbapi_connection), [driver_connection](#sqlalchemy.pool.ManagesConnection.driver_connection),
    [info](#sqlalchemy.pool.ManagesConnection.info), [invalidate()](#sqlalchemy.pool.ManagesConnection.invalidate),
    [record_info](#sqlalchemy.pool.ManagesConnection.record_info)'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '[dbapi_connection](#sqlalchemy.pool.ManagesConnection.dbapi_connection), [driver_connection](#sqlalchemy.pool.ManagesConnection.driver_connection),
    [info](#sqlalchemy.pool.ManagesConnection.info), [invalidate()](#sqlalchemy.pool.ManagesConnection.invalidate),
    [record_info](#sqlalchemy.pool.ManagesConnection.record_info)'
- en: New in version 2.0.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中新增。
- en: '[PRE45]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: A reference to the actual DBAPI connection being tracked.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 被跟踪的实际 DBAPI 连接的引用。
- en: This is a [**PEP 249**](https://peps.python.org/pep-0249/)-compliant object
    that for traditional sync-style dialects is provided by the third-party DBAPI
    implementation in use. For asyncio dialects, the implementation is typically an
    adapter object provided by the SQLAlchemy dialect itself; the underlying asyncio
    object is available via the [`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection") attribute.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个符合[**PEP 249**](https://peps.python.org/pep-0249/)的对象，对于传统的同步式方言，由正在使用的第三方
    DBAPI 实现提供。对于 asyncio 方言，实现通常是由 SQLAlchemy 方言本身提供的适配器对象；底层 asyncio 对象可通过[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")属性获得。
- en: SQLAlchemy’s interface for the DBAPI connection is based on the [`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") protocol object
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 对 DBAPI 连接的接口基于[`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection")协议对象。
- en: See also
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '[在使用 Engine 时如何获取原始的 DBAPI 连接？](../faq/connections.html#faq-dbapi-connection)'
- en: '[PRE46]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The “driver level” connection object as used by the Python DBAPI or database
    driver.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: “驱动级别”连接对象由 Python DBAPI 或数据库驱动程序使用。
- en: For traditional [**PEP 249**](https://peps.python.org/pep-0249/) DBAPI implementations,
    this object will be the same object as that of [`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection"). For an asyncio database
    driver, this will be the ultimate “connection” object used by that driver, such
    as the `asyncpg.Connection` object which will not have standard pep-249 methods.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 对于传统的[**PEP 249**](https://peps.python.org/pep-0249/) DBAPI 实现，此对象将与[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")的对象相同。对于 asyncio 数据库驱动程序，这将是该驱动程序使用的最终“连接”对象，例如不具有标准
    pep-249 方法的`asyncpg.Connection`对象。
- en: New in version 1.4.24.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.24 中新增。
- en: See also
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '[在使用 Engine 时如何获取原始的 DBAPI 连接？](../faq/connections.html#faq-dbapi-connection)'
- en: '[PRE47]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Info dictionary associated with the underlying DBAPI connection referred to
    by this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")
    instance, allowing user-defined data to be associated with the connection.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 与此[`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")实例引用的底层
    DBAPI 连接相关联的信息字典，允许将用户定义的数据与连接关联。
- en: The data in this dictionary is persistent for the lifespan of the DBAPI connection
    itself, including across pool checkins and checkouts. When the connection is invalidated
    and replaced with a new one, this dictionary is cleared.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 此字典中的数据在 DBAPI 连接本身的生命周期内是持久的，包括池中的检入和检出。当连接无效并被新连接替换时，此字典将被清除。
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns a dictionary that is local to that [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"). Therefore the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") attribute will always provide a Python
    dictionary.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 对于未与[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")关联的[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")实例，例如如果它被分离，该属性返回一个仅限于该[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")的字典。因此，[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info")属性将始终提供一个Python字典。
- en: See also
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
- en: '[PRE48]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Mark the managed connection as invalidated.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 将托管连接标记为失效。
- en: 'Parameters:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`e` – an exception object indicating a reason for the invalidation.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`e` – 表示连接失效原因的异常对象。'
- en: '`soft` – if True, the connection isn’t closed; instead, this connection will
    be recycled on next checkout.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`soft` – 如果为True，则连接不会关闭；相反，此连接将在下次检出时被回收。'
- en: See also
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[More on Invalidation](#pool-connection-invalidation)'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '[更多关于失效的信息](#pool-connection-invalidation)'
- en: '[PRE49]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Persistent info dictionary associated with this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.ManagesConnection").
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 与此[`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")关联的持久信息字典。
- en: Unlike the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary, the lifespan of this dictionary
    is that of the [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    which owns it; therefore this dictionary will persist across reconnects and connection
    invalidation for a particular entry in the connection pool.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")字典不同，此字典的生命周期与拥有它的[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")相同；因此，此字典将在重新连接和特定连接池条目的连接失效时持续存在。
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns None. Contrast to the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary which is never None.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 对于未与[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")关联的[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")实例，例如如果它被分离，该属性返回None。与永远不为None的[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info")字典形成对比。
- en: See also
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
- en: '[PRE50]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Interface for the object that maintains an individual database connection on
    behalf of a [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") instance.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 代表[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")实例维护单个数据库连接的对象的接口。
- en: The [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    object represents the long term maintainance of a particular connection for a
    pool, including expiring or invalidating that connection to have it replaced with
    a new one, which will continue to be maintained by that same [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") instance. Compared to [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection"), which is the short-term, per-checkout
    connection manager, this object lasts for the lifespan of a particular “slot”
    within a connection pool.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    对象表示池中特定连接的长期维护，包括使该连接过期或失效以被替换为新连接，而这个新连接将继续由相同的 [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") 实例维护。与 [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") 相比，后者是短期的，每次检出的连接管理器，这个对象的生命周期为连接池中的特定“槽”。'
- en: The [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    object is mostly visible to public-facing API code when it is delivered to connection
    pool event hooks, such as [`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") and [`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout").
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    对象在被传递到连接池事件钩子（例如 [`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") 和 [`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout")）时，主要对外公开。'
- en: 'New in version 2.0: [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") provides the public facing interface for
    the [`_ConnectionRecord`](#sqlalchemy.pool._ConnectionRecord "sqlalchemy.pool._ConnectionRecord")
    internal class.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中：[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    为 [`_ConnectionRecord`](#sqlalchemy.pool._ConnectionRecord "sqlalchemy.pool._ConnectionRecord")
    内部类提供了公共界面。
- en: '**Members**'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[close()](#sqlalchemy.pool.ConnectionPoolEntry.close), [dbapi_connection](#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection),
    [driver_connection](#sqlalchemy.pool.ConnectionPoolEntry.driver_connection), [in_use](#sqlalchemy.pool.ConnectionPoolEntry.in_use),
    [info](#sqlalchemy.pool.ConnectionPoolEntry.info), [invalidate()](#sqlalchemy.pool.ConnectionPoolEntry.invalidate),
    [record_info](#sqlalchemy.pool.ConnectionPoolEntry.record_info)'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '[close()](#sqlalchemy.pool.ConnectionPoolEntry.close), [dbapi_connection](#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection),
    [driver_connection](#sqlalchemy.pool.ConnectionPoolEntry.driver_connection), [in_use](#sqlalchemy.pool.ConnectionPoolEntry.in_use),
    [info](#sqlalchemy.pool.ConnectionPoolEntry.info), [invalidate()](#sqlalchemy.pool.ConnectionPoolEntry.invalidate),
    [record_info](#sqlalchemy.pool.ConnectionPoolEntry.record_info)'
- en: '**Class signature**'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") ([`sqlalchemy.pool.base.ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection"))
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.pool.ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") ([`sqlalchemy.pool.base.ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection"))
- en: '[PRE51]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Close the DBAPI connection managed by this connection pool entry.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭由此连接池条目管理的 DBAPI 连接。
- en: '[PRE52]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: A reference to the actual DBAPI connection being tracked.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪的实际 DBAPI 连接的引用。
- en: This is a [**PEP 249**](https://peps.python.org/pep-0249/)-compliant object
    that for traditional sync-style dialects is provided by the third-party DBAPI
    implementation in use. For asyncio dialects, the implementation is typically an
    adapter object provided by the SQLAlchemy dialect itself; the underlying asyncio
    object is available via the [`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection") attribute.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个符合[**PEP 249**](https://peps.python.org/pep-0249/)标准的对象，对于传统的同步式方言，由正在使用的第三方
    DBAPI 实现提供。对于 asyncio 方言，该实现通常是由 SQLAlchemy 方言本身提供的适配器对象；底层 asyncio 对象可通过 [`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection") 属性访问。
- en: SQLAlchemy’s interface for the DBAPI connection is based on the [`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") protocol object
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 对 DBAPI 连接的接口基于 [`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") 协议对象
- en: See also
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '[当使用 Engine 时，我如何访问原始的 DBAPI 连接？](../faq/connections.html#faq-dbapi-connection)'
- en: '[PRE53]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The “driver level” connection object as used by the Python DBAPI or database
    driver.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: Python DBAPI 或数据库驱动程序使用的“驱动程序级别”连接对象。
- en: For traditional [**PEP 249**](https://peps.python.org/pep-0249/) DBAPI implementations,
    this object will be the same object as that of [`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection"). For an asyncio database
    driver, this will be the ultimate “connection” object used by that driver, such
    as the `asyncpg.Connection` object which will not have standard pep-249 methods.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 对于传统的[**PEP 249**](https://peps.python.org/pep-0249/) DBAPI 实现，这个对象将与[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")的对象相同。对于 asyncio 数据库驱动程序，这将是该驱动程序使用的最终的“连接”对象，例如`asyncpg.Connection`对象，该对象不具有标准的
    pep-249 方法。
- en: New in version 1.4.24.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4.24 开始新增。
- en: See also
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '[当使用 Engine 时，我如何访问原始的 DBAPI 连接？](../faq/connections.html#faq-dbapi-connection)'
- en: '[PRE54]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Return True the connection is currently checked out
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前检出了连接，则返回 True。
- en: '[PRE55]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '*inherited from the* `ManagesConnection.info` *attribute of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.base.ManagesConnection")
    *的* `ManagesConnection.info` *属性。*'
- en: Info dictionary associated with the underlying DBAPI connection referred to
    by this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")
    instance, allowing user-defined data to be associated with the connection.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 与由此 [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")
    实例引用的底层 DBAPI 连接关联的信息字典，允许将用户定义的数据与连接关联起来。
- en: The data in this dictionary is persistent for the lifespan of the DBAPI connection
    itself, including across pool checkins and checkouts. When the connection is invalidated
    and replaced with a new one, this dictionary is cleared.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 此字典中的数据在 DBAPI 连接本身的生命周期内是持久的，包括池中的签入和签出。当连接被使无效并替换为新连接时，此字典将被清除。
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns a dictionary that is local to that [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"). Therefore the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") attribute will always provide a Python
    dictionary.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 对于未与[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")关联的[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")实例，例如，如果它被分离，该属性将返回一个仅属于该[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")的字典。因此，[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") 属性将始终提供一个 Python 字典。
- en: See also
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
- en: '[PRE56]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '*inherited from the* `ManagesConnection.invalidate()` *method of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")
    *的* `ManagesConnection.invalidate()` *方法。*'
- en: Mark the managed connection as invalidated.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 将管理的连接标记为无效。
- en: 'Parameters:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`e` – an exception object indicating a reason for the invalidation.'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`e` – 表示使无效的原因的异常对象。'
- en: '`soft` – if True, the connection isn’t closed; instead, this connection will
    be recycled on next checkout.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`soft` – 如果为 True，则连接不会关闭；相反，此连接将在下次检出时被回收。'
- en: See also
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[More on Invalidation](#pool-connection-invalidation)'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '[关于使无效](#pool-connection-invalidation)'
- en: '[PRE57]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '*inherited from the* `ManagesConnection.record_info` *attribute of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.base.ManagesConnection")
    *的* `ManagesConnection.record_info` *属性*'
- en: Persistent info dictionary associated with this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.ManagesConnection").
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 与此[`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")关联的持久信息字典。
- en: Unlike the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary, the lifespan of this dictionary
    is that of the [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    which owns it; therefore this dictionary will persist across reconnects and connection
    invalidation for a particular entry in the connection pool.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")字典不同，此字典的生命周期与拥有它的[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")的生命周期相同；因此，对于连接池中特定条目的重新连接和连接失效，此字典将持续存在。
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns None. Contrast to the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary which is never None.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 对于与[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")不相关的[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")实例，例如如果它被分离，该属性返回None。与永不为None的[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info")字典形成对比。
- en: See also
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
- en: '[PRE58]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: A connection-like adapter for a [**PEP 249**](https://peps.python.org/pep-0249/)
    DBAPI connection, which includes additional methods specific to the [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") implementation.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类似连接适配器，用于[**PEP 249**](https://peps.python.org/pep-0249/) DBAPI连接，其中包括特定于[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")实现的附加方法。
- en: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    is the public-facing interface for the internal [`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") implementation object; users familiar with
    [`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy "sqlalchemy.pool._ConnectionFairy")
    can consider this object to be equivalent.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")是内部[`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy")实现对象的公共接口；熟悉[`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy")的用户可以将此对象视为等效。'
- en: 'New in version 2.0: [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") provides the public- facing interface
    for the [`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy "sqlalchemy.pool._ConnectionFairy")
    internal class.'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中新增：[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")为[`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy")内部类提供了公共接口。
- en: '**Members**'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[close()](#sqlalchemy.pool.PoolProxiedConnection.close), [dbapi_connection](#sqlalchemy.pool.PoolProxiedConnection.dbapi_connection),
    [detach()](#sqlalchemy.pool.PoolProxiedConnection.detach), [driver_connection](#sqlalchemy.pool.PoolProxiedConnection.driver_connection),
    [info](#sqlalchemy.pool.PoolProxiedConnection.info), [invalidate()](#sqlalchemy.pool.PoolProxiedConnection.invalidate),
    [is_detached](#sqlalchemy.pool.PoolProxiedConnection.is_detached), [is_valid](#sqlalchemy.pool.PoolProxiedConnection.is_valid),
    [record_info](#sqlalchemy.pool.PoolProxiedConnection.record_info)'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '[close()](#sqlalchemy.pool.PoolProxiedConnection.close), [dbapi_connection](#sqlalchemy.pool.PoolProxiedConnection.dbapi_connection),
    [detach()](#sqlalchemy.pool.PoolProxiedConnection.detach), [driver_connection](#sqlalchemy.pool.PoolProxiedConnection.driver_connection),
    [info](#sqlalchemy.pool.PoolProxiedConnection.info), [invalidate()](#sqlalchemy.pool.PoolProxiedConnection.invalidate),
    [is_detached](#sqlalchemy.pool.PoolProxiedConnection.is_detached), [is_valid](#sqlalchemy.pool.PoolProxiedConnection.is_valid),
    [record_info](#sqlalchemy.pool.PoolProxiedConnection.record_info)'
- en: '**Class signature**'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") ([`sqlalchemy.pool.base.ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection"))
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.pool.PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")（[`sqlalchemy.pool.base.ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.ManagesConnection")）
- en: '[PRE59]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Release this connection back to the pool.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 释放此连接回连接池。
- en: The [`PoolProxiedConnection.close()`](#sqlalchemy.pool.PoolProxiedConnection.close
    "sqlalchemy.pool.PoolProxiedConnection.close") method shadows the [**PEP 249**](https://peps.python.org/pep-0249/)
    `.close()` method, altering its behavior to instead [release](../glossary.html#term-release)
    the proxied connection back to the connection pool.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolProxiedConnection.close()`](#sqlalchemy.pool.PoolProxiedConnection.close
    "sqlalchemy.pool.PoolProxiedConnection.close")方法遮蔽了[**PEP 249**](https://peps.python.org/pep-0249/)的`.close()`方法，改变其行为以将代理连接释放回连接池。'
- en: Upon release to the pool, whether the connection stays “opened” and pooled in
    the Python process, versus actually closed out and removed from the Python process,
    is based on the pool implementation in use and its configuration and current state.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 释放到池中后，连接是否保持“打开”并在Python进程中保留，还是实际关闭并从Python进程中移除，取决于正在使用的池实现及其配置和当前状态。
- en: '[PRE60]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: A reference to the actual DBAPI connection being tracked.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 正在跟踪的实际DBAPI连接的引用。
- en: This is a [**PEP 249**](https://peps.python.org/pep-0249/)-compliant object
    that for traditional sync-style dialects is provided by the third-party DBAPI
    implementation in use. For asyncio dialects, the implementation is typically an
    adapter object provided by the SQLAlchemy dialect itself; the underlying asyncio
    object is available via the [`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection") attribute.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个符合[**PEP 249**](https://peps.python.org/pep-0249/)的对象，对于传统的同步式方言，由正在使用的第三方DBAPI实现提供。对于异步方言，实现通常是由SQLAlchemy方言本身提供的适配器对象；底层的异步对象可通过[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")属性获得。
- en: SQLAlchemy’s interface for the DBAPI connection is based on the [`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") protocol object
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy对DBAPI连接的接口基于[`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection")协议对象
- en: See also
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '[在使用引擎时如何访问原始的DBAPI连接？](../faq/connections.html#faq-dbapi-connection)'
- en: '[PRE61]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Separate this connection from its Pool.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 将此连接与其池分离。
- en: This means that the connection will no longer be returned to the pool when closed,
    and will instead be literally closed. The associated [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") is de-associated from this DBAPI connection.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当关闭时，连接将不再返回到池中，而是被实际关闭。相关的[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")与此DBAPI连接解除关联。
- en: Note that any overall connection limiting constraints imposed by a Pool implementation
    may be violated after a detach, as the detached connection is removed from the
    pool’s knowledge and control.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在分离后，池实现施加的任何整体连接限制约束可能会被违反，因为分离的连接已从池的知识和控制中移除。
- en: '[PRE62]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The “driver level” connection object as used by the Python DBAPI or database
    driver.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: Python DBAPI或数据库驱动程序使用的“驱动级”连接对象。
- en: For traditional [**PEP 249**](https://peps.python.org/pep-0249/) DBAPI implementations,
    this object will be the same object as that of [`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection"). For an asyncio database
    driver, this will be the ultimate “connection” object used by that driver, such
    as the `asyncpg.Connection` object which will not have standard pep-249 methods.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 对于传统的[**PEP 249**](https://peps.python.org/pep-0249/) DBAPI实现，此对象将与[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")的对象相同。对于异步数据库驱动程序，这将是该驱动程序使用的最终“连接”对象，例如`asyncpg.Connection`对象，该对象不具有标准的pep-249方法。
- en: New in version 1.4.24.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.24中的新功能。
- en: See also
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '[在使用引擎时如何获取原始DBAPI连接？](../faq/connections.html#faq-dbapi-connection)'
- en: '[PRE63]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '*inherited from the* `ManagesConnection.info` *attribute of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.base.ManagesConnection")
    *的* `ManagesConnection.info` *属性*。'
- en: Info dictionary associated with the underlying DBAPI connection referred to
    by this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")
    instance, allowing user-defined data to be associated with the connection.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 与此[`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")实例引用的底层DBAPI连接相关联的信息字典，允许将用户定义的数据与连接相关联。
- en: The data in this dictionary is persistent for the lifespan of the DBAPI connection
    itself, including across pool checkins and checkouts. When the connection is invalidated
    and replaced with a new one, this dictionary is cleared.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 此字典中的数据对于DBAPI连接本身的生命周期是持久的，包括池的签入和签出。当连接被使无效并替换为新连接时，此字典将被清除。
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns a dictionary that is local to that [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"). Therefore the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") attribute will always provide a Python
    dictionary.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 对于与[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")不关联的[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")实例，例如如果它被分离，则该属性返回一个与该[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")局部相关的字典。因此，[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info")属性始终提供Python字典。
- en: See also
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
- en: '[PRE64]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '*inherited from the* `ManagesConnection.invalidate()` *method of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.base.ManagesConnection")
    *的* `ManagesConnection.invalidate()` *方法*。'
- en: Mark the managed connection as invalidated.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 将受管理的连接标记为无效。
- en: 'Parameters:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`e` – an exception object indicating a reason for the invalidation.'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`e` – 指示无效原因的异常对象。'
- en: '`soft` – if True, the connection isn’t closed; instead, this connection will
    be recycled on next checkout.'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`soft` – 如果为True，则不会关闭连接；相反，此连接将在下次检出时被回收。'
- en: See also
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[More on Invalidation](#pool-connection-invalidation)'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '[更多关于失效的信息](#pool-connection-invalidation)'
- en: '[PRE65]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Return True if this [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") is detached from its pool.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")从其池中分离，则返回True。
- en: '[PRE66]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Return True if this [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") still refers to an active DBAPI connection.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")仍然引用活动的DBAPI连接，则返回True。
- en: '[PRE67]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '*inherited from the* `ManagesConnection.record_info` *attribute of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.base.ManagesConnection")
    *的* `ManagesConnection.record_info` *属性*。'
- en: Persistent info dictionary associated with this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.ManagesConnection").
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 与此[`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")相关联的持久信息字典。
- en: Unlike the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary, the lifespan of this dictionary
    is that of the [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    which owns it; therefore this dictionary will persist across reconnects and connection
    invalidation for a particular entry in the connection pool.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")字典不同，此字典的生命周期与拥有它的[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")相同；因此，对于连接池中特定条目的重新连接和连接失效，此字典将持久存在。
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns None. Contrast to the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary which is never None.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不与[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")相关联的[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")实例（例如如果它已分离），该属性返回 None。与永不为 None 的[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info")字典形成对比。
- en: See also
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
- en: '[PRE68]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Proxies a DBAPI connection and provides return-on-dereference support.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 代理一个 DBAPI 连接并提供解引用支持。
- en: This is an internal object used by the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    implementation to provide context management to a DBAPI connection delivered by
    that [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"). The public facing
    interface for this class is described by the [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") class. See that class for public API
    details.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 此为[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")实现内部使用的对象，为由该[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")提供的 DBAPI 连接提供上下文管理。该类的公共接口由[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")类描述。请参阅该类获取公共 API 详细信息。
- en: The name “fairy” is inspired by the fact that the [`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") object’s lifespan is transitory, as it lasts
    only for the length of a specific DBAPI connection being checked out from the
    pool, and additionally that as a transparent proxy, it is mostly invisible.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 名称“fairy”灵感来源于[`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy "sqlalchemy.pool._ConnectionFairy")对象的生命周期是短暂的，因为它仅在从池中检出特定
    DBAPI 连接的长度内存在，并且作为透明代理，它大部分时间是不可见的。
- en: See also
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")'
- en: '[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")'
- en: '**Class signature**'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.pool._ConnectionFairy` ([`sqlalchemy.pool.base.PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.base.PoolProxiedConnection"))
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.pool._ConnectionFairy` ([`sqlalchemy.pool.base.PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.base.PoolProxiedConnection"))
- en: '[PRE69]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Maintains a position in a connection pool which references a pooled connection.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 维护连接池中引用的一个连接的位置。
- en: This is an internal object used by the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    implementation to provide context management to a DBAPI connection maintained
    by that [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"). The public facing
    interface for this class is described by the [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") class. See that class for public API details.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 此为[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")实现内部使用的对象，为由该[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")维护的 DBAPI 连接提供上下文管理。该类的公共接口由[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")类描述。请参阅该类获取公共 API 详细信息。
- en: See also
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")'
- en: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")'
- en: '**Class signature**'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.pool._ConnectionRecord` ([`sqlalchemy.pool.base.ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.base.ConnectionPoolEntry"))
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.pool._ConnectionRecord` ([`sqlalchemy.pool.base.ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.base.ConnectionPoolEntry"))
- en: Connection Pool Configuration
  id: totrans-440
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接池配置
- en: The [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    returned by the [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    function in most cases has a [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    integrated, pre-configured with reasonable pooling defaults. If you’re reading
    this section only to learn how to enable pooling - congratulations! You’re already
    done.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，[`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    函数返回的 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    已经集成了一个预先配置合理的 [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")。如果你只是阅读本节来学习如何启用连接池
    - 恭喜！你已经完成了。
- en: 'The most common [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    tuning parameters can be passed directly to [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as keyword arguments: `pool_size`, `max_overflow`,
    `pool_recycle` and `pool_timeout`. For example:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的 [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") 调优参数可以直接作为关键字参数传递给
    [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")：`pool_size`、`max_overflow`、`pool_recycle`
    和 `pool_timeout`。例如：
- en: '[PRE70]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: All SQLAlchemy pool implementations have in common that none of them “pre create”
    connections - all implementations wait until first use before creating a connection.
    At that point, if no additional concurrent checkout requests for more connections
    are made, no additional connections are created. This is why it’s perfectly fine
    for [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    to default to using a [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    of size five without regard to whether or not the application really needs five
    connections queued up - the pool would only grow to that size if the application
    actually used five connections concurrently, in which case the usage of a small
    pool is an entirely appropriate default behavior.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 SQLAlchemy 连接池实现都有一个共同点，即它们都不会“预先创建”连接 - 所有实现都会在首次使用之前等待创建连接。在那时，如果没有额外的并发检出请求要求更多的连接，就不会创建额外的连接。这就是为什么
    [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    默认使用一个大小为五的 [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    是完全可以的，而不用考虑应用程序是否真的需要排队五个连接 - 只有在应用程序实际上同时使用了五个连接时，池才会增长到这个大小，此时使用一个小池是完全适当的默认行为。
- en: Note
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") class
    is **not compatible with asyncio**. When using [`create_async_engine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") to create an instance of [`AsyncEngine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine"), the [`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") class, which makes use of an asyncio-compatible
    queue implementation, is used instead.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") 类 **不兼容
    asyncio**。当使用 [`create_async_engine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") 创建一个 [`AsyncEngine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") 实例时，会使用 [`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") 类，该类使用了一个兼容 asyncio 的队列实现。'
- en: '## Switching Pool Implementations'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '## 切换连接池实现'
- en: 'The usual way to use a different kind of pool with [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") is to use the `poolclass` argument. This argument
    accepts a class imported from the `sqlalchemy.pool` module, and handles the details
    of building the pool for you. A common use case here is when connection pooling
    is to be disabled, which can be achieved by using the [`NullPool`](#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") implementation:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 使用不同类型的池与[`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")的通常方法是使用`poolclass`参数。该参数接受从`sqlalchemy.pool`模块导入的类，并为您处理构建池的详细信息。一个常见的用例是禁用连接池，这可以通过使用[`NullPool`](#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool")实现来实现：
- en: '[PRE71]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Using a Custom Connection Function
  id: totrans-450
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用自定义连接函数
- en: See the section [Custom DBAPI connect() arguments / on-connect routines](engines.html#custom-dbapi-args)
    for a rundown of the various connection customization routines.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 参见[自定义DBAPI connect()参数/连接时例程](engines.html#custom-dbapi-args)部分，了解各种连接自定义例程的情况。
- en: Constructing a Pool
  id: totrans-452
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造池
- en: 'To use a [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") by itself,
    the `creator` function is the only argument that’s required and is passed first,
    followed by any additional options:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 要单独使用[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")，则`creator`函数是唯一需要的参数，并且首先传递，然后是任何其他选项：
- en: '[PRE72]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'DBAPI connections can then be procured from the pool using the [`Pool.connect()`](#sqlalchemy.pool.Pool.connect
    "sqlalchemy.pool.Pool.connect") function. The return value of this method is a
    DBAPI connection that’s contained within a transparent proxy:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以使用[`Pool.connect()`](#sqlalchemy.pool.Pool.connect "sqlalchemy.pool.Pool.connect")函数从池中获取DBAPI连接。此方法的返回值是包含在透明代理中的DBAPI连接：
- en: '[PRE73]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The purpose of the transparent proxy is to intercept the `close()` call, such
    that instead of the DBAPI connection being closed, it is returned to the pool:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 透明代理的目的是拦截`close()`调用，以便将DBAPI连接返回到池中：
- en: '[PRE74]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The proxy also returns its contained DBAPI connection to the pool when it is
    garbage collected, though it’s not deterministic in Python that this occurs immediately
    (though it is typical with cPython). This usage is not recommended however and
    in particular is not supported with asyncio DBAPI drivers.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 当代理被垃圾回收时，它也会将其包含的DBAPI连接返回到池中，尽管在Python中并不确定这是否立即发生（尽管在cPython中是典型的）。然而，不建议这样使用，特别是不支持使用asyncio
    DBAPI驱动程序。
- en: '## Reset On Return'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '## 返回时重置'
- en: The pool includes “reset on return” behavior which will call the `rollback()`
    method of the DBAPI connection when the connection is returned to the pool. This
    is so that any existing transactional state is removed from the connection, which
    includes not just uncommitted data but table and row locks as well. For most DBAPIs,
    the call to `rollback()` is inexpensive, and if the DBAPI has already completed
    a transaction, the method should be a no-op.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 池包含“返回时重置”行为，当连接返回到池中时，将调用DBAPI连接的`rollback()`方法。这样做是为了从连接中移除任何现有的事务状态，这不仅包括未提交的数据，还包括表和行锁。对于大多数DBAPI，调用`rollback()`是廉价的，如果DBAPI已经完成了一个事务，那么该方法应该是一个空操作。
- en: Disabling Reset on Return for non-transactional connections
  id: totrans-462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对于非事务连接禁用返回时重置
- en: 'For very specific cases where this `rollback()` is not useful, such as when
    using a connection that is configured for [autocommit](connections.html#dbapi-autocommit-understanding)
    or when using a database that has no ACID capabilities such as the MyISAM engine
    of MySQL, the reset-on-return behavior can be disabled, which is typically done
    for performance reasons. This can be affected by using the [`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter of [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"),
    which is also available from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine"), passing a value of `None`. This is illustrated in
    the example below, in conjunction with the [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter setting of `AUTOCOMMIT`:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非常特定的情况，其中 `rollback()` 不实用，例如当使用配置为 [自动提交](connections.html#dbapi-autocommit-understanding)
    或者使用没有 ACID 能力的数据库（如 MySQL 的 MyISAM 引擎）的连接时，可以禁用返回时重置行为，这通常是出于性能考虑。可以通过使用 [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") 的 [`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") 参数来影响，该参数也可以从 [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 中使用 [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") 进行设置，传递一个值为 `None`。下面的示例中进行了说明，结合了 `AUTOCOMMIT` 的
    [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") 参数设置：
- en: '[PRE75]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The above engine won’t actually perform ROLLBACK when connections are returned
    to the pool; since AUTOCOMMIT is enabled, the driver will also not perform any
    BEGIN operation.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 上述引擎在连接返回到池中时实际上不会执行回滚操作；由于启用了 AUTOCOMMIT，驱动程序也不会执行任何 BEGIN 操作。
- en: Custom Reset-on-Return Schemes
  id: totrans-466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义的返回重置方案
- en: “reset on return” consisting of a single `rollback()` may not be sufficient
    for some use cases; in particular, applications which make use of temporary tables
    may wish for these tables to be automatically removed on connection checkin. Some
    (but notably not all) backends include features that can “reset” such tables within
    the scope of a database connection, which may be a desirable behavior for connection
    pool reset. Other server resources such as prepared statement handles and server-side
    statement caches may persist beyond the checkin process, which may or may not
    be desirable, depending on specifics. Again, some (but again not all) backends
    may provide for a means of resetting this state. The two SQLAlchemy included dialects
    which are known to have such reset schemes include Microsoft SQL Server, where
    an undocumented but widely known stored procedure called `sp_reset_connection`
    is often used, and PostgreSQL, which has a well-documented series of commands
    including `DISCARD` `RESET`, `DEALLOCATE`, and `UNLISTEN`.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 仅由单个 `rollback()` 组成的“返回重置”对于某些用例可能不够；特别是，使用临时表的应用程序可能希望这些表在连接签入时自动删除。一些（但并非全部）后端包含可以在数据库连接范围内“重置”这些表的功能，这可能是连接池重置的一种理想行为。其他服务器资源，例如准备好的语句句柄和服务器端语句缓存，可能会在签入过程之后持续存在，具体取决于具体情况是否希望如此。同样，一些（但再次并非全部）后端可能提供了重置此状态的方法。已知具有此类重置方案的两个
    SQLAlchemy 包含的方言包括 Microsoft SQL Server，其中通常使用一个名为 `sp_reset_connection` 的未记录但广为人知的存储过程，以及
    PostgreSQL，它有一系列命令包括 `DISCARD` `RESET`、`DEALLOCATE` 和 `UNLISTEN`。
- en: 'The following example illustrates how to replace reset on return with the Microsoft
    SQL Server `sp_reset_connection` stored procedure, using the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event hook. The [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") parameter is set to `None` so that the custom scheme
    can replace the default behavior completely. The custom hook implementation calls
    `.rollback()` in any case, as it’s usually important that the DBAPI’s own tracking
    of commit/rollback will remain consistent with the state of the transaction:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了如何使用[`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")事件钩子，在返回时用 Microsoft SQL Server 的`sp_reset_connection`存储过程替换重置。[`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine")参数设置为`None`，以便完全替换默认行为。自定义钩子实现在任何情况下都调用`.rollback()`，因为通常重要的是
    DBAPI 自己的提交/回滚跟踪与事务状态保持一致：
- en: '[PRE76]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Changed in version 2.0.0b3: Added additional state arguments to the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event and additionally ensured the event
    is invoked for all “reset” occurrences, so that it’s appropriate as a place for
    custom “reset” handlers. Previous schemes which use the [`PoolEvents.checkin()`](events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") handler remain usable as well.'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2.0.0b3 中更改：为[`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")事件添加了额外的状态参数，并另外确保事件对所有“重置”事件都被调用，因此它适用于自定义“重置”处理程序的地方。之前使用[`PoolEvents.checkin()`](events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin")处理程序的方案仍然可用。
- en: See also
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Temporary Table / Resource Reset for Connection Pooling](../dialects/mssql.html#mssql-reset-on-return)
    - in the [Microsoft SQL Server](../dialects/mssql.html) documentation'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[连接池临时表/资源重置](../dialects/mssql.html#mssql-reset-on-return) - 在[Microsoft SQL
    Server](../dialects/mssql.html)文档中'
- en: '[Temporary Table / Resource Reset for Connection Pooling](../dialects/postgresql.html#postgresql-reset-on-return)
    in the [PostgreSQL](../dialects/postgresql.html) documentation'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[连接池临时表/资源重置](../dialects/postgresql.html#postgresql-reset-on-return) - 在[PostgreSQL](../dialects/postgresql.html)文档中'
- en: Logging reset-on-return events
  id: totrans-474
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录返回时的重置事件
- en: 'Logging for pool events including reset on return can be set `logging.DEBUG`
    log level along with the `sqlalchemy.pool` logger, or by setting [`create_engine.echo_pool`](engines.html#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") to `"debug"` when using [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 对包括返回时的重置在内的池事件进行记录可以设置为`logging.DEBUG`日志级别，以及`sqlalchemy.pool`记录器，或者在使用[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")时将[`create_engine.echo_pool`](engines.html#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine")设置为`"debug"`：
- en: '[PRE77]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The above pool will show verbose logging including reset on return:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 以上池将显示详细的日志，包括返回时的重置：
- en: '[PRE78]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Disabling Reset on Return for non-transactional connections
  id: totrans-479
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对非事务连接禁用返回时的重置
- en: 'For very specific cases where this `rollback()` is not useful, such as when
    using a connection that is configured for [autocommit](connections.html#dbapi-autocommit-understanding)
    or when using a database that has no ACID capabilities such as the MyISAM engine
    of MySQL, the reset-on-return behavior can be disabled, which is typically done
    for performance reasons. This can be affected by using the [`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool") parameter of [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"),
    which is also available from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") as [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine"), passing a value of `None`. This is illustrated in
    the example below, in conjunction with the [`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter setting of `AUTOCOMMIT`:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些特定情况下`rollback()`不适用的情况，比如在使用配置为[自动提交](connections.html#dbapi-autocommit-understanding)或者在使用没有ACID功能的数据库，比如MySQL的MyISAM引擎时，可以禁用返回时的重置行为，通常出于性能原因。可以通过使用[`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool")参数来实现，该参数也可以从[`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")中获取，作为[`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine")，传递一个值为`None`。下面的示例中演示了这一点，结合了`AUTOCOMMIT`的[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")参数设置：
- en: '[PRE79]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: The above engine won’t actually perform ROLLBACK when connections are returned
    to the pool; since AUTOCOMMIT is enabled, the driver will also not perform any
    BEGIN operation.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 由于启用了AUTOCOMMIT，上述引擎在连接返回到池时实际上不会执行ROLLBACK操作；由于驱动程序也不会执行任何BEGIN操作。
- en: Custom Reset-on-Return Schemes
  id: totrans-483
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义返回时重置方案
- en: “reset on return” consisting of a single `rollback()` may not be sufficient
    for some use cases; in particular, applications which make use of temporary tables
    may wish for these tables to be automatically removed on connection checkin. Some
    (but notably not all) backends include features that can “reset” such tables within
    the scope of a database connection, which may be a desirable behavior for connection
    pool reset. Other server resources such as prepared statement handles and server-side
    statement caches may persist beyond the checkin process, which may or may not
    be desirable, depending on specifics. Again, some (but again not all) backends
    may provide for a means of resetting this state. The two SQLAlchemy included dialects
    which are known to have such reset schemes include Microsoft SQL Server, where
    an undocumented but widely known stored procedure called `sp_reset_connection`
    is often used, and PostgreSQL, which has a well-documented series of commands
    including `DISCARD` `RESET`, `DEALLOCATE`, and `UNLISTEN`.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些使用临时表的应用程序，仅由一个`rollback()`组成的“返回时重置”可能不足够；特别是，使用临时表的应用程序可能希望在连接检入时自动删除这些表。一些（但并非所有）后端包括可以在数据库连接范围内“重置”这些表的功能，这可能是连接池重置的一种理想行为。其他服务器资源，如准备好的语句句柄和服务器端语句缓存，可能会在检入过程之后持续存在，具体取决于具体情况是否希望这样。同样，一些（但再次不是所有）后端可能提供一种重置此状态的方法。已知具有此类重置方案的两个SQLAlchemy包含的方言包括Microsoft
    SQL Server，其中通常使用一个名为`sp_reset_connection`的未记录但广为人知的存储过程，以及PostgreSQL，后者有一系列良好记录的命令，包括`DISCARD`
    `RESET`，`DEALLOCATE`和`UNLISTEN`。
- en: 'The following example illustrates how to replace reset on return with the Microsoft
    SQL Server `sp_reset_connection` stored procedure, using the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event hook. The [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") parameter is set to `None` so that the custom scheme
    can replace the default behavior completely. The custom hook implementation calls
    `.rollback()` in any case, as it’s usually important that the DBAPI’s own tracking
    of commit/rollback will remain consistent with the state of the transaction:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了如何使用 [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件钩子将返回时的重置替换为 Microsoft SQL Server 的 `sp_reset_connection`
    存储过程。 [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") 参数设置为 `None`，以便自定义方案完全替换默认行为。自定义钩子实现在任何情况下都调用 `.rollback()`，因为通常重要的是
    DBAPI 自己的提交/回滚跟踪与事务的状态保持一致：
- en: '[PRE80]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Changed in version 2.0.0b3: Added additional state arguments to the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event and additionally ensured the event
    is invoked for all “reset” occurrences, so that it’s appropriate as a place for
    custom “reset” handlers. Previous schemes which use the [`PoolEvents.checkin()`](events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") handler remain usable as well.'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0.0b3 中更改：为 [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件添加了额外的状态参数，并确保该事件被调用以进行所有“重置”发生，因此它适用于自定义“重置”处理程序的位置。以前使用
    [`PoolEvents.checkin()`](events.html#sqlalchemy.events.PoolEvents.checkin "sqlalchemy.events.PoolEvents.checkin")
    处理程序的方案仍然可用。
- en: See also
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Temporary Table / Resource Reset for Connection Pooling](../dialects/mssql.html#mssql-reset-on-return)
    - in the [Microsoft SQL Server](../dialects/mssql.html) documentation'
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[临时表 / 资源重置以进行连接池](../dialects/mssql.html#mssql-reset-on-return) - 在 [Microsoft
    SQL Server](../dialects/mssql.html) 文档中'
- en: '[Temporary Table / Resource Reset for Connection Pooling](../dialects/postgresql.html#postgresql-reset-on-return)
    in the [PostgreSQL](../dialects/postgresql.html) documentation'
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[临时表 / 资源重置以进行连接池](../dialects/postgresql.html#postgresql-reset-on-return)
    - 在 [PostgreSQL](../dialects/postgresql.html) 文档中'
- en: Logging reset-on-return events
  id: totrans-491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录返回时的重置事件
- en: 'Logging for pool events including reset on return can be set `logging.DEBUG`
    log level along with the `sqlalchemy.pool` logger, or by setting [`create_engine.echo_pool`](engines.html#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") to `"debug"` when using [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"):'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将池事件的日志设置为 `logging.DEBUG` 日志级别，以及 `sqlalchemy.pool` 记录器，或者在使用 [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 时将 [`create_engine.echo_pool`](engines.html#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") 设置为 `"debug"`，以记录包括返回时的重置在内的池事件：
- en: '[PRE81]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'The above pool will show verbose logging including reset on return:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 上述连接池将显示详细的日志，包括返回时的重置：
- en: '[PRE82]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Pool Events
  id: totrans-496
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 池事件
- en: Connection pools support an event interface that allows hooks to execute upon
    first connect, upon each new connection, and upon checkout and checkin of connections.
    See [`PoolEvents`](events.html#sqlalchemy.events.PoolEvents "sqlalchemy.events.PoolEvents")
    for details.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 连接池支持事件接口，允许在第一次连接时、每次新连接时以及连接的签入和签出时执行钩子。有关详细信息，请参阅 [`PoolEvents`](events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents")。
- en: '## Dealing with Disconnects'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '## 处理断开连接'
- en: The connection pool has the ability to refresh individual connections as well
    as its entire set of connections, setting the previously pooled connections as
    “invalid”. A common use case is allow the connection pool to gracefully recover
    when the database server has been restarted, and all previously established connections
    are no longer functional. There are two approaches to this.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 连接池具有刷新单个连接以及其整个连接集的能力，将先前池化的连接设置为“无效”。一个常见的用例是当数据库服务器重新启动时，连接池能够优雅地恢复，并且所有先前建立的连接都不再可用。有两种方法可以实现这一点。
- en: '### Disconnect Handling - Pessimistic'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '### 断开连接处理 - 悲观'
- en: The pessimistic approach refers to emitting a test statement on the SQL connection
    at the start of each connection pool checkout, to test that the database connection
    is still viable. The implementation is dialect-specific, and makes use of either
    a DBAPI-specific ping method, or by using a simple SQL statement like “SELECT
    1”, in order to test the connection for liveness.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 悲观方法是指在每次连接池检出时在 SQL 连接上发出测试语句，以测试数据库连接是否仍然可用。该实现是方言特定的，并且利用了DBAPI特定的ping方法，或者使用简单的SQL语句如“SELECT
    1”，以便测试连接的活性。
- en: The approach adds a small bit of overhead to the connection checkout process,
    however is otherwise the most simple and reliable approach to completely eliminating
    database errors due to stale pooled connections. The calling application does
    not need to be concerned about organizing operations to be able to recover from
    stale connections checked out from the pool.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法在连接检出过程中增加了一点开销，但否则是完全消除由于过期的池化连接而导致的数据库错误的最简单可靠方法。调用应用程序无需担心组织操作以便能够从池中检出的过期连接中恢复。
- en: 'Pessimistic testing of connections upon checkout is achievable by using the
    [`Pool.pre_ping`](#sqlalchemy.pool.Pool.params.pre_ping "sqlalchemy.pool.Pool")
    argument, available from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") via the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") argument:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 [`Pool.pre_ping`](#sqlalchemy.pool.Pool.params.pre_ping "sqlalchemy.pool.Pool")
    参数，可以在每次连接池检出时对连接进行悲观测试，此参数可从 [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 中通过 [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") 参数获得：
- en: '[PRE83]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: The “pre ping” feature operates on a per-dialect basis either by invoking a
    DBAPI-specific “ping” method, or if not available will emit SQL equivalent to
    “SELECT 1”, catching any errors and detecting the error as a “disconnect” situation.
    If the ping / error check determines that the connection is not usable, the connection
    will be immediately recycled, and all other pooled connections older than the
    current time are invalidated, so that the next time they are checked out, they
    will also be recycled before use.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: “预连接测试”功能在每种方言上都是基于每个数据库适配器（DBAPI）特定的“ping”方法运行，如果不可用，则会发出与“SELECT 1”等效的SQL，并捕获任何错误，并将错误检测为“断开”情况。如果
    ping / 错误检查确定连接不可用，则连接将立即被回收，并且所有其他比当前时间更早的池化连接都将被作废，以便在下次检出它们时，它们也将在使用之前被回收。
- en: If the database is still not available when “pre ping” runs, then the initial
    connect will fail and the error for failure to connect will be propagated normally.
    In the uncommon situation that the database is available for connections, but
    is not able to respond to a “ping”, the “pre_ping” will try up to three times
    before giving up, propagating the database error last received.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库在“预连接测试”运行时仍然不可用，则初始连接将失败，并且将正常传播连接失败的错误。在数据库可用于连接但无法响应“ping”的情况下，“pre_ping”将尝试最多三次，然后放弃，并传播最后收到的数据库错误。
- en: It is critical to note that the pre-ping approach **does not accommodate for
    connections dropped in the middle of transactions or other SQL operations**. If
    the database becomes unavailable while a transaction is in progress, the transaction
    will be lost and the database error will be raised. While the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object will detect a “disconnect” situation and
    recycle the connection as well as invalidate the rest of the connection pool when
    this condition occurs, the individual operation where the exception was raised
    will be lost, and it’s up to the application to either abandon the operation,
    or retry the whole transaction again. If the engine is configured using DBAPI-level
    autocommit connections, as described at [Setting Transaction Isolation Levels
    including DBAPI Autocommit](connections.html#dbapi-autocommit), a connection **may**
    be reconnected transparently mid-operation using events. See the section [How
    Do I “Retry” a Statement Execution Automatically?](../faq/connections.html#faq-execute-retry)
    for an example.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，预先ping的方法**不适用于在事务或其他SQL操作中断开连接的情况**。如果数据库在事务进行中变得不可用，则事务将丢失并引发数据库错误。虽然[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象将检测“断开”情况并在此条件发生时重新使用连接并使其余连接池无效，但引发异常的个别操作将丢失，应用程序需要放弃该操作或重新尝试整个事务。如果引擎使用DBAPI级别的自动提交连接进行配置，如[设置包括DBAPI自动提交的事务隔离级别](connections.html#dbapi-autocommit)，则连接**可能**会在操作中透明地重新连接使用事件。有关示例，请参阅[如何自动“重试”语句执行？](../faq/connections.html#faq-execute-retry)部分。
- en: For dialects that make use of “SELECT 1” and catch errors in order to detect
    disconnects, the disconnection test may be augmented for new backend-specific
    error messages using the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") hook.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用“SELECT 1”并捕获错误以检测断开连接的方言，可以使用[`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")钩子来增强新的特定于后端的错误消息的断开连接测试。
- en: '#### Custom / Legacy Pessimistic Ping'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 自定义 / 传统悲观 Ping'
- en: 'Before [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") was added, the “pre-ping” approach historically has
    been performed manually using the [`ConnectionEvents.engine_connect()`](events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") engine event. The most common
    recipe for this is below, for reference purposes in case an application is already
    using such a recipe, or special behaviors are needed:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加[`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine")之前，历史上一直通过[`ConnectionEvents.engine_connect()`](events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect")引擎事件手动执行“预先ping”方法。以下是最常见的配方，供参考，以防应用程序已经使用此类配方，或者需要特殊行为：
- en: '[PRE84]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: The above recipe has the advantage that we are making use of SQLAlchemy’s facilities
    for detecting those DBAPI exceptions that are known to indicate a “disconnect”
    situation, as well as the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object’s ability to correctly invalidate the current
    connection pool when this condition occurs and allowing the current [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") to re-validate onto a new DBAPI connection.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配方的优点在于我们利用了SQLAlchemy用于检测那些已知指示“断开”情况的DBAPI异常以及[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象在此条件发生时正确使当前连接池无效并允许当前[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")重新验证到新的DBAPI连接的能力。
- en: Disconnect Handling - Optimistic
  id: totrans-513
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 断开连接处理 - 乐观
- en: When pessimistic handling is not employed, as well as when the database is shutdown
    and/or restarted in the middle of a connection’s period of use within a transaction,
    the other approach to dealing with stale / closed connections is to let SQLAlchemy
    handle disconnects as they occur, at which point all connections in the pool are
    invalidated, meaning they are assumed to be stale and will be refreshed upon next
    checkout. This behavior assumes the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    is used in conjunction with a [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). The [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") has logic which can detect disconnection events and
    refresh the pool automatically.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 当不使用悲观处理时，以及当数据库在事务中的连接期间关闭和/或重新启动时，处理陈旧/关闭连接的另一种方法是让SQLAlchemy在发生断开连接时处理，此时池中的所有连接都将被作废，意味着它们被认为是陈旧的，并将在下次检出时刷新。此行为假定[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")与[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")一起使用。[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")具有可以检测断开连接事件并自动刷新池的逻辑。
- en: 'When the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    attempts to use a DBAPI connection, and an exception is raised that corresponds
    to a “disconnect” event, the connection is invalidated. The [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") then calls the [`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate
    "sqlalchemy.pool.Pool.recreate") method, effectively invalidating all connections
    not currently checked out so that they are replaced with new ones upon next checkout.
    This flow is illustrated by the code example below:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")尝试使用DBAPI连接，并引发与“断开”事件对应的异常时，连接将被作废。然后，[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")调用[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate
    "sqlalchemy.pool.Pool.recreate")方法，有效地作废所有当前未检出的连接，以便在下次检出时用新连接替换。下面的代码示例说明了这个流程：
- en: '[PRE85]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: The above example illustrates that no special intervention is needed to refresh
    the pool, which continues normally after a disconnection event is detected. However,
    one database exception is raised, per each connection that is in use while the
    database unavailability event occurred. In a typical web application using an
    ORM Session, the above condition would correspond to a single request failing
    with a 500 error, then the web application continuing normally beyond that. Hence
    the approach is “optimistic” in that frequent database restarts are not anticipated.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例说明了在检测到断开连接事件后，刷新池不需要任何特殊干预，池在此后会正常运行。然而，在数据库不可用事件发生时，每个正在使用的连接会引发一个数据库异常。在使用ORM会话的典型Web应用程序中，上述情况将对应于一个请求失败并显示500错误，然后Web应用程序在此之后会正常继续。因此，这种方法是“乐观”的，不预期频繁的数据库重启。
- en: '#### Setting Pool Recycle'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 设置池回收'
- en: 'An additional setting that can augment the “optimistic” approach is to set
    the pool recycle parameter. This parameter prevents the pool from using a particular
    connection that has passed a certain age, and is appropriate for database backends
    such as MySQL that automatically close connections that have been stale after
    a particular period of time:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 可以增强“乐观”方法的另一个设置是设置池回收参数。该参数防止池使用已经过一定年龄的特定连接，并适用于数据库后端，例如MySQL，在特定时间后自动关闭陈旧连接：
- en: '[PRE86]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Above, any DBAPI connection that has been open for more than one hour will
    be invalidated and replaced, upon next checkout. Note that the invalidation **only**
    occurs during checkout - not on any connections that are held in a checked out
    state. `pool_recycle` is a function of the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    itself, independent of whether or not an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is in use.  ### More on Invalidation'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况下，任何已经打开超过一小时的DBAPI连接将在下次检出时被作废并替换。请注意，作废**仅**发生在检出时 - 而不是在任何处于已检出状态的连接上。`pool_recycle`是[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")本身的一个函数，与是否使用[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")无关。### 更多关于作废的信息
- en: The [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") provides “connection
    invalidation” services which allow both explicit invalidation of a connection
    as well as automatic invalidation in response to conditions that are determined
    to render a connection unusable.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")提供了“连接失效”服务，允许对连接进行显式失效以及在确定使连接无法使用的条件下自动失效。'
- en: “Invalidation” means that a particular DBAPI connection is removed from the
    pool and discarded. The `.close()` method is called on this connection if it is
    not clear that the connection itself might not be closed, however if this method
    fails, the exception is logged but the operation still proceeds.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: “失效”意味着特定的DBAPI连接被从池中移除并丢弃。如果不清楚连接本身是否可能已关闭，则会调用此连接的`.close()`方法，但是如果此方法失败，则会记录异常，但操作仍将继续。
- en: 'When using a [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    the [`Connection.invalidate()`](connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method is the usual entrypoint to explicit
    invalidation. Other conditions by which a DBAPI connection might be invalidated
    include:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")时，[`Connection.invalidate()`](connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate")方法是显式失效的常规入口点。导致DBAPI连接失效的其他条件包括：
- en: a DBAPI exception such as [`OperationalError`](exceptions.html#sqlalchemy.exc.OperationalError
    "sqlalchemy.exc.OperationalError"), raised when a method like `connection.execute()`
    is called, is detected as indicating a so-called “disconnect” condition. As the
    Python DBAPI provides no standard system for determining the nature of an exception,
    all SQLAlchemy dialects include a system called `is_disconnect()` which will examine
    the contents of an exception object, including the string message and any potential
    error codes included with it, in order to determine if this exception indicates
    that the connection is no longer usable. If this is the case, the `_ConnectionFairy.invalidate()`
    method is called and the DBAPI connection is then discarded.
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当调用诸如`connection.execute()`之类的方法时引发的DBAPI异常，例如[`OperationalError`](exceptions.html#sqlalchemy.exc.OperationalError
    "sqlalchemy.exc.OperationalError")被检测为指示所谓的“断开”条件。由于Python DBAPI没有用于确定异常性质的标准系统，所有SQLAlchemy方言都包含一个称为`is_disconnect()`的系统，它将检查异常对象的内容，包括字符串消息以及其中包含的任何潜在错误代码，以确定此异常是否指示连接不再可用。如果是这种情况，则调用`_ConnectionFairy.invalidate()`方法，然后丢弃DBAPI连接。
- en: When the connection is returned to the pool, and calling the `connection.rollback()`
    or `connection.commit()` methods, as dictated by the pool’s “reset on return”
    behavior, throws an exception. A final attempt at calling `.close()` on the connection
    will be made, and it is then discarded.
  id: totrans-526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当连接被返回到池中，并且调用`connection.rollback()`或`connection.commit()`方法时，根据池的“返回时重置”行为，抛出异常。最后尝试调用连接的`.close()`方法，然后将其丢弃。
- en: When a listener implementing [`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") raises the [`DisconnectionError`](exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError") exception, indicating that the connection
    won’t be usable and a new connection attempt needs to be made.
  id: totrans-527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当实现[`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout")的监听器引发[`DisconnectionError`](exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError")异常时，表示连接将无法使用，需要进行新的连接尝试。
- en: 'All invalidations which occur will invoke the [`PoolEvents.invalidate()`](events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate") event.  ### Supporting new database
    error codes for disconnect scenarios'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 所有发生的失效都将调用[`PoolEvents.invalidate()`](events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate")事件。### 支持断开场景的新数据库错误代码
- en: SQLAlchemy dialects each include a routine called `is_disconnect()` that is
    invoked whenever a DBAPI exception is encountered. The DBAPI exception object
    is passed to this method, where dialect-specific heuristics will then determine
    if the error code received indicates that the database connection has been “disconnected”,
    or is in an otherwise unusable state which indicates it should be recycled. The
    heuristics applied here may be customized using the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook, which is typically
    established via the owning [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object. Using this hook, all errors which occur are
    delivered passing along a contextual object known as [`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext"). Custom event hooks may control whether
    or not a particular error should be considered a “disconnect” situation or not,
    as well as if this disconnect should cause the entire connection pool to be invalidated
    or not.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 每个SQLAlchemy方言都包括一个名为 `is_disconnect()` 的例程，每当遇到DBAPI异常时就会调用它。DBAPI异常对象被传递给此方法，方言特定的启发式将确定接收到的错误代码是否指示数据库连接已“断开”，或者处于无法使用的状态，这表明应该对其进行回收。这里应用的启发式可以通过
    [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 事件钩子进行自定义，该钩子通常通过拥有的 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象进行建立。使用此钩子，所有发生的错误都将传递一个称为 [`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext") 的上下文对象。自定义事件钩子可以控制特定错误是否应被视为“断开”情况，以及此断开是否应导致整个连接池无效化。
- en: 'For example, to add support to consider the Oracle error codes `DPY-1001` and
    `DPY-4011` to be handled as disconnect codes, apply an event handler to the engine
    after creation:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要添加支持将Oracle错误代码 `DPY-1001` 和 `DPY-4011` 视为已处理的断开代码，请在创建引擎后应用事件处理程序：
- en: '[PRE87]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: The above error processing function will be invoked for all Oracle errors raised,
    including those caught when using the [pool pre ping](#pool-disconnects-pessimistic)
    feature for those backends that rely upon disconnect error handling (new in 2.0).
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 上述错误处理函数将被调用以处理所有抛出的Oracle错误，包括在使用 [pool pre ping](#pool-disconnects-pessimistic)
    功能时捕获的那些依赖于断开连接错误处理的后端（2.0中新增）。
- en: See also
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")  ### Disconnect Handling - Pessimistic'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")  ### 断开连接处理 - 悲观'
- en: The pessimistic approach refers to emitting a test statement on the SQL connection
    at the start of each connection pool checkout, to test that the database connection
    is still viable. The implementation is dialect-specific, and makes use of either
    a DBAPI-specific ping method, or by using a simple SQL statement like “SELECT
    1”, in order to test the connection for liveness.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 悲观的方法是指在每次连接池检出时发出一个测试语句，以测试数据库连接是否仍然可用。该实现是方言特定的，可以使用特定于DBAPI的ping方法，也可以使用简单的SQL语句如“SELECT
    1”来测试连接的活动性。
- en: The approach adds a small bit of overhead to the connection checkout process,
    however is otherwise the most simple and reliable approach to completely eliminating
    database errors due to stale pooled connections. The calling application does
    not need to be concerned about organizing operations to be able to recover from
    stale connections checked out from the pool.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法会给连接检出过程增加一点开销，但是除此之外，它是完全消除由于过时的连接池连接而导致数据库错误的最简单和可靠的方法。调用应用程序不需要关心组织操作以便从连接池中检出过时的连接。
- en: 'Pessimistic testing of connections upon checkout is achievable by using the
    [`Pool.pre_ping`](#sqlalchemy.pool.Pool.params.pre_ping "sqlalchemy.pool.Pool")
    argument, available from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") via the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") argument:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    的 [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") 参数，可以通过使用 [`Pool.pre_ping`](#sqlalchemy.pool.Pool.params.pre_ping
    "sqlalchemy.pool.Pool") 参数来实现在检出时对连接进行悲观测试：
- en: '[PRE88]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: The “pre ping” feature operates on a per-dialect basis either by invoking a
    DBAPI-specific “ping” method, or if not available will emit SQL equivalent to
    “SELECT 1”, catching any errors and detecting the error as a “disconnect” situation.
    If the ping / error check determines that the connection is not usable, the connection
    will be immediately recycled, and all other pooled connections older than the
    current time are invalidated, so that the next time they are checked out, they
    will also be recycled before use.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: “预连接”功能是在每个方言基础上运行的，通过调用特定于 DBAPI 的“ping”方法，或者如果不可用，则会发出等效于“SELECT 1”的 SQL，捕获任何错误并将错误检测为“断开”情况。如果
    ping / 错误检查确定连接不可用，则连接将立即被回收，并且所有比当前时间更旧的池化连接都将被作废，以便下次检出时，在使用之前也将被回收。
- en: If the database is still not available when “pre ping” runs, then the initial
    connect will fail and the error for failure to connect will be propagated normally.
    In the uncommon situation that the database is available for connections, but
    is not able to respond to a “ping”, the “pre_ping” will try up to three times
    before giving up, propagating the database error last received.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在“预 ping”运行时数据库仍然不可用，则初始连接将失败，并且连接失败的错误将正常传播。在数据库可用于连接但无法响应“ping”的情况下，将尝试最多三次“预
    ping”，然后放弃，传播上次收到的数据库错误。
- en: It is critical to note that the pre-ping approach **does not accommodate for
    connections dropped in the middle of transactions or other SQL operations**. If
    the database becomes unavailable while a transaction is in progress, the transaction
    will be lost and the database error will be raised. While the [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object will detect a “disconnect” situation and
    recycle the connection as well as invalidate the rest of the connection pool when
    this condition occurs, the individual operation where the exception was raised
    will be lost, and it’s up to the application to either abandon the operation,
    or retry the whole transaction again. If the engine is configured using DBAPI-level
    autocommit connections, as described at [Setting Transaction Isolation Levels
    including DBAPI Autocommit](connections.html#dbapi-autocommit), a connection **may**
    be reconnected transparently mid-operation using events. See the section [How
    Do I “Retry” a Statement Execution Automatically?](../faq/connections.html#faq-execute-retry)
    for an example.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，预连接方法**不适用于事务中断开的连接或其他 SQL 操作**。如果数据库在事务进行中变得不可用，则事务将丢失并引发数据库错误。虽然 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象会检测到“断开”情况并在发生此情况时回收连接以及使其余连接池无效，但引发异常的个别操作将丢失，由应用程序来放弃操作或重新尝试整个事务。如果引擎使用
    DBAPI 级别的自动提交连接进行配置，如 [设置事务隔离级别，包括 DBAPI 自动提交](connections.html#dbapi-autocommit)，则可以使用事件在操作中透明地重新连接。有关示例，请参阅
    [如何“自动重试”语句执行？](../faq/connections.html#faq-execute-retry) 节。
- en: For dialects that make use of “SELECT 1” and catch errors in order to detect
    disconnects, the disconnection test may be augmented for new backend-specific
    error messages using the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") hook.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用“SELECT 1”并捕获错误以检测断开的方言，可以使用 [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 钩子来增加新的后端特定错误消息的断开测试。
- en: '#### Custom / Legacy Pessimistic Ping'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 自定义 / 传统悲观的预连接'
- en: 'Before [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") was added, the “pre-ping” approach historically has
    been performed manually using the [`ConnectionEvents.engine_connect()`](events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") engine event. The most common
    recipe for this is below, for reference purposes in case an application is already
    using such a recipe, or special behaviors are needed:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加 [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") 之前，历史上“预 ping”方法是通过使用 [`ConnectionEvents.engine_connect()`](events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") 引擎事件手动执行的。以下是最常见的配方，供参考，以防应用程序已经使用了这样的配方，或者需要特殊的行为：
- en: '[PRE89]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'The above recipe has the advantage that we are making use of SQLAlchemy’s facilities
    for detecting those DBAPI exceptions that are known to indicate a “disconnect”
    situation, as well as the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object’s ability to correctly invalidate the current
    connection pool when this condition occurs and allowing the current [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") to re-validate onto a new DBAPI connection.  ####
    Custom / Legacy Pessimistic Ping'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '上述配方的优点是我们利用 SQLAlchemy 的设施来检测那些已知指示“断开连接”情况的 DBAPI 异常，以及 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象在此条件发生时正确地使当前连接池无效并允许当前 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 重新验证到新的 DBAPI 连接。  #### 自定义/遗留悲观ping'
- en: 'Before [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") was added, the “pre-ping” approach historically has
    been performed manually using the [`ConnectionEvents.engine_connect()`](events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") engine event. The most common
    recipe for this is below, for reference purposes in case an application is already
    using such a recipe, or special behaviors are needed:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加 [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") 之前，"预先ping" 方法的历史记录通常是使用 [`ConnectionEvents.engine_connect()`](events.html#sqlalchemy.events.ConnectionEvents.engine_connect
    "sqlalchemy.events.ConnectionEvents.engine_connect") 引擎事件手动执行的。下面是最常见的配方，供参考，以防应用程序已经使用此类配方，或者需要特殊的行为：
- en: '[PRE90]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: The above recipe has the advantage that we are making use of SQLAlchemy’s facilities
    for detecting those DBAPI exceptions that are known to indicate a “disconnect”
    situation, as well as the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object’s ability to correctly invalidate the current
    connection pool when this condition occurs and allowing the current [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") to re-validate onto a new DBAPI connection.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配方的优点是我们利用 SQLAlchemy 的设施来检测那些已知指示“断开连接”情况的 DBAPI 异常，以及 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象在此条件发生时正确地使当前连接池无效并允许当前 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 重新验证到新的 DBAPI 连接。
- en: Disconnect Handling - Optimistic
  id: totrans-550
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 断开处理 - 乐观
- en: When pessimistic handling is not employed, as well as when the database is shutdown
    and/or restarted in the middle of a connection’s period of use within a transaction,
    the other approach to dealing with stale / closed connections is to let SQLAlchemy
    handle disconnects as they occur, at which point all connections in the pool are
    invalidated, meaning they are assumed to be stale and will be refreshed upon next
    checkout. This behavior assumes the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    is used in conjunction with a [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"). The [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") has logic which can detect disconnection events and
    refresh the pool automatically.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 当不使用悲观处理，并且在事务中连接使用期间数据库关闭和/或重新启动时，处理陈旧/关闭连接的另一种方法是让 SQLAlchemy 在断开连接时处理，此时池中的所有连接都将被作废，意味着它们被假定为陈旧的，并将在下次检出时刷新。此行为假定与
    [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 一起使用 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")。[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 具有可以检测到断开连接事件并自动刷新池的逻辑。
- en: 'When the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    attempts to use a DBAPI connection, and an exception is raised that corresponds
    to a “disconnect” event, the connection is invalidated. The [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") then calls the [`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate
    "sqlalchemy.pool.Pool.recreate") method, effectively invalidating all connections
    not currently checked out so that they are replaced with new ones upon next checkout.
    This flow is illustrated by the code example below:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    尝试使用 DBAPI 连接，并引发与“断开”事件对应的异常时，连接将被作废。然后，[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 调用 [`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate
    "sqlalchemy.pool.Pool.recreate") 方法，有效地作废所有当前未检出的连接，以便在下一次检出时用新连接替换它们。下面的代码示例说明了这个流程：
- en: '[PRE91]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: The above example illustrates that no special intervention is needed to refresh
    the pool, which continues normally after a disconnection event is detected. However,
    one database exception is raised, per each connection that is in use while the
    database unavailability event occurred. In a typical web application using an
    ORM Session, the above condition would correspond to a single request failing
    with a 500 error, then the web application continuing normally beyond that. Hence
    the approach is “optimistic” in that frequent database restarts are not anticipated.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例说明，在检测到断开连接事件后，不需要任何特殊干预来刷新池，池在此后会正常运行。然而，在数据库不可用事件发生时，每个正在使用的连接都会引发一个数据库异常。在使用
    ORM 会话的典型 Web 应用程序中，上述情况将对应于一个请求失败并返回 500 错误，然后 Web 应用程序在此之后会正常继续运行。因此，这种方法是“乐观的”，不预期频繁地重启数据库。
- en: '#### Setting Pool Recycle'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 设置池回收'
- en: 'An additional setting that can augment the “optimistic” approach is to set
    the pool recycle parameter. This parameter prevents the pool from using a particular
    connection that has passed a certain age, and is appropriate for database backends
    such as MySQL that automatically close connections that have been stale after
    a particular period of time:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 可以增强“乐观”方法的另一个设置是设置池回收参数。该参数防止池使用已经存在一段时间的特定连接，适用于数据库后端（如 MySQL），该后端在一段特定时间后会自动关闭已经过时的连接：
- en: '[PRE92]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Above, any DBAPI connection that has been open for more than one hour will
    be invalidated and replaced, upon next checkout. Note that the invalidation **only**
    occurs during checkout - not on any connections that are held in a checked out
    state. `pool_recycle` is a function of the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    itself, independent of whether or not an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is in use.  #### Setting Pool Recycle'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '在上述设置中，任何已经打开超过一小时的 DBAPI 连接将在下一次检出时被作废并替换。请注意，作废仅在检出时发生 - 不会作用于任何处于已检出状态的连接。`pool_recycle`
    是 [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 本身的一个函数，与是否使用 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 无关。  #### 设置池回收'
- en: 'An additional setting that can augment the “optimistic” approach is to set
    the pool recycle parameter. This parameter prevents the pool from using a particular
    connection that has passed a certain age, and is appropriate for database backends
    such as MySQL that automatically close connections that have been stale after
    a particular period of time:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 可以增强“乐观”方法的另一个设置是设置池回收参数。该参数防止池使用已经存在一段时间的特定连接，适用于数据库后端（如 MySQL），该后端在一段特定时间后会自动关闭已经过时的连接：
- en: '[PRE93]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Above, any DBAPI connection that has been open for more than one hour will be
    invalidated and replaced, upon next checkout. Note that the invalidation **only**
    occurs during checkout - not on any connections that are held in a checked out
    state. `pool_recycle` is a function of the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    itself, independent of whether or not an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is in use.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述设置中，任何已经打开超过一小时的 DBAPI 连接将在下一次检出时被作废并替换。请注意，作废仅在检出时发生 - 不会作用于任何处于已检出状态的连接。`pool_recycle`
    是 [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 本身的一个函数，与是否使用 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 无关。
- en: '### More on Invalidation'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '### 更多关于作废的内容'
- en: The [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") provides “connection
    invalidation” services which allow both explicit invalidation of a connection
    as well as automatic invalidation in response to conditions that are determined
    to render a connection unusable.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")提供“连接失效”服务，允许显式失效连接以及在确定使连接不可用的条件下自动失效。'
- en: “Invalidation” means that a particular DBAPI connection is removed from the
    pool and discarded. The `.close()` method is called on this connection if it is
    not clear that the connection itself might not be closed, however if this method
    fails, the exception is logged but the operation still proceeds.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: “失效”意味着特定的DBAPI连接从池中移除并丢弃。如果不清楚连接本身是否关闭，则在此连接上调用`.close()`方法，但如果此方法失败，则记录异常但操作仍继续。
- en: 'When using a [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine"),
    the [`Connection.invalidate()`](connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method is the usual entrypoint to explicit
    invalidation. Other conditions by which a DBAPI connection might be invalidated
    include:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")时，[`Connection.invalidate()`](connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate")方法通常是显式失效的入口点。其他可能使DBAPI连接失效的条件包括：
- en: a DBAPI exception such as [`OperationalError`](exceptions.html#sqlalchemy.exc.OperationalError
    "sqlalchemy.exc.OperationalError"), raised when a method like `connection.execute()`
    is called, is detected as indicating a so-called “disconnect” condition. As the
    Python DBAPI provides no standard system for determining the nature of an exception,
    all SQLAlchemy dialects include a system called `is_disconnect()` which will examine
    the contents of an exception object, including the string message and any potential
    error codes included with it, in order to determine if this exception indicates
    that the connection is no longer usable. If this is the case, the `_ConnectionFairy.invalidate()`
    method is called and the DBAPI connection is then discarded.
  id: totrans-566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如[`OperationalError`](exceptions.html#sqlalchemy.exc.OperationalError "sqlalchemy.exc.OperationalError")这样的DBAPI异常，在调用`connection.execute()`等方法时引发，被检测为所谓的“断开”条件。由于Python
    DBAPI没有确定异常性质的标准系统，所有SQLAlchemy方言都包括一个名为`is_disconnect()`的系统，它将检查异常对象的内容，包括字符串消息和其中包含的任何潜在错误代码，以确定此异常是否指示连接不再可用。如果是这种情况，将调用`_ConnectionFairy.invalidate()`方法，然后丢弃DBAPI连接。
- en: When the connection is returned to the pool, and calling the `connection.rollback()`
    or `connection.commit()` methods, as dictated by the pool’s “reset on return”
    behavior, throws an exception. A final attempt at calling `.close()` on the connection
    will be made, and it is then discarded.
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当连接返回到池中，并调用`connection.rollback()`或`connection.commit()`方法时，根据池的“返回时重置”行为，抛出异常。将最后尝试在连接上调用`.close()`方法，然后将其丢弃。
- en: When a listener implementing [`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout") raises the [`DisconnectionError`](exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError") exception, indicating that the connection
    won’t be usable and a new connection attempt needs to be made.
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当实现[`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout")的监听器引发[`DisconnectionError`](exceptions.html#sqlalchemy.exc.DisconnectionError
    "sqlalchemy.exc.DisconnectionError")异常时，表示连接将无法使用，需要进行新的连接尝试。
- en: All invalidations which occur will invoke the [`PoolEvents.invalidate()`](events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate") event.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 所有发生的失效将调用[`PoolEvents.invalidate()`](events.html#sqlalchemy.events.PoolEvents.invalidate
    "sqlalchemy.events.PoolEvents.invalidate")事件。
- en: '### Supporting new database error codes for disconnect scenarios'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '### 支持断开情景的新数据库错误代码'
- en: SQLAlchemy dialects each include a routine called `is_disconnect()` that is
    invoked whenever a DBAPI exception is encountered. The DBAPI exception object
    is passed to this method, where dialect-specific heuristics will then determine
    if the error code received indicates that the database connection has been “disconnected”,
    or is in an otherwise unusable state which indicates it should be recycled. The
    heuristics applied here may be customized using the [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event hook, which is typically
    established via the owning [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") object. Using this hook, all errors which occur are
    delivered passing along a contextual object known as [`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext"). Custom event hooks may control whether
    or not a particular error should be considered a “disconnect” situation or not,
    as well as if this disconnect should cause the entire connection pool to be invalidated
    or not.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 方言（dialects）中都包含一个名为 `is_disconnect()` 的程序，当遇到 DBAPI 异常时会调用该程序。DBAPI
    异常对象会传递给这个方法，在这里，方言特定的启发法则将确定接收到的错误代码是否指示数据库连接已被“断开”，或者处于其他无法使用的状态，表明应该重新使用该连接。此处应用的启发式方法可以使用
    [`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 事件钩子进行自定义，通常是通过所属的 [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象建立的。使用此钩子，所有发生的错误都会传递一个称为 [`ExceptionContext`](connections.html#sqlalchemy.engine.ExceptionContext
    "sqlalchemy.engine.ExceptionContext") 的上下文对象。自定义事件钩子可以控制特定错误是否应该被视为“断开”情况，以及此断开是否应该导致整个连接池无效化。
- en: 'For example, to add support to consider the Oracle error codes `DPY-1001` and
    `DPY-4011` to be handled as disconnect codes, apply an event handler to the engine
    after creation:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要添加支持将 Oracle 错误代码 `DPY-1001` 和 `DPY-4011` 视为断开代码进行处理，需要在创建引擎后应用一个事件处理程序：
- en: '[PRE94]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: The above error processing function will be invoked for all Oracle errors raised,
    including those caught when using the [pool pre ping](#pool-disconnects-pessimistic)
    feature for those backends that rely upon disconnect error handling (new in 2.0).
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 上述错误处理函数将对所有引发的 Oracle 错误进行调用，包括在使用 [pool pre ping](#pool-disconnects-pessimistic)
    特性时捕获的错误，用于依赖于断开连接错误处理的后端（在 2.0 版本中新增）。
- en: See also
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectEvents.handle_error()`](events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")'
- en: '## Using FIFO vs. LIFO'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用 FIFO vs. LIFO'
- en: 'The [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") class
    features a flag called [`QueuePool.use_lifo`](#sqlalchemy.pool.QueuePool.params.use_lifo
    "sqlalchemy.pool.QueuePool"), which can also be accessed from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") via the flag [`create_engine.pool_use_lifo`](engines.html#sqlalchemy.create_engine.params.pool_use_lifo
    "sqlalchemy.create_engine"). Setting this flag to `True` causes the pool’s “queue”
    behavior to instead be that of a “stack”, e.g. the last connection to be returned
    to the pool is the first one to be used on the next request. In contrast to the
    pool’s long- standing behavior of first-in-first-out, which produces a round-robin
    effect of using each connection in the pool in series, lifo mode allows excess
    connections to remain idle in the pool, allowing server-side timeout schemes to
    close these connections out. The difference between FIFO and LIFO is basically
    whether or not its desirable for the pool to keep a full set of connections ready
    to go even during idle periods:'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") 类特征一个名为
    [`QueuePool.use_lifo`](#sqlalchemy.pool.QueuePool.params.use_lifo "sqlalchemy.pool.QueuePool")
    的标志，也可以通过标志 [`create_engine.pool_use_lifo`](engines.html#sqlalchemy.create_engine.params.pool_use_lifo
    "sqlalchemy.create_engine") 在 [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 中访问。将此标志设置为 `True` 会导致池的“队列”行为变为“堆栈”，例如，返回到池中的最后一个连接将在下一次请求中首先被使用。与池的先入先出长期行为相反，后者产生一个轮转效果，依次使用池中的每个连接，LIFO
    模式允许多余的连接在池中保持空闲，从而允许服务器端超时方案关闭这些连接。FIFO 和 LIFO 的区别基本上是池是否在空闲期间保持一组完整的连接准备就绪：'
- en: '[PRE95]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Above, we also make use of the [`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") flag so that connections which are closed from the
    server side are gracefully handled by the connection pool and replaced with a
    new connection.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还使用了[`create_engine.pool_pre_ping`](engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine")标志，以便由服务器端关闭的连接被连接池优雅地处理，并替换为新连接。
- en: Note that the flag only applies to [`QueuePool`](#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") use.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此标志仅适用于[`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")的使用。
- en: New in version 1.3.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3中的新功能。
- en: See also
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Dealing with Disconnects](#pool-disconnects)'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '[处理断开连接](#pool-disconnects)'
- en: '## Using Connection Pools with Multiprocessing or os.fork()'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '## 使用连接池与多进程或os.fork()'
- en: It’s critical that when using a connection pool, and by extension when using
    an [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    created via [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine"),
    that the pooled connections **are not shared to a forked process**. TCP connections
    are represented as file descriptors, which usually work across process boundaries,
    meaning this will cause concurrent access to the file descriptor on behalf of
    two or more entirely independent Python interpreter states.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用连接池时（通过[`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")创建的[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")），至关重要的是，**不要共享池化的连接给分叉的进程**。 TCP连接表示为文件描述符，通常跨进程边界工作，这意味着这将导致在两个或更多完全独立的Python解释器状态的代表性之间并发访问文件描述符。
- en: Depending on specifics of the driver and OS, the issues that arise here range
    from non-working connections to socket connections that are used by multiple processes
    concurrently, leading to broken messaging (the latter case is typically the most
    common).
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 根据驱动程序和操作系统的具体情况，此处出现的问题范围从不起作用的连接到被多个进程同时使用的套接字连接，导致消息中断（后者通常是最常见的情况）。
- en: 'The SQLAlchemy [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    object refers to a connection pool of existing database connections. So when this
    object is replicated to a child process, the goal is to ensure that no database
    connections are carried over. There are four general approaches to this:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")对象指的是现有数据库连接的连接池。因此，当此对象被复制到子进程时，目标是确保不会携带任何数据库连接。有四种一般方法来解决这个问题：
- en: 'Disable pooling using [`NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool").
    This is the most simplistic, one shot system that prevents the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") from using any connection more than once:'
  id: totrans-589
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用[`NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool")禁用连接池。这是最简单的、一次性的系统，防止[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")重复使用任何连接：
- en: '[PRE96]'
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Call [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") on any given [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), passing the [`Engine.dispose.close`](connections.html#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose") parameter with a value of `False`, within
    the initialize phase of the child process. This is so that the new process will
    not touch any of the parent process’ connections and will instead start with new
    connections. **This is the recommended approach**:'
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在子进程的初始化阶段调用[`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")，传递值为`False`的[`Engine.dispose.close`](connections.html#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose")参数。这样新进程就不会触及任何父进程的连接，而是会以新的连接开始。**这是推荐的方法**：
- en: '[PRE97]'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'New in version 1.4.33: Added the [`Engine.dispose.close`](connections.html#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose") parameter to allow the replacement of a connection
    pool in a child process without interfering with the connections used by the parent
    process.'
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本1.4.33中的新功能：添加了[`Engine.dispose.close`](connections.html#sqlalchemy.engine.Engine.dispose.params.close
    "sqlalchemy.engine.Engine.dispose")参数，以允许在子进程中替换连接池，而不会干扰父进程使用的连接。
- en: 'Call [`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose") **directly before** the child process is created.
    This will also cause the child process to start with a new connection pool, while
    ensuring the parent connections are not transferred to the child process:'
  id: totrans-594
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建子进程之前**直接调用**[`Engine.dispose()`](connections.html#sqlalchemy.engine.Engine.dispose
    "sqlalchemy.engine.Engine.dispose")。这也将导致子进程以新的连接池启动，同时确保父连接不会传递给子进程：
- en: '[PRE98]'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'An event handler can be applied to the connection pool that tests for connections
    being shared across process boundaries, and invalidates them:'
  id: totrans-596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以向连接池应用事件处理程序，以测试跨进程边界共享的连接，并使其无效：
- en: '[PRE99]'
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Above, we use an approach similar to that described in [Disconnect Handling
    - Pessimistic](#pool-disconnects-pessimistic) to treat a DBAPI connection that
    originated in a different parent process as an “invalid” connection, coercing
    the pool to recycle the connection record to make a new connection.
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面，我们使用了类似于[断开处理 - 悲观](#pool-disconnects-pessimistic)中描述的方法来处理在不同父进程中起源的DBAPI连接，将其视为“无效”连接，强制池回收连接记录以建立新连接。
- en: The above strategies will accommodate the case of an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") being shared among processes. The above steps alone
    are not sufficient for the case of sharing a specific [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") over a process boundary; prefer to keep the scope
    of a particular [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    local to a single process (and thread). It’s additionally not supported to share
    any kind of ongoing transactional state directly across a process boundary, such
    as an ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object that’s begun a transaction and references active `Connection` instances;
    again prefer to create new [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects in new processes.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 上述策略将适用于在进程之间共享[`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的情况。仅仅上述步骤并不足以处理在进程边界共享特定[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的情况；最好将特定[`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的范围局限于单个进程（和线程）。直接跨进程共享任何类型的进行中的事务状态，比如已开始事务并引用活动`Connection`实例的ORM
    [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象，也不受支持；最好在新进程中创建新的[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象。
- en: Using a pool instance directly
  id: totrans-600
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接使用池实例
- en: 'A pool implementation can be used directly without an engine. This could be
    used in applications that just wish to use the pool behavior without all other
    SQLAlchemy features. In the example below the default pool for the `MySQLdb` dialect
    is obtained using [`create_pool_from_url()`](engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url"):'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 可以直接使用池实现而不需要引擎。这可用于只希望使用池行为而不需要所有其他SQLAlchemy功能的应用程序。在下面的示例中，使用[`create_pool_from_url()`](engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url")获取`MySQLdb`方言的默认池：
- en: '[PRE100]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'If the type of pool to create is not specified, the default one for the dialect
    will be used. To specify it directly the `poolclass` argument can be used, like
    in the following example:'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未指定要创建的池的类型，则将使用该方言的默认池。可以直接指定`poolclass`参数，如下例所示：
- en: '[PRE101]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '## API Documentation - Available Pool Implementations'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: '## API文档 - 可用的池实现'
- en: '| Object Name | Description |'
  id: totrans-606
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-607
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [_ConnectionFairy](#sqlalchemy.pool._ConnectionFairy) | Proxies a DBAPI connection
    and provides return-on-dereference support. |'
  id: totrans-608
  prefs: []
  type: TYPE_TB
  zh: '| [_ConnectionFairy](#sqlalchemy.pool._ConnectionFairy) | 代理一个DBAPI连接，并提供返回引用支持。
    |'
- en: '| [_ConnectionRecord](#sqlalchemy.pool._ConnectionRecord) | Maintains a position
    in a connection pool which references a pooled connection. |'
  id: totrans-609
  prefs: []
  type: TYPE_TB
  zh: '| [_ConnectionRecord](#sqlalchemy.pool._ConnectionRecord) | 维护连接池中的位置，引用一个池化连接。
    |'
- en: '| [AssertionPool](#sqlalchemy.pool.AssertionPool) | A [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") that allows at most one checked out connection at any
    given time. |'
  id: totrans-610
  prefs: []
  type: TYPE_TB
  zh: '| [AssertionPool](#sqlalchemy.pool.AssertionPool) | 允许每次最多只有一个已签出连接的[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")。 |'
- en: '| [AsyncAdaptedQueuePool](#sqlalchemy.pool.AsyncAdaptedQueuePool) | An asyncio-compatible
    version of [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool").
    |'
  id: totrans-611
  prefs: []
  type: TYPE_TB
  zh: '| [异步适配队列池](#sqlalchemy.pool.AsyncAdaptedQueuePool) | [`队列池`](#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool")的一个适用于asyncio的版本。 |'
- en: '| [ConnectionPoolEntry](#sqlalchemy.pool.ConnectionPoolEntry) | Interface for
    the object that maintains an individual database connection on behalf of a [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") instance. |'
  id: totrans-612
  prefs: []
  type: TYPE_TB
  zh: '| [连接池条目](#sqlalchemy.pool.ConnectionPoolEntry) | 代表[`池`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")实例的个别数据库连接的对象的接口。 |'
- en: '| [ManagesConnection](#sqlalchemy.pool.ManagesConnection) | Common base for
    the two connection-management interfaces [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") and [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"). |'
  id: totrans-613
  prefs: []
  type: TYPE_TB
  zh: '| [管理连接](#sqlalchemy.pool.ManagesConnection) | 用于两个连接管理接口[`池代理连接`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")和[`连接池条目`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")的通用基类。 |'
- en: '| [NullPool](#sqlalchemy.pool.NullPool) | A Pool which does not pool connections.
    |'
  id: totrans-614
  prefs: []
  type: TYPE_TB
  zh: '| [空池](#sqlalchemy.pool.NullPool) | 不对连接进行池化的池。 |'
- en: '| [Pool](#sqlalchemy.pool.Pool) | Abstract base class for connection pools.
    |'
  id: totrans-615
  prefs: []
  type: TYPE_TB
  zh: '| [池](#sqlalchemy.pool.Pool) | 连接池的抽象基类。 |'
- en: '| [PoolProxiedConnection](#sqlalchemy.pool.PoolProxiedConnection) | A connection-like
    adapter for a [**PEP 249**](https://peps.python.org/pep-0249/) DBAPI connection,
    which includes additional methods specific to the [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") implementation. |'
  id: totrans-616
  prefs: []
  type: TYPE_TB
  zh: '| [池代理连接](#sqlalchemy.pool.PoolProxiedConnection) | 用于[**PEP 249**](https://peps.python.org/pep-0249/)
    DBAPI连接的类似连接的适配器，其中包括特定于[`池`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")实现的附加方法。
    |'
- en: '| [QueuePool](#sqlalchemy.pool.QueuePool) | A [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") that imposes a limit on the number of open connections.
    |'
  id: totrans-617
  prefs: []
  type: TYPE_TB
  zh: '| [队列池](#sqlalchemy.pool.QueuePool) | 对打开连接数量施加限制的[`池`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")。 |'
- en: '| [SingletonThreadPool](#sqlalchemy.pool.SingletonThreadPool) | A Pool that
    maintains one connection per thread. |'
  id: totrans-618
  prefs: []
  type: TYPE_TB
  zh: '| [单例线程池](#sqlalchemy.pool.SingletonThreadPool) | 每个线程维护一个连接的池。 |'
- en: '| [StaticPool](#sqlalchemy.pool.StaticPool) | A Pool of exactly one connection,
    used for all requests. |'
  id: totrans-619
  prefs: []
  type: TYPE_TB
  zh: '| [静态池](#sqlalchemy.pool.StaticPool) | 用于所有请求的恰好一个连接的池。 |'
- en: '[PRE102]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Abstract base class for connection pools.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 连接池的抽象基类。
- en: '**Members**'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.pool.Pool.__init__), [connect()](#sqlalchemy.pool.Pool.connect),
    [dispose()](#sqlalchemy.pool.Pool.dispose), [recreate()](#sqlalchemy.pool.Pool.recreate)'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.pool.Pool.__init__), [connect()](#sqlalchemy.pool.Pool.connect),
    [dispose()](#sqlalchemy.pool.Pool.dispose), [recreate()](#sqlalchemy.pool.Pool.recreate)'
- en: '**Class signature**'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    ([`sqlalchemy.log.Identified`](internals.html#sqlalchemy.log.Identified "sqlalchemy.log.Identified"),
    `sqlalchemy.event.registry.EventTarget`)
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.pool.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") ([`sqlalchemy.log.Identified`](internals.html#sqlalchemy.log.Identified
    "sqlalchemy.log.Identified"), `sqlalchemy.event.registry.EventTarget`)的签名
- en: '[PRE103]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Construct a Pool.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个池。
- en: 'Parameters:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`creator` – a callable function that returns a DB-API connection object. The
    function will be called with parameters.'
  id: totrans-629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`creator` – 一个可调用的函数，返回一个DB-API连接对象。该函数将带有参数调用。'
- en: '`recycle` – If set to a value other than -1, number of seconds between connection
    recycling, which means upon checkout, if this timeout is surpassed the connection
    will be closed and replaced with a newly opened connection. Defaults to -1.'
  id: totrans-630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`recycle` – 如果设置为除-1以外的值，则连接回收之间的秒数，这意味着在检出时，如果超过此超时，则连接将被关闭并替换为新打开的连接。默认为-1。'
- en: '`logging_name` – String identifier which will be used within the “name” field
    of logging records generated within the “sqlalchemy.pool” logger. Defaults to
    a hexstring of the object’s id.'
  id: totrans-631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logging_name` – 用于“sqlalchemy.pool”记录器中生成的日志记录的“name”字段的字符串标识符。默认为对象id的十六进制字符串。'
- en: '`echo` –'
  id: totrans-632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`echo` –'
- en: if True, the connection pool will log informational output such as when connections
    are invalidated as well as when connections are recycled to the default log handler,
    which defaults to `sys.stdout` for output.. If set to the string `"debug"`, the
    logging will include pool checkouts and checkins.
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为真，则连接池将记录信息输出，例如当连接失效时以及当连接被回收时，默认日志处理程序为`sys.stdout`。如果设置为字符串`"debug"`，日志将包括池检出和检入。
- en: The [`Pool.echo`](#sqlalchemy.pool.Pool.params.echo "sqlalchemy.pool.Pool")
    parameter can also be set from the [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") call by using the [`create_engine.echo_pool`](engines.html#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") parameter.
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Pool.echo`](#sqlalchemy.pool.Pool.params.echo "sqlalchemy.pool.Pool") 参数也可以通过使用
    [`create_engine.echo_pool`](engines.html#sqlalchemy.create_engine.params.echo_pool
    "sqlalchemy.create_engine") 参数从 [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 调用中设置。'
- en: See also
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Logging](engines.html#dbengine-logging) - further detail on how
    to configure logging.'
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[配置日志记录](engines.html#dbengine-logging) - 如何配置日志记录的更多详细信息。'
- en: '`reset_on_return` –'
  id: totrans-637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reset_on_return` –'
- en: Determine steps to take on connections as they are returned to the pool, which
    were not otherwise handled by a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"). Available from [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") via the [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") parameter.
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确定在将连接返回到池中时执行的步骤，这些步骤否则不会由 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 处理。可以通过 [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 通过 [`create_engine.pool_reset_on_return`](engines.html#sqlalchemy.create_engine.params.pool_reset_on_return
    "sqlalchemy.create_engine") 参数来使用。
- en: '[`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return "sqlalchemy.pool.Pool")
    can have any of these values:'
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return "sqlalchemy.pool.Pool")
    可以有以下任何值：'
- en: '`"rollback"` - call rollback() on the connection, to release locks and transaction
    resources. This is the default value. The vast majority of use cases should leave
    this value set.'
  id: totrans-640
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"rollback"` - 在连接上调用 rollback()，释放锁和事务资源。这是默认值。绝大多数情况下应该保持此值不变。'
- en: '`"commit"` - call commit() on the connection, to release locks and transaction
    resources. A commit here may be desirable for databases that cache query plans
    if a commit is emitted, such as Microsoft SQL Server. However, this value is more
    dangerous than ‘rollback’ because any data changes present on the transaction
    are committed unconditionally.'
  id: totrans-641
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"commit"` - 在连接上调用 commit()，释放锁和事务资源。在某些情况下，如微软 SQL Server，如果发出了 commit，则可能需要提交。然而，这个值比
    ‘rollback’ 更危险，因为任何存在于事务中的数据更改都会无条件地提交。'
- en: '`None` - don’t do anything on the connection. This setting may be appropriate
    if the database / DBAPI works in pure “autocommit” mode at all times, or if a
    custom reset handler is established using the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event handler.'
  id: totrans-642
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`None` - 在连接上不执行任何操作。如果数据库/DBAPI 在所有时刻都以纯“自动提交”模式工作，或者使用 [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件处理程序建立了自定义重置处理程序，则此设置可能是合适的。'
- en: '`True` - same as ‘rollback’, this is here for backwards compatibility.'
  id: totrans-643
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`True` - 与 ‘rollback’ 相同，这是为了向后兼容而存在的。'
- en: '`False` - same as None, this is here for backwards compatibility.'
  id: totrans-644
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`False` - 与 None 相同，这是为了向后兼容而存在的。'
- en: For further customization of reset on return, the [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event hook may be used which can perform
    any connection activity desired on reset.
  id: totrans-645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了进一步定制返回时的重置，可以使用 [`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件钩子，该钩子可以在重置时执行任何所需的连接活动。
- en: See also
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reset On Return](#pool-reset-on-return)'
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[返回时重置](#pool-reset-on-return)'
- en: '[`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")'
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`PoolEvents.reset()`](events.html#sqlalchemy.events.PoolEvents.reset "sqlalchemy.events.PoolEvents.reset")'
- en: '`events` – a list of 2-tuples, each of the form `(callable, target)` which
    will be passed to [`listen()`](event.html#sqlalchemy.event.listen "sqlalchemy.event.listen")
    upon construction. Provided here so that event listeners can be assigned via [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") before dialect-level listeners are applied.'
  id: totrans-649
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`events` – 一个 2-元组列表，每个元组的形式为 `(callable, target)`，将在构造时传递给 [`listen()`](event.html#sqlalchemy.event.listen
    "sqlalchemy.event.listen")。此处提供是为了在应用方言级别的监听器之前，可以通过 [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 分配事件监听器。'
- en: '`dialect` – a [`Dialect`](internals.html#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    that will handle the job of calling rollback(), close(), or commit() on DBAPI
    connections. If omitted, a built-in “stub” dialect is used. Applications that
    make use of [`create_engine()`](engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    should not use this parameter as it is handled by the engine creation strategy.'
  id: totrans-650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 一个处理 DBAPI 连接的回滚（rollback()）、关闭（close()）或提交（commit()）工作的 [`Dialect`](internals.html#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")。如果省略，将使用内置的“存根”方言。使用 [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 的应用程序不应使用此参数，因为它由引擎创建策略处理。'
- en: '`pre_ping` –'
  id: totrans-651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pre_ping` –'
- en: if True, the pool will emit a “ping” (typically “SELECT 1”, but is dialect-specific)
    on the connection upon checkout, to test if the connection is alive or not. If
    not, the connection is transparently re-connected and upon success, all other
    pooled connections established prior to that timestamp are invalidated. Requires
    that a dialect is passed as well to interpret the disconnection error.
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则池将在检出连接时发出“ping”（通常为“SELECT 1”，但是是特定于方言的），以测试连接是否活动。如果不活动，则连接将被透明地重新连接，并在成功后，所有在该时间戳之前建立的其他池连接将无效。还需要传递一个方言以解释断开连接错误。
- en: New in version 1.2.
  id: totrans-653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.2 版本中新增。
- en: '[PRE104]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Return a DBAPI connection from the pool.
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 从池中返回一个 DBAPI 连接。
- en: The connection is instrumented such that when its `close()` method is called,
    the connection will be returned to the pool.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 连接被检测工具检测，以便在调用其 `close()` 方法时，连接将被返回到池中。
- en: '[PRE105]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Dispose of this pool.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 处置此池。
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可能导致仍处于检出状态的连接保持打开状态，因为它仅影响池中处于空闲状态的连接。
- en: See also
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
- en: '[PRE106]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的 [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")，与此相同类的池，并配置相同的创建参数。
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.Pool.dispose
    "sqlalchemy.pool.Pool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法与 [`dispose()`](#sqlalchemy.pool.Pool.dispose "sqlalchemy.pool.Pool.dispose")
    结合使用，用于关闭整个 [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 并在其位置创建一个新的
    Pool。
- en: '[PRE107]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: A [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") that imposes a limit
    on the number of open connections.
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 施加对打开连接数量的限制的 [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")。
- en: '[`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") is the
    default pooling implementation used for all [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects other than SQLite with a `:memory:` database.'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") 是除了 SQLite
    的 `:memory:` 数据库之外，所有 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    对象的默认池实现。'
- en: The [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") class
    **is not compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"). The [`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") class is used automatically when using
    [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"), if no other kind of pool is specified.
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") 类与 asyncio
    不兼容，并且 [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")。当使用 [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") 时，如果没有指定其他类型的池，则会自动使用 [`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") 类。'
- en: See also
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool "sqlalchemy.pool.AsyncAdaptedQueuePool")'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool "sqlalchemy.pool.AsyncAdaptedQueuePool")'
- en: '**Members**'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.pool.QueuePool.__init__), [dispose()](#sqlalchemy.pool.QueuePool.dispose),
    [recreate()](#sqlalchemy.pool.QueuePool.recreate)'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.pool.QueuePool.__init__), [dispose()](#sqlalchemy.pool.QueuePool.dispose),
    [recreate()](#sqlalchemy.pool.QueuePool.recreate)'
- en: '**Class signature**'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.pool.QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")（[`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.base.Pool")）
- en: '[PRE108]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Construct a QueuePool.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个 QueuePool。
- en: 'Parameters:'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`creator` – a callable function that returns a DB-API connection object, same
    as that of [`Pool.creator`](#sqlalchemy.pool.Pool.params.creator "sqlalchemy.pool.Pool").'
  id: totrans-678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`creator` – 一个可调用函数，返回一个与[`Pool.creator`](#sqlalchemy.pool.Pool.params.creator
    "sqlalchemy.pool.Pool")相同的 DB-API 连接对象。'
- en: '`pool_size` – The size of the pool to be maintained, defaults to 5\. This is
    the largest number of connections that will be kept persistently in the pool.
    Note that the pool begins with no connections; once this number of connections
    is requested, that number of connections will remain. `pool_size` can be set to
    0 to indicate no size limit; to disable pooling, use a [`NullPool`](#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") instead.'
  id: totrans-679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool_size` – 要维护的池的大小，默认为5。这是将持续保留在池中的最大连接数。请注意，池开始时没有连接；一旦请求了这个数量的连接，这个数量的连接将保持不变。`pool_size`
    可设置为0，表示没有大小限制；要禁用池化，请使用 [`NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool")。'
- en: '`max_overflow` – The maximum overflow size of the pool. When the number of
    checked-out connections reaches the size set in pool_size, additional connections
    will be returned up to this limit. When those additional connections are returned
    to the pool, they are disconnected and discarded. It follows then that the total
    number of simultaneous connections the pool will allow is pool_size + max_overflow,
    and the total number of “sleeping” connections the pool will allow is pool_size.
    max_overflow can be set to -1 to indicate no overflow limit; no limit will be
    placed on the total number of concurrent connections. Defaults to 10.'
  id: totrans-680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_overflow` – 池的最大溢出大小。当已签出连接的数量达到 pool_size 中设置的大小时，将返回额外的连接，直到达到此限制为止。当这些额外的连接返回到池中时，它们将被断开并丢弃。因此，池允许的同时连接数是
    pool_size + max_overflow，池允许的“睡眠”连接总数是 pool_size。max_overflow 可设置为-1，表示无溢出限制；不会对并发连接的总数设置限制。默认为10。'
- en: '`timeout` – The number of seconds to wait before giving up on returning a connection.
    Defaults to 30.0\. This can be a float but is subject to the limitations of Python
    time functions which may not be reliable in the tens of milliseconds.'
  id: totrans-681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timeout` – 在放弃返回连接之前等待的秒数。默认为30.0。这可以是一个浮点数，但受 Python 时间函数的限制，可能不可靠，精度在几十毫秒内。'
- en: '`use_lifo` –'
  id: totrans-682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_lifo` –'
- en: use LIFO (last-in-first-out) when retrieving connections instead of FIFO (first-in-first-out).
    Using LIFO, a server-side timeout scheme can reduce the number of connections
    used during non-peak periods of use. When planning for server-side timeouts, ensure
    that a recycle or pre-ping strategy is in use to gracefully handle stale connections.
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在检索连接时使用 LIFO（后进先出）而不是 FIFO（先进先出）。使用 LIFO，服务器端的超时方案可以在非高峰使用期间减少使用的连接数量。在规划服务器端超时时，请确保使用回收或预检查策略来优雅地处理陈旧的连接。
- en: New in version 1.3.
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新功能，版本1.3。
- en: See also
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using FIFO vs. LIFO](#pool-use-lifo)'
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 FIFO vs. LIFO](#pool-use-lifo)'
- en: '[Dealing with Disconnects](#pool-disconnects)'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[处理断开连接](#pool-disconnects)'
- en: '`**kw` – Other keyword arguments including [`Pool.recycle`](#sqlalchemy.pool.Pool.params.recycle
    "sqlalchemy.pool.Pool"), [`Pool.echo`](#sqlalchemy.pool.Pool.params.echo "sqlalchemy.pool.Pool"),
    [`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return "sqlalchemy.pool.Pool")
    and others are passed to the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    constructor.'
  id: totrans-688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 其他关键字参数，包括[`Pool.recycle`](#sqlalchemy.pool.Pool.params.recycle "sqlalchemy.pool.Pool")、[`Pool.echo`](#sqlalchemy.pool.Pool.params.echo
    "sqlalchemy.pool.Pool")、[`Pool.reset_on_return`](#sqlalchemy.pool.Pool.params.reset_on_return
    "sqlalchemy.pool.Pool")等，将传递给[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")构造函数。'
- en: '[PRE109]'
  id: totrans-689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: Dispose of this pool.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 释放此池。
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可能导致已签出的连接保持打开状态，因为它只影响池中处于空闲状态的连接。
- en: See also
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
- en: '[PRE110]'
  id: totrans-694
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")，与此对象相同类别的对象，并配置相同的创建参数。
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.QueuePool.dispose
    "sqlalchemy.pool.QueuePool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法与 [`dispose()`](#sqlalchemy.pool.QueuePool.dispose "sqlalchemy.pool.QueuePool.dispose")
    结合使用，以关闭整个 [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 并在其位置创建一个新的池。
- en: '[PRE111]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: An asyncio-compatible version of [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool").
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: '[`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool") 的一个与
    asyncio 兼容的版本。'
- en: This pool is used by default when using [`AsyncEngine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") engines that were generated from [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"). It uses an asyncio-compatible queue
    implementation that does not use `threading.Lock`.
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用从 [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") 生成的 [`AsyncEngine`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine
    "sqlalchemy.ext.asyncio.AsyncEngine") 引擎时，默认使用此池。它使用了一个与 asyncio 兼容的队列实现，不使用 `threading.Lock`。
- en: The arguments and operation of [`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") are otherwise identical to that of [`QueuePool`](#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool").
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool "sqlalchemy.pool.AsyncAdaptedQueuePool")
    的参数和操作与 [`QueuePool`](#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    相同。'
- en: '**Class signature**'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") ([`sqlalchemy.pool.impl.QueuePool`](#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.impl.QueuePool"))
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.pool.AsyncAdaptedQueuePool`](#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool") ([`sqlalchemy.pool.impl.QueuePool`](#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.impl.QueuePool"))
- en: '[PRE112]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: A Pool that maintains one connection per thread.
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 每个线程维护一个连接的池。
- en: Maintains one connection per each thread, never moving a connection to a thread
    other than the one which it was created in.
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 每个线程维护一个连接，永远不会将连接移动到其创建的线程之外。
- en: Warning
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: the [`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    will call `.close()` on arbitrary connections that exist beyond the size setting
    of `pool_size`, e.g. if more unique **thread identities** than what `pool_size`
    states are used. This cleanup is non-deterministic and not sensitive to whether
    or not the connections linked to those thread identities are currently in use.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    将对超出 `pool_size` 大小设置的任意连接调用 `.close()`，例如，如果使用的唯一 **线程标识** 大于 `pool_size` 所指定的数量。此清理是非确定性的，并且不会因连接是否与这些线程标识关联并当前正在使用而受到影响。'
- en: '[`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    may be improved in a future release, however in its current status it is generally
    used only for test scenarios using a SQLite `:memory:` database and is not recommended
    for production use.'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    在未来的版本中可能会得到改进，但在当前状态下，它通常仅用于使用 SQLite 的 `:memory:` 数据库的测试场景，并不建议用于生产环境。'
- en: The [`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    class **is not compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine").
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    类 **不兼容** asyncio 和 [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")。'
- en: 'Options are the same as those of [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"),
    as well as:'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 选项与 [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 相同，以及：
- en: 'Parameters:'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**pool_size** – The number of threads in which to maintain connections at once.
    Defaults to five.'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: '**pool_size** – 同时维护连接的线程数。默认为五。'
- en: '[`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool "sqlalchemy.pool.SingletonThreadPool")
    is used by the SQLite dialect automatically when a memory-based database is used.
    See [SQLite](../dialects/sqlite.html).'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用基于内存的数据库时，SQLite 方言会自动使用 [`SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool")。请参阅 [SQLite](../dialects/sqlite.html)。
- en: '**Members**'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[connect()](#sqlalchemy.pool.SingletonThreadPool.connect), [dispose()](#sqlalchemy.pool.SingletonThreadPool.dispose),
    [recreate()](#sqlalchemy.pool.SingletonThreadPool.recreate)'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: '[connect()](#sqlalchemy.pool.SingletonThreadPool.connect), [dispose()](#sqlalchemy.pool.SingletonThreadPool.dispose),
    [recreate()](#sqlalchemy.pool.SingletonThreadPool.recreate)'
- en: '**Class signature**'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool") ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.base.Pool"))
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.pool.SingletonThreadPool`](#sqlalchemy.pool.SingletonThreadPool
    "sqlalchemy.pool.SingletonThreadPool")（[`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.base.Pool")）
- en: '[PRE113]'
  id: totrans-718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Return a DBAPI connection from the pool.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 从池中返回一个DBAPI连接。
- en: The connection is instrumented such that when its `close()` method is called,
    the connection will be returned to the pool.
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 连接被仪器化，这样当调用其`close()`方法时，连接将被返回到池中。
- en: '[PRE114]'
  id: totrans-721
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Dispose of this pool.
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 释放此池。
- en: '[PRE115]'
  id: totrans-723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")，与此相同类别，并使用相同的创建参数配置。
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.SingletonThreadPool.dispose
    "sqlalchemy.pool.SingletonThreadPool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法与[`dispose()`](#sqlalchemy.pool.SingletonThreadPool.dispose "sqlalchemy.pool.SingletonThreadPool.dispose")结合使用，关闭整个[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")并创建一个新的替代品。
- en: '[PRE116]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: A [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") that allows at most
    one checked out connection at any given time.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 一个允许在任何给定时间最多有一个已检出连接的[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")。
- en: This will raise an exception if more than one connection is checked out at a
    time. Useful for debugging code that is using more connections than desired.
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 如果同时检出了多个连接，则会引发异常。 对于调试使用比期望的连接更多的代码很有用。
- en: The [`AssertionPool`](#sqlalchemy.pool.AssertionPool "sqlalchemy.pool.AssertionPool")
    class **is compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine").
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AssertionPool`](#sqlalchemy.pool.AssertionPool "sqlalchemy.pool.AssertionPool")类与asyncio和[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") **兼容**。'
- en: '**Members**'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[dispose()](#sqlalchemy.pool.AssertionPool.dispose), [recreate()](#sqlalchemy.pool.AssertionPool.recreate)'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: '[dispose()](#sqlalchemy.pool.AssertionPool.dispose), [recreate()](#sqlalchemy.pool.AssertionPool.recreate)'
- en: '**Class signature**'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.AssertionPool`](#sqlalchemy.pool.AssertionPool "sqlalchemy.pool.AssertionPool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.pool.AssertionPool`](#sqlalchemy.pool.AssertionPool "sqlalchemy.pool.AssertionPool")（[`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.base.Pool")）
- en: '[PRE117]'
  id: totrans-734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Dispose of this pool.
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 释放此池。
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法使得已检出连接保持打开的可能性，因为它仅影响池中处于空闲状态的连接。
- en: See also
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
- en: '[PRE118]'
  id: totrans-739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")，与此相同类别，并使用相同的创建参数配置。
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.AssertionPool.dispose
    "sqlalchemy.pool.AssertionPool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法与[`dispose()`](#sqlalchemy.pool.AssertionPool.dispose "sqlalchemy.pool.AssertionPool.dispose")结合使用，关闭整个[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")并创建一个新的替代品。
- en: '[PRE119]'
  id: totrans-742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: A Pool which does not pool connections.
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 不池化连接的池。
- en: Instead it literally opens and closes the underlying DB-API connection per each
    connection open/close.
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 反而，它会逐个连接地打开和关闭底层的DB-API连接。
- en: Reconnect-related functions such as `recycle` and connection invalidation are
    not supported by this Pool implementation, since no connections are held persistently.
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 此池实现不支持与重新连接相关的函数，如`recycle`和连接失效，因为没有连接持续存在。
- en: The [`NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool") class
    **is compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine").
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool")类**与**asyncio和[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")兼容。'
- en: '**Members**'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[dispose()](#sqlalchemy.pool.NullPool.dispose), [recreate()](#sqlalchemy.pool.NullPool.recreate)'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: '[dispose()](#sqlalchemy.pool.NullPool.dispose), [recreate()](#sqlalchemy.pool.NullPool.recreate)'
- en: '**Class signature**'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.pool.NullPool`](#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool")（[`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.base.Pool")）
- en: '[PRE120]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Dispose of this pool.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 处置此池。
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法留下了已检出连接保持打开的可能性，因为它只影响池中处于空闲状态的连接。
- en: See also
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
- en: '[PRE121]'
  id: totrans-756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")，与此相同的类，并配置相同的创建参数。
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.NullPool.dispose
    "sqlalchemy.pool.NullPool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法与[`dispose()`](#sqlalchemy.pool.NullPool.dispose "sqlalchemy.pool.NullPool.dispose")一起使用，以关闭整个[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")并在其位置创建一个新的。
- en: '[PRE122]'
  id: totrans-759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: A Pool of exactly one connection, used for all requests.
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 一个连接池，用于所有请求。
- en: Reconnect-related functions such as `recycle` and connection invalidation (which
    is also used to support auto-reconnect) are only partially supported right now
    and may not yield good results.
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 重新连接相关的函数，如`recycle`和连接失效（也用于支持自动重新连接），目前仅部分支持，可能不会产生良好的结果。
- en: The [`StaticPool`](#sqlalchemy.pool.StaticPool "sqlalchemy.pool.StaticPool")
    class **is compatible** with asyncio and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine").
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: '[`StaticPool`](#sqlalchemy.pool.StaticPool "sqlalchemy.pool.StaticPool")类**与**asyncio和[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")兼容。'
- en: '**Members**'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[dispose()](#sqlalchemy.pool.StaticPool.dispose), [recreate()](#sqlalchemy.pool.StaticPool.recreate)'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: '[dispose()](#sqlalchemy.pool.StaticPool.dispose), [recreate()](#sqlalchemy.pool.StaticPool.recreate)'
- en: '**Class signature**'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.StaticPool`](#sqlalchemy.pool.StaticPool "sqlalchemy.pool.StaticPool")
    ([`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.base.Pool"))
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.pool.StaticPool`](#sqlalchemy.pool.StaticPool "sqlalchemy.pool.StaticPool")（[`sqlalchemy.pool.base.Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.base.Pool")）
- en: '[PRE123]'
  id: totrans-767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Dispose of this pool.
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 处置此池。
- en: This method leaves the possibility of checked-out connections remaining open,
    as it only affects connections that are idle in the pool.
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法留下了已检出连接保持打开的可能性，因为它只影响池中处于空闲状态的连接。
- en: See also
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Pool.recreate()`](#sqlalchemy.pool.Pool.recreate "sqlalchemy.pool.Pool.recreate")'
- en: '[PRE124]'
  id: totrans-772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Return a new [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"), of the
    same class as this one and configured with identical creation arguments.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个新的[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")，与此相同的类，并配置相同的创建参数。
- en: This method is used in conjunction with [`dispose()`](#sqlalchemy.pool.StaticPool.dispose
    "sqlalchemy.pool.StaticPool.dispose") to close out an entire [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") and create a new one in its place.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法与[`dispose()`](#sqlalchemy.pool.StaticPool.dispose "sqlalchemy.pool.StaticPool.dispose")一起使用，以关闭整个[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")并在其位置创建一个新的。
- en: '[PRE125]'
  id: totrans-775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Common base for the two connection-management interfaces [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") and [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry").
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 两个连接管理接口的共同基类[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")和[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")。
- en: These two objects are typically exposed in the public facing API via the connection
    pool event hooks, documented at [`PoolEvents`](events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents").
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个对象通常通过连接池事件钩子在公共 API 中公开，详见 [`PoolEvents`](events.html#sqlalchemy.events.PoolEvents
    "sqlalchemy.events.PoolEvents")。
- en: '**Members**'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[dbapi_connection](#sqlalchemy.pool.ManagesConnection.dbapi_connection), [driver_connection](#sqlalchemy.pool.ManagesConnection.driver_connection),
    [info](#sqlalchemy.pool.ManagesConnection.info), [invalidate()](#sqlalchemy.pool.ManagesConnection.invalidate),
    [record_info](#sqlalchemy.pool.ManagesConnection.record_info)'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: '[dbapi_connection](#sqlalchemy.pool.ManagesConnection.dbapi_connection), [driver_connection](#sqlalchemy.pool.ManagesConnection.driver_connection),
    [info](#sqlalchemy.pool.ManagesConnection.info), [invalidate()](#sqlalchemy.pool.ManagesConnection.invalidate),
    [record_info](#sqlalchemy.pool.ManagesConnection.record_info)'
- en: New in version 2.0.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: '[PRE126]'
  id: totrans-781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: A reference to the actual DBAPI connection being tracked.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪的实际 DBAPI 连接的引用。
- en: This is a [**PEP 249**](https://peps.python.org/pep-0249/)-compliant object
    that for traditional sync-style dialects is provided by the third-party DBAPI
    implementation in use. For asyncio dialects, the implementation is typically an
    adapter object provided by the SQLAlchemy dialect itself; the underlying asyncio
    object is available via the [`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection") attribute.
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个[**PEP 249**](https://peps.python.org/pep-0249/)-兼容对象，对于传统的同步式方言，由使用的第三方
    DBAPI 实现提供。对于 asyncio 方言，实现通常是 SQLAlchemy 方言本身提供的适配器对象；底层 asyncio 对象可通过 [`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection") 属性获得。
- en: SQLAlchemy’s interface for the DBAPI connection is based on the [`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") protocol object
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 对 DBAPI 连接的接口基于 [`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") 协议对象
- en: See also
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: '[在使用引擎时如何获取原始 DBAPI 连接？](../faq/connections.html#faq-dbapi-connection)'
- en: '[PRE127]'
  id: totrans-788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: The “driver level” connection object as used by the Python DBAPI or database
    driver.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: Python DBAPI 或数据库驱动程序中使用的“驱动程序级别”连接对象。
- en: For traditional [**PEP 249**](https://peps.python.org/pep-0249/) DBAPI implementations,
    this object will be the same object as that of [`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection"). For an asyncio database
    driver, this will be the ultimate “connection” object used by that driver, such
    as the `asyncpg.Connection` object which will not have standard pep-249 methods.
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 对于传统的[**PEP 249**](https://peps.python.org/pep-0249/) DBAPI 实现，此对象将与 [`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection") 的对象相同。对于 asyncio 数据库驱动程序，这将是该驱动程序使用的最终“连接”对象，例如
    `asyncpg.Connection` 对象，该对象不会具有标准的 pep-249 方法。
- en: New in version 1.4.24.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.24 中新增。
- en: See also
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: '[在使用引擎时如何获取原始 DBAPI 连接？](../faq/connections.html#faq-dbapi-connection)'
- en: '[PRE128]'
  id: totrans-795
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: Info dictionary associated with the underlying DBAPI connection referred to
    by this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")
    instance, allowing user-defined data to be associated with the connection.
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: 与此 [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")
    实例引用的底层 DBAPI 连接相关联的信息字典，允许将用户定义的数据与连接关联起来。
- en: The data in this dictionary is persistent for the lifespan of the DBAPI connection
    itself, including across pool checkins and checkouts. When the connection is invalidated
    and replaced with a new one, this dictionary is cleared.
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 此字典中的数据在 DBAPI 连接本身的生命周期内是持久的，包括池检入和检出期间。当连接无效并替换为新连接时，此字典将被清除。
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns a dictionary that is local to that [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"). Therefore the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") attribute will always provide a Python
    dictionary.
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个未关联[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")的[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")实例，例如如果它被分离，该属性返回一个仅限于该[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")的字典。因此，[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info")属性将始终提供一个Python字典。
- en: See also
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
- en: '[PRE129]'
  id: totrans-801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Mark the managed connection as invalidated.
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 将受管连接标记为无效。
- en: 'Parameters:'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`e` – an exception object indicating a reason for the invalidation.'
  id: totrans-804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`e` – 指示失效原因的异常对象。'
- en: '`soft` – if True, the connection isn’t closed; instead, this connection will
    be recycled on next checkout.'
  id: totrans-805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`soft` – 如果为True，则连接不会关闭；相反，此连接将在下次检出时被回收。'
- en: See also
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[More on Invalidation](#pool-connection-invalidation)'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: '[更多关于失效化的信息](#pool-connection-invalidation)'
- en: '[PRE130]'
  id: totrans-808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Persistent info dictionary associated with this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.ManagesConnection").
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 与此[`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")关联的持久信息字典。
- en: Unlike the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary, the lifespan of this dictionary
    is that of the [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    which owns it; therefore this dictionary will persist across reconnects and connection
    invalidation for a particular entry in the connection pool.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")字典不同，此字典的生命周期与拥有它的[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")相同；因此，此字典将在重新连接和特定连接池条目的失效化过程中持续存在。
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns None. Contrast to the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary which is never None.
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个未关联[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")的[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")实例，例如如果它被分离，该属性返回None。与永不为None的[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info")字典形成对比。
- en: See also
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
- en: '[PRE131]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Interface for the object that maintains an individual database connection on
    behalf of a [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") instance.
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 代表在[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")实例上维护单个数据库连接的对象的接口。
- en: The [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    object represents the long term maintainance of a particular connection for a
    pool, including expiring or invalidating that connection to have it replaced with
    a new one, which will continue to be maintained by that same [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") instance. Compared to [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection"), which is the short-term, per-checkout
    connection manager, this object lasts for the lifespan of a particular “slot”
    within a connection pool.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    对象表示池中特定连接的长期维护，包括使该连接过期或无效以将其替换为新连接，这将继续由同一[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") 实例维护。与[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") 相比，后者是短期的，每次检出的连接管理器，该对象的寿命为连接池中特定“槽位”的寿命。'
- en: The [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    object is mostly visible to public-facing API code when it is delivered to connection
    pool event hooks, such as [`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") and [`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout").
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 当交付给连接池事件钩子时，[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    对象主要对公共API代码可见，例如[`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") 和 [`PoolEvents.checkout()`](events.html#sqlalchemy.events.PoolEvents.checkout
    "sqlalchemy.events.PoolEvents.checkout")。
- en: 'New in version 2.0: [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") provides the public facing interface for
    the [`_ConnectionRecord`](#sqlalchemy.pool._ConnectionRecord "sqlalchemy.pool._ConnectionRecord")
    internal class.'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版新功能：[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    为[`_ConnectionRecord`](#sqlalchemy.pool._ConnectionRecord "sqlalchemy.pool._ConnectionRecord")
    内部类提供了公共界面。
- en: '**Members**'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[close()](#sqlalchemy.pool.ConnectionPoolEntry.close), [dbapi_connection](#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection),
    [driver_connection](#sqlalchemy.pool.ConnectionPoolEntry.driver_connection), [in_use](#sqlalchemy.pool.ConnectionPoolEntry.in_use),
    [info](#sqlalchemy.pool.ConnectionPoolEntry.info), [invalidate()](#sqlalchemy.pool.ConnectionPoolEntry.invalidate),
    [record_info](#sqlalchemy.pool.ConnectionPoolEntry.record_info)'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: '[close()](#sqlalchemy.pool.ConnectionPoolEntry.close), [dbapi_connection](#sqlalchemy.pool.ConnectionPoolEntry.dbapi_connection),
    [driver_connection](#sqlalchemy.pool.ConnectionPoolEntry.driver_connection), [in_use](#sqlalchemy.pool.ConnectionPoolEntry.in_use),
    [info](#sqlalchemy.pool.ConnectionPoolEntry.info), [invalidate()](#sqlalchemy.pool.ConnectionPoolEntry.invalidate),
    [record_info](#sqlalchemy.pool.ConnectionPoolEntry.record_info)'
- en: '**Class signature**'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") ([`sqlalchemy.pool.base.ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection"))
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.pool.ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") ([`sqlalchemy.pool.base.ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection"))
- en: '[PRE132]'
  id: totrans-823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Close the DBAPI connection managed by this connection pool entry.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此连接池条目管理的DBAPI连接。
- en: '[PRE133]'
  id: totrans-825
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: A reference to the actual DBAPI connection being tracked.
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 对正在跟踪的实际DBAPI连接的引用。
- en: This is a [**PEP 249**](https://peps.python.org/pep-0249/)-compliant object
    that for traditional sync-style dialects is provided by the third-party DBAPI
    implementation in use. For asyncio dialects, the implementation is typically an
    adapter object provided by the SQLAlchemy dialect itself; the underlying asyncio
    object is available via the [`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection") attribute.
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个[**PEP 249**](https://peps.python.org/pep-0249/)-兼容对象，对于传统的同步样式方言，由使用的第三方DBAPI实现提供。对于asyncio方言，实现通常是SQLAlchemy方言本身提供的适配器对象；基础asyncio对象可通过[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection") 属性获得。
- en: SQLAlchemy’s interface for the DBAPI connection is based on the [`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") protocol object
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy对DBAPI连接的接口基于[`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") 协议对象
- en: See also
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: '[当使用引擎时，如何获取原始的 DBAPI 连接？](../faq/connections.html#faq-dbapi-connection)'
- en: '[PRE134]'
  id: totrans-832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: The “driver level” connection object as used by the Python DBAPI or database
    driver.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Python DBAPI 或数据库驱动程序使用的“驱动程序级”连接对象。
- en: For traditional [**PEP 249**](https://peps.python.org/pep-0249/) DBAPI implementations,
    this object will be the same object as that of [`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection"). For an asyncio database
    driver, this will be the ultimate “connection” object used by that driver, such
    as the `asyncpg.Connection` object which will not have standard pep-249 methods.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 对于传统的[**PEP 249**](https://peps.python.org/pep-0249/) DBAPI 实现，该对象将与 [`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection") 相同。对于异步数据库驱动程序，这将是该驱动程序使用的最终“连接”对象，例如
    `asyncpg.Connection` 对象，该对象不具有标准的 pep-249 方法。
- en: New in version 1.4.24.
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4.24中的新增内容。
- en: See also
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: '[当使用引擎时，如何获取原始的 DBAPI 连接？](../faq/connections.html#faq-dbapi-connection)'
- en: '[PRE135]'
  id: totrans-839
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Return True the connection is currently checked out
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接当前正在被检出，则返回 True
- en: '[PRE136]'
  id: totrans-841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '*inherited from the* `ManagesConnection.info` *attribute of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")
    *属性*'
- en: Info dictionary associated with the underlying DBAPI connection referred to
    by this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")
    instance, allowing user-defined data to be associated with the connection.
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 与此 [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")
    实例引用的底层 DBAPI 连接关联的信息字典，允许将用户定义的数据与连接关联起来。
- en: The data in this dictionary is persistent for the lifespan of the DBAPI connection
    itself, including across pool checkins and checkouts. When the connection is invalidated
    and replaced with a new one, this dictionary is cleared.
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 此字典中的数据对于 DBAPI 连接本身的生命周期是持久的，包括池中的检入和检出。当连接被失效并替换为新连接时，该字典将被清除。
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns a dictionary that is local to that [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"). Therefore the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") attribute will always provide a Python
    dictionary.
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不与 [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    关联的 [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    实例，例如如果它被分离了，该属性将返回一个局部于该 [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") 的字典。因此，[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") 属性将始终提供一个 Python 字典。
- en: See also
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
- en: '[PRE137]'
  id: totrans-848
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '*inherited from the* `ManagesConnection.invalidate()` *method of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ManagesConnection.invalidate()`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection") *方法*'
- en: Mark the managed connection as invalidated.
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 将受管理的连接标记为失效。
- en: 'Parameters:'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`e` – an exception object indicating a reason for the invalidation.'
  id: totrans-852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`e` – 表示失效原因的异常对象。'
- en: '`soft` – if True, the connection isn’t closed; instead, this connection will
    be recycled on next checkout.'
  id: totrans-853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`soft` – 如果为 True，则不会关闭连接；相反，该连接将在下次检出时被回收。'
- en: See also
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[More on Invalidation](#pool-connection-invalidation)'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: '[更多关于失效化的内容](#pool-connection-invalidation)'
- en: '[PRE138]'
  id: totrans-856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '*inherited from the* `ManagesConnection.record_info` *attribute of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.base.ManagesConnection")
    *的* `ManagesConnection.record_info` *属性*'
- en: Persistent info dictionary associated with this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.ManagesConnection").
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 与此[`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")关联的持久信息字典。
- en: Unlike the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary, the lifespan of this dictionary
    is that of the [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    which owns it; therefore this dictionary will persist across reconnects and connection
    invalidation for a particular entry in the connection pool.
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")字典不同，此字典的生命周期与拥有它的[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")相同；因此，对于连接池中特定条目的重新连接和连接失效，此字典将持续存在。
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns None. Contrast to the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary which is never None.
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 对于未与[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")关联的[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")实例，例如如果它被分离，该属性返回None。与永不为None的[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info")字典形成对比。
- en: See also
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
- en: '[PRE139]'
  id: totrans-863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: A connection-like adapter for a [**PEP 249**](https://peps.python.org/pep-0249/)
    DBAPI connection, which includes additional methods specific to the [`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") implementation.
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 用于[**PEP 249**](https://peps.python.org/pep-0249/) DBAPI连接的类似连接适配器，包括特定于[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")实现的附加方法。
- en: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    is the public-facing interface for the internal [`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") implementation object; users familiar with
    [`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy "sqlalchemy.pool._ConnectionFairy")
    can consider this object to be equivalent.'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")是内部[`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy")实现对象的公共接口；熟悉[`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy")的用户可以将此对象视为等效。'
- en: 'New in version 2.0: [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") provides the public- facing interface
    for the [`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy "sqlalchemy.pool._ConnectionFairy")
    internal class.'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0中：[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")提供了[`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy")内部类的公共接口。
- en: '**Members**'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[close()](#sqlalchemy.pool.PoolProxiedConnection.close), [dbapi_connection](#sqlalchemy.pool.PoolProxiedConnection.dbapi_connection),
    [detach()](#sqlalchemy.pool.PoolProxiedConnection.detach), [driver_connection](#sqlalchemy.pool.PoolProxiedConnection.driver_connection),
    [info](#sqlalchemy.pool.PoolProxiedConnection.info), [invalidate()](#sqlalchemy.pool.PoolProxiedConnection.invalidate),
    [is_detached](#sqlalchemy.pool.PoolProxiedConnection.is_detached), [is_valid](#sqlalchemy.pool.PoolProxiedConnection.is_valid),
    [record_info](#sqlalchemy.pool.PoolProxiedConnection.record_info)'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: '[close()](#sqlalchemy.pool.PoolProxiedConnection.close), [dbapi_connection](#sqlalchemy.pool.PoolProxiedConnection.dbapi_connection),
    [detach()](#sqlalchemy.pool.PoolProxiedConnection.detach), [driver_connection](#sqlalchemy.pool.PoolProxiedConnection.driver_connection),
    [info](#sqlalchemy.pool.PoolProxiedConnection.info), [invalidate()](#sqlalchemy.pool.PoolProxiedConnection.invalidate),
    [is_detached](#sqlalchemy.pool.PoolProxiedConnection.is_detached), [is_valid](#sqlalchemy.pool.PoolProxiedConnection.is_valid),
    [record_info](#sqlalchemy.pool.PoolProxiedConnection.record_info)'
- en: '**Class signature**'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.pool.PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") ([`sqlalchemy.pool.base.ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection"))
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.pool.PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") ([`sqlalchemy.pool.base.ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection"))
- en: '[PRE140]'
  id: totrans-871
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: Release this connection back to the pool.
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 将此连接释放回到池中。
- en: The [`PoolProxiedConnection.close()`](#sqlalchemy.pool.PoolProxiedConnection.close
    "sqlalchemy.pool.PoolProxiedConnection.close") method shadows the [**PEP 249**](https://peps.python.org/pep-0249/)
    `.close()` method, altering its behavior to instead [release](../glossary.html#term-release)
    the proxied connection back to the connection pool.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolProxiedConnection.close()`](#sqlalchemy.pool.PoolProxiedConnection.close
    "sqlalchemy.pool.PoolProxiedConnection.close") 方法覆盖了[**PEP 249**](https://peps.python.org/pep-0249/)的`.close()`方法，改变了其行为，使其释放代理连接返回到连接池。'
- en: Upon release to the pool, whether the connection stays “opened” and pooled in
    the Python process, versus actually closed out and removed from the Python process,
    is based on the pool implementation in use and its configuration and current state.
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 将连接释放到池中后，连接在Python进程中是否保持“打开”并保留在池中，还是实际关闭并从Python进程中删除，取决于正在使用的池实现及其配置和当前状态。
- en: '[PRE141]'
  id: totrans-875
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: A reference to the actual DBAPI connection being tracked.
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: 对被跟踪的实际DBAPI连接的引用。
- en: This is a [**PEP 249**](https://peps.python.org/pep-0249/)-compliant object
    that for traditional sync-style dialects is provided by the third-party DBAPI
    implementation in use. For asyncio dialects, the implementation is typically an
    adapter object provided by the SQLAlchemy dialect itself; the underlying asyncio
    object is available via the [`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection") attribute.
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个[**PEP 249**](https://peps.python.org/pep-0249/)兼容对象，对于传统的同步风格方言，由使用的第三方DBAPI实现提供。对于asyncio方言，实现通常是SQLAlchemy方言本身提供的适配器对象；底层的asyncio对象可通过[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")属性访问。
- en: SQLAlchemy’s interface for the DBAPI connection is based on the [`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") protocol object
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy的DBAPI连接接口基于[`DBAPIConnection`](internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection")协议对象
- en: See also
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.driver_connection`](#sqlalchemy.pool.ManagesConnection.driver_connection
    "sqlalchemy.pool.ManagesConnection.driver_connection")'
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: '[在使用Engine时，如何获取原始的DBAPI连接？](../faq/connections.html#faq-dbapi-connection)'
- en: '[PRE142]'
  id: totrans-882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Separate this connection from its Pool.
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 将此连接与其连接池分离。
- en: This means that the connection will no longer be returned to the pool when closed,
    and will instead be literally closed. The associated [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") is de-associated from this DBAPI connection.
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当关闭连接时，连接将不再返回到池中，而是被实际关闭。关联的[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")与此DBAPI连接解除关联。
- en: Note that any overall connection limiting constraints imposed by a Pool implementation
    may be violated after a detach, as the detached connection is removed from the
    pool’s knowledge and control.
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在分离后，由池实现强加的任何整体连接限制约束可能会被违反，因为分离的连接从池的知识和控制中移除。
- en: '[PRE143]'
  id: totrans-886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: The “driver level” connection object as used by the Python DBAPI or database
    driver.
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: Python DBAPI或数据库驱动程序使用的“驱动程序级别”的连接对象。
- en: For traditional [**PEP 249**](https://peps.python.org/pep-0249/) DBAPI implementations,
    this object will be the same object as that of [`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection"). For an asyncio database
    driver, this will be the ultimate “connection” object used by that driver, such
    as the `asyncpg.Connection` object which will not have standard pep-249 methods.
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: 对于传统的[**PEP 249**](https://peps.python.org/pep-0249/) DBAPI实现，该对象将与[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")的对象相同。对于一个asyncio数据库驱动程序，这将是该驱动程序使用的最终的“连接”对象，例如`asyncpg.Connection`对象，它不会具有标准的pep-249方法。
- en: New in version 1.4.24.
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.24中的新功能。
- en: See also
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.dbapi_connection`](#sqlalchemy.pool.ManagesConnection.dbapi_connection
    "sqlalchemy.pool.ManagesConnection.dbapi_connection")'
- en: '[How do I get at the raw DBAPI connection when using an Engine?](../faq/connections.html#faq-dbapi-connection)'
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: '[在使用Engine时如何获取原始的DBAPI连接？](../faq/connections.html#faq-dbapi-connection)'
- en: '[PRE144]'
  id: totrans-893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '*inherited from the* `ManagesConnection.info` *attribute of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.base.ManagesConnection")
    *的* `ManagesConnection.info` *属性*'
- en: Info dictionary associated with the underlying DBAPI connection referred to
    by this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")
    instance, allowing user-defined data to be associated with the connection.
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 与此[`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")实例引用的底层DBAPI连接相关联的信息字典，允许将用户定义的数据与连接关联起来。
- en: The data in this dictionary is persistent for the lifespan of the DBAPI connection
    itself, including across pool checkins and checkouts. When the connection is invalidated
    and replaced with a new one, this dictionary is cleared.
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 这个字典中的数据在整个DBAPI连接的生命周期内是持久的，包括连接池的签入和签出。当连接失效并被新连接替换时，该字典将被清除。
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns a dictionary that is local to that [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"). Therefore the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") attribute will always provide a Python
    dictionary.
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不与[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")关联的[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")实例，例如如果它被分离，该属性返回一个仅限于该[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")的字典。因此，[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info")属性将始终提供一个Python字典。
- en: See also
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.record_info`](#sqlalchemy.pool.ManagesConnection.record_info
    "sqlalchemy.pool.ManagesConnection.record_info")'
- en: '[PRE145]'
  id: totrans-900
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '*inherited from the* `ManagesConnection.invalidate()` *method of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.base.ManagesConnection")
    *的* `ManagesConnection.invalidate()` *方法*'
- en: Mark the managed connection as invalidated.
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 将托管连接标记为失效。
- en: 'Parameters:'
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`e` – an exception object indicating a reason for the invalidation.'
  id: totrans-904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`e` – 一个表示失效原因的异常对象。'
- en: '`soft` – if True, the connection isn’t closed; instead, this connection will
    be recycled on next checkout.'
  id: totrans-905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`soft` – 如果为True，则连接不会关闭；相反，此连接将在下次签出时被回收。'
- en: See also
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[More on Invalidation](#pool-connection-invalidation)'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: '[更多关于失效的信息](#pool-connection-invalidation)'
- en: '[PRE146]'
  id: totrans-908
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Return True if this [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") is detached from its pool.
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")已从其池中分离，则返回True。
- en: '[PRE147]'
  id: totrans-910
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Return True if this [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") still refers to an active DBAPI connection.
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")仍指向活动的DBAPI连接，则返回True。
- en: '[PRE148]'
  id: totrans-912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '*inherited from the* `ManagesConnection.record_info` *attribute of* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.base.ManagesConnection")'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.base.ManagesConnection")
    *的* `ManagesConnection.record_info` *属性*'
- en: Persistent info dictionary associated with this [`ManagesConnection`](#sqlalchemy.pool.ManagesConnection
    "sqlalchemy.pool.ManagesConnection").
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 与此[`ManagesConnection`](#sqlalchemy.pool.ManagesConnection "sqlalchemy.pool.ManagesConnection")相关联的持久信息字典。
- en: Unlike the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary, the lifespan of this dictionary
    is that of the [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")
    which owns it; therefore this dictionary will persist across reconnects and connection
    invalidation for a particular entry in the connection pool.
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: 与[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")字典不同，此字典的生命周期是由拥有它的[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")决定的；因此，这个字典将在连接池中的特定条目的重新连接和连接失效时保持不变。
- en: For a [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")
    instance that’s not associated with a [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry"), such as if it were detached, the attribute
    returns None. Contrast to the [`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info") dictionary which is never None.
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 对于未关联到[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")的[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")实例，例如如果它是分离的，则该属性返回 None。与永远不会为 None 的[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info
    "sqlalchemy.pool.ManagesConnection.info")字典相比。
- en: See also
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ManagesConnection.info`](#sqlalchemy.pool.ManagesConnection.info "sqlalchemy.pool.ManagesConnection.info")'
- en: '[PRE149]'
  id: totrans-919
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: Proxies a DBAPI connection and provides return-on-dereference support.
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: 代理 DBAPI 连接并提供解引用支持。
- en: This is an internal object used by the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    implementation to provide context management to a DBAPI connection delivered by
    that [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"). The public facing
    interface for this class is described by the [`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") class. See that class for public API
    details.
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")实现内部使用的对象，用于为该[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")提供上下文管理，以由该[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")提供的
    DBAPI 连接。该类的公共接口由[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection")类描述。请参阅该类以获取公共 API 详细信息。
- en: The name “fairy” is inspired by the fact that the [`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") object’s lifespan is transitory, as it lasts
    only for the length of a specific DBAPI connection being checked out from the
    pool, and additionally that as a transparent proxy, it is mostly invisible.
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 名称“fairy”灵感来自于[`_ConnectionFairy`](#sqlalchemy.pool._ConnectionFairy "sqlalchemy.pool._ConnectionFairy")对象的生命周期是短暂的，因为它仅在从池中检出的特定
    DBAPI 连接的长度内存在，并且作为透明代理，它大部分时间是不可见的。
- en: See also
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")'
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")'
- en: '[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")'
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")'
- en: '**Class signature**'
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.pool._ConnectionFairy` ([`sqlalchemy.pool.base.PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.base.PoolProxiedConnection"))
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.pool._ConnectionFairy` ([`sqlalchemy.pool.base.PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.base.PoolProxiedConnection"))
- en: '[PRE150]'
  id: totrans-928
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: Maintains a position in a connection pool which references a pooled connection.
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 维护连接池中引用池化连接的位置。
- en: This is an internal object used by the [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    implementation to provide context management to a DBAPI connection maintained
    by that [`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool"). The public facing
    interface for this class is described by the [`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry") class. See that class for public API details.
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`Pool`](#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")实现内部使用的对象，用于为该[`Pool`](#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")维护的 DBAPI 连接提供上下文管理。该类的公共接口由[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.ConnectionPoolEntry")类描述。请参阅该类以获取公共 API 详细信息。
- en: See also
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry "sqlalchemy.pool.ConnectionPoolEntry")'
- en: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PoolProxiedConnection`](#sqlalchemy.pool.PoolProxiedConnection "sqlalchemy.pool.PoolProxiedConnection")'
- en: '**Class signature**'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.pool._ConnectionRecord` ([`sqlalchemy.pool.base.ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.base.ConnectionPoolEntry"))
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.pool._ConnectionRecord`（[`sqlalchemy.pool.base.ConnectionPoolEntry`](#sqlalchemy.pool.ConnectionPoolEntry
    "sqlalchemy.pool.base.ConnectionPoolEntry")）
