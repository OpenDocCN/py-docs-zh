["```py\nclass sqlalchemy.sql.visitors.ExternalTraversal\n```", "```py\nmethod chain(visitor: ExternalTraversal) \u2192 _ExtT\n```", "```py\nmethod iterate(obj: ExternallyTraversible | None) \u2192 Iterator[ExternallyTraversible]\n```", "```py\nmethod traverse(obj: ExternallyTraversible | None) \u2192 ExternallyTraversible | None\n```", "```py\nattribute visitor_iterator\n```", "```py\nclass sqlalchemy.sql.visitors.InternalTraversal\n```", "```py\nclass Case(ColumnElement[_T]):\n    _traverse_internals = [\n        (\"value\", InternalTraversal.dp_clauseelement),\n        (\"whens\", InternalTraversal.dp_clauseelement_tuples),\n        (\"else_\", InternalTraversal.dp_clauseelement),\n    ]\n```", "```py\nattribute dp_annotations_key = 'AK'\n```", "```py\nattribute dp_anon_name = 'AN'\n```", "```py\nattribute dp_boolean = 'B'\n```", "```py\nattribute dp_clauseelement = 'CE'\n```", "```py\nattribute dp_clauseelement_list = 'CL'\n```", "```py\nattribute dp_clauseelement_tuple = 'CT'\n```", "```py\nattribute dp_clauseelement_tuples = 'CTS'\n```", "```py\nattribute dp_dialect_options = 'DO'\n```", "```py\nattribute dp_dml_multi_values = 'DML_MV'\n```", "```py\nattribute dp_dml_ordered_values = 'DML_OV'\n```", "```py\nattribute dp_dml_values = 'DML_V'\n```", "```py\nattribute dp_fromclause_canonical_column_collection = 'FC'\n```", "```py\nattribute dp_fromclause_ordered_set = 'CO'\n```", "```py\nattribute dp_has_cache_key = 'HC'\n```", "```py\nattribute dp_has_cache_key_list = 'HL'\n```", "```py\nattribute dp_has_cache_key_tuples = 'HT'\n```", "```py\nattribute dp_ignore = 'IG'\n```", "```py\nattribute dp_inspectable = 'IS'\n```", "```py\nattribute dp_inspectable_list = 'IL'\n```", "```py\nattribute dp_multi = 'M'\n```", "```py\nattribute dp_multi_list = 'MT'\n```", "```py\nattribute dp_named_ddl_element = 'DD'\n```", "```py\nattribute dp_operator = 'O'\n```", "```py\nattribute dp_plain_dict = 'PD'\n```", "```py\nattribute dp_plain_obj = 'PO'\n```", "```py\nattribute dp_prefix_sequence = 'PS'\n```", "```py\nattribute dp_propagate_attrs = 'PA'\n```", "```py\nattribute dp_statement_hint_list = 'SH'\n```", "```py\nattribute dp_string = 'S'\n```", "```py\nattribute dp_string_clauseelement_dict = 'CD'\n```", "```py\nattribute dp_string_list = 'SL'\n```", "```py\nattribute dp_string_multi_dict = 'MD'\n```", "```py\nattribute dp_table_hint_list = 'TH'\n```", "```py\nattribute dp_type = 'T'\n```", "```py\nattribute dp_unknown_structure = 'UK'\n```", "```py\nclass sqlalchemy.sql.visitors.Visitable\n```", "```py\nattribute sqlalchemy.sql.visitors.anon_map\n```", "```py\nfunction sqlalchemy.sql.visitors.cloned_traverse(obj: ExternallyTraversible | None, opts: Mapping[str, Any], visitors: Mapping[str, Callable[[Any], None]]) \u2192 ExternallyTraversible | None\n```", "```py\nfunction sqlalchemy.sql.visitors.iterate(obj: ExternallyTraversible | None, opts: Mapping[str, Any] = {}) \u2192 Iterator[ExternallyTraversible]\n```", "```py\nfunction sqlalchemy.sql.visitors.replacement_traverse(obj: ExternallyTraversible | None, opts: Mapping[str, Any], replace: _TraverseTransformCallableType[Any]) \u2192 ExternallyTraversible | None\n```", "```py\nfunction sqlalchemy.sql.visitors.traverse(obj: ExternallyTraversible | None, opts: Mapping[str, Any], visitors: Mapping[str, Callable[[Any], None]]) \u2192 ExternallyTraversible | None\n```", "```py\n> from sqlalchemy.sql import visitors\n> \n> stmt = select(some_table).where(some_table.c.foo == 'bar')\n> \n> def visit_bindparam(bind_param):\n>     print(\"found bound value: %s\" % bind_param.value)\n> \n> visitors.traverse(stmt, {}, {\"bindparam\": visit_bindparam})\n> ```", "```py\nfunction sqlalchemy.sql.visitors.traverse_using(iterator: Iterable[ExternallyTraversible], obj: ExternallyTraversible | None, visitors: Mapping[str, Callable[[Any], None]]) \u2192 ExternallyTraversible | None\n```"]