- en: 2.0 Changelog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.0 更新日志
- en: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_20.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_20.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_20.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_20.html)
- en: 2.0.30
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.30
- en: no release date
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 无发布日期
- en: orm
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added new attribute [`ORMExecuteState.is_from_statement`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_from_statement
    "sqlalchemy.orm.ORMExecuteState.is_from_statement"), to detect statements of the
    form `select().from_statement()`, and also enhanced `FromStatement` to set [`ORMExecuteState.is_select`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_select
    "sqlalchemy.orm.ORMExecuteState.is_select"), [`ORMExecuteState.is_insert`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_insert
    "sqlalchemy.orm.ORMExecuteState.is_insert"), [`ORMExecuteState.is_update`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_update
    "sqlalchemy.orm.ORMExecuteState.is_update"), and [`ORMExecuteState.is_delete`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_delete
    "sqlalchemy.orm.ORMExecuteState.is_delete") according to the element that is sent
    to the [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") method itself.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的属性 [`ORMExecuteState.is_from_statement`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_from_statement
    "sqlalchemy.orm.ORMExecuteState.is_from_statement")，用于检测形式为 `select().from_statement()`
    的语句，并且还增强了`FromStatement`以设置 [`ORMExecuteState.is_select`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_select
    "sqlalchemy.orm.ORMExecuteState.is_select")、[`ORMExecuteState.is_insert`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_insert
    "sqlalchemy.orm.ORMExecuteState.is_insert")、[`ORMExecuteState.is_update`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_update
    "sqlalchemy.orm.ORMExecuteState.is_update") 和 [`ORMExecuteState.is_delete`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_delete
    "sqlalchemy.orm.ORMExecuteState.is_delete") 根据发送到 [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") 方法本身的元素。
- en: 'References: [#11220](https://www.sqlalchemy.org/trac/ticket/11220)'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#11220](https://www.sqlalchemy.org/trac/ticket/11220)'
- en: engine
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue in the [`Connection.execution_options.logging_token`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options") option, where changing the value
    of `logging_token` on a connection that has already logged messages would not
    be updated to reflect the new logging token. This in particular prevented the
    use of [`Session.connection()`](../orm/session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") to change the option on the connection, since
    the BEGIN logging message would already have been emitted.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`Connection.execution_options.logging_token`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options") 选项中修复了问题，当在已经记录了消息的连接上更改`logging_token`的值时，不会更新以反映新的日志令牌。具体来说，这会阻止使用
    [`Session.connection()`](../orm/session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") 来更改连接上的选项，因为 BEGIN 记录消息已经被发出。
- en: 'References: [#11210](https://www.sqlalchemy.org/trac/ticket/11210)'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#11210](https://www.sqlalchemy.org/trac/ticket/11210)'
- en: typing
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打字
- en: '**[typing] [bug] [regression]**'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug] [regression]**'
- en: Fixed typing regression caused by PR [#11055](https://www.sqlalchemy.org/trac/ticket/11055)
    in version 2.0.29 that attempted to add `ParamSpec` to the asyncio `run_sync()`
    methods, where using [`AsyncConnection.run_sync()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") with [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") would fail on mypy due to a bug. See [https://github.com/python/mypy/issues/17093](https://github.com/python/mypy/issues/17093)
    for details. Pull request courtesy of Francisco R. Del Roio
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由版本 2.0.29 中 PR [#11055](https://www.sqlalchemy.org/trac/ticket/11055) 引起的打字退化，该版本试图将`ParamSpec`添加到
    asyncio 的`run_sync()`方法中，使用 [`AsyncConnection.run_sync()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") 与 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 将会由于错误导致 mypy 失败。详细信息请参阅 [https://github.com/python/mypy/issues/17093](https://github.com/python/mypy/issues/17093)。由
    Francisco R. Del Roio 提供的拉取请求。
- en: 'References: [#11200](https://www.sqlalchemy.org/trac/ticket/11200)'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#11200](https://www.sqlalchemy.org/trac/ticket/11200)'
- en: misc
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [test]**'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [test]**'
- en: Ensure the `PYTHONPATH` variable is properly initialized when using `subprocess.run`
    in the tests.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保在测试中使用`subprocess.run`时正确初始化`PYTHONPATH`变量。
- en: 'References: [#11268](https://www.sqlalchemy.org/trac/ticket/11268)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#11268](https://www.sqlalchemy.org/trac/ticket/11268)'
- en: 2.0.29
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.29
- en: 'Released: March 23, 2024'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2024年3月23日
- en: orm
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added support for the [**PEP 695**](https://peps.python.org/pep-0695/) `TypeAliasType`
    construct as well as the python 3.12 native `type` keyword to work with ORM Annotated
    Declarative form when using these constructs to link to a [**PEP 593**](https://peps.python.org/pep-0593/)
    `Annotated` container, allowing the resolution of the `Annotated` to proceed when
    these constructs are used in a [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") typing container.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对[**PEP 695**](https://peps.python.org/pep-0695/) `TypeAliasType`构造以及python
    3.12原生的`type`关键字的支持，以便在使用这些构造链接到[**PEP 593**](https://peps.python.org/pep-0593/)
    `Annotated`容器时，允许解析`Annotated`在这些构造用于[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")类型容器时继续进行。
- en: 'References: [#11130](https://www.sqlalchemy.org/trac/ticket/11130)'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11130](https://www.sqlalchemy.org/trac/ticket/11130)
- en: '**[orm] [bug]**'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed Declarative issue where typing a relationship using [`Relationship`](../orm/internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship") rather than [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") would inadvertently pull in the “dynamic” relationship
    loader strategy for that attribute.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了声明性问题，其中使用[`Relationship`](../orm/internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship")而不是[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")来定义关系会意外地为该属性引入“动态”关系加载策略。
- en: 'References: [#10611](https://www.sqlalchemy.org/trac/ticket/10611)'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10611](https://www.sqlalchemy.org/trac/ticket/10611)
- en: '**[orm] [bug]**'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in ORM annotated declarative where using [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") with an [`mapped_column.index`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.index
    "sqlalchemy.orm.mapped_column") or [`mapped_column.unique`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.unique
    "sqlalchemy.orm.mapped_column") setting of False would be overridden by an incoming
    `Annotated` element that featured that parameter set to `True`, even though the
    immediate [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") element is more specific and should take precedence.
    The logic to reconcile the booleans has been enhanced to accommodate a local value
    of `False` as still taking precedence over an incoming `True` value from the annotated
    element.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在ORM注释声明中使用[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")与[`mapped_column.index`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.index
    "sqlalchemy.orm.mapped_column")或[`mapped_column.unique`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.unique
    "sqlalchemy.orm.mapped_column")设置为False时，会被具有该参数设置为`True`的传入`Annotated`元素覆盖的问题，即使直接的[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")元素更具体且应优先考虑。增强了协调布尔值的逻辑，以适应本地值为`False`仍然优先于来自注释元素的`True`值的情况。
- en: 'References: [#11091](https://www.sqlalchemy.org/trac/ticket/11091)'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11091](https://www.sqlalchemy.org/trac/ticket/11091)
- en: '**[orm] [bug] [regression]**'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression from version 2.0.28 caused by the fix for [#11085](https://www.sqlalchemy.org/trac/ticket/11085)
    where the newer method of adjusting post-cache bound parameter values would interefere
    with the implementation for the [`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload") loader option, which has some more legacy patterns
    in use internally, when the additional loader criteria feature were used with
    this loader option.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从版本2.0.28引起的回归，该回归是由于修复[#11085](https://www.sqlalchemy.org/trac/ticket/11085)而引起的，其中调整后缓存绑定参数值的新方法会干扰[`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload")加载器选项的实现，该加载器选项在内部使用一些更具传统模式的模式，当使用此加载器选项与此加载器选项一起使用附加加载器条件功能时。
- en: 'References: [#11173](https://www.sqlalchemy.org/trac/ticket/11173)'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11173](https://www.sqlalchemy.org/trac/ticket/11173)
- en: engine
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue in [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    feature where using a primary key column with an “inline execute” default generator
    such as an explicit [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") with an explcit schema name, while at the same time
    using the [`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") feature would fail to render
    the sequence or the parameters properly, leading to errors.
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [“插入多个值”行为对 INSERT 语句的行为](../core/connections.html#engine-insertmanyvalues)
    功能中的问题，其中使用带有“内联执行”默认生成器的主键列，例如具有显式 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 并具有显式模式名称的生成器，同时使用 [`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") 功能将无法正确呈现序列或参数，导致错误。
- en: 'References: [#11157](https://www.sqlalchemy.org/trac/ticket/11157)'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#11157](https://www.sqlalchemy.org/trac/ticket/11157)'
- en: '**[engine] [bug]**'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Made a change to the adjustment made in version 2.0.10 for [#9618](https://www.sqlalchemy.org/trac/ticket/9618),
    which added the behavior of reconciling RETURNING rows from a bulk INSERT to the
    parameters that were passed to it. This behavior included a comparison of already-DB-converted
    bound parameter values against returned row values that was not always “symmetrical”
    for SQL column types such as UUIDs, depending on specifics of how different DBAPIs
    receive such values versus how they return them, necessitating the need for additional
    “sentinel value resolver” methods on these column types. Unfortunately this broke
    third party column types such as UUID/GUID types in libraries like SQLModel which
    did not implement this special method, raising an error “Can’t match sentinel
    values in result set to parameter sets”. Rather than attempt to further explain
    and document this implementation detail of the “insertmanyvalues” feature including
    a public version of the new method, the approach is intead revised to no longer
    need this extra conversion step, and the logic that does the comparison now works
    on the pre-converted bound parameter value compared to the post-result-processed
    value, which should always be of a matching datatype. In the unusual case that
    a custom SQL column type that also happens to be used in a “sentinel” column for
    bulk INSERT is not receiving and returning the same value type, the “Can’t match”
    error will be raised, however the mitigation is straightforward in that the same
    Python datatype should be passed as that returned.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对版本 2.0.10 中对 [#9618](https://www.sqlalchemy.org/trac/ticket/9618) 所做的调整进行了更改，该调整增加了从批量
    INSERT 中协调 RETURNING 行到传递给它的参数的行为。该行为包括已经 DB 转换的绑定参数值与返回的行值之间的比较，并不总是对于 SQL 列类型（如
    UUID）是“对称”的，具体取决于不同的 DBAPI 如何接收这些值以及它们如何返回它们，因此需要在这些列类型上添加额外的“标志值解析器”方法。不幸的是，这破坏了第三方列类型，如
    SQLModel 中未实现此特殊方法的 UUID/GUID 类型，引发错误“无法将结果集中的标志值与参数集匹配”。与其试图进一步解释和文档化“insertmanyvalues”功能的此实现细节，包括新方法的公共版本，不如将方法调整为不再需要此额外的转换步骤，并且执行比较的逻辑现在在预转换的绑定参数值与后处理结果值之间进行，后者应始终具有匹配的数据类型。在不寻常的情况下，如果自定义
    SQL 列类型同时也用作批量 INSERT 的“标志”列不接收和返回相同类型的值，则将引发“无法匹配”错误，但缓解方法很简单，即应传递与返回值相同的 Python
    数据类型。
- en: 'References: [#11160](https://www.sqlalchemy.org/trac/ticket/11160)'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#11160](https://www.sqlalchemy.org/trac/ticket/11160)'
- en: sql
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [regression]**'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [regression]**'
- en: Fixed regression from the 1.4 series where the refactor of the [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method introduced at [“with_variant()”
    clones the original TypeEngine rather than changing the type](whatsnew_20.html#change-6980)
    failed to accommodate for the `.copy()` method, which will lose the variant mappings
    that are set up. This becomes an issue for the very specific case of a “schema”
    type, which includes types such as [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") and [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), when they are then used in the context of an ORM Declarative
    mapping with mixins where copying of types comes into play. The variant mapping
    is now copied as well.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从1.4系列的回归中修复了重构[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")方法的问题，该问题在[“with_variant()”克隆原始TypeEngine而不是更改类型](whatsnew_20.html#change-6980)中介绍。该问题未考虑到`.copy()`方法，该方法会丢失设置的变体映射。对于“schema”类型的非常特定情况而言，这是一个问题，该类型包括[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")和[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")等类型，当它们在ORM Declarative映射与混入一起使用时，类型的复制就会起作用。现在还复制了变体映射。
- en: 'References: [#11176](https://www.sqlalchemy.org/trac/ticket/11176)'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11176](https://www.sqlalchemy.org/trac/ticket/11176)
- en: typing
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [错误]**'
- en: Fixed typing issue allowing asyncio `run_sync()` methods to correctly type the
    parameters according to the callable that was passed, making use of [**PEP 612**](https://peps.python.org/pep-0612/)
    `ParamSpec` variables. Pull request courtesy Francisco R. Del Roio.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了允许asyncio `run_sync()`方法正确类型化参数的类型问题，该方法根据传递的可调用函数使用了[**PEP 612**](https://peps.python.org/pep-0612/)
    `ParamSpec`变量。感谢Francisco R. Del Roio提供的拉取请求。
- en: 'References: [#11055](https://www.sqlalchemy.org/trac/ticket/11055)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11055](https://www.sqlalchemy.org/trac/ticket/11055)
- en: postgresql
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: The PostgreSQL dialect now returns [`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN") instances when reflecting a column that
    has a domain as type. Previously, the domain data type was returned instead. As
    part of this change, the domain reflection was improved to also return the collation
    of the text types. Pull request courtesy of Thomas Stephenson.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL方言现在在反射具有域作为类型的列时返回[`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN")实例。之前，返回的是域数据类型。作为此更改的一部分，改进了域反射以返回文本类型的校对。感谢Thomas
    Stephenson提供的拉取请求。
- en: 'References: [#10693](https://www.sqlalchemy.org/trac/ticket/10693)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10693](https://www.sqlalchemy.org/trac/ticket/10693)
- en: tests
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误]**'
- en: Backported to SQLAlchemy 2.0 an improvement to the test suite with regards to
    how asyncio related tests are run, now using the newer Python 3.11 `asyncio.Runner`
    or a backported equivalent, rather than relying on the previous implementation
    based on `asyncio.get_running_loop()`. This should hopefully prevent issues with
    large suite runs on CPU loaded hardware where the event loop seems to become corrupted,
    leading to cascading failures.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将对与asyncio相关的测试运行方式进行了改进，并将其后移至SQLAlchemy 2.0，现在使用较新的Python 3.11 `asyncio.Runner`或后移的等效版本，而不是依赖于以前基于`asyncio.get_running_loop()`的实现。这样做有望防止在CPU负载硬件上进行大型测试套件运行时出现问题，其中事件循环似乎会损坏，从而导致级联失败。
- en: 'References: [#11187](https://www.sqlalchemy.org/trac/ticket/11187)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11187](https://www.sqlalchemy.org/trac/ticket/11187)
- en: 2.0.28
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.28
- en: 'Released: March 4, 2024'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2024年3月4日
- en: orm
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [performance] [bug] [regression]**'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [性能] [错误] [回归]**'
- en: Adjusted the fix made in [#10570](https://www.sqlalchemy.org/trac/ticket/10570),
    released in 2.0.23, where new logic was added to reconcile possibly changing bound
    parameter values across cache key generations used within the [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") construct. The new logic changes the approach
    by which the new bound parameter values are associated with the statement, avoiding
    the need to deep-copy the statement which can result in a significant performance
    penalty for very deep / complex SQL constructs. The new approach no longer requires
    this deep-copy step.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了在[#10570](https://www.sqlalchemy.org/trac/ticket/10570)中进行的修复，发布在2.0.23中，其中添加了新的逻辑来协调可能在[`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression")构造中用于缓存键生成的绑定参数值的更改。新的逻辑改变了将新的绑定参数值与语句关联的方法，避免了需要深复制语句的需要，这可能会对非常深/复杂的SQL结构造成重大性能损失。新方法不再需要这个深复制步骤。
- en: 'References: [#11085](https://www.sqlalchemy.org/trac/ticket/11085)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11085](https://www.sqlalchemy.org/trac/ticket/11085)
- en: '**[orm] [bug] [regression]**'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误] [回归]**'
- en: Fixed regression caused by [#9779](https://www.sqlalchemy.org/trac/ticket/9779)
    where using the “secondary” table in a relationship `and_()` expression would
    fail to be aliased to match how the “secondary” table normally renders within
    a [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") expression, leading to an invalid query.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#9779](https://www.sqlalchemy.org/trac/ticket/9779)引起的回归，其中在关系`and_()`表达式中使用“secondary”表将无法被别名化以匹配“secondary”表在[`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join")表达式中通常的渲染方式，导致查询无效。
- en: 'References: [#11010](https://www.sqlalchemy.org/trac/ticket/11010)'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11010](https://www.sqlalchemy.org/trac/ticket/11010)
- en: engine
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [usecase]**'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [用例]**'
- en: Added new core execution option [`Connection.execution_options.preserve_rowcount`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options"). When set, the `cursor.rowcount`
    attribute from the DBAPI cursor will be unconditionally memoized at statement
    execution time, so that whatever value the DBAPI offers for any kind of statement
    will be available using the [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") attribute from the [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult"). This allows the rowcount to be accessed for
    statements such as INSERT and SELECT, to the degree supported by the DBAPI in
    use. The [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    also supports this option and will ensure [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") is correctly set for a bulk INSERT
    of rows when set.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的核心执行选项[`Connection.execution_options.preserve_rowcount`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options")。设置后，将在语句执行时无条件地将DBAPI游标的`cursor.rowcount`属性存储，以便无论DBAPI为任何类型的语句提供的值都可以使用[`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")属性从[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")中获取。这允许访问行计数，例如INSERT和SELECT语句，至少在使用的DBAPI支持的程度上。[INSERT语句的“插入多个值”行为](../core/connections.html#engine-insertmanyvalues)也支持此选项，并将在设置时确保为批量插入行时正确设置[`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")。
- en: 'References: [#10974](https://www.sqlalchemy.org/trac/ticket/10974)'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10974](https://www.sqlalchemy.org/trac/ticket/10974)
- en: asyncio
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [bug]**'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [错误]**'
- en: An error is raised if a [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") or other non-asyncio pool class is passed to [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"). This engine only accepts asyncio-compatible
    pool classes including [`AsyncAdaptedQueuePool`](../core/pooling.html#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool"). Other pool classes such as [`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") are compatible with both synchronous and asynchronous
    engines as they do not perform any locking.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将 [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    或其他非异步池类传递给 [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")，则会引发错误。此引擎仅接受与 asyncio 兼容的池类，包括
    [`AsyncAdaptedQueuePool`](../core/pooling.html#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool")。其他池类（例如 [`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool")）与同步和异步引擎都兼容，因为它们不执行任何锁定。
- en: See also
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[API Documentation - Available Pool Implementations](../core/pooling.html#pool-api)'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[API 文档 - 可用的连接池实现](../core/pooling.html#pool-api)'
- en: 'References: [#8771](https://www.sqlalchemy.org/trac/ticket/8771)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8771](https://www.sqlalchemy.org/trac/ticket/8771)
- en: tests
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [change]**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [change]**'
- en: pytest support in the tox.ini file has been updated to support pytest 8.1.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: tox.ini 文件中的 pytest 支持已更新，以支持 pytest 8.1。
- en: 2.0.27
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.27
- en: 'Released: February 13, 2024'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2024年2月13日
- en: postgresql
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [regression]**'
- en: Fixed regression caused by just-released fix for [#10863](https://www.sqlalchemy.org/trac/ticket/10863)
    where an invalid exception class were added to the “except” block, which does
    not get exercised unless such a catch actually happens. A mock-style test has
    been added to ensure this catch is exercised in unit tests.
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于刚发布的修复了[#10863](https://www.sqlalchemy.org/trac/ticket/10863)的修复导致的回归已经修复，其中将一个无效的异常类添加到了“except”块中，除非实际发生这样的捕获，否则不会被执行。已经添加了一种模拟式测试，以确保在单元测试中执行此捕获。
- en: 'References: [#11005](https://www.sqlalchemy.org/trac/ticket/11005)'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#11005](https://www.sqlalchemy.org/trac/ticket/11005)
- en: 2.0.26
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.26
- en: 'Released: February 11, 2024'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2024年2月11日
- en: orm
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Replaced the “loader depth is excessively deep” warning with a shorter message
    added to the caching badge within SQL logging, for those statements where the
    ORM disabled the cache due to a too-deep chain of loader options. The condition
    which this warning highlights is difficult to resolve and is generally just a
    limitation in the ORM’s application of SQL caching. A future feature may include
    the ability to tune the threshold where caching is disabled, but for now the warning
    will no longer be a nuisance.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已用一个较短的消息替换了“加载器深度过深”的警告，该消息被添加到 SQL 日志中的缓存徽章中，用于 ORM 由于加载器选项的过深链而禁用缓存的语句。此警告突出显示的条件难以解决，并且通常只是
    ORM 在应用 SQL 缓存时的限制。未来的功能可能包括调整禁用缓存的阈值的能力，但目前此警告将不再是一个麻烦。
- en: 'References: [#10896](https://www.sqlalchemy.org/trac/ticket/10896)'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10896](https://www.sqlalchemy.org/trac/ticket/10896)
- en: '**[orm] [bug]**'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where it was not possible to use a type (such as an enum) within
    a [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    container type if that type were declared locally within the class body. The scope
    of locals used for the eval now includes that of the class body itself. In addition,
    the expression within [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    may also refer to the class name itself, if used as a string or with future annotations
    mode.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在类主体内部声明类型（如枚举）时无法在[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")容器类型中使用该类型的问题。现在，用于评估的本地变量范围包括类主体本身。此外，[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")内的表达式还可以引用类名本身，如果作为字符串使用或者使用了未来的注释模式。
- en: 'References: [#10899](https://www.sqlalchemy.org/trac/ticket/10899)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10899](https://www.sqlalchemy.org/trac/ticket/10899)
- en: '**[orm] [bug]**'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where using [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") along with the [`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") feature would fail to use the correct version identifier
    in the case that an additional UPDATE were emitted against the target object as
    a result of the use of [`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") on the object. The issue is similar to [#10800](https://www.sqlalchemy.org/trac/ticket/10800)
    just fixed in version 2.0.25 for the case of updates alone.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") 与 [`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") 功能时，如果由于对象上使用了 [`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") 而导致目标对象上发出了额外的 UPDATE，则会失败使用正确的版本标识符的问题。这个问题类似于[#10800](https://www.sqlalchemy.org/trac/ticket/10800)，只是对于仅有更新的情况，版本2.0.25中刚刚修复了。
- en: 'References: [#10967](https://www.sqlalchemy.org/trac/ticket/10967)'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10967](https://www.sqlalchemy.org/trac/ticket/10967)
- en: '**[orm] [bug]**'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue where an assertion within the implementation for [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") would raise if a SQL expression that was not
    cacheable were used; this was a 2.0 regression since 1.4.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") 实现中的断言，如果使用了不可缓存的 SQL 表达式，则会引发断言错误；这是从1.4版本以来的一个2.0回归。
- en: 'References: [#10990](https://www.sqlalchemy.org/trac/ticket/10990)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10990](https://www.sqlalchemy.org/trac/ticket/10990)
- en: examples
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Fixed regression in history_meta example where the use of `MetaData.to_metadata()`
    to make a copy of the history table would also copy indexes (which is a good thing),
    but causing naming conflicts indexes regardless of naming scheme used for those
    indexes. A “_history” suffix is now added to these indexes in the same way as
    is achieved for the table name.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 history_meta 示例中的回归，其中使用 `MetaData.to_metadata()` 复制历史表也会复制索引（这是一件好事），但不管用于这些索引的命名方案如何，都会导致命名冲突。现在这些索引都会添加一个“_history”后缀，方式与表名的方式相同。
- en: 'References: [#10920](https://www.sqlalchemy.org/trac/ticket/10920)'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10920](https://www.sqlalchemy.org/trac/ticket/10920)
- en: '**[examples] [bug]**'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Fixed the performance example scripts in examples/performance to mostly work
    with the Oracle database, by adding the [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct to all the tables and allowing primary
    generation to occur on this backend. A few of the “raw DBAPI” cases still are
    not compatible with Oracle.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过将 [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    构造添加到所有表中，并允许在此后端上进行主键生成，修复了 examples/performance 中性能示例脚本在 Oracle 数据库上基本可用的问题。一些“原始
    DBAPI” 情况仍与 Oracle 不兼容。
- en: sql
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed issues in [`case()`](../core/sqlelement.html#sqlalchemy.sql.expression.case
    "sqlalchemy.sql.expression.case") where the logic for determining the type of
    the expression could result in [`NullType`](../core/type_api.html#sqlalchemy.types.NullType
    "sqlalchemy.types.NullType") if the last element in the “whens” had no type, or
    in other cases where the type could resolve to `None`. The logic has been updated
    to scan all given expressions so that the first non-null type is used, as well
    as to always ensure a type is present. Pull request courtesy David Evans.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`case()`](../core/sqlelement.html#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    中的问题，即确定表达式类型的逻辑可能导致如果“whens”中的最后一个元素没有类型，或在其他情况下类型可能解析为 `None`，则会导致 [`NullType`](../core/type_api.html#sqlalchemy.types.NullType
    "sqlalchemy.types.NullType")。逻辑已更新为扫描所有给定表达式，以便使用第一个非空类型，并始终确保存在类型。感谢 David Evans
    提交的拉取请求。
- en: 'References: [#10843](https://www.sqlalchemy.org/trac/ticket/10843)'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10843](https://www.sqlalchemy.org/trac/ticket/10843)
- en: typing
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [错误]**'
- en: Fixed the type signature for the [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") event to indicate that the given [`DBAPIConnection`](../core/internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") argument may be `None` in the
    case where the connection has been invalidated.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") 事件的类型签名，指示给定的 [`DBAPIConnection`](../core/internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") 参数在连接无效时可能为 `None` 的情况。
- en: postgresql
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase] [reflection]**'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase] [reflection]**'
- en: Added support for reflection of PostgreSQL CHECK constraints marked with “NO
    INHERIT”, setting the key `no_inherit=True` in the reflected data. Pull request
    courtesy Ellis Valentiner.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加对以“NO INHERIT”标记的 PostgreSQL CHECK 约束的反射支持，将 `no_inherit=True` 设置为反射数据的键。感谢
    Ellis Valentiner 的拉取请求。
- en: 'References: [#10777](https://www.sqlalchemy.org/trac/ticket/10777)'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10777](https://www.sqlalchemy.org/trac/ticket/10777)
- en: '**[postgresql] [usecase]**'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Support the `USING <method>` option for PostgreSQL `CREATE TABLE` to specify
    the access method to use to store the contents for the new table. Pull request
    courtesy Edgar Ramírez-Mondragón.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持 `USING <method>` 选项用于 PostgreSQL `CREATE TABLE`，以指定用于存储新表内容的访问方法。感谢 Edgar
    Ramírez-Mondragón 的拉取请求。
- en: See also
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL Table Options](../dialects/postgresql.html#postgresql-table-options)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL 表选项](../dialects/postgresql.html#postgresql-table-options)'
- en: 'References: [#10904](https://www.sqlalchemy.org/trac/ticket/10904)'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10904](https://www.sqlalchemy.org/trac/ticket/10904)
- en: '**[postgresql] [usecase]**'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Correctly type PostgreSQL RANGE and MULTIRANGE types as `Range[T]` and `Sequence[Range[T]]`.
    Introduced utility sequence [`MultiRange`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") to allow better interoperability
    of MULTIRANGE types.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正确地将 PostgreSQL RANGE 和 MULTIRANGE 类型标记为 `Range[T]` 和 `Sequence[Range[T]]`。引入了实用程序序列
    [`MultiRange`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") ，以允许更好地支持 MULTIRANGE 类型的互操作性。
- en: 'References: [#9736](https://www.sqlalchemy.org/trac/ticket/9736)'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9736](https://www.sqlalchemy.org/trac/ticket/9736)
- en: '**[postgresql] [usecase]**'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Differentiate between INT4 and INT8 ranges and multi-ranges types when inferring
    the database type from a [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") or [`MultiRange`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") instance, preferring INT4 if the
    values fit into it.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当从 [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") 或 [`MultiRange`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") 实例推断数据库类型时，区分 INT4 和 INT8 范围以及多范围类型，如果值适合
    INT4，则优先选择 INT4。
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [regression]**'
- en: Fixed regression in the asyncpg dialect caused by [#10717](https://www.sqlalchemy.org/trac/ticket/10717)
    in release 2.0.24 where the change that now attempts to gracefully close the asyncpg
    connection before terminating would not fall back to `terminate()` for other potential
    connection-related exceptions other than a timeout error, not taking into account
    cases where the graceful `.close()` attempt fails for other reasons such as connection
    errors.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 2.0.24 版本中由 [#10717](https://www.sqlalchemy.org/trac/ticket/10717) 引起的
    asyncpg 方言中的回归，该版本中现在尝试在终止之前优雅地关闭 asyncpg 连接的更改将不会对其他可能的与连接相关的异常（除了超时错误之外）回退到
    `terminate()` ，没有考虑到优雅的 `.close()` 尝试因其他原因失败，如连接错误。
- en: 'References: [#10863](https://www.sqlalchemy.org/trac/ticket/10863)'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10863](https://www.sqlalchemy.org/trac/ticket/10863)
- en: '**[postgresql] [bug]**'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed an issue regarding the use of the [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype with the [`Uuid.as_uuid`](../core/type_basics.html#sqlalchemy.types.Uuid.params.as_uuid
    "sqlalchemy.types.Uuid") parameter set to False, when using PostgreSQL dialects.
    ORM-optimized INSERT statements (e.g. the “insertmanyvalues” feature) would not
    correctly align primary key UUID values for bulk INSERT statements, resulting
    in errors. Similar issues were fixed for the pymssql driver as well.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 PostgreSQL 方言时，[`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") 数据类型与 [`Uuid.as_uuid`](../core/type_basics.html#sqlalchemy.types.Uuid.params.as_uuid
    "sqlalchemy.types.Uuid") 参数设置为 False 时的问题。ORM 优化的 INSERT 语句（例如，“insertmanyvalues”功能）将不会正确地对齐主键
    UUID 值以进行批量 INSERT 语句，导致错误。类似的问题也针对 pymssql 驱动程序进行了修复。
- en: mysql
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue where NULL/NOT NULL would not be properly reflected from a MySQL
    column that also specified the VIRTUAL or STORED directives. Pull request courtesy
    Georg Wicke-Arndt.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即当一个 MySQL 列同时指定了 VIRTUAL 或 STORED 指令时，NULL/NOT NULL 无法正确反映出来的问题。拉取请求由
    Georg Wicke-Arndt 提供。
- en: 'References: [#10850](https://www.sqlalchemy.org/trac/ticket/10850)'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10850](https://www.sqlalchemy.org/trac/ticket/10850)
- en: '**[mysql] [bug]**'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue in asyncio dialects asyncmy and aiomysql, where their `.close()`
    method is apparently not a graceful close. replace with non-standard `.ensure_closed()`
    method that’s awaitable and move `.close()` to the so-called “terminate” case.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 asyncio 方言 asyncmy 和 aiomysql 中的问题，其中它们的 `.close()` 方法显然不是优雅关闭的。用非标准的 `.ensure_closed()`
    方法替换，该方法是可等待的，并将 `.close()` 移动到所谓的“终止”情况。
- en: 'References: [#10893](https://www.sqlalchemy.org/trac/ticket/10893)'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10893](https://www.sqlalchemy.org/trac/ticket/10893)
- en: mssql
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed an issue regarding the use of the [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype with the [`Uuid.as_uuid`](../core/type_basics.html#sqlalchemy.types.Uuid.params.as_uuid
    "sqlalchemy.types.Uuid") parameter set to False, when using the pymssql dialect.
    ORM-optimized INSERT statements (e.g. the “insertmanyvalues” feature) would not
    correctly align primary key UUID values for bulk INSERT statements, resulting
    in errors. Similar issues were fixed for the PostgreSQL drivers as well.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 pymssql 方言时，[`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")
    数据类型与 [`Uuid.as_uuid`](../core/type_basics.html#sqlalchemy.types.Uuid.params.as_uuid
    "sqlalchemy.types.Uuid") 参数设置为 False 时的问题。ORM 优化的 INSERT 语句（例如，“insertmanyvalues”功能）将不会正确地对齐主键
    UUID 值以进行批量 INSERT 语句，导致错误。类似的问题也针对 PostgreSQL 驱动程序进行了修复。
- en: oracle
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Oracle
- en: '**[oracle] [performance] [bug]**'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [performance] [bug]**'
- en: Changed the default arraysize of the Oracle dialects so that the value set by
    the driver is used, that is 100 at the time of writing for both cx_oracle and
    oracledb. Previously the value was set to 50 by default. The setting of 50 could
    cause significant performance regressions compared to when using cx_oracle/oracledb
    alone to fetch many hundreds of rows over slower networks.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了 Oracle 方言的默认数组大小，以便使用驱动程序设置的值，即写入时的 cx_oracle 和 oracledb 的值为 100。以前默认设置为
    50 的值可能会导致在较慢的网络上使用 cx_oracle/oracledb 单独提取许多行时出现显着的性能回归。
- en: 'References: [#10877](https://www.sqlalchemy.org/trac/ticket/10877)'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10877](https://www.sqlalchemy.org/trac/ticket/10877)
- en: 2.0.25
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.25
- en: 'Released: January 2, 2024'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2024年1月2日
- en: orm
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added preliminary support for Python 3.12 pep-695 type alias structures, when
    resolving custom type maps for ORM Annotated Declarative mappings.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 Python 3.12 pep-695 类型别名结构的初步支持，用于解析 ORM Annotated Declarative 映射的自定义类型映射时。
- en: 'References: [#10807](https://www.sqlalchemy.org/trac/ticket/10807)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10807](https://www.sqlalchemy.org/trac/ticket/10807)
- en: '**[orm] [bug]**'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where when making use of the [`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") feature at the same time as using a mapper version_id_col
    could lead to a situation where the second UPDATE statement emitted by the post-update
    feature would fail to make use of the correct version identifier, assuming an
    UPDATE was already emitted in that flush which had already bumped the version
    counter.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一种情况，即在同时使用 `relationship.post_update` 功能和使用 mapper version_id_col 时，后者 UPDATE
    语句可能会未能正确使用正确的版本标识符，假定在该刷新中已经发出了一个已经增加了版本计数器的 UPDATE。
- en: 'References: [#10800](https://www.sqlalchemy.org/trac/ticket/10800)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#10800](https://www.sqlalchemy.org/trac/ticket/10800)
- en: '**[orm] [bug]**'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue where ORM Annotated Declarative would mis-interpret the left hand
    side of a relationship without any collection specified as uselist=True if the
    left type were given as a class and not a string, without using future-style annotations.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了 ORM 注解式声明中的问题，如果左侧类型被指定为类而不是字符串，并且没有使用 future 风格的注释，当左侧没有指定任何集合为 uselist=True
    时，会误解关系的左侧。 '
- en: 'References: [#10815](https://www.sqlalchemy.org/trac/ticket/10815)'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#10815](https://www.sqlalchemy.org/trac/ticket/10815)
- en: sql
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Improved compilation of [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") / [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") in the context of a negation of boolean comparison,
    will now render `NOT (expr)` rather than reversing the equality operator to not
    equals, allowing finer-grained control of negations for these non-typical operators.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了在布尔比较的否定上下文中编译 [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") / [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") 的方式，现在将呈现 `NOT (expr)` 而不是将等式操作符反转为不等于，允许对这些非典型运算符进行更精细的否定控制。
- en: 'References: [#10817](https://www.sqlalchemy.org/trac/ticket/10817)'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#10817](https://www.sqlalchemy.org/trac/ticket/10817)
- en: typing
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型提示
- en: '**[typing] [bug]**'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型提示] [错误]**'
- en: 'Fixed regressions caused by typing added to the `sqlalchemy.sql.functions`
    module in version 2.0.24, as part of [#6810](https://www.sqlalchemy.org/trac/ticket/6810):'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在版本 2.0.24 中添加到 `sqlalchemy.sql.functions` 模块的类型提示引起的回归，作为 [#6810](https://www.sqlalchemy.org/trac/ticket/6810)
    的一部分：
- en: Further enhancements to pep-484 typing to allow SQL functions from [`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") derived elements to work more effectively with
    ORM-mapped attributes ([#10801](https://www.sqlalchemy.org/trac/ticket/10801))
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进一步增强了 pep-484 类型提示，以允许从 [`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") 派生的元素更有效地与 ORM 映射的属性一起使用 ([#10801](https://www.sqlalchemy.org/trac/ticket/10801))
- en: Fixed the argument types passed to functions so that literal expressions like
    strings and ints are again interpreted correctly ([#10818](https://www.sqlalchemy.org/trac/ticket/10818))
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了传递给函数的参数类型，以便像字符串和整数这样的字面表达式再次被正确解释 ([#10818](https://www.sqlalchemy.org/trac/ticket/10818))
- en: 'References: [#10801](https://www.sqlalchemy.org/trac/ticket/10801), [#10818](https://www.sqlalchemy.org/trac/ticket/10818)'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#10801](https://www.sqlalchemy.org/trac/ticket/10801), [#10818](https://www.sqlalchemy.org/trac/ticket/10818)
- en: asyncio
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [bug]**'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [错误]**'
- en: Fixed critical issue in asyncio version of the connection pool where calling
    [`AsyncEngine.dispose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose") would produce a new connection pool
    that did not fully re-establish the use of asyncio-compatible mutexes, leading
    to the use of a plain `threading.Lock()` which would then cause deadlocks in an
    asyncio context when using concurrency features like `asyncio.gather()`.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 asyncio 版本连接池中的关键问题，调用 [`AsyncEngine.dispose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose") 会产生一个新的连接池，该连接池没有完全重新建立对 asyncio
    兼容互斥锁的使用，导致在使用类似于 `asyncio.gather()` 的并发特性时，在 asyncio 上下文中产生死锁，因为它使用了普通的 `threading.Lock()`。
- en: 'This change is also **backported** to: 1.4.51'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也**回溯**到了：1.4.51
- en: 'References: [#10813](https://www.sqlalchemy.org/trac/ticket/10813)'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#10813](https://www.sqlalchemy.org/trac/ticket/10813)
- en: oracle
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [asyncio]**'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [asyncio]**'
- en: Added support for [python-oracledb](../dialects/oracle.html#oracledb) in asyncio
    mode, using the newly released version of the `oracledb` DBAPI that includes asyncio
    support. For the 2.0 series, this is a preview release, where the current implementation
    does not yet have include support for [`AsyncConnection.stream()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream"). Improved support is planned
    for the 2.1 release of SQLAlchemy.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 asyncio 模式下添加了对 [python-oracledb](../dialects/oracle.html#oracledb) 的支持，使用了新发布的支持
    asyncio 的 `oracledb` DBAPI 版本。 对于 2.0 系列，这是一个预览版本，当前实现尚未包括对 [`AsyncConnection.stream()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") 的支持。 SQLAlchemy 计划改进支持以适用于 2.1
    版本。
- en: 'References: [#10679](https://www.sqlalchemy.org/trac/ticket/10679)'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#10679](https://www.sqlalchemy.org/trac/ticket/10679)
- en: 2.0.24
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.24
- en: 'Released: December 28, 2023'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年12月28日
- en: orm
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved a fix first implemented for [#3208](https://www.sqlalchemy.org/trac/ticket/3208)
    released in version 0.9.8, where the registry of classes used internally by declarative
    could be subject to a race condition in the case where individual mapped classes
    are being garbage collected at the same time while new mapped classes are being
    constructed, as can happen in some test suite configurations or dynamic class
    creation environments. In addition to the weakref check already added, the list
    of items being iterated is also copied first to avoid “list changed while iterating”
    errors. Pull request courtesy Yilei Yang.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对在版本0.9.8中发布的[#3208](https://www.sqlalchemy.org/trac/ticket/3208)首次实施的修复进行了改进，其中声明性内部使用的类注册表可能会受到竞争条件的影响，这种情况下在同时清理个别映射类并构造新映射类时可能会发生，如一些测试套件配置或动态类创建环境中可能发生的情况。除了已经添加的弱引用检查外，还首先复制正在迭代的项目列表，以避免“在迭代时更改列表”的错误。感谢Yilei
    Yang提供的拉取请求。
- en: 'This change is also **backported** to: 1.4.51'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.51
- en: 'References: [#10782](https://www.sqlalchemy.org/trac/ticket/10782)'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10782](https://www.sqlalchemy.org/trac/ticket/10782)
- en: '**[orm] [bug]**'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where use of [`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign
    "sqlalchemy.orm.foreign") annotation on a non-initialized [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct would produce an expression without
    a type, which was then not updated at initialization time of the actual column,
    leading to issues such as relationships not determining `use_get` appropriately.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在未对非初始化的[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")构造上使用[`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign
    "sqlalchemy.orm.foreign")注释会产生没有类型的表达式的问题，这样在实际列初始化时不会更新，导致关系无法适当地确定`use_get`的问题。
- en: 'References: [#10597](https://www.sqlalchemy.org/trac/ticket/10597)'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10597](https://www.sqlalchemy.org/trac/ticket/10597)
- en: '**[orm] [bug]**'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the error message produced when the unit of work process sets the value
    of a primary key column to NULL due to a related object with a dependency rule
    on that column being deleted, to include not just the destination object and column
    name but also the source column from which the NULL value is originating. Pull
    request courtesy Jan Vollmer.
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了工作单元进程将主键列的值设置为NULL的错误消息，因为具有对该列的依赖规则的相关对象被删除，包括不仅目标对象和列名，还包括来源列。感谢Jan Vollmer提供的拉取请求。
- en: 'References: [#10668](https://www.sqlalchemy.org/trac/ticket/10668)'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10668](https://www.sqlalchemy.org/trac/ticket/10668)
- en: '**[orm] [bug]**'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Modified the `__init_subclass__()` method used by [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass"), [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") and [`DeclarativeBaseNoMeta`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBaseNoMeta
    "sqlalchemy.orm.DeclarativeBaseNoMeta") to accept arbitrary `**kw` and to propagate
    them to the `super()` call, allowing greater flexibility in arranging custom superclasses
    and mixins which make use of `__init_subclass__()` keyword arguments. Pull request
    courtesy Michael Oliver.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了[`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")、[`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")和[`DeclarativeBaseNoMeta`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBaseNoMeta
    "sqlalchemy.orm.DeclarativeBaseNoMeta")使用的`__init_subclass__()`方法，使其接受任意的`**kw`并将其传播到`super()`调用，从而允许更灵活地安排使用`__init_subclass__()`关键字参数的自定义超类和混入。感谢Michael
    Oliver提供的拉取请求。
- en: 'References: [#10732](https://www.sqlalchemy.org/trac/ticket/10732)'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10732](https://www.sqlalchemy.org/trac/ticket/10732)
- en: '**[orm] [bug]**'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Ensured the use case of [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") objects used in the `returning()` portion of ORM-enabled
    INSERT, UPDATE and DELETE statements is tested and works fully. This was never
    explicitly implemented or tested previously and did not work correctly in the
    1.4 series; in the 2.0 series, ORM UPDATE/DELETE with WHERE criteria was missing
    an implementation method preventing [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") objects from working.
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保了在 ORM 启用的 INSERT、UPDATE 和 DELETE 语句的 `returning()` 部分中使用 [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") 对象的用例已经得到测试并且完全可用。这在以前从未被明确实现或测试过，并且在 1.4 系列中没有正常工作；在
    2.0 系列中，ORM UPDATE/DELETE 缺少了一个实现方法，导致 [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") 对象无法正常工作。
- en: 'References: [#10776](https://www.sqlalchemy.org/trac/ticket/10776)'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10776](https://www.sqlalchemy.org/trac/ticket/10776)
- en: '**[orm] [bug]**'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 2.0 regression in [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") where a routine that detects sequences would
    not correctly filter out string or bytes instances, making it impossible to assign
    a string value to a specific index (while non-sequence values would work fine).
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 2.0 版本中 [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") 中的一个回归问题，该问题导致检测序列的例程无法正确地过滤掉字符串或字节实例，从而无法将字符串值分配给特定索引（而非序列值则可以正常工作）。
- en: 'References: [#10784](https://www.sqlalchemy.org/trac/ticket/10784)'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10784](https://www.sqlalchemy.org/trac/ticket/10784)
- en: engine
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed URL-encoding of the username and password components of [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") objects when converting them to string using the [`URL.render_as_string()`](../core/engines.html#sqlalchemy.engine.URL.render_as_string
    "sqlalchemy.engine.URL.render_as_string") method, by using Python standard library
    `urllib.parse.quote` while allowing for plus signs and spaces to remain unchanged
    as supported by SQLAlchemy’s non-standard URL parsing, rather than the legacy
    home-grown routine from many years ago. Pull request courtesy of Xavier NUNN.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将 [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    对象的用户名和密码部分进行 URL 编码时的问题，在使用 [`URL.render_as_string()`](../core/engines.html#sqlalchemy.engine.URL.render_as_string
    "sqlalchemy.engine.URL.render_as_string") 方法将其转换为字符串时，采用了 Python 标准库 `urllib.parse.quote`，同时允许加号和空格保持不变，以便与
    SQLAlchemy 的非标准 URL 解析兼容，而不是多年前的遗留自行编写的例程。感谢 Xavier NUNN 提交的拉取请求。
- en: 'References: [#10662](https://www.sqlalchemy.org/trac/ticket/10662)'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10662](https://www.sqlalchemy.org/trac/ticket/10662)
- en: sql
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in stringify for SQL elements, where a specific dialect is not passed,
    where a dialect-specific element such as the PostgreSQL “on conflict do update”
    construct is encountered and then fails to provide for a stringify dialect with
    the appropriate state to render the construct, leading to internal errors.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQL 元素的字符串化问题，在未传递特定方言的情况下，遇到诸如 PostgreSQL 的“on conflict do update”构造之类的方言特定元素，然后无法提供具有适当状态以呈现构造的字符串化方言，导致内部错误。
- en: 'References: [#10753](https://www.sqlalchemy.org/trac/ticket/10753)'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10753](https://www.sqlalchemy.org/trac/ticket/10753)
- en: '**[sql] [bug]**'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where stringifying or compiling a [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") that was against a DML construct such as an [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct would fail to stringify, due to
    a mis-detection that the statement overall is an INSERT, leading to internal errors.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对 DML 构造（如 [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") 构造）的 [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") 进行字符串化或编译时失败的问题，由于错误地检测到了语句整体是一个 INSERT，导致内部错误。
- en: schema
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [bug]**'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Fixed issue where error reporting for unexpected schema item when creating objects
    like [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    would incorrectly handle an argument that was itself passed as a tuple, leading
    to a formatting error. The error message has been modernized to use f-strings.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了创建 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    等对象时出现意外模式项的错误报告问题，该问题会错误地处理作为元组传递的参数，导致格式错误。错误消息已经使用 f-strings 进行了现代化处理。
- en: 'References: [#10654](https://www.sqlalchemy.org/trac/ticket/10654)'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10654](https://www.sqlalchemy.org/trac/ticket/10654)
- en: typing
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Completed pep-484 typing for the `sqlalchemy.sql.functions` module. [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs made against `func` elements should
    now have filled-in return types.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 `sqlalchemy.sql.functions` 模块完成了 pep-484 类型化。对于针对 `func` 元素进行的 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造现在应该填充返回类型。
- en: 'References: [#6810](https://www.sqlalchemy.org/trac/ticket/6810)'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6810](https://www.sqlalchemy.org/trac/ticket/6810)
- en: asyncio
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [change]**'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [change]**'
- en: The `async_fallback` dialect argument is now deprecated, and will be removed
    in SQLAlchemy 2.1\. This flag has not been used for SQLAlchemy’s test suite for
    some time. asyncio dialects can still run in a synchronous style by running code
    within a greenlet using `greenlet_spawn()`.
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`async_fallback` 方言参数现已弃用，并将在 SQLAlchemy 2.1 中删除。这个标志在一段时间内没有被用于 SQLAlchemy
    的测试套件。通过使用 `greenlet_spawn()` 在 greenlet 中运行代码，asyncio 方言仍然可以以同步方式运行。'
- en: postgresql
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Adjusted the asyncpg dialect such that when the `terminate()` method is used
    to discard an invalidated connection, the dialect will first attempt to gracefully
    close the connection using `.close()` with a timeout, if the operation is proceeding
    within an async event loop context only. This allows the asyncpg driver to attend
    to finalizing a `TimeoutError` including being able to close a long-running query
    server side, which otherwise can keep running after the program has exited.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 asyncpg 方言，以便当使用 `terminate()` 方法丢弃无效的连接时，方言首先会尝试使用带有超时的 `.close()` 优雅地关闭连接，如果操作仅在异步事件循环上下文中进行。这允许
    asyncpg 驱动程序处理最终化 `TimeoutError`，包括能够在程序退出后继续运行的情况下关闭长时间运行的查询服务器端。
- en: 'References: [#10717](https://www.sqlalchemy.org/trac/ticket/10717)'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10717](https://www.sqlalchemy.org/trac/ticket/10717)
- en: mysql
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed regression introduced by the fix in ticket [#10492](https://www.sqlalchemy.org/trac/ticket/10492)
    when using pool pre-ping with PyMySQL version older than 1.0.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用旧于 1.0 版本的 PyMySQL 的 pool pre-ping 时，在票证 [#10492](https://www.sqlalchemy.org/trac/ticket/10492)
    中的修复引入的回归。
- en: 'This change is also **backported** to: 1.4.51'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**至：1.4.51
- en: 'References: [#10650](https://www.sqlalchemy.org/trac/ticket/10650)'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10650](https://www.sqlalchemy.org/trac/ticket/10650)
- en: tests
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Improvements to the test suite to further harden its ability to run when Python
    `greenlet` is not installed. There is now a tox target that includes the token
    “nogreenlet” that will run the suite with greenlet not installed (note that it
    still temporarily installs greenlet as part of the tox config, however).
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对测试套件进行了改进，进一步加强了在未安装 Python `greenlet` 时运行的能力。现在有一个 tox 目标，其中包含标记“nogreenlet”，该目标将在未安装
    greenlet 的情况下运行套件（请注意，它仍然作为 tox 配置的一部分临时安装 greenlet）。
- en: 'References: [#10747](https://www.sqlalchemy.org/trac/ticket/10747)'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10747](https://www.sqlalchemy.org/trac/ticket/10747)
- en: 2.0.23
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.23
- en: 'Released: November 2, 2023'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023 年 11 月 2 日
- en: orm
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Implemented the [`Session.bulk_insert_mappings.render_nulls`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.render_nulls
    "sqlalchemy.orm.Session.bulk_insert_mappings") parameter for new style bulk ORM
    inserts, allowing `render_nulls=True` as an execution option. This allows for
    bulk ORM inserts with a mixture of `None` values in the parameter dictionaries
    to use a single batch of rows for a given set of dicationary keys, rather than
    breaking up into batches that omit the NULL columns from each INSERT.
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为新式批量 ORM 插入实现了 [`Session.bulk_insert_mappings.render_nulls`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.render_nulls
    "sqlalchemy.orm.Session.bulk_insert_mappings") 参数，允许 `render_nulls=True` 作为执行选项。这允许使用参数字典中的
    `None` 值进行批量 ORM 插入，并使用给定的字典键的单个行批处理，而不是将其拆分为每个 INSERT 中省略 NULL 列的批次。
- en: See also
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Sending NULL values in ORM bulk INSERT statements](../orm/queryguide/dml.html#orm-queryguide-insert-null-params)'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 ORM 批量 INSERT 语句中发送 NULL 值](../orm/queryguide/dml.html#orm-queryguide-insert-null-params)
- en: 'References: [#10575](https://www.sqlalchemy.org/trac/ticket/10575)'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10575](https://www.sqlalchemy.org/trac/ticket/10575)
- en: '**[orm] [bug]**'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the `__allow_unmapped__` directive failed to allow for legacy
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    / [`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred "sqlalchemy.orm.deferred")
    mappings that nonetheless had annotations such as `Any` or a specific type without
    `Mapped[]` as their type, without errors related to locating the attribute name.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`__allow_unmapped__`指令无法允许具有注释（如`Any`或具有特定类型但没有`Mapped[]`作为其类型的）的遗留[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") / [`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred")映射，而无需与定位属性名称相关的错误。
- en: 'References: [#10516](https://www.sqlalchemy.org/trac/ticket/10516)'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10516](https://www.sqlalchemy.org/trac/ticket/10516)
- en: '**[orm] [bug]**'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed caching bug where using the [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") construct in conjunction with loader options
    [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload"), [`lazyload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") would fail to substitute bound parameter values correctly
    on subsequent caching runs.
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了缓存错误，当与加载器选项[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")、[`lazyload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload")一起使用[`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression")构造时，在后续缓存运行中无法正确替换绑定参数值的问题。
- en: 'References: [#10570](https://www.sqlalchemy.org/trac/ticket/10570)'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10570](https://www.sqlalchemy.org/trac/ticket/10570)
- en: '**[orm] [bug]**'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in ORM annotated declarative where using a `ClassVar` that nonetheless
    referred in some way to an ORM mapped class name would fail to be interpreted
    as a `ClassVar` that’s not mapped.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM注释声明中的错误，其中使用`ClassVar`，但仍然以某种方式引用ORM映射类名会导致无法解释为未映射的`ClassVar`。
- en: 'References: [#10472](https://www.sqlalchemy.org/trac/ticket/10472)'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10472](https://www.sqlalchemy.org/trac/ticket/10472)
- en: sql
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Implemented “literal value processing” for the [`Interval`](../core/type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval") datatype for both the PostgreSQL and Oracle dialects,
    allowing literal rendering of interval values. Pull request courtesy Indivar Mishra.
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为PostgreSQL和Oracle方言的[`Interval`](../core/type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval")数据类型实现了“字面值处理”，允许对间隔值进行字面渲染。感谢Indivar Mishra的拉取请求。
- en: 'References: [#9737](https://www.sqlalchemy.org/trac/ticket/9737)'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9737](https://www.sqlalchemy.org/trac/ticket/9737)
- en: '**[sql] [bug]**'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where using the same bound parameter more than once with `literal_execute=True`
    in some combinations with other literal rendering parameters would cause the wrong
    values to render due to an iteration issue.
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用`literal_execute=True`时，与其他字面渲染参数的某些组合中多次使用相同绑定参数会导致值渲染错误的问题，这是由于迭代问题引起的。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.50
- en: 'References: [#10142](https://www.sqlalchemy.org/trac/ticket/10142)'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10142](https://www.sqlalchemy.org/trac/ticket/10142)
- en: '**[sql] [bug]**'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added compiler-level None/NULL handling for the “literal processors” of all
    datatypes that include literal processing, that is, where a value is rendered
    inline within a SQL statement rather than as a bound parameter, for all those
    types that do not feature explicit “null value” handling. Previously this behavior
    was undefined and inconsistent.
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为所有包含字面处理的数据类型的“字面处理器”添加了编译器级别的None/NULL处理，即在SQL语句中内联渲染值而不是作为绑定参数的所有这些类型，对于那些不具有显式“null值”处理的类型。以前，此行为是未定义且不一致的。
- en: 'References: [#10535](https://www.sqlalchemy.org/trac/ticket/10535)'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10535](https://www.sqlalchemy.org/trac/ticket/10535)
- en: '**[sql]**'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Removed unused placeholder method `TypeEngine.compare_against_backend()` This
    method was used by very old versions of Alembic. See [https://github.com/sqlalchemy/alembic/issues/1293](https://github.com/sqlalchemy/alembic/issues/1293)
    for details.
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了未使用的占位符方法`TypeEngine.compare_against_backend()`，这个方法是由非常旧版本的Alembic使用的。有关详细信息，请参见[https://github.com/sqlalchemy/alembic/issues/1293](https://github.com/sqlalchemy/alembic/issues/1293)。
- en: asyncio
  id: totrans-264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [bug]**'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [bug]**'
- en: Fixed bug with method [`AsyncSession.close_all()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all") that was not working correctly.
    Also added function [`close_all_sessions()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions") that’s the equivalent of [`close_all_sessions()`](../orm/session_api.html#sqlalchemy.orm.close_all_sessions
    "sqlalchemy.orm.close_all_sessions"). Pull request courtesy of Bryan不可思议.
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了方法[`AsyncSession.close_all()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all")的bug，该方法之前未能正确工作。还添加了函数[`close_all_sessions()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions")，它是[`close_all_sessions()`](../orm/session_api.html#sqlalchemy.orm.close_all_sessions
    "sqlalchemy.orm.close_all_sessions")的等效函数。拉取请求由Bryan不可思议提供。
- en: 'References: [#10421](https://www.sqlalchemy.org/trac/ticket/10421)'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10421](https://www.sqlalchemy.org/trac/ticket/10421)
- en: postgresql
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed 2.0 regression caused by [#7744](https://www.sqlalchemy.org/trac/ticket/7744)
    where chains of expressions involving PostgreSQL JSON operators combined with
    other operators such as string concatenation would lose correct parenthesization,
    due to an implementation detail specific to the PostgreSQL dialect.
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了2.0版本中由[#7744](https://www.sqlalchemy.org/trac/ticket/7744)引起的回归问题，该问题涉及到与其他操作符（如字符串连接）组合使用的PostgreSQL
    JSON运算符的表达式链失去了正确的括号化，这是由于PostgreSQL方言特有的实现细节导致的。
- en: 'References: [#10479](https://www.sqlalchemy.org/trac/ticket/10479)'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10479](https://www.sqlalchemy.org/trac/ticket/10479)
- en: '**[postgresql] [bug]**'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed SQL handling for “insertmanyvalues” when using the [`BIT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT") datatype with the asyncpg backend. The [`BIT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT") on asyncpg apparently requires the use of
    an asyncpg-specific `BitString` type which is currently exposed when using this
    DBAPI, making it incompatible with other PostgreSQL DBAPIs that all work with
    plain bitstrings here. A future fix in version 2.1 will normalize this datatype
    across all PG backends. Pull request courtesy Sören Oldag.
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用asyncpg后端并使用[`BIT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT")数据类型时，修复了“insertmanyvalues”的SQL处理。在asyncpg上，[`BIT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT")显然需要使用一个asyncpg特定的`BitString`类型，该类型目前在使用此DBAPI时被公开，使其与其他所有在此处使用普通位字符串的PostgreSQL
    DBAPI不兼容。在版本2.1中的未来修复将会使所有PG后端规范化此数据类型。拉取请求由Sören Oldag提供。
- en: 'References: [#10532](https://www.sqlalchemy.org/trac/ticket/10532)'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10532](https://www.sqlalchemy.org/trac/ticket/10532)
- en: mysql
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Repaired a new incompatibility in the MySQL “pre-ping” routine where the `False`
    argument passed to `connection.ping()`, which is intended to disable an unwanted
    “automatic reconnect” feature, is being deprecated in MySQL drivers and backends,
    and is producing warnings for some versions of MySQL’s native client drivers.
    It’s removed for mysqlclient, whereas for PyMySQL and drivers based on PyMySQL,
    the parameter will be deprecated and removed at some point, so API introspection
    is used to future proof against these various stages of removal.
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MySQL的“预先ping”例程中的新不兼容性问题，其中传递给`connection.ping()`的`False`参数，用于禁用不需要的“自动重新连接”功能，在MySQL驱动程序和后端中被弃用，并且对于某些版本的MySQL原生客户端驱动程序产生警告。它已被mysqlclient移除，而对于PyMySQL和基于PyMySQL的驱动程序，该参数将在某个时间点被弃用并移除，因此使用API内省来未来保证这些不同移除阶段的兼容性。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.50
- en: 'References: [#10492](https://www.sqlalchemy.org/trac/ticket/10492)'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10492](https://www.sqlalchemy.org/trac/ticket/10492)
- en: mariadb
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mariadb
- en: '**[mariadb] [bug]**'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [bug]**'
- en: Adjusted the MySQL / MariaDB dialects to default a generated column to NULL
    when using MariaDB, if [`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column") was not specified with an explicit `True` or `False`
    value, as MariaDB does not support the “NOT NULL” phrase with a generated column.
    Pull request courtesy Indivar.
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了MySQL / MariaDB方言，当使用MariaDB时，将生成的列默认为NULL，如果未使用明确的`True`或`False`值指定[`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column")，因为MariaDB不支持生成列的“NOT NULL”短语。拉取请求由Indivar提供。
- en: 'References: [#10056](https://www.sqlalchemy.org/trac/ticket/10056)'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10056](https://www.sqlalchemy.org/trac/ticket/10056)
- en: '**[mariadb] [bug] [regression]**'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [bug] [regression]**'
- en: Established a workaround for what seems to be an intrinsic issue across MySQL/MariaDB
    drivers where a RETURNING result for DELETE DML which returns no rows using SQLAlchemy’s
    “empty IN” criteria fails to provide a cursor.description, which then yields result
    that returns no rows, leading to regressions for the ORM that in the 2.0 series
    uses RETURNING for bulk DELETE statements for the “synchronize session” feature.
    To resolve, when the specific case of “no description when RETURNING was given”
    is detected, an “empty result” with a correct cursor description is generated
    and used in place of the non-working cursor.
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 MySQL/MariaDB 驱动程序之间似乎存在的一个固有问题建立了一个解决方法，即使用 SQLAlchemy 的“空 IN”条件删除 DML 的
    RETURNING 结果返回没有行时，不提供 cursor.description，然后产生返回没有行的结果，导致 ORM 中的回归，在 2.0 系列中使用
    RETURNING 用于“同步会话”功能的批量删除语句。为了解决这个问题，当检测到“给出 RETURNING 时没有描述”的特定情况时，将生成一个带有正确游标描述的“空结果”，并用于替代不起作用的游标。
- en: 'References: [#10505](https://www.sqlalchemy.org/trac/ticket/10505)'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10505](https://www.sqlalchemy.org/trac/ticket/10505)
- en: mssql
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [usecase]**'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [用例]**'
- en: Added support for the `aioodbc` driver implemented for SQL Server, which builds
    on top of the pyodbc and general aio* dialect architecture.
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对为 SQL Server 实现的`aioodbc`驱动程序的支持，该驱动程序建立在 pyodbc 和通用 aio* 方言架构之上。
- en: See also
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[aioodbc](../dialects/mssql.html#mssql-aioodbc) - in the SQL Server dialect
    documentation.'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[aioodbc](../dialects/mssql.html#mssql-aioodbc) - 在 SQL Server 方言文档中。'
- en: 'References: [#6521](https://www.sqlalchemy.org/trac/ticket/6521)'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6521](https://www.sqlalchemy.org/trac/ticket/6521)
- en: '**[mssql] [bug] [reflection]**'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [反射]**'
- en: Fixed issue where identity column reflection would fail for a bigint column
    with a large identity start value (more than 18 digits).
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了身份列反射失败的问题，对于具有大于 18 位数的大整数起始值的 bigint 列。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.50
- en: 'References: [#10504](https://www.sqlalchemy.org/trac/ticket/10504)'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10504](https://www.sqlalchemy.org/trac/ticket/10504)
- en: oracle
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue in [`Interval`](../core/type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval") datatype where the Oracle implementation was not
    being used for DDL generation, leading to the `day_precision` and `second_precision`
    parameters to be ignored, despite being supported by this dialect. Pull request
    courtesy Indivar.
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Interval`](../core/type_basics.html#sqlalchemy.types.Interval "sqlalchemy.types.Interval")数据类型中的问题，在
    Oracle 实现未用于 DDL 生成，导致`day_precision`和`second_precision`参数被忽略，尽管此方言支持。感谢 Indivar
    的拉取请求。
- en: 'References: [#10509](https://www.sqlalchemy.org/trac/ticket/10509)'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10509](https://www.sqlalchemy.org/trac/ticket/10509)
- en: '**[oracle] [bug]**'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue where the cx_Oracle dialect claimed to support a lower cx_Oracle
    version (7.x) than was actually supported in practice within the 2.0 series of
    SQLAlchemy. The dialect imports symbols that are only in cx_Oracle 8 or higher,
    so runtime dialect checks as well as setup.cfg requirements have been updated
    to reflect this compatibility.
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cx_Oracle 方言声称支持比实际上在 SQLAlchemy 的 2.0 系列中支持的更低的 cx_Oracle 版本（7.x）的问题。该方言导入仅在
    cx_Oracle 8 或更高版本中才存在的符号，因此运行时方言检查以及 setup.cfg 要求已更新以反映此兼容性。
- en: 'References: [#10470](https://www.sqlalchemy.org/trac/ticket/10470)'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10470](https://www.sqlalchemy.org/trac/ticket/10470)
- en: 2.0.22
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.22
- en: 'Released: October 12, 2023'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023 年 10 月 12 日
- en: orm
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Added method [`Session.get_one()`](../orm/session_api.html#sqlalchemy.orm.Session.get_one
    "sqlalchemy.orm.Session.get_one") that behaves like [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") but raises an exception instead of returning `None`
    if no instance was found with the provided primary key. Pull request courtesy
    of Carlos Sousa.
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了[`Session.get_one()`](../orm/session_api.html#sqlalchemy.orm.Session.get_one
    "sqlalchemy.orm.Session.get_one")方法，其行为类似于[`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get")，但如果未找到具有提供的主键的实例，则引发异常。感谢 Carlos Sousa 的拉取请求。
- en: 'References: [#10202](https://www.sqlalchemy.org/trac/ticket/10202)'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10202](https://www.sqlalchemy.org/trac/ticket/10202)
- en: '**[orm] [usecase]**'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Added an option to permanently close sessions. Set to `False` the new parameter
    [`Session.close_resets_only`](../orm/session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") will prevent a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") from performing any other operation after [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") has been called.
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个选项来永久关闭会话。将新参数[`Session.close_resets_only`](../orm/session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")设置为`False`将阻止[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")在调用[`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")后执行任何其他操作。
- en: Added new method [`Session.reset()`](../orm/session_api.html#sqlalchemy.orm.Session.reset
    "sqlalchemy.orm.Session.reset") that will reset a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to its initial state. This is an alias of [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close"), unless [`Session.close_resets_only`](../orm/session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") is set to `False`.
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法[`Session.reset()`](../orm/session_api.html#sqlalchemy.orm.Session.reset
    "sqlalchemy.orm.Session.reset")，将会将[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")重置为其初始状态。这是[`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")的别名，除非[`Session.close_resets_only`](../orm/session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")设置为`False`。
- en: 'References: [#7787](https://www.sqlalchemy.org/trac/ticket/7787)'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7787](https://www.sqlalchemy.org/trac/ticket/7787)
- en: '**[orm] [bug]**'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a wide range of [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") parameters that were not being transferred when
    using the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") object inside of a pep-593 `Annotated` object,
    including [`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column"), [`mapped_column.deferred`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column"), [`mapped_column.autoincrement`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.autoincrement
    "sqlalchemy.orm.mapped_column"), [`mapped_column.system`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.system
    "sqlalchemy.orm.mapped_column"), [`mapped_column.info`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.info
    "sqlalchemy.orm.mapped_column") etc.
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一系列[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")参数，在使用pep-593 `Annotated`对象内的[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")对象时未被传递，包括[`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column")，[`mapped_column.deferred`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column")，[`mapped_column.autoincrement`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.autoincrement
    "sqlalchemy.orm.mapped_column")，[`mapped_column.system`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.system
    "sqlalchemy.orm.mapped_column")，[`mapped_column.info`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.info
    "sqlalchemy.orm.mapped_column")等。
- en: Additionally, it remains not supported to have dataclass arguments, such as
    [`mapped_column.kw_only`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.kw_only
    "sqlalchemy.orm.mapped_column"), [`mapped_column.default_factory`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.default_factory
    "sqlalchemy.orm.mapped_column") etc. indicated within the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") received by `Annotated`, as this is not supported
    with pep-681 Dataclass Transforms. A warning is now emitted when these parameters
    are used within `Annotated` in this way (and they continue to be ignored).
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，在`Annotated`中接收的[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")中仍不支持有数据类参数，例如[`mapped_column.kw_only`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.kw_only
    "sqlalchemy.orm.mapped_column")，[`mapped_column.default_factory`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.default_factory
    "sqlalchemy.orm.mapped_column")等。当以这种方式在`Annotated`中使用这些参数时，现在会发出警告（并且它们继续被忽略）。
- en: 'References: [#10046](https://www.sqlalchemy.org/trac/ticket/10046), [#10369](https://www.sqlalchemy.org/trac/ticket/10369)'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10046](https://www.sqlalchemy.org/trac/ticket/10046)，[#10369](https://www.sqlalchemy.org/trac/ticket/10369)
- en: '**[orm] [bug]**'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where calling [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") with a new-style [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") query in the ORM, where one or more columns
    yields values that are of “unknown hashability”, typically when using JSON functions
    like `func.json_build_object()` without providing a type, would fail internally
    when the returned values were not actually hashable. The behavior is repaired
    to test the objects as they are received for hashability in this case, raising
    an informative error message if not. Note that for values of “known unhashability”,
    such as when the [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    or [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    types are used directly, an informative error message was already raised.
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在ORM中使用新式[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")查询调用[`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")时出现的问题，其中一个或多个列产生的值是“未知可哈希性”，通常在使用像`func.json_build_object()`这样的JSON函数时没有提供类型时会在返回的值实际上不可哈希时内部失败。在这种情况下，修复了对接收到的对象进行哈希性测试，如果不可哈希，则提出了信息性错误消息。请注意，对于“已知不可哈希性”的值，例如直接使用[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON")或[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")类型时，已经提出了信息性错误消息。
- en: The “hashabiltiy testing” fix here is applied to legacy [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") as well, however in the legacy case, [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") is used for nearly all queries, so no new warning
    is emitted here; the legacy behavior of falling back to using `id()` in this case
    is maintained, with the improvement that an unknown type that turns out to be
    hashable will now be uniqufied, whereas previously it would not.
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此处的“哈希性测试”修复也适用于传统的[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")，但在传统情况下，几乎所有查询都使用[`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")，因此此处不会发出新的警告；在这种情况下，将继续保持回退到在此情况下使用`id()`的传统行为，改进是现在将未知类型（结果证明是可哈希的）进行唯一化，而以前不会。
- en: 'References: [#10459](https://www.sqlalchemy.org/trac/ticket/10459)'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10459](https://www.sqlalchemy.org/trac/ticket/10459)
- en: '**[orm] [bug]**'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in recently revised “insertmanyvalues” feature (likely issue
    [#9618](https://www.sqlalchemy.org/trac/ticket/9618)) where the ORM would inadvertently
    attempt to interpret a non-RETURNING result as one with RETURNING, in the case
    where the `implicit_returning=False` parameter were applied to the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), indicating that “insertmanyvalues” cannot be used
    if the primary key values are not provided.
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了最近修订的“insertmanyvalues”功能中的回归问题（可能是问题[#9618](https://www.sqlalchemy.org/trac/ticket/9618)），在这种情况下，ORM会误将非RETURNING结果解释为具有RETURNING结果，如果应用了`implicit_returning=False`参数到映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，则表示“insertmanyvalues”不能在未提供主键值的情况下使用。
- en: 'References: [#10453](https://www.sqlalchemy.org/trac/ticket/10453)'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10453](https://www.sqlalchemy.org/trac/ticket/10453)
- en: '**[orm] [bug]**'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where ORM [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") would not apply itself to a [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") where the ON clause were given as a plain
    SQL comparison, rather than as a relationship target or similar.
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")不适用于将ON子句给定为普通SQL比较而不是关系目标或类似的[`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join")的bug。
- en: 'References: [#10365](https://www.sqlalchemy.org/trac/ticket/10365)'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10365](https://www.sqlalchemy.org/trac/ticket/10365)
- en: '**[orm] [bug]**'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    symbols like [`WriteOnlyMapped`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped") and [`DynamicMapped`](../orm/large_collections.html#sqlalchemy.orm.DynamicMapped
    "sqlalchemy.orm.DynamicMapped") could not be correctly resolved when referenced
    as an element of a sub-module in the given annotation, assuming string-based or
    “future annotations” style annotations.
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")等符号在作为子模块元素引用时无法正确解析的问题，假设是基于字符串或“未来注释”样式注释。
- en: 'References: [#10412](https://www.sqlalchemy.org/trac/ticket/10412)'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10412](https://www.sqlalchemy.org/trac/ticket/10412)
- en: '**[orm] [bug]**'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue with `__allow_unmapped__` declarative option where types that were
    declared using collection types such as `list[SomeClass]` vs. the typing construct
    `List[SomeClass]` would fail to be recognized correctly. Pull request courtesy
    Pascal Corpet.
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用`__allow_unmapped__`声明选项时的类型问题，其中使用集合类型（如`list[SomeClass]`）声明的类型与使用typing构造`List[SomeClass]`声明的类型无法被正确识别的问题。感谢Pascal
    Corpet提供的拉取请求。
- en: 'References: [#10385](https://www.sqlalchemy.org/trac/ticket/10385)'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10385](https://www.sqlalchemy.org/trac/ticket/10385)
- en: engine
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue within some dialects where the dialect could incorrectly return
    an empty result set for an INSERT statement that does not actually return rows
    at all, due to artfacts from pre- or post-fetching the primary key of the row
    or rows still being present. Affected dialects included asyncpg, all mssql dialects.
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了某些方言中的问题，在这些方言中，对于一个根本不返回任何行的INSERT语句，方言可能会错误地返回一个空结果集，这是由于仍然存在来自预取或后取主键的遗留物。受影响的方言包括asyncpg，所有mssql方言。
- en: '**[engine] [bug]**'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue where under some garbage collection / exception scenarios the connection
    pool’s cleanup routine would raise an error due to an unexpected set of state,
    which can be reproduced under specific conditions.
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在某些垃圾回收/异常场景下，连接池的清理例程会由于意外的状态集而引发错误的问题，这种情况可以在特定条件下重现。
- en: 'References: [#10414](https://www.sqlalchemy.org/trac/ticket/10414)'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10414](https://www.sqlalchemy.org/trac/ticket/10414)
- en: sql
  id: totrans-340
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where referring to a FROM entry in the SET clause of an UPDATE statement
    would not include it in the FROM clause of the UPDATE statement, if that entry
    were nowhere else in the statement; this occurs currently for CTEs that were added
    using `Update.add_cte()` to provide the desired CTE at the top of the statement.
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在UPDATE语句的SET子句中引用FROM条目时，如果该条目在语句中没有其他地方出现，则不会将其包含在UPDATE语句的FROM子句中的问题；目前对于通过`Update.add_cte()`添加的CTE，以在语句顶部提供所需的CTE，会发生这种情况。
- en: 'References: [#10408](https://www.sqlalchemy.org/trac/ticket/10408)'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10408](https://www.sqlalchemy.org/trac/ticket/10408)
- en: '**[sql] [bug]**'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed 2.0 regression where the [`DDL`](../core/ddl.html#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") construct would no longer `__repr__()` due to the removed
    `on` attribute not being accommodated. Pull request courtesy Iuri de Silvio.
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了2.0版本中的回归问题，[`DDL`](../core/ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")构造不再`__repr__()`，因为已删除的`on`属性未被容纳。感谢Iuri
    de Silvio提供的拉取请求。
- en: 'References: [#10443](https://www.sqlalchemy.org/trac/ticket/10443)'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10443](https://www.sqlalchemy.org/trac/ticket/10443)
- en: typing
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue where the argument list passed to [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") was too-restrictively tied to `List` rather
    than `Sequence`. Pull request courtesy Iuri de Silvio.
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了传递给[`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")的参数列表过于严格地与`List`绑定而不是`Sequence`的问题。感谢Iuri
    de Silvio提供的拉取请求。
- en: 'References: [#10451](https://www.sqlalchemy.org/trac/ticket/10451)'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10451](https://www.sqlalchemy.org/trac/ticket/10451)
- en: '**[typing] [bug]**'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Updates to the codebase to support Mypy 1.6.0.
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了代码库以支持Mypy 1.6.0。
- en: asyncio
  id: totrans-353
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [bug]**'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [bug]**'
- en: Fixed the [`AsyncSession.get.execution_options`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.get.params.execution_options
    "sqlalchemy.ext.asyncio.AsyncSession.get") parameter which was not being propagated
    to the underlying [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    and was instead being ignored.
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`AsyncSession.get.execution_options`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.get.params.execution_options
    "sqlalchemy.ext.asyncio.AsyncSession.get") 参数未传播到底层 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 并被忽略的问题。
- en: mariadb
  id: totrans-356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mariadb
- en: '**[mariadb] [bug]**'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [bug]**'
- en: Modified the mariadb-connector driver to pre-load the `cursor.rowcount` value
    for all queries, to suit tools such as Pandas that hardcode to calling `Result.rowcount`
    in this way. SQLAlchemy normally pre-loads `cursor.rowcount` only for UPDATE/DELETE
    statements and otherwise passes through to the DBAPI where it can return -1 if
    no value is available. However, mariadb-connector does not support invoking `cursor.rowcount`
    after the cursor itself is closed, raising an error instead. Generic test support
    has been added to ensure all backends support the allowing `Result.rowcount` to
    succceed (that is, returning an integer value with -1 for “not available”) after
    the result is closed.
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 mariadb-connector 驱动程序，预加载了所有查询的 `cursor.rowcount` 值，以适应像 Pandas 这样硬编码调用
    `Result.rowcount` 的工具。SQLAlchemy 通常仅为 UPDATE/DELETE 语句预加载 `cursor.rowcount`，否则传递给
    DBAPI，在那里如果没有值可用，则可以返回 -1。但是，mariadb-connector 不支持在关闭游标本身后调用 `cursor.rowcount`，而是引发错误。已添加通用测试支持，以确保所有后端支持在结果关闭后允许
    `Result.rowcount` 成功（即返回一个整数值，-1 表示“不可用”）。
- en: 'References: [#10396](https://www.sqlalchemy.org/trac/ticket/10396)'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10396](https://www.sqlalchemy.org/trac/ticket/10396)
- en: '**[mariadb] [bug]**'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [bug]**'
- en: Additional fixes for the mariadb-connector dialect to support UUID data values
    in the result in INSERT..RETURNING statements.
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 mariadb-connector 方言添加了额外的修复，以支持 INSERT..RETURNING 语句中结果中的 UUID 数据值。
- en: mssql
  id: totrans-362
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where the rule that prevents ORDER BY from emitting within subqueries
    on SQL Server was not being disabled in the case where the `select.fetch()` method
    were used to limit rows in conjunction with WITH TIES or PERCENT, preventing valid
    subqueries with TOP / ORDER BY from being used.
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即在 SQL Server 中阻止 ORDER BY 在子查询中发出的规则没有在使用 `select.fetch()` 方法限制行数与
    WITH TIES 或 PERCENT 结合时被禁用，导致无法使用带有 TOP / ORDER BY 的有效子查询。
- en: 'References: [#10458](https://www.sqlalchemy.org/trac/ticket/10458)'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10458](https://www.sqlalchemy.org/trac/ticket/10458)
- en: 2.0.21
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.21
- en: 'Released: September 18, 2023'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年9月18日
- en: orm
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Adjusted the ORM’s interpretation of the “target” entity used within [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") to not interfere with the target “from” object
    passed to the statement, such as when passing an ORM-mapped [`aliased`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct that should be maintained within a phrase
    like “UPDATE FROM”. Cases like ORM session synchonize using “SELECT” statements
    such as with MySQL/ MariaDB will still have issues with UPDATE/DELETE of this
    form so it’s best to disable synchonize_session when using DML statements of this
    type.
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 ORM 对“target”实体在 [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") 和 [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") 中的解释，以不干扰传递给语句的目标“from”对象，例如在传递 ORM 映射的 [`aliased`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 构造时应在“UPDATE FROM”等短语中保留。像使用“SELECT”语句进行 ORM 会话同步的情况，如与
    MySQL/MariaDB 一起使用 UPDATE/DELETE 这种形式仍然会有问题，因此最好在使用此类 DML 语句时禁用 synchonize_session。
- en: 'References: [#10279](https://www.sqlalchemy.org/trac/ticket/10279)'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10279](https://www.sqlalchemy.org/trac/ticket/10279)
- en: '**[orm] [bug]**'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added new capability to the [`selectin_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.selectin_polymorphic
    "sqlalchemy.orm.selectin_polymorphic") loader option which allows other loader
    options to be bundled as siblings, referring to one of its subclasses, within
    the sub-options of parent loader option. Previously, this pattern was only supported
    if the [`selectin_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.selectin_polymorphic
    "sqlalchemy.orm.selectin_polymorphic") were at the top level of the options for
    the query. See new documentation section for example.
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`selectin_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.selectin_polymorphic
    "sqlalchemy.orm.selectin_polymorphic") 加入了新的功能，允许其他加载器选项被捆绑为同级，并且引用其子类中的一个，位于父加载器选项的子选项中。以前，只有当
    [`selectin_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.selectin_polymorphic
    "sqlalchemy.orm.selectin_polymorphic") 处于查询选项的顶层时才支持此模式。请参阅新文档部分以获取示例。
- en: As part of this change, improved the behavior of the [`Load.selectin_polymorphic()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.selectin_polymorphic
    "sqlalchemy.orm.Load.selectin_polymorphic") method / loader strategy so that the
    subclass load does not load most already-loaded columns from the parent table,
    when the option is used against a class that is already being relationship-loaded.
    Previously, the logic to load only the subclass columns worked only for a top
    level class load.
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这个改变的一部分，改进了[`Load.selectin_polymorphic()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.selectin_polymorphic
    "sqlalchemy.orm.Load.selectin_polymorphic") 方法/加载策略的行为，因此子类加载不会加载来自父表的大多数已加载列，当选项用于已经进行关系加载的类时。以前，只有在顶级类加载时才有效的加载子类列的逻辑。
- en: See also
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 也请参阅
- en: '[Applying loader options when selectin_polymorphic is itself a sub-option](../orm/queryguide/inheritance.html#polymorphic-selectin-as-loader-option-target-plus-opts)'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[当 `selectin_polymorphic` 本身是子选项时应用加载器选项](../orm/queryguide/inheritance.html#polymorphic-selectin-as-loader-option-target-plus-opts)'
- en: 'References: [#10348](https://www.sqlalchemy.org/trac/ticket/10348)'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10348](https://www.sqlalchemy.org/trac/ticket/10348)
- en: engine
  id: totrans-378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed a series of reflection issues affecting the PostgreSQL, MySQL/MariaDB,
    and SQLite dialects when reflecting foreign key constraints where the target column
    contained parenthesis in one or both of the table name or column name.
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一系列反射问题，影响到 PostgreSQL、MySQL/MariaDB 和 SQLite 方言，在反射外键约束时，目标列包含一个或两个表名或列名中的括号时。
- en: 'References: [#10275](https://www.sqlalchemy.org/trac/ticket/10275)'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10275](https://www.sqlalchemy.org/trac/ticket/10275)
- en: sql
  id: totrans-382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Adjusted the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    datatype to accept an argument of `None` for the [`Enum.length`](../core/type_basics.html#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum") parameter, resulting in a VARCHAR or other textual type
    with no length in the resulting DDL. This allows for new elements of any length
    to be added to the type after it exists in the schema. Pull request courtesy Eugene
    Toder.
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    数据类型，接受 `None` 参数作为 [`Enum.length`](../core/type_basics.html#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum") 参数，导致在结果 DDL 中生成没有长度的 VARCHAR 或其他文本类型。这允许在模式中存在后，为该类型添加任何长度的新元素。感谢
    Eugene Toder 提交的拉取请求。
- en: 'References: [#10269](https://www.sqlalchemy.org/trac/ticket/10269)'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10269](https://www.sqlalchemy.org/trac/ticket/10269)
- en: '**[sql] [usecase]**'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Added new generic SQL function [`aggregate_strings`](../core/functions.html#sqlalchemy.sql.functions.aggregate_strings
    "sqlalchemy.sql.functions.aggregate_strings"), which accepts a SQL expression
    and a decimeter, concatenating strings on multiple rows into a single aggregate
    value. The function is compiled on a per-backend basis, into functions such as
    `group_concat(),` `string_agg()`, or `LISTAGG()`. Pull request courtesy Joshua
    Morris.
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的通用 SQL 函数[`aggregate_strings`](../core/functions.html#sqlalchemy.sql.functions.aggregate_strings
    "sqlalchemy.sql.functions.aggregate_strings")，它接受一个 SQL 表达式和一个分隔符，将多行字符串连接成单个聚合值。该函数根据后端编译成函数，例如`group_concat()`、`string_agg()`或`LISTAGG()`。感谢
    Joshua Morris 提交的拉取请求。
- en: 'References: [#9873](https://www.sqlalchemy.org/trac/ticket/9873)'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9873](https://www.sqlalchemy.org/trac/ticket/9873)
- en: '**[sql] [bug]**'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Adjusted the operator precedence for the string concatenation operator to be
    equal to that of string matching operators, such as [`ColumnElement.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.like
    "sqlalchemy.sql.expression.ColumnElement.like"), [`ColumnElement.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.regexp_match
    "sqlalchemy.sql.expression.ColumnElement.regexp_match"), [`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match"), etc., as well as plain `==`
    which has the same precedence as string comparison operators, so that parenthesis
    will be applied to a string concatenation expression that follows a string match
    operator. This provides for backends such as PostgreSQL where the “regexp match”
    operator is apparently of higher precedence than the string concatenation operator.
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了字符串连接运算符的运算优先级，使其与字符串匹配运算符（如[`ColumnElement.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.like
    "sqlalchemy.sql.expression.ColumnElement.like")，[`ColumnElement.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.regexp_match
    "sqlalchemy.sql.expression.ColumnElement.regexp_match")，[`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match")等）以及纯粹的`==`相等，该运算符与字符串比较运算符具有相同的优先级，因此将在跟随字符串匹配运算符的字符串连接表达式中应用括号。这为后端（如PostgreSQL）提供了便利，其中“regexp
    match”运算符显然比字符串连接运算符的优先级高。
- en: 'References: [#9610](https://www.sqlalchemy.org/trac/ticket/9610)'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9610](https://www.sqlalchemy.org/trac/ticket/9610)
- en: '**[sql] [bug]**'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Qualified the use of `hashlib.md5()` within the DDL compiler, which is used
    to generate deterministic four-character suffixes for long index and constraint
    names in DDL statements, to include the Python 3.9+ `usedforsecurity=False` parameter
    so that Python interpreters built for restricted environments such as FIPS do
    not consider this call to be related to security concerns.
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 限定了DDL编译器中`hashlib.md5()`的使用，该函数用于在DDL语句中为长索引和约束名称生成确定性的四个字符后缀，以包含Python 3.9+中的`usedforsecurity=False`参数，以便于Python解释器构建用于受限环境（如FIPS）时，不将此调用视为与安全问题相关联。
- en: 'References: [#10342](https://www.sqlalchemy.org/trac/ticket/10342)'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10342](https://www.sqlalchemy.org/trac/ticket/10342)
- en: '**[sql] [bug]**'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct will now automatically create a proxy (i.e. a copy) of a [`column`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") if the column were already associated with
    an existing FROM clause. This allows that an expression like `values_obj.c.colname`
    will produce the correct FROM clause even in the case that `colname` was passed
    as a [`column`](../core/sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    that was already used with a previous [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") or other table construct. Originally this
    was considered to be a candidate for an error condition, however it’s likely this
    pattern is already in widespread use so it’s now added to support.
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")构造现在将自动为与现有FROM子句关联的[`column`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")创建代理（即副本）。这使得像`values_obj.c.colname`这样的表达式将在`colname`作为已与先前的[`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values")或其他表构造一起使用的[`column`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")的情况下生成正确的FROM子句。最初认为这可能是一个错误条件的候选项，但很可能这种模式已经被广泛使用，所以现在添加以支持。'
- en: 'References: [#10280](https://www.sqlalchemy.org/trac/ticket/10280)'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10280](https://www.sqlalchemy.org/trac/ticket/10280)
- en: schema
  id: totrans-398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Modified the rendering of the Oracle only [`Identity.order`](../core/defaults.html#sqlalchemy.schema.Identity.params.order
    "sqlalchemy.schema.Identity") parameter that’s part of both [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") and [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") to only take place for the Oracle backend, and not
    other backends such as that of PostgreSQL. A future release will rename the [`Identity.order`](../core/defaults.html#sqlalchemy.schema.Identity.params.order
    "sqlalchemy.schema.Identity"), [`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence") and [`Identity.on_null`](../core/defaults.html#sqlalchemy.schema.Identity.params.on_null
    "sqlalchemy.schema.Identity") parameters to Oracle-specific names, deprecating
    the old names, these parameters only apply to Oracle.
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了仅适用于 Oracle 后端的 [`Identity.order`](../core/defaults.html#sqlalchemy.schema.Identity.params.order
    "sqlalchemy.schema.Identity") 参数的呈现方式，该参数是 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 和 [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") 的一部分，并且不适用于其他后端，例如 PostgreSQL 的后端。未来版本将重命名 [`Identity.order`](../core/defaults.html#sqlalchemy.schema.Identity.params.order
    "sqlalchemy.schema.Identity")、[`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence") 和 [`Identity.on_null`](../core/defaults.html#sqlalchemy.schema.Identity.params.on_null
    "sqlalchemy.schema.Identity") 参数为 Oracle 特定名称，并弃用旧名称，这些参数仅适用于 Oracle。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.50
- en: 'References: [#10207](https://www.sqlalchemy.org/trac/ticket/10207)'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10207](https://www.sqlalchemy.org/trac/ticket/10207)
- en: typing
  id: totrans-403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入
- en: '**[typing] [usecase]**'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [用例]**'
- en: Made the contained type for [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") covariant; this is to allow greater flexibility for end-user
    typing scenarios, such as the use of protocols to represent particular mapped
    class structures that are passed to other functions. As part of this change, the
    contained type was also made covariant for dependent and related types such as
    `SQLORMOperations`, [`WriteOnlyMapped`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped"), and [`SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression"). Pull request courtesy Roméo
    Després.
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    的包含类型协变；这是为了允许更大的灵活性，以适应端用户类型化场景，例如使用协议表示传递给其他函数的特定映射类结构。作为这个改变的一部分，还使依赖和相关类型（如
    `SQLORMOperations`、[`WriteOnlyMapped`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped") 和 [`SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression")）的包含类型也是协变的。感谢 Roméo Després 提交的拉取请求。
- en: 'References: [#10288](https://www.sqlalchemy.org/trac/ticket/10288)'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10288](https://www.sqlalchemy.org/trac/ticket/10288)
- en: '**[typing] [bug]**'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Fixed regression introduced in 2.0.20 via [#9600](https://www.sqlalchemy.org/trac/ticket/9600)
    fix which attempted to add more formal typing to [`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData"). This change prevented basic naming convention dictionaries
    from passing typing and has been adjusted so that a plain dictionary of strings
    for keys as well as dictionaries that use constraint types as keys or a mix of
    both, are again accepted.
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 2.0.20 中引入的回归问题，通过 [#9600](https://www.sqlalchemy.org/trac/ticket/9600)
    修复，尝试为 [`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") 添加更正式的类型。这个改变阻止了基本命名约定字典通过类型检查，并且已经进行了调整，以便再次接受字符串键的普通字典以及使用约束类型作为键或两者混合使用的字典。
- en: As part of this change, lesser used forms of the naming convention dictionary
    are also typed, including that it currently allows for `Constraint` type objects
    as keys as well.
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这个改变的一部分，还对命名约定字典的较少使用的形式进行了类型化，包括它目前允许 `Constraint` 类型对象作为键。
- en: 'References: [#10264](https://www.sqlalchemy.org/trac/ticket/10264), [#9284](https://www.sqlalchemy.org/trac/ticket/9284)'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10264](https://www.sqlalchemy.org/trac/ticket/10264)，[#9284](https://www.sqlalchemy.org/trac/ticket/9284)
- en: '**[typing] [bug]**'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Fixed the type annotation for `__class_getitem__()` as applied to the `Visitable`
    class at the base of expression constructs to accept `Any` for a key, rather than
    `str`, which helps with some IDEs such as PyCharm when attempting to write typing
    annotations for SQL constructs which include generic selectors. Pull request courtesy
    Jordan Macdonald.
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了应用于表达式构造的基础`Visitable`类的`__class_getitem__()`方法的类型注释，以接受`Any`作为键，而不是`str`，这有助于一些IDE（例如PyCharm）在尝试为包含通用选择器的SQL构造编写类型注释时。感谢Jordan
    Macdonald的拉取请求。
- en: 'References: [#9878](https://www.sqlalchemy.org/trac/ticket/9878)'
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9878](https://www.sqlalchemy.org/trac/ticket/9878)
- en: '**[typing] [bug]**'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Repaired the core “SQL element” class `SQLCoreOperations` to support the `__hash__()`
    method from a typing perspective, as objects like [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") and ORM [`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") are hashable and are used as dictionary
    keys in the public API for the [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") constructs. Previously, type checkers were
    not aware the root SQL element was hashable.
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了核心“SQL元素”类`SQLCoreOperations`的类型问题，以支持从类型的角度来看`__hash__()`方法，因为对象（如[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")和ORM [`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute")）是可散列的，并且在[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")和[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造的公共API中用作字典键。先前，类型检查器不知道根SQL元素是可散列的。
- en: 'References: [#10353](https://www.sqlalchemy.org/trac/ticket/10353)'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10353](https://www.sqlalchemy.org/trac/ticket/10353)
- en: '**[typing] [bug]**'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue with `Existing.select_from()` that prevented its use with
    ORM classes.
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`Existing.select_from()`的类型问题，该问题阻止了它与ORM类的使用。
- en: 'References: [#10337](https://www.sqlalchemy.org/trac/ticket/10337)'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10337](https://www.sqlalchemy.org/trac/ticket/10337)
- en: '**[typing] [bug]**'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Update type annotations for ORM loading options, restricting them to accept
    only “*” instead of any string for string arguments. Pull request courtesy Janek
    Nouvertné.
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新ORM加载选项的类型注释，将其限制为仅接受“*”而不是任何字符串作为字符串参数。感谢Janek Nouvertné的拉取请求。
- en: 'References: [#10131](https://www.sqlalchemy.org/trac/ticket/10131)'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10131](https://www.sqlalchemy.org/trac/ticket/10131)
- en: postgresql
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression which appeared in 2.0 due to [#8491](https://www.sqlalchemy.org/trac/ticket/8491)
    where the revised “ping” used for PostgreSQL dialects when the [`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") parameter is in use would interfere with the use of
    asyncpg with PGBouncer “transaction” mode, as the multiple PostgreSQL commands
    emitted by asnycpg could be broken out among multiple connections leading to errors,
    due to the lack of any transaction around this newly revised “ping”. The ping
    is now invoked within a transaction, in the same way that is implicit with all
    other backends that are based on the pep-249 DBAPI; this guarantees that the series
    of PG commands sent by asyncpg for this command are invoked on the same backend
    connection without it jumping to a different connection mid-command. The transaction
    is not used if the asyncpg dialect is used in “AUTOCOMMIT” mode, which remains
    incompatible with pgbouncer transaction mode.
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在2.0版本中出现的回归问题，该问题由于[#8491](https://www.sqlalchemy.org/trac/ticket/8491)而引起，其中当使用[`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine")参数时，用于PostgreSQL方言的修订的“ping”会干扰asyncpg与PGBouncer“transaction”模式的使用，因为asnycpg发出的多个PostgreSQL命令可能会被分解到多个连接中导致错误，由于这个新修订的“ping”周围没有任何事务。现在在事务内调用ping，与所有其他基于pep-249
    DBAPI的其他后端隐式使用的方式相同；这确保了为此命令发送的一系列PG命令在同一个后端连接上调用，而不会在命令中途跳转到不同的连接。如果使用asyncpg方言处于“AUTOCOMMIT”模式，则不使用事务，这仍然与pgbouncer事务模式不兼容。
- en: 'References: [#10226](https://www.sqlalchemy.org/trac/ticket/10226)'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10226](https://www.sqlalchemy.org/trac/ticket/10226)
- en: misc
  id: totrans-427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [setup]**'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [setup]**'
- en: Fixed very old issue where the full extent of SQLAlchemy modules, including
    `sqlalchemy.testing.fixtures`, could not be imported outside of a pytest run.
    This suits inspection utilities such as `pkgutil` that attempt to import all installed
    modules in all packages.
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个很久以前的问题，在 pytest 运行之外无法导入 SQLAlchemy 模块的全部内容，包括`sqlalchemy.testing.fixtures`。这适用于诸如
    `pkgutil` 等尝试导入所有包中所有安装的模块的检查工具。
- en: 'References: [#10321](https://www.sqlalchemy.org/trac/ticket/10321)'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10321](https://www.sqlalchemy.org/trac/ticket/10321)
- en: 2.0.20
  id: totrans-431
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.20
- en: 'Released: August 15, 2023'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023 年 8 月 15 日
- en: orm
  id: totrans-433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Implemented the “RETURNING ‘*’” use case for ORM enabled DML statements. This
    will render in as many cases as possible and return the unfiltered result set,
    however is not supported for multi-parameter “ORM bulk INSERT” statements that
    have specific column rendering requirements.
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了对启用 ORM 的 DML 语句的“RETURNING '*'”用例。这将尽可能地呈现，并返回未经过滤的结果集，但不支持具有特定列渲染要求的多参数“ORM
    批量 INSERT”语句。
- en: 'References: [#10192](https://www.sqlalchemy.org/trac/ticket/10192)'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10192](https://www.sqlalchemy.org/trac/ticket/10192)
- en: '**[orm] [bug]**'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed fundamental issue which prevented some forms of ORM “annotations” from
    taking place for subqueries which made use of [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") against a relationship target. These
    annotations are used whenever a subquery is used in special situations such as
    within [`PropComparator.and_()`](../orm/internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") and other ORM-specific scenarios.
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了一个基本问题，阻止了某些形式的 ORM “注释” 对使用 [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") 进行关系目标的连接的子查询进行。在诸如 [`PropComparator.and_()`](../orm/internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") 和其他 ORM 特定情况下使用这些注释。  '
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.50
- en: 'References: [#10223](https://www.sqlalchemy.org/trac/ticket/10223)'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10223](https://www.sqlalchemy.org/trac/ticket/10223)
- en: '**[orm] [bug]**'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the ORM’s generation of a SELECT from a joined inheritance
    model with same-named columns in superclass and subclass would somehow not send
    the correct list of column names to the [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") construct, when the RECURSIVE column list were
    generated.
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即 ORM 在具有相同名称列的超类和子类的连接继承模型中生成 SELECT 时，某种方式未能将正确的列名列表发送到 [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") 构造函数，当生成 RECURSIVE 列表时。
- en: 'References: [#10169](https://www.sqlalchemy.org/trac/ticket/10169)'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10169](https://www.sqlalchemy.org/trac/ticket/10169)
- en: '**[orm] [bug]**'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed fairly major issue where execution options passed to [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"), as well as execution options local to the ORM
    executed statement itself, would not be propagated along to eager loaders such
    as that of [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload"), [`immediateload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload
    "sqlalchemy.orm.immediateload"), and [`sqlalchemy.orm.subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload"), making it impossible to do things such as disabling
    the cache for a single statement or using `schema_translate_map` for a single
    statement, as well as the use of user-custom execution options. A change has been
    made where **all** user-facing execution options present for [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") will be propagated along to additional loaders.
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个相当重要的问题，即传递给 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 的执行选项以及本地于 ORM 执行的语句本身的执行选项不会传播到 eager loaders，如
    [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")、[`immediateload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload
    "sqlalchemy.orm.immediateload") 和 [`sqlalchemy.orm.subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload")，使得不可能禁用单个语句的缓存或使用 `schema_translate_map` 用于单个语句，以及使用用户自定义执行选项。已做出更改，使得所有针对
    [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    的面向用户的执行选项都将传播到其他加载器。
- en: 'As part of this change, the warning for “excessively deep” eager loaders leading
    to caching being disabled can be silenced on a per-statement basis by sending
    `execution_options={"compiled_cache": None}` to [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"), which will disable caching for the full series
    of statements within that scope.'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '作为此更改的一部分，可以通过将 `execution_options={"compiled_cache": None}` 发送到[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 来在每个语句范围内为“过度深入”的急加载器警告消除缓存被禁用，这将禁用该范围内所有语句的缓存。'
- en: 'References: [#10231](https://www.sqlalchemy.org/trac/ticket/10231)'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10231](https://www.sqlalchemy.org/trac/ticket/10231)
- en: '**[orm] [bug]**'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where internal cloning used by the ORM for expressions like `Comparator.any()`
    to produce correlated EXISTS constructs would interfere with the “cartesian product
    warning” feature of the SQL compiler, leading the SQL compiler to warn when all
    elements of the statement were correctly joined.
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 在像 `Comparator.any()` 这样的表达式中使用的内部克隆，以生成相关 EXISTS 构造会干扰 SQL 编译器的“笛卡尔积警告”功能，导致
    SQL 编译器在所有语句元素都正确连接时发出警告。
- en: 'References: [#10124](https://www.sqlalchemy.org/trac/ticket/10124)'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10124](https://www.sqlalchemy.org/trac/ticket/10124)
- en: '**[orm] [bug]**'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the `lazy="immediateload"` loader strategy would place an
    internal loading token into the ORM mapped attribute under circumstances where
    the load should not occur, such as in a recursive self-referential load. As part
    of this change, the `lazy="immediateload"` strategy now honors the [`relationship.join_depth`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.join_depth
    "sqlalchemy.orm.relationship") parameter for self-referential eager loads in the
    same way as that of other eager loaders, where leaving it unset or set at zero
    will lead to a self-referential immediateload not occurring, setting it to a value
    of one or greater will immediateload up until that given depth.
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 `lazy="immediateload"` 加载策略在某些情况下会将内部加载令牌放置到 ORM 映射属性中的问题，例如在递归自引用加载中不应发生加载的情况。作为此更改的一部分，`lazy="immediateload"`
    策略现在以与其他急加载器相同的方式尊重 [`relationship.join_depth`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.join_depth
    "sqlalchemy.orm.relationship") 参数进行自引用急加载，其中将其设置为未设置或设置为零将导致自引用的即时加载不会发生，将其设置为一个或更大的值将即时加载直到给定深度。
- en: 'References: [#10139](https://www.sqlalchemy.org/trac/ticket/10139)'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10139](https://www.sqlalchemy.org/trac/ticket/10139)
- en: '**[orm] [bug]**'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where dictionary-based collections such as [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict") did not fully pickle/unpickle correctly,
    leading to issues when attempting to mutate such a collection after unpickling.
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了诸如[`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")之类的基于字典的集合在完全正确地 pickle/unpickle 时未能完全 pickle/unpickle
    的问题，导致在 unpickling 后尝试变异此类集合时出现问题。
- en: 'References: [#10175](https://www.sqlalchemy.org/trac/ticket/10175)'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10175](https://www.sqlalchemy.org/trac/ticket/10175)
- en: '**[orm] [bug]**'
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where chaining [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") or other wildcard use of [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") from another eager loader using a [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") against a joined inheritance subclass would fail to
    take effect for columns local to the superclass.
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从另一个急加载器使用 [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 对加入的继承子类进行列局部操作时，链式调用 [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") 或其他通配符使用 [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") 会失败的问题。
- en: 'References: [#10125](https://www.sqlalchemy.org/trac/ticket/10125)'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10125](https://www.sqlalchemy.org/trac/ticket/10125)
- en: '**[orm] [bug]**'
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where an ORM-enabled [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct would not render any CTEs added
    only via the [`Select.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.Select.add_cte
    "sqlalchemy.sql.expression.Select.add_cte") method that were not otherwise referenced
    in the statement.
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即启用 ORM 的[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造不会渲染任何仅通过[`Select.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.Select.add_cte
    "sqlalchemy.sql.expression.Select.add_cte") 方法添加的 CTE，这些 CTE 在语句中没有被引用。
- en: 'References: [#10167](https://www.sqlalchemy.org/trac/ticket/10167)'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10167](https://www.sqlalchemy.org/trac/ticket/10167)
- en: examples
  id: totrans-463
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '**[examples] [bug]**'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: The dogpile_caching examples have been updated for 2.0 style queries. Within
    the “caching query” logic itself there is one conditional added to differentiate
    between `Query` and `select()` when performing an invalidation operation.
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: dogpile_caching 例子已更新为 2.0 风格的查询。在“缓存查询”逻辑中，添加了一个条件来区分 `Query` 和 `select()`
    在执行无效操作时的情况。
- en: engine
  id: totrans-466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed critical issue where setting [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") to `AUTOCOMMIT` (as opposed to using the [`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method) would fail to restore “autocommit”
    to a pooled connection if an alternate isolation level were temporarily selected
    using [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options").
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个关键问题，即将 [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") 设置为 `AUTOCOMMIT`（而不是使用 [`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") 方法），如果临时选择了替代隔离级别，那么会在使用 [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") 时，无法将“自动提交”恢复到池连接中。
- en: 'References: [#10147](https://www.sqlalchemy.org/trac/ticket/10147)'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10147](https://www.sqlalchemy.org/trac/ticket/10147)
- en: sql
  id: totrans-470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where unpickling of a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") or other [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") would fail to restore the correct “comparator”
    object, which is used to generate SQL expressions specific to the type object.
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反序列化 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    或其他 [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 时无法恢复正确“比较器”对象的问题，该对象用于生成特定于类型对象的 SQL
    表达式。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被 **回溯** 到了：1.4.50
- en: 'References: [#10213](https://www.sqlalchemy.org/trac/ticket/10213)'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10213](https://www.sqlalchemy.org/trac/ticket/10213)
- en: typing
  id: totrans-475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型
- en: '**[typing] [usecase]**'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [usecase]**'
- en: Added new typing only utility functions [`Nullable()`](../core/sqlelement.html#sqlalchemy.Nullable
    "sqlalchemy.Nullable") and [`NotNullable()`](../core/sqlelement.html#sqlalchemy.NotNullable
    "sqlalchemy.NotNullable") to type a column or ORM class as, respectively, nullable
    or not nullable. These function are no-op at runtime, returning the input unchanged.
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的类型仅实用函数 [`Nullable()`](../core/sqlelement.html#sqlalchemy.Nullable "sqlalchemy.Nullable")
    和 [`NotNullable()`](../core/sqlelement.html#sqlalchemy.NotNullable "sqlalchemy.NotNullable")
    以分别将列或 ORM 类型定义为可为空或不可为空。这些函数在运行时无操作，返回未更改的输入。
- en: 'References: [#10173](https://www.sqlalchemy.org/trac/ticket/10173)'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10173](https://www.sqlalchemy.org/trac/ticket/10173)
- en: '**[typing] [bug]**'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: 'Typing improvements:'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型改进：
- en: '[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    is returned for some forms of [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") where DML without RETURNING is used'
  id: totrans-481
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对一些没有返回的 DML 使用 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 时，返回 [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")
- en: fixed type for [`Query.with_for_update.of`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update.params.of
    "sqlalchemy.orm.Query.with_for_update") parameter within [`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")
  id: totrans-482
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了 [`Query.with_for_update.of`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update.params.of
    "sqlalchemy.orm.Query.with_for_update") 参数在 [`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update") 中的类型错误
- en: improvements to `_DMLColumnArgument` type used by some DML methods to pass column
    expressions
  id: totrans-483
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对一些 DML 方法使用的 `_DMLColumnArgument` 类型进行改进，以传递列表达式
- en: Add overload to [`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal") so that it is inferred that the return type
    is `BindParameter[NullType]` where [`literal.type_`](../core/sqlelement.html#sqlalchemy.sql.expression.literal.params.type_
    "sqlalchemy.sql.expression.literal") param is None
  id: totrans-484
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了对[`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal")的重载，因此推断返回类型为`BindParameter[NullType]`，其中[`literal.type_`](../core/sqlelement.html#sqlalchemy.sql.expression.literal.params.type_
    "sqlalchemy.sql.expression.literal")参数为None
- en: Add overloads to [`ColumnElement.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.op
    "sqlalchemy.sql.expression.ColumnElement.op") so that the inferred type when [`ColumnElement.op.return_type`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.op.params.return_type
    "sqlalchemy.sql.expression.ColumnElement.op") is not provided is `Callable[[Any],
    BinaryExpression[Any]]`
  id: totrans-485
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为[`ColumnElement.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.op
    "sqlalchemy.sql.expression.ColumnElement.op")添加重载，以便在未提供[`ColumnElement.op.return_type`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.op.params.return_type
    "sqlalchemy.sql.expression.ColumnElement.op")时推断类型为`Callable[[Any], BinaryExpression[Any]]`
- en: Add missing overload to `ColumnElement.__add__()`
  id: totrans-486
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了对`ColumnElement.__add__()`的丢失重载
- en: Pull request courtesy Mehdi Gmira.
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 拉取请求由Mehdi Gmira提供。
- en: 'References: [#9185](https://www.sqlalchemy.org/trac/ticket/9185)'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9185](https://www.sqlalchemy.org/trac/ticket/9185)
- en: '**[typing] [bug]**'
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [错误]**'
- en: Fixed issue in [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    and [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") methods such as [`Session.connection()`](../orm/session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") where the [`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection") parameter were hardcoded to an internal type
    that is not user-facing.
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")和[`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")等方法中的问题，例如[`Session.connection()`](../orm/session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection")在[`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection")参数硬编码为不面向用户的内部类型的情况。
- en: 'References: [#10182](https://www.sqlalchemy.org/trac/ticket/10182)'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10182](https://www.sqlalchemy.org/trac/ticket/10182)
- en: asyncio
  id: totrans-492
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [usecase]**'
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [用例]**'
- en: Added new methods [`AsyncConnection.aclose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.aclose
    "sqlalchemy.ext.asyncio.AsyncConnection.aclose") as a synonym for [`AsyncConnection.close()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.close
    "sqlalchemy.ext.asyncio.AsyncConnection.close") and [`AsyncSession.aclose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.aclose
    "sqlalchemy.ext.asyncio.AsyncSession.aclose") as a synonym for [`AsyncSession.close()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close") to the [`AsyncConnection`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") and [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects, to provide compatibility with
    Python standard library `@contextlib.aclosing` construct. Pull request courtesy
    Grigoriev Semyon.
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法[`AsyncConnection.aclose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.aclose
    "sqlalchemy.ext.asyncio.AsyncConnection.aclose")作为[`AsyncConnection.close()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.close
    "sqlalchemy.ext.asyncio.AsyncConnection.close")的同义词和[`AsyncSession.aclose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.aclose
    "sqlalchemy.ext.asyncio.AsyncSession.aclose")作为[`AsyncSession.close()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close")的同义词，以提供与Python标准库`@contextlib.aclosing`构造的兼容性。拉取请求由Grigoriev
    Semyon提供。
- en: 'References: [#9698](https://www.sqlalchemy.org/trac/ticket/9698)'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9698](https://www.sqlalchemy.org/trac/ticket/9698)
- en: mysql
  id: totrans-496
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [用例]**'
- en: Updated aiomysql dialect since the dialect appears to be maintained again. Re-added
    to the ci testing using version 0.2.0.
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了aiomysql方言，因为该方言似乎再次得到维护。重新添加到使用版本0.2.0进行的ci测试。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也被**回溯**到：1.4.50
- en: 2.0.19
  id: totrans-500
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.19
- en: 'Released: July 15, 2023'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年7月15日
- en: orm
  id: totrans-502
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue where setting a relationship collection directly, where an object
    in the new collection were already present, would not trigger a cascade event
    for that object, leading to it not being added to the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") if it were not already present. This is similar in nature
    to [#6471](https://www.sqlalchemy.org/trac/ticket/6471) and is a more apparent
    issue due to the removal of `cascade_backrefs` in the 2.0 series. The [`AttributeEvents.append_wo_mutation()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.append_wo_mutation
    "sqlalchemy.orm.AttributeEvents.append_wo_mutation") event added as part of [#6471](https://www.sqlalchemy.org/trac/ticket/6471)
    is now also emitted for existing members of a collection that are present in a
    bulk set of that same collection.
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了直接设置关系集合的问题，其中新集合中的对象已经存在时，不会触发该对象的级联事件，导致如果该对象不存在，则不会被添加到[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。这与[#6471](https://www.sqlalchemy.org/trac/ticket/6471)类似，并且由于在2.0系列中删除了`cascade_backrefs`，这个问题更加明显。作为[#6471](https://www.sqlalchemy.org/trac/ticket/6471)的一部分添加的[`AttributeEvents.append_wo_mutation()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.append_wo_mutation
    "sqlalchemy.orm.AttributeEvents.append_wo_mutation")事件现在也会对同一集合的现有成员发出信号，这些成员在该集合的批量设置中存在。
- en: 'References: [#10089](https://www.sqlalchemy.org/trac/ticket/10089)'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10089](https://www.sqlalchemy.org/trac/ticket/10089)
- en: '**[orm] [bug]**'
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where objects that were associated with an unloaded collection via
    backref, but were not merged into the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") due to the removal of `cascade_backrefs` in the 2.0
    series, would not emit a warning that these objects were not being included in
    a flush, even though they were pending members of the collection; in other such
    cases, a warning is emitted when a collection being flushed contains non-attached
    objects which will be essentially discarded. The addition of the warning for backref-pending
    collection members establishes greater consistency with collections that may be
    present or non-present and possibly flushed or not flushed at different times
    based on different relationship loading strategies.
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了通过backref与未加载集合关联的对象，但由于在2.0系列中删除了`cascade_backrefs`而未合并到[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中的问题，将不会发出警告，表明这些对象未包含在刷新中，即使它们是集合的待处理成员；在其他情况下，当要刷新的集合包含将被基本丢弃的非附加对象时，会发出警告。对于backref待处理集合成员的警告的添加建立了与可能根据不同的关系加载策略在不同时间基于不同时间刷新或不刷新的集合的更大一致性。
- en: 'References: [#10090](https://www.sqlalchemy.org/trac/ticket/10090)'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10090](https://www.sqlalchemy.org/trac/ticket/10090)
- en: '**[orm] [bug] [regression]**'
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed additional regression caused by [#9805](https://www.sqlalchemy.org/trac/ticket/9805)
    where more aggressive propagation of the “ORM” flag on statements could lead to
    an internal attribute error when embedding an ORM [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") construct that nonetheless contained no ORM entities within
    a Core SQL statement, in this case ORM-enabled UPDATE and DELETE statements.
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#9805](https://www.sqlalchemy.org/trac/ticket/9805)引起的额外回归，其中对语句上“ORM”标志的更积极传播可能导致在ORM
    [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")构造中嵌入一个不包含ORM实体的Core
    SQL语句时出现内部属性错误， 在这种情况下，ORM启用的UPDATE和DELETE语句。
- en: 'References: [#10098](https://www.sqlalchemy.org/trac/ticket/10098)'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10098](https://www.sqlalchemy.org/trac/ticket/10098)
- en: engine
  id: totrans-512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Renamed [`Row.t`](../core/connections.html#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")
    and [`Row.tuple()`](../core/connections.html#sqlalchemy.engine.Row.tuple "sqlalchemy.engine.Row.tuple")
    to [`Row._t`](../core/connections.html#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t")
    and [`Row._tuple()`](../core/connections.html#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple");
    this is to suit the policy that all methods and pre-defined attributes on [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") should be in the style of Python standard library `namedtuple`
    where all fixed names have a leading underscore, to avoid name conflicts with
    existing column names. The previous method/attribute is now deprecated and will
    emit a deprecation warning.
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 [`Row.t`](../core/connections.html#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")
    和 [`Row.tuple()`](../core/connections.html#sqlalchemy.engine.Row.tuple "sqlalchemy.engine.Row.tuple")
    重命名为 [`Row._t`](../core/connections.html#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t")
    和 [`Row._tuple()`](../core/connections.html#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple")；这是为了符合所有方法和预定义属性都应采用
    Python 标准库 `namedtuple` 风格的策略，其中所有固定名称都有一个前导下划线，以避免与现有列名称冲突。先前的方法/属性现已被弃用，并将发出弃用警告。
- en: 'References: [#10093](https://www.sqlalchemy.org/trac/ticket/10093)'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10093](https://www.sqlalchemy.org/trac/ticket/10093)
- en: '**[engine] [bug]**'
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added detection for non-string, non-[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") objects to the [`make_url()`](../core/engines.html#sqlalchemy.engine.make_url
    "sqlalchemy.engine.make_url") function, allowing `ArgumentError` to be thrown
    immediately, rather than causing failures later on. Special logic ensures that
    mock forms of [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    are allowed through. Pull request courtesy Grigoriev Semyon.
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`make_url()`](../core/engines.html#sqlalchemy.engine.make_url "sqlalchemy.engine.make_url")
    函数添加了对非字符串、非 [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    对象的检测，允许立即抛出 `ArgumentError`，而不是稍后引发故障。特殊逻辑确保允许通过模拟 [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") 的形式。拉取请求由 Grigoriev Semyon 提供。
- en: 'References: [#10079](https://www.sqlalchemy.org/trac/ticket/10079)'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10079](https://www.sqlalchemy.org/trac/ticket/10079)
- en: postgresql
  id: totrans-519
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression caused by improvements to PostgreSQL URL parsing in [#10004](https://www.sqlalchemy.org/trac/ticket/10004)
    where “host” query string arguments that had colons in them, to support various
    third party proxy servers and/or dialects, would not parse correctly as these
    were evaluted as `host:port` combinations. Parsing has been updated to consider
    a colon as indicating a `host:port` value only if the hostname contains only alphanumeric
    characters with dots or dashes only (e.g. no slashes), followed by exactly one
    colon followed by an all-integer token of zero or more integers. In all other
    cases, the full string is taken as a host.
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL URL 解析改进引起的回归问题 [#10004](https://www.sqlalchemy.org/trac/ticket/10004)，其中带有冒号的“host”查询字符串参数，以支持各种第三方代理服务器和/或方言，将无法正确解析，因为这些被解析为
    `host:port` 组合。解析已更新，只有当主机名仅包含字母数字字符，并且只包含点或短划线时（例如，没有斜杠），才将冒号视为表示 `host:port`
    值的标记，后跟一个零个或多个整数的整数标记。在所有其他情况下，将整个字符串视为主机。
- en: 'References: [#10069](https://www.sqlalchemy.org/trac/ticket/10069)'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10069](https://www.sqlalchemy.org/trac/ticket/10069)
- en: '**[postgresql] [bug]**'
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where comparisons to the [`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT") datatype would cast the right side to
    `VARCHAR`, leading to the right side not being interpreted as a `CITEXT` datatype,
    for the asyncpg, psycopg3 and pg80000 dialects. This led to the [`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT") type being essentially unusable for practical
    use; this is now fixed and the test suite has been corrected to properly assert
    that expressions are rendered correctly.
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对 [`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT") 数据类型进行比较时将右侧强制转换为 `VARCHAR` 的问题，导致右侧未被解释为
    `CITEXT` 数据类型，对于 asyncpg、psycopg3 和 pg80000 方言。这导致 [`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT") 类型在实际使用中基本上无法使用；现已修复此问题，并已更正测试套件以正确断言表达式是否被正确渲染。
- en: 'References: [#10096](https://www.sqlalchemy.org/trac/ticket/10096)'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10096](https://www.sqlalchemy.org/trac/ticket/10096)
- en: 2.0.18
  id: totrans-526
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.18
- en: 'Released: July 5, 2023'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年7月5日
- en: engine
  id: totrans-528
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Adjusted the [`create_engine.schema_translate_map`](../core/engines.html#sqlalchemy.create_engine.params.schema_translate_map
    "sqlalchemy.create_engine") feature such that **all** schema names in the statement
    are now tokenized, regardless of whether or not a specific name is in the immediate
    schema translate map given, and to fallback to substituting the original name
    when the key is not in the actual schema translate map at execution time. These
    two changes allow for repeated use of a compiled object with schema schema_translate_maps
    that include or dont include various keys on each run, allowing cached SQL constructs
    to continue to function at runtime when schema translate maps with different sets
    of keys are used each time. In addition, added detection of schema_translate_map
    dictionaries which gain or lose a `None` key across calls for the same statement,
    which affects compilation of the statement and is not compatible with caching;
    an exception is raised for these scenarios.
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了[`create_engine.schema_translate_map`](../core/engines.html#sqlalchemy.create_engine.params.schema_translate_map
    "sqlalchemy.create_engine")功能，以便**所有**语句中的模式名称都现在被标记化，无论指定的名称是否在给定的立即模式翻译映射中，并在执行时回退到原始名称的替换。这两个更改允许在每次运行时使用包含或不包含各种键的模式翻译映射来重复使用已编译的对象，从而允许在每次使用具有不同键集的模式翻译映射时继续运行时缓存SQL构造。另外，增加了检测在同一语句的多次调用中获得或失去`None`键的schema_translate_map字典，这会影响语句的编译，并且与缓存不兼容；针对这些情况引发异常。
- en: 'References: [#10025](https://www.sqlalchemy.org/trac/ticket/10025)'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#10025](https://www.sqlalchemy.org/trac/ticket/10025)'
- en: sql
  id: totrans-532
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the [`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") when using “flags” would
    not produce a “stable” cache key, that is, the cache key would keep changing each
    time causing cache pollution. The same issue existed for [`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") with both the flags
    and the actual replacement expression. The flags are now represented as fixed
    modifier strings rendered as safestrings rather than bound parameters, and the
    replacement expression is established within the primary portion of the “binary”
    element so that it generates an appropriate cache key.
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用“flags”时[`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")不会生成“稳定”缓存键的问题，也就是说，缓存键每次都会改变，导致缓存污染。对于[`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")也存在同样的问题，包括标志和实际替换表达式。现在，标志被表示为固定的修饰符字符串，呈现为安全字符串，而不是绑定参数，并且替换表达式在“binary”元素的主要部分中建立，以便生成适当的缓存键。
- en: Note that as part of this change, the [`ColumnOperators.regexp_match.flags`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match.params.flags
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") and [`ColumnOperators.regexp_replace.flags`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace.params.flags
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") have been modified
    to render as literal strings only, whereas previously they were rendered as full
    SQL expressions, typically bound parameters. These parameters should always be
    passed as plain Python strings and not as SQL expression constructs; it’s not
    expected that SQL expression constructs were used in practice for this parameter,
    so this is a backwards-incompatible change.
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，作为此更改的一部分，[`ColumnOperators.regexp_match.flags`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match.params.flags
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")和[`ColumnOperators.regexp_replace.flags`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace.params.flags
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 已修改为仅呈现为文字字符串，而以前它们是呈现为完整的SQL表达式，通常是绑定参数。这些参数应始终作为普通的Python字符串传递，而不是作为SQL表达式构造；不希望在实践中使用SQL表达式构造该参数，因此这是一个不向后兼容的更改。
- en: The change also modifies the internal structure of the expression generated,
    for [`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") with or without flags,
    and for [`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") with flags. Third party
    dialects which may have implemented regexp implementations of their own (no such
    dialects could be located in a search, so impact is expected to be low) would
    need to adjust the traversal of the structure to accommodate.
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该更改还修改了生成的表达式的内部结构，对于带有或不带有标志的 [`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")，以及对于带有标志的 [`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")。可能已经实现了自己的 regexp 实现的第三方方言（在搜索中找不到此类方言，因此影响预计很低）需要调整结构的遍历以适应。
- en: 'This change is also **backported** to: 1.4.49'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也 **被回溯** 至：1.4.49
- en: 'References: [#10042](https://www.sqlalchemy.org/trac/ticket/10042)'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10042](https://www.sqlalchemy.org/trac/ticket/10042)
- en: '**[sql] [bug]**'
  id: totrans-539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed issue in mostly-internal [`CacheKey`](../core/foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") construct where the `__ne__()` operator
    were not properly implemented, leading to nonsensical results when comparing [`CacheKey`](../core/foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") instances to each other.
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了主要内部 [`CacheKey`](../core/foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") 构造中 `__ne__()` 运算符未正确实现的问题，导致比较 [`CacheKey`](../core/foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") 实例时结果荒谬。
- en: 'This change is also **backported** to: 1.4.49'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也 **被回溯** 至：1.4.49
- en: extensions
  id: totrans-542
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions] [usecase]**'
  id: totrans-543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展] [用例]**'
- en: Added new option to [`association_proxy()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") [`association_proxy.create_on_none_assignment`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.create_on_none_assignment
    "sqlalchemy.ext.associationproxy.association_proxy"); when an association proxy
    which refers to a scalar relationship is assigned the value `None`, and the referenced
    object is not present, a new object is created via the creator. This was apparently
    an undefined behavior in the 1.2 series that was silently removed.
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`association_proxy()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") [`association_proxy.create_on_none_assignment`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.create_on_none_assignment
    "sqlalchemy.ext.associationproxy.association_proxy") 添加了新选项；当一个关联代理引用标量关系被赋值为
    `None` 且引用的对象不存在时，通过创建者创建一个新对象。这显然是 1.2 系列中的一个未定义行为，被悄悄移除了。
- en: 'References: [#10013](https://www.sqlalchemy.org/trac/ticket/10013)'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10013](https://www.sqlalchemy.org/trac/ticket/10013)
- en: typing
  id: totrans-546
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 键入
- en: '**[typing] [usecase]**'
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[键入] [用例]**'
- en: Improved typing when using standalone operator functions from `sqlalchemy.sql.operators`
    such as `sqlalchemy.sql.operators.eq`.
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用来自 `sqlalchemy.sql.operators` 的独立运算符函数（如 `sqlalchemy.sql.operators.eq`）时，改进了类型。
- en: 'References: [#10054](https://www.sqlalchemy.org/trac/ticket/10054)'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10054](https://www.sqlalchemy.org/trac/ticket/10054)
- en: '**[typing] [bug]**'
  id: totrans-550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[键入] [错误]**'
- en: Fixed some of the typing within the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct to correctly accept a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object that’s been aliased with [`Table.alias()`](../core/metadata.html#sqlalchemy.schema.Table.alias
    "sqlalchemy.schema.Table.alias"), as well as general support for [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects to be passed as the “selectable”
    argument, since this is all supported.
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    构造中的一些类型问题，以正确接受已用 [`Table.alias()`](../core/metadata.html#sqlalchemy.schema.Table.alias
    "sqlalchemy.schema.Table.alias") 别名的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象，以及对 [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 对象作为“selectable”参数的一般支持，因为这是完全支持的。
- en: 'References: [#10061](https://www.sqlalchemy.org/trac/ticket/10061)'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10061](https://www.sqlalchemy.org/trac/ticket/10061)
- en: postgresql
  id: totrans-553
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added multi-host support for the asyncpg dialect. General improvements and error
    checking added to the PostgreSQL URL routines for the “multihost” use case added
    as well. Pull request courtesy Ilia Dmitriev.
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 asyncpg 方言添加了多主机支持。 还对“多主机”用例的 PostgreSQL URL 例程进行了一般改进和错误检查。 感谢 Ilia Dmitriev
    提供的拉取请求。
- en: See also
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Multihost Connections](../dialects/postgresql.html#asyncpg-multihost)'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[多主机连接](../dialects/postgresql.html#asyncpg-multihost)'
- en: 'References: [#10004](https://www.sqlalchemy.org/trac/ticket/10004)'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10004](https://www.sqlalchemy.org/trac/ticket/10004)
- en: '**[postgresql] [bug]**'
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added new parameter `native_inet_types=False` to all PostgreSQL dialects, which
    indicates converters used by the DBAPI to convert rows from PostgreSQL [`INET`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INET
    "sqlalchemy.dialects.postgresql.INET") and [`CIDR`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CIDR
    "sqlalchemy.dialects.postgresql.CIDR") columns into Python `ipaddress` datatypes
    should be disabled, returning strings instead. This allows code written to work
    with strings for these datatypes to be migrated to asyncpg, psycopg, or pg8000
    without code changes other than adding this parameter to the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") or [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") function call.
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为所有 PostgreSQL 方言添加了新参数 `native_inet_types=False`，表示 DBAPI 使用的转换器将禁用 PostgreSQL
    [`INET`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INET "sqlalchemy.dialects.postgresql.INET")
    和 [`CIDR`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CIDR "sqlalchemy.dialects.postgresql.CIDR")
    列的行转换为 Python `ipaddress` 数据类型，而返回字符串。 这允许编写代码以使用这些数据类型的字符串进行迁移，而无需进行代码更改，只需将此参数添加到
    [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    或 [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") 函数调用中。
- en: See also
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Network Data Types](../dialects/postgresql.html#postgresql-network-datatypes)'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[网络数据类型](../dialects/postgresql.html#postgresql-network-datatypes)'
- en: 'References: [#9945](https://www.sqlalchemy.org/trac/ticket/9945)'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9945](https://www.sqlalchemy.org/trac/ticket/9945)
- en: mariadb
  id: totrans-564
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mariadb
- en: '**[mariadb] [usecase] [reflection]**'
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [usecase] [reflection]**'
- en: Allowed reflecting [`UUID`](../core/type_basics.html#sqlalchemy.types.UUID "sqlalchemy.types.UUID")
    columns from MariaDB. This allows Alembic to properly detect the type of such
    columns in existing MariaDB databases.
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许从 MariaDB 反射 [`UUID`](../core/type_basics.html#sqlalchemy.types.UUID "sqlalchemy.types.UUID")
    列。 这使得 Alembic 能够正确检测现有 MariaDB 数据库中此类列的类型。
- en: 'References: [#10028](https://www.sqlalchemy.org/trac/ticket/10028)'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10028](https://www.sqlalchemy.org/trac/ticket/10028)
- en: mssql
  id: totrans-568
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [usecase]**'
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [usecase]**'
- en: Added support for creation and reflection of COLUMNSTORE indexes in MSSQL dialect.
    Can be specified on indexes specifying `mssql_columnstore=True`.
  id: totrans-570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 MSSQL 方言中 COLUMNSTORE 索引的创建和反射的支持。 可以在指定 `mssql_columnstore=True` 的索引上指定。
- en: 'References: [#7340](https://www.sqlalchemy.org/trac/ticket/7340)'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7340](https://www.sqlalchemy.org/trac/ticket/7340)
- en: '**[mssql] [bug] [sql]**'
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [sql]**'
- en: Fixed issue where performing [`Cast`](../core/sqlelement.html#sqlalchemy.sql.expression.Cast
    "sqlalchemy.sql.expression.Cast") to a string type with an explicit collation
    would render the COLLATE clause inside the CAST function, which resulted in a
    syntax error.
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将 [`Cast`](../core/sqlelement.html#sqlalchemy.sql.expression.Cast "sqlalchemy.sql.expression.Cast")
    执行到具有显式排序规则的字符串类型时，将在 CAST 函数内部渲染 COLLATE 子句的问题，从而导致语法错误。
- en: 'References: [#9932](https://www.sqlalchemy.org/trac/ticket/9932)'
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9932](https://www.sqlalchemy.org/trac/ticket/9932)
- en: 2.0.17
  id: totrans-575
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.17
- en: 'Released: June 23, 2023'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年6月23日
- en: orm
  id: totrans-577
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [regression]**'
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression in the 2.0 series where a query that used [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") with [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") or [`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload") would raise an `AttributeError`. Pull request courtesy
    of Matthew Martin.
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 2.0 系列中的回归，其中使用 [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") 与 [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") 或 [`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload") 的查询会引发 `AttributeError`。 感谢 Matthew Martin 提供的拉取请求。
- en: 'References: [#9870](https://www.sqlalchemy.org/trac/ticket/9870)'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9870](https://www.sqlalchemy.org/trac/ticket/9870)
- en: '**[orm] [bug]**'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in ORM Annotated Declarative which prevented a [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") from being used on a mixin which did not return
    a [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    datatype, and instead returned a supplemental ORM datatype such as [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy"). The Declarative runtime would
    erroneously try to interpret this annotation as needing to be [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") and raise an error.
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在ORM Annotated Declarative中的问题，该问题阻止了在不返回[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")数据类型的混合使用[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")的情况，而是返回了额外的ORM数据类型，如[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")。声明式运行时错误地尝试将此注释解释为需要[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")并引发错误。
- en: 'References: [#9957](https://www.sqlalchemy.org/trac/ticket/9957)'
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9957](https://www.sqlalchemy.org/trac/ticket/9957)
- en: '**[orm] [bug] [typing]**'
  id: totrans-584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [typing]**'
- en: Fixed typing issue where using the [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") return type from a [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") function was disallowed.
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")函数从[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")返回类型的类型问题被禁止的问题。
- en: 'References: [#9957](https://www.sqlalchemy.org/trac/ticket/9957)'
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9957](https://www.sqlalchemy.org/trac/ticket/9957)
- en: '**[orm] [bug] [regression]**'
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression introduced in 2.0.16 by [#9879](https://www.sqlalchemy.org/trac/ticket/9879)
    where passing a callable to the [`mapped_column.default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column") parameter of [`mapped_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") while also setting `init=False` would interpret
    this value as a Dataclass default value which would be assigned directly to new
    instances of the object directly, bypassing the default generator taking place
    as the [`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") value generator on the underlying [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"). This condition is now detected so that the previous
    behavior is maintained, however a deprecation warning for this ambiguous use is
    emitted; to populate the default generator for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), the [`mapped_column.insert_default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.insert_default
    "sqlalchemy.orm.mapped_column") parameter should be used, which disambiguates
    from the [`mapped_column.default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column") parameter whose name is fixed as per pep-681.
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在2.0.16中由[#9879](https://www.sqlalchemy.org/trac/ticket/9879)引入的回归，其中将可调用对象传递给[`mapped_column.default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column")参数时，同时设置`init=False`会将此值解释为Dataclass默认值，该值将直接分配给新实例的对象，绕过了作为底层[`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column")值生成器的默认生成器的过程。现在检测到这种情况，以保持先前的行为，但对于这种模棱两可的用法会发出弃用警告；要为[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")填充默认生成器，应使用[`mapped_column.insert_default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.insert_default
    "sqlalchemy.orm.mapped_column")参数，该参数与固定名称的[`mapped_column.default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column")参数相区分，其名称根据 pep-681 固定。
- en: 'References: [#9936](https://www.sqlalchemy.org/trac/ticket/9936)'
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9936](https://www.sqlalchemy.org/trac/ticket/9936)
- en: '**[orm] [bug]**'
  id: totrans-590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Additional hardening and documentation for the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") “state change” system, which detects concurrent use
    of [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    and [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects; an additional check is added within
    the process to acquire connections from the underlying engine, which is a critical
    section with regards to internal connection management.
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    “状态更改”系统进行了额外的加固和文档，该系统检测到同时使用 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 和 [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") 对象的并发使用；在获取来自底层引擎的连接的过程中添加了额外的检查，这是关于内部连接管理的关键部分。
- en: 'References: [#9973](https://www.sqlalchemy.org/trac/ticket/9973)'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9973](https://www.sqlalchemy.org/trac/ticket/9973)
- en: '**[orm] [bug]**'
  id: totrans-593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in ORM loader strategy logic which further allows for long chains
    of [`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") loader options across complex inheriting polymorphic
    / aliased / of_type() relationship chains to take proper effect in queries.
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 ORM 加载器策略逻辑中修复了问题，进一步允许在复杂的继承多态/别名/of_type()关系链上的长链中使用[`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")加载器选项，以便在查询中正确生效。
- en: 'References: [#10006](https://www.sqlalchemy.org/trac/ticket/10006)'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10006](https://www.sqlalchemy.org/trac/ticket/10006)
- en: '**[orm] [bug]**'
  id: totrans-596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in support for the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") datatype in the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") first added as part of [#8859](https://www.sqlalchemy.org/trac/ticket/8859)
    where using a custom [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    with fixed configuration in the map would fail to transfer the [`Enum.name`](../core/type_basics.html#sqlalchemy.types.Enum.params.name
    "sqlalchemy.types.Enum") parameter, which among other issues would prevent PostgreSQL
    enums from working if the enum values were passed as individual values. Logic
    has been updated so that “name” is transferred over, but also that the default
    [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    which is against the plain Python enum.Enum class or other “empty” enum won’t
    set a hardcoded name of `"enum"` either.
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    数据类型在 [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") 中的支持，该支持是作为 [#8859](https://www.sqlalchemy.org/trac/ticket/8859)
    的一部分首次添加的，在此过程中，如果在映射中使用了带有固定配置的自定义 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")，则会失败传递 [`Enum.name`](../core/type_basics.html#sqlalchemy.types.Enum.params.name
    "sqlalchemy.types.Enum") 参数，这将导致 PostgreSQL 枚举无法正常工作，如果枚举值被传递为单个值，则会产生其他问题。逻辑已更新，以便传递“名称”，但也使默认
    [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    不会设置硬编码名称为`"enum"`，该默认枚举是针对纯 Python 枚举 enum.Enum 类或其他“空”枚举的。
- en: 'References: [#9963](https://www.sqlalchemy.org/trac/ticket/9963)'
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9963](https://www.sqlalchemy.org/trac/ticket/9963)
- en: orm declarative
  id: totrans-599
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM 声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: A warning is emitted when an ORM [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") and other [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects are assigned to two different class attributes
    at once; only one of the attributes will be mapped. A warning for this condition
    was already in place for [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") and [`mapped_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") objects.
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将 ORM [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 和其他 [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") 对象同时分配给两个不同的类属性时，会发出警告；只有其中一个属性会被映射。对于此条件，已经为
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    和 [`mapped_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    对象设置了警告。
- en: 'References: [#3532](https://www.sqlalchemy.org/trac/ticket/3532)'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3532](https://www.sqlalchemy.org/trac/ticket/3532)
- en: extensions
  id: totrans-603
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions] [bug]**'
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions] [bug]**'
- en: Fixed issue in mypy plugin for use with mypy 1.4.
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 mypy 1.4 结合使用的 mypy 插件中的问题。
- en: 'This change is also **backported** to: 1.4.49'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被 **回溯** 到：1.4.49
- en: typing
  id: totrans-607
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue which prevented [`WriteOnlyMapped`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped") and [`DynamicMapped`](../orm/large_collections.html#sqlalchemy.orm.DynamicMapped
    "sqlalchemy.orm.DynamicMapped") attributes from being used fully within ORM queries.
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了类型问题，该问题导致无法完全在 ORM 查询中使用 [`WriteOnlyMapped`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped") 和 [`DynamicMapped`](../orm/large_collections.html#sqlalchemy.orm.DynamicMapped
    "sqlalchemy.orm.DynamicMapped") 属性。
- en: 'References: [#9985](https://www.sqlalchemy.org/trac/ticket/9985)'
  id: totrans-610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9985](https://www.sqlalchemy.org/trac/ticket/9985)
- en: postgresql
  id: totrans-611
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: The pg8000 dialect now supports RANGE and MULTIRANGE datatypes, using the existing
    RANGE API described at [Range and Multirange Types](../dialects/postgresql.html#postgresql-ranges).
    Range and multirange types are supported in the pg8000 driver from version 1.29.8.
    Pull request courtesy Tony Locke.
  id: totrans-613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pg8000 方言现在支持 RANGE 和 MULTIRANGE 数据类型，使用现有的 [Range and Multirange Types](../dialects/postgresql.html#postgresql-ranges)
    中描述的 RANGE API。 Range 和 multirange 类型在 pg8000 驱动程序的版本 1.29.8 中受支持。感谢 Tony Locke
    提供的拉取请求。
- en: 'References: [#9965](https://www.sqlalchemy.org/trac/ticket/9965)'
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9965](https://www.sqlalchemy.org/trac/ticket/9965)
- en: 2.0.16
  id: totrans-615
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.16
- en: 'Released: June 10, 2023'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023 年 6 月 10 日
- en: platform
  id: totrans-617
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 平台
- en: '**[platform] [usecase]**'
  id: totrans-618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[platform] [usecase]**'
- en: Compatibility improvements allowing the complete test suite to pass on Python
    3.12.0b1.
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 兼容性改进，使完整的测试套件可以在 Python 3.12.0b1 上通过。
- en: orm
  id: totrans-620
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Improved [`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare") to accept arbitrary `**kw`
    arguments that are passed to [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect"), allowing use cases such as reflection of
    views as well as dialect-specific arguments to be passed. Additionally, modernized
    the [`DeferredReflection.prepare.bind`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare.params.bind
    "sqlalchemy.ext.declarative.DeferredReflection.prepare") argument so that either
    an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    are accepted as the “bind” argument.
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 [`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare")，使其接受传递给 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 的任意 `**kw` 参数，允许使用诸如反射视图等用例以及传递给方言特定参数。另外，还现代化了
    [`DeferredReflection.prepare.bind`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare.params.bind
    "sqlalchemy.ext.declarative.DeferredReflection.prepare") 参数，以便将 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 或 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 作为“bind”参数接受。
- en: 'References: [#9828](https://www.sqlalchemy.org/trac/ticket/9828)'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9828](https://www.sqlalchemy.org/trac/ticket/9828)
- en: '**[orm] [bug]**'
  id: totrans-624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where [`DeclarativeBaseNoMeta`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBaseNoMeta
    "sqlalchemy.orm.DeclarativeBaseNoMeta") declarative base class would not function
    with non-mapped mixins or abstract classes, raising an `AttributeError` instead.
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`DeclarativeBaseNoMeta`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBaseNoMeta
    "sqlalchemy.orm.DeclarativeBaseNoMeta") 声明基类无法与非映射混合类或抽象类一起使用的问题，而是引发 `AttributeError`。
- en: 'References: [#9862](https://www.sqlalchemy.org/trac/ticket/9862)'
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9862](https://www.sqlalchemy.org/trac/ticket/9862)
- en: '**[orm] [bug] [regression]**'
  id: totrans-627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression in the 2.0 series where the default value of [`validates.include_backrefs`](../orm/mapped_attributes.html#sqlalchemy.orm.validates.params.include_backrefs
    "sqlalchemy.orm.validates") got changed to `False` for the [`validates()`](../orm/mapped_attributes.html#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates") function. This default is now restored to `True`.
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 2.0 系列中的一个回归，其中 [`validates.include_backrefs`](../orm/mapped_attributes.html#sqlalchemy.orm.validates.params.include_backrefs
    "sqlalchemy.orm.validates") 的默认值在 [`validates()`](../orm/mapped_attributes.html#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates") 函数中更改为 `False`。现在将该默认值恢复为 `True`。
- en: 'References: [#9820](https://www.sqlalchemy.org/trac/ticket/9820)'
  id: totrans-629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9820](https://www.sqlalchemy.org/trac/ticket/9820)
- en: '**[orm] [bug]**'
  id: totrans-630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new feature which allows a WHERE clause to be used in conjunction
    with [ORM Bulk UPDATE by Primary Key](../orm/queryguide/dml.html#orm-queryguide-bulk-update),
    added in version 2.0.11 as part of [#9583](https://www.sqlalchemy.org/trac/ticket/9583),
    where sending dictionaries that did not include the primary key values for each
    row would run through the bulk process and include “pk=NULL” for the rows, silently
    failing. An exception is now raised if primary key values for bulk UPDATE are
    not supplied.
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本 2.0.11 中作为[#9583](https://www.sqlalchemy.org/trac/ticket/9583)的一部分新增的功能中修复了一个bug，该功能允许在[ORM按主键批量更新](../orm/queryguide/dml.html#orm-queryguide-bulk-update)时与WHERE子句一起使用，发送不包含每行主键值的字典将通过批量处理，并为行包括“pk=NULL”，但不会引发异常。如果未提供批量更新的主键值，则现在会引发异常。
- en: 'References: [#9917](https://www.sqlalchemy.org/trac/ticket/9917)'
  id: totrans-632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9917](https://www.sqlalchemy.org/trac/ticket/9917)
- en: '**[orm] [bug] [dataclasses]**'
  id: totrans-633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [dataclasses]**'
- en: Fixed an issue where generating dataclasses fields that specified a `default`
    value and set `init=False` would not work. The dataclasses behavior in this case
    is to set the default value on the class, that’s not compatible with the descriptors
    used by SQLAlchemy. To support this case the default is transformed to a `default_factory`
    when generating the dataclass.
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，其中生成指定了`default`值并设置`init=False`的dataclasses字段将无效。在这种情况下，dataclasses行为是在类上设置默认值，这与SQLAlchemy使用的描述符不兼容。为了支持这种情况，在生成dataclass时将默认值转换为`default_factory`。
- en: 'References: [#9879](https://www.sqlalchemy.org/trac/ticket/9879)'
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9879](https://www.sqlalchemy.org/trac/ticket/9879)
- en: '**[orm] [bug]**'
  id: totrans-636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A deprecation warning is emitted whenever a property is added to a [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") where an ORM mapped property were already configured,
    or an attribute is already present on the class. Previously, there was a non-deprecation
    warning for this case that did not emit consistently. The logic for this warning
    has been improved so that it detects end-user replacement of attribute while not
    having false positives for internal Declarative and other cases where replacement
    of descriptors with new ones is expected.
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当向[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")添加属性时已经配置了ORM映射属性，或者类上已经存在属性时，将发出弃用警告。先前，对于此情况存在一个非弃用警告，但并非始终一致发出。已改进此警告的逻辑，以便在检测到属性的终端用户替换时发出警告，同时对于内部Declarative和其他情况，其中用新的属性替换描述符是预期的情况，不会产生误报。
- en: 'References: [#9841](https://www.sqlalchemy.org/trac/ticket/9841)'
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9841](https://www.sqlalchemy.org/trac/ticket/9841)
- en: '**[orm] [bug]**'
  id: totrans-639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the argument chacking on the [`map_imperatively.local_table`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.local_table
    "sqlalchemy.orm.registry.map_imperatively") parameter of the [`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method, ensuring only a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") is passed, and not an existing mapped
    class, which would lead to undefined behavior as the object were further interpreted
    for a new mapping.
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了[`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")方法的[`map_imperatively.local_table`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.local_table
    "sqlalchemy.orm.registry.map_imperatively")参数上的参数检查，确保只传递[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或其他[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")，而不是已存在的映射类，因为该对象将被进一步解释为新的映射时会导致未定义的行为。
- en: 'References: [#9869](https://www.sqlalchemy.org/trac/ticket/9869)'
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9869](https://www.sqlalchemy.org/trac/ticket/9869)
- en: '**[orm] [bug]**'
  id: totrans-642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`InstanceState.unloaded_expirable`](../orm/internals.html#sqlalchemy.orm.InstanceState.unloaded_expirable
    "sqlalchemy.orm.InstanceState.unloaded_expirable") attribute is a synonym for
    [`InstanceState.unloaded`](../orm/internals.html#sqlalchemy.orm.InstanceState.unloaded
    "sqlalchemy.orm.InstanceState.unloaded"), and is now deprecated; this attribute
    was always implementation-specific and should not have been public.
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`InstanceState.unloaded_expirable`](../orm/internals.html#sqlalchemy.orm.InstanceState.unloaded_expirable
    "sqlalchemy.orm.InstanceState.unloaded_expirable")属性是[`InstanceState.unloaded`](../orm/internals.html#sqlalchemy.orm.InstanceState.unloaded
    "sqlalchemy.orm.InstanceState.unloaded")的同义词，现在已弃用；此属性始终是特定于实现的，不应公开。'
- en: 'References: [#9913](https://www.sqlalchemy.org/trac/ticket/9913)'
  id: totrans-644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9913](https://www.sqlalchemy.org/trac/ticket/9913)
- en: asyncio
  id: totrans-645
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [usecase]**'
  id: totrans-646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [用例]**'
- en: Added new [`create_async_engine.async_creator`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine.params.async_creator
    "sqlalchemy.ext.asyncio.create_async_engine") parameter to [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"), which accomplishes the same purpose
    as the [`create_engine.creator`](../core/engines.html#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine") parameter of [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"). This is a no-argument callable that provides a new
    asyncio connection, using the asyncio database driver directly. The [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") function will wrap the driver-level
    connection in the appropriate structures. Pull request courtesy of Jack Wotherspoon.
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的[`create_async_engine.async_creator`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine.params.async_creator
    "sqlalchemy.ext.asyncio.create_async_engine")参数到[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")，其完成了与[`create_engine.creator`](../core/engines.html#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine")参数相同的目的[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")。这是一个不带参数的可调用对象，提供一个新的 asyncio 连接，直接使用 asyncio 数据库驱动程序。[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")函数将在适当的结构中封装驱动程序级别的连接。贡献者 Jack Wotherspoon。
- en: 'References: [#8215](https://www.sqlalchemy.org/trac/ticket/8215)'
  id: totrans-648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8215](https://www.sqlalchemy.org/trac/ticket/8215)
- en: postgresql
  id: totrans-649
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase] [reflection]**'
  id: totrans-650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例] [反射]**'
- en: Cast `NAME` columns to `TEXT` when using `ARRAY_AGG` in PostgreSQL reflection.
    This seems to improve compatibility with some PostgreSQL derivatives that may
    not support aggregations on the `NAME` type.
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 反射中使用`ARRAY_AGG`时，将`NAME`列强制转换为`TEXT`。这似乎改善了一些 PostgreSQL 派生产品可能不支持`NAME`类型的聚合的兼容性。
- en: 'References: [#9838](https://www.sqlalchemy.org/trac/ticket/9838)'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9838](https://www.sqlalchemy.org/trac/ticket/9838)
- en: '**[postgresql] [usecase]**'
  id: totrans-653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Unified the custom PostgreSQL operator definitions, since they are shared among
    multiple different data types.
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 统一了自定义 PostgreSQL 运算符定义，因为它们在多种不同的数据类型之间共享。
- en: 'References: [#9041](https://www.sqlalchemy.org/trac/ticket/9041)'
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9041](https://www.sqlalchemy.org/trac/ticket/9041)
- en: '**[postgresql] [usecase]**'
  id: totrans-656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Added support for PostgreSQL 10 `NULLS NOT DISTINCT` feature of unique indexes
    and unique constraint using the dialect option `postgresql_nulls_not_distinct`.
    Updated the reflection logic to also correctly take this option into account.
    Pull request courtesy of Pavel Siarchenia.
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL 10 `NULLS NOT DISTINCT` 唯一索引和唯一约束功能的支持，使用方言选项 `postgresql_nulls_not_distinct`。更新反射逻辑以正确考虑此选项。贡献者
    Pavel Siarchenia。
- en: 'References: [#8240](https://www.sqlalchemy.org/trac/ticket/8240)'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8240](https://www.sqlalchemy.org/trac/ticket/8240)
- en: '**[postgresql] [bug]**'
  id: totrans-659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Use proper precedence on PostgreSQL specific operators, such as `@>`. Previously
    the precedence was wrong, leading to wrong parenthesis when rendering against
    and `ANY` or `ALL` construct.
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 特定运算符上使用适当的优先级，如`@>`。以前优先级错误，导致针对`ANY`或`ALL`结构呈现时括号错误。
- en: 'References: [#9836](https://www.sqlalchemy.org/trac/ticket/9836)'
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9836](https://www.sqlalchemy.org/trac/ticket/9836)
- en: '**[postgresql] [bug]**'
  id: totrans-662
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed issue where the [`ColumnOperators.like.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.like") and similar parameters did not
    allow an empty string as an argument that would be passed through as the “escape”
    character; this is a supported syntax by PostgreSQL. Pull requset courtesy Martin
    Caslavsky.
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即[`ColumnOperators.like.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.like")和类似的参数不允许空字符串作为参数，该参数将作为“转义”字符传递；这是
    PostgreSQL 支持的语法。贡献者 Martin Caslavsky。
- en: 'References: [#9907](https://www.sqlalchemy.org/trac/ticket/9907)'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9907](https://www.sqlalchemy.org/trac/ticket/9907)
- en: 2.0.15
  id: totrans-665
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.15
- en: 'Released: May 19, 2023'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023 年 5 月 19 日
- en: orm
  id: totrans-667
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: As more projects are using new-style “2.0” ORM querying, it’s becoming apparent
    that the conditional nature of “autoflush”, being based on whether or not the
    given statement refers to ORM entities, is becoming more of a key behavior. Up
    until now, the “ORM” flag for a statement has been loosely based around whether
    or not the statement returns rows that correspond to ORM entities or columns;
    the original purpose of the “ORM” flag was to enable ORM-entity fetching rules
    which apply post-processing to Core result sets as well as ORM loader strategies
    to the statement. For statements that don’t build on rows that contain ORM entities,
    the “ORM” flag was considered to be mostly unnecessary.
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 随着越来越多的项目使用新式“2.0”ORM查询，显然，“autoflush”的条件性，即基于给定语句是否引用ORM实体，正在变得更加重要。到目前为止，“ORM”标志对于语句是否返回与ORM实体或列对应的行已经存在了一定程度的松散关联；“ORM”标志的原始目的是启用应用于
    Core 结果集的 ORM 实体获取规则以及应用于语句的 ORM 加载策略的后处理。对于不基于包含 ORM 实体的行构建的语句，认为“ORM”标志基本上是不必要的。
- en: It still may be the case that “autoflush” would be better taking effect for
    *all* usage of [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") and related methods, even for purely Core SQL
    constructs. However, this still could impact legacy cases where this is not expected
    and may be more of a 2.1 thing. For now however, the rules for the “ORM-flag”
    have been opened up so that a statement that includes ORM entities or attributes
    anywhere within, including in the WHERE / ORDER BY / GROUP BY clause alone, within
    scalar subqueries, etc. will enable this flag. This will cause “autoflush” to
    occur for such statements and also be visible via the [`ORMExecuteState.is_orm_statement`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_orm_statement
    "sqlalchemy.orm.ORMExecuteState.is_orm_statement") event-level attribute.
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仍然可能存在“autoflush”对于*所有*使用[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")和相关方法的情况更加有效的情况，即使是对纯粹的 Core SQL 构造也是如此。然而，这可能会影响到未预期的旧有情况，并且可能更多地成为
    2.1 版本的事情。但是，现在“ORM-标志”的规则已经被放宽，因此包含任何 ORM 实体或属性的语句，包括仅在 WHERE / ORDER BY / GROUP
    BY 子句中的语句，在标量子查询中等等，都将启用此标志。这将导致这样的语句发生“autoflush”，并且还可以通过[`ORMExecuteState.is_orm_statement`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_orm_statement
    "sqlalchemy.orm.ORMExecuteState.is_orm_statement")事件级别属性可见。
- en: 'References: [#9805](https://www.sqlalchemy.org/trac/ticket/9805)'
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9805](https://www.sqlalchemy.org/trac/ticket/9805)
- en: postgresql
  id: totrans-672
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [regression]**'
- en: Repaired the base [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")
    datatype for the PostgreSQL dialect to make full use of the PG-specific `UUID`
    dialect-specific datatype when “native_uuid” is selected, so that PG driver behaviors
    are included. This issue became apparent due to the insertmanyvalues improvement
    made as part of [#9618](https://www.sqlalchemy.org/trac/ticket/9618), where in
    a similar manner as that of [#9739](https://www.sqlalchemy.org/trac/ticket/9739),
    the asyncpg driver is very sensitive to datatype casts being present or not, and
    the PostgreSQL driver-specific native `UUID` datatype must be invoked when this
    generic type is used so that these casts take place.
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对 PostgreSQL 方言的基础[`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid")数据类型，以便在选择“native_uuid”时充分利用 PG 特定的 `UUID` 方言特定的数据类型，以便包含
    PG 驱动程序行为。这个问题因为作为[#9618](https://www.sqlalchemy.org/trac/ticket/9618)的一部分进行的
    insertmanyvalues 改进而显现出来，其中类似于[#9739](https://www.sqlalchemy.org/trac/ticket/9739)，asyncpg
    驱动程序对是否存在数据类型转换非常敏感，当使用此通用类型时，必须调用 PostgreSQL 驱动程序特定的本机 `UUID` 数据类型，以便进行这些转换。
- en: 'References: [#9808](https://www.sqlalchemy.org/trac/ticket/9808)'
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9808](https://www.sqlalchemy.org/trac/ticket/9808)
- en: 2.0.14
  id: totrans-676
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.14
- en: 'Released: May 18, 2023'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年5月18日
- en: orm
  id: totrans-678
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Modified the `JoinedLoader` implementation to use a simpler approach in one
    particular area where it previously used a cached structure that would be shared
    among threads. The rationale is to avoid a potential race condition which is suspected
    of being the cause of a particular crash that’s been reported multiple times.
    The cached structure in question is still ultimately “cached” via the compiled
    SQL cache, so a performance degradation is not anticipated.
  id: totrans-680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在一个特定领域修改了`JoinedLoader`的实现，以使用更简单的方法，此前它使用了一个在多个线程之间共享的缓存结构。这样做的理由是为了避免潜在的竞争条件，这被怀疑是导致一个特定崩溃的原因，该崩溃已经被多次报告。所讨论的缓存结构最终仍然通过编译的
    SQL 缓存“缓存”，因此不会预期性能下降。
- en: 'References: [#9777](https://www.sqlalchemy.org/trac/ticket/9777)'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9777](https://www.sqlalchemy.org/trac/ticket/9777)
- en: '**[orm] [bug] [regression]**'
  id: totrans-682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [回归]**'
- en: Fixed regression where use of [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") or [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") within a [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") construct, then used in a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), would raise a [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") as a result of ORM related rules for performing
    ORM-level update/delete statements.
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")构造中使用[`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")或[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")后，在[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")中使用会引发[`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")的回归问题，这是由于执行ORM级别更新/删除语句的ORM相关规则造成的。
- en: 'References: [#9767](https://www.sqlalchemy.org/trac/ticket/9767)'
  id: totrans-684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9767](https://www.sqlalchemy.org/trac/ticket/9767)
- en: '**[orm] [bug]**'
  id: totrans-685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in new ORM Annotated Declarative where using a [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") (or other column-level constraint) inside of [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") which is then copied out to models via pep-593
    `Annotated` would apply duplicates of each constraint to the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") as produced in the target [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), leading to incorrect CREATE TABLE DDL as well as migration
    directives under Alembic.
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在新的ORM注释式声明中修复了问题，其中通过`pep-593`的`Annotated`将[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")（或其他列级约束）放在[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")中，然后通过模型复制到模型会将每个约束的副本应用到生成的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")中的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")中，导致不正确的CREATE TABLE DDL以及在Alembic下的迁移指令。
- en: 'References: [#9766](https://www.sqlalchemy.org/trac/ticket/9766)'
  id: totrans-687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9766](https://www.sqlalchemy.org/trac/ticket/9766)
- en: '**[orm] [bug]**'
  id: totrans-688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where using additional relationship criteria with the [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") loader option, where the additional criteria itself
    contained correlated subqueries that referred to the joined entities and therefore
    also required “adaption” to aliased entities, would be excluded from this adaption,
    producing the wrong ON clause for the joinedload.
  id: totrans-689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")加载器选项时，如果使用额外的关系标准，其中额外的标准本身包含引用联接实体的相关子查询，因此也需要对别名实体进行“调整”，则将排除这种适应，从而为`joinedload`生成错误的ON子句。
- en: 'References: [#9779](https://www.sqlalchemy.org/trac/ticket/9779)'
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9779](https://www.sqlalchemy.org/trac/ticket/9779)
- en: sql
  id: totrans-691
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Generalized the MSSQL [`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast
    "sqlalchemy.sql.expression.try_cast") function into the `sqlalchemy.` import namespace
    so that it may be implemented by third party dialects as well. Within SQLAlchemy,
    the [`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast
    "sqlalchemy.sql.expression.try_cast") function remains a SQL Server-only construct
    that will raise [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") if used with backends that don’t support it.
  id: totrans-693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将MSSQL的[`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast
    "sqlalchemy.sql.expression.try_cast")函数泛化到`sqlalchemy.`导入命名空间中，以便第三方方言也可以实现它。在SQLAlchemy中，[`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast
    "sqlalchemy.sql.expression.try_cast")函数仍然是一个仅适用于SQL Server的构造，如果在不支持它的后端使用它，则会引发[`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")。
- en: '[`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    implements a CAST where un-castable conversions are returned as NULL, instead
    of raising an error. Theoretically, the construct could be implemented by third
    party dialects for Google BigQuery, DuckDB, and Snowflake, and possibly others.'
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    实现了一个 CAST，其中无法转换的转换返回为 NULL，而不是引发错误。理论上，该构造可以由 Google BigQuery、DuckDB 和 Snowflake
    等第三方方言实现，并可能是其他方言。'
- en: Pull request courtesy Nick Crews.
  id: totrans-695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 感谢 Nick Crews 的拉取请求。
- en: 'References: [#9752](https://www.sqlalchemy.org/trac/ticket/9752)'
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9752](https://www.sqlalchemy.org/trac/ticket/9752)
- en: '**[sql] [bug]**'
  id: totrans-697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in [`values()`](../core/selectable.html#sqlalchemy.sql.expression.values
    "sqlalchemy.sql.expression.values") construct where an internal compilation error
    would occur if the construct were used inside of a scalar subquery.
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`values()`](../core/selectable.html#sqlalchemy.sql.expression.values "sqlalchemy.sql.expression.values")
    构造中的问题，在标量子查询中使用该构造将导致内部编译错误。
- en: 'References: [#9772](https://www.sqlalchemy.org/trac/ticket/9772)'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9772](https://www.sqlalchemy.org/trac/ticket/9772)
- en: postgresql
  id: totrans-700
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed apparently very old issue where the [`ENUM.create_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.create_type
    "sqlalchemy.dialects.postgresql.ENUM") parameter, when set to its non-default
    of `False`, would not be propagated when the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") which it’s a part of were copied, as is common when
    using ORM Declarative mixins.
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个显然非常久远的问题，即当 [`ENUM.create_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.create_type
    "sqlalchemy.dialects.postgresql.ENUM") 参数设置为其非默认值 `False` 时，当复制其所属的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 时，它将不会被传播，这在使用 ORM 声明性混合时很常见。
- en: 'References: [#9773](https://www.sqlalchemy.org/trac/ticket/9773)'
  id: totrans-703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9773](https://www.sqlalchemy.org/trac/ticket/9773)
- en: tests
  id: totrans-704
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug] [pypy]**'
  id: totrans-705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug] [pypy]**'
- en: Fixed test that relied on the `sys.getsizeof()` function to not run on pypy,
    where this function appears to have different behavior than it does on cpython.
  id: totrans-706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了依赖于 `sys.getsizeof()` 函数不在 pypy 上运行的测试问题，在 pypy 上，该函数似乎具有与 cpython 不同的行为。
- en: 'References: [#9789](https://www.sqlalchemy.org/trac/ticket/9789)'
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9789](https://www.sqlalchemy.org/trac/ticket/9789)
- en: 2.0.13
  id: totrans-708
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.13
- en: 'Released: May 10, 2023'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023 年 5 月 10 日
- en: orm
  id: totrans-710
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where ORM Annotated Declarative would not resolve forward references
    correctly in all cases; in particular, when using `from __future__ import annotations`
    in combination with Pydantic dataclasses.
  id: totrans-712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 声明式注释在所有情况下无法正确解析前向引用的问题；特别是在与 Pydantic 数据类结合使用 `from __future__ import
    annotations` 时。
- en: 'References: [#9717](https://www.sqlalchemy.org/trac/ticket/9717)'
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9717](https://www.sqlalchemy.org/trac/ticket/9717)
- en: '**[orm] [bug]**'
  id: totrans-714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in new [Using RETURNING with upsert statements](../orm/queryguide/dml.html#orm-queryguide-upsert-returning)
    feature where the `populate_existing` execution option was not being propagated
    to the loading option, preventing existing attributes from being refreshed in-place.
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[使用 RETURNING 与 upsert 语句](../orm/queryguide/dml.html#orm-queryguide-upsert-returning)功能中的问题，其中
    `populate_existing` 执行选项未被传播到加载选项，导致现有属性无法被就地刷新。
- en: 'References: [#9746](https://www.sqlalchemy.org/trac/ticket/9746)'
  id: totrans-716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9746](https://www.sqlalchemy.org/trac/ticket/9746)
- en: '**[orm] [bug]**'
  id: totrans-717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed loader strategy pathing issues where eager loaders such as [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") / [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") would fail to traverse fully for many-levels deep
    following a load that had a [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") or similar construct as an interim member.
  id: totrans-718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了加载器策略路径问题，例如 [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") / [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") 将无法完全遍历多层次深度的加载问题，后跟具有 [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") 或类似构造的中间成员。
- en: 'References: [#9715](https://www.sqlalchemy.org/trac/ticket/9715)'
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9715](https://www.sqlalchemy.org/trac/ticket/9715)
- en: '**[orm] [bug]**'
  id: totrans-720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct where the correct warning for “column
    X named directly multiple times” would not be emitted when ORM mapped attributes
    referred to the same [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), if the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct were involved, raising an internal assertion
    instead.
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 构造中的问题，当 ORM 映射属性引用相同的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 时，如果涉及 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 构造，将不会发出“直接多次命名列 X”的正确警告，而是引发内部断言。
- en: 'References: [#9630](https://www.sqlalchemy.org/trac/ticket/9630)'
  id: totrans-722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9630](https://www.sqlalchemy.org/trac/ticket/9630)
- en: sql
  id: totrans-723
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Implemented the “cartesian product warning” for UPDATE and DELETE statements,
    those which include multiple tables that are not correlated together in some way.
  id: totrans-725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了对包含多个未相关的表的 UPDATE 和 DELETE 语句的“笛卡尔积警告”。
- en: 'References: [#9721](https://www.sqlalchemy.org/trac/ticket/9721)'
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9721](https://www.sqlalchemy.org/trac/ticket/9721)
- en: '**[sql] [bug]**'
  id: totrans-727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed the base class for dialect-specific float/double types; Oracle [`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE") now subclasses [`Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double"), and internal types for [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") for asyncpg and pg8000 now correctly subclass [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float").
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了特定方言浮点/双精度类型的基类；Oracle [`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE") 现在是 [`Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double") 的子类，而用于 asyncpg 和 pg8000 的内部类型现在正确地是 [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 的子类。
- en: '**[sql] [bug]**'
  id: totrans-729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") construct that included multiple tables and
    no VALUES clause would raise with an internal error. Current behavior for [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") with no values is to generate a SQL UPDATE
    statement with an empty “set” clause, so this has been made consistent for this
    specific sub-case.
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了包含多个表且没有 VALUES 子句的 [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 构造会引发内部错误的问题。当前对于没有值的 [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") 的行为是生成一个带有空“set”子句的 SQL UPDATE 语句，因此对于这个特定子情况已经保持一致。
- en: schema
  id: totrans-731
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [performance]**'
  id: totrans-732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [performance]**'
- en: Improved how table columns are added, avoiding unnecessary allocations, significantly
    speeding up the creation of many table, like when reflecting entire schemas.
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了添加表列的方式，避免了不必要的分配，显著加快了创建许多表的速度，比如在反射整个模式时。
- en: 'References: [#9597](https://www.sqlalchemy.org/trac/ticket/9597)'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9597](https://www.sqlalchemy.org/trac/ticket/9597)
- en: typing
  id: totrans-735
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing for the [`Session.get.with_for_update`](../orm/session_api.html#sqlalchemy.orm.Session.get.params.with_for_update
    "sqlalchemy.orm.Session.get") parameter of [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") and [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") (as well as corresponding methods on [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")) to accept boolean `True` and all other
    argument forms accepted by the parameter at runtime.
  id: totrans-737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    和 [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")（以及 [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") 上的相应方法）的 [`Session.get.with_for_update`](../orm/session_api.html#sqlalchemy.orm.Session.get.params.with_for_update
    "sqlalchemy.orm.Session.get") 参数的类型，以接受布尔值 `True` 和运行时参数接受的所有其他形式。
- en: 'References: [#9762](https://www.sqlalchemy.org/trac/ticket/9762)'
  id: totrans-738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9762](https://www.sqlalchemy.org/trac/ticket/9762)
- en: '**[typing] [sql]**'
  id: totrans-739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [sql]**'
- en: Added type [`ColumnExpressionArgument`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnExpressionArgument
    "sqlalchemy.sql.expression.ColumnExpressionArgument") as a public-facing type
    that indicates column-oriented arguments which are passed to SQLAlchemy constructs,
    such as [`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where"), [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") and others. This may be used to add typing to
    end-user functions which call these methods.
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了类型 [`ColumnExpressionArgument`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnExpressionArgument
    "sqlalchemy.sql.expression.ColumnExpressionArgument") 作为一个公共类型，指示传递给 SQLAlchemy
    构造的面向列的参数，例如 [`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where")、[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") 等。这可以用于为调用这些方法的最终用户函数添加类型。
- en: 'References: [#9656](https://www.sqlalchemy.org/trac/ticket/9656)'
  id: totrans-741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9656](https://www.sqlalchemy.org/trac/ticket/9656)
- en: asyncio
  id: totrans-742
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [usecase]**'
  id: totrans-743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [usecase]**'
- en: Added a new helper mixin [`AsyncAttrs`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs") that seeks to improve the use of lazy-loader
    and other expired or deferred ORM attributes with asyncio, providing a simple
    attribute accessor that provides an `await` interface to any ORM attribute, whether
    or not it needs to emit SQL.
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的辅助混合类 [`AsyncAttrs`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs")，旨在改进使用 asyncio 的延迟加载器和其他已过期或延迟的 ORM 属性，提供一个简单的属性访问器，为任何
    ORM 属性提供一个 `await` 接口，无论它是否需要发出 SQL。
- en: See also
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AsyncAttrs`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs")'
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`AsyncAttrs`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs")'
- en: 'References: [#9731](https://www.sqlalchemy.org/trac/ticket/9731)'
  id: totrans-747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9731](https://www.sqlalchemy.org/trac/ticket/9731)
- en: '**[asyncio] [bug]**'
  id: totrans-748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [bug]**'
- en: Fixed issue in semi-private `await_only()` and `await_fallback()` concurrency
    functions where the given awaitable would remain un-awaited if the function threw
    a `GreenletError`, which could cause “was not awaited” warnings later on if the
    program continued. In this case, the given awaitable is now cancelled before the
    exception is thrown.
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了半私有的 `await_only()` 和 `await_fallback()` 并发函数中的问题，如果函数抛出 `GreenletError`，则给定的可等待对象将保持未等待状态，这可能会导致程序后续出现“未等待”警告。在这种情况下，在抛出异常之前，给定的可等待对象现在将被取消。
- en: postgresql
  id: totrans-750
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [regression]**'
- en: Fixed another regression due to the “insertmanyvalues” change in 2.0.10 as part
    of [#9618](https://www.sqlalchemy.org/trac/ticket/9618), in a similar way as regression
    [#9701](https://www.sqlalchemy.org/trac/ticket/9701), where [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") datatypes also need additional casts on when using
    the asyncpg driver specifically in order to work with the new bulk INSERT format.
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 2.0.10 中“insertmanyvalues”更改导致的另一个回归问题，类似于回归问题[#9701](https://www.sqlalchemy.org/trac/ticket/9701)，在使用
    asyncpg 驱动程序时，[`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") 数据类型也需要额外的转换以便与新的批量插入格式一起使用。
- en: 'References: [#9739](https://www.sqlalchemy.org/trac/ticket/9739)'
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9739](https://www.sqlalchemy.org/trac/ticket/9739)
- en: oracle
  id: totrans-754
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [reflection]**'
  id: totrans-755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [reflection]**'
- en: Added reflection support in the Oracle dialect to expression based indexes and
    the ordering direction of index expressions.
  id: totrans-756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Oracle 方言中为基于表达式的索引和索引表达式的排序方向添加了反射支持。
- en: 'References: [#9597](https://www.sqlalchemy.org/trac/ticket/9597)'
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9597](https://www.sqlalchemy.org/trac/ticket/9597)
- en: misc
  id: totrans-758
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed issue in [`Mutable`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable
    "sqlalchemy.ext.mutable.Mutable") where event registration for ORM mapped attributes
    would be called repeatedly for mapped inheritance subclasses, leading to duplicate
    events being invoked in inheritance hierarchies.
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Mutable`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable
    "sqlalchemy.ext.mutable.Mutable")中的问题，其中为 ORM 映射属性注册事件会在映射继承子类中重复调用，导致在继承层次结构中调用重复事件。
- en: 'References: [#9676](https://www.sqlalchemy.org/trac/ticket/9676)'
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9676](https://www.sqlalchemy.org/trac/ticket/9676)
- en: 2.0.12
  id: totrans-762
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.12
- en: 'Released: April 30, 2023'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年4月30日
- en: orm
  id: totrans-764
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed critical caching issue where the combination of [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") and [`hybrid_property()`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") expression compositions would cause a
    cache key mismatch, leading to cache keys that held onto the actual [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") object while also not matching that of equivalent constructs,
    filling up the cache.
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了严重的缓存问题，其中[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")和[`hybrid_property()`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")表达式组合的组合会导致缓存键不匹配，导致缓存键持有实际[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")对象，同时又不匹配相等结构的缓存键，填充了缓存。
- en: 'This change is also **backported** to: 1.4.48'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：1.4.48
- en: 'References: [#9728](https://www.sqlalchemy.org/trac/ticket/9728)'
  id: totrans-768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9728](https://www.sqlalchemy.org/trac/ticket/9728)
- en: mysql
  id: totrans-769
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [mariadb]**'
  id: totrans-770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [mariadb]**'
- en: Fixed issues regarding reflection of comments for [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, where the comments contained control characters
    such as newlines. Additional testing support for these characters as well as extended
    Unicode characters in table and column comments (the latter of which aren’t supported
    by MySQL/MariaDB) added to testing overall.
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")和[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的注释反射问题，其中注释包含控制字符，如换行符。对于这些字符以及扩展的 Unicode 字符在表和列注释中的测试支持也已添加到总体测试中。
- en: 'References: [#9722](https://www.sqlalchemy.org/trac/ticket/9722)'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9722](https://www.sqlalchemy.org/trac/ticket/9722)
- en: 2.0.11
  id: totrans-773
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.11
- en: 'Released: April 26, 2023'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年4月26日
- en: orm
  id: totrans-775
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: 'The [ORM bulk INSERT and UPDATE](../orm/queryguide/dml.html#orm-expression-update-delete)
    features now add these capabilities:'
  id: totrans-777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM 批量 INSERT 和 UPDATE](../orm/queryguide/dml.html#orm-expression-update-delete)
    现在添加了这些功能：'
- en: The requirement that extra parameters aren’t passed when using ORM INSERT using
    the “orm” dml_strategy setting is lifted.
  id: totrans-778
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“orm” dml_strategy 设置时，不再需要传递额外参数的要求。
- en: The requirement that additional WHERE criteria is not passed when using ORM
    UPDATE using the “bulk” dml_strategy setting is lifted. Note that in this case,
    the check for expected row count is turned off.
  id: totrans-779
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ORM UPDATE 时，不再需要满足“bulk” dml_strategy 设置时不传递额外的 WHERE 条件的要求。注意，在这种情况下，预期行数的检查被关闭了。
- en: 'References: [#9583](https://www.sqlalchemy.org/trac/ticket/9583), [#9595](https://www.sqlalchemy.org/trac/ticket/9595)'
  id: totrans-780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9583](https://www.sqlalchemy.org/trac/ticket/9583), [#9595](https://www.sqlalchemy.org/trac/ticket/9595)
- en: '**[orm] [bug]**'
  id: totrans-781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 2.0 regression where use of [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") inside of [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") would fail to be interpreted correctly
    when executing the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") statement using the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), due to the new [ORM-enabled insert feature](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    not implementing this use case.
  id: totrans-782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 2.0 中的回归问题，其中在使用 ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 执行 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 语句时，在 [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 中使用 [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 将无法被正确解释，因为新的 [ORM 启用的插入功能](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    没有实现这种用例。
- en: 'References: [#9583](https://www.sqlalchemy.org/trac/ticket/9583), [#9595](https://www.sqlalchemy.org/trac/ticket/9595)'
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9583](https://www.sqlalchemy.org/trac/ticket/9583), [#9595](https://www.sqlalchemy.org/trac/ticket/9595)
- en: engine
  id: totrans-784
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [performance]**'
  id: totrans-785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [performance]**'
- en: 'A series of performance enhancements to [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row"):'
  id: totrans-786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")进行了一系列性能增强：
- en: '`__getattr__` performance of the row’s “named tuple” interface has been improved;
    within this change, the [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") implementation has been streamlined, removing constructs
    and logic that were specific to the 1.4 and prior series of SQLAlchemy. As part
    of this change, the serialization format of [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") has been modified slightly, however rows which were pickled
    with previous SQLAlchemy 2.0 releases will be recognized within the new format.
    Pull request courtesy J. Nick Koston.'
  id: totrans-787
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__getattr__` 方法在行的“命名元组”接口的性能得到了提升；在这个变化中，[`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 的实现已经简化，移除了在 1.4 版本及以前的 SQLAlchemy 中特有的构造和逻辑。作为这一变化的一部分，[`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 的序列化格式已经略微修改，然而使用之前的 SQLAlchemy 2.0 版本进行 pickle 的行将在新格式中被识别。Pull
    request 由 J. Nick Koston 提供。'
- en: Improved row processing performance for “binary” datatypes by making the “bytes”
    handler conditional on a per driver basis. As a result, the “bytes” result handler
    has been removed for nearly all drivers other than psycopg2, all of which in modern
    forms support returning Python “bytes” directly. Pull request courtesy J. Nick
    Koston.
  id: totrans-788
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使“bytes”处理程序在每个驱动程序基础上具有条件性，改进了“二进制”数据类型的行处理性能。因此，除了 psycopg2 之外的几乎所有现代形式的驱动程序都已删除了“bytes”结果处理程序，它们都支持直接返回
    Python “bytes”。Pull request 由 J. Nick Koston 提供。
- en: Additional refactorings inside of [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") to improve performance by Federico Caselli.
  id: totrans-789
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    内部进行了进一步的重构，以提高性能。由 Federico Caselli 提供。
- en: 'References: [#9678](https://www.sqlalchemy.org/trac/ticket/9678), [#9680](https://www.sqlalchemy.org/trac/ticket/9680)'
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9678](https://www.sqlalchemy.org/trac/ticket/9678)、[#9680](https://www.sqlalchemy.org/trac/ticket/9680)
- en: '**[engine] [bug] [regression]**'
  id: totrans-791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [regression]**'
- en: Fixed regression which prevented the [`URL.normalized_query`](../core/engines.html#sqlalchemy.engine.URL.normalized_query
    "sqlalchemy.engine.URL.normalized_query") attribute of [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") from functioning.
  id: totrans-792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止 [`URL.normalized_query`](../core/engines.html#sqlalchemy.engine.URL.normalized_query
    "sqlalchemy.engine.URL.normalized_query") 属性正常运行的回归问题。
- en: 'References: [#9682](https://www.sqlalchemy.org/trac/ticket/9682)'
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9682](https://www.sqlalchemy.org/trac/ticket/9682)
- en: sql
  id: totrans-794
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Added support for slice access with [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection"), e.g. `table.c[0:5]`, `subquery.c[:-1]`
    etc. Slice access returns a sub [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") in the same way as passing a tuple
    of keys. This is a natural continuation of the key-tuple access added for [#8285](https://www.sqlalchemy.org/trac/ticket/8285),
    where it appears to be an oversight that the slice access use case was omitted.
  id: totrans-796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 的切片访问支持，例如 `table.c[0:5]`、`subquery.c[:-1]`
    等。切片访问返回一个子 [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，方式与传递键元组相同。这是对 [#8285](https://www.sqlalchemy.org/trac/ticket/8285)
    添加的键元组访问的自然延续，其中切片访问用例被省略似乎是一个疏忽。
- en: 'References: [#8285](https://www.sqlalchemy.org/trac/ticket/8285)'
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8285](https://www.sqlalchemy.org/trac/ticket/8285)
- en: typing
  id: totrans-798
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Improved typing of [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") to indicate that it support also [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") as index objects, not only string names. Pull request
    courtesy Andy Freeland.
  id: totrans-800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对 [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    的类型标注，以表明它还支持 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    作为索引对象，而不仅仅是字符串名称。Pull request 由 Andy Freeland 提供。
- en: 'References: [#9644](https://www.sqlalchemy.org/trac/ticket/9644)'
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9644](https://www.sqlalchemy.org/trac/ticket/9644)
- en: postgresql
  id: totrans-802
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [regression]**'
- en: Fixed critical regression caused by [#9618](https://www.sqlalchemy.org/trac/ticket/9618),
    which modified the architecture of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature for 2.0.10, which caused floating point values to lose all decimal places
    when being inserted using the insertmanyvalues feature with either the psycopg2
    or psycopg drivers.
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#9618](https://www.sqlalchemy.org/trac/ticket/9618)引起的严重回归，该回归修改了2.0.10的[insertmanyvalues](../glossary.html#term-insertmanyvalues)功能的架构，导致使用psycopg2或psycopg驱动程序使用insertmanyvalues功能插入时，浮点值失去所有小数位。
- en: 'References: [#9701](https://www.sqlalchemy.org/trac/ticket/9701)'
  id: totrans-805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9701](https://www.sqlalchemy.org/trac/ticket/9701)
- en: mssql
  id: totrans-806
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Implemented the [`Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double") type for SQL Server, where it will render `DOUBLE PRECISION`
    at DDL time. This is implemented using a new MSSQL datatype [`DOUBLE_PRECISION`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DOUBLE_PRECISION
    "sqlalchemy.dialects.mssql.DOUBLE_PRECISION") which also may be used directly.
  id: totrans-808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQL Server实现了[`Double`](../core/type_basics.html#sqlalchemy.types.Double "sqlalchemy.types.Double")类型，在DDL时将渲染`DOUBLE
    PRECISION`。这是使用新的MSSQL数据类型[`DOUBLE_PRECISION`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DOUBLE_PRECISION
    "sqlalchemy.dialects.mssql.DOUBLE_PRECISION")实现的，也可以直接使用。
- en: oracle
  id: totrans-809
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue in Oracle dialects where `Decimal` returning types such as [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") would return floating point values, rather than `Decimal`
    objects, when these columns were used in the [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") clause to return INSERTed values.
  id: totrans-811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle方言中的问题，例如在使用[`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning")子句返回INSERT的值时，`Decimal`返回类型（例如[`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")）会返回浮点值，而不是`Decimal`对象的问题。
- en: 2.0.10
  id: totrans-812
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.10
- en: 'Released: April 21, 2023'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年4月21日
- en: orm
  id: totrans-814
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-815
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where various ORM-specific getters such as [`ORMExecuteState.is_column_load`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_column_load
    "sqlalchemy.orm.ORMExecuteState.is_column_load"), [`ORMExecuteState.is_relationship_load`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_relationship_load
    "sqlalchemy.orm.ORMExecuteState.is_relationship_load"), [`ORMExecuteState.loader_strategy_path`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.loader_strategy_path
    "sqlalchemy.orm.ORMExecuteState.loader_strategy_path") etc. would throw an `AttributeError`
    if the SQL statement itself were a “compound select” such as a UNION.
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了各种ORM特定的获取器，例如[`ORMExecuteState.is_column_load`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_column_load
    "sqlalchemy.orm.ORMExecuteState.is_column_load")，[`ORMExecuteState.is_relationship_load`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_relationship_load
    "sqlalchemy.orm.ORMExecuteState.is_relationship_load")，[`ORMExecuteState.loader_strategy_path`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.loader_strategy_path
    "sqlalchemy.orm.ORMExecuteState.loader_strategy_path") 等，如果SQL语句本身是“复合选择”，如UNION，则会抛出`AttributeError`。
- en: 'This change is also **backported** to: 1.4.48'
  id: totrans-817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.4.48
- en: 'References: [#9634](https://www.sqlalchemy.org/trac/ticket/9634)'
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9634](https://www.sqlalchemy.org/trac/ticket/9634)
- en: '**[orm] [bug]**'
  id: totrans-819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`declared_attr.directive()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.directive
    "sqlalchemy.orm.declared_attr.directive") modifier was not correctly honored for
    subclasses when applied to the `__mapper_args__` special method name, as opposed
    to direct use of [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr"). The two constructs should have identical runtime
    behaviors.
  id: totrans-820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当应用于`__mapper_args__`特殊方法名时，[`declared_attr.directive()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.directive
    "sqlalchemy.orm.declared_attr.directive")修改器未正确地应用于子类的问题，与直接使用[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")相反。这两种构造在运行时行为应该相同。
- en: 'References: [#9625](https://www.sqlalchemy.org/trac/ticket/9625)'
  id: totrans-821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9625](https://www.sqlalchemy.org/trac/ticket/9625)
- en: '**[orm] [bug]**'
  id: totrans-822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Made an improvement to the [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") loader option to allow it to be indicated
    in the [`Executable.options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") method of a top-level statement
    that is not itself an ORM statement. Examples include [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") that’s embedded in compound statements such
    as [`union()`](../core/selectable.html#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union"),
    within an [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") construct, as well as within CTE
    expressions that are not ORM related at the top level.
  id: totrans-823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") 加载器选项进行了改进，允许在不是 ORM 语句本身的顶级语句的 [`Executable.options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") 方法中指示它。示例包括嵌入在诸如 [`union()`](../core/selectable.html#sqlalchemy.sql.expression.union
    "sqlalchemy.sql.expression.union") 的复合语句中的 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")，在 [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") 构造中，以及在不是 ORM 相关的顶级 CTE 表达式中。
- en: 'References: [#9635](https://www.sqlalchemy.org/trac/ticket/9635)'
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9635](https://www.sqlalchemy.org/trac/ticket/9635)
- en: '**[orm] [bug]**'
  id: totrans-825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in ORM bulk insert feature where additional unnecessary columns would
    be rendered in the INSERT statement if RETURNING of individual columns were requested.
  id: totrans-826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 批量插入功能中的错误，如果请求返回单独列，则在 INSERT 语句中会渲染出额外的不必要列。
- en: 'References: [#9685](https://www.sqlalchemy.org/trac/ticket/9685)'
  id: totrans-827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9685](https://www.sqlalchemy.org/trac/ticket/9685)
- en: '**[orm] [bug]**'
  id: totrans-828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in ORM Declarative Dataclasses where the [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") and [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") constructs, which are documented as read-only
    constructs in the context of a Declarative mapping, could not be used with a [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") class without adding `init=False`, which in
    the case of [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") was not possible as no `init` parameter was
    included. These constructs have been modified from a dataclass perspective to
    be assumed to be “read only”, setting `init=False` by default and no longer including
    them in the pep-681 constructor. The dataclass parameters for [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") `init`, `default`, `default_factory`, `kw_only`
    are now deprecated; these fields don’t apply to [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") as used in a Declarative dataclasses configuration
    where the construct would be read-only. Also added read-specific parameter [`query_expression.compare`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.compare
    "sqlalchemy.orm.query_expression") to [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression"); [`query_expression.repr`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.repr
    "sqlalchemy.orm.query_expression") was already present.
  id: totrans-829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 ORM 声明式数据类中修复了一个错误，[`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") 和 [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") 构造被记录为只读构造，不能在没有添加 `init=False` 的情况下与 [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") 类一起使用，而在 [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") 中没有可能添加 `init` 参数，因此这个问题不可避免。这些构造已从数据类的角度进行了修改，假定为“只读”，默认设置
    `init=False`，并不再包含在 pep-681 构造函数中。[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") 的数据类参数 `init`、`default`、`default_factory`、`kw_only`
    现已弃用；这些字段不适用于在 Declarative 数据类配置中使用的 [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")，因为该构造将是只读的。还为 [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") 添加了一个特定于读取的参数 [`query_expression.compare`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.compare
    "sqlalchemy.orm.query_expression")；[`query_expression.repr`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.repr
    "sqlalchemy.orm.query_expression") 已经存在。
- en: 'References: [#9628](https://www.sqlalchemy.org/trac/ticket/9628)'
  id: totrans-830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9628](https://www.sqlalchemy.org/trac/ticket/9628)
- en: '**[orm] [bug]**'
  id: totrans-831
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Added missing [`mapped_column.active_history`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.active_history
    "sqlalchemy.orm.mapped_column") parameter to [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct.
  id: totrans-832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    构造添加了缺失的 [`mapped_column.active_history`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.active_history
    "sqlalchemy.orm.mapped_column") 参数。
- en: engine
  id: totrans-833
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [usecase]**'
  id: totrans-834
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [用例]**'
- en: Added [`create_pool_from_url()`](../core/engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url") and [`create_async_pool_from_url()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_pool_from_url
    "sqlalchemy.ext.asyncio.create_async_pool_from_url") to create a [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") instance from an input url passed as string or `URL`.
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 [`create_pool_from_url()`](../core/engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url") 和 [`create_async_pool_from_url()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_pool_from_url
    "sqlalchemy.ext.asyncio.create_async_pool_from_url") 来自字符串或 `URL` 传入的输入 url 创建
    [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool") 实例。
- en: 'References: [#9613](https://www.sqlalchemy.org/trac/ticket/9613)'
  id: totrans-836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9613](https://www.sqlalchemy.org/trac/ticket/9613)
- en: '**[engine] [bug]**'
  id: totrans-837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Repaired a major shortcoming which was identified in the [“Insert Many Values”
    Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    performance optimization feature first introduced in the 2.0 series. This was
    a continuation of the change in 2.0.9 which disabled the SQL Server version of
    the feature due to a reliance in the ORM on apparent row ordering that is not
    guaranteed to take place. The fix applies new logic to all “insertmanyvalues”
    operations, which takes effect when a new parameter [`Insert.returning.sort_by_parameter_order`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") on the [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") or [`UpdateBase.return_defaults()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") methods, that through
    a combination of alternate SQL forms, direct correspondence of client side parameters,
    and in some cases downgrading to running row-at-a-time, will apply sorting to
    each batch of returned rows using correspondence to primary key or other unique
    values in each row which can be correlated to the input data.
  id: totrans-838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 2.0 系列首次引入的 [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    性能优化功能中发现的一个主要缺陷。这是对 2.0.9 中的更改的延续，该更改禁用了 SQL Server 版本的功能，因为 ORM 依赖于似乎不保证发生的行排序。该修复为所有“insertmanyvalues”操作应用了新逻辑，当在
    [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") 或 [`UpdateBase.return_defaults()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") 方法上设置了一个新参数 [`Insert.returning.sort_by_parameter_order`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") 时生效，通过一种交替的 SQL 形式、客户端参数的直接对应以及在某些情况下降级到逐行运行，将对每个返回行批次应用与主键或其他唯一值的对应关系，这些值可以与输入数据相关联。
- en: Performance impact is expected to be minimal as nearly all common primary key
    scenarios are suitable for parameter-ordered batching to be achieved for all backends
    other than SQLite, while “row-at-a-time” mode operates with a bare minimum of
    Python overhead compared to the very heavyweight approaches used in the 1.x series.
    For SQLite, there is no difference in performance when “row-at-a-time” mode is
    used.
  id: totrans-839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预计性能影响将是最小的，因为几乎所有常见的主键场景都适合于在除了 SQLite 之外的所有后端实现参数排序批处理，而“逐行”模式与 1.x 系列中使用的非常沉重的方法相比，具有最少的
    Python 开销。对于 SQLite，当使用“逐行”模式时，性能没有区别。
- en: It’s anticipated that with an efficient “row-at-a-time” INSERT with RETURNING
    batching capability, the “insertmanyvalues” feature can be later be more easily
    generalized to third party backends that include RETURNING support but not necessarily
    easy ways to guarantee a correspondence with parameter order.
  id: totrans-840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预计通过具有高效的“逐行”INSERT与RETURNING批处理功能，后续可以更容易地将“insertmanyvalues”功能推广到包括RETURNING支持但不一定易于保证与参数顺序对应的第三方后端。
- en: See also
  id: totrans-841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correlating RETURNING rows to parameter sets](../core/connections.html#engine-insertmanyvalues-returning-order)'
  id: totrans-842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将返回的行与参数集相关联](../core/connections.html#engine-insertmanyvalues-returning-order)'
- en: 'References: [#9603](https://www.sqlalchemy.org/trac/ticket/9603), [#9618](https://www.sqlalchemy.org/trac/ticket/9618)'
  id: totrans-843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9603](https://www.sqlalchemy.org/trac/ticket/9603), [#9618](https://www.sqlalchemy.org/trac/ticket/9618)
- en: typing
  id: totrans-844
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Added typing information for recently added operators [`ColumnOperators.icontains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains"), [`ColumnOperators.istartswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"), [`ColumnOperators.iendswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"), and bitwise operators
    [`ColumnOperators.bitwise_and()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and"), [`ColumnOperators.bitwise_or()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or"), [`ColumnOperators.bitwise_xor()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor"), [`ColumnOperators.bitwise_not()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not"), [`ColumnOperators.bitwise_lshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") [`ColumnOperators.bitwise_rshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift"). Pull request courtesy
    Martijn Pieters.
  id: totrans-846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为最近添加的运算符 [`ColumnOperators.icontains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains")、[`ColumnOperators.istartswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")、[`ColumnOperators.iendswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") 和位运算符 [`ColumnOperators.bitwise_and()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and")、[`ColumnOperators.bitwise_or()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or")、[`ColumnOperators.bitwise_xor()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor")、[`ColumnOperators.bitwise_not()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not")、[`ColumnOperators.bitwise_lshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") 和 [`ColumnOperators.bitwise_rshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") 添加了类型信息。感谢 Martijn
    Pieters 的拉取请求。
- en: 'References: [#9650](https://www.sqlalchemy.org/trac/ticket/9650)'
  id: totrans-847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9650](https://www.sqlalchemy.org/trac/ticket/9650)
- en: '**[typing] [bug]**'
  id: totrans-848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Updates to the codebase to pass typing with Mypy 1.2.0.
  id: totrans-849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对代码库进行更新，以通过 Mypy 1.2.0 的类型检查。
- en: '**[typing] [bug]**'
  id: totrans-850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue where [`PropComparator.and_()`](../orm/internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") expressions would not be correctly typed
    inside of loader options such as [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload").
  id: totrans-851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在加载器选项中（如 [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")）中，[`PropComparator.and_()`](../orm/internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") 表达式未正确类型化的问题。
- en: 'References: [#9669](https://www.sqlalchemy.org/trac/ticket/9669)'
  id: totrans-852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9669](https://www.sqlalchemy.org/trac/ticket/9669)
- en: postgresql
  id: totrans-853
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added `prepared_statement_name_func` connection argument option in the asyncpg
    dialect. This option allows passing a callable used to customize the name of the
    prepared statement that will be created by the driver when executing queries.
    Pull request courtesy Pavel Sirotkin.
  id: totrans-855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 asyncpg 方言中添加了 `prepared_statement_name_func` 连接参数选项。此选项允许传递一个可调用对象，用于自定义执行查询时驱动程序将创建的准备语句的名称。感谢
    Pavel Sirotkin 的拉取请求。
- en: See also
  id: totrans-856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Prepared Statement Name with PGBouncer](../dialects/postgresql.html#asyncpg-prepared-statement-name)'
  id: totrans-857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 PGBouncer 的预准备语句名称](../dialects/postgresql.html#asyncpg-prepared-statement-name)'
- en: 'References: [#9608](https://www.sqlalchemy.org/trac/ticket/9608)'
  id: totrans-858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9608](https://www.sqlalchemy.org/trac/ticket/9608)
- en: '**[postgresql] [usecase]**'
  id: totrans-859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Add missing [`Range.intersection()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.intersection
    "sqlalchemy.dialects.postgresql.Range.intersection") method. Pull request courtesy
    Yurii Karabas.
  id: totrans-860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了缺失的 [`Range.intersection()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.intersection
    "sqlalchemy.dialects.postgresql.Range.intersection") 方法。感谢 Yurii Karabas 的拉取请求。
- en: 'References: [#9509](https://www.sqlalchemy.org/trac/ticket/9509)'
  id: totrans-861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9509](https://www.sqlalchemy.org/trac/ticket/9509)
- en: '**[postgresql] [bug]**'
  id: totrans-862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Restored the [`ENUM.name`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.name
    "sqlalchemy.dialects.postgresql.ENUM") parameter as optional in the signature
    for [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM"),
    as this is chosen automatically from a given pep-435 `Enum` type.
  id: totrans-863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM")
    的签名中，恢复了 [`ENUM.name`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.name
    "sqlalchemy.dialects.postgresql.ENUM") 参数作为可选参数，因为这是根据给定的 pep-435 `Enum` 类型自动选择的。
- en: 'References: [#9611](https://www.sqlalchemy.org/trac/ticket/9611)'
  id: totrans-864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9611](https://www.sqlalchemy.org/trac/ticket/9611)
- en: '**[postgresql] [bug]**'
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the comparison for [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") against a plain string would cast that
    right-hand side type as VARCHAR, which due to more explicit casting added to dialects
    such as asyncpg would produce a PostgreSQL type mismatch error.
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对普通字符串进行 [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 比较时将右侧类型转换为 VARCHAR 的问题，这是由于在诸如 asyncpg
    等方言中添加了更明确的转换而导致的 PostgreSQL 类型不匹配错误。
- en: 'References: [#9621](https://www.sqlalchemy.org/trac/ticket/9621)'
  id: totrans-867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9621](https://www.sqlalchemy.org/trac/ticket/9621)
- en: '**[postgresql] [bug]**'
  id: totrans-868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue that prevented reflection of expression based indexes with long
    expressions in PostgreSQL. The expression where erroneously truncated to the identifier
    length (that’s 63 bytes by default).
  id: totrans-869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 PostgreSQL 中无法反射基于表达式的长表达式索引的问题。表达式错误地被截断为标识符长度（默认为 63 字节）。
- en: 'References: [#9615](https://www.sqlalchemy.org/trac/ticket/9615)'
  id: totrans-870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9615](https://www.sqlalchemy.org/trac/ticket/9615)
- en: mssql
  id: totrans-871
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Restored the [insertmanyvalues](../glossary.html#term-insertmanyvalues) feature
    for Microsoft SQL Server. This feature was disabled in version 2.0.9 due to an
    apparent reliance on the ordering of RETURNING that is not guaranteed. The architecture
    of the “insertmanyvalues” feature has been reworked to accommodate for specific
    organizations of INSERT statements and result row handling that can guarantee
    the correspondence of returned rows to input records.
  id: totrans-873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了 Microsoft SQL Server 的 [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    功能。该功能在版本 2.0.9 中被禁用，因为似乎依赖于 RETURNING 的排序，这是不被保证的。"insertmanyvalues" 功能的架构已经重做，以适应
    INSERT 语句的特定组织和可以保证返回行与输入记录对应的结果行处理。
- en: See also
  id: totrans-874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Correlating RETURNING rows to parameter sets](../core/connections.html#engine-insertmanyvalues-returning-order)'
  id: totrans-875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 RETURNING 行与参数集对应](../core/connections.html#engine-insertmanyvalues-returning-order)'
- en: 'References: [#9603](https://www.sqlalchemy.org/trac/ticket/9603), [#9618](https://www.sqlalchemy.org/trac/ticket/9618)'
  id: totrans-876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9603](https://www.sqlalchemy.org/trac/ticket/9603), [#9618](https://www.sqlalchemy.org/trac/ticket/9618)
- en: oracle
  id: totrans-877
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue where the [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype could not be used in an INSERT..RETURNING clause
    with the Oracle dialect.
  id: totrans-879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Oracle 方言的 INSERT..RETURNING 子句中无法使用 [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") 数据类型的问题。
- en: 2.0.9
  id: totrans-880
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.9
- en: 'Released: April 5, 2023'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023 年 4 月 5 日
- en: orm
  id: totrans-882
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed endless loop which could occur when using “relationship to aliased class”
    feature and also indicating a recursive eager loader such as `lazy="selectinload"`
    in the loader, in combination with another eager loader on the opposite side.
    The check for cycles has been fixed to include aliased class relationships.
  id: totrans-884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当使用“关联到别名类”的特性并且在加载器中指定了一个递归的 eager 加载器（如 `lazy="selectinload"`）与另一个相对端的另一个
    eager 加载器结合使用时可能发生的无限循环问题。循环检查已修复以包括别名类关系。
- en: 'This change is also **backported** to: 1.4.48'
  id: totrans-885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也被 **反向移植** 到了：1.4.48
- en: 'References: [#9590](https://www.sqlalchemy.org/trac/ticket/9590)'
  id: totrans-886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9590](https://www.sqlalchemy.org/trac/ticket/9590)
- en: mariadb
  id: totrans-887
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mariadb
- en: '**[mariadb] [bug]**'
  id: totrans-888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [bug]**'
- en: Added `row_number` as reserved word in MariaDb.
  id: totrans-889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MariaDb 中将 `row_number` 添加为保留字。
- en: 'References: [#9588](https://www.sqlalchemy.org/trac/ticket/9588)'
  id: totrans-890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9588](https://www.sqlalchemy.org/trac/ticket/9588)
- en: mssql
  id: totrans-891
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: The SQLAlchemy “insertmanyvalues” feature which allows fast INSERT of many rows
    while also supporting RETURNING is temporarily disabled for SQL Server. As the
    unit of work currently relies upon this feature such that it matches existing
    ORM objects to returned primary key identities, this particular use pattern does
    not work with SQL Server in all cases as the order of rows returned by “OUTPUT
    inserted” may not always match the order in which the tuples were sent, leading
    to the ORM making the wrong decisions about these objects in subsequent operations.
  id: totrans-893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy 的“insertmanyvalues”功能允许快速插入许多行，同时还支持 RETURNING，目前已暂时禁用了 SQL Server。由于工作单元当前依赖于此功能，以便将现有
    ORM 对象匹配到返回的主键标识，因此此特定使用模式在某些情况下无法与 SQL Server 一起使用，因为“OUTPUT inserted” 返回的行的顺序可能并不总是与发送元组的顺序匹配，导致
    ORM 在后续操作中对这些对象做出错误决策。
- en: The feature will be re-enabled in an upcoming release and will again take effect
    for multi-row INSERT statements, however the unit-of-work’s use of the feature
    will be disabled, possibly for all dialects, unless ORM-mapped tables also include
    a “sentinel” column so that the returned rows can be referenced back to the original
    data passed in.
  id: totrans-894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此功能将在即将发布的版本中重新启用，并且将再次对多行 INSERT 语句产生影响，但是工作单元对此功能的使用将被禁用，可能对所有方言都禁用，除非 ORM
    映射的表还包括一个“sentinel”列，以便可以将返回的行引用回传递的原始数据。
- en: 'References: [#9603](https://www.sqlalchemy.org/trac/ticket/9603)'
  id: totrans-895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9603](https://www.sqlalchemy.org/trac/ticket/9603)
- en: '**[mssql] [bug]**'
  id: totrans-896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Changed the bulk INSERT strategy used for SQL Server “executemany” with pyodbc
    when `fast_executemany` is set to `True` by using `fast_executemany` / `cursor.executemany()`
    for bulk INSERT that does not include RETURNING, restoring the same behavior as
    was used in SQLAlchemy 1.4 when this parameter is set.
  id: totrans-897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 `fast_executemany` 设置为 `True` 时，已更改用于 SQL Server 的批量 INSERT 策略“executemany”与
    pyodbc，使用 `fast_executemany` / `cursor.executemany()` 用于不包含 RETURNING 的批量 INSERT，当此参数设置时，恢复了与
    SQLAlchemy 1.4 中使用的相同行为。
- en: New performance details from end users have shown that `fast_executemany` is
    still much faster for very large datasets as it uses ODBC commands that can receive
    all rows in a single round trip, allowing for much larger datasizes than the batches
    that can be sent by “insertmanyvalues” as was implemented for SQL Server.
  id: totrans-898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最新的终端用户性能细节显示，对于非常大的数据集，`fast_executemany` 仍然比较快，因为它使用可以在单次往返中接收所有行的 ODBC 命令，允许比“insertmanyvalues”发送的批次更大得多的数据大小，后者已为
    SQL Server 实现。
- en: While this change was made such that “insertmanyvalues” continued to be used
    for INSERT that includes RETURNING, as well as if `fast_executemany` were not
    set, due to [#9603](https://www.sqlalchemy.org/trac/ticket/9603), the “insertmanyvalues”
    strategy has been disabled for SQL Server across the board in any case.
  id: totrans-899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管此更改使得“insertmanyvalues”仍然被用于包含 RETURNING 的 INSERT，并且如果未设置 `fast_executemany`，由于[#9603](https://www.sqlalchemy.org/trac/ticket/9603)，在任何情况下，“insertmanyvalues”
    策略已被完全禁用于 SQL Server。
- en: 'References: [#9586](https://www.sqlalchemy.org/trac/ticket/9586)'
  id: totrans-900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9586](https://www.sqlalchemy.org/trac/ticket/9586)
- en: 2.0.8
  id: totrans-901
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.8
- en: 'Released: March 31, 2023'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年3月31日
- en: orm
  id: totrans-903
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Exceptions such as `TypeError` and `ValueError` raised by Python dataclasses
    when making use of the [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") mixin class or [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") decorator are now wrapped within
    an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") wrapper along with informative context about
    the error message, referring to the Python dataclasses documentation as the authoritative
    source of background information on the cause of the exception.
  id: totrans-905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") 混合类或 [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") 装饰器时，Python 数据类引发的诸如 `TypeError`
    和 `ValueError` 等异常现在将在一个 [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") 包装器中进行包装，其中包含有关错误消息的信息性上下文，参考 Python 数据类文档作为异常原因的官方来源。
- en: See also
  id: totrans-906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Python dataclasses error encountered when creating dataclass for <classname>](../errors.html#error-dcte)'
  id: totrans-907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[创建<类名>数据类时遇到的 Python 数据类错误](../errors.html#error-dcte)'
- en: 'References: [#9563](https://www.sqlalchemy.org/trac/ticket/9563)'
  id: totrans-908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9563](https://www.sqlalchemy.org/trac/ticket/9563)
- en: '**[orm] [bug]**'
  id: totrans-909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in ORM Annotated Declarative where using a recursive type (e.g.
    using a nested Dict type) would result in a recursion overflow in the ORM’s annotation
    resolution logic, even if this datatype were not necessary to map the column.
  id: totrans-910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 注释声明中的问题，其中使用递归类型（例如使用嵌套的字典类型）会导致 ORM 的注释解析逻辑中发生递归溢出，即使这种数据类型不是必要的来映射列。
- en: 'References: [#9553](https://www.sqlalchemy.org/trac/ticket/9553)'
  id: totrans-911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9553](https://www.sqlalchemy.org/trac/ticket/9553)
- en: '**[orm] [bug]**'
  id: totrans-912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct would raise an internal error if used
    on a Declarative mixin and included the [`mapped_column.deferred`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column") parameter.
  id: totrans-913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Declarative mixin 上使用[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 构造时，如果包含[`mapped_column.deferred`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column") 参数会引发内部错误的问题。
- en: 'References: [#9550](https://www.sqlalchemy.org/trac/ticket/9550)'
  id: totrans-914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9550](https://www.sqlalchemy.org/trac/ticket/9550)
- en: '**[orm] [bug]**'
  id: totrans-915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Expanded the warning emitted when a plain [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") object is present in a Declarative mapping
    to include any arbitrary SQL expression that is not declared within an appropriate
    property type such as [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), [`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred"), etc. These attributes are otherwise not mapped at
    all and remain unchanged within the class dictionary. As it seems likely that
    such an expression is usually not what’s intended, this case now warns for all
    such otherwise ignored expressions, rather than just the [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") case.
  id: totrans-916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 扩展了在声明式映射中存在普通[`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")对象时发出的警告，以包括任何未在适当属性类型内声明的任意 SQL 表达式，例如[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")、[`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred")等。这些属性在类字典中保持不变且未映射。由于这种表达式通常不是预期的内容，因此现在对所有这些否则被忽略的表达式发出警告，而不仅仅是[`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")的情况。
- en: 'References: [#9537](https://www.sqlalchemy.org/trac/ticket/9537)'
  id: totrans-917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9537](https://www.sqlalchemy.org/trac/ticket/9537)
- en: '**[orm] [bug]**'
  id: totrans-918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where accessing the expression value of a hybrid property on
    a class that was either unmapped or not-yet-mapped (such as calling upon it within
    a [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    method) would raise an internal error, as an internal fetch for the parent class’
    mapper would fail and an instruction for this failure to be ignored were inadvertently
    removed in 2.0.
  id: totrans-919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在访问一个混合属性的表达式值时出现的回归问题，该属性位于一个未映射或尚未映射的类上（例如在[`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")方法中调用它），会引发内部错误，因为对父类映射器的内部获取将失败，并且对于此失败的指令被无意中在
    2.0 中删除。
- en: 'References: [#9519](https://www.sqlalchemy.org/trac/ticket/9519)'
  id: totrans-920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9519](https://www.sqlalchemy.org/trac/ticket/9519)
- en: '**[orm] [bug]**'
  id: totrans-921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fields that are declared on Declarative Mixins and then combined with classes
    that make use of [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass"), where those mixin fields are not themselves
    part of a dataclass, now emit a deprecation warning as these fields will be ignored
    in a future release, as Python dataclasses behavior is to ignore these fields.
    Type checkers will not see these fields under pep-681.
  id: totrans-922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在声明式 Mixins 上声明的字段，然后与使用[`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")的类组合在一起，其中这些 Mixin 字段本身不是数据类的一部分，现在会发出弃用警告，因为这些字段将在将来的版本中被忽略，因为
    Python 数据类的行为是忽略这些字段。类型检查器在 pep-681 下不会看到这些字段。
- en: See also
  id: totrans-923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[When transforming <cls> to a dataclass, attribute(s) originate from superclass
    <cls> which is not a dataclass.](../errors.html#error-dcmx) - background on rationale'
  id: totrans-924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[当将<cls>转换为数据类时，属性(s)源自不是数据类的超类<cls>。](../errors.html#error-dcmx) - 关于背景的理由'
- en: '[Using mixins and abstract superclasses](../orm/dataclasses.html#orm-declarative-dc-mixins)'
  id: totrans-925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 Mixins 和抽象超类](../orm/dataclasses.html#orm-declarative-dc-mixins)'
- en: 'References: [#9350](https://www.sqlalchemy.org/trac/ticket/9350)'
  id: totrans-926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9350](https://www.sqlalchemy.org/trac/ticket/9350)
- en: '**[orm] [bug]**'
  id: totrans-927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`BindParameter.render_literal_execute()`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute") method would
    fail when called on a parameter that also had ORM annotations associated with
    it. In practice, this would be observed as a failure of SQL compilation when using
    some combinations of a dialect that uses “FETCH FIRST” such as Oracle along with
    a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct that uses [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit"), within some ORM contexts, including
    if the statement were embedded within a relationship primaryjoin expression.
  id: totrans-928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，其中 [`BindParameter.render_literal_execute()`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute") 方法在调用带有 ORM
    注释的参数时会失败。在实践中，当使用一些类似于 Oracle 的使用“FETCH FIRST”的方言以及使用 [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造的 [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") 的组合时，在一些 ORM 上下文中会观察到这种情况，包括如果该语句嵌入在关系
    primaryjoin 表达式中时，SQL 编译失败。
- en: 'References: [#9526](https://www.sqlalchemy.org/trac/ticket/9526)'
  id: totrans-929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9526](https://www.sqlalchemy.org/trac/ticket/9526)
- en: '**[orm] [bug]**'
  id: totrans-930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Towards maintaining consistency with unit-of-work changes made for [#5984](https://www.sqlalchemy.org/trac/ticket/5984)
    and [#8862](https://www.sqlalchemy.org/trac/ticket/8862), both of which disable
    “lazy=’raise’” handling within [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") processes that aren’t triggered by attribute access,
    the [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") method will now also disable “lazy=’raise’” handling
    when it traverses relationship paths in order to process the “delete” and “delete-orphan”
    cascade rules. Previously, there was no easy way to generically call [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") on an object that had “lazy=’raise’” set up such
    that only the necessary relationships would be loaded. As “lazy=’raise’” is primarily
    intended to catch SQL loading that emits on attribute access, [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") is now made to behave like other [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") methods including [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") as well as [`Session.flush()`](../orm/session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") along with autoflush.
  id: totrans-931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了与为 [#5984](https://www.sqlalchemy.org/trac/ticket/5984) 和 [#8862](https://www.sqlalchemy.org/trac/ticket/8862)
    所做的工作单元一致性保持一致，这两者都禁用了在 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 进程中的“惰性='raise'”处理，这些处理并非由属性访问触发，[`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") 方法现在在遍历关系路径以处理“delete”和“delete-orphan”级联规则时，也将禁用“惰性='raise'”处理。以前，没有简单的方法可以通用地调用
    [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete "sqlalchemy.orm.Session.delete")
    在设置了“惰性='raise'”的对象上，以便只加载必要的关系。由于“惰性='raise'”主要用于捕获在属性访问时发出的 SQL 加载，因此 [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") 现在被制作成像其他 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 方法一样，包括 [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") 以及 [`Session.flush()`](../orm/session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") 以及 autoflush。
- en: 'References: [#9549](https://www.sqlalchemy.org/trac/ticket/9549)'
  id: totrans-932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9549](https://www.sqlalchemy.org/trac/ticket/9549)
- en: '**[orm] [bug]**'
  id: totrans-933
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where an annotation-only [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") directive could not be used in a Declarative mixin class,
    without that attribute attempting to take effect for single- or joined-inheritance
    subclasses of mapped classes that had already mapped that attribute on a superclass,
    producing conflicting column errors and/or warnings.
  id: totrans-934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，其中仅注释的 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    指令无法在声明性混合类中使用，而不会尝试让该属性对已经映射了该属性的超类的单个或联合继承子类产生影响，从而产生冲突的列错误和/或警告。
- en: 'References: [#9564](https://www.sqlalchemy.org/trac/ticket/9564)'
  id: totrans-935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9564](https://www.sqlalchemy.org/trac/ticket/9564)
- en: '**[orm] [bug] [typing]**'
  id: totrans-936
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [typing]**'
- en: Properly type [`Insert.from_select.names`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select.params.names
    "sqlalchemy.sql.expression.Insert.from_select") to accept a list of string or
    columns or mapped attributes.
  id: totrans-937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 适当地对[`Insert.from_select.names`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select.params.names
    "sqlalchemy.sql.expression.Insert.from_select")进行类型定义，以接受字符串列表或列或映射属性。
- en: 'References: [#9514](https://www.sqlalchemy.org/trac/ticket/9514)'
  id: totrans-938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9514](https://www.sqlalchemy.org/trac/ticket/9514)
- en: examples
  id: totrans-939
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed issue in “versioned history” example where using a declarative base that
    is derived from [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") would fail to be mapped. Additionally, repaired
    the given test suite so that the documented instructions for running the example
    using Python unittest now work again.
  id: totrans-941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“版本历史”示例中的问题，使用从[`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")派生的声明性基类会导致映射失败的问题。此外，修复了给定的测试套件，以便通过Python unittest运行示例的文档说明现在再次有效。
- en: typing
  id: totrans-942
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型
- en: '**[typing] [bug]**'
  id: totrans-943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing for [`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") and [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") to work correctly with 2.0 style mappings.
  id: totrans-944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred "sqlalchemy.orm.deferred")和[`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression")在与2.0样式映射正确配合使用时的类型。
- en: 'References: [#9536](https://www.sqlalchemy.org/trac/ticket/9536)'
  id: totrans-945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9536](https://www.sqlalchemy.org/trac/ticket/9536)
- en: postgresql
  id: totrans-946
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed critical regression in PostgreSQL dialects such as asyncpg which rely
    upon explicit casts in SQL in order for datatypes to be passed to the driver correctly,
    where a [`String`](../core/type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    datatype would be cast along with the exact column length being compared, leading
    to implicit truncation when comparing a `VARCHAR` of a smaller length to a string
    of greater length regardless of operator in use (e.g. LIKE, MATCH, etc.). The
    PostgreSQL dialect now omits the length from `VARCHAR` when rendering these casts.
  id: totrans-948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL方言中的关键回归问题，例如asyncpg依赖于SQL中的显式转换，以便将数据类型正确传递给驱动程序，其中[`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")数据类型将与要比较的确切列长度一起转换，导致在比较较小长度的`VARCHAR`与较大长度的字符串时进行隐式截断，而不管使用的操作符是什么（例如LIKE，MATCH等）。
    PostgreSQL方言现在在呈现这些转换时省略`VARCHAR`的长度。
- en: 'References: [#9511](https://www.sqlalchemy.org/trac/ticket/9511)'
  id: totrans-949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9511](https://www.sqlalchemy.org/trac/ticket/9511)
- en: mysql
  id: totrans-950
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue where string datatypes such as [`CHAR`](../core/type_basics.html#sqlalchemy.types.CHAR
    "sqlalchemy.types.CHAR"), [`VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR"), [`TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT"), as well as binary [`BLOB`](../core/type_basics.html#sqlalchemy.types.BLOB
    "sqlalchemy.types.BLOB"), could not be produced with an explicit length of zero,
    which has special meaning for MySQL. Pull request courtesy J. Nick Koston.
  id: totrans-952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了字符串数据类型（如[`CHAR`](../core/type_basics.html#sqlalchemy.types.CHAR "sqlalchemy.types.CHAR")、[`VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR")、[`TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT")），以及二进制[`BLOB`](../core/type_basics.html#sqlalchemy.types.BLOB
    "sqlalchemy.types.BLOB")无法使用零长度明确生成的问题，这在MySQL中具有特殊含义。感谢J. Nick Koston提出的拉取请求。
- en: 'References: [#9544](https://www.sqlalchemy.org/trac/ticket/9544)'
  id: totrans-953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9544](https://www.sqlalchemy.org/trac/ticket/9544)
- en: misc
  id: totrans-954
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [util]**'
  id: totrans-955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [util]**'
- en: Implemented missing methods `copy` and `pop` in OrderedSet class.
  id: totrans-956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在OrderedSet类中实现了缺失的`copy`和`pop`方法。
- en: 'References: [#9487](https://www.sqlalchemy.org/trac/ticket/9487)'
  id: totrans-957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9487](https://www.sqlalchemy.org/trac/ticket/9487)
- en: 2.0.7
  id: totrans-958
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.7
- en: 'Released: March 18, 2023'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年3月18日
- en: typing
  id: totrans-960
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型
- en: '**[typing] [bug]**'
  id: totrans-961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue where [`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") would not allow an arbitrary callable as the source
    of the composite class.
  id: totrans-962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`composite()`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")不允许任意可调用对象作为复合类来源的类型问题。
- en: 'References: [#9502](https://www.sqlalchemy.org/trac/ticket/9502)'
  id: totrans-963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9502](https://www.sqlalchemy.org/trac/ticket/9502)
- en: postgresql
  id: totrans-964
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added new PostgreSQL type [`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT"). Pull request courtesy Julian David Rath.
  id: totrans-966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 PostgreSQL 类型 [`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT")。拉取请求由 Julian David Rath 提供。
- en: 'References: [#9416](https://www.sqlalchemy.org/trac/ticket/9416)'
  id: totrans-967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9416](https://www.sqlalchemy.org/trac/ticket/9416)
- en: '**[postgresql] [usecase]**'
  id: totrans-968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Modifications to the base PostgreSQL dialect to allow for better integration
    with the sqlalchemy-redshift third party dialect for SQLAlchemy 2.0\. Pull request
    courtesy matthewgdv.
  id: totrans-969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了基本 PostgreSQL 方言，以更好地与 SQLAlchemy 2.0 的第三方方言 sqlalchemy-redshift 进行集成。拉取请求由
    matthewgdv 提供。
- en: 'References: [#9442](https://www.sqlalchemy.org/trac/ticket/9442)'
  id: totrans-970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9442](https://www.sqlalchemy.org/trac/ticket/9442)
- en: 2.0.6
  id: totrans-971
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.6
- en: 'Released: March 13, 2023'
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023 年 3 月 13 日
- en: orm
  id: totrans-973
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-974
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug where the “active history” feature was not fully implemented for composite
    attributes, making it impossible to receive events that included the “old” value.
    This seems to have been the case with older SQLAlchemy versions as well, where
    “active_history” would be propagated to the underlying column-based attributes,
    but an event handler listening to the composite attribute itself would not be
    given the “old” value being replaced, even if the composite() were set up with
    active_history=True.
  id: totrans-975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“活动历史记录”功能对复合属性未完全实现的错误，这使得无法接收包含“旧”值的事件成为可能。这似乎也是旧的 SQLAlchemy 版本的情况，其中“active_history”将传播到基础基于列的属性，但是即使设置了
    active_history=True 的复合()，监听复合属性本身的事件处理程序也不会收到被替换的“旧”值。
- en: Additionally, fixed a regression that’s local to 2.0 which disallowed active_history
    on composite from being assigned to the impl with `attr.impl.active_history=True`.
  id: totrans-976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，修复了一个局限于 2.0 的回归，该回归禁止了对复合的 active_history 被分配到带有 `attr.impl.active_history=True`
    的实现。
- en: 'References: [#9460](https://www.sqlalchemy.org/trac/ticket/9460)'
  id: totrans-977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9460](https://www.sqlalchemy.org/trac/ticket/9460)
- en: '**[orm] [bug]**'
  id: totrans-978
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed regression involving pickling of Python rows between the cython and pure
    Python implementations of [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row"), which occurred as part of refactoring code for version
    2.0 with typing. A particular constant were turned into a string based `Enum`
    for the pure Python version of [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") whereas the cython version continued to use an integer
    constant, leading to deserialization failures.
  id: totrans-979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在为版本 2.0 重构代码时，涉及 Python 行的 pickling 在 cython 和纯 Python 实现之间发生的回归，这发生在对 [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 进行了带有类型信息的代码重构时。对于纯 Python 版本的 [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")，一个特定的常量被转换为基于字符串的 `Enum`，而 cython 版本继续使用整数常量，导致反序列化失败。
- en: 'References: [#9418](https://www.sqlalchemy.org/trac/ticket/9418)'
  id: totrans-980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9418](https://www.sqlalchemy.org/trac/ticket/9418)
- en: sql
  id: totrans-981
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [regression]**'
  id: totrans-982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误] [回归]**'
- en: Fixed regression where the fix for [#8098](https://www.sqlalchemy.org/trac/ticket/8098),
    which was released in the 1.4 series and provided a layer of concurrency-safe
    checks for the lambda SQL API, included additional fixes in the patch that failed
    to be applied to the main branch. These additional fixes have been applied.
  id: totrans-983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 1.4 系列中发布的用于 lambda SQL API 的一层并发安全检查的修复引起的回归，该修复针对的是[#8098](https://www.sqlalchemy.org/trac/ticket/8098)，在补丁中包含了未能应用到主分支的额外修复。这些额外的修复已经应用。
- en: 'References: [#9461](https://www.sqlalchemy.org/trac/ticket/9461)'
  id: totrans-984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9461](https://www.sqlalchemy.org/trac/ticket/9461)
- en: '**[sql] [bug]**'
  id: totrans-985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed regression where the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct would not be able to render if it
    were given no columns and then used in the context of an EXISTS, raising an internal
    exception instead. While an empty “SELECT” is not typically valid SQL, in the
    context of EXISTS databases such as PostgreSQL allow it, and in any case the condition
    now no longer raises an internal exception.
  id: totrans-986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造中，如果没有给定列而然后在 EXISTS 的上下文中使用，则无法呈现的回归，而是引发了内部异常。虽然一个空的“SELECT”通常不是有效的 SQL，但在
    EXISTS 数据库中（例如 PostgreSQL）允许它，在任何情况下，该条件现在不再引发内部异常。
- en: 'References: [#9440](https://www.sqlalchemy.org/trac/ticket/9440)'
  id: totrans-987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9440](https://www.sqlalchemy.org/trac/ticket/9440)
- en: typing
  id: totrans-988
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打字
- en: '**[typing] [bug]**'
  id: totrans-989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[打字] [错误]**'
- en: Fixed typing issue where [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") did not allow a [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") argument independent of the type of the [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") itself, which is the purpose of [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast").
  id: totrans-990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") 中的类型问题，它不允许独立于 [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 本身的类型引擎参数，而 [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") 的目的就是这样。
- en: 'References: [#9451](https://www.sqlalchemy.org/trac/ticket/9451)'
  id: totrans-991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9451](https://www.sqlalchemy.org/trac/ticket/9451)
- en: '**[typing] [bug]**'
  id: totrans-992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed issues to allow typing tests to pass under Mypy 1.1.1.
  id: totrans-993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复问题以允许在 Mypy 1.1.1 下通过类型测试。
- en: oracle
  id: totrans-994
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed reflection bug where Oracle “name normalize” would not work correctly
    for reflection of symbols that are in the “PUBLIC” schema, such as synonyms, meaning
    the PUBLIC name could not be indicated as lower case on the Python side for the
    [`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    argument. Using uppercase “PUBLIC” would work, but would then lead to awkward
    SQL queries including a quoted `"PUBLIC"` name as well as indexing the table under
    uppercase “PUBLIC”, which was inconsistent.
  id: totrans-996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle “名称标准化”在反射 “PUBLIC” 模式下无法正确工作的反射错误，例如在 Python 端不能将 PUBLIC 名称指定为小写用于
    [`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    参数。使用大写的 “PUBLIC” 将起作用，但会导致包括引号的 SQL 查询以及在大写 “PUBLIC” 下索引表，这是不一致的。
- en: 'References: [#9459](https://www.sqlalchemy.org/trac/ticket/9459)'
  id: totrans-997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9459](https://www.sqlalchemy.org/trac/ticket/9459)
- en: 2.0.5.post1
  id: totrans-998
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.5.post1
- en: 'Released: March 5, 2023'
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年3月5日
- en: orm
  id: totrans-1000
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added constructor arguments to the built-in mapping collection types including
    [`KeyFuncDict`](../orm/collection_api.html#sqlalchemy.orm.KeyFuncDict "sqlalchemy.orm.KeyFuncDict"),
    [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict"), [`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict") so that these dictionary types may be constructed
    in place given the data up front; this provides further compatibility with tools
    such as Python dataclasses `.asdict()` which relies upon invoking these classes
    directly as ordinary dictionary classes.
  id: totrans-1002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向内置映射集合类型添加构造函数参数，包括 [`KeyFuncDict`](../orm/collection_api.html#sqlalchemy.orm.KeyFuncDict
    "sqlalchemy.orm.KeyFuncDict")、[`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")、[`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict") 等，以便可以根据提供的数据即时构造这些字典类型；这进一步与诸如 Python 数据类
    `.asdict()` 等工具兼容，后者依赖于直接调用这些类作为普通字典类。
- en: 'References: [#9418](https://www.sqlalchemy.org/trac/ticket/9418)'
  id: totrans-1003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9418](https://www.sqlalchemy.org/trac/ticket/9418)
- en: '**[orm] [bug] [regression]**'
  id: totrans-1004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed multiple regressions due to [#8372](https://www.sqlalchemy.org/trac/ticket/8372),
    involving [`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection") (now called [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")).
  id: totrans-1005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 [#8372](https://www.sqlalchemy.org/trac/ticket/8372) 引起的多个退化已修复，涉及 [`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection")（现在称为 [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")）。
- en: First, the collection was no longer usable with “key” attributes that were not
    themselves ordinary mapped attributes; attributes linked to descriptors and/or
    association proxy attributes have been fixed.
  id: totrans-1006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，收集现在不再可用于具有不是普通映射属性的“键”属性；已修复了与描述符和/或关联代理属性相关的属性。
- en: Second, if an event or other operation needed access to the “key” in order to
    populate the dictionary from an mapped attribute that was not loaded, this also
    would raise an error inappropriately, rather than trying to load the attribute
    as was the behavior in 1.4\. This is also fixed.
  id: totrans-1007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其次，如果事件或其他操作需要访问“key”以便从未加载的映射属性填充字典，那么这也会不适当地引发错误，而不是像1.4版本中那样尝试加载属性。这个问题也已经修复。
- en: For both cases, the behavior of [#8372](https://www.sqlalchemy.org/trac/ticket/8372)
    has been expanded. [#8372](https://www.sqlalchemy.org/trac/ticket/8372) introduced
    an error that raises when the derived key that would be used as a mapped dictionary
    key is effectively unassigned. In this change, a warning only is emitted if the
    effective value of the “.key” attribute is `None`, where it cannot be unambiguously
    determined if this `None` was intentional or not. `None` will be not supported
    as mapped collection dictionary keys going forward (as it typically refers to
    NULL which means “unknown”). Setting [`attribute_keyed_dict.ignore_unpopulated_attribute`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict.params.ignore_unpopulated_attribute
    "sqlalchemy.orm.attribute_keyed_dict") will now cause such `None` keys to be ignored
    as well.
  id: totrans-1008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于这两种情况，扩展了[#8372](https://www.sqlalchemy.org/trac/ticket/8372)的行为。[#8372](https://www.sqlalchemy.org/trac/ticket/8372)引入了一个错误，当作为映射字典键使用的派生键实际上未被赋值时会引发错误。在此更改中，仅在“.key”属性的有效值为`None`时才发出警告，无法明确确定这个`None`是否是有意的。`None`将不再作为映射集合字典键的支持（因为它通常指的是
    NULL，表示“未知”）。设置[`attribute_keyed_dict.ignore_unpopulated_attribute`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict.params.ignore_unpopulated_attribute
    "sqlalchemy.orm.attribute_keyed_dict")现在也将导致忽略这样的`None`键。
- en: 'References: [#9424](https://www.sqlalchemy.org/trac/ticket/9424)'
  id: totrans-1009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9424](https://www.sqlalchemy.org/trac/ticket/9424)
- en: '**[orm] [bug]**'
  id: totrans-1010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Identified that the `sqlite` and `mssql+pyodbc` dialects are now compatible
    with the SQLAlchemy ORM’s “versioned rows” feature, since SQLAlchemy now computes
    rowcount for a RETURNING statement in this specific case by counting the rows
    returned, rather than relying upon `cursor.rowcount`. In particular, the ORM versioned
    rows use case (documented at [Configuring a Version Counter](../orm/versioning.html#mapper-version-counter))
    should now be fully supported with the SQL Server pyodbc dialect.
  id: totrans-1011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确定了`sqlite`和`mssql+pyodbc`方言现在与SQLAlchemy ORM的“versioned rows”功能兼容，因为SQLAlchemy现在通过计算返回的行数来计算RETURNING语句的行数，而不是依赖于`cursor.rowcount`。特别是，ORM版本的行用例（在[配置版本计数器](../orm/versioning.html#mapper-version-counter)文档中有描述）现在应该完全支持与SQL
    Server pyodbc方言一起使用。
- en: '**[orm] [bug]**'
  id: totrans-1012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added support for the [`Mapper.polymorphic_load`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_load
    "sqlalchemy.orm.Mapper") parameter to be applied to each mapper in an inheritance
    hierarchy more than one level deep, allowing columns to load for all classes in
    the hierarchy that indicate `"selectin"` using a single statement, rather than
    ignoring elements on those intermediary classes that nonetheless indicate they
    also would participate in `"selectin"` loading and were not part of the base-most
    SELECT statement.
  id: totrans-1013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对[`Mapper.polymorphic_load`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_load
    "sqlalchemy.orm.Mapper")参数的支持，该参数应用于继承层次结构中超过一级的每个映射器，允许通过单个语句为层次结构中的所有类加载列，这些列指示使用
    `"selectin"`，而不是忽略那些中间类上的元素，尽管它们也指示它们将参与 `"selectin"` 加载，但它们不是基本的 SELECT 语句的一部分。
- en: 'References: [#9373](https://www.sqlalchemy.org/trac/ticket/9373)'
  id: totrans-1014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9373](https://www.sqlalchemy.org/trac/ticket/9373)
- en: '**[orm] [bug]**'
  id: totrans-1015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Continued the fix for [#8853](https://www.sqlalchemy.org/trac/ticket/8853),
    allowing the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    name to be fully qualified regardless of whether or not `from __annotations__
    import future` were present. This issue first fixed in 2.0.0b3 confirmed that
    this case worked via the test suite, however the test suite apparently was not
    testing the behavior for the name [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") not being locally present at all; string resolution has
    been updated to ensure the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") symbol is locatable as applies to how the ORM uses these
    functions.
  id: totrans-1016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续修复 [#8853](https://www.sqlalchemy.org/trac/ticket/8853)，允许 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 名称完全合格，无论是否存在 `from __annotations__ import future`。此问题首次在
    2.0.0b3 中修复，确认此情况通过测试套件工作，但是测试套件显然没有测试名称 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 完全不存在的行为；字符串解析已更新以确保 ORM 如何使用这些函数。
- en: 'References: [#8853](https://www.sqlalchemy.org/trac/ticket/8853), [#9335](https://www.sqlalchemy.org/trac/ticket/9335)'
  id: totrans-1017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8853](https://www.sqlalchemy.org/trac/ticket/8853), [#9335](https://www.sqlalchemy.org/trac/ticket/9335)
- en: orm declarative
  id: totrans-1018
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明式
- en: '**[bug] [orm declarative]**'
  id: totrans-1019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm declarative]**'
- en: Fixed issue where new [`mapped_column.use_existing_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.use_existing_column
    "sqlalchemy.orm.mapped_column") feature would not work if the two same-named columns
    were mapped under attribute names that were differently-named from an explicit
    name given to the column itself. The attribute names can now be differently named
    when using this parameter.
  id: totrans-1020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了新 [`mapped_column.use_existing_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.use_existing_column
    "sqlalchemy.orm.mapped_column") 功能无法工作的问题，如果两个同名列被映射到与列本身的显式名称不同的属性名下。现在，当使用此参数时，属性名称可以不同。 '
- en: 'References: [#9332](https://www.sqlalchemy.org/trac/ticket/9332)'
  id: totrans-1021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9332](https://www.sqlalchemy.org/trac/ticket/9332)
- en: engine
  id: totrans-1022
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [performance]**'
  id: totrans-1023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [performance]**'
- en: A small optimization to the Cython implementation of [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") using a cdef for a particular int value to avoid Python
    overhead. Pull request courtesy Matus Valo.
  id: totrans-1024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    的 Cython 实现进行了小优化，使用了一个特定 int 值的 cdef 来避免 Python 开销。拉取请求由 Matus Valo 提供。
- en: 'References: [#9343](https://www.sqlalchemy.org/trac/ticket/9343)'
  id: totrans-1025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9343](https://www.sqlalchemy.org/trac/ticket/9343)
- en: '**[engine] [bug]**'
  id: totrans-1026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects could not be reliably unpickled across processes due to an accidental
    reliance on an unstable hash value.
  id: totrans-1027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    对象由于意外依赖不稳定的哈希值而无法在进程间可靠地反序列化的 bug。
- en: 'References: [#9423](https://www.sqlalchemy.org/trac/ticket/9423)'
  id: totrans-1028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9423](https://www.sqlalchemy.org/trac/ticket/9423)
- en: sql
  id: totrans-1029
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [bug] [regression]**'
  id: totrans-1030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [regression]**'
- en: Restore the [`nullslast()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullslast
    "sqlalchemy.sql.expression.nullslast") and [`nullsfirst()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst") legacy functions into the `sqlalchemy`
    import namespace. Previously, the newer [`nulls_last()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") and [`nulls_first()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") functions were available, but the legacy
    ones were inadvertently removed.
  id: totrans-1031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 [`nullslast()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullslast
    "sqlalchemy.sql.expression.nullslast") 和 [`nullsfirst()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst") 旧版本函数恢复到 `sqlalchemy` 导入命名空间中。之前，较新的 [`nulls_last()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") 和 [`nulls_first()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") 函数是可用的，但是旧版本函数不小心被移除了。
- en: 'References: [#9390](https://www.sqlalchemy.org/trac/ticket/9390)'
  id: totrans-1032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9390](https://www.sqlalchemy.org/trac/ticket/9390)
- en: schema
  id: totrans-1033
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-1034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Validate that when provided the [`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") argument of [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") is a string.
  id: totrans-1035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 验证当提供给[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")的[`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数时，它是一个字符串。
- en: typing
  id: totrans-1036
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [usecase]**'
  id: totrans-1037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [usecase]**'
- en: Exported the type returned by [`scoped_session.query_property()`](../orm/contextual.html#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") using a new public type [`QueryPropertyDescriptor`](../orm/contextual.html#sqlalchemy.orm.QueryPropertyDescriptor
    "sqlalchemy.orm.QueryPropertyDescriptor").
  id: totrans-1038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 导出了由[`scoped_session.query_property()`](../orm/contextual.html#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property")返回的类型，使用了一个新的公共类型[`QueryPropertyDescriptor`](../orm/contextual.html#sqlalchemy.orm.QueryPropertyDescriptor
    "sqlalchemy.orm.QueryPropertyDescriptor")。
- en: 'References: [#9338](https://www.sqlalchemy.org/trac/ticket/9338)'
  id: totrans-1039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9338](https://www.sqlalchemy.org/trac/ticket/9338)
- en: '**[typing] [bug]**'
  id: totrans-1040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed bug where the [`Connection.scalars()`](../core/connections.html#sqlalchemy.engine.Connection.scalars
    "sqlalchemy.engine.Connection.scalars") method was not typed as allowing a multiple-parameters
    list, which is now supported using insertmanyvalues operations.
  id: totrans-1041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Connection.scalars()`](../core/connections.html#sqlalchemy.engine.Connection.scalars
    "sqlalchemy.engine.Connection.scalars")方法未被标记为允许多参数列表的错误，现在支持使用`insertmanyvalues`操作。
- en: '**[typing] [bug]**'
  id: totrans-1042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Improved typing for the mapping passed to [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") and [`Update.values()`](../core/dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values") to be more open-ended about collection
    type, by indicating read-only `Mapping` instead of writeable `Dict` which would
    error out on too limited of a key type.
  id: totrans-1043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对传递给[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")和[`Update.values()`](../core/dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values")的映射的类型进行了改进，使之更加开放，指示只读`Mapping`而不是可写`Dict`，后者在键类型过于有限时会出错。
- en: 'References: [#9376](https://www.sqlalchemy.org/trac/ticket/9376)'
  id: totrans-1044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9376](https://www.sqlalchemy.org/trac/ticket/9376)
- en: '**[typing] [bug]**'
  id: totrans-1045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Added missing init overload to the [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") type object so that pep-484 type checkers may properly
    resolve the complete type, deriving from the [`Numeric.asdecimal`](../core/type_basics.html#sqlalchemy.types.Numeric.params.asdecimal
    "sqlalchemy.types.Numeric") parameter whether `Decimal` or `float` objects will
    be represented.
  id: totrans-1046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")类型对象中添加了缺失的初始化重载，以便pep-484类型检查器可以正确解析完整的类型，从[`Numeric.asdecimal`](../core/type_basics.html#sqlalchemy.types.Numeric.params.asdecimal
    "sqlalchemy.types.Numeric")参数派生，确定将表示`Decimal`还是`float`对象。
- en: 'References: [#9391](https://www.sqlalchemy.org/trac/ticket/9391)'
  id: totrans-1047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9391](https://www.sqlalchemy.org/trac/ticket/9391)
- en: '**[typing] [bug]**'
  id: totrans-1048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing bug where [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") would not accept [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") or [`TextualSelect`](../core/selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") objects as a valid type. Additionally
    repaired the `columns` method to have a return type, which was missing.
  id: totrans-1049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了类型错误，[`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement")将不接受[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")或[`TextualSelect`](../core/selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect")对象作为有效类型的bug。此外，修复了`columns`方法的返回类型缺失的问题。
- en: 'References: [#9398](https://www.sqlalchemy.org/trac/ticket/9398)'
  id: totrans-1050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9398](https://www.sqlalchemy.org/trac/ticket/9398)
- en: '**[typing] [bug]**'
  id: totrans-1051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue where [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") would not record the class type correctly.
  id: totrans-1052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")未正确记录类类型的类型问题。
- en: 'References: [#9340](https://www.sqlalchemy.org/trac/ticket/9340)'
  id: totrans-1053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9340](https://www.sqlalchemy.org/trac/ticket/9340)
- en: postgresql
  id: totrans-1054
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue in PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") where literal values were
    being compiled as bound parameters and not direct inline values as is required
    for DDL.
  id: totrans-1056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 中的问题，其中文字值被编译为绑定参数而不是直接的内联值，这是
    DDL 所必需的。
- en: 'References: [#9349](https://www.sqlalchemy.org/trac/ticket/9349)'
  id: totrans-1057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9349](https://www.sqlalchemy.org/trac/ticket/9349)
- en: '**[postgresql] [bug]**'
  id: totrans-1058
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") construct would not be copyable
    within operations such as [`Table.to_metadata()`](../core/metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") as well as within some Alembic scenarios,
    if the constraint contained textual expression elements.
  id: totrans-1059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 构造中的问题，如果约束包含文本表达式元素，则在 [`Table.to_metadata()`](../core/metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") 等操作中以及在一些 Alembic 方案中无法复制。
- en: 'References: [#9401](https://www.sqlalchemy.org/trac/ticket/9401)'
  id: totrans-1060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9401](https://www.sqlalchemy.org/trac/ticket/9401)
- en: mysql
  id: totrans-1061
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [postgresql]**'
  id: totrans-1062
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [postgresql]**'
- en: The support for pool ping listeners to receive exception events via the [`DialectEvents.handle_error()`](../core/events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event added in 2.0.0b1 for [#5648](https://www.sqlalchemy.org/trac/ticket/5648)
    failed to take into account dialect-specific ping routines such as that of MySQL
    and PostgreSQL. The dialect feature has been reworked so that all dialects participate
    within event handling. Additionally, a new boolean element [`ExceptionContext.is_pre_ping`](../core/connections.html#sqlalchemy.engine.ExceptionContext.is_pre_ping
    "sqlalchemy.engine.ExceptionContext.is_pre_ping") is added which identifies if
    this operation is occurring within the pre-ping operation.
  id: totrans-1063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了解决在 2.0.0b1 中为 [#5648](https://www.sqlalchemy.org/trac/ticket/5648) 添加的池 ping
    监听器通过 [`DialectEvents.handle_error()`](../core/events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 事件接收异常事件的支持未考虑到诸如 MySQL 和 PostgreSQL
    的特定方言的 ping 程序的问题。方言特性已重新设计，使得所有方言都参与事件处理。另外，添加了一个新的布尔元素 [`ExceptionContext.is_pre_ping`](../core/connections.html#sqlalchemy.engine.ExceptionContext.is_pre_ping
    "sqlalchemy.engine.ExceptionContext.is_pre_ping")，用于标识此操作是否在预 ping 操作中进行。
- en: For this release, third party dialects which implement a custom [`Dialect.do_ping()`](../core/internals.html#sqlalchemy.engine.Dialect.do_ping
    "sqlalchemy.engine.Dialect.do_ping") method can opt in to the newly improved behavior
    by having their method no longer catch exceptions or check exceptions for “is_disconnect”,
    instead just propagating all exceptions outwards. Checking the exception for “is_disconnect”
    is now done by an enclosing method on the default dialect, which ensures that
    the event hook is invoked for all exception scenarios before testing the exception
    as a “disconnect” exception. If an existing `do_ping()` method continues to catch
    exceptions and check “is_disconnect”, it will continue to work as it did previously,
    but `handle_error` hooks will not have access to the exception if it isn’t propagated
    outwards.
  id: totrans-1064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于此版本，实现自定义 [`Dialect.do_ping()`](../core/internals.html#sqlalchemy.engine.Dialect.do_ping
    "sqlalchemy.engine.Dialect.do_ping") 方法的第三方方言可以选择通过不再捕获异常或检查异常是否为“is_disconnect”，而是直接将所有异常传播出去来选择新的改进行为。现在由默认方言的一个包围方法来检查异常是否为“is_disconnect”，这确保了在测试异常是否为“断开连接”异常之前调用事件挂钩以处理所有异常情况。如果现有的
    `do_ping()` 方法继续捕获异常并检查“is_disconnect”，则它将像以前一样工作，但是如果不将异常传播出去，`handle_error`
    钩子将无法访问异常。
- en: 'References: [#5648](https://www.sqlalchemy.org/trac/ticket/5648)'
  id: totrans-1065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5648](https://www.sqlalchemy.org/trac/ticket/5648)
- en: sqlite
  id: totrans-1066
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug] [regression]**'
  id: totrans-1067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug] [regression]**'
- en: Fixed regression for SQLite connections where use of the `deterministic` parameter
    when establishing database functions would fail for older SQLite versions, those
    prior to version 3.8.3\. The version checking logic has been improved to accommodate
    for this case.
  id: totrans-1068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 SQLite 连接中的回归，其中在建立数据库函数时使用 `deterministic` 参数会导致旧版 SQLite 版本（3.8.3 之前的版本）失败。版本检查逻辑已经改进以适应此情况。
- en: 'References: [#9379](https://www.sqlalchemy.org/trac/ticket/9379)'
  id: totrans-1069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9379](https://www.sqlalchemy.org/trac/ticket/9379)
- en: mssql
  id: totrans-1070
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1071
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue in the new [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype which prevented it from working with the pymssql
    driver. As pymssql seems to be maintained again, restored testing support for
    pymssql.
  id: totrans-1072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的 [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")
    数据类型中的问题，该问题导致它无法与 pymssql 驱动程序一起工作。由于 pymssql 似乎又开始维护，因此恢复了对 pymssql 的测试支持。
- en: 'References: [#9414](https://www.sqlalchemy.org/trac/ticket/9414)'
  id: totrans-1073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9414](https://www.sqlalchemy.org/trac/ticket/9414)
- en: '**[mssql] [bug]**'
  id: totrans-1074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Tweaked the pymssql dialect to take better advantage of RETURNING for INSERT
    statements in order to retrieve last inserted primary key values, in the same
    way as occurs for the mssql+pyodbc dialect right now.
  id: totrans-1075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 pymssql 方言，以更好地利用 RETURNING 来获取 INSERT 语句的最后插入的主键值，与当前的 mssql+pyodbc 方言一样。
- en: misc
  id: totrans-1076
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-1077
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed issue in automap where calling [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") from a specific mapped class, rather
    than from the [`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase") directly, would not use the correct base
    class when automap detected new tables, instead using the given class, leading
    to mappers trying to configure inheritance. While one should normally call [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") from the base in any case, it shouldn’t
    misbehave that badly when called from a subclass.
  id: totrans-1078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 automap 中的问题，调用 [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") 时，从特定映射类而不是直接从 [`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase") 调用，当 automap 检测到新表时，不会使用正确的基类，而是使用给定的类，导致映射器尝试配置继承关系。虽然通常情况下应该从基类调用
    [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare")，但在从子类调用时不应该出现严重问题。
- en: 'References: [#9367](https://www.sqlalchemy.org/trac/ticket/9367)'
  id: totrans-1079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9367](https://www.sqlalchemy.org/trac/ticket/9367)
- en: '**[bug] [ext] [regression]**'
  id: totrans-1080
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext] [regression]**'
- en: Fixed regression caused by typing added to `sqlalchemy.ext.mutable` for [#8667](https://www.sqlalchemy.org/trac/ticket/8667),
    where the semantics of the `.pop()` method changed such that the method was non-working.
    Pull request courtesy Nils Philippsen.
  id: totrans-1081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于针对 [#8667](https://www.sqlalchemy.org/trac/ticket/8667) 添加的类型，导致了 `sqlalchemy.ext.mutable`
    的回归错误，其中 `.pop()` 方法的语义发生了变化，使得该方法无法工作。感谢 Nils Philippsen 提交的拉取请求。
- en: 'References: [#9380](https://www.sqlalchemy.org/trac/ticket/9380)'
  id: totrans-1082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9380](https://www.sqlalchemy.org/trac/ticket/9380)
- en: 2.0.4
  id: totrans-1083
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.4
- en: 'Released: February 17, 2023'
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年2月17日
- en: orm
  id: totrans-1085
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-1086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: To accommodate a change in column ordering used by ORM Declarative in SQLAlchemy
    2.0, a new parameter [`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column") has been added that can be used to control the
    order of the columns defined in the table by the ORM, for common use cases such
    as mixins with primary key columns that should appear first in tables. The change
    notes at [ORM Declarative Applies Column Orders Differently; Control behavior
    using sort_order](whatsnew_20.html#change-9297) illustrate the default change
    in ordering behavior (which is part of all SQLAlchemy 2.0 releases) as well as
    use of the [`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column") to control column ordering when using mixins and
    multiple classes (new in 2.0.4).
  id: totrans-1087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了适应 SQLAlchemy 2.0 中 ORM 声明式使用的列顺序的变化，新增了一个参数 [`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column")，可用于控制 ORM 定义的表中列的顺序，适用于常见用例，如具有应首先出现在表中的主键列的混合类。变更说明在
    [ORM 声明式以不同方式应用列顺序；使用 sort_order 控制行为](whatsnew_20.html#change-9297) 中说明了默认的顺序变更行为（这是所有
    SQLAlchemy 2.0 发行版的一部分），以及在使用混合类和多个类时使用 [`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column") 控制列顺序的用法（2.0.4 中新增）。
- en: See also
  id: totrans-1088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Declarative Applies Column Orders Differently; Control behavior using
    sort_order](whatsnew_20.html#change-9297)'
  id: totrans-1089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM 声明式以不同方式应用列顺序；使用 sort_order 控制行为](whatsnew_20.html#change-9297)'
- en: 'References: [#9297](https://www.sqlalchemy.org/trac/ticket/9297)'
  id: totrans-1090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9297](https://www.sqlalchemy.org/trac/ticket/9297)
- en: '**[orm] [usecase]**'
  id: totrans-1091
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: The [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method will now immediately load a relationship-bound
    attribute that is explicitly named within the [`Session.refresh.attribute_names`](../orm/session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") collection even if it is currently linked to
    the “select” loader, which normally is a “lazy” loader that does not fire off
    during a refresh. The “lazy loader” strategy will now detect that the operation
    is specifically a user-initiated [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") operation which named this attribute explicitly,
    and will then call upon the “immediateload” strategy to actually emit SQL to load
    the attribute. This should be helpful in particular for some asyncio situations
    where the loading of an unloaded lazy-loaded attribute must be forced, without
    using the actual lazy-loading attribute pattern not supported in asyncio.
  id: totrans-1092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")方法现在将立即加载在[`Session.refresh.attribute_names`](../orm/session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh")集合中明确命名的与关系绑定的属性，即使它当前链接到“select”加载程序，通常是一个不会在刷新期间触发的“lazy”加载程序。
    “懒加载器”策略现在将检测到操作明确是用户发起的[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")操作，该操作明确命名了此属性，然后将调用“immediateload”策略实际发出SQL以加载属性。这对于某些asyncio情况特别有帮助，其中必须强制加载未加载的惰性加载属性，而不使用实际不支持asyncio的惰性加载属性模式。'
- en: 'References: [#9298](https://www.sqlalchemy.org/trac/ticket/9298)'
  id: totrans-1093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9298](https://www.sqlalchemy.org/trac/ticket/9298)
- en: '**[orm] [bug] [regression]**'
  id: totrans-1094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression introduced in version 2.0.2 due to [#9217](https://www.sqlalchemy.org/trac/ticket/9217)
    where using DML RETURNING statements, as well as [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") constructs as was “fixed” in
    [#9217](https://www.sqlalchemy.org/trac/ticket/9217), in conjunction with ORM
    mapped classes that used expressions such as with [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), would lead to an internal error within Core
    where it would attempt to match the expression by name. The fix repairs the Core
    issue, and also adjusts the fix in [#9217](https://www.sqlalchemy.org/trac/ticket/9217)
    to not take effect for the DML RETURNING use case, where it adds unnecessary overhead.
  id: totrans-1095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#9217](https://www.sqlalchemy.org/trac/ticket/9217)引入的版本2.0.2中的回归错误已修复，其中使用DML
    RETURNING语句以及[`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement")构造，如在[#9217](https://www.sqlalchemy.org/trac/ticket/9217)中“修复”的那样，与使用[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")等表达式的ORM映射类一起使用，会导致Core内部错误，其中它会尝试按名称匹配表达式。修复了Core问题，并且还调整了[#9217](https://www.sqlalchemy.org/trac/ticket/9217)中的修复，以便不会对DML
    RETURNING用例产生影响，其中它增加了不必要的开销。
- en: 'References: [#9273](https://www.sqlalchemy.org/trac/ticket/9273)'
  id: totrans-1096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9273](https://www.sqlalchemy.org/trac/ticket/9273)
- en: '**[orm] [bug]**'
  id: totrans-1097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Marked the internal `EvaluatorCompiler` module as private to the ORM, and renamed
    it to `_EvaluatorCompiler`. For users that may have been relying upon this, the
    name `EvaluatorCompiler` is still present, however this use is not supported and
    will be removed in a future release.
  id: totrans-1098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将内部`EvaluatorCompiler`模块标记为ORM私有，并将其重命名为`_EvaluatorCompiler`。对于可能依赖于此的用户，名称`EvaluatorCompiler`仍然存在，但不支持此用法，并将在将来的版本中删除。
- en: orm declarative
  id: totrans-1099
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[usecase] [orm declarative]**'
  id: totrans-1100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[usecase] [orm declarative]**'
- en: Added new parameter `dataclasses_callable` to both the [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") class as well as the [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") method which allows an alternative
    callable to Python `dataclasses.dataclass` to be used in order to produce dataclasses.
    The use case here is to drop in Pydantic’s dataclass function instead. Adjustments
    have been made to the mixin support added for [#9179](https://www.sqlalchemy.org/trac/ticket/9179)
    in version 2.0.1 so that the `__annotations__` collection of the mixin is rewritten
    to not include the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    container, in the same way as occurs with mapped classes, so that the Pydantic
    dataclasses constructor is not exposed to unknown types.
  id: totrans-1101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")类和[`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass")方法添加了新参数`dataclasses_callable`，允许使用替代的可调用对象来生成Python
    `dataclasses.dataclass`。这里的用例是替换为Pydantic的dataclass函数。对版本2.0.1中为[#9179](https://www.sqlalchemy.org/trac/ticket/9179)添加的mixin支持进行了调整，以便将mixin的`__annotations__`集合重写，不包括[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")容器，与映射类一样，以便Pydantic dataclasses构造函数不会暴露给未知类型。
- en: See also
  id: totrans-1102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Integrating with Alternate Dataclass Providers such as Pydantic](../orm/dataclasses.html#dataclasses-pydantic)'
  id: totrans-1103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[与Pydantic等替代Dataclass提供者集成](../orm/dataclasses.html#dataclasses-pydantic)'
- en: 'References: [#9266](https://www.sqlalchemy.org/trac/ticket/9266)'
  id: totrans-1104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9266](https://www.sqlalchemy.org/trac/ticket/9266)
- en: sql
  id: totrans-1105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where element types of a tuple value would be hardcoded to take
    on the types from a compared-to tuple, when the comparison were using the [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") operator. This was inconsistent
    with the usual way that types are determined for a binary expression, which is
    that the actual element type on the right side is considered first before applying
    the left-hand-side type.
  id: totrans-1107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了元组值的元素类型将被硬编码为从比较的元组中获取类型的问题，当比较使用[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")运算符时。这与通常确定二进制表达式类型的方式不一致，通常情况下会首先考虑右侧的实际元素类型，然后再应用左侧的类型。
- en: 'References: [#9313](https://www.sqlalchemy.org/trac/ticket/9313)'
  id: totrans-1108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9313](https://www.sqlalchemy.org/trac/ticket/9313)
- en: '**[sql]**'
  id: totrans-1109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added public property [`Table.autoincrement_column`](../core/metadata.html#sqlalchemy.schema.Table.autoincrement_column
    "sqlalchemy.schema.Table.autoincrement_column") that returns the column identified
    as autoincrementing in the column.
  id: totrans-1110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了公共属性[`Table.autoincrement_column`](../core/metadata.html#sqlalchemy.schema.Table.autoincrement_column
    "sqlalchemy.schema.Table.autoincrement_column")，该属性返回在列中标识为自增的列。
- en: 'References: [#9277](https://www.sqlalchemy.org/trac/ticket/9277)'
  id: totrans-1111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9277](https://www.sqlalchemy.org/trac/ticket/9277)
- en: typing
  id: totrans-1112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [usecase]**'
  id: totrans-1113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [usecase]**'
- en: Improved the typing support for the [Hybrid Attributes](../orm/extensions/hybrid.html)
    extension, updated all documentation to use ORM Annotated Declarative mappings,
    and added a new modifier called [`hybrid_property.inplace`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace"). This modifier provides a way
    to alter the state of a [`hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") **in place**, which is essentially what
    very early versions of hybrids did, before SQLAlchemy version 1.2.0 [#3912](https://www.sqlalchemy.org/trac/ticket/3912)
    changed this to remove in-place mutation. This in-place mutation is now restored
    on an **opt-in** basis to allow a single hybrid to have multiple methods set up,
    without the need to name all the methods the same and without the need to carefully
    “chain” differently-named methods in order to maintain the composition. Typing
    tools such as Mypy and Pyright do not allow same-named methods on a class, so
    with this change a succinct method of setting up hybrids with typing support is
    restored.
  id: totrans-1114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 [Hybrid Attributes](../orm/extensions/hybrid.html) 扩展的类型支持，更新了所有文档以使用 ORM
    Annotated Declarative mappings，并添加了一个名为 [`hybrid_property.inplace`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") 的新修改器。此修改器提供了一种改变 [`hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") 的状态的方式，这在 SQLAlchemy 版本 1.2.0 之前的非常早期版本的混合属性中基本上是做的，版本
    1.2.0 [#3912](https://www.sqlalchemy.org/trac/ticket/3912) 改变了这一点，删除了原地突变。现在，在**选择加入**的基础上恢复了这种原地突变，以允许单个混合具有多个设置的方法，无需命名所有方法相同，也无需仔细“链”不同命名的方法以维护组合。类型工具如
    Mypy 和 Pyright 不允许在类上使用同名方法，因此通过此更改恢复了一种简洁的设置混合与类型支持的方法。
- en: See also
  id: totrans-1115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using inplace to create pep-484 compliant hybrid properties](../orm/extensions/hybrid.html#hybrid-pep484-naming)'
  id: totrans-1116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 inplace 创建符合 pep-484 标准的混合属性](../orm/extensions/hybrid.html#hybrid-pep484-naming)'
- en: 'References: [#9321](https://www.sqlalchemy.org/trac/ticket/9321)'
  id: totrans-1117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9321](https://www.sqlalchemy.org/trac/ticket/9321)
- en: oracle
  id: totrans-1118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Adjusted the behavior of the `thick_mode` parameter for the [python-oracledb](../dialects/oracle.html#oracledb)
    dialect to correctly accept `False` as a value. Previously, only `None` would
    indicate that thick mode should be disabled.
  id: totrans-1120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 `thick_mode` 参数的行为，以使 [python-oracledb](../dialects/oracle.html#oracledb)
    方言正确接受 `False` 作为值。以前，只有 `None` 会表示应禁用 thick mode。
- en: 'References: [#9295](https://www.sqlalchemy.org/trac/ticket/9295)'
  id: totrans-1121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9295](https://www.sqlalchemy.org/trac/ticket/9295)
- en: 2.0.3
  id: totrans-1122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.3
- en: 'Released: February 9, 2023'
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023 年 2 月 9 日
- en: sql
  id: totrans-1124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [regression]**'
  id: totrans-1125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [regression]**'
- en: Fixed critical regression in SQL expression formulation in the 2.0 series due
    to [#7744](https://www.sqlalchemy.org/trac/ticket/7744) which improved support
    for SQL expressions that contained many elements against the same operator repeatedly;
    parenthesis grouping would be lost with expression elements beyond the first two
    elements.
  id: totrans-1126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 [#7744](https://www.sqlalchemy.org/trac/ticket/7744)，在 2.0 系列中修复了 SQL 表达式制定的严重回归，改进了对包含许多相同操作符的
    SQL 表达式的支持；表达式元素超过前两个元素后，括号分组将丢失。
- en: 'References: [#9271](https://www.sqlalchemy.org/trac/ticket/9271)'
  id: totrans-1127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9271](https://www.sqlalchemy.org/trac/ticket/9271)
- en: typing
  id: totrans-1128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-1129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Remove `typing.Self` workaround, now using [**PEP 673**](https://peps.python.org/pep-0673/)
    for most methods that return `Self`. As a consequence of this change `mypy>=1.0.0`
    is now required to type check SQLAlchemy code. Pull request courtesy Yurii Karabas.
  id: totrans-1130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了 `typing.Self` 的临时解决方案，现在使用了 [**PEP 673**](https://peps.python.org/pep-0673/)
    来处理大多数返回 `Self` 的方法。由于这个变化，现在需要 `mypy>=1.0.0` 来对 SQLAlchemy 代码进行类型检查。感谢 Yurii
    Karabas 提供的拉取请求。
- en: 'References: [#9254](https://www.sqlalchemy.org/trac/ticket/9254)'
  id: totrans-1131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9254](https://www.sqlalchemy.org/trac/ticket/9254)
- en: 2.0.2
  id: totrans-1132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.2
- en: 'Released: February 6, 2023'
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023 年 2 月 6 日
- en: orm
  id: totrans-1134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-1135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added new event hook [`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed"), which supplies an event
    hook to take place right as the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object has been fully constructed, but before the [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") call has been called. This allows code that
    can create additional mappings and table structures based on the initial configuration
    of a [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper"),
    which also integrates within Declarative configuration. Previously, when using
    Declarative, where the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object is created within the class creation process,
    there was no documented means of running code at this point. The change is to
    immediately benefit custom mapping schemes such as that of the [Versioning with
    a History Table](../orm/examples.html#examples-versioned-history) example, which
    generate additional mappers and tables in response to the creation of mapped classes.
  id: totrans-1136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件钩子[`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed")，提供了一个事件钩子，可以在[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象完全构建完成后但在调用[`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure")之前发生。这允许根据[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的初始配置创建额外映射和表结构的代码，也与声明性配置集成。以前，在使用声明性时，[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象是在类创建过程中创建的，此时没有记录的方法来运行代码。这个改变立即使得自定义映射方案受益，比如[带有历史表的版本控制](../orm/examples.html#examples-versioned-history)示例，该示例根据映射类的创建生成额外的映射和表。
- en: 'References: [#9220](https://www.sqlalchemy.org/trac/ticket/9220)'
  id: totrans-1137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9220](https://www.sqlalchemy.org/trac/ticket/9220)
- en: '**[orm] [usecase]**'
  id: totrans-1138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: The infrequently used [`Mapper.iterate_properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.iterate_properties
    "sqlalchemy.orm.Mapper.iterate_properties") attribute and [`Mapper.get_property()`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.get_property
    "sqlalchemy.orm.Mapper.get_property") method, which are primarily used internally,
    no longer implicitly invoke the [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") process. Public access to these methods is
    extremely rare and the only benefit to having [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") would have been allowing “backref” properties
    be present in these collections. In order to support the new [`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed") event, iteration and access
    to the internal [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects is now possible without triggering an
    implicit configure of the mapper itself.
  id: totrans-1139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 很少使用的[`Mapper.iterate_properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.iterate_properties
    "sqlalchemy.orm.Mapper.iterate_properties")属性和[`Mapper.get_property()`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.get_property
    "sqlalchemy.orm.Mapper.get_property")方法，主要用于内部，不再隐式调用[`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure")过程。对这些方法的公开访问非常罕见，而拥有[`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure")的唯一好处是允许这些集合中存在“backref”属性。为了支持新的[`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed")事件，现在可以迭代和访问内部的[`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")对象，而不会触发映射器本身的隐式配置。
- en: The more-public facing route to iteration of all mapper attributes, the [`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs") collection and similar, will still implicitly invoke
    the [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") step thus making backref attributes available.
  id: totrans-1140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更公开的迭代所有映射属性的方式，[`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs")集合等，仍会隐式调用[`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure")步骤，从而使得反向引用属性可用。
- en: In all cases, the [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") is always available to be called directly.
  id: totrans-1141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在所有情况下，[`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure")始终可供直接调用。
- en: 'References: [#9220](https://www.sqlalchemy.org/trac/ticket/9220)'
  id: totrans-1142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9220](https://www.sqlalchemy.org/trac/ticket/9220)
- en: '**[orm] [bug] [ression]**'
  id: totrans-1143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误] [回归]**'
- en: Fixed obscure ORM inheritance issue caused by [#8705](https://www.sqlalchemy.org/trac/ticket/8705)
    where some scenarios of inheriting mappers that indicated groups of columns from
    the local table and the inheriting table together under a [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") would nonetheless warn that properties of the
    same name were being combined implicitly.
  id: totrans-1144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#8705](https://www.sqlalchemy.org/trac/ticket/8705)引起的晦涩的ORM继承问题，其中一些从本地表和继承表一起指示列组的映射器的情况在[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")下仍然会警告，即使隐式地组合了同名属性。
- en: 'References: [#9232](https://www.sqlalchemy.org/trac/ticket/9232)'
  id: totrans-1145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9232](https://www.sqlalchemy.org/trac/ticket/9232)
- en: '**[orm] [bug] [regression]**'
  id: totrans-1146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误] [回归]**'
- en: Fixed regression where using the [`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") feature with a regular Python-side incrementing column
    would fail to work for SQLite and other databases that don’t support “rowcount”
    with “RETURNING”, as “RETURNING” would be assumed for such columns even though
    that’s not what actually takes place.
  id: totrans-1147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用具有常规Python端递增列的[`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper")功能时，对于不支持“rowcount”和“RETURNING”的SQLite和其他数据库，将“RETURNING”用于这些列，即使实际上并非如此。
- en: 'References: [#9228](https://www.sqlalchemy.org/trac/ticket/9228)'
  id: totrans-1148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9228](https://www.sqlalchemy.org/trac/ticket/9228)
- en: '**[orm] [bug] [regression]**'
  id: totrans-1149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误] [回归]**'
- en: Fixed regression when using [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") in an ORM context, where matching
    of columns to SQL labels based on name alone was disabled for ORM-statements that
    weren’t fully textual. This would prevent arbitrary SQL expressions with column-name
    labels from matching up to the entity to be loaded, which previously would work
    within the 1.4 and previous series, so the previous behavior has been restored.
  id: totrans-1150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在ORM上下文中使用[`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement")时的回归，其中仅基于名称匹配列到SQL标签的ORM语句被禁用，这将阻止具有列名标签的任意SQL表达式与要加载的实体匹配，以前在1.4和之前的系列中可以工作，因此已恢复了先前的行为。
- en: 'References: [#9217](https://www.sqlalchemy.org/trac/ticket/9217)'
  id: totrans-1151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9217](https://www.sqlalchemy.org/trac/ticket/9217)
- en: orm declarative
  id: totrans-1152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM声明式
- en: '**[bug] [orm declarative]**'
  id: totrans-1153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [ORM声明式]**'
- en: Fixed regression caused by the fix for [#9171](https://www.sqlalchemy.org/trac/ticket/9171),
    which itself was fixing a regression, involving the mechanics of `__init__()`
    on classes that extend from [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase"). The change made it such that `__init__()` was
    applied to the user-defined base if there were no `__init__()` method directly
    on the class. This has been adjusted so that `__init__()` is applied only if no
    other class in the hierarchy of the user-defined base has an `__init__()` method.
    This again allows user-defined base classes based on [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") to include mixins that themselves include a
    custom `__init__()` method.
  id: totrans-1154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于修复[#9171](https://www.sqlalchemy.org/trac/ticket/9171)引起的回归，该问题本身修复了涉及从[`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")继承的类的`__init__()`机制的回归。更改使得如果类上没有直接的`__init__()`方法，则`__init__()`将应用于用户定义的基类。现在已经调整为只有在用户定义的基类的层次结构中没有其他类具有`__init__()`方法时才应用`__init__()`。这再次允许基于[`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")的用户定义的基类包含包含自定义`__init__()`方法的混入。
- en: 'References: [#9249](https://www.sqlalchemy.org/trac/ticket/9249)'
  id: totrans-1155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9249](https://www.sqlalchemy.org/trac/ticket/9249)
- en: '**[bug] [orm declarative]**'
  id: totrans-1156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [ORM声明式]**'
- en: Fixed issue in ORM Declarative Dataclass mappings related to newly added support
    for mixins added in 2.0.1 via [#9179](https://www.sqlalchemy.org/trac/ticket/9179),
    where a combination of using mixins plus ORM inheritance would mis-classify fields
    in some cases leading to field-level dataclass arguments such as `init=False`
    being lost.
  id: totrans-1157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与2.0.1中新增的对混合类支持相关的ORM声明式数据类映射中的问题，该问题通过[#9179](https://www.sqlalchemy.org/trac/ticket/9179)解决，其中在某些情况下使用混合类加上ORM继承会导致字段错误分类，导致字段级数据类参数（如`init=False`）丢失。
- en: 'References: [#9226](https://www.sqlalchemy.org/trac/ticket/9226)'
  id: totrans-1158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9226](https://www.sqlalchemy.org/trac/ticket/9226)
- en: '**[bug] [orm declarative]**'
  id: totrans-1159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [ORM声明式]**'
- en: Repaired ORM Declarative mappings to allow for the [`Mapper.primary_key`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") parameter to be specified within `__mapper_args__` when
    using [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column"). Despite this usage being directly in the 2.0
    documentation, the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    was not accepting the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct in this context. Ths feature was already
    working for the [`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") and [`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") parameters.
  id: totrans-1160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM声明式映射，允许在使用[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")时在`__mapper_args__`中指定[`Mapper.primary_key`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper")参数。尽管这种用法直接在2.0文档中，但[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")在这种情况下不接受[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")构造。这个功能已经适用于[`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper")和[`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper")参数。
- en: As part of this change, the `__mapper_args__` attribute may be specified without
    using [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") on a non-mapped mixin class, including a `"primary_key"`
    entry that refers to [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") or [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") objects locally present on the mixin; Declarative
    will also translate these columns into the correct ones for a particular mapped
    class. This again was working already for the [`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") and [`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") parameters. Additionally, elements within `"primary_key"`
    may be indicated as string names of existing mapped properties.
  id: totrans-1161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变化的一部分，可以在非映射混合类上指定`__mapper_args__`属性，而无需使用[`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")，包括引用本地存在于混合类上的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")或[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")对象的`"primary_key"`条目；声明式还将这些列转换为特定映射类的正确列。这在[`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper")和[`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper")参数中已经起���用。此外，`"primary_key"`中的元素可以指示为现有映射属性的字符串名称。
- en: 'References: [#9240](https://www.sqlalchemy.org/trac/ticket/9240)'
  id: totrans-1162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9240](https://www.sqlalchemy.org/trac/ticket/9240)
- en: '**[bug] [orm declarative]**'
  id: totrans-1163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [ORM声明式]**'
- en: An explicit error is raised if a mapping attempts to mix the use of [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") with [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") within the same class hierarchy,
    as this produces issues with the dataclass function being applied at the wrong
    time to the mapped class, leading to errors during the mapping process.
  id: totrans-1164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果映射尝试在同一类层次结构中混合使用[`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")和[`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass")，则会引发明确的错误，因为这会导致数据类函数在错误的时间应用于映射类，从而在映射过程中导致错误。
- en: 'References: [#9211](https://www.sqlalchemy.org/trac/ticket/9211)'
  id: totrans-1165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9211](https://www.sqlalchemy.org/trac/ticket/9211)
- en: examples
  id: totrans-1166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 例子
- en: '**[examples] [bug]**'
  id: totrans-1167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Reworked the [Versioning with a History Table](../orm/examples.html#examples-versioned-history)
    to work with version 2.0, while at the same time improving the overall working
    of this example to use newer APIs, including a newly added hook [`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed").
  id: totrans-1168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了[带有历史表的版本控制](../orm/examples.html#examples-versioned-history)，以适用于版本2.0，同时改进了此示例的整体工作，以使用更新的
    API，包括新添加的钩子[`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed")。
- en: 'References: [#9220](https://www.sqlalchemy.org/trac/ticket/9220)'
  id: totrans-1169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9220](https://www.sqlalchemy.org/trac/ticket/9220)
- en: sql
  id: totrans-1170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [usecase]**'
  id: totrans-1171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Added a full suite of new SQL bitwise operators, for performing database-side
    bitwise expressions on appropriate data values such as integers, bit-strings,
    and similar. Pull request courtesy Yegor Statkevich.
  id: totrans-1172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一套全新的 SQL 位运算符，用于在适当的数据值（如整数、位字符串等）上执行数据库端的位运算表达式。 拉取请求由 Yegor Statkevich
    提供。
- en: See also
  id: totrans-1173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../core/operators.html#operators-bitwise)'
  id: totrans-1174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[位运算符](../core/operators.html#operators-bitwise)'
- en: 'References: [#8780](https://www.sqlalchemy.org/trac/ticket/8780)'
  id: totrans-1175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8780](https://www.sqlalchemy.org/trac/ticket/8780)
- en: asyncio
  id: totrans-1176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [bug]**'
  id: totrans-1177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [bug]**'
- en: Repaired a regression caused by the fix for [#8419](https://www.sqlalchemy.org/trac/ticket/8419)
    which caused asyncpg connections to be reset (i.e. transaction `rollback()` called)
    and returned to the pool normally in the case that the connection were not explicitly
    returned to the connection pool and was instead being intercepted by Python garbage
    collection, which would fail if the garbage collection operation were being called
    outside of the asyncio event loop, leading to a large amount of stack trace activity
    dumped into logging and standard output.
  id: totrans-1178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于修复[#8419](https://www.sqlalchemy.org/trac/ticket/8419)而引起的回归，这导致了asyncpg连接被重置（即事务`rollback()`被调用），并且在连接未被显式返回到连接池并且被
    Python 垃圾收集拦截时，正常返回到池中，如果垃圾收集操作在 asyncio 事件循环外被调用，则会失败，导致大量堆栈跟踪活动被转储到日志和标准输出中。
- en: The correct behavior is restored, which is that all asyncio connections that
    are garbage collected due to not being explicitly returned to the connection pool
    are detached from the pool and discarded, along with a warning, rather than being
    returned the pool, as they cannot be reliably reset. In the case of asyncpg connections,
    the asyncpg-specific `terminate()` method will be used to end the connection more
    gracefully within this process as opposed to just dropping it.
  id: totrans-1179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了正确的行为，即所有由于未被显式返回到连接池而被垃圾收集的 asyncio 连接都会从池中分离并且被丢弃，同时伴随着一条警告，而不是被返回到池中，因为它们无法可靠地重置。在
    asyncpg 连接的情况下，将使用 asyncpg 特定的`terminate()`方法来更优雅地结束该连接，而不仅仅是将其丢弃。
- en: This change includes a small behavioral change that is hoped to be useful for
    debugging asyncio applications, where the warning that’s emitted in the case of
    asyncio connections being unexpectedly garbage collected has been made slightly
    more aggressive by moving it outside of a `try/except` block and into a `finally:`
    block, where it will emit unconditionally regardless of whether the detach/termination
    operation succeeded or not. It will also have the effect that applications or
    test suites which promote Python warnings to exceptions will see this as a full
    exception raise, whereas previously it was not possible for this warning to actually
    propagate as an exception. Applications and test suites which need to tolerate
    this warning in the interim should adjust the Python warnings filter to allow
    these warnings to not raise.
  id: totrans-1180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改包括了一个小的行为变更，希望对调试 asyncio 应用程序有用，其中在 asyncio 连接意外被垃圾收集时发出的警告已经通过将其移出`try/except`块并移到`finally:`块中而变得稍微更加激进，无论分离/终止操作是否成功，它都会无条件地发出。这也将使得将
    Python 警告提升为异常的应用程序或测试套件会将此视为完整的异常抛出，而以前这个警告是不可能作为异常传播的。在此期间需要容忍此警告的应用程序和测试套件应该调整
    Python 警告过滤器，以允许这些警告不会被提升为异常。
- en: The behavior for traditional sync connections remains unchanged, that garbage
    collected connections continue to be returned to the pool normally without emitting
    a warning. This will likely be changed in a future major release to at least emit
    a similar warning as is emitted for asyncio drivers, as it is a usage error for
    pooled connections to be intercepted by garbage collection without being properly
    returned to the pool.
  id: totrans-1181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传统同步连接的行为保持不变，即垃圾收集的连接继续正常返回到池中，而不会发出警告。在未来的主要发布版本中，这可能会发生变化，至少会像为asyncio驱动程序发出的类似警告一样发出警告，因为对于池化连接被垃圾收集拦截而未被正确返回到池中是一种使用错误。
- en: 'References: [#9237](https://www.sqlalchemy.org/trac/ticket/9237)'
  id: totrans-1182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9237](https://www.sqlalchemy.org/trac/ticket/9237)
- en: mysql
  id: totrans-1183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [regression]**'
  id: totrans-1184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [回归]**'
- en: Fixed regression caused by issue [#9058](https://www.sqlalchemy.org/trac/ticket/9058)
    which adjusted the MySQL dialect’s `has_table()` to again use “DESCRIBE”, where
    the specific error code raised by MySQL version 8 when using a non-existent schema
    name was unexpected and failed to be interpreted as a boolean result.
  id: totrans-1185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由问题[#9058](https://www.sqlalchemy.org/trac/ticket/9058)引起的回归，调整了MySQL方言的`has_table()`，再次使用“DESCRIBE”，当MySQL版本8在使用不存在的模式名称时引发的特定错误代码是意外的，并且无法解释为布尔结果。
- en: 'References: [#9251](https://www.sqlalchemy.org/trac/ticket/9251)'
  id: totrans-1186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9251](https://www.sqlalchemy.org/trac/ticket/9251)
- en: '**[mysql] [bug]**'
  id: totrans-1187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for MySQL 8’s new `AS <name> ON DUPLICATE KEY` syntax when using
    [`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update"), which is required
    for newer versions of MySQL 8 as the previous syntax using `VALUES()` now emits
    a deprecation warning with those versions. Server version detection is employed
    to determine if traditional MariaDB / MySQL < 8 `VALUES()` syntax should be used,
    vs. the newer MySQL 8 required syntax. Pull request courtesy Caspar Wylie.
  id: totrans-1188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对MySQL 8的新`AS <name> ON DUPLICATE KEY`语法的支持，当使用[`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update")时，这对于MySQL 8的较新版本是必需的，因为先前使用`VALUES()`的语法现在在这些版本中会发出弃用警告。服务器版本检测被用来确定是否应该使用传统的MariaDB
    / MySQL < 8 `VALUES()`语法，还是新的MySQL 8所需的语法。感谢Caspar Wylie的拉取请求。
- en: 'References: [#8626](https://www.sqlalchemy.org/trac/ticket/8626)'
  id: totrans-1189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8626](https://www.sqlalchemy.org/trac/ticket/8626)
- en: sqlite
  id: totrans-1190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-1191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed the SQLite dialect’s `has_table()` function to correctly report False
    for queries that include a non-None schema name for a schema that doesn’t exist;
    previously, a database error was raised.
  id: totrans-1192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQLite方言的`has_table()`函数，以便对于包含不存在的模式的非None模式名称的查询，正确地报告False；以前，会引发数据库错误。
- en: 'References: [#9251](https://www.sqlalchemy.org/trac/ticket/9251)'
  id: totrans-1193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9251](https://www.sqlalchemy.org/trac/ticket/9251)
- en: 2.0.1
  id: totrans-1194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.1
- en: 'Released: February 1, 2023'
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年2月1日
- en: orm
  id: totrans-1196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [regression]**'
  id: totrans-1197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [回归]**'
- en: Fixed regression where ORM models that used joined table inheritance with a
    composite foreign key would encounter an internal error in the mapper internals.
  id: totrans-1198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用具有复合外键的连接表继承的ORM模型会在映射器内部遇到内部错误的回归。
- en: 'References: [#9164](https://www.sqlalchemy.org/trac/ticket/9164)'
  id: totrans-1199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9164](https://www.sqlalchemy.org/trac/ticket/9164)
- en: '**[orm] [bug]**'
  id: totrans-1200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the error reporting when linking strategy options from a base class
    to another attribute that’s off a subclass, where `of_type()` should be used.
    Previously, when [`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options") is used, the message would lack informative detail
    that `of_type()` should be used, which was not the case when linking the options
    directly. The informative detail now emits even if [`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options") is used.
  id: totrans-1201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将基类的链接策略选项链接到子类的另一个属性时，错误报告得到改进，应该使用`of_type()`。以前，当使用[`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options")时，消息缺乏`of_type()`应该使用的信息详细信息，而在直接链接选项时不是这样。即使使用[`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options")，信息详细信息现在也会发出。
- en: 'References: [#9182](https://www.sqlalchemy.org/trac/ticket/9182)'
  id: totrans-1202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9182](https://www.sqlalchemy.org/trac/ticket/9182)
- en: orm declarative
  id: totrans-1203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明
- en: '**[bug] [orm declarative]**'
  id: totrans-1204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm声明]**'
- en: Added support for [**PEP 484**](https://peps.python.org/pep-0484/) `NewType`
    to be used in the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") as well as within [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") constructs. These types will behave in the same way as
    custom subclasses of types right now; they must appear explicitly within the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") to be mapped.
  id: totrans-1205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 [**PEP 484**](https://peps.python.org/pep-0484/) `NewType` 的支持，可以在 [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") 中使用，以及在 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 构造中使用。这些类型将与当前的自定义类型子类相同；它们必须显式出现在 [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") 中进行映射。
- en: 'References: [#9175](https://www.sqlalchemy.org/trac/ticket/9175)'
  id: totrans-1206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#9175](https://www.sqlalchemy.org/trac/ticket/9175)
- en: '**[bug] [orm declarative]**'
  id: totrans-1207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm declarative]**'
- en: When using the [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") superclass, all classes within the hierarchy
    that are subclasses of this class will now be run through the `@dataclasses.dataclass`
    function whether or not they are actually mapped, so that non-ORM fields declared
    on non-mapped classes within the hierarchy will be used when mapped subclasses
    are turned into dataclasses. This behavior applies both to intermediary classes
    mapped with `__abstract__ = True` as well as to the user-defined declarative base
    itself, assuming [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") is present as a superclass for these classes.
  id: totrans-1208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") 超类时，层次结构中的所有类（不管它们是否实际上已映射）都将通过 `@dataclasses.dataclass`
    函数运行，因此在映射的子类被转换为数据类时，层次结构中声明的非 ORM 字段将被使用。该行为既适用于使用 `__abstract__ = True` 映射的中介类，也适用于用户定义的声明基类本身，假设
    [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") 作为这些类的超类存在。
- en: This allows non-mapped attributes such as `InitVar` declarations on superclasses
    to be used, without the need to run the `@dataclasses.dataclass` decorator explicitly
    on each non-mapped class. The new behavior is considered as correct as this is
    what the [**PEP 681**](https://peps.python.org/pep-0681/) implementation expects
    when using a superclass to indicate dataclass behavior.
  id: totrans-1209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这允许像 `InitVar` 声明这样的非映射属性在超类上使用，而无需在每个非映射类上显式运行 `@dataclasses.dataclass` 装饰器。新行为被认为是正确的，因为这是当使用超类来指示数据类行为时
    [**PEP 681**](https://peps.python.org/pep-0681/) 实现所期望的。
- en: 'References: [#9179](https://www.sqlalchemy.org/trac/ticket/9179)'
  id: totrans-1210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#9179](https://www.sqlalchemy.org/trac/ticket/9179)
- en: '**[bug] [orm declarative]**'
  id: totrans-1211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm declarative]**'
- en: Added support for [**PEP 586**](https://peps.python.org/pep-0586/) `Literal[]`
    to be used in the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") as well as within [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") constructs. To use custom types such as these, they must
    appear explicitly within the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") to be mapped. Pull request courtesy Frederik Aalund.
  id: totrans-1212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 [**PEP 586**](https://peps.python.org/pep-0586/) `Literal[]` 的支持，可以在 [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") 中使用，以及在 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 构造中使用。要使用这样的自定义类型，它们必须显式出现在 [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") 中进行映射。感谢 Frederik Aalund 提交的拉取请求。
- en: As part of this change, the support for [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.sql.sqltypes.Enum") in the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") has been expanded to include support for `Literal[]`
    types consisting of string values to be used, in addition to `enum.Enum` datatypes.
    If a `Literal[]` datatype is used within `Mapped[]` that is not linked in [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") to a specific datatype, a [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.sql.sqltypes.Enum") will be used by default.
  id: totrans-1213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为此更改的一部分，将 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.sql.sqltypes.Enum")
    在 [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") 中的支持扩展为还包括 `Literal[]` 类型，该类型由字符串值组成，除了 `enum.Enum`
    数据类型之外。如果在 `Mapped[]` 中使用了一个未在 [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") 中链接到特定数据类型的 `Literal[]` 数据类型，那么默认将使用一个 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.sql.sqltypes.Enum")。
- en: See also
  id: totrans-1214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Python Enum or pep-586 Literal types in the type map](../orm/declarative_tables.html#orm-declarative-mapped-column-enums)'
  id: totrans-1215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在类型映射中使用 Python Enum 或 pep-586 Literal 类型](../orm/declarative_tables.html#orm-declarative-mapped-column-enums)'
- en: 'References: [#9187](https://www.sqlalchemy.org/trac/ticket/9187)'
  id: totrans-1216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9187](https://www.sqlalchemy.org/trac/ticket/9187)
- en: '**[bug] [orm declarative]**'
  id: totrans-1217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm declarative]**'
- en: Fixed issue involving the use of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.sql.sqltypes.Enum") within the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") where the [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") parameter would not be correctly copied to the mapped
    column datatype, if it were overridden as stated in the documentation to set this
    parameter to False.
  id: totrans-1218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") 中使用 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.sql.sqltypes.Enum") 时，修复了一个问题，即如果根据文档将 [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") 参数重写为 False，则该参数将不会正确地复制到映射的列数据类型中。
- en: 'References: [#9200](https://www.sqlalchemy.org/trac/ticket/9200)'
  id: totrans-1219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9200](https://www.sqlalchemy.org/trac/ticket/9200)
- en: '**[bug] [orm declarative] [regression]**'
  id: totrans-1220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm declarative] [regression]**'
- en: Fixed regression in [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") class where the registry’s default constructor
    would not be applied to the base itself, which is different from how the previous
    [`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") construct works. This would prevent a mapped
    class with its own `__init__()` method from calling `super().__init__()` in order
    to access the registry’s default constructor and automatically populate attributes,
    instead hitting `object.__init__()` which would raise a `TypeError` on any arguments.
  id: totrans-1221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") 类中修复了一个回归，其中注册表的默认构造函数不会应用于基类本身，这与以前的 [`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") 构造方式不同。这会阻止具有自己的 `__init__()` 方法的映射类调用 `super().__init__()`
    以访问注册表的默认构造函数并自动填充属性，而是会命中 `object.__init__()`，这会导致在任何参数上引发 `TypeError`。
- en: 'References: [#9171](https://www.sqlalchemy.org/trac/ticket/9171)'
  id: totrans-1222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9171](https://www.sqlalchemy.org/trac/ticket/9171)
- en: '**[bug] [orm declarative]**'
  id: totrans-1223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm declarative]**'
- en: Improved the ruleset used to interpret [**PEP 593**](https://peps.python.org/pep-0593/)
    `Annotated` types when used with Annotated Declarative mapping, the inner type
    will be checked for “Optional” in all cases which will be added to the criteria
    by which the column is set as “nullable” or not; if the type within the `Annotated`
    container is optional (or unioned with `None`), the column will be considered
    nullable if there are no explicit [`mapped_column.nullable`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.nullable
    "sqlalchemy.orm.mapped_column") parameters overriding it.
  id: totrans-1224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了在使用 Annotated Declarative mapping 时解释 [**PEP 593**](https://peps.python.org/pep-0593/)
    `Annotated` 类型的规则集，内部类型将始终检查“Optional”，并将其添加到确定列是否为“nullable”的条件中；如果 `Annotated`
    容器中的类型是可选的（或与 `None` 联合），则如果没有显式的 [`mapped_column.nullable`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.nullable
    "sqlalchemy.orm.mapped_column") 参数覆盖它，将考虑该列为可空。
- en: 'References: [#9177](https://www.sqlalchemy.org/trac/ticket/9177)'
  id: totrans-1225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9177](https://www.sqlalchemy.org/trac/ticket/9177)
- en: sql
  id: totrans-1226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Corrected the fix for [#7664](https://www.sqlalchemy.org/trac/ticket/7664),
    released in version 2.0.0, to also include [`DropSchema`](../core/ddl.html#sqlalchemy.schema.DropSchema
    "sqlalchemy.schema.DropSchema") which was inadvertently missed in this fix, allowing
    stringification without a dialect. The fixes for both constructs is backported
    to the 1.4 series as of 1.4.47.
  id: totrans-1228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了版本2.0.0中发布的对[#7664](https://www.sqlalchemy.org/trac/ticket/7664)的修复，还包括了[`DropSchema`](../core/ddl.html#sqlalchemy.schema.DropSchema
    "sqlalchemy.schema.DropSchema")，这在修复中被无意中忽略，允许在没有方言的情况下进行字符串化。这两个构造的修复已经回溯到1.4.47版本的1.4系列。
- en: 'References: [#7664](https://www.sqlalchemy.org/trac/ticket/7664)'
  id: totrans-1229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7664](https://www.sqlalchemy.org/trac/ticket/7664)
- en: '**[sql] [bug] [regression]**'
  id: totrans-1230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [regression]**'
- en: Fixed regression related to the implementation for the new “insertmanyvalues”
    feature where an internal `TypeError` would occur in arrangements where a [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") would be referenced inside of another [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") via a CTE; made additional repairs for this
    use case for positional dialects such as asyncpg when using “insertmanyvalues”.
  id: totrans-1231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与新“insertmanyvalues”功能实现相关的回归，其中在CTE中引用另一个[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert")时会出现内部`TypeError`的情况；为此情况进行了额外的修复，适用于像asyncpg这样的位置方言在使用“insertmanyvalues”时。
- en: 'References: [#9173](https://www.sqlalchemy.org/trac/ticket/9173)'
  id: totrans-1232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9173](https://www.sqlalchemy.org/trac/ticket/9173)
- en: typing
  id: totrans-1233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-1234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Opened up typing on [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update") to also accept table and mapped
    class arguments, as seems to be available for the MySQL dialect.
  id: totrans-1235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开了对[`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update")的类型，也接受表和映射类参数，似乎适用于MySQL方言。
- en: 'References: [#9174](https://www.sqlalchemy.org/trac/ticket/9174)'
  id: totrans-1236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9174](https://www.sqlalchemy.org/trac/ticket/9174)
- en: '**[typing] [bug]**'
  id: totrans-1237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing for limit/offset methods including [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit"), [`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset"), [`Query.limit()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.limit
    "sqlalchemy.orm.Query.limit"), [`Query.offset()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.offset
    "sqlalchemy.orm.Query.offset") to allow `None`, which is the documented API to
    “cancel” the current limit/offset.
  id: totrans-1238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了限制/偏移方法的类型，包括[`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit")、[`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset")、[`Query.limit()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.limit
    "sqlalchemy.orm.Query.limit")、[`Query.offset()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.offset
    "sqlalchemy.orm.Query.offset")，允许`None`，这是“取消”当前限制/偏移的文档化API。
- en: 'References: [#9183](https://www.sqlalchemy.org/trac/ticket/9183)'
  id: totrans-1239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9183](https://www.sqlalchemy.org/trac/ticket/9183)
- en: '**[typing] [bug]**'
  id: totrans-1240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue where [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") objects typed as [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") wouldn’t be accepted in schema constraints such as [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") or [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index").
  id: totrans-1241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")对象被类型化为[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")时不会被接受在模式约束中，如[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")、[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")或[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")。
- en: 'References: [#9170](https://www.sqlalchemy.org/trac/ticket/9170)'
  id: totrans-1242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9170](https://www.sqlalchemy.org/trac/ticket/9170)
- en: '**[typing] [bug]**'
  id: totrans-1243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing for [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") to accept both `Type[TypeEngine[T]]`
    and `TypeEngine[T]`; previously only `TypeEngine[T]` was accepted. Pull request
    courtesy Yurii Karabas.
  id: totrans-1244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对 [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") 的类型检查，以接受 `Type[TypeEngine[T]]`
    和 `TypeEngine[T]`；先前只接受 `TypeEngine[T]`。拉取请求由 Yurii Karabas 提供。
- en: 'References: [#9156](https://www.sqlalchemy.org/trac/ticket/9156)'
  id: totrans-1245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#9156](https://www.sqlalchemy.org/trac/ticket/9156)
- en: 2.0.0
  id: totrans-1246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.0
- en: 'Released: January 26, 2023'
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023 年 1 月 26 日
- en: orm
  id: totrans-1248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [bug]**'
  id: totrans-1249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Improved the notification of warnings that are emitted within the configure
    mappers or flush process, which are often invoked as part of a different operation,
    to add additional context to the message that indicates one of these operations
    as the source of the warning within operations that may not be obviously related.
  id: totrans-1250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了在配置映射器或刷新过程中发出的警告的通知，这些警告通常作为不同操作的一部分调用，以在可能不明显相关的操作中添加附加上下文到警告的消息，指示其中一个这些操作作为警告源在操作中的消息内。
- en: 'References: [#7305](https://www.sqlalchemy.org/trac/ticket/7305)'
  id: totrans-1251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#7305](https://www.sqlalchemy.org/trac/ticket/7305)
- en: orm extensions
  id: totrans-1252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM 扩展
- en: '**[feature] [orm extensions]**'
  id: totrans-1253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [ORM 扩展]**'
- en: Added new option to horizontal sharding API [`set_shard_id`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.set_shard_id
    "sqlalchemy.ext.horizontal_shard.set_shard_id") which sets the effective shard
    identifier to query against, for both the primary query as well as for all secondary
    loaders including relationship eager loaders as well as relationship and column
    lazy loaders.
  id: totrans-1254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向水平分片 API [`set_shard_id`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.set_shard_id
    "sqlalchemy.ext.horizontal_shard.set_shard_id") 添加了新选项，该选项设置了要针对其进行查询的有效分片标识符，包括主查询以及所有次要加载程序，包括关系急加载程序以及关系和列延迟加载程序。
- en: 'References: [#7226](https://www.sqlalchemy.org/trac/ticket/7226)'
  id: totrans-1255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#7226](https://www.sqlalchemy.org/trac/ticket/7226)
- en: '**[usecase] [orm extensions]**'
  id: totrans-1256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[用例] [ORM 扩展]**'
- en: Added new feature to [`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase") for autoload of classes across multiple
    schemas which may have overlapping names, by providing a [`AutomapBase.prepare.modulename_for_table`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare.params.modulename_for_table
    "sqlalchemy.ext.automap.AutomapBase.prepare") parameter which allows customization
    of the `__module__` attribute of newly generated classes, as well as a new collection
    [`AutomapBase.by_module`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.by_module
    "sqlalchemy.ext.automap.AutomapBase.by_module"), which stores a dot-separated
    namespace of module names linked to classes based on the `__module__` attribute.
  id: totrans-1257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase") 添加了新功能，用于跨多个模式自动加载类，这些类可能具有重叠的名称，方法是提供一个
    [`AutomapBase.prepare.modulename_for_table`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare.params.modulename_for_table
    "sqlalchemy.ext.automap.AutomapBase.prepare") 参数，允许自定义新生成的类的 `__module__` 属性，以及一个新集合
    [`AutomapBase.by_module`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.by_module
    "sqlalchemy.ext.automap.AutomapBase.by_module")，它存储了基于 `__module__` 属性的类的点分隔的模块名称空间。
- en: Additionally, the [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") method may now be invoked any number
    of times, with or without reflection enabled; only newly added tables that were
    not previously mapped will be processed on each call. Previously, the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") method would need to be called explicitly
    each time.
  id: totrans-1258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，现在可以任意次调用 [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") 方法，无论是否启用了反射；在每次调用时，只会处理之前未映射的新添加的表。先前，需要显式调用
    [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 方法。
- en: See also
  id: totrans-1259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Generating Mappings from Multiple Schemas](../orm/extensions/automap.html#automap-by-module)
    - illustrates use of both techniques at once.'
  id: totrans-1260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[从多个模式生成映射](../orm/extensions/automap.html#automap-by-module) - 同时演示两种技术的使用。'
- en: 'References: [#5145](https://www.sqlalchemy.org/trac/ticket/5145)'
  id: totrans-1261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#5145](https://www.sqlalchemy.org/trac/ticket/5145)
- en: sql
  id: totrans-1262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [bug]**'
  id: totrans-1263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: 'Fixed stringify for a the [`CreateSchema`](../core/ddl.html#sqlalchemy.schema.CreateSchema
    "sqlalchemy.schema.CreateSchema") DDL construct, which would fail with an `AttributeError`
    when stringified without a dialect. Update: Note this fix failed to accommodate
    for [`DropSchema`](../core/ddl.html#sqlalchemy.schema.DropSchema "sqlalchemy.schema.DropSchema");
    a followup fix in version 2.0.1 repairs this case. The fix for both elements is
    backported to 1.4.47.'
  id: totrans-1264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`CreateSchema`](../core/ddl.html#sqlalchemy.schema.CreateSchema "sqlalchemy.schema.CreateSchema")
    DDL 构造的字符串化问题，当没有方言时，会导致`AttributeError`。更新：请注意，此修复未考虑到[`DropSchema`](../core/ddl.html#sqlalchemy.schema.DropSchema
    "sqlalchemy.schema.DropSchema")；版本2.0.1中的后续修复解决了这个问题。这两个元素的修复已经回溯到1.4.47。
- en: 'References: [#7664](https://www.sqlalchemy.org/trac/ticket/7664)'
  id: totrans-1265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7664](https://www.sqlalchemy.org/trac/ticket/7664)
- en: typing
  id: totrans-1266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入
- en: '**[typing] [bug]**'
  id: totrans-1267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Added typing for the built-in generic functions that are available from the
    [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    namespace, which accept a particular set of arguments and return a particular
    type, such as for `count`, `current_timestamp`, etc.
  id: totrans-1268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为从[`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")命名空间中可用的内置通用函数添加了类型，这些函数接受一组特定的参数并返回特定的类型，例如`count`，`current_timestamp`等。
- en: 'References: [#9129](https://www.sqlalchemy.org/trac/ticket/9129)'
  id: totrans-1269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9129](https://www.sqlalchemy.org/trac/ticket/9129)
- en: '**[typing] [bug]**'
  id: totrans-1270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Corrected the type passed for “lambda statements” so that a plain lambda is
    accepted by mypy, pyright, others without any errors about argument types. Additionally
    implemented typing for more of the public API for lambda statements and ensured
    [`StatementLambdaElement`](../core/foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") is part of the [`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") hierarchy so it’s typed as accepted by
    [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").
  id: totrans-1271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了“lambda语句”传递的类型，以便mypy、pyright等可以接受普通lambda而不会出现关于参数类型的任何错误。此外，为更多的lambda语句公共API实现了类型，并确保[`StatementLambdaElement`](../core/foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement")是[`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")层次结构的一部分，因此它被类型化为被[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")接受。
- en: 'References: [#9120](https://www.sqlalchemy.org/trac/ticket/9120)'
  id: totrans-1272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9120](https://www.sqlalchemy.org/trac/ticket/9120)
- en: '**[typing] [bug]**'
  id: totrans-1273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: The [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") methods are typed to include
    `Iterable[Any]` rather than `Sequence[Any]` for more flexibility in argument type.
  id: totrans-1274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")和[`ColumnOperators.not_in()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in")方法的类型现在包括`Iterable[Any]`，而不是`Sequence[Any]`，以提供更灵活的参数类型。'
- en: 'References: [#9122](https://www.sqlalchemy.org/trac/ticket/9122)'
  id: totrans-1275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9122](https://www.sqlalchemy.org/trac/ticket/9122)
- en: '**[typing] [bug]**'
  id: totrans-1276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: The [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    and [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    from a typing perspective require the first argument to be present, however these
    functions still accept zero arguments which will emit a deprecation warning at
    runtime. Typing is also added to support sending the fixed literal `False` for
    [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    and `True` for [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") as the first argument only, however the documentation
    now indicates sending the [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false") and [`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") constructs in these cases as a more explicit
    approach.
  id: totrans-1277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从类型的角度来看，[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    和 [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    需要第一个参数存在，但这些函数仍然接受零个参数，这将在运行时发出弃用警告。还添加了类型支持，以支持将固定字面量`False`用于[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_") 和 `True`用于[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") 作为唯一的第一个参数，但文档现在指示在这些情况下发送[`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false") 和 [`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") 构造作为更明确的方法。
- en: 'References: [#9123](https://www.sqlalchemy.org/trac/ticket/9123)'
  id: totrans-1278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9123](https://www.sqlalchemy.org/trac/ticket/9123)
- en: '**[typing] [bug]**'
  id: totrans-1279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[打字] [错误]**'
- en: Fixed typing issue where iterating over a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object was not correctly typed.
  id: totrans-1280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在对[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象进行迭代时类型不正确的问题。
- en: 'References: [#9125](https://www.sqlalchemy.org/trac/ticket/9125)'
  id: totrans-1281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9125](https://www.sqlalchemy.org/trac/ticket/9125)
- en: '**[typing] [bug]**'
  id: totrans-1282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[打字] [错误]**'
- en: Fixed typing issue where the object type when using [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") as a context manager were not preserved, indicating
    [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    in all cases rather than the specific [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") sub-type. Pull request courtesy Martin Baláž.
  id: totrans-1283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")作为上下文管理器时对象类型未被保留的问题，始终指示所有情况下的[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")而不是特定的[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")子类型。感谢 Martin Baláž 的拉取请求。
- en: 'References: [#9136](https://www.sqlalchemy.org/trac/ticket/9136)'
  id: totrans-1284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9136](https://www.sqlalchemy.org/trac/ticket/9136)
- en: '**[typing] [bug]**'
  id: totrans-1285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[打字] [错误]**'
- en: Fixed issue where using the [`relationship.remote_side`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship") and similar parameters, passing an annotated declarative
    object typed as [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped"),
    would not be accepted by the type checker.
  id: totrans-1286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`relationship.remote_side`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship") 和类似参数时的问题，传递作为[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")类型的注释声明对象将不被类型检查器接受。
- en: 'References: [#9150](https://www.sqlalchemy.org/trac/ticket/9150)'
  id: totrans-1287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9150](https://www.sqlalchemy.org/trac/ticket/9150)
- en: '**[typing] [bug]**'
  id: totrans-1288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[打字] [错误]**'
- en: Added typing to legacy operators such as `isnot()`, `notin_()`, etc. which previously
    were referencing the newer operators but were not themselves typed.
  id: totrans-1289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为诸如`isnot()`、`notin_()`等旧操作符添加了类型，这些操作符以前引用了更新的操作符，但它们本身没有被类型化。
- en: 'References: [#9148](https://www.sqlalchemy.org/trac/ticket/9148)'
  id: totrans-1290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9148](https://www.sqlalchemy.org/trac/ticket/9148)
- en: postgresql
  id: totrans-1291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Added support to the asyncpg dialect to return the `cursor.rowcount` value for
    SELECT statements when available. While this is not a typical use for `cursor.rowcount`,
    the other PostgreSQL dialects generally provide this value. Pull request courtesy
    Michael Gorven.
  id: totrans-1293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 asyncpg 方言的支持，以在可用时返回`cursor.rowcount`值用于 SELECT 语句。虽然这不是`cursor.rowcount`的典型用法，但其他
    PostgreSQL 方言通常提供此值。感谢 Michael Gorven 的拉取请求。
- en: 'This change is also **backported** to: 1.4.47'
  id: totrans-1294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.47
- en: 'References: [#9048](https://www.sqlalchemy.org/trac/ticket/9048)'
  id: totrans-1295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9048](https://www.sqlalchemy.org/trac/ticket/9048)
- en: mysql
  id: totrans-1296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-1297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [用例]**'
- en: Added support to MySQL index reflection to correctly reflect the `mysql_length`
    dictionary, which previously was being ignored.
  id: totrans-1298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对MySQL索引反射的支持，以正确反映先前被忽略的`mysql_length`字典。
- en: 'This change is also **backported** to: 1.4.47'
  id: totrans-1299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.47
- en: 'References: [#9047](https://www.sqlalchemy.org/trac/ticket/9047)'
  id: totrans-1300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9047](https://www.sqlalchemy.org/trac/ticket/9047)
- en: mssql
  id: totrans-1301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug] [regression]**'
  id: totrans-1302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [regression]**'
- en: The newly added comment reflection and rendering capability of the MSSQL dialect,
    added in [#7844](https://www.sqlalchemy.org/trac/ticket/7844), will now be disabled
    by default if it cannot be determined that an unsupported backend such as Azure
    Synapse may be in use; this backend does not support table and column comments
    and does not support the SQL Server routines in use to generate them as well as
    to reflect them. A new parameter `supports_comments` is added to the dialect which
    defaults to `None`, indicating that comment support should be auto-detected. When
    set to `True` or `False`, the comment support is either enabled or disabled unconditionally.
  id: totrans-1303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MSSQL方言的新添加的注释反射和渲染功能，添加于[#7844](https://www.sqlalchemy.org/trac/ticket/7844)，如果无法确定是否使用不受支持的后端（如Azure
    Synapse），则现在将默认禁用；这个后端不支持表和列注释，也不支持用于生成它们以及反映它们的SQL Server例程。方言添加了一个新参数`supports_comments`，默认值为`None`，表示应自动检测注释支持。当设置为`True`或`False`时，注释支持将被无条件启用或禁用。
- en: See also
  id: totrans-1304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[DDL Comment Support](../dialects/mssql.html#mssql-comment-support)'
  id: totrans-1305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[DDL注释支持](../dialects/mssql.html#mssql-comment-support)'
- en: 'References: [#9142](https://www.sqlalchemy.org/trac/ticket/9142)'
  id: totrans-1306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9142](https://www.sqlalchemy.org/trac/ticket/9142)
- en: 2.0.0rc3
  id: totrans-1307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.0rc3
- en: 'Released: January 18, 2023'
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年1月18日
- en: orm
  id: totrans-1309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new parameter to [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") called [`Mapper.polymorphic_abstract`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_abstract
    "sqlalchemy.orm.Mapper"). The purpose of this directive is so that the ORM will
    not consider the class to be instantiated or loaded directly, only subclasses.
    The actual effect is that the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") will prevent direct instantiation of instances of the
    class and will expect that the class does not have a distinct polymorphic identity
    configured.
  id: totrans-1311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")添加了一个名为[`Mapper.polymorphic_abstract`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_abstract
    "sqlalchemy.orm.Mapper")的新参数。该指令的目的是让ORM不考虑该类被直接实例化或加载，只考虑子类。实际效果是，[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")将阻止直接实例化该类的实例，并期望该类没有配置独特的多态标识。
- en: In practice, the class that is mapped with [`Mapper.polymorphic_abstract`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_abstract
    "sqlalchemy.orm.Mapper") can be used as the target of a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") as well as be used in queries; subclasses must
    of course include polymorphic identities in their mappings.
  id: totrans-1312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在实践中，使用[`Mapper.polymorphic_abstract`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_abstract
    "sqlalchemy.orm.Mapper")映射的类可以作为[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的目标，也可以在查询中使用；当然，子类必须在映射中包含多态标识。
- en: The new parameter is automatically applied to classes that subclass the [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") class, as this class is not
    intended to be instantiated.
  id: totrans-1313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新参数会自动应用于继承[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")类的类，因为这个类不打算被实例化。
- en: See also
  id: totrans-1314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Building Deeper Hierarchies with polymorphic_abstract](../orm/inheritance.html#orm-inheritance-abstract-poly)'
  id: totrans-1315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用多态抽象构建更深层次的层次结构](../orm/inheritance.html#orm-inheritance-abstract-poly)'
- en: 'References: [#9060](https://www.sqlalchemy.org/trac/ticket/9060)'
  id: totrans-1316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9060](https://www.sqlalchemy.org/trac/ticket/9060)
- en: '**[orm] [bug]**'
  id: totrans-1317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where using a pep-593 `Annotated` type in the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") which itself contained a generic plain container or
    `collections.abc` type (e.g. `list`, `dict`, `collections.abc.Sequence`, etc.
    ) as the target type would produce an internal error when the ORM were trying
    to interpret the `Annotated` instance.
  id: totrans-1318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry")中使用 pep-593 `Annotated` 类型，其本身包含一个通用的普通容器或`collections.abc`类型（例如
    `list`, `dict`, `collections.abc.Sequence` 等）作为目标类型时会在 ORM 尝试解释`Annotated`实例时产生内部错误的问题。
- en: 'References: [#9099](https://www.sqlalchemy.org/trac/ticket/9099)'
  id: totrans-1319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9099](https://www.sqlalchemy.org/trac/ticket/9099)
- en: '**[orm] [bug]**'
  id: totrans-1320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added an error message when a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") is mapped against an abstract container type, such
    as `Mapped[Sequence[B]]`, without providing the [`relationship.container_class`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.container_class
    "sqlalchemy.orm.relationship") parameter which is necessary when the type is abstract.
    Previously the abstract container would attempt to be instantiated at a later
    step and fail.
  id: totrans-1321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")映射到抽象容器类型（例如`Mapped[Sequence[B]]`）时未提供[`relationship.container_class`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.container_class
    "sqlalchemy.orm.relationship")参数时，添加了一个错误消息，此参数在类型为抽象时是必需的。以前，抽象容器会在稍后的步骤中尝试实例化并失败。
- en: 'References: [#9100](https://www.sqlalchemy.org/trac/ticket/9100)'
  id: totrans-1322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9100](https://www.sqlalchemy.org/trac/ticket/9100)
- en: sql
  id: totrans-1323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug / regression where using [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") with the same name as a column in the [`Update.values()`](../core/dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values") method of [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update"), as well as the [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method of [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") in 2.0 only, would in some cases silently
    fail to honor the SQL expression in which the parameter were presented, replacing
    the expression with a new parameter of the same name and discarding any other
    elements of the SQL expression, such as SQL functions, etc. The specific case
    would be statements that were constructed against ORM entities rather than plain
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    instances, but would occur if the statement were invoked with a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") or a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-1325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用与[`Update.values()`](../core/dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values")方法中的列相同名称的[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")，以及在 2.0 中的 [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 方法中，如果在构造的语句中使用相同名称的参数，则在某些情况下会静默失败，替换为同名的新参数，并丢弃
    SQL 表达式的其他元素，例如 SQL 函数等。特定情况将是针对 ORM 实体而不是普通[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")实例构造的语句，但如果使用 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 或 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 调用语句，则会发生。
- en: '[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    part of the issue was present in both 2.0 and 1.4 and is backported to 1.4.'
  id: totrans-1326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    部分的问题既存在于 2.0 中也存在于 1.4 中，并被回溯到 1.4。'
- en: 'This change is also **backported** to: 1.4.47'
  id: totrans-1327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**被回溯**到：1.4.47
- en: 'References: [#9075](https://www.sqlalchemy.org/trac/ticket/9075)'
  id: totrans-1328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9075](https://www.sqlalchemy.org/trac/ticket/9075)
- en: typing
  id: totrans-1329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-1330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixes to the annotations within the `sqlalchemy.ext.hybrid` extension for more
    effective typing of user-defined methods. The typing now uses [**PEP 612**](https://peps.python.org/pep-0612/)
    features, now supported by recent versions of Mypy, to maintain argument signatures
    for [`hybrid_method`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method"). Return values for hybrid methods are accepted
    as SQL expressions in contexts such as [`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") while still supporting SQL methods.
  id: totrans-1331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在`sqlalchemy.ext.hybrid`扩展中注释的问题，以更有效地对用户定义的方法进行类型化。现在，typing使用[**PEP 612**](https://peps.python.org/pep-0612/)功能，最近的Mypy版本也支持，以维护[`hybrid_method`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method")的参数签名。 混合方法的返回值在[`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where")等上下文中被接受为SQL表达式，同时仍支持SQL方法。
- en: 'References: [#9096](https://www.sqlalchemy.org/trac/ticket/9096)'
  id: totrans-1332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9096](https://www.sqlalchemy.org/trac/ticket/9096)
- en: mypy
  id: totrans-1333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mypy
- en: '**[mypy] [bug]**'
  id: totrans-1334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mypy] [bug]**'
- en: 'Adjustments made to the mypy plugin to accommodate for some potential changes
    being made for issue #236 sqlalchemy2-stubs when using SQLAlchemy 1.4\. These
    changes are being kept in sync within SQLAlchemy 2.0. The changes are also backwards
    compatible with older versions of sqlalchemy2-stubs.'
  id: totrans-1335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了mypy插件，以适应SQLAlchemy 1.4时可能进行的一些更改，这些更改是针对问题＃236 sqlalchemy2-stubs而进行的。这些更改与SQLAlchemy
    2.0保持同步。这些更改也向后兼容旧版本的sqlalchemy2-stubs。
- en: 'This change is also **backported** to: 1.4.47'
  id: totrans-1336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯到**：1.4.47
- en: '**[mypy] [bug]**'
  id: totrans-1337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mypy] [bug]**'
- en: Fixed crash in mypy plugin which could occur on both 1.4 and 2.0 versions if
    a decorator for the [`mapped()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") decorator were used that was referenced in an
    expression with more than two components (e.g. `@Backend.mapper_registry.mapped`).
    This scenario is now ignored; when using the plugin, the decorator expression
    needs to be two components (i.e. `@reg.mapped`).
  id: totrans-1338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了mypy插件中的崩溃，在1.4和2.0版本中均可能发生，如果装饰器用于与具有两个以上组件的表达式（例如`@Backend.mapper_registry.mapped`）中引用，则会发生。
    现在，此场景被忽略； 使用插件时，装饰器表达式需要是两个组件（即`@reg.mapped`）。
- en: 'This change is also **backported** to: 1.4.47'
  id: totrans-1339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯到**：1.4.47
- en: 'References: [#9102](https://www.sqlalchemy.org/trac/ticket/9102)'
  id: totrans-1340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9102](https://www.sqlalchemy.org/trac/ticket/9102)
- en: postgresql
  id: totrans-1341
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression where psycopg3 changed an API call as of version 3.1.8 to expect
    a specific object type that was previously not enforced, breaking connectivity
    for the psycopg3 dialect.
  id: totrans-1343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了psycopg3版本3.1.8更改了API调用的回归，以期望先前未强制执行的特定对象类型，从而破坏了psycopg3方言的连接性。
- en: 'References: [#9106](https://www.sqlalchemy.org/trac/ticket/9106)'
  id: totrans-1344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9106](https://www.sqlalchemy.org/trac/ticket/9106)
- en: oracle
  id: totrans-1345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [usecase]**'
  id: totrans-1346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [usecase]**'
- en: Added support for the Oracle SQL type `TIMESTAMP WITH LOCAL TIME ZONE`, using
    a newly added Oracle-specific [`TIMESTAMP`](../dialects/oracle.html#sqlalchemy.dialects.oracle.TIMESTAMP
    "sqlalchemy.dialects.oracle.TIMESTAMP") datatype.
  id: totrans-1347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对Oracle SQL类型`TIMESTAMP WITH LOCAL TIME ZONE`的支持，使用新添加的Oracle特定的[`TIMESTAMP`](../dialects/oracle.html#sqlalchemy.dialects.oracle.TIMESTAMP
    "sqlalchemy.dialects.oracle.TIMESTAMP")数据类型。
- en: 'References: [#9086](https://www.sqlalchemy.org/trac/ticket/9086)'
  id: totrans-1348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9086](https://www.sqlalchemy.org/trac/ticket/9086)
- en: 2.0.0rc2
  id: totrans-1349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.0rc2
- en: 'Released: January 9, 2023'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: 'Released: January 9, 2023'
- en: orm
  id: totrans-1351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where an overly restrictive ORM mapping rule were added in 2.0 which
    prevented mappings against [`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") objects, such as those used in the view
    recipe on the wiki.
  id: totrans-1353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在2.0中添加的过于严格的ORM映射规则，该规则阻止了对[`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")对象的映射，例如在wiki上使用的视图配方中使用的那些。
- en: 'References: [#9071](https://www.sqlalchemy.org/trac/ticket/9071)'
  id: totrans-1354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9071](https://www.sqlalchemy.org/trac/ticket/9071)
- en: typing
  id: totrans-1355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-1356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: The Data Class Transforms argument `field_descriptors` was renamed to `field_specifiers`
    in the accepted version of PEP 681.
  id: totrans-1357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 数据类转换参数`field_descriptors`在PEP 681的已接受版本中更名为`field_specifiers`。
- en: 'References: [#9067](https://www.sqlalchemy.org/trac/ticket/9067)'
  id: totrans-1358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9067](https://www.sqlalchemy.org/trac/ticket/9067)
- en: postgresql
  id: totrans-1359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [json]**'
  id: totrans-1360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [json]**'
- en: 'Implemented missing `JSONB` operations:'
  id: totrans-1361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Implemented missing `JSONB` operations:'
- en: '`@@` using [`Comparator.path_match()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match")'
  id: totrans-1362
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@@` 使用[`Comparator.path_match()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match")'
- en: '`@?` using [`Comparator.path_exists()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists")'
  id: totrans-1363
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@?` 使用[`Comparator.path_exists()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists")'
- en: '`#-` using [`Comparator.delete_path()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path")'
  id: totrans-1364
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#-` 使用[`Comparator.delete_path()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path")'
- en: Pull request courtesy of Guilherme Martins Crocetti.
  id: totrans-1365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 感谢Guilherme Martins Crocetti提供的拉取请求。
- en: 'References: [#7147](https://www.sqlalchemy.org/trac/ticket/7147)'
  id: totrans-1366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#7147](https://www.sqlalchemy.org/trac/ticket/7147)
- en: mysql
  id: totrans-1367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-1368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Restored the behavior of [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") to report on temporary tables
    for MySQL / MariaDB. This is currently the behavior for all other included dialects,
    but was removed for MySQL in 1.4 due to no longer using the DESCRIBE command;
    there was no documented support for temp tables being reported by the [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") method in this version or
    on any previous version, so the previous behavior was undefined.
  id: totrans-1369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了[`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table")的行为，以报告MySQL / MariaDB的临时表。这是所有其他包含的方言当前的行为，但是在1.4中由于不再使用DESCRIBE命令而删除了MySQL的该行为；在此版本或任何以前的版本上都没有记录支持通过[`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table")方法报告临时表的文件，因此以前的行为未定义。
- en: As SQLAlchemy 2.0 has added formal support for temp table status via [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table"), the MySQL /MariaDB dialect
    has been reverted to use the “DESCRIBE” statement as it did in the SQLAlchemy
    1.3 series and previously, and test support is added to include MySQL / MariaDB
    for this behavior. The previous issues with ROLLBACK being emitted which 1.4 sought
    to improve upon don’t apply in SQLAlchemy 2.0 due to simplifications in how [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") handles transactions.
  id: totrans-1370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于SQLAlchemy 2.0已经为临时表状态添加了正式支持通过[`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table")，因此MySQL / MariaDB方言已恢复为使用“DESCRIBE”语句，就像SQLAlchemy
    1.3系列和以前一样，并且添加了测试支持以包含MySQL / MariaDB的此行为。由于SQLAlchemy 2.0中[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")如何处理事务的简化，1.4试图改进的ROLLBACK引发的先前问题不适用。
- en: DESCRIBE is necessary as MariaDB in particular has no consistently available
    public information schema of any kind in order to report on temp tables other
    than DESCRIBE/SHOW COLUMNS, which rely on throwing an error in order to report
    no results.
  id: totrans-1371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DESCRIBE是必需的，因为MariaDB特别是没有任何一致可用的公共信息模式以报告临时表，除了依赖于抛出错误以报告无结果的DESCRIBE/SHOW
    COLUMNS。
- en: 'References: [#9058](https://www.sqlalchemy.org/trac/ticket/9058)'
  id: totrans-1372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9058](https://www.sqlalchemy.org/trac/ticket/9058)
- en: oracle
  id: totrans-1373
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Supported use case for foreign key constraints where the local column is marked
    as “invisible”. The errors normally generated when a [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") is created that check for the target
    column are disabled when reflecting, and the constraint is skipped with a warning
    in the same way which already occurs for an [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") with a similar issue.
  id: totrans-1375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持外键约束的用例，其中本地列标记为“不可见”。当反射创建检查目标列的[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")时，通常生成的错误被禁用，并且与已存在的具有类似问题的[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")一样，跳过该约束并发出警告。
- en: 'References: [#9059](https://www.sqlalchemy.org/trac/ticket/9059)'
  id: totrans-1376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9059](https://www.sqlalchemy.org/trac/ticket/9059)
- en: 2.0.0rc1
  id: totrans-1377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.0rc1
- en: 'Released: December 28, 2022'
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2022 年 12 月 28 日
- en: general
  id: totrans-1379
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general] [bug]**'
  id: totrans-1380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [错误]**'
- en: Fixed regression where the base compat module was calling upon `platform.architecture()`
    in order to detect some system properties, which results in an over-broad system
    call against the system-level `file` call that is unavailable under some circumstances,
    including within some secure environment configurations.
  id: totrans-1381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了基础兼容模块调用`platform.architecture()`以检测某些系统属性的回归错误，结果是对系统级别的`file`调用进行了过于广泛的系统调用，在某些情况下不可用，包括某些安全环境配置中。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-1382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已被**回溯**到：1.4.46
- en: 'References: [#8995](https://www.sqlalchemy.org/trac/ticket/8995)'
  id: totrans-1383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8995](https://www.sqlalchemy.org/trac/ticket/8995)
- en: orm
  id: totrans-1384
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [feature]**'
  id: totrans-1385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added a new default value for the [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") parameter “auto”, which will automatically fetch table
    default values during a unit of work flush, if the dialect supports RETURNING
    for the INSERT being run, as well as [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    available. Eager fetches for server-side UPDATE defaults, which are very uncommon,
    continue to only take place if [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") is set to `True`, as there is no batch-RETURNING form
    for UPDATE statements.
  id: totrans-1386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的默认值为[`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper")参数“auto”的值，这将在工作单元刷新期间自动获取表默认值，如果方言支持 INSERT 的 RETURNING，以及可用的
    [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)。对于服务器端 UPDATE
    默认值的及时获取，这是非常罕见的，只有当[`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper")设置为`True`时才会发生，因为对于 UPDATE 语句没有批量 RETURNING 形式。
- en: 'References: [#8889](https://www.sqlalchemy.org/trac/ticket/8889)'
  id: totrans-1387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8889](https://www.sqlalchemy.org/trac/ticket/8889)
- en: '**[orm] [usecase]**'
  id: totrans-1388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: 'Adjustments to the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in terms of extensibility, as well as updates to the
    [`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession") extension:'
  id: totrans-1389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的可扩展性调整，以及[`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession")扩展的更新：
- en: '[`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    now accepts [`Session.get.bind_arguments`](../orm/session_api.html#sqlalchemy.orm.Session.get.params.bind_arguments
    "sqlalchemy.orm.Session.get"), which in particular may be useful when using the
    horizontal sharding extension.'
  id: totrans-1390
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")现在接受[`Session.get.bind_arguments`](../orm/session_api.html#sqlalchemy.orm.Session.get.params.bind_arguments
    "sqlalchemy.orm.Session.get")，特别是在使用水平分片扩展时可能会有用。'
- en: '[`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") accepts arbitrary kw arguments, which assists
    in developing code that uses a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") class which overrides this method with additional arguments.'
  id: totrans-1391
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")接受任意关键字参数，这有助于开发使用覆盖此方法的 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 类的代码，该方法具有附加参数。'
- en: Added a new ORM execution option `identity_token` which may be used to directly
    affect the “identity token” that will be associated with newly loaded ORM objects.
    This token is how sharding approaches (namely the [`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession"), but can be used in other cases
    as well) separate object identities across different “shards”.
  id: totrans-1392
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个新的 ORM 执行选项 `identity_token`，它可用于直接影响与新加载的 ORM 对象关联的“身份令牌”。这个令牌是分片方法（主要是[`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession")，但也可以在其他情况下使用）在不同“分片”之间分离对象标识的方式。
- en: See also
  id: totrans-1393
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Identity Token](../orm/queryguide/api.html#queryguide-identity-token)'
  id: totrans-1394
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[身份令牌](../orm/queryguide/api.html#queryguide-identity-token)'
- en: The [`SessionEvents.do_orm_execute()`](../orm/events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook may now be used to affect
    all ORM-related options, including `autoflush`, `populate_existing`, and `yield_per`;
    these options are re-consumed subsequent to event hooks being invoked before they
    are acted upon. Previously, options like `autoflush` would have been already evaluated
    at this point. The new `identity_token` option is also supported in this mode
    and is now used by the horizontal sharding extension.
  id: totrans-1395
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SessionEvents.do_orm_execute()`](../orm/events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件钩子现在可以用于影响所有与ORM相关的选项，包括`autoflush`、`populate_existing`和`yield_per`；这些选项在事件钩子被调用后重新消耗，然后才被执行。以前，像`autoflush`这样的选项在这一点上已经被评估过了。新的`identity_token`选项也在这种模式下受支持，并且现在被水平分片扩展使用。'
- en: The [`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession") class replaces the [`ShardedSession.id_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.id_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession") hook with a new hook [`ShardedSession.identity_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.identity_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession"), which no longer relies upon
    the legacy [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object. [`ShardedSession.id_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.id_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession") is still accepted in place of
    [`ShardedSession.identity_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.identity_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession") with a deprecation warning.
  id: totrans-1396
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession")类用新的钩子[`ShardedSession.identity_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.identity_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession")替换了[`ShardedSession.id_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.id_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession")钩子，不再依赖于传统的[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象。在替代[`ShardedSession.identity_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.identity_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession")时，会发出弃用警告，仍然接受[`ShardedSession.id_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.id_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession")。'
- en: 'References: [#7837](https://www.sqlalchemy.org/trac/ticket/7837)'
  id: totrans-1397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7837](https://www.sqlalchemy.org/trac/ticket/7837)
- en: '**[orm] [usecase]**'
  id: totrans-1398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: The behavior of “joining an external transaction into a Session” has been revised
    and improved, allowing explicit control over how the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will accommodate an incoming [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") that already has a transaction and possibly a
    savepoint already established. The new parameter [`Session.join_transaction_mode`](../orm/session_api.html#sqlalchemy.orm.Session.params.join_transaction_mode
    "sqlalchemy.orm.Session") includes a series of option values which can accommodate
    the existing transaction in several ways, most importantly allowing a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to operate in a fully transactional style using savepoints
    exclusively, while leaving the externally initiated transaction non-committed
    and active under all circumstances, allowing test suites to rollback all changes
    that take place within tests.
  id: totrans-1399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “将外部事务加入到会话中”的行为已经进行了修订和改进，允许显式控制[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")如何适应已经建立事务和可能已经建立保存点的传入[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。新参数[`Session.join_transaction_mode`](../orm/session_api.html#sqlalchemy.orm.Session.params.join_transaction_mode
    "sqlalchemy.orm.Session")包括一系列选项值，可以以多种方式适应现有事务，最重要的是允许[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")以完全事务方式操作，仅使用保存点，同时在任何情况下保持外部启动的事务未提交且活动，允许测试套件回滚测试中发生的所有更改。
- en: Additionally, revised the [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method to fully close out savepoints that may
    still be present, which also allows the “external transaction” recipe to proceed
    without warnings if the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") did not explicitly end its own SAVEPOINT transactions.
  id: totrans-1400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，对[`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")方法进行了修订，以完全关闭可能仍存在的保存点，这也允许“外部事务”配方在[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")未明确结束其自身SAVEPOINT事务时继续进行而不产生警告。
- en: See also
  id: totrans-1401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New transaction join modes for Session](whatsnew_20.html#change-9015)'
  id: totrans-1402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[会话的新事务加入模式](whatsnew_20.html#change-9015)'
- en: 'References: [#9015](https://www.sqlalchemy.org/trac/ticket/9015)'
  id: totrans-1403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9015](https://www.sqlalchemy.org/trac/ticket/9015)
- en: '**[orm] [usecase]**'
  id: totrans-1404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Removed the requirement that the `__allow_unmapped__` attribute be used on Declarative
    Dataclass Mapped class when non-`Mapped[]` annotations are detected; previously,
    an error message that was intended to support legacy ORM typed mappings would
    be raised, which additionally did not mention correct patterns to use with Dataclasses
    specifically. This error message is now no longer raised if [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") or [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") is used.
  id: totrans-1405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在检测到非`Mapped[]`注释时必须使用`__allow_unmapped__`属性的要求；以前，如果检测到旨在支持遗留ORM类型映射的错误消息将被引发，此外还未提及与Dataclasses
    特别相关的正确模式。如果使用了[`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass")或[`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")，则不再引发此错误消息。
- en: See also
  id: totrans-1406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Non-Mapped Dataclass Fields](../orm/dataclasses.html#orm-declarative-native-dataclasses-non-mapped-fields)'
  id: totrans-1407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用非映射数据类字段](../orm/dataclasses.html#orm-declarative-native-dataclasses-non-mapped-fields)'
- en: 'References: [#8973](https://www.sqlalchemy.org/trac/ticket/8973)'
  id: totrans-1408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8973](https://www.sqlalchemy.org/trac/ticket/8973)
- en: '**[orm] [bug]**'
  id: totrans-1409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in the internal SQL traversal for DML statements like [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") which would cause among other potential issues,
    a specific issue using lambda statements with the ORM update/delete feature.
  id: totrans-1410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了内部SQL遍历中的问题，例如对[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")和[`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")等DML语句，这将导致除其他潜在问题之外，使用ORM更新/删除功能的lambda语句的特定问题。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-1411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.46
- en: 'References: [#9033](https://www.sqlalchemy.org/trac/ticket/9033)'
  id: totrans-1412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9033](https://www.sqlalchemy.org/trac/ticket/9033)
- en: '**[orm] [bug]**'
  id: totrans-1413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") would fail to preserve the current loaded contents
    of relationship attributes that were indicated with the [`relationship.viewonly`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship") parameter, thus defeating strategies that use [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") to pull fully loaded objects from caches and other
    similar techniques. In a related change, fixed issue where an object that contains
    a loaded relationship that was nonetheless configured as `lazy='raise'` on the
    mapping would fail when passed to [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge"); checks for “raise” are now suspended within the
    merge process assuming the [`Session.merge.load`](../orm/session_api.html#sqlalchemy.orm.Session.merge.params.load
    "sqlalchemy.orm.Session.merge") parameter remains at its default of `True`.
  id: totrans-1414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")无法保留使用[`relationship.viewonly`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship")参数指示的关系属性的当前加载内容，从而破坏了使用[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")从缓存和其他类似技术中拉取完全加载的对象的策略。在相关更改中，修复了一个问题，即包含已配置为在映射上`lazy='raise'`的已加载关系的对象在传递给[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")时会失败；假设[`Session.merge.load`](../orm/session_api.html#sqlalchemy.orm.Session.merge.params.load
    "sqlalchemy.orm.Session.merge")参数保持其默认值`True`，则合并过程中的“raise”检查现在被暂停了。
- en: Overall, this is a behavioral adjustment to a change introduced in the 1.4 series
    as of [#4994](https://www.sqlalchemy.org/trac/ticket/4994), which took “merge”
    out of the set of cascades applied by default to “viewonly” relationships. As
    “viewonly” relationships aren’t persisted under any circumstances, allowing their
    contents to transfer during “merge” does not impact the persistence behavior of
    the target object. This allows [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") to correctly suit one of its use cases, that of
    adding objects to a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") that were loaded elsewhere, often for the purposes of
    restoring from a cache.
  id: totrans-1415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总体而言，这是对1.4系列中引入的更改的行为调整，截至[#4994](https://www.sqlalchemy.org/trac/ticket/4994)，该更改将“merge”从“viewonly”关系的默认级联集中移除。由于“viewonly”关系在任何情况下都不会被持久化，因此在“merge”期间允许其内容传输不会影响目标对象的持久化行为。这使得[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")能够正确地适用于其用例之一，即将在其他地方加载的对象添加到[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中，通常是为了从缓存中恢复。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-1416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.45
- en: 'References: [#8862](https://www.sqlalchemy.org/trac/ticket/8862)'
  id: totrans-1417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8862](https://www.sqlalchemy.org/trac/ticket/8862)
- en: '**[orm] [bug]**'
  id: totrans-1418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issues in [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") where expressions that were composed of columns
    that were referenced from the enclosing SELECT would not render correct SQL in
    some contexts, in the case where the expression had a label name that matched
    the attribute which used [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression"), even when [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") had no default expression. For the moment,
    if the [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") does have a default expression, that label
    name is still used for that default, and an additional label with the same name
    will continue to be ignored. Overall, this case is pretty thorny so further adjustments
    might be warranted.
  id: totrans-1419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression")中的问题，在某些情况下，由于表达式由从外部SELECT中引用的列组成，因此不会正确地在某些上下文中呈现SQL，在表达式具有与使用[`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression")的属性匹配的标签名称的情况下，即使[`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression")没有默认表达式。暂时，如果[`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression")确实具有默认表达式，则仍将使用该标签名称作为该默认表达式，并且将继续忽略具有相同名称的其他标签。总体而言，这种情况相当棘手，因此可能需要进一步调整。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-1420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.4.45
- en: 'References: [#8881](https://www.sqlalchemy.org/trac/ticket/8881)'
  id: totrans-1421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8881](https://www.sqlalchemy.org/trac/ticket/8881)
- en: '**[orm] [bug]**'
  id: totrans-1422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted if a backref name used in [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") names an attribute on the target class which already
    has a method or attribute assigned to that name, as the backref declaration will
    replace that attribute.
  id: totrans-1423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")中使用的反向引用名称在目标类上命名了已经有方法或属性分配给该名称的属性，则会发出警告，因为反向引用声明将替换该属性。
- en: 'References: [#4629](https://www.sqlalchemy.org/trac/ticket/4629)'
  id: totrans-1424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4629](https://www.sqlalchemy.org/trac/ticket/4629)
- en: '**[orm] [bug]**'
  id: totrans-1425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A series of changes and improvements regarding [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh"). The overall change is that primary key attributes
    for an object are now included in a refresh operation unconditionally when relationship-bound
    attributes are to be refreshed, even if not expired and even if not specified
    in the refresh.
  id: totrans-1426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一系列关于[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")的变更和改进。总体变更是，当要刷新与关系绑定的属性时，对象的主键属性现在无条件地包含在刷新操作中，即使未过期，即使未在刷新中指定。
- en: Improved [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") so that if autoflush is enabled (as is the default
    for [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")),
    the autoflush takes place at an earlier part of the refresh process so that pending
    primary key changes are applied without errors being raised. Previously, this
    autoflush took place too late in the process and the SELECT statement would not
    use the correct key to locate the row and an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") would be raised.
  id: totrans-1427
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进了[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")，以便如果启用了自动刷新（如[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的默认值），则自动刷新将在刷新过程的较早部分发生，以便应用待处理的主键更改而不会引发错误。以前，此自动刷新发生得太晚，并且SELECT语句不会使用正确的键来定位行，并且会引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: When the above condition is present, that is, unflushed primary key changes
    are present on the object, but autoflush is not enabled, the refresh() method
    now explicitly disallows the operation to proceed, and an informative [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised asking that the pending primary
    key changes be flushed first. Previously, this use case was simply broken and
    [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") would be raised anyway. This restriction
    is so that it’s safe for the primary key attributes to be refreshed, as is necessary
    for the case of being able to refresh the object with relationship-bound secondary
    eagerloaders also being emitted. This rule applies in all cases to keep API behavior
    consistent regardless of whether or not the PK cols are actually needed in the
    refresh, as it is unusual to be refreshing some attributes on an object while
    keeping other attributes “pending” in any case.
  id: totrans-1428
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当存在上述条件时，即对象上存在未刷新的主键更改，但未启用自动刷新时，refresh()方法现在明确禁止操作继续进行，并引发一个信息性的[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")，要求首先刷新待处理的主键更改。以前，这种用例简单地被破坏，无论如何都会引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。这个限制是为了安全起见，以便刷新主键属性，这对于能够刷新具有relationship绑定的次要急切加载器的对象是必要的。无论是否实际上需要刷新PK列，这个规则都适用于保持API行为一致，因为在任何情况下，刷新对象的某些属性而保留其他属性“待处理”是不寻常的。
- en: The [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method has been enhanced such that attributes
    which are [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")-bound and linked to an eager loader, either at
    mapping time or via last-used loader options, will be refreshed in all cases even
    when a list of attributes is passed that does not include any columns on the parent
    row. This builds upon the feature first implemented for non-column attributes
    as part of [#1763](https://www.sqlalchemy.org/trac/ticket/1763) fixed in 1.4 allowing
    eagerly-loaded relationship-bound attributes to participate in the [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") operation. If the refresh operation does not
    indicate any columns on the parent row to be refreshed, the primary key columns
    will nonetheless be included in the refresh operation, which allows the load to
    proceed into the secondary relationship loaders indicated as it does normally.
    Previously an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") error would be raised for this condition
    ([#8703](https://www.sqlalchemy.org/trac/ticket/8703))
  id: totrans-1429
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") 方法已经得到增强，以便刷新那些在映射时或通过最近使用的加载器选项与[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")绑定并链接到急切加载器的属性，在所有情况下都会被刷新，即使传递了一个不包括父行上任何列的属性列表。这是在1.4中作为[#1763](https://www.sqlalchemy.org/trac/ticket/1763)的一部分首次实现的功能，允许急切加载的与relationship绑定的属性参与[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")操作。如果刷新操作没有指示要刷新父行上的任何列，则主键列仍将包括在刷新操作中，这允许加载继续到正常情况下指示的次要关系加载器。以前，对于这种情况会引发一个[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")错误（[#8703](https://www.sqlalchemy.org/trac/ticket/8703))'
- en: Fixed issue where an unnecessary additional SELECT would be emitted in the case
    where [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") were called with a combination of expired attributes,
    as well as an eager loader such as [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") that emits a “secondary” query, if the primary
    key attributes were also in an expired state. As the primary key attributes are
    now included in the refresh automatically, there is no additional load for these
    attributes when a relationship loader goes to select for them ([#8997](https://www.sqlalchemy.org/trac/ticket/8997))
  id: totrans-1430
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了一个问题，即在[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")与一组过期属性以及像[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")这样发出“secondary”查询的急加载器一起调用时，会发出不必要的额外SELECT的情况，如果主键属性也处于过期状态。由于主键属性现在自动包含在刷新中，因此当关系加载器开始为它们选择时，这些属性不会有额外的加载（[#8997](https://www.sqlalchemy.org/trac/ticket/8997)）。
- en: Fixed regression caused by [#8126](https://www.sqlalchemy.org/trac/ticket/8126)
    released in 2.0.0b1 where the [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method would fail with an `AttributeError`,
    if passed both an expired column name as well as the name of a relationship-bound
    attribute that was linked to a “secondary” eagerloader such as the [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") eager loader ([#8996](https://www.sqlalchemy.org/trac/ticket/8996))
  id: totrans-1431
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了由2.0.0b1中的[#8126](https://www.sqlalchemy.org/trac/ticket/8126)引起的回归，其中[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")方法将在传递过期的列名以及链接到“secondary” eagerloader（如[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")）的关系绑定属性的名称时失败，并引发`AttributeError`（[#8996](https://www.sqlalchemy.org/trac/ticket/8996)）。
- en: 'References: [#8703](https://www.sqlalchemy.org/trac/ticket/8703), [#8996](https://www.sqlalchemy.org/trac/ticket/8996),
    [#8997](https://www.sqlalchemy.org/trac/ticket/8997)'
  id: totrans-1432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8703](https://www.sqlalchemy.org/trac/ticket/8703), [#8996](https://www.sqlalchemy.org/trac/ticket/8996),
    [#8997](https://www.sqlalchemy.org/trac/ticket/8997)
- en: '**[orm] [bug]**'
  id: totrans-1433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved a fix first made in version 1.4 for [#8456](https://www.sqlalchemy.org/trac/ticket/8456)
    which scaled back the usage of internal “polymorphic adapters”, that are used
    to render ORM queries when the [`Mapper.with_polymorphic`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.with_polymorphic
    "sqlalchemy.orm.Mapper") parameter is used. These adapters, which are very complex
    and error prone, are now used only in those cases where an explicit user-supplied
    subquery is used for [`Mapper.with_polymorphic`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.with_polymorphic
    "sqlalchemy.orm.Mapper"), which includes only the use case of concrete inheritance
    mappings that use the [`polymorphic_union()`](../orm/mapping_api.html#sqlalchemy.orm.polymorphic_union
    "sqlalchemy.orm.polymorphic_union") helper, as well as the legacy use case of
    using an aliased subquery for joined inheritance mappings, which is not needed
    in modern use.
  id: totrans-1434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了版本1.4中首次修复的问题，用于[#8456](https://www.sqlalchemy.org/trac/ticket/8456)，该问题减少了内部“多态适配器”的使用，用于在使用[`Mapper.with_polymorphic`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.with_polymorphic
    "sqlalchemy.orm.Mapper")参数时渲染ORM查询。这些适配器非常复杂且容易出错，现在仅在使用用户提供的显式子查询用于[`Mapper.with_polymorphic`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.with_polymorphic
    "sqlalchemy.orm.Mapper")的情况下使用，其中包括仅使用[`polymorphic_union()`](../orm/mapping_api.html#sqlalchemy.orm.polymorphic_union
    "sqlalchemy.orm.polymorphic_union")辅助程序的具体继承映射的用例，以及在不需要的现代用例中使用别名子查询的联合继承映射的传统用例。
- en: For the most common case of joined inheritance mappings that use the built-in
    polymorphic loading scheme, which includes those which make use of the [`Mapper.polymorphic_load`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_load
    "sqlalchemy.orm.Mapper") parameter set to `inline`, polymorphic adapters are now
    no longer used. This has both a positive performance impact on the construction
    of queries as well as a substantial simplification of the internal query rendering
    process.
  id: totrans-1435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于使用内置多态加载方案的联合继承映射的最常见情况，其中包括使用[`Mapper.polymorphic_load`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_load
    "sqlalchemy.orm.Mapper")参数设置为`inline`的情况，现在不再使用多态适配器。这对查询构造的性能有积极影响，同时也极大简化了内部查询渲染过程。
- en: The specific issue targeted was to allow a [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") to refer to joined-inheritance classes within
    a scalar subquery, which now works as intuitively as is feasible.
  id: totrans-1436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 目标特定问题是允许[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")引用标量子查询中的联合继承类，现在其工作方式尽可能直观。
- en: 'References: [#8168](https://www.sqlalchemy.org/trac/ticket/8168)'
  id: totrans-1437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8168](https://www.sqlalchemy.org/trac/ticket/8168)
- en: engine
  id: totrans-1438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-1439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed a long-standing race condition in the connection pool which could occur
    under eventlet/gevent monkeypatching schemes in conjunction with the use of eventlet/gevent
    `Timeout` conditions, where a connection pool checkout that’s interrupted due
    to the timeout would fail to clean up the failed state, causing the underlying
    connection record and sometimes the database connection itself to “leak”, leaving
    the pool in an invalid state with unreachable entries. This issue was first identified
    and fixed in SQLAlchemy 1.2 for [#4225](https://www.sqlalchemy.org/trac/ticket/4225),
    however the failure modes detected in that fix failed to accommodate for `BaseException`,
    rather than `Exception`, which prevented eventlet/gevent `Timeout` from being
    caught. In addition, a block within initial pool connect has also been identified
    and hardened with a `BaseException` -> “clean failed connect” block to accommodate
    for the same condition in this location. Big thanks to Github user @niklaus for
    their tenacious efforts in identifying and describing this intricate issue.
  id: totrans-1440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池中的长期竞争条件，该条件可能在 eventlet/gevent monkeypatching 方案与使用 eventlet/gevent `Timeout`
    条件相结合时发生，其中由于超时而中断的连接池检出将无法清理失败的状态，导致底层连接记录以及有时是数据库连接本身“泄漏”，将池留在无效状态中，无法访问条目。这个问题首次在
    SQLAlchemy 1.2 中被识别和修复，用于 [#4225](https://www.sqlalchemy.org/trac/ticket/4225)，然而在该修复中检测到的故障模式未能适应
    `BaseException`，而不是 `Exception`，这导致无法捕获 eventlet/gevent `Timeout`。此外，在初始池连接中还确定了一个块，并通过
    `BaseException` -> “清除失败的连接”块来加固，以适应在此位置的相同条件。非常感谢 Github 用户 @niklaus 在识别和描述这个复杂问题方面的顽强努力。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-1441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.46
- en: 'References: [#8974](https://www.sqlalchemy.org/trac/ticket/8974)'
  id: totrans-1442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8974](https://www.sqlalchemy.org/trac/ticket/8974)
- en: '**[engine] [bug]**'
  id: totrans-1443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue where [`Result.freeze()`](../core/connections.html#sqlalchemy.engine.Result.freeze
    "sqlalchemy.engine.Result.freeze") method would not work for textual SQL using
    either [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    or [`Connection.exec_driver_sql()`](../core/connections.html#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql").
  id: totrans-1444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Result.freeze()`](../core/connections.html#sqlalchemy.engine.Result.freeze
    "sqlalchemy.engine.Result.freeze")方法在使用[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")或[`Connection.exec_driver_sql()`](../core/connections.html#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql")时无法工作的问题。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-1445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.45
- en: 'References: [#8963](https://www.sqlalchemy.org/trac/ticket/8963)'
  id: totrans-1446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8963](https://www.sqlalchemy.org/trac/ticket/8963)
- en: sql
  id: totrans-1447
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-1448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: An informative re-raise is now thrown in the case where any “literal bindparam”
    render operation fails, indicating the value itself and the datatype in use, to
    assist in debugging when literal params are being rendered in a statement.
  id: totrans-1449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在“字面绑定参数”渲染操作失败的情况下，现在会抛出一个信息性的重新引发，指示值本身和正在使用的数据类型，以帮助调试在语句中渲染字面参数时的情况。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-1450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.45
- en: 'References: [#8800](https://www.sqlalchemy.org/trac/ticket/8800)'
  id: totrans-1451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8800](https://www.sqlalchemy.org/trac/ticket/8800)
- en: '**[sql] [bug]**'
  id: totrans-1452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in lambda SQL feature where the calculated type of a literal value
    would not take into account the type coercion rules of the “compared to type”,
    leading to a lack of typing information for SQL expressions, such as comparisons
    to [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    elements and similar.
  id: totrans-1453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Lambda SQL 功能中的问题，其中字面值的计算类型不会考虑“与类型比较”的类型强制转换规则，导致 SQL 表达式（例如与[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON")元素的比较等）缺乏类型信息。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-1454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.46
- en: 'References: [#9029](https://www.sqlalchemy.org/trac/ticket/9029)'
  id: totrans-1455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9029](https://www.sqlalchemy.org/trac/ticket/9029)
- en: '**[sql] [bug]**'
  id: totrans-1456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a series of issues regarding the position and sometimes the identity of
    rendered bound parameters, such as those used for SQLite, asyncpg, MySQL, Oracle
    and others. Some compiled forms would not maintain the order of parameters correctly,
    such as the PostgreSQL `regexp_replace()` function, the “nesting” feature of the
    [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    construct first introduced in [#4123](https://www.sqlalchemy.org/trac/ticket/4123),
    and selectable tables formed by using the [`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") method with Oracle.
  id: totrans-1457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一系列关于渲染绑定参数的位置以及有时身份的问题，例如用于SQLite、asyncpg、MySQL、Oracle等的参数。一些编译形式不会正确维护参数的顺序，例如PostgreSQL
    `regexp_replace()` 函数、首次在[#4123](https://www.sqlalchemy.org/trac/ticket/4123)中引入的
    [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造的“嵌套”特性，以及使用Oracle的 [`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") 方法形成的可选择表。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-1458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯**到：1.4.45
- en: 'References: [#8827](https://www.sqlalchemy.org/trac/ticket/8827)'
  id: totrans-1459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8827](https://www.sqlalchemy.org/trac/ticket/8827)
- en: '**[sql] [bug]**'
  id: totrans-1460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added test support to ensure that all compiler `visit_xyz()` methods across
    all `Compiler` implementations in SQLAlchemy accept a `**kw` parameter, so that
    all compilers accept additional keyword arguments under all circumstances.
  id: totrans-1461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了测试支持，以确保SQLAlchemy中所有`Compiler`实现中的所有编译器`visit_xyz()`方法都接受 `**kw` 参数，以便所有编译器在所有情况下都接受额外的关键字参数。
- en: 'References: [#8988](https://www.sqlalchemy.org/trac/ticket/8988)'
  id: totrans-1462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8988](https://www.sqlalchemy.org/trac/ticket/8988)
- en: '**[sql] [bug]**'
  id: totrans-1463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`SQLCompiler.construct_params()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.construct_params
    "sqlalchemy.sql.compiler.SQLCompiler.construct_params") method, as well as the
    [`SQLCompiler.params`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.params
    "sqlalchemy.sql.compiler.SQLCompiler.params") accessor, will now return the exact
    parameters that correspond to a compiled statement that used the `render_postcompile`
    parameter to compile. Previously, the method returned a parameter structure that
    by itself didn’t correspond to either the original parameters or the expanded
    ones.
  id: totrans-1464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`SQLCompiler.construct_params()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.construct_params
    "sqlalchemy.sql.compiler.SQLCompiler.construct_params") 方法以及[`SQLCompiler.params`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.params
    "sqlalchemy.sql.compiler.SQLCompiler.params") 访问器现在将返回与使用 `render_postcompile`
    参数编译的编译语句对应的确切参数。之前，该方法返回的参数结构本身既不对应原始参数也不对应扩展参数。'
- en: Passing a new dictionary of parameters to [`SQLCompiler.construct_params()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.construct_params
    "sqlalchemy.sql.compiler.SQLCompiler.construct_params") for a [`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") that was constructed with `render_postcompile`
    is now disallowed; instead, to make a new SQL string and parameter set for an
    alternate set of parameters, a new method [`SQLCompiler.construct_expanded_state()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state
    "sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state") is added which
    will produce a new expanded form for the given parameter set, using the [`ExpandedState`](../core/internals.html#sqlalchemy.sql.compiler.ExpandedState
    "sqlalchemy.sql.compiler.ExpandedState") container which includes a new SQL statement
    and new parameter dictionary, as well as a positional parameter tuple.
  id: totrans-1465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不再允许将新参数字典传递给使用 `render_postcompile` 构造的[`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") 的 [`SQLCompiler.construct_params()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.construct_params
    "sqlalchemy.sql.compiler.SQLCompiler.construct_params")；相反，为了为另一组参数制作新的SQL字符串和参数集，添加了一个新方法
    [`SQLCompiler.construct_expanded_state()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state
    "sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state")，该方法将使用包含新的SQL语句和新的参数字典的
    [`ExpandedState`](../core/internals.html#sqlalchemy.sql.compiler.ExpandedState
    "sqlalchemy.sql.compiler.ExpandedState") 容器产生给定参数集的新扩展形式，以及一个位置参数元组。
- en: 'References: [#6114](https://www.sqlalchemy.org/trac/ticket/6114)'
  id: totrans-1466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6114](https://www.sqlalchemy.org/trac/ticket/6114)
- en: '**[sql] [bug]**'
  id: totrans-1467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: To accommodate for third party dialects with different character escaping needs
    regarding bound parameters, the system by which SQLAlchemy “escapes” (i.e., replaces
    with another character in its place) special characters in bound parameter names
    has been made extensible for third party dialects, using the `SQLCompiler.bindname_escape_chars`
    dictionary which can be overridden at the class declaration level on any [`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") subclass. As part of this change, also
    added the dot `"."` as a default “escaped” character.
  id: totrans-1468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了适应对绑定参数有不同字符转义需求的第三方方言，SQLAlchemy 中用于“转义”（即在其位置替换为另一个字符）绑定参数名称的系统已被扩展，使用 `SQLCompiler.bindname_escape_chars`
    字典，可以在任何 [`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") 子类的类声明级别进行覆盖。作为此更改的一部分，还将点号 `"."` 添加为默认的
    “转义” 字符。
- en: 'References: [#8994](https://www.sqlalchemy.org/trac/ticket/8994)'
  id: totrans-1469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8994](https://www.sqlalchemy.org/trac/ticket/8994)
- en: typing
  id: totrans-1470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-1471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: pep-484 typing has been completed for the `sqlalchemy.ext.horizontal_shard`
    extension as well as the `sqlalchemy.orm.events` module. Thanks to Gleb Kisenkov
    for their efforts.
  id: totrans-1472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pep-484 typing 已完成对 `sqlalchemy.ext.horizontal_shard` 扩展以及 `sqlalchemy.orm.events`
    模块的类型标注。感谢 Gleb Kisenkov 的努力。
- en: 'References: [#6810](https://www.sqlalchemy.org/trac/ticket/6810), [#9025](https://www.sqlalchemy.org/trac/ticket/9025)'
  id: totrans-1473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#6810](https://www.sqlalchemy.org/trac/ticket/6810), [#9025](https://www.sqlalchemy.org/trac/ticket/9025)
- en: asyncio
  id: totrans-1474
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [bug]**'
  id: totrans-1475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [bug]**'
- en: Removed non-functional `merge()` method from [`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult"). This method has never worked and was included
    with [`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") in error.
  id: totrans-1476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 [`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") 中删除了不起作用的 `merge()` 方法。这个方法从未起作用，是错误地包含在
    [`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") 中的。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-1477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还 **反向移植** 至：1.4.45
- en: 'References: [#8952](https://www.sqlalchemy.org/trac/ticket/8952)'
  id: totrans-1478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8952](https://www.sqlalchemy.org/trac/ticket/8952)
- en: postgresql
  id: totrans-1479
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-1480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where the PostgreSQL [`Insert.on_conflict_do_update.constraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") parameter would
    accept an [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    object, however would not expand this index out into its individual index expressions,
    instead rendering its name in an ON CONFLICT ON CONSTRAINT clause, which is not
    accepted by PostgreSQL; the “constraint name” form only accepts unique or exclude
    constraint names. The parameter continues to accept the index but now expands
    it out into its component expressions for the render.
  id: totrans-1481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 PostgreSQL 的 bug，其中 [`Insert.on_conflict_do_update.constraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 参数会接受一个 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 对象，但是不会将此索引展开为其各个索引表达式，而是在 ON CONFLICT ON CONSTRAINT
    子句中呈现其名称，这在 PostgreSQL 中不被接受；“约束名”形式仅接受唯一或排除约束名。该参数继续接受索引，但现在会将其展开为其组件表达式以进行呈现。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-1482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还 **反向移植** 至：1.4.46
- en: 'References: [#9023](https://www.sqlalchemy.org/trac/ticket/9023)'
  id: totrans-1483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9023](https://www.sqlalchemy.org/trac/ticket/9023)
- en: '**[postgresql] [bug]**'
  id: totrans-1484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Made an adjustment to how the PostgreSQL dialect considers column types when
    it reflects columns from a table, to accommodate for alternative backends which
    may return NULL from the PG `format_type()` function.
  id: totrans-1485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 PostgreSQL 方言在从表中反射列时考虑列类型的方式进行了调整，以适应可能从 PG 的 `format_type()` 函数返回 NULL 的替代后端。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-1486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还 **反向移植** 至：1.4.45
- en: 'References: [#8748](https://www.sqlalchemy.org/trac/ticket/8748)'
  id: totrans-1487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8748](https://www.sqlalchemy.org/trac/ticket/8748)
- en: '**[postgresql] [bug]**'
  id: totrans-1488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for explicit use of PG full text functions with asyncpg and psycopg
    (SQLAlchemy 2.0 only), with regards to the `REGCONFIG` type cast for the first
    argument, which previously would be incorrectly cast to a VARCHAR, causing failures
    on these dialects that rely upon explicit type casts. This includes support for
    [`to_tsvector`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.to_tsvector
    "sqlalchemy.dialects.postgresql.to_tsvector"), [`to_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.to_tsquery
    "sqlalchemy.dialects.postgresql.to_tsquery"), [`plainto_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.plainto_tsquery
    "sqlalchemy.dialects.postgresql.plainto_tsquery"), [`phraseto_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.phraseto_tsquery
    "sqlalchemy.dialects.postgresql.phraseto_tsquery"), [`websearch_to_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery"), [`ts_headline`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ts_headline
    "sqlalchemy.dialects.postgresql.ts_headline"), each of which will determine based
    on number of arguments passed if the first string argument should be interpreted
    as a PostgreSQL “REGCONFIG” value; if so, the argument is typed using a newly
    added type object [`REGCONFIG`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG") which is then explicitly cast in the
    SQL expression.
  id: totrans-1489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对使用 `asyncpg` 和 `psycopg`（仅限于SQLAlchemy 2.0）的 PG 全文函数的显式支持，关于第一个参数的 `REGCONFIG`
    类型转换，之前会错误地转换为 VARCHAR，导致这些方言上的失败，这些方言依赖于显式类型转换。这包括对[`to_tsvector`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.to_tsvector
    "sqlalchemy.dialects.postgresql.to_tsvector"), [`to_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.to_tsquery
    "sqlalchemy.dialects.postgresql.to_tsquery"), [`plainto_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.plainto_tsquery
    "sqlalchemy.dialects.postgresql.plainto_tsquery"), [`phraseto_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.phraseto_tsquery
    "sqlalchemy.dialects.postgresql.phraseto_tsquery"), [`websearch_to_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery"), [`ts_headline`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ts_headline
    "sqlalchemy.dialects.postgresql.ts_headline") 的支持，每个函数根据传递的参数数量来确定第一个字符串参数是否应解释为
    PostgreSQL 的“REGCONFIG”值；如果是，则使用新添加的类型对象 [`REGCONFIG`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG") 进行类型转换，然后在 SQL 表达式中显式地转换。
- en: 'References: [#8977](https://www.sqlalchemy.org/trac/ticket/8977)'
  id: totrans-1490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8977](https://www.sqlalchemy.org/trac/ticket/8977)
- en: '**[postgresql] [bug]**'
  id: totrans-1491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed regression where newly revised PostgreSQL range types such as [`INT4RANGE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INT4RANGE
    "sqlalchemy.dialects.postgresql.INT4RANGE") could not be set up as the impl of
    a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator "sqlalchemy.types.TypeDecorator")
    custom type, instead raising a `TypeError`.
  id: totrans-1492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新修订的 PostgreSQL 范围类型（例如[`INT4RANGE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INT4RANGE
    "sqlalchemy.dialects.postgresql.INT4RANGE"）无法设置为[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")自定义类型的实现，而是引发 `TypeError` 的回归问题。
- en: 'References: [#9020](https://www.sqlalchemy.org/trac/ticket/9020)'
  id: totrans-1493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9020](https://www.sqlalchemy.org/trac/ticket/9020)
- en: '**[postgresql] [bug]**'
  id: totrans-1494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: The `Range.__eq___()` will now return `NotImplemented` when comparing with an
    instance of a different class, instead of raising an `AttributeError` exception.
  id: totrans-1495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当与不同类的实例进行比较时，`Range.__eq___()` 现在会返回 `NotImplemented`，而不是引发 `AttributeError`
    异常。
- en: 'References: [#8984](https://www.sqlalchemy.org/trac/ticket/8984)'
  id: totrans-1496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8984](https://www.sqlalchemy.org/trac/ticket/8984)
- en: sqlite
  id: totrans-1497
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-1498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [用例]**'
- en: Added support for the SQLite backend to reflect the “DEFERRABLE” and “INITIALLY”
    keywords which may be present on a foreign key construct. Pull request courtesy
    Michael Gorven.
  id: totrans-1499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SQLite 后端增加了反映可能存在于外键结构上的“DEFERRABLE”和“INITIALLY”关键字的支持。感谢 Michael Gorven
    提交的拉取请求。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-1500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变化也被**回溯**到：1.4.45
- en: 'References: [#8903](https://www.sqlalchemy.org/trac/ticket/8903)'
  id: totrans-1501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8903](https://www.sqlalchemy.org/trac/ticket/8903)
- en: '**[sqlite] [usecase]**'
  id: totrans-1502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [用例]**'
- en: Added support for reflection of expression-oriented WHERE criteria included
    in indexes on the SQLite dialect, in a manner similar to that of the PostgreSQL
    dialect. Pull request courtesy Tobias Pfeiffer.
  id: totrans-1503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 SQLite 方言中索引中包含的表达式导向的 WHERE 条件的反射支持，类似于 PostgreSQL 方言的方式。感谢 Tobias Pfeiffer
    提交的拉取请求。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-1504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变化也被**回溯**到：1.4.45
- en: 'References: [#8804](https://www.sqlalchemy.org/trac/ticket/8804)'
  id: totrans-1505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8804](https://www.sqlalchemy.org/trac/ticket/8804)
- en: oracle
  id: totrans-1506
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Fixed issue in Oracle compiler where the syntax for [`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") was incorrect, rendering
    the name `COLUMN_VALUE` without qualifying the source table correctly.
  id: totrans-1508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle 编译器中 [`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") 语法不正确的问题，导致 `COLUMN_VALUE`
    名称没有正确限定源表。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-1509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**反向移植**至：1.4.45
- en: 'References: [#8945](https://www.sqlalchemy.org/trac/ticket/8945)'
  id: totrans-1510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8945](https://www.sqlalchemy.org/trac/ticket/8945)
- en: tests
  id: totrans-1511
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-1512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误]**'
- en: Fixed issue in tox.ini file where changes in the tox 4.0 series to the format
    of “passenv” caused tox to not function correctly, in particular raising an error
    as of tox 4.0.6.
  id: totrans-1513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 tox.ini 文件中的问题，其中在 tox 4.0 系列对“passenv”的格式进行更改导致 tox 无法正常工作，特别是在 tox 4.0.6
    中引发错误。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-1514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**反向移植**至：1.4.46
- en: '**[tests] [bug]**'
  id: totrans-1515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误]**'
- en: Added new exclusion rule for third party dialects called `unusual_column_name_characters`,
    which can be “closed” for third party dialects that don’t support column names
    with unusual characters such as dots, slashes, or percent signs in them, even
    if the name is properly quoted.
  id: totrans-1516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了针对第三方方言的新排除规则 `unusual_column_name_characters`，可以将其关闭，以防第三方方言不支持具有不寻常字符的列名，例如点、斜杠或百分号，即使名称已正确引用。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-1517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**反向移植**至：1.4.46
- en: 'References: [#9002](https://www.sqlalchemy.org/trac/ticket/9002)'
  id: totrans-1518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9002](https://www.sqlalchemy.org/trac/ticket/9002)
- en: 2.0.0b4
  id: totrans-1519
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.0b4
- en: 'Released: December 5, 2022'
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2022年12月5日
- en: orm
  id: totrans-1521
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-1522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added a new parameter [`mapped_column.use_existing_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.use_existing_column
    "sqlalchemy.orm.mapped_column") to accommodate the use case of a single-table
    inheritance mapping that uses the pattern of more than one subclass indicating
    the same column to take place on the superclass. This pattern was previously possible
    by using [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") in conjunction with locating the existing column
    in the `.__table__` of the superclass, however is now updated to work with [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") as well as with pep-484 typing, in a simple and
    succinct way.
  id: totrans-1523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新参数 [`mapped_column.use_existing_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.use_existing_column
    "sqlalchemy.orm.mapped_column") 以适应单表继承映射的用例，该映射使用一个以上的子类指示相同的列位于超类上。以前可以通过在超类的
    `.__table__` 中使用 [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") 与定位现有列的方法来实现此模式，但现在已更新为使用 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 以及 pep-484 类型提示，以一种简单而简洁的方式。
- en: See also
  id: totrans-1524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Resolving Column Conflicts with use_existing_column](../orm/inheritance.html#orm-inheritance-column-conflicts)'
  id: totrans-1525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 use_existing_column 解决列冲突](../orm/inheritance.html#orm-inheritance-column-conflicts)'
- en: 'References: [#8822](https://www.sqlalchemy.org/trac/ticket/8822)'
  id: totrans-1526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8822](https://www.sqlalchemy.org/trac/ticket/8822)
- en: '**[orm] [usecase]**'
  id: totrans-1527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Added support custom user-defined types which extend the Python `enum.Enum`
    base class to be resolved automatically to SQLAlchemy [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") SQL types, when using the Annotated Declarative Table
    feature. The feature is made possible through new lookup features added to the
    ORM type map feature, and includes support for changing the arguments of the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") that’s generated by default as well as setting up specific
    `enum.Enum` types within the map with specific arguments.
  id: totrans-1528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对自定义用户定义类型的支持，这些类型扩展了 Python `enum.Enum` 基类，以便在使用注释式声明表功能时自动解析为 SQLAlchemy
    的 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    SQL 类型。该功能通过向 ORM 类型映射功能添加的新查找功能实现，并包括对默认生成的 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 的参数进行更改的支持，以及设置映射中特定的 `enum.Enum` 类型及其特定参数的支持。
- en: See also
  id: totrans-1529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Python Enum or pep-586 Literal types in the type map](../orm/declarative_tables.html#orm-declarative-mapped-column-enums)'
  id: totrans-1530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在类型映射中使用 Python Enum 或 pep-586 字面类型](../orm/declarative_tables.html#orm-declarative-mapped-column-enums)'
- en: 'References: [#8859](https://www.sqlalchemy.org/trac/ticket/8859)'
  id: totrans-1531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8859](https://www.sqlalchemy.org/trac/ticket/8859)
- en: '**[orm] [usecase]**'
  id: totrans-1532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Added [`mapped_column.compare`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.compare
    "sqlalchemy.orm.mapped_column") parameter to relevant ORM attribute constructs
    including [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column"), [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") etc. to provide for the Python dataclasses `compare`
    parameter on `field()`, when using the [Declarative Dataclass Mapping](../orm/dataclasses.html#orm-declarative-native-dataclasses)
    feature. Pull request courtesy Simon Schiele.
  id: totrans-1533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为相关的ORM属性构造（包括[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")，[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")等）添加了[`mapped_column.compare`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.compare
    "sqlalchemy.orm.mapped_column")参数，以提供Python数据类`field()`的`compare`参数，当使用[声明性数据类映射](../orm/dataclasses.html#orm-declarative-native-dataclasses)功能时。感谢Simon
    Schiele的拉取请求。
- en: 'References: [#8905](https://www.sqlalchemy.org/trac/ticket/8905)'
  id: totrans-1534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8905](https://www.sqlalchemy.org/trac/ticket/8905)
- en: '**[orm] [performance] [bug]**'
  id: totrans-1535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [性能] [bug]**'
- en: Additional performance enhancements within ORM-enabled SQL statements, specifically
    targeting callcounts within the construction of ORM statements, using combinations
    of [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    with [`union()`](../core/selectable.html#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union")
    and similar “compound” constructs, in addition to direct performance improvements
    to the `corresponding_column()` internal method that is used heavily by the ORM
    by constructs like [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") and similar.
  id: totrans-1536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ORM启用的SQL语句中进一步增强了性能，特别针对在构造ORM语句时的调用计数，使用[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")与[`union()`](../core/selectable.html#sqlalchemy.sql.expression.union
    "sqlalchemy.sql.expression.union")和类似“复合”结构的组合，以及对ORM频繁使用的`corresponding_column()`内部方法的直接性能改进，例如[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")和类似构造。
- en: 'References: [#8796](https://www.sqlalchemy.org/trac/ticket/8796)'
  id: totrans-1537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8796](https://www.sqlalchemy.org/trac/ticket/8796)
- en: '**[orm] [bug]**'
  id: totrans-1538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where use of an unknown datatype within a [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") annotation for a column-based attribute would silently
    fail to map the attribute, rather than reporting an exception; an informative
    exception message is now raised.
  id: totrans-1539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在列基础属性的[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")注释中使用未知数据类型时静默失败而不是报告异常的问题；现在会引发一个信息性异常消息。
- en: 'References: [#8888](https://www.sqlalchemy.org/trac/ticket/8888)'
  id: totrans-1540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8888](https://www.sqlalchemy.org/trac/ticket/8888)
- en: '**[orm] [bug]**'
  id: totrans-1541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a suite of issues involving [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") use with dictionary types, such as `Mapped[Dict[str,
    str] | None]`, would not be correctly interpreted in Declarative ORM mappings.
    Support to correctly “de-optionalize” this type including for lookup in `type_annotation_map`
    has been fixed.
  id: totrans-1542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一系列问题，涉及与字典类型一起使用[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")的情况，例如`Mapped[Dict[str,
    str] | None]`，在声明性ORM映射中将不会被正确解释。已修复以正确“去可选化”此类型的支持，包括用于在`type_annotation_map`中查找的支持。
- en: 'References: [#8777](https://www.sqlalchemy.org/trac/ticket/8777)'
  id: totrans-1543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8777](https://www.sqlalchemy.org/trac/ticket/8777)
- en: '**[orm] [bug]**'
  id: totrans-1544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [Declarative Dataclass Mapping](../orm/dataclasses.html#orm-declarative-native-dataclasses)
    feature where using plain dataclass fields with the `__allow_unmapped__` directive
    in a mapping would not create a dataclass with the correct class-level state for
    those fields, copying the raw `Field` object to the class inappropriately after
    dataclasses itself had replaced the `Field` object with the class-level default
    value.
  id: totrans-1545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[声明性数据类映射](../orm/dataclasses.html#orm-declarative-native-dataclasses)功能中修复了一个bug，该bug导致在映射中使用带有`__allow_unmapped__`指令的普通数据类字段时，不会为这些字段创建具有正确类级状态的数据类，不适当地在数据类自身已经用类级默认值替换`Field`对象后将原始`Field`对象复制到类中。
- en: 'References: [#8880](https://www.sqlalchemy.org/trac/ticket/8880)'
  id: totrans-1546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8880](https://www.sqlalchemy.org/trac/ticket/8880)
- en: '**[orm] [bug] [regression]**'
  id: totrans-1547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [回归]**'
- en: Fixed regression where flushing a mapped class that’s mapped against a subquery,
    such as a direct mapping or some forms of concrete table inheritance, would fail
    if the [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") parameter were used.
  id: totrans-1548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，即刷新映射到子查询的映射类时（例如直接映射或某些形式的具体表继承），如果使用了 [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") 参数，将会失败。
- en: 'References: [#8812](https://www.sqlalchemy.org/trac/ticket/8812)'
  id: totrans-1549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8812](https://www.sqlalchemy.org/trac/ticket/8812)
- en: '**[orm] [bug]**'
  id: totrans-1550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed regression in 2.0.0b3 caused by [#8759](https://www.sqlalchemy.org/trac/ticket/8759)
    where indicating the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    name using a qualified name such as `sqlalchemy.orm.Mapped` would fail to be recognized
    by Declarative as indicating the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") construct.
  id: totrans-1551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 2.0.0b3 中的一个回归问题，由 [#8759](https://www.sqlalchemy.org/trac/ticket/8759)
    导致，其中使用限定名称（如 `sqlalchemy.orm.Mapped`）指示 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 名称将无法被 Declarative 认为指示 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 结构。
- en: 'References: [#8853](https://www.sqlalchemy.org/trac/ticket/8853)'
  id: totrans-1552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8853](https://www.sqlalchemy.org/trac/ticket/8853)
- en: orm extensions
  id: totrans-1553
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM 扩展
- en: '**[usecase] [orm extensions]**'
  id: totrans-1554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[用例] [ORM 扩展]**'
- en: Added support for the [`association_proxy()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") extension function to take
    part within Python `dataclasses` configuration, when using the native dataclasses
    feature described at [Declarative Dataclass Mapping](../orm/dataclasses.html#orm-declarative-native-dataclasses).
    Included are attribute-level arguments including [`association_proxy.init`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.init
    "sqlalchemy.ext.associationproxy.association_proxy") and [`association_proxy.default_factory`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.default_factory
    "sqlalchemy.ext.associationproxy.association_proxy").
  id: totrans-1555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 [`association_proxy()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") 扩展函数的支持，以在 Python `dataclasses`
    配置中参与，使用了[声明性数据类映射](../orm/dataclasses.html#orm-declarative-native-dataclasses)中描述的原生数据类功能。包括属性级参数，包括
    [`association_proxy.init`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.init
    "sqlalchemy.ext.associationproxy.association_proxy") 和 [`association_proxy.default_factory`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.default_factory
    "sqlalchemy.ext.associationproxy.association_proxy")。
- en: Documentation for association proxy has also been updated to use “Annotated
    Declarative Table” forms within examples, including type annotations used for
    `AssocationProxy` itself.
  id: totrans-1556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关联代理的文档也已更新，以在示例中使用 “带注解的声明性表格” 表单，包括用于 `AssocationProxy` 本身的类型注解。
- en: 'References: [#8878](https://www.sqlalchemy.org/trac/ticket/8878)'
  id: totrans-1557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8878](https://www.sqlalchemy.org/trac/ticket/8878)
- en: sql
  id: totrans-1558
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [usecase]**'
  id: totrans-1559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [用例]**'
- en: Added [`ScalarValues`](../core/selectable.html#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues") that can be used as a column element
    allowing using [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") inside `IN` clauses or in conjunction with
    `ANY` or `ALL` collection aggregates. This new class is generated using the method
    [`Values.scalar_values()`](../core/selectable.html#sqlalchemy.sql.expression.Values.scalar_values
    "sqlalchemy.sql.expression.Values.scalar_values"). The [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") instance is now coerced to a [`ScalarValues`](../core/selectable.html#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues") when used in a `IN` or `NOT IN` operation.
  id: totrans-1560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 [`ScalarValues`](../core/selectable.html#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues")，可用作列元素，允许在 `IN` 子句中使用 [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values")，或与 `ANY` 或 `ALL` 集合聚合一起使用。此新类是使用方法 [`Values.scalar_values()`](../core/selectable.html#sqlalchemy.sql.expression.Values.scalar_values
    "sqlalchemy.sql.expression.Values.scalar_values") 生成的。当在 `IN` 或 `NOT IN` 操作中使用时，现在会将
    [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    实例强制转换为 [`ScalarValues`](../core/selectable.html#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues")。
- en: 'References: [#6289](https://www.sqlalchemy.org/trac/ticket/6289)'
  id: totrans-1561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6289](https://www.sqlalchemy.org/trac/ticket/6289)
- en: '**[sql] [bug]**'
  id: totrans-1562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: Fixed critical memory issue identified in cache key generation, where for very
    large and complex ORM statements that make use of lots of ORM aliases with subqueries,
    cache key generation could produce excessively large keys that were orders of
    magnitude bigger than the statement itself. Much thanks to Rollo Konig Brock for
    their very patient, long term help in finally identifying this issue.
  id: totrans-1563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在缓存密钥生成中识别的关键内存问题，其中对于使用大量ORM别名和子查询的非常大且复杂的ORM语句，缓存密钥生成可能会产生比语句本身大几个数量级的大密钥。非常感谢Rollo
    Konig Brock在最终确定此问题方面的非常耐心和长期的帮助。
- en: 'This change is also **backported** to: 1.4.44'
  id: totrans-1564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.44
- en: 'References: [#8790](https://www.sqlalchemy.org/trac/ticket/8790)'
  id: totrans-1565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8790](https://www.sqlalchemy.org/trac/ticket/8790)
- en: '**[sql] [bug]**'
  id: totrans-1566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The approach to the `numeric` pep-249 paramstyle has been rewritten, and is
    now fully supported, including by features such as “expanding IN” and “insertmanyvalues”.
    Parameter names may also be repeated in the source SQL construct which will be
    correctly represented within the numeric format using a single parameter. Introduced
    an additional numeric paramstyle called `numeric_dollar`, which is specifically
    what’s used by the asyncpg dialect; the paramstyle is equivalent to `numeric`
    except numeric indicators are indicated by a dollar-sign rather than a colon.
    The asyncpg dialect now uses `numeric_dollar` paramstyle directly, rather than
    compiling to `format` style first.
  id: totrans-1567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`numeric` pep-249 paramstyle的方法已被重写，并且现在得到了完全支持，包括“扩展IN”和“insertmanyvalues”等功能。参数名称也可以在源SQL构造中重复，这将在数值格式内正确表示为单个参数。引入了一个名为`numeric_dollar`的附加数值paramstyle，它是由asyncpg方言使用的;
    该paramstyle等效于`numeric`，只是数字指示器使用美元符号而不是冒号。asyncpg方言现在直接使用`numeric_dollar` paramstyle，而不是首先编译为`format`样式。'
- en: The `numeric` and `numeric_dollar` paramstyles assume that the target backend
    is capable of receiving the numeric parameters in any order, and will match the
    given parameter values to the statement based on matching their position (1-based)
    to the numeric indicator. This is the normal behavior of “numeric” paramstyles,
    although it was observed that the SQLite DBAPI implements a not-used “numeric”
    style that does not honor parameter ordering.
  id: totrans-1568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`numeric`和`numeric_dollar` paramstyles假设目标后端能够以任何顺序接收数字参数，并将给定的参数值与语句匹配，基于将它们的位置（从1开始）与数字指示器进行匹配。这是“numeric”
    paramstyles的正常行为，尽管观察到SQLite DBAPI实现了一个不使用的“numeric”样式，它不遵守参数排序。'
- en: 'References: [#8849](https://www.sqlalchemy.org/trac/ticket/8849)'
  id: totrans-1569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8849](https://www.sqlalchemy.org/trac/ticket/8849)
- en: '**[sql] [bug]**'
  id: totrans-1570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Adjusted the rendering of `RETURNING`, in particular when using [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"), such that it now renders columns using the
    same logic as that of the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct to generate labels, which will include
    disambiguating labels, as well as that a SQL function surrounding a named column
    will be labeled using the column name itself. This establishes better cross-compatibility
    when selecting rows from either [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") constructs or from DML statements that use
    [`UpdateBase.returning()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning"). A narrower scale change was
    also made for the 1.4 series that adjusted the function label issue only.
  id: totrans-1571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了`RETURNING`的渲染，特别是在使用[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")时，现在会像[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造一样渲染列，以生成标签，其中将包括消除歧义的标签，以及将命名列周围的SQL函数标记为列名本身。这在从[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造或使用[`UpdateBase.returning()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")的DML语句中选择行时建立了更好的跨兼容性。1.4系列还做了一项较窄的范围更改，仅调整了函数标签问题。
- en: 'References: [#8770](https://www.sqlalchemy.org/trac/ticket/8770)'
  id: totrans-1572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8770](https://www.sqlalchemy.org/trac/ticket/8770)
- en: schema
  id: totrans-1573
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 架构
- en: '**[schema] [bug]**'
  id: totrans-1574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Stricter rules are in place for appending of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects, both moving some previous deprecation warnings
    to exceptions, and preventing some previous scenarios that would cause duplicate
    columns to appear in tables, when [`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") were set to `True`, for both programmatic [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construction as well as during reflection operations.
  id: totrans-1575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于将 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象附加到 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象，现在有更严格的规则，将一些先前的弃用警告转移到异常，并阻止一些先前可能导致表中出现重复列的情况，当设置 [`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") 为 `True` 时，无论是在编程式 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 构建还是在反射操作期间。
- en: See [Stricter rules for replacement of Columns in Table objects with same-names,
    keys](whatsnew_20.html#change-8925) for a rundown of these changes.
  id: totrans-1576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅[相同名称、键的表对象中列替换规则更严格](whatsnew_20.html#change-8925)以了解这些更改的概述。
- en: See also
  id: totrans-1577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Stricter rules for replacement of Columns in Table objects with same-names,
    keys](whatsnew_20.html#change-8925)'
  id: totrans-1578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[相同名称、键的表对象中列替换规则更严格](whatsnew_20.html#change-8925)'
- en: 'References: [#8925](https://www.sqlalchemy.org/trac/ticket/8925)'
  id: totrans-1579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8925](https://www.sqlalchemy.org/trac/ticket/8925)
- en: typing
  id: totrans-1580
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型
- en: '**[typing] [usecase]**'
  id: totrans-1581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [用例]**'
- en: Added a new type [`SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression") which may be indicated in user
    code to represent any SQL column oriented expression, including both those based
    on [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") as well as on ORM [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute"). This type is a real class, not an alias,
    so can also be used as the foundation for other objects. An additional ORM-specific
    subclass [`SQLORMExpression`](../orm/internals.html#sqlalchemy.orm.SQLORMExpression
    "sqlalchemy.orm.SQLORMExpression") is also included.
  id: totrans-1582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新类型 [`SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression")，可以在用户代码中表示任何 SQL 列导向表达式，包括基于
    [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 和 ORM [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute") 的表达式。这个类型是一个真正的类，而不是别名，因此也可以用作其他对象的基础。另外还包括了一个额外的
    ORM 特定子类 [`SQLORMExpression`](../orm/internals.html#sqlalchemy.orm.SQLORMExpression
    "sqlalchemy.orm.SQLORMExpression")。
- en: 'References: [#8847](https://www.sqlalchemy.org/trac/ticket/8847)'
  id: totrans-1583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8847](https://www.sqlalchemy.org/trac/ticket/8847)
- en: '**[typing] [bug]**'
  id: totrans-1584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [错误]**'
- en: Adjusted internal use of the Python `enum.IntFlag` class which changed its behavioral
    contract in Python 3.11\. This was not causing runtime failures however caused
    typing runs to fail under Python 3.11.
  id: totrans-1585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了内部对 Python `enum.IntFlag` 类的使用，该类在 Python 3.11 中改变了其行为契约。这并没有导致运行时失败，但导致了在
    Python 3.11 下的类型运行失败。
- en: 'References: [#8783](https://www.sqlalchemy.org/trac/ticket/8783)'
  id: totrans-1586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8783](https://www.sqlalchemy.org/trac/ticket/8783)
- en: '**[typing] [bug]**'
  id: totrans-1587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [错误]**'
- en: The `sqlalchemy.ext.mutable` extension and `sqlalchemy.ext.automap` extensions
    are now fully pep-484 typed. Huge thanks to Gleb Kisenkov for their efforts on
    this.
  id: totrans-1588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.mutable` 扩展和 `sqlalchemy.ext.automap` 扩展现在完全符合 pep-484 类型标准。非常感谢
    Gleb Kisenkov 在这方面的努力。'
- en: 'References: [#6810](https://www.sqlalchemy.org/trac/ticket/6810), [#8667](https://www.sqlalchemy.org/trac/ticket/8667)'
  id: totrans-1589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6810](https://www.sqlalchemy.org/trac/ticket/6810), [#8667](https://www.sqlalchemy.org/trac/ticket/8667)
- en: '**[typing] [bug]**'
  id: totrans-1590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [错误]**'
- en: Corrected typing support for the [`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship") argument which may also accept a callable (lambda)
    that returns a [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-1591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了对 [`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship") 参数的类型支持，该参数也可以接受返回 [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 的可调用对象（lambda）。
- en: '**[typing] [bug]**'
  id: totrans-1592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [错误]**'
- en: Improved the typing for [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") and [`async_sessionmaker`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker"), so that the default type of their
    return value will be [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") or [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession"), without the need to type this explicitly.
    Previously, Mypy would not automaticaly infer these return types from its generic
    base.
  id: totrans-1593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    和 [`async_sessionmaker`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") 的类型，使得它们的返回值的默认类型将会是 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 或 [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")，而无需明确指定此类型。以前，Mypy 无法从其泛型基类自动推断出这些返回类型。
- en: As part of this change, arguments for [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession"), [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") and [`async_sessionmaker`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") beyond the initial “bind” argument
    have been made keyword-only, which includes parameters that have always been documented
    as keyword arguments, such as [`Session.autoflush`](../orm/session_api.html#sqlalchemy.orm.Session.params.autoflush
    "sqlalchemy.orm.Session"), [`Session.class_`](../orm/session_api.html#sqlalchemy.orm.Session.params.class_
    "sqlalchemy.orm.Session"), etc.
  id: totrans-1594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这次更改的一部分是，对于[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")、[`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")、[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")和[`async_sessionmaker`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker")的参数除了初始的“bind”参数之外，已经被设置为关键字参数，其中包括一直以来都被记录为关键字参数的参数，比如[`Session.autoflush`](../orm/session_api.html#sqlalchemy.orm.Session.params.autoflush
    "sqlalchemy.orm.Session")、[`Session.class_`](../orm/session_api.html#sqlalchemy.orm.Session.params.class_
    "sqlalchemy.orm.Session")等。
- en: Pull request courtesy Sam Bull.
  id: totrans-1595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 感谢 Sam Bull 提交的拉取请求。
- en: 'References: [#8842](https://www.sqlalchemy.org/trac/ticket/8842)'
  id: totrans-1596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8842](https://www.sqlalchemy.org/trac/ticket/8842)
- en: '**[typing] [bug]**'
  id: totrans-1597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed issue where passing a callbale function returning an iterable of column
    elements to [`relationship.order_by`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.order_by
    "sqlalchemy.orm.relationship") was flagged as an error in type checkers.
  id: totrans-1598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将返回列元素可迭代对象的可调用函数传递给 [`relationship.order_by`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.order_by
    "sqlalchemy.orm.relationship") 时在类型检查器中标记为错误的问题。
- en: 'References: [#8776](https://www.sqlalchemy.org/trac/ticket/8776)'
  id: totrans-1599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8776](https://www.sqlalchemy.org/trac/ticket/8776)
- en: postgresql
  id: totrans-1600
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-1601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Complementing [#8690](https://www.sqlalchemy.org/trac/ticket/8690), new comparison
    methods such as [`Range.adjacent_to()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.adjacent_to
    "sqlalchemy.dialects.postgresql.Range.adjacent_to"), [`Range.difference()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.difference
    "sqlalchemy.dialects.postgresql.Range.difference"), [`Range.union()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.union
    "sqlalchemy.dialects.postgresql.Range.union"), etc., were added to the PG-specific
    range objects, bringing them in par with the standard operators implemented by
    the underlying [`AbstractRange.comparator_factory`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory").
  id: totrans-1602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为 [#8690](https://www.sqlalchemy.org/trac/ticket/8690) 的补充，新增了诸如 [`Range.adjacent_to()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.adjacent_to
    "sqlalchemy.dialects.postgresql.Range.adjacent_to")、[`Range.difference()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.difference
    "sqlalchemy.dialects.postgresql.Range.difference")、[`Range.union()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.union
    "sqlalchemy.dialects.postgresql.Range.union") 等方法到 PG 特定的范围对象中，使其与底层 [`AbstractRange.comparator_factory`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory") 实现的标准操作保持一致。
- en: 'In addition, the `__bool__()` method of the class has been corrected to be
    consistent with the common Python containers behavior as well as how other popular
    PostgreSQL drivers do: it now tells whether the range instance is *not* empty,
    rather than the other way around.'
  id: totrans-1603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，类的`__bool__()`方法已校正，以与常见的Python容器行为以及其他流行的PostgreSQL驱动程序相一致：现在它告诉范围实例是否*不*为空，而不是相反。
- en: Pull request courtesy Lele Gaifax.
  id: totrans-1604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 拉取请求由Lele Gaifax提供。
- en: 'References: [#8765](https://www.sqlalchemy.org/trac/ticket/8765)'
  id: totrans-1605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8765](https://www.sqlalchemy.org/trac/ticket/8765)
- en: '**[postgresql] [change] [asyncpg]**'
  id: totrans-1606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [change] [asyncpg]**'
- en: Changed the paramstyle used by asyncpg from `format` to `numeric_dollar`. This
    has two main benefits since it does not require additional processing of the statement
    and allows for duplicate parameters to be present in the statements.
  id: totrans-1607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将asyncpg使用的paramstyle从`format`更改为`numeric_dollar`。这有两个主要好处，因为它不需要对语句进行额外处理，并且允许语句中存在重复的参数。
- en: 'References: [#8926](https://www.sqlalchemy.org/trac/ticket/8926)'
  id: totrans-1608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8926](https://www.sqlalchemy.org/trac/ticket/8926)
- en: '**[postgresql] [bug] [mssql]**'
  id: totrans-1609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [mssql]**'
- en: For the PostgreSQL and SQL Server dialects only, adjusted the compiler so that
    when rendering column expressions in the RETURNING clause, the “non anon” label
    that’s used in SELECT statements is suggested for SQL expression elements that
    generate a label; the primary example is a SQL function that may be emitting as
    part of the column’s type, where the label name should match the column’s name
    by default. This restores a not-well defined behavior that had changed in version
    1.4.21 due to [#6718](https://www.sqlalchemy.org/trac/ticket/6718), [#6710](https://www.sqlalchemy.org/trac/ticket/6710).
    The Oracle dialect has a different RETURNING implementation and was not affected
    by this issue. Version 2.0 features an across the board change for its widely
    expanded support of RETURNING on other backends.
  id: totrans-1610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅针对PostgreSQL和SQL Server方言，调整了编译器，以便在渲染RETURNING子句中的列表达式时，建议使用SELECT语句中使用的“非匿名”标签作为SQL表达式元素的标签;主要示例是可能作为列类型的一部分发出的SQL函数，其中标签名称默认应与列名称匹配。这恢复了一个在1.4.21版本中由于[#6718](https://www.sqlalchemy.org/trac/ticket/6718)，[#6710](https://www.sqlalchemy.org/trac/ticket/6710)而改变的不好定义的行为。Oracle方言具有不同的RETURNING实现，不受此问题的影响。版本2.0对其他后端广泛扩展的RETURNING支持进行了全面变更。
- en: 'This change is also **backported** to: 1.4.44'
  id: totrans-1611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**反向移植**到：1.4.44
- en: 'References: [#8770](https://www.sqlalchemy.org/trac/ticket/8770)'
  id: totrans-1612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8770](https://www.sqlalchemy.org/trac/ticket/8770)
- en: '**[postgresql] [bug]**'
  id: totrans-1613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added additional type-detection for the new PostgreSQL [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") type, where previous cases that allowed
    the psycopg2-native range objects to be received directly by the DBAPI without
    SQLAlchemy intercepting them stopped working, as we now have our own value object.
    The [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") object has been enhanced such that SQLAlchemy
    Core detects it in otherwise ambiguous situations (such as comparison to dates)
    and applies appropriate bind handlers. Pull request courtesy Lele Gaifax.
  id: totrans-1614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对新的PostgreSQL [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range")类型进行了额外的类型检测，以前允许直接通过DBAPI接收psycopg2原生范围对象的情况已停止工作，因为现在我们有了自己的值对象。
    [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")对象已得到增强，以便SQLAlchemy核心在其他模糊情况下检测到它（例如与日期的比较），并应用适当的绑定处理程序。拉取请求由Lele
    Gaifax提供。
- en: 'References: [#8884](https://www.sqlalchemy.org/trac/ticket/8884)'
  id: totrans-1615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8884](https://www.sqlalchemy.org/trac/ticket/8884)
- en: mssql
  id: totrans-1616
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed regression caused by the combination of [#8177](https://www.sqlalchemy.org/trac/ticket/8177),
    re-enable setinputsizes for SQL server unless fast_executemany + DBAPI executemany
    is used for a statement, along with [#6047](https://www.sqlalchemy.org/trac/ticket/6047),
    implement “insertmanyvalues”, which bypasses DBAPI executemany in place of a custom
    DBAPI execute for INSERT statements. setinputsizes would incorrectly not be used
    for a multiple parameter-set INSERT statement that used “insertmanyvalues” if
    fast_executemany were turned on, as the check would incorrectly assume this is
    a DBAPI executemany call. The “regression” would then be that the “insertmanyvalues”
    statement format is apparently slightly more sensitive to multiple rows that don’t
    use the same types for each row, so in such a case setinputsizes is especially
    needed.
  id: totrans-1618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由[#8177](https://www.sqlalchemy.org/trac/ticket/8177)的组合引起的回归，重新启用了setinputsizes用于SQL服务器，除非使用fast_executemany
    + DBAPI executemany用于语句，以及[#6047](https://www.sqlalchemy.org/trac/ticket/6047)，实现了“insertmanyvalues”，该值绕过了DBAPI
    executemany，而是使用INSERT语句的自定义DBAPI execute。如果打开fast_executemany，setinputsizes将不会用于使用“insertmanyvalues”的多个参数集INSERT语句，因为检查将错误地假设这是一个DBAPI
    executemany调用。然后，“回归”的问题就是，“insertmanyvalues”语句格式显然对于不使用相同类型的多行特别敏感，因此在这种情况下，尤其需要setinputsizes。
- en: The fix repairs the fast_executemany check so that it only disables setinputsizes
    if true DBAPI executemany is to be used.
  id: totrans-1619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了fast_executemany检查，使其仅在使用true DBAPI executemany时禁用setinputsizes。
- en: 'References: [#8917](https://www.sqlalchemy.org/trac/ticket/8917)'
  id: totrans-1620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8917](https://www.sqlalchemy.org/trac/ticket/8917)
- en: oracle
  id: totrans-1621
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Continued fixes for Oracle fix [#8708](https://www.sqlalchemy.org/trac/ticket/8708)
    released in 1.4.43 where bound parameter names that start with underscores, which
    are disallowed by Oracle, were still not being properly escaped in all circumstances.
  id: totrans-1623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对Oracle修复[#8708](https://www.sqlalchemy.org/trac/ticket/8708)的持续修复，在1.4.43中发布，其中以下划线开头的绑定参数名称（Oracle不允许的）仍然未在所有情况下正确转义。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-1624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**反向移植**到：1.4.45
- en: 'References: [#8708](https://www.sqlalchemy.org/trac/ticket/8708)'
  id: totrans-1625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8708](https://www.sqlalchemy.org/trac/ticket/8708)
- en: tests
  id: totrans-1626
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-1627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed issue where the `--disable-asyncio` parameter to the test suite would
    fail to not actually run greenlet tests and would also not prevent the suite from
    using a “wrapping” greenlet for the whole suite. This parameter now ensures that
    no greenlet or asyncio use will occur within the entire run when set.
  id: totrans-1628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了测试套件中`--disable-asyncio`参数的问题，该参数实际上无法禁止运行greenlet测试，并且也无法阻止套件在整个运行过程中使用“wrapping”
    greenlet。此参数现在确保在设置时不会在整个运行期间发生greenlet或asyncio使用。
- en: 'This change is also **backported** to: 1.4.44'
  id: totrans-1629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**反向移植**到：1.4.44
- en: 'References: [#8793](https://www.sqlalchemy.org/trac/ticket/8793)'
  id: totrans-1630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8793](https://www.sqlalchemy.org/trac/ticket/8793)
- en: 2.0.0b3
  id: totrans-1631
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.0b3
- en: 'Released: November 4, 2022'
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2022年11月4日
- en: orm
  id: totrans-1633
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in joined eager loading where an assertion fail would occur with
    a particular combination of outer/inner joined eager loads, when eager loading
    across three mappers where the middle mapper was an inherited subclass mapper.
  id: totrans-1635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在连接式预加载中出现断言失败的问题，在使用特定外/内连接式预加载组合时会出现断言失败，在跨三个映射器进行预加载时，中间映射器是一个继承的子类映射器。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-1636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**反向移植**到：1.4.43
- en: 'References: [#8738](https://www.sqlalchemy.org/trac/ticket/8738)'
  id: totrans-1637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8738](https://www.sqlalchemy.org/trac/ticket/8738)
- en: '**[orm] [bug]**'
  id: totrans-1638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") constructs, where combinations of [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") with [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join"), as well as when using [`Select.join_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from"), would cause the [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") feature as well as the IN criteria needed
    for single-table inheritance queries to not render, in cases where the columns
    clause of the query did not explicitly include the left-hand side entity of the
    JOIN. The correct entity is now transferred to the [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object that’s generated internally, so that
    the criteria against the left side entity is correctly added.
  id: totrans-1639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")构造的错误，其中[`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from")与[`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join")的组合，以及在使用[`Select.join_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from")时，会导致[`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")功能以及单表继承查询所需的IN条件在查询的列子句没有明确包含JOIN左侧实体时不会呈现。现在，正确的实体已传递给内部生成的[`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象，以便正确添加对左侧实体的条件。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-1640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.43
- en: 'References: [#8721](https://www.sqlalchemy.org/trac/ticket/8721)'
  id: totrans-1641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8721](https://www.sqlalchemy.org/trac/ticket/8721)
- en: '**[orm] [bug]**'
  id: totrans-1642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An informative exception is now raised when the [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option is used as a loader option added
    to a specific “loader path”, such as when using it within [`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options"). This use is not supported as [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is only intended to be used as a top level
    loader option. Previously, an internal error would be generated.
  id: totrans-1643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项作为特定“加载器路径”添加的加载器选项时，现在会引发一个信息性异常，例如在[`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options")中使用它时。这种用法不受支持，因为[`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")只打算用作顶级加载器选项。以前会生成内部错误。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-1644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.43
- en: 'References: [#8711](https://www.sqlalchemy.org/trac/ticket/8711)'
  id: totrans-1645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8711](https://www.sqlalchemy.org/trac/ticket/8711)
- en: '**[orm] [bug]**'
  id: totrans-1646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved “dictionary mode” for [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") so that synonym names which refer to primary key
    attribute names may be indicated in the named dictionary.
  id: totrans-1647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")改进了“字典模式”，以便可以在命名字典中指示引用主键属性名称的同义词名称。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-1648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.43
- en: 'References: [#8753](https://www.sqlalchemy.org/trac/ticket/8753)'
  id: totrans-1649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8753](https://www.sqlalchemy.org/trac/ticket/8753)
- en: '**[orm] [bug]**'
  id: totrans-1650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where “selectin_polymorphic” loading for inheritance mappers would
    not function correctly if the [`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") parameter referred to a SQL expression that was not directly
    mapped on the class.
  id: totrans-1651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了继承映射器的“selectin_polymorphic”加载不会正确工作的问题，如果[`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper")参数引用的SQL表达式不直接映射到类上。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-1652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.43
- en: 'References: [#8704](https://www.sqlalchemy.org/trac/ticket/8704)'
  id: totrans-1653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8704](https://www.sqlalchemy.org/trac/ticket/8704)
- en: '**[orm] [bug]**'
  id: totrans-1654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the underlying DBAPI cursor would not be closed when using
    the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object as an iterator, if a user-defined exception case were raised within the
    iteration process, thereby causing the iterator to be closed by the Python interpreter.
    When using [`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") to create server-side cursors, this would lead
    to the usual MySQL-related issues with server side cursors out of sync, and without
    direct access to the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object, end-user code could not access the cursor
    in order to close it.
  id: totrans-1655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当使用[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象作为迭代器时，如果在迭代过程中出现用户定义的异常情况，则底层的
    DBAPI 游标不会被关闭的问题。当使用[`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")来创建服务器端游标时，这会导致通常与 MySQL 相关的服务器端游标不同步的问题，并且由于无法直接访问[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象，最终用户的代码无法访问游标以关闭它。
- en: To resolve, a catch for `GeneratorExit` is applied within the iterator method,
    which will close the result object in those cases when the iterator were interrupted,
    and by definition will be closed by the Python interpreter.
  id: totrans-1656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了解决这个问题，在迭代器方法中应用了对`GeneratorExit`的捕获，这样当迭代器被中断时将关闭结果对象，并且按定义将被 Python 解释器关闭。
- en: As part of this change as implemented for the 1.4 series, ensured that `.close()`
    methods are available on all [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") implementations including [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult"), [`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult"). The 2.0 version of this change also includes
    new context manager patterns for use with [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") classes.
  id: totrans-1657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为针对 1.4 系列实现的这一变化的一部分，确保了在所有[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")实现上都提供了`.close()`方法，包括[`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")、[`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult")。这一变化的 2.0 版本还包括了用于与[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")类一起使用的新上下文管理器模式。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-1658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一变化也被**回溯**到了：1.4.43
- en: 'References: [#8710](https://www.sqlalchemy.org/trac/ticket/8710)'
  id: totrans-1659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8710](https://www.sqlalchemy.org/trac/ticket/8710)
- en: orm declarative
  id: totrans-1660
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明式
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Added support in ORM declarative annotations for class names specified for [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), as well as the name of the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") symbol itself, to be different names than their direct
    class name, to support scenarios such as where [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") is imported as `from sqlalchemy.orm import Mapped as
    M`, or where related class names are imported with an alternate name in a similar
    fashion. Additionally, a target class name given as the lead argument for [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") will always supersede the name given in the left
    hand annotation, so that otherwise un-importable names that also don’t match the
    class name can still be used in annotations.
  id: totrans-1662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 ORM 声明式注释中为[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")指定的类名添加了支持，以及为[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")符号本身的名称，使其与直接的类名不同，以支持诸如将[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")导入为 `from sqlalchemy.orm import Mapped as M`，或者相关类名以类似方式导入为替代名称的情况。此外，作为[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的主参数给定的目标类名将始终优先于左手注释中给定的名称，以便仍然可以在注释中使用否则无法导入的名称，而且这些名称也不与类名匹配。
- en: 'References: [#8759](https://www.sqlalchemy.org/trac/ticket/8759)'
  id: totrans-1663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8759](https://www.sqlalchemy.org/trac/ticket/8759)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Improved support for legacy 1.4 mappings that use annotations which don’t include
    `Mapped[]`, by ensuring the `__allow_unmapped__` attribute can be used to allow
    such legacy annotations to pass through Annotated Declarative without raising
    an error and without being interpreted in an ORM runtime context. Additionally
    improved the error message generated when this condition is detected, and added
    more documentation for how this situation should be handled. Unfortunately the
    1.4 WARN_SQLALCHEMY_20 migration warning cannot detect this particular configurational
    issue at runtime with its current architecture.
  id: totrans-1665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进对使用注释的遗留 1.4 映射的支持，这些注释不包括 `Mapped[]`，通过确保 `__allow_unmapped__` 属性可以用于允许这些遗留注释通过
    Annotated Declarative 而不引发错误，并且不在 ORM 运行时上下文中被解释。此外，当检测到这种情况时改进了生成的错误消息，并为应该如何处理这种情况添加了更多文档。不幸的是，1.4
    WARN_SQLALCHEMY_20 迁移警告不能在运行时使用当前架构检测到这个特定的配置问题。
- en: 'References: [#8692](https://www.sqlalchemy.org/trac/ticket/8692)'
  id: totrans-1666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8692](https://www.sqlalchemy.org/trac/ticket/8692)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Changed a fundamental configuration behavior of [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), where [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that are explicitly present in the [`Mapper.properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper") dictionary, either directly or enclosed within a mapper
    property object, will now be mapped within the order of how they appear within
    the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    (or other selectable) itself (assuming they are in fact part of that table’s list
    of columns), thereby maintaining the same order of columns in the mapped selectable
    as is instrumented on the mapped class, as well as what renders in an ORM SELECT
    statement for that mapper. Previously (where “previously” means since version
    0.0.1), [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects in the [`Mapper.properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper") dictionary would always be mapped first, ahead of when
    the other columns in the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") would be mapped, causing a discrepancy in the order
    in which the mapper would assign attributes to the mapped class as well as the
    order in which they would render in statements.
  id: totrans-1668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改变了 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    的一个基本配置行为，其中在 [`Mapper.properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper") 字典中显式存在的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象，无论是直接还是包含在映射器属性对象内部，现在都将在映射的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")（或其他可选择的）本身中以它们出现的顺序进行映射（假设它们实际上是该表的列列表的一部分），从而保持在映射的可选择上的列的顺序与在映射类中操纵的顺序相同，以及在
    ORM SELECT 语句中为该映射器渲染的内容相同。以前（“以前”意味着自版本 0.0.1 以来），在 [`Mapper.properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper") 字典中的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象总是会首先映射，超过了在映射的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 中其他列的映射，导致在映射器分配属性给映射类时的顺序以及它们在语句中呈现的顺序之间存在差异。
- en: The change most prominently takes place in the way that Declarative assigns
    declared columns to the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), specifically how [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") (or [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")) objects are handled when they have a DDL name
    that is explicitly different from the mapped attribute name, as well as when constructs
    such as [`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") etc. are used. The new behavior will see the column
    ordering within the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") being the same order in which the attributes are mapped
    onto the class, assigned within the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") itself, and rendered in ORM statements such as SELECT
    statements, independent of how the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") was configured against the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-1669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改最显著地发生在声明式将声明的列分配给[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的方式上，特别是在处理具有DDL名称明确不同于映射属性名称的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")（或[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")）对象以及使用[`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred")等构造时。新行为将使映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")中的列顺序与属性映射到类中的顺序相同，由[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")本身分配，并在ORM语句（如SELECT语句）中呈现，独立于[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")针对[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的配置方式。
- en: 'References: [#8705](https://www.sqlalchemy.org/trac/ticket/8705)'
  id: totrans-1670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8705](https://www.sqlalchemy.org/trac/ticket/8705)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed issue in new dataclass mapping feature where a column declared on the
    decalrative base / abstract base / mixin would leak into the constructor for an
    inheriting subclass under some circumstances.
  id: totrans-1672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新数据类映射功能中的问题，其中在某些情况下，在继承子类的构造函数中，声明在声明基类/抽象基类/混合类上的列会泄漏。
- en: 'References: [#8718](https://www.sqlalchemy.org/trac/ticket/8718)'
  id: totrans-1673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8718](https://www.sqlalchemy.org/trac/ticket/8718)
- en: '**[bug] [orm declarative]**'
  id: totrans-1674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm declarative]**'
- en: Fixed issues within the declarative typing resolver (i.e. which resolves `ForwardRef`
    objects) where types that were declared for columns in one particular source file
    would raise `NameError` when the ultimate mapped class were in another source
    file. The types are now resolved in terms of the module for each class in which
    the types are used.
  id: totrans-1675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了声明式类型解析器（即解析`ForwardRef`对象的解析器）中的问题，其中在一个特定的源文件中为列声明的类型在最终映射的类位于另一个源文件时会引发`NameError`。现在，这些类型是根据每个类所在的模块来解析的。
- en: 'References: [#8742](https://www.sqlalchemy.org/trac/ticket/8742)'
  id: totrans-1676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8742](https://www.sqlalchemy.org/trac/ticket/8742)
- en: engine
  id: totrans-1677
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-1678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: To better support the use case of iterating [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") and [`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") objects where user-defined exceptions may
    interrupt the iteration, both objects as well as variants such as [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult"), [`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult"), [`AsyncScalarResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult"), [`AsyncMappingResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult") now support context manager usage,
    where the result will be closed at the end of the context manager block.
  id: totrans-1679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了更好地支持用户定义的异常可能会中断迭代的[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")和[`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")对象的使用情况，现在这两个对象以及诸如[`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")、[`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult")、[`AsyncScalarResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult")、[`AsyncMappingResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult")等变体都支持上下文管理器的使用，结果将在上下文管理器块的末尾关闭。
- en: In addition, ensured that all the above mentioned [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") objects include a [`Result.close()`](../core/connections.html#sqlalchemy.engine.Result.close
    "sqlalchemy.engine.Result.close") method as well as [`Result.closed`](../core/connections.html#sqlalchemy.engine.Result.closed
    "sqlalchemy.engine.Result.closed") accessors, including [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") and [`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult") which previously did not have a `.close()`
    method.
  id: totrans-1680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，确保所有上述提到的[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象都包括[`Result.close()`](../core/connections.html#sqlalchemy.engine.Result.close
    "sqlalchemy.engine.Result.close")方法以及[`Result.closed`](../core/connections.html#sqlalchemy.engine.Result.closed
    "sqlalchemy.engine.Result.closed")访问器，包括以前没有`.close()`方法的[`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")和[`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult")。
- en: See also
  id: totrans-1681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Context Manager Support for Result, AsyncResult](whatsnew_20.html#change-8710)'
  id: totrans-1682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[结果、AsyncResult的上下文管理器支持](whatsnew_20.html#change-8710)'
- en: 'References: [#8710](https://www.sqlalchemy.org/trac/ticket/8710)'
  id: totrans-1683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8710](https://www.sqlalchemy.org/trac/ticket/8710)
- en: '**[engine] [usecase]**'
  id: totrans-1684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [用例]**'
- en: Added new parameter [`PoolEvents.reset.reset_state`](../core/events.html#sqlalchemy.events.PoolEvents.reset.params.reset_state
    "sqlalchemy.events.PoolEvents.reset") parameter to the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event, with deprecation logic in place that
    will continue to accept event hooks using the previous set of arguments. This
    indicates various state information about how the reset is taking place and is
    used to allow custom reset schemes to take place with full context given.
  id: totrans-1685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`PoolEvents.reset.reset_state`](../core/events.html#sqlalchemy.events.PoolEvents.reset.params.reset_state
    "sqlalchemy.events.PoolEvents.reset")到[`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")事件中，同时放置了一个将继续接受使用先前一组参数的事件钩子的弃用逻辑。这指示了关于重置正在进行的方式的各种状态信息，并且被用于允许在给定完整上下文的情况下进行自定义重置方案。
- en: Within this change a fix that’s also backported to 1.4 is included which re-enables
    the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event to continue to take place under all
    circumstances, including when [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") has already “reset” the connection.
  id: totrans-1686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个改变中，也包括了一个在1.4中回溯的修复，该修复重新启用了[`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")事件，以便在所有情况下继续进行，包括当[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")已经“重置”连接时。
- en: The two changes together allow custom reset schemes to be implemented using
    the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event, instead of the [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") event (which continues to function as
    it always has).
  id: totrans-1687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这两个更改共同允许使用[`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")事件来实现自定义重置方案，而不是使用[`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin")事件（其功能与以往一样）。
- en: 'References: [#8717](https://www.sqlalchemy.org/trac/ticket/8717)'
  id: totrans-1688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8717](https://www.sqlalchemy.org/trac/ticket/8717)
- en: '**[engine] [bug] [regression]**'
  id: totrans-1689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [regression]**'
- en: Fixed issue where the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event hook would not be be called in all
    cases when a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") were closed and was in the process of returning
    its DBAPI connection to the connection pool.
  id: totrans-1690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即当[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")关闭并且正在将其 DBAPI 连接返回到连接池时，在某些情况下不会调用[`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")事件钩子。
- en: The scenario was when the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") had already emitted `.rollback()` on its DBAPI
    connection within the process of returning the connection to the pool, where it
    would then instruct the connection pool to forego doing its own “reset” to save
    on the additional method call. However, this prevented custom pool reset schemes
    from being used within this hook, as such hooks by definition are doing more than
    just calling `.rollback()`, and need to be invoked under all circumstances. This
    was a regression that appeared in version 1.4.
  id: totrans-1691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")已经在将连接返回到池的过程中在其
    DBAPI 连接上发出`.rollback()`时，场景是它随后会指示连接池放弃执行自己的“重置”以节省额外的方法调用。但是，这会阻止在此钩子中使用自定义池重置方案，因为此类钩子根据定义正在执行的不仅仅是调用`.rollback()`，而且需要在所有情况下调用。这是在版本
    1.4 中出现的一种退化。
- en: For version 1.4, the [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") remains viable as an alternate event hook
    to use for custom “reset” implementations. Version 2.0 will feature an improved
    version of [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") which is called for additional scenarios
    such as termination of asyncio connections, and is also passed contextual information
    about the reset, to allow for “custom connection reset” schemes which can respond
    to different reset scenarios in different ways.
  id: totrans-1692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于版本 1.4，[`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin")仍然可作为用于自定义“重置”实现的备用事件钩子。版本 2.0 将提供一个改进版本的[`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")，它将被调用用于额外的场景，例如终止 asyncio 连接，并且还传递有关重置的上下文信息，以允许对不同的重置方案作出响应以不同的方式处理不同的重置场景。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-1693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.43
- en: 'References: [#8717](https://www.sqlalchemy.org/trac/ticket/8717)'
  id: totrans-1694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8717](https://www.sqlalchemy.org/trac/ticket/8717)
- en: sql
  id: totrans-1695
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-1696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue which prevented the [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") construct from working properly within
    the context of a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct as well as other potential places
    where “anonymized labels” might be generated, if the literal expression contained
    characters which could interfere with format strings, such as open parenthesis,
    due to an implementation detail of the “anonymous label” structure.
  id: totrans-1697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，它阻止[`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")构造在[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造的上下文中正常工作，以及其他可能生成“匿名标签”的地方，如果文字表达式包含可能干扰格式字符串的字符，例如括号，由于“匿名标签”的实现细节。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-1698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.43
- en: 'References: [#8724](https://www.sqlalchemy.org/trac/ticket/8724)'
  id: totrans-1699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8724](https://www.sqlalchemy.org/trac/ticket/8724)
- en: typing
  id: totrans-1700
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-1701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Corrected various typing issues within the engine and async engine packages.
  id: totrans-1702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更正了引擎和异步引擎包中的各种类型问题。
- en: postgresql
  id: totrans-1703
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-1704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new methods [`Range.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.contains
    "sqlalchemy.dialects.postgresql.Range.contains") and [`Range.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.contained_by
    "sqlalchemy.dialects.postgresql.Range.contained_by") to the new [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") data object, which mirror the behavior
    of the PostgreSQL `@>` and `<@` operators, as well as the [`comparator_factory.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contains
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contains") and
    [`comparator_factory.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contained_by
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contained_by")
    SQL operator methods. Pull request courtesy Lele Gaifax.
  id: totrans-1705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法[`Range.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.contains
    "sqlalchemy.dialects.postgresql.Range.contains") 和 [`Range.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.contained_by
    "sqlalchemy.dialects.postgresql.Range.contained_by") 到新的 [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") 数据对象中，这些方法与 PostgreSQL 的 `@>` 和 `<@` 操作符的行为相同，以及
    [`comparator_factory.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contains
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contains") 和
    [`comparator_factory.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contained_by
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contained_by")
    SQL 操作符方法。感谢 Lele Gaifax 提供的拉取请求。
- en: 'References: [#8706](https://www.sqlalchemy.org/trac/ticket/8706)'
  id: totrans-1706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8706](https://www.sqlalchemy.org/trac/ticket/8706)
- en: '**[postgresql] [usecase]**'
  id: totrans-1707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Refined the new approach to range objects described at [New RANGE / MULTIRANGE
    support and changes for PostgreSQL backends](whatsnew_20.html#change-7156) to
    accommodate driver-specific range and multirange objects, to better accommodate
    both legacy code as well as when passing results from raw SQL result sets back
    into new range or multirange expressions.
  id: totrans-1708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优化了对 [PostgreSQL 后端的新 RANGE / MULTIRANGE 支持和更改](whatsnew_20.html#change-7156)
    中描述的范围对象的新方法，以适应驱动程序特定的范围和多范围对象，更好地适应传统代码以及将结果从原始 SQL 结果集传递回新范围或多范围表达式时。
- en: 'References: [#8690](https://www.sqlalchemy.org/trac/ticket/8690)'
  id: totrans-1709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8690](https://www.sqlalchemy.org/trac/ticket/8690)
- en: mssql
  id: totrans-1710
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue with [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table"), which when used against a
    temporary table with the SQL Server dialect would fail on some Azure variants,
    due to an unnecessary information schema query that is not supported on those
    server versions. Pull request courtesy Mike Barry.
  id: totrans-1712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与使用 SQL Server 方言的临时表时使用[`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table")相关的问题，这会导致某些 Azure 变体上失败，因为不支持那些服务器版本上的一个不必要的信息模式查询。感谢
    Mike Barry 提供的拉取请求。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-1713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.4.43
- en: 'References: [#8714](https://www.sqlalchemy.org/trac/ticket/8714)'
  id: totrans-1714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8714](https://www.sqlalchemy.org/trac/ticket/8714)
- en: '**[mssql] [bug] [reflection]**'
  id: totrans-1715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [reflection]**'
- en: 'Fixed issue with [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table"), which when used against a
    view with the SQL Server dialect would erroneously return `False`, due to a regression
    in the 1.4 series which removed support for this on SQL Server. The issue is not
    present in the 2.0 series which uses a different reflection architecture. Test
    support is added to ensure `has_table()` remains working per spec re: views.'
  id: totrans-1716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与[`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table")相关的问题，当对使用 SQL Server 方言的视图使用时，错误地返回
    `False`，这是由于 1.4 系列中的一个回归导致的，该系列在 SQL Server 上删除了对此的支持。这个问题在使用不同反射架构的 2.0 系列中不存在。添加了测试支持，以确保
    `has_table()` 符合视图的规范。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-1717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.4.43
- en: 'References: [#8700](https://www.sqlalchemy.org/trac/ticket/8700)'
  id: totrans-1718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8700](https://www.sqlalchemy.org/trac/ticket/8700)
- en: oracle
  id: totrans-1719
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-1720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue where bound parameter names, including those automatically derived
    from similarly-named database columns, which contained characters that normally
    require quoting with Oracle would not be escaped when using “expanding parameters”
    with the Oracle dialect, causing execution errors. The usual “quoting” for bound
    parameters used by the Oracle dialect is not used with the “expanding parameters”
    architecture, so escaping for a large range of characters is used instead, now
    using a list of characters/escapes that are specific to Oracle.
  id: totrans-1721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，其中包含需要在 Oracle 中用引号引起的字符的绑定参数名称，包括那些从同名数据库列自动生成的名称，在使用 Oracle 方言的“扩展参数”时不会被转义，导致执行错误。
    Oracle 方言使用的绑定参数的通常“引用”不与“扩展参数”架构一起使用，因此使用了大范围字符的转义，现在使用了一个针对 Oracle 的字符/转义列表。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-1722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.43
- en: 'References: [#8708](https://www.sqlalchemy.org/trac/ticket/8708)'
  id: totrans-1723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8708](https://www.sqlalchemy.org/trac/ticket/8708)
- en: '**[oracle] [bug]**'
  id: totrans-1724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue where the `nls_session_parameters` view queried on first connect
    in order to get the default decimal point character may not be available depending
    on Oracle connection modes, and would therefore raise an error. The approach to
    detecting decimal char has been simplified to test a decimal value directly, instead
    of reading system views, which works on any backend / driver.
  id: totrans-1725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，在新的 ORM 类型声明映射中，没有实现在关系配置中使用`Optional[MyClass]`或类似形式（例如`MyClass | None`）的类型注释的能力，导致错误。
    文档还为这种用例添加了关于关系配置的文档。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-1726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.43
- en: 'References: [#8744](https://www.sqlalchemy.org/trac/ticket/8744)'
  id: totrans-1727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8744](https://www.sqlalchemy.org/trac/ticket/8744)
- en: 2.0.0b2
  id: totrans-1728
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.0b2
- en: 'Released: October 20, 2022'
  id: totrans-1729
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2022年10月20日
- en: orm
  id: totrans-1730
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-1731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed the warning that emits when using ORM-enabled update/delete regarding
    evaluation of columns by name, first added in [#4073](https://www.sqlalchemy.org/trac/ticket/4073);
    this warning actually covers up a scenario that otherwise could populate the wrong
    Python value for an ORM mapped attribute depending on what the actual column is,
    so this deprecated case is removed. In 2.0, ORM enabled update/delete uses “auto”
    for “synchronize_session”, which should do the right thing automatically for any
    given UPDATE expression.
  id: totrans-1732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在使用 ORM 启用的更新/删除时发出的警告，该警告首次出现在[#4073](https://www.sqlalchemy.org/trac/ticket/4073)中；这个警告实际上掩盖了一个场景，否则可能会根据实际列而为
    ORM 映射的属性填充错误的 Python 值，因此移除了这个不建议使用的情况。在 2.0 中，ORM 启用的更新/删除使用“auto”作为“synchronize_session”，这应该会自动为任何给定的
    UPDATE 表达式执行正确的操作。
- en: 'References: [#8656](https://www.sqlalchemy.org/trac/ticket/8656)'
  id: totrans-1733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8656](https://www.sqlalchemy.org/trac/ticket/8656)
- en: orm declarative
  id: totrans-1734
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明
- en: '**[orm] [declarative] [usecase]**'
  id: totrans-1735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [usecase]**'
- en: Added support for mapped classes that are also `Generic` subclasses, to be specified
    as a `GenericAlias` object (e.g. `MyClass[str]`) within statements and calls to
    [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect").
  id: totrans-1736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对映射类也是`Generic`子类的支持，可以在语句和调用[`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect")时指定为`GenericAlias`对象（例如`MyClass[str]`）。
- en: 'References: [#8665](https://www.sqlalchemy.org/trac/ticket/8665)'
  id: totrans-1737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8665](https://www.sqlalchemy.org/trac/ticket/8665)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Improved the [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") class so that when combined with other mixins
    like [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass"), the order of the classes may be in either
    order.
  id: totrans-1739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了[`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")类，以便与其他混入类（如[`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")）结合使用时，类的顺序可以是任意顺序。
- en: 'References: [#8665](https://www.sqlalchemy.org/trac/ticket/8665)'
  id: totrans-1740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8665](https://www.sqlalchemy.org/trac/ticket/8665)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug in new ORM typed declarative mappings where the ability to use `Optional[MyClass]`
    or similar forms such as `MyClass | None` in the type annotation for a many-to-one
    relationship was not implemented, leading to errors. Documentation has also been
    added for this use case to the relationship configuration documentation.
  id: totrans-1742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，在新的 ORM 类型声明映射中，没有实现在关系配置中使用`Optional[MyClass]`或类似形式（例如`MyClass | None`）的类型注释的能力，导致错误。
    文档还为这种用例添加了关于关系配置的文档。
- en: 'References: [#8668](https://www.sqlalchemy.org/trac/ticket/8668)'
  id: totrans-1743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8668](https://www.sqlalchemy.org/trac/ticket/8668)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-1744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed issue with new dataclass mapping feature where arguments passed to the
    dataclasses API could sometimes be mis-ordered when dealing with mixins that override
    [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    declarations, leading to initializer problems.
  id: totrans-1745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的 dataclass 映射功能中的问题，当处理覆盖[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")声明的混入时，传递给 dataclasses API 的参数有时可能被错误排序，导致初始化问题。
- en: 'References: [#8688](https://www.sqlalchemy.org/trac/ticket/8688)'
  id: totrans-1746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8688](https://www.sqlalchemy.org/trac/ticket/8688)
- en: sql
  id: totrans-1747
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [regression]**'
  id: totrans-1748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [regression]**'
- en: Fixed bug in new “insertmanyvalues” feature where INSERT that included a subquery
    with [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") inside of it would fail to render correctly
    in “insertmanyvalues” format. This affected psycopg2 most directly as “insertmanyvalues”
    is used unconditionally with this driver.
  id: totrans-1749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“insertmanyvalues”功能中的 bug，其中包含使用[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")的子查询的 INSERT 在“insertmanyvalues”格式中无法正确呈现的问题。这直接影响了
    psycopg2，因为“insertmanyvalues”在此驱动程序中无条件使用。
- en: 'References: [#8639](https://www.sqlalchemy.org/trac/ticket/8639)'
  id: totrans-1750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8639](https://www.sqlalchemy.org/trac/ticket/8639)
- en: typing
  id: totrans-1751
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型
- en: '**[typing] [bug]**'
  id: totrans-1752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue where pylance strict mode would report “instance variable
    overrides class variable” when using a method to define `__tablename__`, `__mapper_args__`
    or `__table_args__`.
  id: totrans-1753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pylance 严格模式下报告“实例变量覆盖类变量”的类型问题，当使用方法定义`__tablename__`、`__mapper_args__`或`__table_args__`时。
- en: 'References: [#8645](https://www.sqlalchemy.org/trac/ticket/8645)'
  id: totrans-1754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8645](https://www.sqlalchemy.org/trac/ticket/8645)
- en: '**[typing] [bug]**'
  id: totrans-1755
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue where pylance strict mode would report “partially unknown”
    datatype for the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct.
  id: totrans-1756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pylance 严格模式下报告“部分未知”数据类型的`mapped_column()`构造的类型问题。
- en: 'References: [#8644](https://www.sqlalchemy.org/trac/ticket/8644)'
  id: totrans-1757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8644](https://www.sqlalchemy.org/trac/ticket/8644)
- en: mssql
  id: totrans-1758
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-1759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed regression caused by SQL Server pyodbc change [#8177](https://www.sqlalchemy.org/trac/ticket/8177)
    where we now use `setinputsizes()` by default; for VARCHAR, this fails if the
    character size is greater than 4000 (or 2000, depending on data) characters as
    the incoming datatype is NVARCHAR, which has a limit of 4000 characters, despite
    the fact that VARCHAR can handle unlimited characters. Additional pyodbc-specific
    typing information is now passed to `setinputsizes()` when the datatype’s size
    is > 2000 characters. The change is also applied to the [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") type which was also impacted by this issue for large
    JSON serializations.
  id: totrans-1760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 SQL Server pyodbc 更改 [#8177](https://www.sqlalchemy.org/trac/ticket/8177)
    引起的回归问题已修复，现在默认使用`setinputsizes()`；对于 VARCHAR，如果字符大小大于 4000（或 2000，取决于数据），则会失败，因为传入的数据类型是
    NVARCHAR，其限制为 4000 个字符，尽管 VARCHAR 可以处理无限字符。 当数据类型的大小> 2000 个字符时，现在还将传递额外的 pyodbc
    特定的类型信息给`setinputsizes()`。 这个更改也适用于受此问题影响的[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON")类型，用于大型 JSON 序列化。
- en: 'References: [#8661](https://www.sqlalchemy.org/trac/ticket/8661)'
  id: totrans-1761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8661](https://www.sqlalchemy.org/trac/ticket/8661)
- en: '**[mssql] [bug]**'
  id: totrans-1762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: The [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    construct restores itself to the DDL behavior it had prior to the 1.4 series,
    where creating a [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") with no additional arguments will emit a simple
    `CREATE SEQUENCE` instruction **without** any additional parameters for “start
    value”. For most backends, this is how things worked previously in any case; **however**,
    for MS SQL Server, the default value on this database is `-2**63`; to prevent
    this generally impractical default from taking effect on SQL Server, the [`Sequence.start`](../core/defaults.html#sqlalchemy.schema.Sequence.params.start
    "sqlalchemy.schema.Sequence") parameter should be provided. As usage of [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") is unusual for SQL Server which for many years has
    standardized on `IDENTITY`, it is hoped that this change has minimal impact.
  id: totrans-1763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    构造恢复到了 1.4 系列之前的 DDL 行为，即创建一个没有额外参数的 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 将会发出一个简单的 `CREATE SEQUENCE` 指令，**没有**任何额外的“起始值”参数。对于大多数后端来说，无论如何，这都是之前的工作方式；**然而**，对于
    MS SQL Server，此数据库上的默认值是 `-2**63`；为了防止这个通常不实用的默认值在 SQL Server 上生效，应该提供 [`Sequence.start`](../core/defaults.html#sqlalchemy.schema.Sequence.params.start
    "sqlalchemy.schema.Sequence") 参数。由于对于多年以来一直在 `IDENTITY` 上标准化的 SQL Server 来说，对
    [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    的使用是不寻常的，希望这个变化影响最小。'
- en: See also
  id: totrans-1764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The Sequence construct reverts to not having any explicit default “start”
    value; impacts MS SQL Server](whatsnew_20.html#change-7211)'
  id: totrans-1765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Sequence 构造不再具有任何显式默认的 “start” 值；影响 MS SQL Server](whatsnew_20.html#change-7211)'
- en: 'References: [#7211](https://www.sqlalchemy.org/trac/ticket/7211)'
  id: totrans-1766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7211](https://www.sqlalchemy.org/trac/ticket/7211)
- en: 2.0.0b1
  id: totrans-1767
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.0b1
- en: 'Released: October 13, 2022'
  id: totrans-1768
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2022年10月13日
- en: general
  id: totrans-1769
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常规
- en: '**[general] [changed]**'
  id: totrans-1770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[常规] [更改]**'
- en: 'Migrated the codebase to remove all pre-2.0 behaviors and architectures that
    were previously noted as deprecated for removal in 2.0, including, but not limited
    to:'
  id: totrans-1771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 迁移代码库以删除所有之前标记为在 2.0 中移除的预先 2.0 版本行为和架构，包括但不限于：
- en: removal of all Python 2 code, minimum version is now Python 3.7
  id: totrans-1772
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除所有 Python 2 代码，最低版本现在为 Python 3.7
- en: '[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    now use the new 2.0 style of working, which includes “autobegin”, library level
    autocommit removed, subtransactions and “branched” connections removed'
  id: totrans-1773
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    和 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    现在使用新的 2.0 工作风格，其中包括 “autobegin”，库级别的自动提交已删除，子事务和 “branched” 连接已删除。'
- en: Result objects use 2.0-style behaviors; [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") is fully a named tuple without “mapping” behavior, use
    [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    for “mapping” behavior
  id: totrans-1774
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果对象使用 2.0 风格的行为；[`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    完全是一个具有命名元组而没有 “映射” 行为，使用 [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") 来进行 “映射” 行为
- en: All Unicode encoding/decoding architecture has been removed from SQLAlchemy.
    All modern DBAPI implementations support Unicode transparently thanks to Python
    3, so the `convert_unicode` feature as well as related mechanisms to look for
    bytestrings in DBAPI `cursor.description` etc. have been removed.
  id: totrans-1775
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有 Unicode 编码/解码架构已从 SQLAlchemy 中删除。所有现代的 DBAPI 实现都通过 Python 3 透明地支持 Unicode，因此已经删除了
    `convert_unicode` 功能以及相关的在 DBAPI `cursor.description` 等中查找字节字符串的机制。
- en: The `.bind` attribute and parameter from [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), and from all DDL/DML/DQL elements that previously
    could refer to a “bound engine”
  id: totrans-1776
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")，[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 和从以前可以引用 “绑定引擎”的所有 DDL/DML/DQL 元素中的 `.bind` 属性和参数
- en: The standalone `sqlalchemy.orm.mapper()` function is removed; all classical
    mapping should be done through the [`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method of [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry").
  id: totrans-1777
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立的`sqlalchemy.orm.mapper()`函数已移除；所有经典映射应通过[`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively")方法的[`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")进行。
- en: The [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method no longer accepts strings for relationship
    names; the long-documented approach of using `Class.attrname` for join targets
    is now standard.
  id: totrans-1778
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")方法不再接受字符串作为关系名称；使用`Class.attrname`作为连接目标的长期记录方法现在是标准的。'
- en: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    no longer accepts the “aliased” and “from_joinpoint” arguments'
  id: totrans-1779
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")不再接受“aliased”和“from_joinpoint”参数。'
- en: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    no longer accepts chains of multiple join targets in one method call.'
  id: totrans-1780
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")不再在一个方法调用中接受多个连接目标链。'
- en: '`Query.from_self()`, `Query.select_entity_from()` and `Query.with_polymorphic()`
    are removed.'
  id: totrans-1781
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Query.from_self()`，`Query.select_entity_from()`和`Query.with_polymorphic()`已移除。'
- en: The [`relationship.cascade_backrefs`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.cascade_backrefs
    "sqlalchemy.orm.relationship") parameter must now remain at its new default of
    `False`; the `save-update` cascade no longer cascades along a backref.
  id: totrans-1782
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`relationship.cascade_backrefs`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.cascade_backrefs
    "sqlalchemy.orm.relationship")参数现在必须保持其新默认值`False`；`save-update`级联不再沿着反向引用级联。'
- en: the [`Session.future`](../orm/session_api.html#sqlalchemy.orm.Session.params.future
    "sqlalchemy.orm.Session") parameter must always be set to `True`. 2.0-style transactional
    patterns for [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    are now always in effect.
  id: totrans-1783
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Session.future`](../orm/session_api.html#sqlalchemy.orm.Session.params.future
    "sqlalchemy.orm.Session")参数必须始终设置为`True`。 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的2.0风格事务模式现在始终生效。'
- en: Loader options no longer accept strings for attribute names. The long-documented
    approach of using `Class.attrname` for loader option targets is now standard.
  id: totrans-1784
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载器选项不再接受属性名称的字符串。使用`Class.attrname`作为加载器选项目标的长期记录方法现在是标准的。
- en: Legacy forms of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") removed, including `select([cols])`, the “whereclause”
    and keyword parameters of `some_table.select()`.
  id: totrans-1785
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遗留形式的[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")已移除，包括`select([cols])`，`some_table.select()`的“whereclause”和关键参数。
- en: Legacy “in-place mutator” methods on [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") such as `append_whereclause()`, `append_order_by()`
    etc are removed.
  id: totrans-1786
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")上的遗留“就地变异器”方法，如`append_whereclause()`，`append_order_by()`等已移除。'
- en: Removed the very old “dbapi_proxy” module, which in very early SQLAlchemy releases
    was used to provide a transparent connection pool over a raw DBAPI connection.
  id: totrans-1787
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了非常古老的“dbapi_proxy”模块，早期SQLAlchemy版本中用于在原始DBAPI连接上提供透明连接池。
- en: 'References: [#7257](https://www.sqlalchemy.org/trac/ticket/7257)'
  id: totrans-1788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7257](https://www.sqlalchemy.org/trac/ticket/7257)
- en: '**[general] [changed]**'
  id: totrans-1789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [更改]**'
- en: The [`Query.instances()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.instances
    "sqlalchemy.orm.Query.instances") method is deprecated. The behavioral contract
    of this method, which is that it can iterate objects through arbitrary result
    sets, is long obsolete and no longer tested. Arbitrary statements can return objects
    by using constructs such as :meth`.Select.from_statement` or [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased").
  id: totrans-1790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.instances()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.instances
    "sqlalchemy.orm.Query.instances")方法已弃用。该方法的行为约定，即可以通过任意结果集迭代对象，早已过时且不再测试。可以使用类似:meth`.Select.from_statement`或[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")的构造来返回对象。'
- en: platform
  id: totrans-1791
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 平台
- en: '**[platform] [feature]**'
  id: totrans-1792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[平台] [特性]**'
- en: The SQLAlchemy C extensions have been replaced with all new implementations
    written in Cython. Like the C extensions before, pre-built wheel files for a wide
    range of platforms are available on pypi so that building is not an issue for
    common platforms. For custom builds, `python setup.py build_ext` works as before,
    needing only the additional Cython install. `pyproject.toml` is also part of the
    source now which will establish the proper build dependencies when using pip.
  id: totrans-1793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy 的 C 扩展已被全部使用 Cython 编写的新实现所取代。与以前的 C 扩展一样，针对许多常见平台的预构建轮文件可在 pypi
    上获得，因此构建不是问题。对于自定义构建，`python setup.py build_ext` 与以前一样工作，只需额外的 Cython 安装即可。`pyproject.toml`
    现在也是源代码的一部分，当使用 pip 时将建立正确的构建依赖关系。
- en: See also
  id: totrans-1794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[C Extensions now ported to Cython](whatsnew_20.html#change-7256)'
  id: totrans-1795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[C 扩展现已移植到 Cython](whatsnew_20.html#change-7256)'
- en: 'References: [#7256](https://www.sqlalchemy.org/trac/ticket/7256)'
  id: totrans-1796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7256](https://www.sqlalchemy.org/trac/ticket/7256)
- en: '**[platform] [change]**'
  id: totrans-1797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[platform] [change]**'
- en: SQLAlchemy’s source build and installation now includes a `pyproject.toml` file
    for full [**PEP 517**](https://peps.python.org/pep-0517/) support.
  id: totrans-1798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy 的源代码构建和安装现在包括一个 `pyproject.toml` 文件，以完全支持 [**PEP 517**](https://peps.python.org/pep-0517/)。
- en: See also
  id: totrans-1799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Installation is now fully pep-517 enabled](whatsnew_20.html#change-7311)'
  id: totrans-1800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[安装现在完全支持 pep-517](whatsnew_20.html#change-7311)'
- en: 'References: [#7311](https://www.sqlalchemy.org/trac/ticket/7311)'
  id: totrans-1801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7311](https://www.sqlalchemy.org/trac/ticket/7311)
- en: orm
  id: totrans-1802
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature] [sql]**'
  id: totrans-1803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature] [sql]**'
- en: Added new feature to all included dialects that support RETURNING called “insertmanyvalues”.
    This is a generalization of the “fast executemany” feature first introduced for
    the psycopg2 driver in 1.4 at [ORM Batch inserts with psycopg2 now batch statements
    with RETURNING in most cases](migration_14.html#change-5263), which allows the
    ORM to batch INSERT statements into a much more efficient SQL structure while
    still being able to fetch newly generated primary key and SQL default values using
    RETURNING.
  id: totrans-1804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对所有支持 RETURNING 的包含方言的新功能，称为“insertmanyvalues”。这是“fast executemany”功能的一般化，该功能首先在
    psycopg2 驱动程序中的 1.4 版本中引入，详情请参阅 [ORM Batch inserts with psycopg2 now batch statements
    with RETURNING in most cases](migration_14.html#change-5263)，它允许 ORM 将 INSERT
    语句批处理到一个更高效的 SQL 结构中，同时仍能够使用 RETURNING 检索新生成的主键和 SQL 默认值。
- en: The feature now applies to the many dialects that support RETURNING along with
    multiple VALUES constructs for INSERT, including all PostgreSQL drivers, SQLite,
    MariaDB, MS SQL Server. Separately, the Oracle dialect also gains the same capability
    using native cx_Oracle or OracleDB features.
  id: totrans-1805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此功能现在适用于支持 RETURNING 以及多个 VALUES 构造用于 INSERT 的许多方言，包括所有 PostgreSQL 驱动程序，SQLite，MariaDB，MS
    SQL Server。另外，Oracle 方言还使用本机 cx_Oracle 或 OracleDB 功能获得相同的能力。
- en: 'References: [#6047](https://www.sqlalchemy.org/trac/ticket/6047)'
  id: totrans-1806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6047](https://www.sqlalchemy.org/trac/ticket/6047)
- en: '**[orm] [feature]**'
  id: totrans-1807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new parameter [`AttributeEvents.include_key`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents"), which will include the dictionary or list key
    for operations such as `__setitem__()` (e.g. `obj[key] = value`) and `__delitem__()`
    (e.g. `del obj[key]`), using a new keyword parameter “key” or “keys”, depending
    on event, e.g. [`AttributeEvents.append.key`](../orm/events.html#sqlalchemy.orm.AttributeEvents.append.params.key
    "sqlalchemy.orm.AttributeEvents.append"), [`AttributeEvents.bulk_replace.keys`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace.params.keys
    "sqlalchemy.orm.AttributeEvents.bulk_replace"). This allows event handlers to
    take into account the key that was passed to the operation and is of particular
    importance for dictionary operations working with [`MappedCollection`](../orm/collection_api.html#sqlalchemy.orm.MappedCollection
    "sqlalchemy.orm.MappedCollection").
  id: totrans-1808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数 [`AttributeEvents.include_key`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents")，它将包含诸如 `__setitem__()`（例如 `obj[key] = value`）和
    `__delitem__()`（例如 `del obj[key]`）等操作的字典或列表键，使用一个新的关键字参数“key”或“keys”，取决于事件，例如
    [`AttributeEvents.append.key`](../orm/events.html#sqlalchemy.orm.AttributeEvents.append.params.key
    "sqlalchemy.orm.AttributeEvents.append")，[`AttributeEvents.bulk_replace.keys`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace.params.keys
    "sqlalchemy.orm.AttributeEvents.bulk_replace")。这允许事件处理程序考虑传递给操作的键，对于与 [`MappedCollection`](../orm/collection_api.html#sqlalchemy.orm.MappedCollection
    "sqlalchemy.orm.MappedCollection") 一起工作的字典操作尤其重要。
- en: 'References: [#8375](https://www.sqlalchemy.org/trac/ticket/8375)'
  id: totrans-1809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8375](https://www.sqlalchemy.org/trac/ticket/8375)
- en: '**[orm] [feature]**'
  id: totrans-1810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new parameter [`Operators.op.python_impl`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.python_impl
    "sqlalchemy.sql.expression.Operators.op"), available from [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and also when using the `custom_op`
    constructor directly, which allows an in-Python evaluation function to be provided
    along with the custom SQL operator. This evaluation function becomes the implementation
    used when the operator object is used given plain Python objects as operands on
    both sides, and in particular is compatible with the `synchronize_session='evaluate'`
    option used with [ORM-Enabled INSERT, UPDATE, and DELETE statements](../orm/queryguide/dml.html#orm-expression-update-delete).
  id: totrans-1811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`Operators.op.python_impl`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.python_impl
    "sqlalchemy.sql.expression.Operators.op")，可从[`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")以及直接使用`custom_op`构造函数时使用，允许提供一个在Python中进行评估的函数，以及自定义SQL运算符。当操作符对象在两侧使用普通Python对象作为操作数时，此评估函数将成为使用的实现，并且特别兼容与[ORM启用的INSERT、UPDATE和DELETE语句](../orm/queryguide/dml.html#orm-expression-update-delete)一起使用的`synchronize_session='evaluate'`选项。
- en: 'References: [#3162](https://www.sqlalchemy.org/trac/ticket/3162)'
  id: totrans-1812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3162](https://www.sqlalchemy.org/trac/ticket/3162)
- en: '**[orm] [feature]**'
  id: totrans-1813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    (and by extension [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")) now has new state-tracking functionality
    that will proactively trap any unexpected state changes which occur as a particular
    transactional method proceeds. This is to allow situations where the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is being used in a thread-unsafe manner, where event
    hooks or similar may be calling unexpected methods within operations, as well
    as potentially under other concurrency situations such as asyncio or gevent to
    raise an informative message when the illegal access first occurs, rather than
    passing silently leading to secondary failures due to the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") being in an invalid state.
  id: totrans-1814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")（以及间接[`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")）现在具有新的状态跟踪功能，将主动捕获在特定事务方法进行时发生的任何意外状态更改。这是为了允许在线程不安全的方式中使用[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的情况，其中事件钩子或类似的可能在操作中调用意外方法，以及在其他并发情况下（如asyncio或gevent）在首次发生非法访问时引发信息性消息，而不是默默传递导致由于[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")处于无效状态而导致的次要故障。'
- en: See also
  id: totrans-1815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Session raises proactively when illegal concurrent or reentrant access is
    detected](whatsnew_20.html#change-7433)'
  id: totrans-1816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[当检测到非法并发或重入访问时，会主动引发会话](whatsnew_20.html#change-7433)'
- en: 'References: [#7433](https://www.sqlalchemy.org/trac/ticket/7433)'
  id: totrans-1817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7433](https://www.sqlalchemy.org/trac/ticket/7433)
- en: '**[orm] [feature]**'
  id: totrans-1818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The [`composite()`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")
    mapping construct now supports automatic resolution of values when used with a
    Python `dataclass`; the `__composite_values__()` method no longer needs to be
    implemented as this method is derived from inspection of the dataclass.
  id: totrans-1819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当与Python `dataclass`一起使用时，[`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")映射构造现在支持值的自动解析；不再需要实现`__composite_values__()`方法，因为此方法是从数据类的检查中派生的。
- en: Additionally, classes mapped by [`composite`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") now support ordering comparison operations, e.g. `<`,
    `>=`, etc.
  id: totrans-1820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，由[`composite`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")映射的类现在支持排序比较操作，例如`<`、`>=`等。
- en: See the new documentation at [Composite Column Types](../orm/composites.html#mapper-composite)
    for examples.
  id: totrans-1821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅[复合列类型](../orm/composites.html#mapper-composite)中的新文档以获取示例。
- en: '**[orm] [feature]**'
  id: totrans-1822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added very experimental feature to the [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") and [`immediateload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload
    "sqlalchemy.orm.immediateload") loader options called [`selectinload.recursion_depth`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload.params.recursion_depth
    "sqlalchemy.orm.selectinload") / [`immediateload.recursion_depth`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload.params.recursion_depth
    "sqlalchemy.orm.immediateload") , which allows a single loader option to automatically
    recurse into self-referential relationships. Is set to an integer indicating depth,
    and may also be set to -1 to indicate to continue loading until no more levels
    deep are found. Major internal changes to [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") and [`immediateload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload
    "sqlalchemy.orm.immediateload") allow this feature to work while continuing to
    make correct use of the compilation cache, as well as not using arbitrary recursion,
    so any level of depth is supported (though would emit that many queries). This
    may be useful for self-referential structures that must be loaded fully eagerly,
    such as when using asyncio.
  id: totrans-1823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")和[`immediateload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload
    "sqlalchemy.orm.immediateload")加载器选项的非常实验性功能，名为[`selectinload.recursion_depth`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload.params.recursion_depth
    "sqlalchemy.orm.selectinload") / [`immediateload.recursion_depth`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload.params.recursion_depth
    "sqlalchemy.orm.immediateload")，它允许单个加载器选项自动递归到自引用关系中。设置为指示深度的整数，并且也可以设置为-1，以指示继续加载直到找不到更多层级为止。对[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")和[`immediateload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload
    "sqlalchemy.orm.immediateload")进行了主要的内部更改，以便使此功能在继续正确使用编译缓存的同时工作，并且不使用任意递归，因此支持任何深度级别（尽管会发出相同数量的查询）。这对于必须完全急切加载的自引用结构可能会有用，例如在使用asyncio时。
- en: A warning is also emitted when loader options are connected together with arbitrary
    lengths (that is, without using the new `recursion_depth` option) when excessive
    recursion depth is detected in related object loading. This operation continues
    to use huge amounts of memory and performs extremely poorly; the cache is disabled
    when this condition is detected to protect the cache from being flooded with arbitrary
    statements.
  id: totrans-1824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到相关对象加载中的过度递归深度时，还会发出警告，该警告也会在加载器选项以任意长度连接在一起时（即，不使用新的`recursion_depth`选项）发出。此操作继续使用大量内存，并且性能极差；当检测到此条件时，缓存会被禁用，以防止缓存被任意语句淹没。
- en: 'References: [#8126](https://www.sqlalchemy.org/trac/ticket/8126)'
  id: totrans-1825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8126](https://www.sqlalchemy.org/trac/ticket/8126)
- en: '**[orm] [feature]**'
  id: totrans-1826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new parameter [`Session.autobegin`](../orm/session_api.html#sqlalchemy.orm.Session.params.autobegin
    "sqlalchemy.orm.Session"), which when set to `False` will prevent the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") from beginning a transaction implicitly. The [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") method must be called explicitly first in order
    to proceed with operations, otherwise an error is raised whenever any operation
    would otherwise have begun automatically. This option can be used to create a
    “safe” [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    that won’t implicitly start new transactions.
  id: totrans-1827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`Session.autobegin`](../orm/session_api.html#sqlalchemy.orm.Session.params.autobegin
    "sqlalchemy.orm.Session")，当设置为`False`时，将阻止[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")隐式地开始事务。必须首先显式调用[`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")方法，以便继续进行操作，否则在任何操作本应自动开始时都会引发错误。此选项可用于创建一个“安全”的[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，该会话不会隐式启动新事务。
- en: As part of this change, also added a new status variable [`origin`](../orm/session_api.html#sqlalchemy.orm.SessionTransaction.origin
    "sqlalchemy.orm.SessionTransaction.origin") which may be useful for event handling
    code to be aware of the origin of a particular [`SessionTransaction`](../orm/session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  id: totrans-1828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变化的一部分，还添加了一个新的状态变量 [`origin`](../orm/session_api.html#sqlalchemy.orm.SessionTransaction.origin
    "sqlalchemy.orm.SessionTransaction.origin")，可能对事件处理代码有用，以了解特定 [`SessionTransaction`](../orm/session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") 的来源。
- en: 'References: [#6928](https://www.sqlalchemy.org/trac/ticket/6928)'
  id: totrans-1829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6928](https://www.sqlalchemy.org/trac/ticket/6928)
- en: '**[orm] [feature]**'
  id: totrans-1830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [特性]**'
- en: Declarative mixins which use [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that contain [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") references no longer need to use [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") to achieve this mapping; the [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object is copied along with the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") itself when the column is applied to the declared
    mapping.
  id: totrans-1831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用包含 [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    引用的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象的声明性混合物不再需要使用 [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") 来实现此映射；当列应用于声明的映射时，[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 对象与 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 本身一起复制。
- en: '**[orm] [usecase]**'
  id: totrans-1832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Added [`load_only.raiseload`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only.params.raiseload
    "sqlalchemy.orm.load_only") parameter to the [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") loader option, so that the unloaded attributes may
    have “raise” behavior rather than lazy loading. Previously there wasn’t really
    a way to do this with the [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") option directly.
  id: totrans-1833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only "sqlalchemy.orm.load_only")
    加载器选项中添加了 [`load_only.raiseload`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only.params.raiseload
    "sqlalchemy.orm.load_only") 参数，以便未加载的属性可能具有“raise”行为而不是延迟加载。以前没有真正直接使用 [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") 选项来实现这一点。
- en: '**[orm] [change]**'
  id: totrans-1834
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [更改]**'
- en: 'To better accommodate explicit typing, the names of some ORM constructs that
    are typically constructed internally, but nonetheless are sometimes visible in
    messaging as well as typing, have been changed to more succinct names which also
    match the name of their constructing function (with different casing), in all
    cases maintaining aliases to the old names for the forseeable future:'
  id: totrans-1835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了更好地适应显式类型，一些通常在内部构造但有时也可见于消息传递和类型化的 ORM 构造的名称已更改为更简洁的名称，这些名称也与构造函数的名称（大小写不同）匹配，在所有情况下都保留了旧名称的别名以备将来使用：
- en: '[`RelationshipProperty`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty") becomes an alias for the primary name [`Relationship`](../orm/internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship"), which is constructed as always from the [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") function'
  id: totrans-1836
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`RelationshipProperty`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty") 成为主要名称 [`Relationship`](../orm/internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship") 的别名，始终由 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 函数构建'
- en: '[`SynonymProperty`](../orm/internals.html#sqlalchemy.orm.SynonymProperty "sqlalchemy.orm.SynonymProperty")
    becomes an alias for the primary name [`Synonym`](../orm/internals.html#sqlalchemy.orm.Synonym
    "sqlalchemy.orm.Synonym"), constructed as always from the [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") function'
  id: totrans-1837
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SynonymProperty`](../orm/internals.html#sqlalchemy.orm.SynonymProperty "sqlalchemy.orm.SynonymProperty")
    成为主要名称 [`Synonym`](../orm/internals.html#sqlalchemy.orm.Synonym "sqlalchemy.orm.Synonym")
    的别名，始终由 [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym "sqlalchemy.orm.synonym")
    函数构建'
- en: '[`CompositeProperty`](../orm/internals.html#sqlalchemy.orm.CompositeProperty
    "sqlalchemy.orm.CompositeProperty") becomes an alias for the primary name [`Composite`](../orm/internals.html#sqlalchemy.orm.Composite
    "sqlalchemy.orm.Composite"), constructed as always from the [`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") function'
  id: totrans-1838
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CompositeProperty`](../orm/internals.html#sqlalchemy.orm.CompositeProperty
    "sqlalchemy.orm.CompositeProperty")现在成为主要名称[`Composite`](../orm/internals.html#sqlalchemy.orm.Composite
    "sqlalchemy.orm.Composite")的别名，始终由[`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")函数构建。'
- en: '**[orm] [change]**'
  id: totrans-1839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [change]**'
- en: For consistency with the prominent ORM concept [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped"), the names of the dictionary-oriented collections, [`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection"), [`column_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.column_mapped_collection
    "sqlalchemy.orm.column_mapped_collection"), and [`MappedCollection`](../orm/collection_api.html#sqlalchemy.orm.MappedCollection
    "sqlalchemy.orm.MappedCollection"), are changed to [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict"), [`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict") and [`KeyFuncDict`](../orm/collection_api.html#sqlalchemy.orm.KeyFuncDict
    "sqlalchemy.orm.KeyFuncDict"), using the phrase “dict” to minimize any confusion
    against the term “mapped”. The old names will remain indefinitely with no schedule
    for removal.
  id: totrans-1840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了与突出的ORM概念[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")保持一致，基于字典的集合[`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection")、[`column_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.column_mapped_collection
    "sqlalchemy.orm.column_mapped_collection")和[`MappedCollection`](../orm/collection_api.html#sqlalchemy.orm.MappedCollection
    "sqlalchemy.orm.MappedCollection")的名称已更改为[`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")、[`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict")和[`KeyFuncDict`](../orm/collection_api.html#sqlalchemy.orm.KeyFuncDict
    "sqlalchemy.orm.KeyFuncDict")，使用“dict”短语以减少与术语“mapped”的混淆。旧名称将无限期保留，没有删除计划。
- en: 'References: [#8608](https://www.sqlalchemy.org/trac/ticket/8608)'
  id: totrans-1841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8608](https://www.sqlalchemy.org/trac/ticket/8608)
- en: '**[orm] [bug]**'
  id: totrans-1842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: All [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    objects will now consistently raise [`ResourceClosedError`](../core/exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError") if they are used after a hard close, which
    includes the “hard close” that occurs after calling “single row or value” methods
    like [`Result.first()`](../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first") and [`Result.scalar()`](../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar"). This was already the behavior of the most
    common class of result objects returned for Core statement executions, i.e. those
    based on [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult"), so this behavior is not new. However, the change
    has been extended to properly accommodate for the ORM “filtering” result objects
    returned when using 2.0 style ORM queries, which would previously behave in “soft
    closed” style of returning empty results, or wouldn’t actually “soft close” at
    all and would continue yielding from the underlying cursor.
  id: totrans-1843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象现在在硬关闭后使用时都会一致地引发[`ResourceClosedError`](../core/exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError")，包括在调用类似[`Result.first()`](../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first")和[`Result.scalar()`](../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar")这样的“单行或值”方法后发生的“硬关闭”。这已经是基于[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")的最常见的Core语句执行返回的结果对象的行为，因此这种行为并不新鲜。然而，这一变化已经扩展到正确地适应使用2.0风格ORM查询时返回的ORM“过滤”结果对象，以前这些对象会以“软关闭”方式返回空结果，或者根本不会真正“软关闭”并会继续从底层游标中产生结果。
- en: As part of this change, also added [`Result.close()`](../core/connections.html#sqlalchemy.engine.Result.close
    "sqlalchemy.engine.Result.close") to the base [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") class and implemented it for the filtered result implementations
    that are used by the ORM, so that it is possible to call the [`CursorResult.close()`](../core/connections.html#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close") method on the underlying [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") when the `yield_per` execution option is in
    use to close a server side cursor before remaining ORM results have been fetched.
    This was again already available for Core result sets but the change makes it
    available for 2.0 style ORM results as well.
  id: totrans-1844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变更的一部分，还将[`Result.close()`](../core/connections.html#sqlalchemy.engine.Result.close
    "sqlalchemy.engine.Result.close")添加到基础[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")类中，并为ORM使用的过滤结果实现了它，这样就可以在使用`yield_per`执行选项时调用底层[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")上的[`CursorResult.close()`](../core/connections.html#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close")方法，在获取剩余的ORM结果之前关闭服务器端游标。这对于核心结果集已经可用，但此变更也使其适用于2.0风格的ORM结果。
- en: 'This change is also **backported** to: 1.4.27'
  id: totrans-1845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.27
- en: 'References: [#7274](https://www.sqlalchemy.org/trac/ticket/7274)'
  id: totrans-1846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7274](https://www.sqlalchemy.org/trac/ticket/7274)
- en: '**[orm] [bug]**'
  id: totrans-1847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`registry.map_declaratively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_declaratively
    "sqlalchemy.orm.registry.map_declaratively") method would return an internal “mapper
    config” object and not the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object as stated in the API documentation.
  id: totrans-1848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`registry.map_declaratively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_declaratively
    "sqlalchemy.orm.registry.map_declaratively")方法返回内部“映射器配置”对象而不是API文档中所述的[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象的问题。
- en: '**[orm] [bug]**'
  id: totrans-1849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed performance regression which appeared at least in version 1.3 if not earlier
    (sometime after 1.0) where the loading of deferred columns, those explicitly mapped
    with [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer "sqlalchemy.orm.defer")
    as opposed to non-deferred columns that were expired, from a joined inheritance
    subclass would not use the “optimized” query which only queried the immediate
    table that contains the unloaded columns, instead running a full ORM query which
    would emit a JOIN for all base tables, which is not necessary when only loading
    columns from the subclass.
  id: totrans-1850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了至少在1.3版本中出现的性能回归，如果不是更早（在1.0之后的某个时候），那么从连接的继承子类加载延迟列（那些明确映射为[`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer")的列，而不是已过期的未延迟列），将不会使用“优化”查询，该查询仅查询包含未加载列的直接表，而是运行完整的ORM查询，该查询会为所有基本表发出JOIN，当仅从子类加载列时，这是不必要的。
- en: 'References: [#7463](https://www.sqlalchemy.org/trac/ticket/7463)'
  id: totrans-1851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7463](https://www.sqlalchemy.org/trac/ticket/7463)
- en: '**[orm] [bug]**'
  id: totrans-1852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The internals for the [`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load") object and related loader strategy patterns have been mostly
    rewritten, to take advantage of the fact that only attribute-bound paths, not
    strings, are now supported. The rewrite hopes to make it more straightforward
    to address new use cases and subtle issues within the loader strategy system going
    forward.
  id: totrans-1853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load "sqlalchemy.orm.Load")对象及相关加载策略模式的内部大部分已经重写，以利用现在仅支持属性绑定路径而不是字符串的事实。重写希望能更直接地解决加载策略系统中的新用例和微妙问题。'
- en: 'References: [#6986](https://www.sqlalchemy.org/trac/ticket/6986)'
  id: totrans-1854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6986](https://www.sqlalchemy.org/trac/ticket/6986)
- en: '**[orm] [bug]**'
  id: totrans-1855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Made an improvement to the “deferred” / “load_only” set of strategy options
    where if a certain object is loaded from two different logical paths within one
    query, attributes that have been configured by at least one of the options to
    be populated will be populated in all cases, even if other load paths for that
    same object did not set this option. previously, it was based on randomness as
    to which “path” addressed the object first.
  id: totrans-1856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“延迟加载”/“仅加载”一组策略选项进行了改进，其中如果一个对象从一个查询中的两个不同逻辑路径加载，那么至少有一个选项配置为填充的属性将在所有情况下被填充，即使该对象的其他加载路径没有设置此选项。以前，基于随机性来确定哪个“路径”首先处理对象。
- en: 'References: [#8166](https://www.sqlalchemy.org/trac/ticket/8166)'
  id: totrans-1857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8166](https://www.sqlalchemy.org/trac/ticket/8166)
- en: '**[orm] [bug]**'
  id: totrans-1858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in ORM enabled UPDATE when the statement is created against a joined-inheritance
    subclass, updating only local table columns, where the “fetch” synchronization
    strategy would not render the correct RETURNING clause for databases that use
    RETURNING for fetch synchronization. Also adjusts the strategy used for RETURNING
    in UPDATE FROM and DELETE FROM statements.
  id: totrans-1859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在针对联合继承子类创建语句时启用 ORM 的 UPDATE 时出现的问题，仅更新本地表列，其中“fetch”同步策略不会为使用 RETURNING
    进行获取同步的数据库呈现正确的 RETURNING 子句。还调整了在 UPDATE FROM 和 DELETE FROM 语句中使用的 RETURNING
    策略。
- en: 'References: [#8344](https://www.sqlalchemy.org/trac/ticket/8344)'
  id: totrans-1860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8344](https://www.sqlalchemy.org/trac/ticket/8344)
- en: '**[orm] [bug] [asyncio]**'
  id: totrans-1861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [asyncio]**'
- en: Removed the unused `**kw` arguments from [`begin`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin") and [`begin_nested`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.begin_nested
    "sqlalchemy.ext.asyncio.AsyncSession.begin_nested"). These kw aren’t used and
    appear to have been added to the API in error.
  id: totrans-1862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从[`begin`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin")和[`begin_nested`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.begin_nested
    "sqlalchemy.ext.asyncio.AsyncSession.begin_nested")中删除了未使用的`**kw`参数。这些 kw 没有被使用，似乎是错误地添加到
    API 中的。
- en: 'References: [#7703](https://www.sqlalchemy.org/trac/ticket/7703)'
  id: totrans-1863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7703](https://www.sqlalchemy.org/trac/ticket/7703)
- en: '**[orm] [bug]**'
  id: totrans-1864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Changed the attribute access method used by [`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection") and [`column_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.column_mapped_collection
    "sqlalchemy.orm.column_mapped_collection") (now called [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict") and [`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict")) , used when populating the dictionary, to
    assert that the data value on the object to be used as the dictionary key is actually
    present, and is not instead using “None” due to the attribute never being actually
    assigned. This is used to prevent a mis-population of None for a key when assigning
    via a backref where the “key” attribute on the object is not yet assigned.
  id: totrans-1865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了[`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection")和[`column_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.column_mapped_collection
    "sqlalchemy.orm.column_mapped_collection")（现在称为[`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")和[`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict"))在填充字典时使用的属性访问方法，断言对象上用作字典键的数据值实际上存在，并且不是因为属性从未被分配而使用“None”。这用于防止在通过反向引用进行分配时错误地为键分配
    None，其中对象上的“键”属性尚未被分配。
- en: As the failure mode here is a transitory condition that is not typically persisted
    to the database, and is easy to produce via the constructor of the class based
    on the order in which parameters are assigned, it is very possible that many applications
    include this behavior already which is silently passed over. To accommodate for
    applications where this error is now raised, a new parameter [`attribute_keyed_dict.ignore_unpopulated_attribute`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict.params.ignore_unpopulated_attribute
    "sqlalchemy.orm.attribute_keyed_dict") is also added to both [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict") and [`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict") that instead causes the erroneous backref
    assignment to be skipped.
  id: totrans-1866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于此处的失败模式是一种通常不会持续到数据库的瞬态条件，并且很容易通过类的构造函数根据分配参数的顺序产生，因此很有可能许多应用程序已经包含了这种行为，而这种行为被悄悄地忽略了。为了适应现在引发此错误的应用程序，还添加了一个新参数
    [`attribute_keyed_dict.ignore_unpopulated_attribute`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict.params.ignore_unpopulated_attribute
    "sqlalchemy.orm.attribute_keyed_dict") 到 [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict") 和 [`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict")，这个参数将导致错误的反向引用赋值被跳过。
- en: 'References: [#8372](https://www.sqlalchemy.org/trac/ticket/8372)'
  id: totrans-1867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8372](https://www.sqlalchemy.org/trac/ticket/8372)
- en: '**[orm] [bug]**'
  id: totrans-1868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added new parameter [`AbstractConcreteBase.strict_attrs`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase.params.strict_attrs
    "sqlalchemy.ext.declarative.AbstractConcreteBase") to the [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") declarative mixin class. The
    effect of this parameter is that the scope of attributes on subclasses is correctly
    limited to the subclass in which each attribute is declared, rather than the previous
    behavior where all attributes of the entire hierarchy are applied to the base
    “abstract” class. This produces a cleaner, more correct mapping where subclasses
    no longer have non-useful attributes on them which are only relevant to sibling
    classes. The default for this parameter is False, which leaves the previous behavior
    unchanged; this is to support existing code that makes explicit use of these attributes
    in queries. To migrate to the newer approach, apply explicit attributes to the
    abstract base class as needed.
  id: totrans-1869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数 [`AbstractConcreteBase.strict_attrs`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase.params.strict_attrs
    "sqlalchemy.ext.declarative.AbstractConcreteBase") 到 [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") 声明混合类。这个参数的效果是，子类上的属性范围正确地限制在声明每个属性的子类中，而不是之前的行为，其中整个层次结构的所有属性都应用到基本的“抽象”类上。这样会产生更清晰、更正确的映射，子类不再具有仅对同级类有用的属性。此参数的默认值为
    False，这保留了先前的行为不变；这是为了支持在查询中明确使用这些属性的现有代码。要迁移到更新的方法，根据需要将显式属性应用到抽象基类中。
- en: 'References: [#8403](https://www.sqlalchemy.org/trac/ticket/8403)'
  id: totrans-1870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8403](https://www.sqlalchemy.org/trac/ticket/8403)
- en: '**[orm] [bug]**'
  id: totrans-1871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The behavior of [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") regarding primary key and “polymorphic discriminator”
    columns is revised such that these columns are no longer deferrable, either explicitly
    or when using a wildcard such as `defer('*')`. Previously, a wildcard deferral
    would not load PK/polymorphic columns which led to errors in all cases, as the
    ORM relies upon these columns to produce object identities. The behavior of explicit
    deferral of primary key columns is unchanged as these deferrals already were implicitly
    ignored.
  id: totrans-1872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer "sqlalchemy.orm.defer")
    在处理主键和“多态鉴别器”列时的行为已经修订，以使这些列不再是可延迟的，无论是明确指定还是使用诸如 `defer(''*'')` 这样的通配符。先前，通配符延迟不会加载主键/多态列，这导致在所有情况下都出现错误，因为
    ORM 依赖于这些列来生成对象标识。对主键列的显式延迟行为不变，因为这些延迟已经被隐式忽略。'
- en: 'References: [#7495](https://www.sqlalchemy.org/trac/ticket/7495)'
  id: totrans-1873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7495](https://www.sqlalchemy.org/trac/ticket/7495)
- en: '**[orm] [bug]**'
  id: totrans-1874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in the behavior of the [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") parameter such that client-side SQL default or onupdate
    expressions in the table definition alone will trigger a fetch operation using
    RETURNING or SELECT when the ORM emits an INSERT or UPDATE for the row. Previously,
    only server side defaults established as part of table DDL and/or server-side
    onupdate expressions would trigger this fetch, even though client-side SQL expressions
    would be included when the fetch was rendered.
  id: totrans-1875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") 参数行为中的错误，使得仅在表定义中存在客户端 SQL 默认值或 onupdate 表达式时，ORM 为行执行
    INSERT 或 UPDATE 时触发 RETURNING 或 SELECT 的操作。之前，仅服务器端默认值作为表 DDL 的一部分或服务器端 onupdate
    表达式会触发此次提取，尽管客户端 SQL 表达式在渲染提取时也会被包含在内。
- en: 'References: [#7438](https://www.sqlalchemy.org/trac/ticket/7438)'
  id: totrans-1876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7438](https://www.sqlalchemy.org/trac/ticket/7438)
- en: engine
  id: totrans-1877
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-1878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: The [`DialectEvents.handle_error()`](../core/events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event is now moved to the [`DialectEvents`](../core/events.html#sqlalchemy.events.DialectEvents
    "sqlalchemy.events.DialectEvents") suite from the `EngineEvents` suite, and now
    participates in the connection pool “pre ping” event for those dialects that make
    use of disconnect codes in order to detect if the database is live. This allows
    end-user code to alter the state of “pre ping”. Note that this does not include
    dialects which contain a native “ping” method such as that of psycopg2 or most
    MySQL dialects.
  id: totrans-1879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DialectEvents.handle_error()`](../core/events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 事件现已从 `EngineEvents` 套件移至 [`DialectEvents`](../core/events.html#sqlalchemy.events.DialectEvents
    "sqlalchemy.events.DialectEvents") 套件，并且现在参与连接池的“预 ping”事件，对于那些使用断开代码来检测数据库是否存活的方言。这使得最终用户代码能够更改“预
    ping”的状态。请注意，这不包括包含本地“ping”方法的方言，如 psycopg2 或大多数 MySQL 方言。'
- en: 'References: [#5648](https://www.sqlalchemy.org/trac/ticket/5648)'
  id: totrans-1880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5648](https://www.sqlalchemy.org/trac/ticket/5648)
- en: '**[engine] [feature]**'
  id: totrans-1881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: The [`ConnectionEvents.set_connection_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options") and [`ConnectionEvents.set_engine_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options") event hooks
    now allow the given options dictionary to be modified in-place, where the new
    contents will be received as the ultimate execution options to be acted upon.
    Previously, in-place modifications to the dictionary were not supported.
  id: totrans-1882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.set_connection_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options") 和 [`ConnectionEvents.set_engine_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options") 事件钩子现在允许对给定的选项字典进行就地修改，新内容将作为最终执行选项接收。以前，不支持对字典进行就地修改。'
- en: '**[engine] [usecase]**'
  id: totrans-1883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [用例]**'
- en: Generalized the [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter to the base dialect so that it is no longer
    dependent on individual dialects to be present. This parameter sets up the “isolation
    level” setting to occur for all new database connections as soon as they are created
    by the connection pool, where the value then stays set without being reset on
    every checkin.
  id: totrans-1884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") 参数泛化到基本方言，因此不再依赖于单独的方言。该参数为所有新数据库连接的“隔离级别”设置提供了设置，一旦连接池创建它们，该值就会保持设置而不是在每次
    checkin 时重置。
- en: The [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter is essentially equivalent in functionality
    to using the [`Engine.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Engine.execution_options.params.isolation_level
    "sqlalchemy.engine.Engine.execution_options") parameter via [`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") for an engine-wide setting. The
    difference is in that the former setting assigns the isolation level just once
    when a connection is created, the latter sets and resets the given level on each
    connection checkout.
  id: totrans-1885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") 参数在功能上与通过 [`Engine.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Engine.execution_options.params.isolation_level
    "sqlalchemy.engine.Engine.execution_options") 参数使用 [`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") 设置相当。区别在于前者设置隔离级别只会在创建连接时执行一次，后者在每次连接检出时设置和重置给定级别。'
- en: 'References: [#6342](https://www.sqlalchemy.org/trac/ticket/6342)'
  id: totrans-1886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6342](https://www.sqlalchemy.org/trac/ticket/6342)
- en: '**[engine] [change]**'
  id: totrans-1887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [change]**'
- en: 'Some small API changes regarding engines and dialects:'
  id: totrans-1888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于引擎和方言的一些小的API更改：
- en: 'The [`Dialect.set_isolation_level()`](../core/internals.html#sqlalchemy.engine.Dialect.set_isolation_level
    "sqlalchemy.engine.Dialect.set_isolation_level"), [`Dialect.get_isolation_level()`](../core/internals.html#sqlalchemy.engine.Dialect.get_isolation_level
    "sqlalchemy.engine.Dialect.get_isolation_level"), :meth: dialect methods will
    always be passed the raw DBAPI connection'
  id: totrans-1889
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Dialect.set_isolation_level()`](../core/internals.html#sqlalchemy.engine.Dialect.set_isolation_level
    "sqlalchemy.engine.Dialect.set_isolation_level")、[`Dialect.get_isolation_level()`](../core/internals.html#sqlalchemy.engine.Dialect.get_isolation_level
    "sqlalchemy.engine.Dialect.get_isolation_level")、:meth: 方言方法将始终传递原始的DBAPI连接'
- en: The [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    classes no longer share a base `Connectable` superclass, which has been removed.
  id: totrans-1890
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    和 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    类不再共享基础的 `Connectable` 超类，该超类已被移除。'
- en: Added a new interface class [`PoolProxiedConnection`](../core/pooling.html#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") - this is the public facing interface
    for the familiar [`_ConnectionFairy`](../core/pooling.html#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") class which is nonetheless a private class.
  id: totrans-1891
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个新的接口类[`PoolProxiedConnection`](../core/pooling.html#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") - 这是熟悉的[`_ConnectionFairy`](../core/pooling.html#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") 类的公共接口，尽管它是一个私有类。
- en: 'References: [#7122](https://www.sqlalchemy.org/trac/ticket/7122)'
  id: totrans-1892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7122](https://www.sqlalchemy.org/trac/ticket/7122)
- en: '**[engine] [bug] [regression]**'
  id: totrans-1893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [regression]**'
- en: Fixed regression where the [`CursorResult.fetchmany()`](../core/connections.html#sqlalchemy.engine.CursorResult.fetchmany
    "sqlalchemy.engine.CursorResult.fetchmany") method would fail to autoclose a server-side
    cursor (i.e. when `stream_results` or `yield_per` is in use, either Core or ORM
    oriented results) when the results were fully exhausted.
  id: totrans-1894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当结果完全耗尽时，[`CursorResult.fetchmany()`](../core/connections.html#sqlalchemy.engine.CursorResult.fetchmany
    "sqlalchemy.engine.CursorResult.fetchmany") 方法未能自动关闭服务器端游标（即在使用 `stream_results`
    或 `yield_per` 时，无论是核心还是ORM导向的结果）的回归问题。
- en: 'This change is also **backported** to: 1.4.27'
  id: totrans-1895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**至：1.4.27
- en: 'References: [#7274](https://www.sqlalchemy.org/trac/ticket/7274)'
  id: totrans-1896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7274](https://www.sqlalchemy.org/trac/ticket/7274)
- en: '**[engine] [bug]**'
  id: totrans-1897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue in future [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") where calling upon [`Engine.begin()`](../core/connections.html#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin") and entering the context manager would not close
    the connection if the actual BEGIN operation failed for some reason, such as an
    event handler raising an exception; this use case failed to be tested for the
    future version of the engine. Note that the “future” context managers which handle
    `begin()` blocks in Core and ORM don’t actually run the “BEGIN” operation until
    the context managers are actually entered. This is different from the legacy version
    which runs the “BEGIN” operation up front.
  id: totrans-1898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了未来 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    中的问题，当调用 [`Engine.begin()`](../core/connections.html#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin") 并进入上下文管理器时，如果实际的 BEGIN 操作由于某种原因失败，例如事件处理程序引发异常，则连接不会关闭；未来版本的引擎未测试此用例。请注意，“未来”上下文管理器在实际输入上下文管理器之前不会运行
    “BEGIN” 操作。这与立即运行 “BEGIN” 操作的传统版本不同。
- en: 'This change is also **backported** to: 1.4.27'
  id: totrans-1899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**至：1.4.27
- en: 'References: [#7272](https://www.sqlalchemy.org/trac/ticket/7272)'
  id: totrans-1900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7272](https://www.sqlalchemy.org/trac/ticket/7272)
- en: '**[engine] [bug]**'
  id: totrans-1901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    now ignores `max_overflow` when `pool_size=0`, properly making the pool unlimited
    in all cases.
  id: totrans-1902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 `pool_size=0` 时，[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") 现在会忽略 `max_overflow`，从而正确地使池在所有情况下都是无限的。
- en: 'References: [#8523](https://www.sqlalchemy.org/trac/ticket/8523)'
  id: totrans-1903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8523](https://www.sqlalchemy.org/trac/ticket/8523)
- en: '**[engine] [bug]**'
  id: totrans-1904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: For improved security, the [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object will now use password obfuscation by default when
    `str(url)` is called. To stringify a URL with cleartext password, the [`URL.render_as_string()`](../core/engines.html#sqlalchemy.engine.URL.render_as_string
    "sqlalchemy.engine.URL.render_as_string") may be used, passing the [`URL.render_as_string.hide_password`](../core/engines.html#sqlalchemy.engine.URL.render_as_string.params.hide_password
    "sqlalchemy.engine.URL.render_as_string") parameter as `False`. Thanks to our
    contributors for this pull request.
  id: totrans-1905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了提高安全性，当调用 `str(url)` 时，[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") 对象现在默认使用密码混淆。要将 URL 字符串化为明文密码，可以使用 [`URL.render_as_string()`](../core/engines.html#sqlalchemy.engine.URL.render_as_string
    "sqlalchemy.engine.URL.render_as_string")，将 [`URL.render_as_string.hide_password`](../core/engines.html#sqlalchemy.engine.URL.render_as_string.params.hide_password
    "sqlalchemy.engine.URL.render_as_string") 参数传递为 `False`。感谢我们的贡献者提供了此拉取请求。
- en: See also
  id: totrans-1906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[str(engine.url) will obfuscate the password by default](whatsnew_20.html#change-8567)'
  id: totrans-1907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[str(engine.url) 现在默认混淆密码](whatsnew_20.html#change-8567)'
- en: 'References: [#8567](https://www.sqlalchemy.org/trac/ticket/8567)'
  id: totrans-1908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8567](https://www.sqlalchemy.org/trac/ticket/8567)
- en: '**[engine] [bug]**'
  id: totrans-1909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The `Inspector.has_table()` method will now consistently check for views of
    the given name as well as tables. Previously this behavior was dialect dependent,
    with PostgreSQL, MySQL/MariaDB and SQLite supporting it, and Oracle and SQL Server
    not supporting it. Third party dialects should also seek to ensure their `Inspector.has_table()`
    method searches for views as well as tables for the given name.
  id: totrans-1910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Inspector.has_table()` 方法现在将一致地检查给定名称的视图和表格。先前，此行为取决于方言，其中 PostgreSQL、MySQL/MariaDB
    和 SQLite 支持它，而 Oracle 和 SQL Server 不支持它。第三方方言也应确保它们的 `Inspector.has_table()` 方法搜索给定名称的视图和表格。'
- en: 'References: [#7161](https://www.sqlalchemy.org/trac/ticket/7161)'
  id: totrans-1911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7161](https://www.sqlalchemy.org/trac/ticket/7161)
- en: '**[engine] [bug]**'
  id: totrans-1912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue in [`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") method where calling upon [`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") with a single index could in some cases, particularly
    ORM result object cases, cause the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") to yield scalar objects rather than [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, as though the [`Result.scalars()`](../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") method had been called. In SQLAlchemy 1.4,
    this scenario emits a warning that the behavior will change in SQLAlchemy 2.0.
  id: totrans-1913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns")方法中修复了一个问题，在某些情况下，特别是ORM结果对象的情况下，调用带有单个索引的[`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns")可能导致[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")生成标量对象而不是[`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象，就像调用了[`Result.scalars()`](../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars")方法一样。在SQLAlchemy 1.4中，此场景会发出警告，指出行为将在SQLAlchemy
    2.0中更改。
- en: 'References: [#7953](https://www.sqlalchemy.org/trac/ticket/7953)'
  id: totrans-1914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#7953](https://www.sqlalchemy.org/trac/ticket/7953)
- en: '**[engine] [bug]**'
  id: totrans-1915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [错误]**'
- en: Passing a [`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator") object such as a [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") to the [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method is deprecated, as this method is
    typed as returning a [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") object, and not a plain scalar value. The [`Connection.scalar()`](../core/connections.html#sqlalchemy.engine.Connection.scalar
    "sqlalchemy.engine.Connection.scalar") method should be used instead, which has
    been reworked with new internal codepaths to suit invoking a SELECT for default
    generation objects without going through the [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method.
  id: totrans-1916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator")对象（例如[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")）传递给[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法已弃用，因为此方法被类型化为返回一个[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")对象，而不是纯标量值。应改用[`Connection.scalar()`](../core/connections.html#sqlalchemy.engine.Connection.scalar
    "sqlalchemy.engine.Connection.scalar")方法，该方法已经重写了新的内部代码路径以适用于调用SELECT以获取默认生成对象而不经过[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法。
- en: '**[engine] [removed]**'
  id: totrans-1917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [已移除]**'
- en: Removed the previously deprecated `case_sensitive` parameter from [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"), which would impact only the lookup of string column
    names in Core-only result set rows; it had no effect on the behavior of the ORM.
    The effective behavior of what `case_sensitive` refers towards remains at its
    default value of `True`, meaning that string names looked up in `row._mapping`
    will match case-sensitively, just like any other Python mapping.
  id: totrans-1918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从[`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")中移除了之前弃用的`case_sensitive`参数，这只会影响Core-only结果集行中字符串列名称的查找；它不会影响ORM的行为。`case_sensitive`指向的有效行为保持其默认值`True`，意味着在`row._mapping`中查找的字符串名称将与大小写敏感地匹配，就像任何其他Python映射一样。
- en: Note that the `case_sensitive` parameter was not in any way related to the general
    subject of case sensitivity control, quoting, and “name normalization” (i.e. converting
    for databases that consider all uppercase words to be case insensitive) for DDL
    identifier names, which remains a normal core feature of SQLAlchemy.
  id: totrans-1919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，`case_sensitive`参数与控制大小写敏感性、引用和“名称规范化”（即转换为将所有大写字母视为大小写不敏感的数据库）DDL标识符名称的一般主题没有任何关系，这仍然是SQLAlchemy的一个常规核心功能。
- en: '**[engine] [removed]**'
  id: totrans-1920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [已移除]**'
- en: Removed legacy and deprecated package `sqlalchemy.databases`. Please use `sqlalchemy.dialects`
    instead.
  id: totrans-1921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了已弃用的旧版包`sqlalchemy.databases`。请改用`sqlalchemy.dialects`。
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-1922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
- en: '**[engine] [deprecations]**'
  id: totrans-1923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [已弃用]**'
- en: The [`create_engine.implicit_returning`](../core/engines.html#sqlalchemy.create_engine.params.implicit_returning
    "sqlalchemy.create_engine") parameter is deprecated on the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function only; the parameter remains available on
    the [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object. This parameter was originally intended to enable the “implicit returning”
    feature of SQLAlchemy when it was first developed and was not enabled by default.
    Under modern use, there’s no reason this parameter should be disabled, and it
    has been observed to cause confusion as it degrades performance and makes it more
    difficult for the ORM to retrieve recently inserted server defaults. The parameter
    remains available on [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    to specifically suit database-level edge cases which make RETURNING infeasible,
    the sole example currently being SQL Server’s limitation that INSERT RETURNING
    may not be used on a table that has INSERT triggers on it.
  id: totrans-1924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.implicit_returning`](../core/engines.html#sqlalchemy.create_engine.params.implicit_returning
    "sqlalchemy.create_engine") 参数已经在[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")函数中弃用；该参数仅在[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象上保留。该参数最初旨在在SQLAlchemy首次开发时启用“implicit returning”功能，但默认情况下未启用。在现代用法下，没有理由禁用该参数，并且观察到它会引起混乱，因为它会降低性能，使ORM更难以检索最近插入的服务器默认值。该参数仅在[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")上保留，以特别适应使RETURNING不可行的数据库级边缘情况，目前唯一的示例是SQL Server的限制，即不得在具有INSERT触发器的表上使用INSERT
    RETURNING。'
- en: 'References: [#6962](https://www.sqlalchemy.org/trac/ticket/6962)'
  id: totrans-1925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6962](https://www.sqlalchemy.org/trac/ticket/6962)
- en: sql
  id: totrans-1926
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-1927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added long-requested case-insensitive string operators [`ColumnOperators.icontains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains"), [`ColumnOperators.istartswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"), [`ColumnOperators.iendswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"), which produce case-insensitive
    LIKE compositions (using ILIKE on PostgreSQL, and the LOWER() function on all
    other backends) to complement the existing LIKE composition operators [`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains"), [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith"), etc. Huge thanks to Matias
    Martinez Rebori for their meticulous and complete efforts in implementing these
    new methods.
  id: totrans-1928
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 添加了长期要求的不区分大小写的字符串操作符[`ColumnOperators.icontains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains")，[`ColumnOperators.istartswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")，[`ColumnOperators.iendswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")。这些操作符生成不区分大小写的LIKE组合（在PostgreSQL上使用ILIKE，在所有其他后端上使用LOWER()函数），以补充现有的LIKE组合操作符[`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains")，[`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")等。对于实现这些新方法的Matias Martinez
    Rebori的细致和完整的工作表示巨大的感谢。
- en: 'References: [#3482](https://www.sqlalchemy.org/trac/ticket/3482)'
  id: totrans-1929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3482](https://www.sqlalchemy.org/trac/ticket/3482)
- en: '**[sql] [feature]**'
  id: totrans-1930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new syntax to the [`FromClause.c`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection on all [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects allowing tuples of keys to be
    passed to `__getitem__()`, along with support for the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct to handle the resulting tuple-like
    collection directly, allowing the syntax `select(table.c['a', 'b', 'c'])` to be
    possible. The sub-collection returned is itself a [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") which is also directly consumable
    by [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    and similar now.
  id: totrans-1931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在所有[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象的[`FromClause.c`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c")集合中添加了新的语法，允许传递键的元组给`__getitem__()`，以及支持[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造处理直接处理结果类似元组的集合，允许`select(table.c['a', 'b',
    'c'])`语法成为可能。返回的子集合本身也是一个[`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，现在也可以直接被[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")和类似方法消耗。
- en: See also
  id: totrans-1932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Setting the COLUMNS and FROM clause](../tutorial/data_select.html#tutorial-selecting-columns)'
  id: totrans-1933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置COLUMNS和FROM子句](../tutorial/data_select.html#tutorial-selecting-columns)'
- en: 'References: [#8285](https://www.sqlalchemy.org/trac/ticket/8285)'
  id: totrans-1934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8285](https://www.sqlalchemy.org/trac/ticket/8285)
- en: '**[sql] [feature]**'
  id: totrans-1935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added new backend-agnostic [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype generalized from the PostgreSQL dialects to
    now be a core type, as well as migrated [`UUID`](../core/type_basics.html#sqlalchemy.types.UUID
    "sqlalchemy.types.UUID") from the PostgreSQL dialect. The SQL Server [`UNIQUEIDENTIFIER`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") datatype also becomes a UUID-handling
    datatype. Thanks to Trevor Gross for the help on this.
  id: totrans-1936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的与后端无关的[`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")数据类型，从PostgreSQL方言泛化到核心类型，以及将[`UUID`](../core/type_basics.html#sqlalchemy.types.UUID
    "sqlalchemy.types.UUID")从PostgreSQL方言迁移到核心类型。SQL Server的[`UNIQUEIDENTIFIER`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER")数据类型也变成了一个UUID处理数据类型。感谢Trevor Gross的帮助。
- en: 'References: [#7212](https://www.sqlalchemy.org/trac/ticket/7212)'
  id: totrans-1937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7212](https://www.sqlalchemy.org/trac/ticket/7212)
- en: '**[sql] [feature]**'
  id: totrans-1938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added [`Double`](../core/type_basics.html#sqlalchemy.types.Double "sqlalchemy.types.Double"),
    [`DOUBLE`](../core/type_basics.html#sqlalchemy.types.DOUBLE "sqlalchemy.types.DOUBLE"),
    [`DOUBLE_PRECISION`](../core/type_basics.html#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION") datatypes to the base `sqlalchemy.` module
    namespace, for explicit use of double/double precision as well as generic “double”
    datatypes. Use [`Double`](../core/type_basics.html#sqlalchemy.types.Double "sqlalchemy.types.Double")
    for generic support that will resolve to DOUBLE/DOUBLE PRECISION/FLOAT as needed
    for different backends.
  id: totrans-1939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向`sqlalchemy.`模块命名空间添加了[`Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double")、[`DOUBLE`](../core/type_basics.html#sqlalchemy.types.DOUBLE
    "sqlalchemy.types.DOUBLE")、[`DOUBLE_PRECISION`](../core/type_basics.html#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION")数据类型，用于显式使用double/double precision以及通用的“double”数据类型。使用[`Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double")来提供通用支持，根据不同后端需要解析为DOUBLE/DOUBLE PRECISION/FLOAT。
- en: 'References: [#5465](https://www.sqlalchemy.org/trac/ticket/5465)'
  id: totrans-1940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5465](https://www.sqlalchemy.org/trac/ticket/5465)
- en: '**[sql] [usecase]**'
  id: totrans-1941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Altered the compilation mechanics of the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct such that the “autoincrement primary
    key” column value will be fetched via `cursor.lastrowid` or RETURNING even if
    present in the parameter set or within the [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method as a plain bound value, for
    single-row INSERT statements on specific backends that are known to generate autoincrementing
    values even when explicit NULL is passed. This restores a behavior that was in
    the 1.3 series for both the use case of separate parameter set as well as [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values"). In 1.4, the parameter set behavior
    unintentionally changed to no longer do this, but the [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method would still fetch autoincrement
    values up until 1.4.21 where [#6770](https://www.sqlalchemy.org/trac/ticket/6770)
    changed the behavior yet again again unintentionally as this use case was never
    covered.
  id: totrans-1942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    构造的编译机制，使得“自动递增主键”列值将通过 `cursor.lastrowid` 或 RETURNING 获取，即使它存在于参数集中或在 [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 方法中作为普通绑定值，用于特定后端上已知在明确传递 NULL 时仍生成自动递增值的单行
    INSERT 语句。这恢复了 1.3 系列中的行为，用于分离的参数集以及 [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 方法。在 1.4 中，参数集行为无意中更改为不再执行此操作，但[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 方法仍会获取自动递增值，直到 1.4.21，其中 [#6770](https://www.sqlalchemy.org/trac/ticket/6770)
    再次无意中更改了行为，因为此用例从未得到覆盖。
- en: The behavior is now defined as “working” to suit the case where databases such
    as SQLite, MySQL and MariaDB will ignore an explicit NULL primary key value and
    nonetheless invoke an autoincrement generator.
  id: totrans-1943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在已定义行为为“工作”，以适应数据库（如 SQLite、MySQL 和 MariaDB 等）忽略显式 NULL 主键值并仍调用自动递增生成器的情况。
- en: 'References: [#7998](https://www.sqlalchemy.org/trac/ticket/7998)'
  id: totrans-1944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '引用: [#7998](https://www.sqlalchemy.org/trac/ticket/7998)'
- en: '**[sql] [usecase]**'
  id: totrans-1945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Added modified ISO-8601 rendering (i.e. ISO-8601 with the T converted to a space)
    when using `literal_binds` with the SQL compilers provided by the PostgreSQL,
    MySQL, MariaDB, MSSQL, Oracle dialects. For Oracle, the ISO format is wrapped
    inside of an appropriate TO_DATE() function call. Previously this rendering was
    not implemented for dialect-specific compilation.
  id: totrans-1946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 PostgreSQL、MySQL、MariaDB、MSSQL、Oracle 方言提供的 SQL 编译器与 `literal_binds` 一起使用时，添加了修改后的
    ISO-8601 渲染（即将 T 转换为空格的 ISO-8601），对于 Oracle，ISO 格式被包装在适当的 TO_DATE() 函数调用内。先前，此渲染未针对方言特定编译实现。
- en: See also
  id: totrans-1947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[DATE, TIME, DATETIME datatypes now support literal rendering on all backends](whatsnew_20.html#change-5052)'
  id: totrans-1948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[DATE、TIME、DATETIME 数据类型现在在所有后端上支持文本渲染](whatsnew_20.html#change-5052)'
- en: 'References: [#5052](https://www.sqlalchemy.org/trac/ticket/5052)'
  id: totrans-1949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '引用: [#5052](https://www.sqlalchemy.org/trac/ticket/5052)'
- en: '**[sql] [usecase]**'
  id: totrans-1950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Added new parameter [`HasCTE.add_cte.nest_here`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") to [`HasCTE.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") which will “nest” a given [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") at the level of the parent statement. This parameter
    is equivalent to using the [`HasCTE.cte.nesting`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte") parameter, but may be more intuitive in
    some scenarios as it allows the nesting attribute to be set simultaneously along
    with the explicit level of the CTE.
  id: totrans-1951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的参数 [`HasCTE.add_cte.nest_here`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") 到 [`HasCTE.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte")，该参数将在父语句级别“嵌套”给定的 [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")。该参数等同于使用 [`HasCTE.cte.nesting`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte") 参数，但在某些情况下可能更直观，因为它允许同时设置嵌套属性和 CTE 的显式级别。
- en: The [`HasCTE.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method also accepts multiple CTE objects.
  id: totrans-1952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") 方法还接受多个 CTE 对象。'
- en: 'References: [#7759](https://www.sqlalchemy.org/trac/ticket/7759)'
  id: totrans-1953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7759](https://www.sqlalchemy.org/trac/ticket/7759)
- en: '**[sql] [bug]**'
  id: totrans-1954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The FROM clauses that are established on a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct when using the [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method will now render first in
    the FROM clause of the rendered SELECT, which serves to maintain the ordering
    of clauses as was passed to the [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method itself without being affected
    by the presence of those clauses also being mentioned in other parts of the query.
    If other elements of the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") also generate FROM clauses, such as the columns
    clause or WHERE clause, these will render after the clauses delivered by [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") assuming they were not explictly
    passed to [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") also. This improvement is useful
    in those cases where a particular database generates a desirable query plan based
    on a particular ordering of FROM clauses and allows full control over the ordering
    of FROM clauses.
  id: totrans-1955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 方法在 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造上建立 FROM 子句时，这些子句现在将首先在渲染的 SELECT 的 FROM
    子句中呈现，这有助于保持子句的顺序，就像它们传递给 [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 方法本身时一样，而不受这些子句也在查询的其他部分提及的影响。如果
    [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    的其他元素也生成 FROM 子句，例如列子句或 WHERE 子句，这些将在由 [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 提供的子句之后呈现，假设它们未明确传递给 [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from")。这一改进在某些情况下非常有用，其中特定数据库基于 FROM
    子句的特定顺序生成理想的查询计划，并允许完全控制 FROM 子句的顺序。
- en: 'References: [#7888](https://www.sqlalchemy.org/trac/ticket/7888)'
  id: totrans-1956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7888](https://www.sqlalchemy.org/trac/ticket/7888)
- en: '**[sql] [bug]**'
  id: totrans-1957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Enum.length`](../core/type_basics.html#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum") parameter, which sets the length of the `VARCHAR` column
    for non-native enumeration types, is now used unconditionally when emitting DDL
    for the `VARCHAR` datatype, including when the [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") parameter is set to `True` for target backends that continue
    to use `VARCHAR`. Previously the parameter would be erroneously ignored in this
    case. The warning previously emitted for this case is now removed.
  id: totrans-1958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Enum.length`](../core/type_basics.html#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum") 参数，用于为非本地枚举类型的 `VARCHAR` 列设置长度，在为 `VARCHAR` 数据类型发出 DDL
    时现在无条件使用，包括当为目标后端设置了 [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") 参数为 `True` 时继续使用 `VARCHAR` 的情况。在这种情况下，先前该参数将被错误地忽略。先前为此情况发出的警告现已移除。'
- en: 'References: [#7791](https://www.sqlalchemy.org/trac/ticket/7791)'
  id: totrans-1959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7791](https://www.sqlalchemy.org/trac/ticket/7791)
- en: '**[sql] [bug]**'
  id: totrans-1960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The in-place type detection for Python integers, as occurs with an expression
    such as `literal(25)`, will now apply value-based adaption as well to accommodate
    Python large integers, where the datatype determined will be [`BigInteger`](../core/type_basics.html#sqlalchemy.types.BigInteger
    "sqlalchemy.types.BigInteger") rather than [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer"). This accommodates for dialects such as that of asyncpg
    which both sends implicit typing information to the driver as well as is sensitive
    to numeric scale.
  id: totrans-1961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Python整数的原地类型检测，如表达式`literal(25)`，现在也将应用基于值的适配，以适应Python大整数，其中确定的数据类型将是[`BigInteger`](../core/type_basics.html#sqlalchemy.types.BigInteger
    "sqlalchemy.types.BigInteger")而不是[`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")。这适用于诸如asyncpg之类的方言，其既将隐式类型信息发送给驱动程序，又对数值刻度敏感。
- en: 'References: [#7909](https://www.sqlalchemy.org/trac/ticket/7909)'
  id: totrans-1962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7909](https://www.sqlalchemy.org/trac/ticket/7909)
- en: '**[sql] [bug]**'
  id: totrans-1963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added `if_exists` and `if_not_exists` parameters for all “Create” / “Drop” constructs
    including [`CreateSequence`](../core/ddl.html#sqlalchemy.schema.CreateSequence
    "sqlalchemy.schema.CreateSequence"), [`DropSequence`](../core/ddl.html#sqlalchemy.schema.DropSequence
    "sqlalchemy.schema.DropSequence"), [`CreateIndex`](../core/ddl.html#sqlalchemy.schema.CreateIndex
    "sqlalchemy.schema.CreateIndex"), [`DropIndex`](../core/ddl.html#sqlalchemy.schema.DropIndex
    "sqlalchemy.schema.DropIndex"), etc. allowing generic “IF EXISTS” / “IF NOT EXISTS”
    phrases to be rendered within DDL. Pull request courtesy Jesse Bakker.
  id: totrans-1964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为所有“创建”/“删除”结构（包括[`CreateSequence`](../core/ddl.html#sqlalchemy.schema.CreateSequence
    "sqlalchemy.schema.CreateSequence")、[`DropSequence`](../core/ddl.html#sqlalchemy.schema.DropSequence
    "sqlalchemy.schema.DropSequence")、[`CreateIndex`](../core/ddl.html#sqlalchemy.schema.CreateIndex
    "sqlalchemy.schema.CreateIndex")、[`DropIndex`](../core/ddl.html#sqlalchemy.schema.DropIndex
    "sqlalchemy.schema.DropIndex")等）添加了`if_exists`和`if_not_exists`参数，允许在DDL中呈现通用的“IF
    EXISTS”/“IF NOT EXISTS”短语。感谢Jesse Bakker提供的拉取请求。
- en: 'References: [#7354](https://www.sqlalchemy.org/trac/ticket/7354)'
  id: totrans-1965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7354](https://www.sqlalchemy.org/trac/ticket/7354)
- en: '**[sql] [bug]**'
  id: totrans-1966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Improved the construction of SQL binary expressions to allow for very long expressions
    against the same associative operator without special steps needed in order to
    avoid high memory use and excess recursion depth. A particular binary operation
    `A op B` can now be joined against another element `op C` and the resulting structure
    will be “flattened” so that the representation as well as SQL compilation does
    not require recursion.
  id: totrans-1967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了SQL二进制表达式的构造，以允许针对相同的关联操作符进行非常长的表达式，而无需特殊步骤以避免高内存使用和过度递归深度。现在，一个特定的二元操作`A
    op B`可以与另一个元素`op C`连接，结果结构将被“平铺”，以使表示以及SQL编译不需要递归。
- en: One effect of this change is that string concatenation expressions which use
    SQL functions come out as “flat”, e.g. MySQL will now render `concat('x', 'y',
    'z', ...)`` rather than nesting together two-element functions like `concat(concat('x',
    'y'), 'z')`. Third-party dialects which override the string concatenation operator
    will need to implement a new method `def visit_concat_op_expression_clauselist()`
    to accompany the existing `def visit_concat_op_binary()` method.
  id: totrans-1968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改的一个影响是使用SQL函数的字符串连接表达式现在变得“平坦”，例如，MySQL现在将呈现`concat('x', 'y', 'z', ...)`而不是将两个元素函数嵌套在一起的`concat(concat('x',
    'y'), 'z')`。重写字符串连接运算符的第三方方言将需要实现一个新方法`def visit_concat_op_expression_clauselist()`，以配合现有的`def
    visit_concat_op_binary()`方法。
- en: 'References: [#7744](https://www.sqlalchemy.org/trac/ticket/7744)'
  id: totrans-1969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7744](https://www.sqlalchemy.org/trac/ticket/7744)
- en: '**[sql] [bug]**'
  id: totrans-1970
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Implemented full support for “truediv” and “floordiv” using the “/” and “//”
    operators. A “truediv” operation between two expressions using [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") now considers the result to be [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), and the dialect-level compilation will cast the right
    operand to a numeric type on a dialect-specific basis to ensure truediv is achieved.
    For floordiv, conversion is also added for those databases that don’t already
    do floordiv by default (MySQL, Oracle) and the `FLOOR()` function is rendered
    in this case, as well as for cases where the right operand is not an integer (needed
    for PostgreSQL, others).
  id: totrans-1971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用“/”和“//”运算符实现了对“truediv”和“floordiv”的完全支持。“Integer”类型的两个表达式之间的“truediv”操作现在被视为“Numeric”类型，并且方言级别的编译将根据方言特定的基础将右操作数转换为数字类型，以确保实现truediv。对于floordiv，还添加了转换，对于那些默认情况下不执行floordiv的数据库（如MySQL、Oracle），在这种情况下还会渲染`FLOOR()`函数，以及右操作数不是整数的情况（对于PostgreSQL等其他数据库也是需要的）。
- en: The change resolves issues both with inconsistent behavior of the division operator
    on different backends and also fixes an issue where integer division on Oracle
    would fail to be able to fetch a result due to inappropriate outputtypehandlers.
  id: totrans-1972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改解决了不同后端上除法运算符行为不一致的问题，并修复了Oracle上整数除法无法获取结果的问题，因为输出类型处理程序不合适的问题。
- en: See also
  id: totrans-1973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Python division operator performs true division for all backends; added floor
    division](whatsnew_20.html#change-4926)'
  id: totrans-1974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Python除法运算符对所有后端执行真除法；添加了地板除法](whatsnew_20.html#change-4926)'
- en: 'References: [#4926](https://www.sqlalchemy.org/trac/ticket/4926)'
  id: totrans-1975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4926](https://www.sqlalchemy.org/trac/ticket/4926)
- en: '**[sql] [bug]**'
  id: totrans-1976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added an additional lookup step to the compiler which will track all FROM clauses
    which are tables, that may have the same name shared in multiple schemas where
    one of the schemas is the implicit “default” schema; in this case, the table name
    when referring to that name without a schema qualification will be rendered with
    an anonymous alias name at the compiler level in order to disambiguate the two
    (or more) names. The approach of schema-qualifying the normally unqualified name
    with the server-detected “default schema name” value was also considered, however
    this approach doesn’t apply to Oracle nor is it accepted by SQL Server, nor would
    it work with multiple entries in the PostgreSQL search path. The name collision
    issue resolved here has been identified as affecting at least Oracle, PostgreSQL,
    SQL Server, MySQL and MariaDB.
  id: totrans-1977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在编译器中增加了额外的查找步骤，用于跟踪所有的FROM子句，这些子句是表，可能在多个模式中共享具有相同名称的情况，其中一个模式是隐式的“默认”模式；在这种情况下，当在没有模式限定符的情况下引用该名称时，编译器级别将为表名称生成一个匿名别名，以消除两个（或更多）名称的歧义。还考虑了使用服务器检测到的“默认模式名称”值对通常未限定名称进行模式限定的方法，但是这种方法不适用于Oracle，SQL
    Server也不接受，而且不适用于PostgreSQL搜索路径中的多个条目。在此解决的名称冲突问题已被确认至少影响到Oracle、PostgreSQL、SQL
    Server、MySQL和MariaDB。
- en: 'References: [#7471](https://www.sqlalchemy.org/trac/ticket/7471)'
  id: totrans-1978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7471](https://www.sqlalchemy.org/trac/ticket/7471)
- en: '**[sql] [bug]**'
  id: totrans-1979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Python string values for which a SQL type is determined from the type of the
    value, mainly when using [`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal"), will now apply the [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") type, rather than the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") datatype, for Python string values that test as “ascii
    only” using Python `str.isascii()`. If the string is not `isascii()`, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") datatype will be bound instead, which was used in
    all string detection previously. This behavior **only applies to in-place detection
    of datatypes when using ``literal()`` or other contexts that have no existing
    datatype**, which is not usually the case under normal [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") comparison operations, where the type of the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") being compared always takes precedence.
  id: totrans-1980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从值的类型确定 SQL 类型的 Python 字符串值，主要是当使用 [`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal") 时，现在将应用 [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") 类型，而不是 [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") 数据类型，对于使用 Python `str.isascii()` 测试为“ascii only”的
    Python 字符串值。如果字符串不是 `isascii()`，则将绑定 [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") 数据类型，这在以前所有字符串检测中都使用了。这种行为**仅适用于使用 ``literal()`` 或其他没有现有数据类型的上下文的数据类型的就地检测**，通常不适用于正常的
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    比较操作，其中正在比较的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    的类型始终优先。
- en: Use of the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    datatype can determine literal string formatting on backends such as SQL Server,
    where a literal value (i.e. using `literal_binds`) will be rendered as `N'<value>'`
    instead of `'value'`. For normal bound value handling, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") datatype also may have implications for passing values
    to the DBAPI, again in the case of SQL Server, the pyodbc driver supports the
    use of [setinputsizes mode](../dialects/mssql.html#mssql-pyodbc-setinputsizes)
    which will handle [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") versus [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") differently.
  id: totrans-1981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在诸如 SQL Server 等后端中，使用[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode")数据类型可以确定文字字符串的格式化方式，其中文字值（即使用 `literal_binds`）将呈现为
    `N'<value>'` 而不是 `'value'`。对于常规绑定值处理，[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode")数据类型还可能对传递值到 DBAPI 产生影响，再次以 SQL Server 为例，pyodbc 驱动程序支持使用[setinputsizes
    模式](../dialects/mssql.html#mssql-pyodbc-setinputsizes)，它将以不同方式处理 [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") 与 [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode")。
- en: 'References: [#7551](https://www.sqlalchemy.org/trac/ticket/7551)'
  id: totrans-1982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7551](https://www.sqlalchemy.org/trac/ticket/7551)
- en: '**[sql] [bug]**'
  id: totrans-1983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") will now set the array dimensions to 1.
    Improved [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    processing to accept `None` values as value of a multi-array.
  id: totrans-1984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg "sqlalchemy.sql.functions.array_agg")现在将数组维度设置为1。改进了对[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")的处理，以接受`None`值作为多维数组的值。'
- en: 'References: [#7083](https://www.sqlalchemy.org/trac/ticket/7083)'
  id: totrans-1985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7083](https://www.sqlalchemy.org/trac/ticket/7083)
- en: schema
  id: totrans-1986
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 架构
- en: '**[schema] [feature]**'
  id: totrans-1987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [feature]**'
- en: Expanded on the “conditional DDL” system implemented by the [`ExecutableDDLElement`](../core/ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") class (renamed from `DDLElement`) to
    be directly available on [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") constructs such as [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), etc. such that the conditional logic
    for generating these elements is included within the default DDL emitting process.
    This system can also be accommodated by a future release of Alembic to support
    conditional DDL elements within all schema-management systems.
  id: totrans-1988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`ExecutableDDLElement`](../core/ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") 类（从 `DDLElement` 重命名）实现的“条件 DDL”系统上进行了扩展，直接可用于
    [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    构造，如 [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")、[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 等，使得用于生成这些元素的条件逻辑包含在默认的 DDL 发射过程中。这个系统也可以被
    Alembic 的未来版本支持，以支持所有模式管理系统中的条件 DDL 元素。
- en: See also
  id: totrans-1989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Conditional DDL for Constraints and Indexes](whatsnew_20.html#ticket-7631)'
  id: totrans-1990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的条件 DDL 用于约束和索引](whatsnew_20.html#ticket-7631)'
- en: 'References: [#7631](https://www.sqlalchemy.org/trac/ticket/7631)'
  id: totrans-1991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7631](https://www.sqlalchemy.org/trac/ticket/7631)
- en: '**[schema] [usecase]**'
  id: totrans-1992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [用例]**'
- en: Added parameter [`DropConstraint.if_exists`](../core/ddl.html#sqlalchemy.schema.DropConstraint.params.if_exists
    "sqlalchemy.schema.DropConstraint") to the [`DropConstraint`](../core/ddl.html#sqlalchemy.schema.DropConstraint
    "sqlalchemy.schema.DropConstraint") construct which result in “IF EXISTS” DDL
    being added to the DROP statement. This phrase is not accepted by all databases
    and the operation will fail on a database that does not support it as there is
    no similarly compatible fallback within the scope of a single DDL statement. Pull
    request courtesy Mike Fiedler.
  id: totrans-1993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`DropConstraint`](../core/ddl.html#sqlalchemy.schema.DropConstraint "sqlalchemy.schema.DropConstraint")
    构造中添加了参数 [`DropConstraint.if_exists`](../core/ddl.html#sqlalchemy.schema.DropConstraint.params.if_exists
    "sqlalchemy.schema.DropConstraint")，这将导致“IF EXISTS” DDL 被添加到 DROP 语句中。这个短语不被所有数据库接受，如果数据库不支持它，该操作将在一个单独的
    DDL 语句的范围内失败，因为在这个范围内没有类似的兼容回退。感谢 Mike Fiedler 的拉取请求。
- en: 'References: [#8141](https://www.sqlalchemy.org/trac/ticket/8141)'
  id: totrans-1994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8141](https://www.sqlalchemy.org/trac/ticket/8141)
- en: '**[schema] [usecase]**'
  id: totrans-1995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [用例]**'
- en: Implemented the DDL event hooks [`DDLEvents.before_create()`](../core/events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create"), [`DDLEvents.after_create()`](../core/events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create"), [`DDLEvents.before_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop"), [`DDLEvents.after_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop") for all [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects that include a distinct CREATE or DROP
    step, when that step is invoked as a distinct SQL statement, including for [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), and PostgreSQL’s [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM").
  id: totrans-1996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为所有包含不同的 CREATE 或 DROP 步骤的 [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") 对象实现了 DDL 事件钩子 [`DDLEvents.before_create()`](../core/events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create")、[`DDLEvents.after_create()`](../core/events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create")、[`DDLEvents.before_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop")、[`DDLEvents.after_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop")，当该步骤被调用为一个独立的 SQL 语句时，包括 [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")、[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")、[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 和 PostgreSQL 的 [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")。
- en: 'References: [#8394](https://www.sqlalchemy.org/trac/ticket/8394)'
  id: totrans-1997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8394](https://www.sqlalchemy.org/trac/ticket/8394)
- en: '**[schema] [performance]**'
  id: totrans-1998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [performance]**'
- en: Rearchitected the schema reflection API to allow participating dialects to make
    use of high performing batch queries to reflect the schemas of many tables at
    once using fewer queries by an order of magnitude. The new performance features
    are targeted first at the PostgreSQL and Oracle backends, and may be applied to
    any dialect that makes use of SELECT queries against system catalog tables to
    reflect tables. The change also includes new API features and behavioral improvements
    to the [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") object, including consistent, cached
    behavior of methods like [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table"), [`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names") and new methods [`Inspector.has_schema()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_schema
    "sqlalchemy.engine.reflection.Inspector.has_schema") and [`Inspector.has_index()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_index
    "sqlalchemy.engine.reflection.Inspector.has_index").
  id: totrans-1999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重构了模式反射API，以允许参与的方言利用高性能的批量查询来一次反射多个表的模式，使用数量级较少的查询。新的性能特性首先针对PostgreSQL和Oracle后端，可以应用于使用SELECT查询反映表的系统目录表的任何方言。该变化还包括对[`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")对象的新API特性和行为改进，包括像[`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table")、[`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")等方法的一致、缓存行为，以及新方法[`Inspector.has_schema()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_schema
    "sqlalchemy.engine.reflection.Inspector.has_schema")和[`Inspector.has_index()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_index
    "sqlalchemy.engine.reflection.Inspector.has_index")。
- en: See also
  id: totrans-2000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Major Architectural, Performance and API Enhancements for Database Reflection](whatsnew_20.html#change-4379)
    - full background'
  id: totrans-2001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[数据库反射的主要架构、性能和API增强](whatsnew_20.html#change-4379) - 完整背景'
- en: 'References: [#4379](https://www.sqlalchemy.org/trac/ticket/4379)'
  id: totrans-2002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4379](https://www.sqlalchemy.org/trac/ticket/4379)
- en: '**[schema] [bug]**'
  id: totrans-2003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: The warnings that are emitted regarding reflection of indexes or unique constraints,
    when the [`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table") parameter is used to exclude columns that are then
    found to be part of those constraints, have been removed. When the [`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table") parameter is used it should be expected that the resulting
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    construct will not include constraints that rely upon omitted columns. This change
    was made in response to [#8100](https://www.sqlalchemy.org/trac/ticket/8100) which
    repaired [`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table") in conjunction with foreign key constraints that rely
    upon omitted columns, where the use case became clear that omitting such constraints
    should be expected.
  id: totrans-2004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table")参数排除后发现仍然是这些约束的一部分的列时，关于索引或唯一约束的反射发出的警告已被移除。当使用[`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table")参数时，应该预期生成的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")构造将不包括依赖于被省略列的约束。这个变化是对[#8100](https://www.sqlalchemy.org/trac/ticket/8100)作出的回应，该问题修复了[`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table")与依赖于被省略列的外键约束的一起使用的情况，其中使用案例表明省略此类约束是可以预期的。
- en: 'References: [#8102](https://www.sqlalchemy.org/trac/ticket/8102)'
  id: totrans-2005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8102](https://www.sqlalchemy.org/trac/ticket/8102)
- en: '**[schema] [postgresql]**'
  id: totrans-2006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [postgresql]**'
- en: Added support for comments on [`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") objects, including DDL and reflection; the field
    is added to the base [`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") class and corresponding constructors, however
    PostgreSQL is the only included backend to support the feature right now. See
    parameters such as [`ForeignKeyConstraint.comment`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.comment
    "sqlalchemy.schema.ForeignKeyConstraint"), [`UniqueConstraint.comment`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint.params.comment
    "sqlalchemy.schema.UniqueConstraint") or [`CheckConstraint.comment`](../core/constraints.html#sqlalchemy.schema.CheckConstraint.params.comment
    "sqlalchemy.schema.CheckConstraint").
  id: totrans-2007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")对象添加了对评论的支持，包括DDL和反射；该字段已添加到基本的[`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")类和相应的构造函数中，但目前只有PostgreSQL是支持该功能的后端。请参阅参数，如[`ForeignKeyConstraint.comment`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.comment
    "sqlalchemy.schema.ForeignKeyConstraint")，[`UniqueConstraint.comment`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint.params.comment
    "sqlalchemy.schema.UniqueConstraint")或[`CheckConstraint.comment`](../core/constraints.html#sqlalchemy.schema.CheckConstraint.params.comment
    "sqlalchemy.schema.CheckConstraint")。
- en: 'References: [#5677](https://www.sqlalchemy.org/trac/ticket/5677)'
  id: totrans-2008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5677](https://www.sqlalchemy.org/trac/ticket/5677)
- en: '**[schema] [mariadb] [mysql]**'
  id: totrans-2009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [mariadb] [mysql]**'
- en: 'Add support for Partitioning and Sample pages on MySQL and MariaDB reflected
    options. The options are stored in the table dialect options dictionary, so the
    following keyword need to be prefixed with `mysql_` or `mariadb_` depending on
    the backend. Supported options are:'
  id: totrans-2010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加对MySQL和MariaDB分区和示例页面的支持反映选项。这些选项存储在表方言选项字典中，因此以下关键字需要根据后端添加`mysql_`或`mariadb_`前缀。支持的选项包括：
- en: '`stats_sample_pages`'
  id: totrans-2011
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stats_sample_pages`'
- en: '`partition_by`'
  id: totrans-2012
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`partition_by`'
- en: '`partitions`'
  id: totrans-2013
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`partitions`'
- en: '`subpartition_by`'
  id: totrans-2014
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subpartition_by`'
- en: These options are also reflected when loading a table from database, and will
    populate the table [`Table.dialect_options`](../core/metadata.html#sqlalchemy.schema.Table.dialect_options
    "sqlalchemy.schema.Table.dialect_options"). Pull request courtesy of Ramon Will.
  id: totrans-2015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当从数据库加载表时，这些选项也会反映出来，并将填充表[`Table.dialect_options`](../core/metadata.html#sqlalchemy.schema.Table.dialect_options
    "sqlalchemy.schema.Table.dialect_options")。感谢Ramon Will的拉取请求。
- en: 'References: [#4038](https://www.sqlalchemy.org/trac/ticket/4038)'
  id: totrans-2016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4038](https://www.sqlalchemy.org/trac/ticket/4038)
- en: typing
  id: totrans-2017
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [improvement]**'
  id: totrans-2018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [improvement]**'
- en: The [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method now returns a copy of the original
    [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    object, rather than wrapping it inside the `Variant` class, which is effectively
    removed (the import symbol remains for backwards compatibility with code that
    may be testing for this symbol). While the previous approach maintained in-Python
    behaviors, maintaining the original type allows for clearer type checking and
    debugging.
  id: totrans-2019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")方法现在返回原始[`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")对象的副本，而不是将其包装在`Variant`类中，该类实际上已被移除（导入符号仍保留以向后兼容可能测试此符号的代码）。虽然以前的方法保持了Python中的行为，但保持原始类型允许更清晰的类型检查和调试。'
- en: '[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") also accepts multiple dialect names
    per call as well, in particular this is helpful for related backend names such
    as `"mysql", "mariadb"`.'
  id: totrans-2020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")还可以在每次调用时接受多个方言名称，特别是对于相关的后端名称，如`"mysql",
    "mariadb"`。'
- en: See also
  id: totrans-2021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“with_variant()” clones the original TypeEngine rather than changing the type](whatsnew_20.html#change-6980)'
  id: totrans-2022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“with_variant()”克隆原始TypeEngine而不是更改类型](whatsnew_20.html#change-6980)'
- en: 'References: [#6980](https://www.sqlalchemy.org/trac/ticket/6980)'
  id: totrans-2023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6980](https://www.sqlalchemy.org/trac/ticket/6980)
- en: postgresql
  id: totrans-2024
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-2025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added a new PostgreSQL [`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN") datatype, which follows the same CREATE
    TYPE / DROP TYPE behaviors as that of PostgreSQL [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM"). Much thanks to David Baumgold for the
    efforts on this.
  id: totrans-2026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 PostgreSQL [`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN") 数据类型，其遵循与 PostgreSQL [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 相同的 CREATE TYPE / DROP TYPE 行为。非常感谢 David
    Baumgold 的努力。
- en: See also
  id: totrans-2027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN")'
  id: totrans-2028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN")'
- en: 'References: [#7316](https://www.sqlalchemy.org/trac/ticket/7316)'
  id: totrans-2029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7316](https://www.sqlalchemy.org/trac/ticket/7316)
- en: '**[postgresql] [usecase] [asyncpg]**'
  id: totrans-2030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase] [asyncpg]**'
- en: Added overridable methods `PGDialect_asyncpg.setup_asyncpg_json_codec` and `PGDialect_asyncpg.setup_asyncpg_jsonb_codec`
    codec, which handle the required task of registering JSON/JSONB codecs for these
    datatypes when using asyncpg. The change is that methods are broken out as individual,
    overridable methods to support third party dialects that need to alter or disable
    how these particular codecs are set up.
  id: totrans-2031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了可重写方法 `PGDialect_asyncpg.setup_asyncpg_json_codec` 和 `PGDialect_asyncpg.setup_asyncpg_jsonb_codec`，用于在使用
    asyncpg 时注册这些数据类型所需的 JSON/JSONB 编解码器。变更之处在于将方法拆分为单独的可重写方法，以支持需要修改或禁用这些特定编解码器设置的第三方方言。
- en: 'This change is also **backported** to: 1.4.27'
  id: totrans-2032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此变更还被 **回溯** 到：1.4.27
- en: 'References: [#7284](https://www.sqlalchemy.org/trac/ticket/7284)'
  id: totrans-2033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7284](https://www.sqlalchemy.org/trac/ticket/7284)
- en: '**[postgresql] [usecase]**'
  id: totrans-2034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added literal type rendering for the [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") and [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") datatypes. The generic stringify will
    render using brackets, e.g. `[1, 2, 3]` and the PostgreSQL specific will use the
    ARRAY literal e.g. `ARRAY[1, 2, 3]`. Multiple dimensions and quoting are also
    taken into account.
  id: totrans-2035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    和 [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    数据类型添加了文字类型渲染。通用的字符串化将使用方括号进行渲染，例如 `[1, 2, 3]`，而 PostgreSQL 特定的将使用 ARRAY 文字，例如
    `ARRAY[1, 2, 3]`。还考虑了多维和引号。
- en: 'References: [#8138](https://www.sqlalchemy.org/trac/ticket/8138)'
  id: totrans-2036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8138](https://www.sqlalchemy.org/trac/ticket/8138)
- en: '**[postgresql] [usecase]**'
  id: totrans-2037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Adds support for PostgreSQL multirange types, introduced in PostgreSQL 14. Support
    for PostgreSQL ranges and multiranges has now been generalized to the psycopg3,
    psycopg2 and asyncpg backends, with room for further dialect support, using a
    backend-agnostic [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") data object that’s constructor-compatible
    with the previously used psycopg2 object. See the new documentation for usage
    patterns.
  id: totrans-2038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PostgreSQL 多范围类型的支持，该类型引入于 PostgreSQL 14 中。现在已将对 PostgreSQL 范围和多范围的支持概括为
    psycopg3、psycopg2 和 asyncpg 后端，并提供了进一步方言支持的空间，使用与以前使用的 psycopg2 对象兼容的后端无关 [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") 数据对象。请参阅新文档以了解使用模式。
- en: In addition, range type handling has been enhanced so that it automatically
    renders type casts, so that in-place round trips for statements that don’t provide
    the database with any context don’t require the [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") construct to be explicit for the database to
    know the desired type (discussed at [#8540](https://www.sqlalchemy.org/trac/ticket/8540)).
  id: totrans-2039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，增强了范围类型处理，以便自动渲染类型转换，因此对于不提供任何上下文的语句的就地往返，不需要为数据库明确指定所需的类型（在 [#8540](https://www.sqlalchemy.org/trac/ticket/8540)
    中讨论）。
- en: Thanks very much to @zeeeeeb for the pull request implementing and testing the
    new datatypes and psycopg support.
  id: totrans-2040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非常感谢 @zeeeeeb 提交并测试新数据类型和 psycopg 支持的拉取请求。
- en: See also
  id: totrans-2041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[New RANGE / MULTIRANGE support and changes for PostgreSQL backends](whatsnew_20.html#change-7156)'
  id: totrans-2042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL 后端的新 RANGE / MULTIRANGE 支持和变更](whatsnew_20.html#change-7156)'
- en: '[Range and Multirange Types](../dialects/postgresql.html#postgresql-ranges)'
  id: totrans-2043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[范围和多范围类型](../dialects/postgresql.html#postgresql-ranges)'
- en: 'References: [#7156](https://www.sqlalchemy.org/trac/ticket/7156), [#8540](https://www.sqlalchemy.org/trac/ticket/8540)'
  id: totrans-2044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7156](https://www.sqlalchemy.org/trac/ticket/7156), [#8540](https://www.sqlalchemy.org/trac/ticket/8540)
- en: '**[postgresql] [usecase]**'
  id: totrans-2045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: The “ping” query emitted when configuring [`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") for psycopg, asyncpg and pg8000, but not for psycopg2,
    has been changed to be an empty query (`;`) instead of `SELECT 1`; additionally,
    for the asyncpg driver, the unnecessary use of a prepared statement for this query
    has been fixed. Rationale is to eliminate the need for PostgreSQL to produce a
    query plan when the ping is emitted. The operation is not currently supported
    by the `psycopg2` driver which continues to use `SELECT 1`.
  id: totrans-2046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 配置[`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine")时发出的“ping”查询，对于psycopg、asyncpg和pg8000，但不适用于psycopg2，已更改为一个空查询(`;`)，而不是`SELECT
    1`；此外，对于asyncpg驱动程序，已修复了此查询不必要使用准备语句的问题。其理由是消除PostgreSQL在发出ping时产生查询计划的需要。当前不支持由`psycopg2`驱动程序执行此操作，它继续使用`SELECT
    1`。
- en: 'References: [#8491](https://www.sqlalchemy.org/trac/ticket/8491)'
  id: totrans-2047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8491](https://www.sqlalchemy.org/trac/ticket/8491)
- en: '**[postgresql] [change]**'
  id: totrans-2048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [change]**'
- en: SQLAlchemy now requires PostgreSQL version 9 or greater. Older versions may
    still work in some limited use cases.
  id: totrans-2049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy现在要求PostgreSQL版本为9或更高。在某些有限的用例中，旧版本可能仍然可以工作。
- en: '**[postgresql] [change] [mssql]**'
  id: totrans-2050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [change] [mssql]**'
- en: The parameter [`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID") of [`UUID`](../core/type_basics.html#sqlalchemy.types.UUID
    "sqlalchemy.types.UUID"), previously specific to the PostgreSQL dialect but now
    generalized for Core (along with a new backend-agnostic [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype) now defaults to `True`, indicating that Python
    `UUID` objects are accepted by this datatype by default. Additionally, the SQL
    Server [`UNIQUEIDENTIFIER`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") datatype has been converted to be
    a UUID-receiving type; for legacy code that makes use of [`UNIQUEIDENTIFIER`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") using string values, set the [`UNIQUEIDENTIFIER.as_uuid`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER.params.as_uuid
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") parameter to `False`.
  id: totrans-2051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`UUID`](../core/type_basics.html#sqlalchemy.types.UUID "sqlalchemy.types.UUID")的参数[`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID")，以前专门针对PostgreSQL方言，现在已经泛化为Core（连同一个新的与后端无关的[`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid")数据类型），现在默认为`True`，表示此数据类型默认接受Python `UUID`对象。此外，SQL Server的[`UNIQUEIDENTIFIER`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER")数据类型已转换为接收UUID的类型；对于使用字符串值的遗留代码，设置[`UNIQUEIDENTIFIER.as_uuid`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER.params.as_uuid
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER")参数为`False`。'
- en: 'References: [#7225](https://www.sqlalchemy.org/trac/ticket/7225)'
  id: totrans-2052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7225](https://www.sqlalchemy.org/trac/ticket/7225)
- en: '**[postgresql] [change]**'
  id: totrans-2053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [change]**'
- en: The [`ENUM.name`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.name
    "sqlalchemy.dialects.postgresql.ENUM") parameter for the PostgreSQL-specific [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") datatype is now a required keyword argument.
    The “name” is necessary in any case in order for the [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") to be usable as an error would be raised
    at SQL/DDL render time if “name” were not present.
  id: totrans-2054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL特定的[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")数据类型的[`ENUM.name`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.name
    "sqlalchemy.dialects.postgresql.ENUM")参数现在是一个必需的关键字参数。在任何情况下，“name”都是必要的，否则在SQL/DDL渲染时会引发错误。
- en: '**[postgresql] [change]**'
  id: totrans-2055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [change]**'
- en: In support of new PostgreSQL features including the psycopg3 dialect as well
    as extended “fast insertmany” support, the system by which typing information
    for bound parameters is passed to the PostgreSQL database has been redesigned
    to use inline casts emitted by the SQL compiler, and is now applied to all PostgreSQL
    dialects. This is in contrast to the previous approach which would rely upon the
    DBAPI in use to render these casts itself, which in cases such as that of pg8000
    and the adapted asyncpg driver, would use the pep-249 `setinputsizes()` method,
    or with the psycopg2 driver would rely on the driver itself in most cases, with
    some special exceptions made for ARRAY.
  id: totrans-2056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持新的PostgreSQL功能，包括psycopg3方言以及扩展的“快速插入多个”支持，用于将绑定参数的类型信息传递给PostgreSQL数据库的系统已经重新设计，现在使用SQL编译器发出的内联转换，并且现在适用于所有PostgreSQL方言。这与以前的方法相反，以前的方法依赖于正在使用的DBAPI来自行呈现这些转换，例如pg8000和适应的asyncpg驱动程序的情况下，将使用pep-249
    `setinputsizes()`方法，或者对于psycopg2驱动程序，在大多数情况下将依赖于驱动程序本身，对于ARRAY则会做一些特殊的例外。
- en: The new approach now has all PostgreSQL dialects rendering these casts as needed
    using PostgreSQL double-colon style within the compiler, and the use of `setinputsizes()`
    is removed for PostgreSQL dialects, as this was not generally part of these DBAPIs
    in any case (pg8000 being the only exception, which added the method at the request
    of SQLAlchemy developers).
  id: totrans-2057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，所有PostgreSQL方言都使用PostgreSQL双冒号样式在编译器内呈现这些转换所需的转换，并且对于PostgreSQL方言，已删除了使用`setinputsizes()`，因为这在任何情况���通常不是这些DBAPI的一部分（pg8000是唯一的例外，它在SQLAlchemy开发人员的请求下添加了该方法）。
- en: Advantages to this approach include per-statement performance, as no second
    pass over the compiled statement is required at execution time, better support
    for all DBAPIs, as there is now one consistent system of applying typing information,
    and improved transparency, as the SQL logging output, as well as the string output
    of a compiled statement, will show these casts present in the statement directly,
    whereas previously these casts were not visible in logging output as they would
    occur after the statement were logged.
  id: totrans-2058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种方法的优势包括每个语句的性能，因为在执行时不需要对编译后的语句进行第二次遍历，对所有DBAPI的更好支持，因为现在有一个一致的应用类型信息系统，以及改进的透明度，因为SQL日志输出以及编译语句的字符串输出将直接显示这些转换存在于语句中，而以前这些转换在日志输出中是不可见的，因为它们会在语句记录后发生。
- en: '**[postgresql] [bug]**'
  id: totrans-2059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: The `Operators.match()` operator now uses `plainto_tsquery()` for PostgreSQL
    full text search, rather than `to_tsquery()`. The rationale for this change is
    to provide better cross-compatibility with match on other database backends. Full
    support for all PostgreSQL full text functions remains available through the use
    of [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    in conjunction with [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") (an improved version of [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") for boolean operators).
  id: totrans-2060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Operators.match()`运算符现在在PostgreSQL全文搜索中使用`plainto_tsquery()`，而不是`to_tsquery()`。这种更改的理由是为了提供更好的与其他数据库后端上的match的跨兼容性。通过与[`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")（布尔运算符的改进版本[`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")）结合使用[`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")，仍然可以通过使用所有PostgreSQL全文函数来获得完全支持。'
- en: See also
  id: totrans-2061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[match() operator on PostgreSQL uses plainto_tsquery() rather than to_tsquery()](whatsnew_20.html#change-7086)'
  id: totrans-2062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL上的match()运算符使用plainto_tsquery()而不是to_tsquery()](whatsnew_20.html#change-7086)'
- en: 'References: [#7086](https://www.sqlalchemy.org/trac/ticket/7086)'
  id: totrans-2063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7086](https://www.sqlalchemy.org/trac/ticket/7086)
- en: '**[postgresql] [removed]**'
  id: totrans-2064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [已移除]**'
- en: 'Removed support for multiple deprecated drivers:'
  id: totrans-2065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除对多个已弃用驱动程序的支持：
- en: pypostgresql for PostgreSQL. This is available as an external driver at [https://github.com/PyGreSQL](https://github.com/PyGreSQL)
  id: totrans-2066
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于PostgreSQL的pypostgresql。这作为外部驱动程序可在[https://github.com/PyGreSQL](https://github.com/PyGreSQL)获得。
- en: ''
  id: totrans-2067
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-2068
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: pygresql for PostgreSQL.
  id: totrans-2069
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于PostgreSQL的pygresql。
- en: Please switch to one of the supported drivers or to the external version of
    the same driver.
  id: totrans-2070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请切换到受支持的驱动程序之一或同一驱动程序的外部版本。
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-2071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
- en: '**[postgresql] [dialect]**'
  id: totrans-2072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [方言]**'
- en: Added support for `psycopg` dialect supporting both sync and async execution.
    This dialect is available under the `postgresql+psycopg` name for both the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") engine-creation functions.
  id: totrans-2073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 `psycopg` 方言的支持，支持同步和异步执行。此方言在 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 和 [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") 引擎创建函数下可用。
- en: See also
  id: totrans-2074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Dialect support for psycopg 3 (a.k.a. “psycopg”)](whatsnew_20.html#ticket-6842)'
  id: totrans-2075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对 psycopg 3（又名“psycopg”）的方言支持](whatsnew_20.html#ticket-6842)'
- en: '[psycopg](../dialects/postgresql.html#postgresql-psycopg)'
  id: totrans-2076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[psycopg](../dialects/postgresql.html#postgresql-psycopg)'
- en: 'References: [#6842](https://www.sqlalchemy.org/trac/ticket/6842)'
  id: totrans-2077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6842](https://www.sqlalchemy.org/trac/ticket/6842)
- en: '**[postgresql] [psycopg2]**'
  id: totrans-2078
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [psycopg2]**'
- en: Update psycopg2 dialect to use the DBAPI interface to execute two phase transactions.
    Previously SQL commands were execute to handle this kind of transactions.
  id: totrans-2079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了 psycopg2 方言，使用 DBAPI 接口执行两阶段事务。以前使用 SQL 命令处理这种类型的事务。
- en: 'References: [#7238](https://www.sqlalchemy.org/trac/ticket/7238)'
  id: totrans-2080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7238](https://www.sqlalchemy.org/trac/ticket/7238)
- en: '**[postgresql] [schema]**'
  id: totrans-2081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [schema]**'
- en: Introduced the type [`JSONPATH`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONPATH
    "sqlalchemy.dialects.postgresql.JSONPATH") that can be used in cast expressions.
    This is required by some PostgreSQL dialects when using functions such as `jsonb_path_exists`
    or `jsonb_path_match` that accept a `jsonpath` as input.
  id: totrans-2082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入了类型 [`JSONPATH`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONPATH
    "sqlalchemy.dialects.postgresql.JSONPATH")，可在转换表达式中使用。在使用诸如 `jsonb_path_exists`
    或 `jsonb_path_match` 这样接受 `jsonpath` 作为输入的函数时，某些 PostgreSQL 方言需要这个类型。
- en: See also
  id: totrans-2083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[JSON Types](../dialects/postgresql.html#postgresql-json-types) - PostgreSQL
    JSON types.'
  id: totrans-2084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[JSON 类型](../dialects/postgresql.html#postgresql-json-types) - PostgreSQL JSON
    类型。'
- en: 'References: [#8216](https://www.sqlalchemy.org/trac/ticket/8216)'
  id: totrans-2085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8216](https://www.sqlalchemy.org/trac/ticket/8216)
- en: '**[postgresql] [reflection]**'
  id: totrans-2086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [reflection]**'
- en: The PostgreSQL dialect now supports reflection of expression based indexes.
    The reflection is supported both when using `Inspector.get_indexes()` and when
    reflecting a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    using [`Table.autoload_with`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table"). Thanks to immerrr and Aidan Kane for the help on this
    ticket.
  id: totrans-2087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL 方言现在支持基于表达式的索引的反射。在使用 `Inspector.get_indexes()` 时以及使用 [`Table.autoload_with`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") 反射 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 时都支持反射。感谢 immerrr 和 Aidan Kane 在这个问题上的帮助。
- en: 'References: [#7442](https://www.sqlalchemy.org/trac/ticket/7442)'
  id: totrans-2088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7442](https://www.sqlalchemy.org/trac/ticket/7442)
- en: mysql
  id: totrans-2089
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase] [mariadb]**'
  id: totrans-2090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [usecase] [mariadb]**'
- en: The `ROLLUP` function will now correctly render `WITH ROLLUP` on MySql and MariaDB,
    allowing the use of group by rollup with these backend.
  id: totrans-2091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ROLLUP` 函数现在会在 MySql 和 MariaDB 上正确呈现 `WITH ROLLUP`，允许在这些后端使用 group by rollup。'
- en: 'References: [#8503](https://www.sqlalchemy.org/trac/ticket/8503)'
  id: totrans-2092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8503](https://www.sqlalchemy.org/trac/ticket/8503)
- en: '**[mysql] [bug]**'
  id: totrans-2093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue in MySQL [`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") which would render
    the wrong column name when an expression were used in a VALUES expression. Pull
    request courtesy Cristian Sabaila.
  id: totrans-2094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MySQL [`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") 中的问题，当在 VALUES 表达式中使用表达式时，会呈现错误的列名。感谢
    Cristian Sabaila 提供的拉取请求。
- en: 'This change is also **backported** to: 1.4.27'
  id: totrans-2095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也 **被后移** 到：1.4.27
- en: 'References: [#7281](https://www.sqlalchemy.org/trac/ticket/7281)'
  id: totrans-2096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7281](https://www.sqlalchemy.org/trac/ticket/7281)
- en: '**[mysql] [removed]**'
  id: totrans-2097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [removed]**'
- en: Removed support for the OurSQL driver for MySQL and MariaDB, as this driver
    does not seem to be maintained.
  id: totrans-2098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了对 OurSQL 驱动程序的支持，该驱动程序不再维护。
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-2099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
- en: mariadb
  id: totrans-2100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mariadb
- en: '**[mariadb] [usecase]**'
  id: totrans-2101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [usecase]**'
- en: Added a new execution option `is_delete_using=True`, which is consumed by the
    ORM when using an ORM-enabled DELETE statement in conjunction with the “fetch”
    synchronization strategy; this option indicates that the DELETE statement is expected
    to use multiple tables, which on MariaDB is the DELETE..USING syntax. The option
    then indicates that RETURNING (newly implemented in SQLAlchemy 2.0 for MariaDB
    for [#7011](https://www.sqlalchemy.org/trac/ticket/7011)) should not be used for
    databases that are known to not support “DELETE..USING..RETURNING” syntax, even
    though they support “DELETE..USING”, which is MariaDB’s current capability.
  id: totrans-2102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的执行选项`is_delete_using=True`，当使用ORM启用的DELETE语句与“fetch”同步策略一起使用时，该选项将被消耗；此选项表示预计DELETE语句将使用多个表，在MariaDB上是DELETE..USING语法。然后，该选项指示对于已知不支持“DELETE..USING..RETURNING”语法的数据库，不应使用在MariaDB中新实现的SQLAlchemy
    2.0的RETURNING（对于[#7011](https://www.sqlalchemy.org/trac/ticket/7011)）。尽管它们支持“DELETE..USING”，但它们不支持“DELETE..USING..RETURNING”语法，这是MariaDB的当前能力。
- en: 'The rationale for this option is that the current workings of ORM-enabled DELETE
    doesn’t know up front if a DELETE statement is against multiple tables or not
    until compilation occurs, which is cached in any case, yet it needs to be known
    so that a SELECT for the to-be-deleted row can be emitted up front. Instead of
    applying an across-the-board performance penalty for all DELETE statements by
    proactively checking them all for this relatively unusual SQL pattern, the `is_delete_using=True`
    execution option is requested via a new exception message that is raised within
    the compilation step. This exception message is specifically (and only) raised
    when: the statement is an ORM-enabled DELETE where the “fetch” synchronization
    strategy has been requested; the backend is MariaDB or other backend with this
    specific limitation; the statement has been detected within the initial compilation
    that it would otherwise emit “DELETE..USING..RETURNING”. By applying the execution
    option, the ORM knows to run a SELECT upfront instead. A similar option is implemented
    for ORM-enabled UPDATE but there is not currently a backend where it is needed.'
  id: totrans-2103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个选项的原因是，ORM启用的DELETE当前不知道DELETE语句是否针对多个表，直到编译发生，无论如何，编译都会被缓存，但需要知道这一点，以便事先发出用于待删除行的SELECT。与为了预先检查所有DELETE语句以获取这种相对不寻常的SQL模式而对所有DELETE语句应用全面性能惩罚相比，通过在编译步骤中引发一个新的异常消息来请求`is_delete_using=True`执行选项。此异常消息仅在以下情况下特定（且仅）引发：语句是启用了ORM的DELETE，已请求“fetch”同步策略；后端是MariaDB或具有此特定限制的其他后端；已检测到初始编译中的语句，否则会发出“DELETE..USING..RETURNING”。通过应用执行选项，ORM知道要首先运行一个SELECT。ORM启用的UPDATE也实现了类似的选项，但目前还没有需要它的后端。
- en: 'References: [#8344](https://www.sqlalchemy.org/trac/ticket/8344)'
  id: totrans-2104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8344](https://www.sqlalchemy.org/trac/ticket/8344)
- en: '**[mariadb] [usecase]**'
  id: totrans-2105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [用例]**'
- en: Added INSERT..RETURNING and DELETE..RETURNING support for the MariaDB dialect.
    UPDATE..RETURNING is not yet supported by MariaDB. MariaDB supports INSERT..RETURNING
    as of 10.5.0 and DELETE..RETURNING as of 10.0.5.
  id: totrans-2106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为MariaDB方言添加了INSERT..RETURNING和DELETE..RETURNING支持。UPDATE..RETURNING尚未得到MariaDB的支持。从10.5.0开始，MariaDB支持INSERT..RETURNING，从10.0.5开始，支持DELETE..RETURNING。
- en: 'References: [#7011](https://www.sqlalchemy.org/trac/ticket/7011)'
  id: totrans-2107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7011](https://www.sqlalchemy.org/trac/ticket/7011)
- en: sqlite
  id: totrans-2108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-2109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [用例]**'
- en: Added new parameter to SQLite for reflection methods called `sqlite_include_internal=True`;
    when omitted, local tables that start with the prefix `sqlite_`, which per SQLite
    documentation are noted as “internal schema” tables such as the `sqlite_sequence`
    table generated to support “AUTOINCREMENT” columns, will not be included in reflection
    methods that return lists of local objects. This prevents issues for example when
    using Alembic autogenerate, which previously would consider these SQLite-generated
    tables as being remove from the model.
  id: totrans-2110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQLite的反射方法添加了一个名为`sqlite_include_internal=True`的新参数；当省略时，以`sqlite_`为前缀的本地表（根据SQLite文档，这些表被称为“内部模式”表，例如生成以支持“AUTOINCREMENT”列的`sqlite_sequence`表），不会包含在返回本地对象列表的反射方法中。这样可以避免在使用Alembic自动生成时出现问题，以前会将这些由SQLite生成的表视为从模型中移除。
- en: See also
  id: totrans-2111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reflecting internal schema tables](../dialects/sqlite.html#sqlite-include-internal)'
  id: totrans-2112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[反射内部模式表](../dialects/sqlite.html#sqlite-include-internal)'
- en: 'References: [#8234](https://www.sqlalchemy.org/trac/ticket/8234)'
  id: totrans-2113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8234](https://www.sqlalchemy.org/trac/ticket/8234)
- en: '**[sqlite] [usecase]**'
  id: totrans-2114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [用例]**'
- en: Added RETURNING support for the SQLite dialect. SQLite supports RETURNING since
    version 3.35.
  id: totrans-2115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQLite方言添加了RETURNING支持。自SQLite版本3.35起，SQLite支持RETURNING。
- en: 'References: [#6195](https://www.sqlalchemy.org/trac/ticket/6195)'
  id: totrans-2116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6195](https://www.sqlalchemy.org/trac/ticket/6195)
- en: '**[sqlite] [usecase]**'
  id: totrans-2117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [用例]**'
- en: The SQLite dialect now supports UPDATE..FROM syntax, for UPDATE statements that
    may refer to additional tables within the WHERE criteria of the statement without
    the need to use subqueries. This syntax is invoked automatically when using the
    [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct when more than one table or other entity or selectable is used.
  id: totrans-2118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite方言现在支持UPDATE..FROM语法，用于UPDATE语句可能在语句的WHERE条件中引用其他表而无需使用子查询。当使用[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造时，当使用多个表或其他实体或可选择时，此语法会自动调用。
- en: 'References: [#7185](https://www.sqlalchemy.org/trac/ticket/7185)'
  id: totrans-2119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7185](https://www.sqlalchemy.org/trac/ticket/7185)
- en: '**[sqlite] [performance] [bug]**'
  id: totrans-2120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [性能] [bug]**'
- en: The SQLite dialect now defaults to [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") when a file based database is used. This is set along
    with setting the `check_same_thread` parameter to `False`. It has been observed
    that the previous approach of defaulting to [`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool"), which does not hold onto database connections after
    they are released, did in fact have a measurable negative performance impact.
    As always, the pool class is customizable via the [`create_engine.poolclass`](../core/engines.html#sqlalchemy.create_engine.params.poolclass
    "sqlalchemy.create_engine") parameter.
  id: totrans-2121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用基于文件的数据库时，SQLite方言现在默认使用[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool")。这是与将`check_same_thread`参数设置为`False`一起设置的。已经观察到，默认使用[`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool")的先前方法，在释放数据库连接后不会保留连接，实际上会对性能产生可衡量的负面影响。如常，通过[`create_engine.poolclass`](../core/engines.html#sqlalchemy.create_engine.params.poolclass
    "sqlalchemy.create_engine")参数可以自定义池类。
- en: See also
  id: totrans-2122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[The SQLite dialect uses QueuePool for file-based databases](whatsnew_20.html#change-7490)'
  id: totrans-2123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQLite方言为基于文件的数据库使用QueuePool](whatsnew_20.html#change-7490)'
- en: 'References: [#7490](https://www.sqlalchemy.org/trac/ticket/7490)'
  id: totrans-2124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7490](https://www.sqlalchemy.org/trac/ticket/7490)
- en: '**[sqlite] [performance] [usecase]**'
  id: totrans-2125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [性能] [用例]**'
- en: SQLite datetime, date, and time datatypes now use Python standard lib `fromisoformat()`
    methods in order to parse incoming datetime, date, and time string values. This
    improves performance vs. the previous regular expression-based approach, and also
    automatically accommodates for datetime and time formats that contain either a
    six-digit “microseconds” format or a three-digit “milliseconds” format.
  id: totrans-2126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite的datetime、date和time数据类型现在使用Python标准库的`fromisoformat()`方法来解析传入的datetime、date和time字符串值。这比以前基于正则表达式的方法提高了性能，还自动适应包含六位“微秒”格式或三位“毫秒”格式的datetime和time格式。
- en: 'References: [#7029](https://www.sqlalchemy.org/trac/ticket/7029)'
  id: totrans-2127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7029](https://www.sqlalchemy.org/trac/ticket/7029)
- en: '**[sqlite] [bug]**'
  id: totrans-2128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Removed the warning that emits from the [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") type about DBAPIs not supporting Decimal values natively.
    This warning was oriented towards SQLite, which does not have any real way without
    additional extensions or workarounds of handling precision numeric values more
    than 15 significant digits as it only uses floating point math to represent numbers.
    As this is a known and documented limitation in SQLite itself, and not a quirk
    of the pysqlite driver, there’s no need for SQLAlchemy to warn for this. The change
    does not otherwise modify how precision numerics are handled. Values can continue
    to be handled as `Decimal()` or `float()` as configured with the [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") , and related datatypes, just without the ability to
    maintain precision beyond 15 significant digits when using SQLite, unless alternate
    representations such as strings are used.
  id: totrans-2129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了关于 [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    类型发出的关于 DBAPI 不原生支持 Decimal 值的警告。这个警告是针对 SQLite 的，因为 SQLite 没有任何真正的方法（除非使用额外的扩展或解决方法）来处理超过
    15 个有效数字的精度数值，因为它只使用浮点数来表示数字。由于这是 SQLite 本身已知且有文档记录的限制，而不是 pysqlite 驱动程序的怪癖，因此
    SQLAlchemy 不需要为此发出警告。这个更改不会修改精度数值的处理方式。值可以继续按照 [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")、[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 和相关数据类型配置为 `Decimal()` 或 `float()`，只是在使用 SQLite 时无法保持超过
    15 个有效数字的精度，除非使用字符串等替代表示方法。
- en: 'References: [#7299](https://www.sqlalchemy.org/trac/ticket/7299)'
  id: totrans-2130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7299](https://www.sqlalchemy.org/trac/ticket/7299)
- en: mssql
  id: totrans-2131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [usecase]**'
  id: totrans-2132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [用例]**'
- en: Implemented reflection of the “clustered index” flag `mssql_clustered` for the
    SQL Server dialect. Pull request courtesy John Lennox.
  id: totrans-2133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了 SQL Server 方言的“clustered index” 标志 `mssql_clustered` 的反射。感谢 John Lennox
    提供的拉取请求。
- en: 'References: [#8288](https://www.sqlalchemy.org/trac/ticket/8288)'
  id: totrans-2134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8288](https://www.sqlalchemy.org/trac/ticket/8288)
- en: '**[mssql] [usecase]**'
  id: totrans-2135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [用例]**'
- en: Added support table and column comments on MSSQL when creating a table. Added
    support for reflecting table comments. Thanks to Daniel Hall for the help in this
    pull request.
  id: totrans-2136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在创建表时，为 MSSQL 添加了对表和列注释的支持。添加了反射表注释的支持。感谢 Daniel Hall 在此拉取请求中的帮助。
- en: 'References: [#7844](https://www.sqlalchemy.org/trac/ticket/7844)'
  id: totrans-2137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7844](https://www.sqlalchemy.org/trac/ticket/7844)
- en: '**[mssql] [bug]**'
  id: totrans-2138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: The `use_setinputsizes` parameter for the `mssql+pyodbc` dialect now defaults
    to `True`; this is so that non-unicode string comparisons are bound by pyodbc
    to pyodbc.SQL_VARCHAR rather than pyodbc.SQL_WVARCHAR, allowing indexes against
    VARCHAR columns to take effect. In order for the `fast_executemany=True` parameter
    to continue functioning, the `use_setinputsizes` mode now skips the `cursor.setinputsizes()`
    call specifically when `fast_executemany` is True and the specific method in use
    is `cursor.executemany()`, which doesn’t support setinputsizes. The change also
    adds appropriate pyodbc DBAPI typing to values that are typed as [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText"), as well as altered the base [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") datatype to consider JSON string values as [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") rather than [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String").
  id: totrans-2139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mssql+pyodbc` 方言的 `use_setinputsizes` 参数现在默认为 `True`；这样非 Unicode 字符串比较将由 pyodbc
    绑定到 pyodbc.SQL_VARCHAR 而不是 pyodbc.SQL_WVARCHAR，从而使得对 VARCHAR 列的索引生效。为了让 `fast_executemany=True`
    参数继续正常工作，`use_setinputsizes` 模式现在在 `fast_executemany` 为 True 且使用的具体方法是 `cursor.executemany()`
    时会跳过 `cursor.setinputsizes()` 调用，因为该方法不支持 setinputsizes。此更改还为被标记为 [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") 或 [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") 的值添加了适当的 pyodbc DBAPI 类型，并将基础的 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") 数据类型修改为将 JSON 字符串值视为 [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") 而不是 [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")。'
- en: 'References: [#8177](https://www.sqlalchemy.org/trac/ticket/8177)'
  id: totrans-2140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8177](https://www.sqlalchemy.org/trac/ticket/8177)
- en: '**[mssql] [removed]**'
  id: totrans-2141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [已移除]**'
- en: Removed support for the mxodbc driver due to lack of testing support. ODBC users
    may use the pyodbc dialect which is fully supported.
  id: totrans-2142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于缺乏测试支持，已移除对 mxodbc 驱动程序的支持。ODBC 用户可以使用完全受支持的 pyodbc 方言。
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-2143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
- en: oracle
  id: totrans-2144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-2145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Add support for the new oracle driver `oracledb`.
  id: totrans-2146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加对新的 Oracle 驱动程序 `oracledb` 的支持。
- en: See also
  id: totrans-2147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Dialect support for oracledb](whatsnew_20.html#ticket-8054)'
  id: totrans-2148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对 oracledb 的方言支持](whatsnew_20.html#ticket-8054)'
- en: '[python-oracledb](../dialects/oracle.html#oracledb)'
  id: totrans-2149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[python-oracledb](../dialects/oracle.html#oracledb)'
- en: 'References: [#8054](https://www.sqlalchemy.org/trac/ticket/8054)'
  id: totrans-2150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8054](https://www.sqlalchemy.org/trac/ticket/8054)
- en: '**[oracle] [feature]**'
  id: totrans-2151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Implemented DDL and reflection support for `FLOAT` datatypes which include an
    explicit “binary_precision” value. Using the Oracle-specific [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") datatype, the new parameter [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") may be specified which will render Oracle’s
    precision for floating point types directly. This value is interpreted during
    reflection. Upon reflecting back a `FLOAT` datatype, the datatype returned is
    one of [`DOUBLE_PRECISION`](../core/type_basics.html#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION") for a `FLOAT` for a precision of 126 (this
    is also Oracle’s default precision for `FLOAT`), [`REAL`](../core/type_basics.html#sqlalchemy.types.REAL
    "sqlalchemy.types.REAL") for a precision of 63, and [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") for a custom precision, as per Oracle documentation.
  id: totrans-2152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '实现了 `FLOAT` 数据类型的 DDL 和反射支持，其中包括显式的“binary_precision”值。使用特定于 Oracle 的 [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") 数据类型，可以指定新参数 [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT")，这将直接呈现 Oracle 的浮点类型精度。此值在反射期间解释。在反射回 `FLOAT`
    数据类型时，返回的数据类型是 [`DOUBLE_PRECISION`](../core/type_basics.html#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION")（对于精度为 126 的 `FLOAT`，这也是 Oracle 的默认精度）、[`REAL`](../core/type_basics.html#sqlalchemy.types.REAL
    "sqlalchemy.types.REAL")（对于精度为 63）、以及 [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT")（对于自定义精度，按照 Oracle 文档）。 '
- en: As part of this change, the generic [`Float.precision`](../core/type_basics.html#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") value is explicitly rejected when generating DDL for
    Oracle, as this precision cannot be accurately converted to “binary precision”;
    instead, an error message encourages the use of [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") so that Oracle’s specific form of
    precision may be chosen exactly. This is a backwards-incompatible change in behavior,
    as the previous “precision” value was silently ignored for Oracle.
  id: totrans-2153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变更的一部分，当为 Oracle 生成 DDL 时，明确拒绝了通用的 [`Float.precision`](../core/type_basics.html#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") 值，因为此精度无法准确转换为“二进制精度”；相反，错误消息鼓励使用 [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")，以便精确选择 Oracle 的特定精度形式。这是一种与以往行为不兼容的更改，因为以前的“精度”值对于
    Oracle 被静默地忽略。
- en: See also
  id: totrans-2154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Oracle FLOAT type with binary precision; decimal precision not accepted
    directly](whatsnew_20.html#change-5465-oracle)'
  id: totrans-2155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的 Oracle FLOAT 类型，具有二进制精度；不直接接受十进制精度](whatsnew_20.html#change-5465-oracle)'
- en: 'References: [#5465](https://www.sqlalchemy.org/trac/ticket/5465)'
  id: totrans-2156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5465](https://www.sqlalchemy.org/trac/ticket/5465)
- en: '**[oracle] [feature]**'
  id: totrans-2157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: 'Full “RETURNING” support is implemented for the cx_Oracle dialect, covering
    two individual types of functionality:'
  id: totrans-2158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 cx_Oracle 方言，完全实现了“RETURNING”支持，涵盖了两种个别功能：
- en: multi-row RETURNING is implemented, meaning multiple RETURNING rows are now
    received for DML statements that produce more than one row for RETURNING.
  id: totrans-2159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现了多行 RETURNING，意味着对于产生多于一个 RETURNING 行的 DML 语句，现在将收到多个 RETURNING 行。
- en: ”executemany RETURNING” is also implemented - this allows RETURNING to yield
    row-per statement when `cursor.executemany()` is used. The implementation of this
    part of the feature delivers dramatic performance improvements to ORM inserts,
    in the same way as was added for psycopg2 in the SQLAlchemy 1.4 change [ORM Batch
    inserts with psycopg2 now batch statements with RETURNING in most cases](migration_14.html#change-5263).
  id: totrans-2160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"executemany RETURNING" 也已实现 - 这允许当使用 `cursor.executemany()` 时，RETURNING 每个语句产生一行。这一特性的实现为
    ORM 插入提供了显著的性能改进，就像 SQLAlchemy 1.4 变更 [ORM Batch inserts with psycopg2 now batch
    statements with RETURNING in most cases](migration_14.html#change-5263) 中为 psycopg2
    添加的一样。'
- en: 'References: [#6245](https://www.sqlalchemy.org/trac/ticket/6245)'
  id: totrans-2161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6245](https://www.sqlalchemy.org/trac/ticket/6245)
- en: '**[oracle] [usecase]**'
  id: totrans-2162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [用例]**'
- en: Oracle will now use FETCH FIRST N ROWS / OFFSET syntax for limit/offset support
    by default for Oracle 12c and above. This syntax was already available when [`Select.fetch()`](../core/selectable.html#sqlalchemy.sql.expression.Select.fetch
    "sqlalchemy.sql.expression.Select.fetch") were used directly, it’s now implied
    for [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") and [`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset") as well.
  id: totrans-2163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 现在将在 Oracle 12c 及以上版本中默认使用 FETCH FIRST N ROWS / OFFSET 语法来支持 limit/offset。当直接使用
    [`Select.fetch()`](../core/selectable.html#sqlalchemy.sql.expression.Select.fetch
    "sqlalchemy.sql.expression.Select.fetch") 时，该语法已经可用，现在对 [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") 和 [`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset") 也适用。
- en: 'References: [#8221](https://www.sqlalchemy.org/trac/ticket/8221)'
  id: totrans-2164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8221](https://www.sqlalchemy.org/trac/ticket/8221)
- en: '**[oracle] [change]**'
  id: totrans-2165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [更改]**'
- en: Materialized views on oracle are now reflected as views. On previous versions
    of SQLAlchemy the views were returned among the table names, not among the view
    names. As a side effect of this change they are not reflected by default by `MetaData.reflect()`,
    unless `views=True` is set. To get a list of materialized views, use the new inspection
    method [`Inspector.get_materialized_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names").
  id: totrans-2166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Oracle 上，物化视图现在被反映为视图。在之前的 SQLAlchemy 版本中，视图会在表名中返回，而不在视图名中返回。由于此更改的副作用，默认情况下它们不会被
    `MetaData.reflect()` 反映，除非设置了 `views=True`。要获取物化视图列表，请使用新的检查方法 [`Inspector.get_materialized_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names")。
- en: '**[oracle] [bug]**'
  id: totrans-2167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Adjustments made to the BLOB / CLOB / NCLOB datatypes in the cx_Oracle and oracledb
    dialects, to improve performance based on recommendations from Oracle developers.
  id: totrans-2168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 cx_Oracle 和 oracledb 方言中的 BLOB / CLOB / NCLOB 数据类型进行了调整，以根据 Oracle 开发人员的建议改善性能。
- en: 'References: [#7494](https://www.sqlalchemy.org/trac/ticket/7494)'
  id: totrans-2169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7494](https://www.sqlalchemy.org/trac/ticket/7494)
- en: '**[oracle] [bug]**'
  id: totrans-2170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Related to the deprecation for [`create_engine.implicit_returning`](../core/engines.html#sqlalchemy.create_engine.params.implicit_returning
    "sqlalchemy.create_engine"), the “implicit_returning” feature is now enabled for
    the Oracle dialect in all cases; previously, the feature would be turned off when
    an Oracle 8/8i version were detected, however online documentation indicates both
    versions support the same RETURNING syntax as modern versions.
  id: totrans-2171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于 [`create_engine.implicit_returning`](../core/engines.html#sqlalchemy.create_engine.params.implicit_returning
    "sqlalchemy.create_engine") 弃用的相关内容，现在 “implicit_returning” 特性在所有情况下都为 Oracle
    方言启用；以前，当检测到 Oracle 8/8i 版本时，该特性会被关闭，然而在线文档显示这两个版本都支持与现代版本相同的 RETURNING 语法。
- en: 'References: [#6962](https://www.sqlalchemy.org/trac/ticket/6962)'
  id: totrans-2172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6962](https://www.sqlalchemy.org/trac/ticket/6962)
- en: '**[oracle]**'
  id: totrans-2173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: cx_Oracle 7 is now the minimum version for cx_Oracle.
  id: totrans-2174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_Oracle 7 现在是 cx_Oracle 的最低版本。
- en: misc
  id: totrans-2175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[removed] [sybase]**'
  id: totrans-2176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[已移除] [sybase]**'
- en: Removed the “sybase” internal dialect that was deprecated in previous SQLAlchemy
    versions. Third party dialect support is available.
  id: totrans-2177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了在之前的 SQLAlchemy 版本中已弃用的 “sybase” 内部方言。第三方方言支持可用。
- en: See also
  id: totrans-2178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[External Dialects](../dialects/index.html)'
  id: totrans-2179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[外部方言](../dialects/index.html)'
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-2180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
- en: '**[removed] [firebird]**'
  id: totrans-2181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[已移除] [firebird]**'
- en: Removed the “firebird” internal dialect that was deprecated in previous SQLAlchemy
    versions. Third party dialect support is available.
  id: totrans-2182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在以前的SQLAlchemy版本中已弃用的“firebird”内部方言。第三方方言支持可用。
- en: See also
  id: totrans-2183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[External Dialects](../dialects/index.html)'
  id: totrans-2184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[外部方言](../dialects/index.html)'
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-2185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
- en: 2.0.30
  id: totrans-2186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.30
- en: no release date
  id: totrans-2187
  prefs: []
  type: TYPE_NORMAL
  zh: 无发布日期
- en: orm
  id: totrans-2188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added new attribute [`ORMExecuteState.is_from_statement`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_from_statement
    "sqlalchemy.orm.ORMExecuteState.is_from_statement"), to detect statements of the
    form `select().from_statement()`, and also enhanced `FromStatement` to set [`ORMExecuteState.is_select`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_select
    "sqlalchemy.orm.ORMExecuteState.is_select"), [`ORMExecuteState.is_insert`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_insert
    "sqlalchemy.orm.ORMExecuteState.is_insert"), [`ORMExecuteState.is_update`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_update
    "sqlalchemy.orm.ORMExecuteState.is_update"), and [`ORMExecuteState.is_delete`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_delete
    "sqlalchemy.orm.ORMExecuteState.is_delete") according to the element that is sent
    to the [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") method itself.
  id: totrans-2190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新属性[`ORMExecuteState.is_from_statement`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_from_statement
    "sqlalchemy.orm.ORMExecuteState.is_from_statement")，用于检测形式为`select().from_statement()`的语句，并增强了`FromStatement`以根据发送到[`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement")方法本身的元素设置[`ORMExecuteState.is_select`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_select
    "sqlalchemy.orm.ORMExecuteState.is_select")、[`ORMExecuteState.is_insert`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_insert
    "sqlalchemy.orm.ORMExecuteState.is_insert")、[`ORMExecuteState.is_update`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_update
    "sqlalchemy.orm.ORMExecuteState.is_update")和[`ORMExecuteState.is_delete`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_delete
    "sqlalchemy.orm.ORMExecuteState.is_delete")。
- en: 'References: [#11220](https://www.sqlalchemy.org/trac/ticket/11220)'
  id: totrans-2191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11220](https://www.sqlalchemy.org/trac/ticket/11220)
- en: engine
  id: totrans-2192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-2193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue in the [`Connection.execution_options.logging_token`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options") option, where changing the value
    of `logging_token` on a connection that has already logged messages would not
    be updated to reflect the new logging token. This in particular prevented the
    use of [`Session.connection()`](../orm/session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") to change the option on the connection, since
    the BEGIN logging message would already have been emitted.
  id: totrans-2194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Connection.execution_options.logging_token`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options")选项中的问题，其中更改已经记录了消息的连接的`logging_token`值不会更新以反映新的记录令牌。特别是这阻止了使用[`Session.connection()`](../orm/session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection")在连接上更改选项，因为BEGIN记录消息已经被发出。
- en: 'References: [#11210](https://www.sqlalchemy.org/trac/ticket/11210)'
  id: totrans-2195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11210](https://www.sqlalchemy.org/trac/ticket/11210)
- en: typing
  id: totrans-2196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug] [regression]**'
  id: totrans-2197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug] [regression]**'
- en: Fixed typing regression caused by PR [#11055](https://www.sqlalchemy.org/trac/ticket/11055)
    in version 2.0.29 that attempted to add `ParamSpec` to the asyncio `run_sync()`
    methods, where using [`AsyncConnection.run_sync()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") with [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") would fail on mypy due to a bug. See [https://github.com/python/mypy/issues/17093](https://github.com/python/mypy/issues/17093)
    for details. Pull request courtesy of Francisco R. Del Roio
  id: totrans-2198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在版本2.0.29中由PR [#11055](https://www.sqlalchemy.org/trac/ticket/11055)引起的输入退化，该版本尝试将`ParamSpec`添加到asyncio
    `run_sync()`方法中，其中使用[`AsyncConnection.run_sync()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync")与[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")将由于bug在mypy上失败。有关详细信息，请参见[https://github.com/python/mypy/issues/17093](https://github.com/python/mypy/issues/17093)。Pull
    request由Francisco R. Del Roio提供。
- en: 'References: [#11200](https://www.sqlalchemy.org/trac/ticket/11200)'
  id: totrans-2199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11200](https://www.sqlalchemy.org/trac/ticket/11200)
- en: misc
  id: totrans-2200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [test]**'
  id: totrans-2201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [test]**'
- en: Ensure the `PYTHONPATH` variable is properly initialized when using `subprocess.run`
    in the tests.
  id: totrans-2202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在测试中使用`subprocess.run`时，请确保`PYTHONPATH`变量正确初始化。
- en: 'References: [#11268](https://www.sqlalchemy.org/trac/ticket/11268)'
  id: totrans-2203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11268](https://www.sqlalchemy.org/trac/ticket/11268)
- en: orm
  id: totrans-2204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added new attribute [`ORMExecuteState.is_from_statement`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_from_statement
    "sqlalchemy.orm.ORMExecuteState.is_from_statement"), to detect statements of the
    form `select().from_statement()`, and also enhanced `FromStatement` to set [`ORMExecuteState.is_select`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_select
    "sqlalchemy.orm.ORMExecuteState.is_select"), [`ORMExecuteState.is_insert`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_insert
    "sqlalchemy.orm.ORMExecuteState.is_insert"), [`ORMExecuteState.is_update`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_update
    "sqlalchemy.orm.ORMExecuteState.is_update"), and [`ORMExecuteState.is_delete`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_delete
    "sqlalchemy.orm.ORMExecuteState.is_delete") according to the element that is sent
    to the [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") method itself.
  id: totrans-2206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新属性[`ORMExecuteState.is_from_statement`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_from_statement
    "sqlalchemy.orm.ORMExecuteState.is_from_statement")，用于检测形式为`select().from_statement()`的语句，并增强了`FromStatement`以根据发送到[`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement")方法本身的元素设置[`ORMExecuteState.is_select`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_select
    "sqlalchemy.orm.ORMExecuteState.is_select")、[`ORMExecuteState.is_insert`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_insert
    "sqlalchemy.orm.ORMExecuteState.is_insert")、[`ORMExecuteState.is_update`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_update
    "sqlalchemy.orm.ORMExecuteState.is_update")和[`ORMExecuteState.is_delete`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_delete
    "sqlalchemy.orm.ORMExecuteState.is_delete")。
- en: 'References: [#11220](https://www.sqlalchemy.org/trac/ticket/11220)'
  id: totrans-2207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11220](https://www.sqlalchemy.org/trac/ticket/11220)
- en: engine
  id: totrans-2208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue in the [`Connection.execution_options.logging_token`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options") option, where changing the value
    of `logging_token` on a connection that has already logged messages would not
    be updated to reflect the new logging token. This in particular prevented the
    use of [`Session.connection()`](../orm/session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") to change the option on the connection, since
    the BEGIN logging message would already have been emitted.
  id: totrans-2210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Connection.execution_options.logging_token`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.logging_token
    "sqlalchemy.engine.Connection.execution_options")选项中的问题，其中在已经记录了消息的连接上更改`logging_token`的值不会更新以反映新的日志令牌。特别是这阻止了使用[`Session.connection()`](../orm/session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection")在连接上更改选项，因为BEGIN日志消息已经被发出。
- en: 'References: [#11210](https://www.sqlalchemy.org/trac/ticket/11210)'
  id: totrans-2211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11210](https://www.sqlalchemy.org/trac/ticket/11210)
- en: typing
  id: totrans-2212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug] [regression]**'
  id: totrans-2213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug] [regression]**'
- en: Fixed typing regression caused by PR [#11055](https://www.sqlalchemy.org/trac/ticket/11055)
    in version 2.0.29 that attempted to add `ParamSpec` to the asyncio `run_sync()`
    methods, where using [`AsyncConnection.run_sync()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync") with [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") would fail on mypy due to a bug. See [https://github.com/python/mypy/issues/17093](https://github.com/python/mypy/issues/17093)
    for details. Pull request courtesy of Francisco R. Del Roio
  id: totrans-2214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由版本2.0.29中PR [#11055](https://www.sqlalchemy.org/trac/ticket/11055)引起的类型回归，该PR试图将`ParamSpec`添加到asyncio
    `run_sync()`方法中，其中在mypy上使用[`AsyncConnection.run_sync()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.run_sync
    "sqlalchemy.ext.asyncio.AsyncConnection.run_sync")与[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")会由于错误而在mypy上失败。有关详细信息，请参见[https://github.com/python/mypy/issues/17093](https://github.com/python/mypy/issues/17093)。感谢Francisco
    R. Del Roio提供的拉取请求。
- en: 'References: [#11200](https://www.sqlalchemy.org/trac/ticket/11200)'
  id: totrans-2215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11200](https://www.sqlalchemy.org/trac/ticket/11200)
- en: misc
  id: totrans-2216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [test]**'
  id: totrans-2217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [test]**'
- en: Ensure the `PYTHONPATH` variable is properly initialized when using `subprocess.run`
    in the tests.
  id: totrans-2218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在测试中使用`subprocess.run`时，请确保`PYTHONPATH`变量正确初始化。
- en: 'References: [#11268](https://www.sqlalchemy.org/trac/ticket/11268)'
  id: totrans-2219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11268](https://www.sqlalchemy.org/trac/ticket/11268)
- en: 2.0.29
  id: totrans-2220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.29
- en: 'Released: March 23, 2024'
  id: totrans-2221
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2024年3月23日
- en: orm
  id: totrans-2222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-2223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added support for the [**PEP 695**](https://peps.python.org/pep-0695/) `TypeAliasType`
    construct as well as the python 3.12 native `type` keyword to work with ORM Annotated
    Declarative form when using these constructs to link to a [**PEP 593**](https://peps.python.org/pep-0593/)
    `Annotated` container, allowing the resolution of the `Annotated` to proceed when
    these constructs are used in a [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") typing container.
  id: totrans-2224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对[**PEP 695**](https://peps.python.org/pep-0695/) `TypeAliasType` 构造的支持，以及与python
    3.12本地 `type` 关键字配合使用ORM注释声明形式时，当使用这些构造将链接到 [**PEP 593**](https://peps.python.org/pep-0593/)
    `Annotated` 容器时，允许解析`Annotated`的过程。
- en: 'References: [#11130](https://www.sqlalchemy.org/trac/ticket/11130)'
  id: totrans-2225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#11130](https://www.sqlalchemy.org/trac/ticket/11130)
- en: '**[orm] [bug]**'
  id: totrans-2226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed Declarative issue where typing a relationship using [`Relationship`](../orm/internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship") rather than [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") would inadvertently pull in the “dynamic” relationship
    loader strategy for that attribute.
  id: totrans-2227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了声明性问题，其中使用[`Relationship`](../orm/internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship")而不是 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 来对关系进行类型化，会无意中为该属性引入“动态”关系加载器策略。
- en: 'References: [#10611](https://www.sqlalchemy.org/trac/ticket/10611)'
  id: totrans-2228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#10611](https://www.sqlalchemy.org/trac/ticket/10611)
- en: '**[orm] [bug]**'
  id: totrans-2229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in ORM annotated declarative where using [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") with an [`mapped_column.index`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.index
    "sqlalchemy.orm.mapped_column") or [`mapped_column.unique`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.unique
    "sqlalchemy.orm.mapped_column") setting of False would be overridden by an incoming
    `Annotated` element that featured that parameter set to `True`, even though the
    immediate [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") element is more specific and should take precedence.
    The logic to reconcile the booleans has been enhanced to accommodate a local value
    of `False` as still taking precedence over an incoming `True` value from the annotated
    element.
  id: totrans-2230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在ORM注释声明中使用[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")时出现的问题，其中使用[`mapped_column.index`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.index
    "sqlalchemy.orm.mapped_column")或[`mapped_column.unique`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.unique
    "sqlalchemy.orm.mapped_column")设置为`False`的情况将被一个具有该参数设置为`True`的传入`Annotated`元素覆盖，即使直接[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")元素更具体且应该优先。增强了协调布尔值的逻辑，以适应本地值为`False`仍优先于来自注释元素的传入`True`值的情况。
- en: 'References: [#11091](https://www.sqlalchemy.org/trac/ticket/11091)'
  id: totrans-2231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#11091](https://www.sqlalchemy.org/trac/ticket/11091)
- en: '**[orm] [bug] [regression]**'
  id: totrans-2232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression from version 2.0.28 caused by the fix for [#11085](https://www.sqlalchemy.org/trac/ticket/11085)
    where the newer method of adjusting post-cache bound parameter values would interefere
    with the implementation for the [`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload") loader option, which has some more legacy patterns
    in use internally, when the additional loader criteria feature were used with
    this loader option.
  id: totrans-2233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从版本2.0.28引入的回归，该回归是由于修复了[#11085](https://www.sqlalchemy.org/trac/ticket/11085)中新方法调整后缓存的参数值，该方法会干扰到[`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload")加载器选项的实现，当使用此加载器选项与此加载器选项一起使用时，会使用一些更多的旧模式。
- en: 'References: [#11173](https://www.sqlalchemy.org/trac/ticket/11173)'
  id: totrans-2234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#11173](https://www.sqlalchemy.org/trac/ticket/11173)
- en: engine
  id: totrans-2235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue in [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    feature where using a primary key column with an “inline execute” default generator
    such as an explicit [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") with an explcit schema name, while at the same time
    using the [`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") feature would fail to render
    the sequence or the parameters properly, leading to errors.
  id: totrans-2237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[“INSERT语句的“Insert Many Values”行为](../core/connections.html#engine-insertmanyvalues)功能中的问题，其中使用具有“内联执行”默认生成器的主键列，例如显式[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")和显式架构名称，同时使用[`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options")功能将无法正确呈现序列或参数，导致错误。
- en: 'References: [#11157](https://www.sqlalchemy.org/trac/ticket/11157)'
  id: totrans-2238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11157](https://www.sqlalchemy.org/trac/ticket/11157)
- en: '**[engine] [bug]**'
  id: totrans-2239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [错误]**'
- en: Made a change to the adjustment made in version 2.0.10 for [#9618](https://www.sqlalchemy.org/trac/ticket/9618),
    which added the behavior of reconciling RETURNING rows from a bulk INSERT to the
    parameters that were passed to it. This behavior included a comparison of already-DB-converted
    bound parameter values against returned row values that was not always “symmetrical”
    for SQL column types such as UUIDs, depending on specifics of how different DBAPIs
    receive such values versus how they return them, necessitating the need for additional
    “sentinel value resolver” methods on these column types. Unfortunately this broke
    third party column types such as UUID/GUID types in libraries like SQLModel which
    did not implement this special method, raising an error “Can’t match sentinel
    values in result set to parameter sets”. Rather than attempt to further explain
    and document this implementation detail of the “insertmanyvalues” feature including
    a public version of the new method, the approach is intead revised to no longer
    need this extra conversion step, and the logic that does the comparison now works
    on the pre-converted bound parameter value compared to the post-result-processed
    value, which should always be of a matching datatype. In the unusual case that
    a custom SQL column type that also happens to be used in a “sentinel” column for
    bulk INSERT is not receiving and returning the same value type, the “Can’t match”
    error will be raised, however the mitigation is straightforward in that the same
    Python datatype should be passed as that returned.
  id: totrans-2240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本2.0.10中对[#9618](https://www.sqlalchemy.org/trac/ticket/9618)所做的调整进行了更改，该版本添加了批量INSERT的RE​​TURNING行协调到传递给它的参数的行为。此行为包括已转换为DB的绑定参数值与返回的行值的比较，并不总是对于SQL列类型（例如UUID）“对称”，具体取决于不同DBAPI接收此类值的方式与它们返回的方式，因此需要在这些列类型上增加额外的“哨兵值解析器”方法。不幸的是，这破坏了第三方列类型，如SQLModel中未实现此特殊方法的UUID/GUID类型，引发了错误“无法将结果集中的哨兵值与参数集匹配”。与其尝试进一步解释和文档化此“insertmanyvalues”特性的实现细节，包括新方法的公共版本，不如修改方法以不再需要此额外的转换步骤，并且进行比较的逻辑现在作用于预转换的绑定参数值与后处理值相比，后者应始终是匹配的数据类型。在罕见情况下，如果自定义SQL列类型也恰好用于批量INSERT的“哨兵”列，并且未接收和返回相同的值类型，则将引发“无法匹配”错误，但是缓解方法很简单，即传递与返回的相同Python数据类型。
- en: 'References: [#11160](https://www.sqlalchemy.org/trac/ticket/11160)'
  id: totrans-2241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11160](https://www.sqlalchemy.org/trac/ticket/11160)
- en: sql
  id: totrans-2242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [regression]**'
  id: totrans-2243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误] [回归]**'
- en: Fixed regression from the 1.4 series where the refactor of the [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method introduced at [“with_variant()”
    clones the original TypeEngine rather than changing the type](whatsnew_20.html#change-6980)
    failed to accommodate for the `.copy()` method, which will lose the variant mappings
    that are set up. This becomes an issue for the very specific case of a “schema”
    type, which includes types such as [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") and [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), when they are then used in the context of an ORM Declarative
    mapping with mixins where copying of types comes into play. The variant mapping
    is now copied as well.
  id: totrans-2244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.4 系列中的回归问题，在 [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 方法的重构中引入的问题，该方法在 [“with_variant()”
    克隆原始 TypeEngine 而不是更改类型](whatsnew_20.html#change-6980) 中未能考虑到 `.copy()` 方法，这将丢失设置的变体映射。对于“schema”类型的非常特定情况，这会成为一个问题，其中包括
    [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    和 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    等类型，当它们在 ORM Declarative 映射中与 mixin 一起使用时，类型的复制就会发挥作用。现在也复制了变体映射。
- en: 'References: [#11176](https://www.sqlalchemy.org/trac/ticket/11176)'
  id: totrans-2245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11176](https://www.sqlalchemy.org/trac/ticket/11176)
- en: typing
  id: totrans-2246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-2247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue allowing asyncio `run_sync()` methods to correctly type the
    parameters according to the callable that was passed, making use of [**PEP 612**](https://peps.python.org/pep-0612/)
    `ParamSpec` variables. Pull request courtesy Francisco R. Del Roio.
  id: totrans-2248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了允许 asyncio 的 `run_sync()` 方法正确对参数进行类型标记的问题，根据传递的可调用对象使用 [**PEP 612**](https://peps.python.org/pep-0612/)
    `ParamSpec` 变量。感谢 Francisco R. Del Roio 提供的拉取请求。
- en: 'References: [#11055](https://www.sqlalchemy.org/trac/ticket/11055)'
  id: totrans-2249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11055](https://www.sqlalchemy.org/trac/ticket/11055)
- en: postgresql
  id: totrans-2250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-2251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: The PostgreSQL dialect now returns [`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN") instances when reflecting a column that
    has a domain as type. Previously, the domain data type was returned instead. As
    part of this change, the domain reflection was improved to also return the collation
    of the text types. Pull request courtesy of Thomas Stephenson.
  id: totrans-2252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL 方言现在在反射具有域作为类型的列时返回 [`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN") 实例。之前，返回的是域数据类型。作为此更改的一部分，改进了域反射以同时返回文本类型的排序规则。感谢
    Thomas Stephenson 提供的拉取请求。
- en: 'References: [#10693](https://www.sqlalchemy.org/trac/ticket/10693)'
  id: totrans-2253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10693](https://www.sqlalchemy.org/trac/ticket/10693)
- en: tests
  id: totrans-2254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-2255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Backported to SQLAlchemy 2.0 an improvement to the test suite with regards to
    how asyncio related tests are run, now using the newer Python 3.11 `asyncio.Runner`
    or a backported equivalent, rather than relying on the previous implementation
    based on `asyncio.get_running_loop()`. This should hopefully prevent issues with
    large suite runs on CPU loaded hardware where the event loop seems to become corrupted,
    leading to cascading failures.
  id: totrans-2256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已将改进后的测试套件应用于 SQLAlchemy 2.0，改进了与 asyncio 相关的测试运行方式，现在使用更新的 Python 3.11 `asyncio.Runner`
    或其等价物，而不是依赖于先前基于 `asyncio.get_running_loop()` 的实现。这应该能够在 CPU 负载硬件上运行大量套件时防止事件循环出现故障，导致级联失败。
- en: 'References: [#11187](https://www.sqlalchemy.org/trac/ticket/11187)'
  id: totrans-2257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11187](https://www.sqlalchemy.org/trac/ticket/11187)
- en: orm
  id: totrans-2258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-2259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added support for the [**PEP 695**](https://peps.python.org/pep-0695/) `TypeAliasType`
    construct as well as the python 3.12 native `type` keyword to work with ORM Annotated
    Declarative form when using these constructs to link to a [**PEP 593**](https://peps.python.org/pep-0593/)
    `Annotated` container, allowing the resolution of the `Annotated` to proceed when
    these constructs are used in a [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") typing container.
  id: totrans-2260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 [**PEP 695**](https://peps.python.org/pep-0695/) `TypeAliasType` 构造的支持，以及与
    Python 3.12 本地 `type` 关键字一起使用 ORM Annotated Declarative 形式时的支持，当使用这些构造链接到 [**PEP
    593**](https://peps.python.org/pep-0593/) `Annotated` 容器时，允许解析 `Annotated` 时继续进行。
- en: 'References: [#11130](https://www.sqlalchemy.org/trac/ticket/11130)'
  id: totrans-2261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11130](https://www.sqlalchemy.org/trac/ticket/11130)
- en: '**[orm] [bug]**'
  id: totrans-2262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed Declarative issue where typing a relationship using [`Relationship`](../orm/internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship") rather than [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") would inadvertently pull in the “dynamic” relationship
    loader strategy for that attribute.
  id: totrans-2263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了声明式中的问题，其中使用 [`Relationship`](../orm/internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship") 而不是 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 来定义关系会无意中引入该属性的“动态”关系加载器策略。
- en: 'References: [#10611](https://www.sqlalchemy.org/trac/ticket/10611)'
  id: totrans-2264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10611](https://www.sqlalchemy.org/trac/ticket/10611)
- en: '**[orm] [bug]**'
  id: totrans-2265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in ORM annotated declarative where using [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") with an [`mapped_column.index`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.index
    "sqlalchemy.orm.mapped_column") or [`mapped_column.unique`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.unique
    "sqlalchemy.orm.mapped_column") setting of False would be overridden by an incoming
    `Annotated` element that featured that parameter set to `True`, even though the
    immediate [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") element is more specific and should take precedence.
    The logic to reconcile the booleans has been enhanced to accommodate a local value
    of `False` as still taking precedence over an incoming `True` value from the annotated
    element.
  id: totrans-2266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用ORM注释的声明式时，使用带有 [`mapped_column.index`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.index
    "sqlalchemy.orm.mapped_column") 或 [`mapped_column.unique`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.unique
    "sqlalchemy.orm.mapped_column") 设置为 False 的 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 会被传入的 `Annotated` 元素覆盖，即使直接的 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 元素更具体且应该优先。调解布尔值的逻辑已经得到增强，以适应本地值为 `False` 的情况，仍然优先于注释元素传入的
    `True` 值。
- en: 'References: [#11091](https://www.sqlalchemy.org/trac/ticket/11091)'
  id: totrans-2267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#11091](https://www.sqlalchemy.org/trac/ticket/11091)
- en: '**[orm] [bug] [regression]**'
  id: totrans-2268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression from version 2.0.28 caused by the fix for [#11085](https://www.sqlalchemy.org/trac/ticket/11085)
    where the newer method of adjusting post-cache bound parameter values would interefere
    with the implementation for the [`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload") loader option, which has some more legacy patterns
    in use internally, when the additional loader criteria feature were used with
    this loader option.
  id: totrans-2269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从版本2.0.28开始由于对[#11085](https://www.sqlalchemy.org/trac/ticket/11085)的修复而引起的回归，新的方法调整后缓存的参数值会干扰[`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload")加载器选项的实现，当使用额外的加载器条件特性与此加载器选项一起使用时，内部使用了一些更传统的模式。
- en: 'References: [#11173](https://www.sqlalchemy.org/trac/ticket/11173)'
  id: totrans-2270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#11173](https://www.sqlalchemy.org/trac/ticket/11173)
- en: engine
  id: totrans-2271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue in [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    feature where using a primary key column with an “inline execute” default generator
    such as an explicit [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") with an explcit schema name, while at the same time
    using the [`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") feature would fail to render
    the sequence or the parameters properly, leading to errors.
  id: totrans-2273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    功能中的问题，其中使用主键列与“内联执行”默认生成器（如显式的 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 并带有显式模式名称），同时使用 [`Connection.execution_options.schema_translate_map`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options") 功能将无法正确渲染序列或参数，导致错误。
- en: 'References: [#11157](https://www.sqlalchemy.org/trac/ticket/11157)'
  id: totrans-2274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#11157](https://www.sqlalchemy.org/trac/ticket/11157)
- en: '**[engine] [bug]**'
  id: totrans-2275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Made a change to the adjustment made in version 2.0.10 for [#9618](https://www.sqlalchemy.org/trac/ticket/9618),
    which added the behavior of reconciling RETURNING rows from a bulk INSERT to the
    parameters that were passed to it. This behavior included a comparison of already-DB-converted
    bound parameter values against returned row values that was not always “symmetrical”
    for SQL column types such as UUIDs, depending on specifics of how different DBAPIs
    receive such values versus how they return them, necessitating the need for additional
    “sentinel value resolver” methods on these column types. Unfortunately this broke
    third party column types such as UUID/GUID types in libraries like SQLModel which
    did not implement this special method, raising an error “Can’t match sentinel
    values in result set to parameter sets”. Rather than attempt to further explain
    and document this implementation detail of the “insertmanyvalues” feature including
    a public version of the new method, the approach is intead revised to no longer
    need this extra conversion step, and the logic that does the comparison now works
    on the pre-converted bound parameter value compared to the post-result-processed
    value, which should always be of a matching datatype. In the unusual case that
    a custom SQL column type that also happens to be used in a “sentinel” column for
    bulk INSERT is not receiving and returning the same value type, the “Can’t match”
    error will be raised, however the mitigation is straightforward in that the same
    Python datatype should be passed as that returned.
  id: totrans-2276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对版本 2.0.10 中对 [#9618](https://www.sqlalchemy.org/trac/ticket/9618) 进行的调整进行了更改，该版本增加了从批量插入中协调
    RETURNING 行到传递给它的参数的行为。此行为包括将已经转换为数据库绑定参数值与返回的行值进行比较，对于 SQL 列类型如 UUID，不同的 DBAPI
    接收这些值的方式与它们返回的方式具体取决于细节，因此需要对这些列类型进行额外的“哨兵值解析器”方法。不幸的是，这破坏了第三方列类型，如 SQLModel 中没有实现此特殊方法的
    UUID/GUID 类型，引发错误“无法将结果集中的哨兵值与参数集匹配”。与其尝试进一步解释和文档化“insertmanyvalues”功能的这一实现细节，包括新方法的公共版本，不如将方法改进为不再需要这个额外的转换步骤，现在进行比较的逻辑是对预先转换的绑定参数值与后处理的值进行比较，后者应始终是匹配的数据类型。在不寻常的情况下，如果一个自定义的
    SQL 列类型也碰巧用作批量插入的“哨兵”列，并且不接收和返回相同的值类型，将引发“无法匹配”错误，但是减轻措施很简单，应传递与返回相同的 Python 数据类型。
- en: 'References: [#11160](https://www.sqlalchemy.org/trac/ticket/11160)'
  id: totrans-2277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11160](https://www.sqlalchemy.org/trac/ticket/11160)
- en: sql
  id: totrans-2278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [regression]**'
  id: totrans-2279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误] [回归]**'
- en: Fixed regression from the 1.4 series where the refactor of the [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method introduced at [“with_variant()”
    clones the original TypeEngine rather than changing the type](whatsnew_20.html#change-6980)
    failed to accommodate for the `.copy()` method, which will lose the variant mappings
    that are set up. This becomes an issue for the very specific case of a “schema”
    type, which includes types such as [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") and [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), when they are then used in the context of an ORM Declarative
    mapping with mixins where copying of types comes into play. The variant mapping
    is now copied as well.
  id: totrans-2280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 1.4 系列中的回归，该系列中对 [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") 方法的重构，引入了[“with_variant()”克隆原始 TypeEngine
    而不是更改类型](whatsnew_20.html#change-6980)，未能适应 `.copy()` 方法，这将丢失设置的变体映射。对于非常特定的“模式”类型，这成为问题，该类型包括在
    ORM Declarative 映射中与混合使用时的类型，其中类型的复制变得重要。现在也复制了变体映射。
- en: 'References: [#11176](https://www.sqlalchemy.org/trac/ticket/11176)'
  id: totrans-2281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11176](https://www.sqlalchemy.org/trac/ticket/11176)
- en: typing
  id: totrans-2282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入
- en: '**[typing] [bug]**'
  id: totrans-2283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Fixed typing issue allowing asyncio `run_sync()` methods to correctly type the
    parameters according to the callable that was passed, making use of [**PEP 612**](https://peps.python.org/pep-0612/)
    `ParamSpec` variables. Pull request courtesy Francisco R. Del Roio.
  id: totrans-2284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了允许 asyncio `run_sync()` 方法正确对参数进行类型标记的输入问题，根据传递的可调用对象，使用了[**PEP 612**](https://peps.python.org/pep-0612/)
    `ParamSpec` 变量。感谢 Francisco R. Del Roio 提交的拉取请求。
- en: 'References: [#11055](https://www.sqlalchemy.org/trac/ticket/11055)'
  id: totrans-2285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11055](https://www.sqlalchemy.org/trac/ticket/11055)
- en: postgresql
  id: totrans-2286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-2287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: The PostgreSQL dialect now returns [`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN") instances when reflecting a column that
    has a domain as type. Previously, the domain data type was returned instead. As
    part of this change, the domain reflection was improved to also return the collation
    of the text types. Pull request courtesy of Thomas Stephenson.
  id: totrans-2288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当反射一个具有域类型的列时，PostgreSQL 方言现在返回 [`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN") 实例。以前，会返回域数据类型。作为这一改变的一部分，域反射还改进了以返回文本类型的排序规则。感谢
    Thomas Stephenson 提交的拉取请求。
- en: 'References: [#10693](https://www.sqlalchemy.org/trac/ticket/10693)'
  id: totrans-2289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10693](https://www.sqlalchemy.org/trac/ticket/10693)
- en: tests
  id: totrans-2290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-2291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Backported to SQLAlchemy 2.0 an improvement to the test suite with regards to
    how asyncio related tests are run, now using the newer Python 3.11 `asyncio.Runner`
    or a backported equivalent, rather than relying on the previous implementation
    based on `asyncio.get_running_loop()`. This should hopefully prevent issues with
    large suite runs on CPU loaded hardware where the event loop seems to become corrupted,
    leading to cascading failures.
  id: totrans-2292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于与 asyncio 相关的测试，对 SQLAlchemy 2.0 进行了改进，现在使用了更新的 Python 3.11 `asyncio.Runner`
    或等价的后移版，而不是依赖于基于 `asyncio.get_running_loop()` 的先前实现。这样做希望能够防止在 CPU 负载硬件上运行大量测试时出现问题，其中事件循环似乎会变得损坏，导致级联故障。
- en: 'References: [#11187](https://www.sqlalchemy.org/trac/ticket/11187)'
  id: totrans-2293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11187](https://www.sqlalchemy.org/trac/ticket/11187)
- en: 2.0.28
  id: totrans-2294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.28
- en: 'Released: March 4, 2024'
  id: totrans-2295
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2024年3月4日
- en: orm
  id: totrans-2296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [performance] [bug] [regression]**'
  id: totrans-2297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [performance] [bug] [regression]**'
- en: Adjusted the fix made in [#10570](https://www.sqlalchemy.org/trac/ticket/10570),
    released in 2.0.23, where new logic was added to reconcile possibly changing bound
    parameter values across cache key generations used within the [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") construct. The new logic changes the approach
    by which the new bound parameter values are associated with the statement, avoiding
    the need to deep-copy the statement which can result in a significant performance
    penalty for very deep / complex SQL constructs. The new approach no longer requires
    this deep-copy step.
  id: totrans-2298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了在 2.0.23 版中发布的 [#10570](https://www.sqlalchemy.org/trac/ticket/10570) 中进行的修复，其中添加了新逻辑来协调可能在
    [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") 构造中使用的缓存键生成过程中可能变化的绑定参数值。新逻辑改变了将新绑定参数值与语句关联的方法，避免了需要深度复制语句的情况，这可能会对非常深/复杂的
    SQL 构造造成显著的性能损耗。新方法不再需要这个深复制步骤。
- en: 'References: [#11085](https://www.sqlalchemy.org/trac/ticket/11085)'
  id: totrans-2299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11085](https://www.sqlalchemy.org/trac/ticket/11085)
- en: '**[orm] [bug] [regression]**'
  id: totrans-2300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression caused by [#9779](https://www.sqlalchemy.org/trac/ticket/9779)
    where using the “secondary” table in a relationship `and_()` expression would
    fail to be aliased to match how the “secondary” table normally renders within
    a [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") expression, leading to an invalid query.
  id: totrans-2301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 [#9779](https://www.sqlalchemy.org/trac/ticket/9779) 引起的回归，其中在关系的 `and_()`
    表达式中使用“secondary”表会失败，无法将其别名为与 [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") 表达式中“secondary”表的正常渲染相匹配，导致查询无效。
- en: 'References: [#11010](https://www.sqlalchemy.org/trac/ticket/11010)'
  id: totrans-2302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11010](https://www.sqlalchemy.org/trac/ticket/11010)
- en: engine
  id: totrans-2303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [usecase]**'
  id: totrans-2304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [usecase]**'
- en: Added new core execution option [`Connection.execution_options.preserve_rowcount`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options"). When set, the `cursor.rowcount`
    attribute from the DBAPI cursor will be unconditionally memoized at statement
    execution time, so that whatever value the DBAPI offers for any kind of statement
    will be available using the [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") attribute from the [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult"). This allows the rowcount to be accessed for
    statements such as INSERT and SELECT, to the degree supported by the DBAPI in
    use. The [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    also supports this option and will ensure [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") is correctly set for a bulk INSERT
    of rows when set.
  id: totrans-2305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的核心执行选项[`Connection.execution_options.preserve_rowcount`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options")。设置后，DBAPI 游标的`cursor.rowcount`属性将在语句执行时无条件地被记忆化，因此无论
    DBAPI 为任何类型的语句提供的值是什么，都可以使用[`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")属性从[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")中获取。这允许访问像 INSERT 和 SELECT 这样的语句的 rowcount，程度取决于所使用的
    DBAPI 的支持。[`INSERT`语句的“插入多个值”行为](../core/connections.html#engine-insertmanyvalues)也支持此选项，并在设置时将确保为批量插入行时正确设置[`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")。
- en: 'References: [#10974](https://www.sqlalchemy.org/trac/ticket/10974)'
  id: totrans-2306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10974](https://www.sqlalchemy.org/trac/ticket/10974)
- en: asyncio
  id: totrans-2307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [bug]**'
  id: totrans-2308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [错误]**'
- en: An error is raised if a [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") or other non-asyncio pool class is passed to [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"). This engine only accepts asyncio-compatible
    pool classes including [`AsyncAdaptedQueuePool`](../core/pooling.html#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool"). Other pool classes such as [`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") are compatible with both synchronous and asynchronous
    engines as they do not perform any locking.
  id: totrans-2309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")或其他非异步池类传递给[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")，则会引发错误。此引擎仅接受包括[`AsyncAdaptedQueuePool`](../core/pooling.html#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool")在内的符合 asyncio 的池类。其他池类，如[`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool")，与同步和异步引擎兼容，因为它们不执行任何锁定。
- en: See also
  id: totrans-2310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[API Documentation - Available Pool Implementations](../core/pooling.html#pool-api)'
  id: totrans-2311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[API 文档 - 可用的池实现](../core/pooling.html#pool-api)'
- en: 'References: [#8771](https://www.sqlalchemy.org/trac/ticket/8771)'
  id: totrans-2312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8771](https://www.sqlalchemy.org/trac/ticket/8771)
- en: tests
  id: totrans-2313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [change]**'
  id: totrans-2314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [更改]**'
- en: pytest support in the tox.ini file has been updated to support pytest 8.1.
  id: totrans-2315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: tox.ini 文件中的 pytest 支持已更新以支持 pytest 8.1。
- en: orm
  id: totrans-2316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [performance] [bug] [regression]**'
  id: totrans-2317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [性能] [错误] [回归]**'
- en: Adjusted the fix made in [#10570](https://www.sqlalchemy.org/trac/ticket/10570),
    released in 2.0.23, where new logic was added to reconcile possibly changing bound
    parameter values across cache key generations used within the [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") construct. The new logic changes the approach
    by which the new bound parameter values are associated with the statement, avoiding
    the need to deep-copy the statement which can result in a significant performance
    penalty for very deep / complex SQL constructs. The new approach no longer requires
    this deep-copy step.
  id: totrans-2318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了在[#10570](https://www.sqlalchemy.org/trac/ticket/10570)中进行的修复，发布于2.0.23，其中添加了新逻辑，用于协调可能在[`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression")构造中使用的缓存键生成过程中可能更改的绑定参数值。新逻辑改变了将新绑定参数值与语句关联的方法，避免了需要深度复制语句的需求，这可能会对非常深/复杂的
    SQL 结构造成显著的性能损耗。新方法不再需要这个深度复制步骤。
- en: 'References: [#11085](https://www.sqlalchemy.org/trac/ticket/11085)'
  id: totrans-2319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11085](https://www.sqlalchemy.org/trac/ticket/11085)
- en: '**[orm] [bug] [regression]**'
  id: totrans-2320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression caused by [#9779](https://www.sqlalchemy.org/trac/ticket/9779)
    where using the “secondary” table in a relationship `and_()` expression would
    fail to be aliased to match how the “secondary” table normally renders within
    a [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") expression, leading to an invalid query.
  id: totrans-2321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 [#9779](https://www.sqlalchemy.org/trac/ticket/9779) 引起的回归问题，其中在关系 `and_()`
    表达式中使用 “secondary” 表会无法被别名化，以匹配 “secondary” 表在 [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") 表达式中通常的呈现方式，导致查询无效。
- en: 'References: [#11010](https://www.sqlalchemy.org/trac/ticket/11010)'
  id: totrans-2322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11010](https://www.sqlalchemy.org/trac/ticket/11010)
- en: engine
  id: totrans-2323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [usecase]**'
  id: totrans-2324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [usecase]**'
- en: Added new core execution option [`Connection.execution_options.preserve_rowcount`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options"). When set, the `cursor.rowcount`
    attribute from the DBAPI cursor will be unconditionally memoized at statement
    execution time, so that whatever value the DBAPI offers for any kind of statement
    will be available using the [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") attribute from the [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult"). This allows the rowcount to be accessed for
    statements such as INSERT and SELECT, to the degree supported by the DBAPI in
    use. The [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    also supports this option and will ensure [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") is correctly set for a bulk INSERT
    of rows when set.
  id: totrans-2325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的核心执行选项 [`Connection.execution_options.preserve_rowcount`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.preserve_rowcount
    "sqlalchemy.engine.Connection.execution_options")。当设置时，DBAPI 游标的 `cursor.rowcount`
    属性将在语句执行时无条件地被存储，以便无论语句的任何种类，都可以使用 [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") 属性从 [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") 获取 DBAPI 提供的任何值。这允许访问像 INSERT 和 SELECT 这样的语句的
    rowcount，以 DBAPI 使用的程度支持。[“INSERT 语句的插入多个值”行为](../core/connections.html#engine-insertmanyvalues)
    也支持此选项，并将确保在设置时对行进行批量插入时正确设置 [`CursorResult.rowcount`](../core/connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount")。
- en: 'References: [#10974](https://www.sqlalchemy.org/trac/ticket/10974)'
  id: totrans-2326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10974](https://www.sqlalchemy.org/trac/ticket/10974)
- en: asyncio
  id: totrans-2327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [bug]**'
  id: totrans-2328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [bug]**'
- en: An error is raised if a [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") or other non-asyncio pool class is passed to [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"). This engine only accepts asyncio-compatible
    pool classes including [`AsyncAdaptedQueuePool`](../core/pooling.html#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool"). Other pool classes such as [`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool") are compatible with both synchronous and asynchronous
    engines as they do not perform any locking.
  id: totrans-2329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果将 [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    或其他非 asyncio 连接池类传递给 [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")，则会引发错误。此引擎仅接受与 asyncio 兼容的连接池类，包括
    [`AsyncAdaptedQueuePool`](../core/pooling.html#sqlalchemy.pool.AsyncAdaptedQueuePool
    "sqlalchemy.pool.AsyncAdaptedQueuePool")。其他连接池类，如 [`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool")，与同步和异步引擎均兼容，因为它们不执行任何锁定。
- en: See also
  id: totrans-2330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[API Documentation - Available Pool Implementations](../core/pooling.html#pool-api)'
  id: totrans-2331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[API 文档 - 可用的连接池实现](../core/pooling.html#pool-api)'
- en: 'References: [#8771](https://www.sqlalchemy.org/trac/ticket/8771)'
  id: totrans-2332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8771](https://www.sqlalchemy.org/trac/ticket/8771)
- en: tests
  id: totrans-2333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [change]**'
  id: totrans-2334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [change]**'
- en: pytest support in the tox.ini file has been updated to support pytest 8.1.
  id: totrans-2335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: tox.ini 文件中的 pytest 支持已更新以支持 pytest 8.1。
- en: 2.0.27
  id: totrans-2336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.27
- en: 'Released: February 13, 2024'
  id: totrans-2337
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2024 年 2 月 13 日
- en: postgresql
  id: totrans-2338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-2339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [regression]**'
- en: Fixed regression caused by just-released fix for [#10863](https://www.sqlalchemy.org/trac/ticket/10863)
    where an invalid exception class were added to the “except” block, which does
    not get exercised unless such a catch actually happens. A mock-style test has
    been added to ensure this catch is exercised in unit tests.
  id: totrans-2340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于刚发布的修复导致的回归，修复了[#10863](https://www.sqlalchemy.org/trac/ticket/10863)中一个无效的异常类被添加到“except”块的问题，除非确实发生了这样的捕获，否则不会被执行。已添加了一个模拟式测试以确保这种捕获在单元测试中被执行。
- en: 'References: [#11005](https://www.sqlalchemy.org/trac/ticket/11005)'
  id: totrans-2341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11005](https://www.sqlalchemy.org/trac/ticket/11005)
- en: postgresql
  id: totrans-2342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-2343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [regression]**'
- en: Fixed regression caused by just-released fix for [#10863](https://www.sqlalchemy.org/trac/ticket/10863)
    where an invalid exception class were added to the “except” block, which does
    not get exercised unless such a catch actually happens. A mock-style test has
    been added to ensure this catch is exercised in unit tests.
  id: totrans-2344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于刚发布的修复导致的回归，修复了[#10863](https://www.sqlalchemy.org/trac/ticket/10863)中一个无效的异常类被添加到“except”块的问题，除非确实发生了这样的捕获，否则不会被执行。已添加了一个模拟式测试以确保这种捕获在单元测试中被执行。
- en: 'References: [#11005](https://www.sqlalchemy.org/trac/ticket/11005)'
  id: totrans-2345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#11005](https://www.sqlalchemy.org/trac/ticket/11005)
- en: 2.0.26
  id: totrans-2346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.26
- en: 'Released: February 11, 2024'
  id: totrans-2347
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2024年2月11日
- en: orm
  id: totrans-2348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Replaced the “loader depth is excessively deep” warning with a shorter message
    added to the caching badge within SQL logging, for those statements where the
    ORM disabled the cache due to a too-deep chain of loader options. The condition
    which this warning highlights is difficult to resolve and is generally just a
    limitation in the ORM’s application of SQL caching. A future feature may include
    the ability to tune the threshold where caching is disabled, but for now the warning
    will no longer be a nuisance.
  id: totrans-2350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用缓存徽章替换了“加载器深度过深”的警告，对于 ORM 由于加载器选项链过于深而禁用缓存的那些语句，向 SQL 日志中添加了一个较短的消息。此警告突出显示的条件难以解决，并且通常只是
    ORM 在应用 SQL 缓存时的限制。未来的功能可能包括调整禁用缓存的阈值的能力，但目前这个警告将不再是一个麻烦。
- en: 'References: [#10896](https://www.sqlalchemy.org/trac/ticket/10896)'
  id: totrans-2351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10896](https://www.sqlalchemy.org/trac/ticket/10896)
- en: '**[orm] [bug]**'
  id: totrans-2352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where it was not possible to use a type (such as an enum) within
    a [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    container type if that type were declared locally within the class body. The scope
    of locals used for the eval now includes that of the class body itself. In addition,
    the expression within [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    may also refer to the class name itself, if used as a string or with future annotations
    mode.
  id: totrans-2353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即如果该类型在类体内部局部声明，则无法在[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")容器类型中使用类型（例如枚举）。现在，用于评估的本地变量范围包括类体本身的范围。此外，如果以字符串形式或使用将来的注释模式，[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")中的表达式也可以引用类名本身。
- en: 'References: [#10899](https://www.sqlalchemy.org/trac/ticket/10899)'
  id: totrans-2354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10899](https://www.sqlalchemy.org/trac/ticket/10899)
- en: '**[orm] [bug]**'
  id: totrans-2355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where using [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") along with the [`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") feature would fail to use the correct version identifier
    in the case that an additional UPDATE were emitted against the target object as
    a result of the use of [`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") on the object. The issue is similar to [#10800](https://www.sqlalchemy.org/trac/ticket/10800)
    just fixed in version 2.0.25 for the case of updates alone.
  id: totrans-2356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即在使用 [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") 与 [`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") 功能时，如果由于对象上的 [`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") 的使用导致针对目标对象的附加 UPDATE，则使用正确的版本标识符将失败。这个问题类似于版本2.0.25中刚刚修复的
    [#10800](https://www.sqlalchemy.org/trac/ticket/10800) 的情况，仅对更新情况进行了修复。
- en: 'References: [#10967](https://www.sqlalchemy.org/trac/ticket/10967)'
  id: totrans-2357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10967](https://www.sqlalchemy.org/trac/ticket/10967)
- en: '**[orm] [bug]**'
  id: totrans-2358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where an assertion within the implementation for [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") would raise if a SQL expression that was not
    cacheable were used; this was a 2.0 regression since 1.4.
  id: totrans-2359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在实现[`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression")时，如果使用不可缓存的 SQL 表达式，则会引发断言错误的问题；这是自 1.4 以来的 2.0
    回归。
- en: 'References: [#10990](https://www.sqlalchemy.org/trac/ticket/10990)'
  id: totrans-2360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10990](https://www.sqlalchemy.org/trac/ticket/10990)
- en: examples
  id: totrans-2361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: examples
- en: '**[examples] [bug]**'
  id: totrans-2362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed regression in history_meta example where the use of `MetaData.to_metadata()`
    to make a copy of the history table would also copy indexes (which is a good thing),
    but causing naming conflicts indexes regardless of naming scheme used for those
    indexes. A “_history” suffix is now added to these indexes in the same way as
    is achieved for the table name.
  id: totrans-2363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了历史元示例中的回归，使用`MetaData.to_metadata()`复制历史表时也会复制索引（这是一件好事），但无论用于这些索引的命名方案如何，都会导致索引命名冲突。现在这些索引都添加了“_history”后缀，方式与表名相同。
- en: 'References: [#10920](https://www.sqlalchemy.org/trac/ticket/10920)'
  id: totrans-2364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10920](https://www.sqlalchemy.org/trac/ticket/10920)
- en: '**[examples] [bug]**'
  id: totrans-2365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Fixed the performance example scripts in examples/performance to mostly work
    with the Oracle database, by adding the [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct to all the tables and allowing primary
    generation to occur on this backend. A few of the “raw DBAPI” cases still are
    not compatible with Oracle.
  id: totrans-2366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过在所有表中添加[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")构造，并允许在此后端上进行主键生成，修复了
    examples/performance 中性能示例脚本在 Oracle 数据库中大部分情况下的运行问题。仍有一些“原始 DBAPI”情况与 Oracle
    不兼容。
- en: sql
  id: totrans-2367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issues in [`case()`](../core/sqlelement.html#sqlalchemy.sql.expression.case
    "sqlalchemy.sql.expression.case") where the logic for determining the type of
    the expression could result in [`NullType`](../core/type_api.html#sqlalchemy.types.NullType
    "sqlalchemy.types.NullType") if the last element in the “whens” had no type, or
    in other cases where the type could resolve to `None`. The logic has been updated
    to scan all given expressions so that the first non-null type is used, as well
    as to always ensure a type is present. Pull request courtesy David Evans.
  id: totrans-2369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`case()`](../core/sqlelement.html#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")中确定表达式类型的逻辑问题，可能导致如果“whens”中的最后一个元素没有类型，则结果为[`NullType`](../core/type_api.html#sqlalchemy.types.NullType
    "sqlalchemy.types.NullType")，或者在其他情况下，类型可能解析为`None`。逻辑已更新为扫描所有给定表达式，以便使用第一个非空类型，并始终确保存在类型。拉取请求由
    David Evans 提供。
- en: 'References: [#10843](https://www.sqlalchemy.org/trac/ticket/10843)'
  id: totrans-2370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10843](https://www.sqlalchemy.org/trac/ticket/10843)
- en: typing
  id: totrans-2371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-2372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed the type signature for the [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") event to indicate that the given [`DBAPIConnection`](../core/internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") argument may be `None` in the
    case where the connection has been invalidated.
  id: totrans-2373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin")事件的类型签名，指示给定的[`DBAPIConnection`](../core/internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection")参数在连接被无效化的情况下可能为`None`。
- en: postgresql
  id: totrans-2374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase] [reflection]**'
  id: totrans-2375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase] [reflection]**'
- en: Added support for reflection of PostgreSQL CHECK constraints marked with “NO
    INHERIT”, setting the key `no_inherit=True` in the reflected data. Pull request
    courtesy Ellis Valentiner.
  id: totrans-2376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对带有“NO INHERIT”标记的 PostgreSQL CHECK 约束的反射支持，设置反射数据中的关键字 `no_inherit=True`。拉取请求由
    Ellis Valentiner 提供。
- en: 'References: [#10777](https://www.sqlalchemy.org/trac/ticket/10777)'
  id: totrans-2377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10777](https://www.sqlalchemy.org/trac/ticket/10777)
- en: '**[postgresql] [usecase]**'
  id: totrans-2378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Support the `USING <method>` option for PostgreSQL `CREATE TABLE` to specify
    the access method to use to store the contents for the new table. Pull request
    courtesy Edgar Ramírez-Mondragón.
  id: totrans-2379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持 PostgreSQL `CREATE TABLE` 的 `USING <method>` 选项，以指定用于存储新表内容的访问方法。拉取请求由 Edgar
    Ramírez-Mondragón 提供。
- en: See also
  id: totrans-2380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL Table Options](../dialects/postgresql.html#postgresql-table-options)'
  id: totrans-2381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL 表选项](../dialects/postgresql.html#postgresql-table-options)'
- en: 'References: [#10904](https://www.sqlalchemy.org/trac/ticket/10904)'
  id: totrans-2382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10904](https://www.sqlalchemy.org/trac/ticket/10904)
- en: '**[postgresql] [usecase]**'
  id: totrans-2383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Correctly type PostgreSQL RANGE and MULTIRANGE types as `Range[T]` and `Sequence[Range[T]]`.
    Introduced utility sequence [`MultiRange`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") to allow better interoperability
    of MULTIRANGE types.
  id: totrans-2384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正确地将 PostgreSQL 的 RANGE 和 MULTIRANGE 类型类型化为 `Range[T]` 和 `Sequence[Range[T]]`。引入了实用序列
    [`MultiRange`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange")，以便更好地支持 MULTIRANGE 类型的互操作性。
- en: 'References: [#9736](https://www.sqlalchemy.org/trac/ticket/9736)'
  id: totrans-2385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9736](https://www.sqlalchemy.org/trac/ticket/9736)
- en: '**[postgresql] [usecase]**'
  id: totrans-2386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Differentiate between INT4 and INT8 ranges and multi-ranges types when inferring
    the database type from a [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") or [`MultiRange`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") instance, preferring INT4 if the
    values fit into it.
  id: totrans-2387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在从 [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") 或 [`MultiRange`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") 实例推断数据库类型时，区分 INT4 和 INT8 范围和多范围类型，如果值适合
    INT4，则优先选择 INT4。
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-2388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [regression]**'
- en: Fixed regression in the asyncpg dialect caused by [#10717](https://www.sqlalchemy.org/trac/ticket/10717)
    in release 2.0.24 where the change that now attempts to gracefully close the asyncpg
    connection before terminating would not fall back to `terminate()` for other potential
    connection-related exceptions other than a timeout error, not taking into account
    cases where the graceful `.close()` attempt fails for other reasons such as connection
    errors.
  id: totrans-2389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在发布 2.0.24 版本中由于 [#10717](https://www.sqlalchemy.org/trac/ticket/10717) 导致 asyncpg
    方言中的回归问题，现在尝试在终止之前优雅地关闭 asyncpg 连接的更改不会对除超时错误之外的其他潜在连接相关异常回退到 `terminate()`，没有考虑到优雅的
    `.close()` 尝试由于其他原因（如连接错误）失败的情况。
- en: 'References: [#10863](https://www.sqlalchemy.org/trac/ticket/10863)'
  id: totrans-2390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10863](https://www.sqlalchemy.org/trac/ticket/10863)
- en: '**[postgresql] [bug]**'
  id: totrans-2391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed an issue regarding the use of the [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype with the [`Uuid.as_uuid`](../core/type_basics.html#sqlalchemy.types.Uuid.params.as_uuid
    "sqlalchemy.types.Uuid") parameter set to False, when using PostgreSQL dialects.
    ORM-optimized INSERT statements (e.g. the “insertmanyvalues” feature) would not
    correctly align primary key UUID values for bulk INSERT statements, resulting
    in errors. Similar issues were fixed for the pymssql driver as well.
  id: totrans-2392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 PostgreSQL 方言时，使用 [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") 数据类型且将 [`Uuid.as_uuid`](../core/type_basics.html#sqlalchemy.types.Uuid.params.as_uuid
    "sqlalchemy.types.Uuid") 参数设置为 False 时出现的问题，ORM 优化的 INSERT 语句（例如“insertmanyvalues”功能）将无法正确对齐批量
    INSERT 语句的主键 UUID 值，导致错误。类似的问题也已经为 pymssql 驱动程序修复。
- en: mysql
  id: totrans-2393
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue where NULL/NOT NULL would not be properly reflected from a MySQL
    column that also specified the VIRTUAL or STORED directives. Pull request courtesy
    Georg Wicke-Arndt.
  id: totrans-2395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 MySQL 列中未正确反映 NULL/NOT NULL 的问题，该列还指定了 VIRTUAL 或 STORED 指令。感谢 Georg Wicke-Arndt
    的拉取请求。
- en: 'References: [#10850](https://www.sqlalchemy.org/trac/ticket/10850)'
  id: totrans-2396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10850](https://www.sqlalchemy.org/trac/ticket/10850)
- en: '**[mysql] [bug]**'
  id: totrans-2397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue in asyncio dialects asyncmy and aiomysql, where their `.close()`
    method is apparently not a graceful close. replace with non-standard `.ensure_closed()`
    method that’s awaitable and move `.close()` to the so-called “terminate” case.
  id: totrans-2398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 asyncio 方言 asyncmy 和 aiomysql 中的问题，其中它们的 `.close()` 方法显然不是一个优雅的关闭。替换为非标准的
    `.ensure_closed()` 方法，该方法是可等待的，并将 `.close()` 移动到所谓的“终止”情况。
- en: 'References: [#10893](https://www.sqlalchemy.org/trac/ticket/10893)'
  id: totrans-2399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10893](https://www.sqlalchemy.org/trac/ticket/10893)
- en: mssql
  id: totrans-2400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed an issue regarding the use of the [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype with the [`Uuid.as_uuid`](../core/type_basics.html#sqlalchemy.types.Uuid.params.as_uuid
    "sqlalchemy.types.Uuid") parameter set to False, when using the pymssql dialect.
    ORM-optimized INSERT statements (e.g. the “insertmanyvalues” feature) would not
    correctly align primary key UUID values for bulk INSERT statements, resulting
    in errors. Similar issues were fixed for the PostgreSQL drivers as well.
  id: totrans-2402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用pymssql方言时，当使用[`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid")数据类型且[`Uuid.as_uuid`](../core/type_basics.html#sqlalchemy.types.Uuid.params.as_uuid
    "sqlalchemy.types.Uuid")参数设置为False时的问题。ORM优化的INSERT语句（例如“insertmanyvalues”功能）将无法正确对齐用于批量INSERT语句的主键UUID值，导致错误。类似的问题也已针对PostgreSQL驱动程序进行了修复。
- en: oracle
  id: totrans-2403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [performance] [bug]**'
  id: totrans-2404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [performance] [bug]**'
- en: Changed the default arraysize of the Oracle dialects so that the value set by
    the driver is used, that is 100 at the time of writing for both cx_oracle and
    oracledb. Previously the value was set to 50 by default. The setting of 50 could
    cause significant performance regressions compared to when using cx_oracle/oracledb
    alone to fetch many hundreds of rows over slower networks.
  id: totrans-2405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了Oracle方言的默认arraysize，以使用驱动程序设置的值，即在撰写本文时，cx_oracle和oracledb均为100。以前默认值为50。将值设置为50可能会导致与仅使用cx_oracle/oracledb在较慢的网络上获取许多行时相比，性能显着下降。
- en: 'References: [#10877](https://www.sqlalchemy.org/trac/ticket/10877)'
  id: totrans-2406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10877](https://www.sqlalchemy.org/trac/ticket/10877)
- en: orm
  id: totrans-2407
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Replaced the “loader depth is excessively deep” warning with a shorter message
    added to the caching badge within SQL logging, for those statements where the
    ORM disabled the cache due to a too-deep chain of loader options. The condition
    which this warning highlights is difficult to resolve and is generally just a
    limitation in the ORM’s application of SQL caching. A future feature may include
    the ability to tune the threshold where caching is disabled, but for now the warning
    will no longer be a nuisance.
  id: totrans-2409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用更短的消息替换了“加载器深度过深”的警告，该消息添加到SQL日志中的缓存徽章中，对于那些由于ORM禁用缓存而导致的加载器选项链过深的语句。此警告突出显示的条件很难解决，通常只是ORM在应用SQL缓存时的一个限制。未来的功能可能包括调整禁用缓存的阈值的能力，但目前该警告将不再成为一个麻烦。
- en: 'References: [#10896](https://www.sqlalchemy.org/trac/ticket/10896)'
  id: totrans-2410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10896](https://www.sqlalchemy.org/trac/ticket/10896)
- en: '**[orm] [bug]**'
  id: totrans-2411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where it was not possible to use a type (such as an enum) within
    a [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    container type if that type were declared locally within the class body. The scope
    of locals used for the eval now includes that of the class body itself. In addition,
    the expression within [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    may also refer to the class name itself, if used as a string or with future annotations
    mode.
  id: totrans-2412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在类体内部声明本地类型（例如枚举）时无法在[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")容器类型中使用该类型的问题。现在，用于eval的本地变量范围包括类体本身。此外，[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")中的表达式也可以引用类名本身，如果作为字符串或使用未来注释模式。
- en: 'References: [#10899](https://www.sqlalchemy.org/trac/ticket/10899)'
  id: totrans-2413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10899](https://www.sqlalchemy.org/trac/ticket/10899)
- en: '**[orm] [bug]**'
  id: totrans-2414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where using [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") along with the [`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") feature would fail to use the correct version identifier
    in the case that an additional UPDATE were emitted against the target object as
    a result of the use of [`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") on the object. The issue is similar to [#10800](https://www.sqlalchemy.org/trac/ticket/10800)
    just fixed in version 2.0.25 for the case of updates alone.
  id: totrans-2415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete")与[`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper")功能一起时，如果由于对象上的[`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship")的使用导致针对目标对象发出额外的UPDATE，则会失败使用正确的版本标识符的问题。该问题类似于[#10800](https://www.sqlalchemy.org/trac/ticket/10800)，只是在仅有更新的情况下在版本2.0.25中修复了。
- en: 'References: [#10967](https://www.sqlalchemy.org/trac/ticket/10967)'
  id: totrans-2416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10967](https://www.sqlalchemy.org/trac/ticket/10967)
- en: '**[orm] [bug]**'
  id: totrans-2417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue where an assertion within the implementation for [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") would raise if a SQL expression that was not
    cacheable were used; this was a 2.0 regression since 1.4.
  id: totrans-2418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") 实现中，如果使用的 SQL 表达式不可缓存，则会引发断言错误的问题；这是自 1.4 版以来的
    2.0 版本的退化。
- en: 'References: [#10990](https://www.sqlalchemy.org/trac/ticket/10990)'
  id: totrans-2419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10990](https://www.sqlalchemy.org/trac/ticket/10990)
- en: examples
  id: totrans-2420
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-2421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Fixed regression in history_meta example where the use of `MetaData.to_metadata()`
    to make a copy of the history table would also copy indexes (which is a good thing),
    but causing naming conflicts indexes regardless of naming scheme used for those
    indexes. A “_history” suffix is now added to these indexes in the same way as
    is achieved for the table name.
  id: totrans-2422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 history_meta 示例中的退化问题，其中使用 `MetaData.to_metadata()` 来复制历史表也会复制索引（这是好事），但无论使用的索引命名方案如何，都会导致索引命名冲突。现在为这些索引添加了“_history”后缀，方式与为表名添加后缀相同。
- en: 'References: [#10920](https://www.sqlalchemy.org/trac/ticket/10920)'
  id: totrans-2423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10920](https://www.sqlalchemy.org/trac/ticket/10920)
- en: '**[examples] [bug]**'
  id: totrans-2424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Fixed the performance example scripts in examples/performance to mostly work
    with the Oracle database, by adding the [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") construct to all the tables and allowing primary
    generation to occur on this backend. A few of the “raw DBAPI” cases still are
    not compatible with Oracle.
  id: totrans-2425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过向所有表添加 [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity "sqlalchemy.schema.Identity")
    结构并允许主键在此后端上生成，修复了 examples/performance 中性能示例脚本在 Oracle 数据库中的大部分兼容性问题。一些“原始 DBAPI”
    情况仍不兼容 Oracle。
- en: sql
  id: totrans-2426
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed issues in [`case()`](../core/sqlelement.html#sqlalchemy.sql.expression.case
    "sqlalchemy.sql.expression.case") where the logic for determining the type of
    the expression could result in [`NullType`](../core/type_api.html#sqlalchemy.types.NullType
    "sqlalchemy.types.NullType") if the last element in the “whens” had no type, or
    in other cases where the type could resolve to `None`. The logic has been updated
    to scan all given expressions so that the first non-null type is used, as well
    as to always ensure a type is present. Pull request courtesy David Evans.
  id: totrans-2428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了 [`case()`](../core/sqlelement.html#sqlalchemy.sql.expression.case "sqlalchemy.sql.expression.case")
    中确定表达式类型的逻辑问题，如果“whens”中的最后一个元素没有类型或在其他情况下类型可能解析为 `None`，则可能导致 [`NullType`](../core/type_api.html#sqlalchemy.types.NullType
    "sqlalchemy.types.NullType")。逻辑已更新以扫描所有给定表达式，以使用第一个非空类型，并始终确保存在类型。感谢 David Evans
    提交的拉取请求。
- en: 'References: [#10843](https://www.sqlalchemy.org/trac/ticket/10843)'
  id: totrans-2429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10843](https://www.sqlalchemy.org/trac/ticket/10843)
- en: typing
  id: totrans-2430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型
- en: '**[typing] [bug]**'
  id: totrans-2431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [错误]**'
- en: Fixed the type signature for the [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") event to indicate that the given [`DBAPIConnection`](../core/internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") argument may be `None` in the
    case where the connection has been invalidated.
  id: totrans-2432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了 [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") 事件的类型签名，指示给定的 [`DBAPIConnection`](../core/internals.html#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") 参数在连接被失效的情况下可能为 `None`。
- en: postgresql
  id: totrans-2433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase] [reflection]**'
  id: totrans-2434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例] [反射]**'
- en: Added support for reflection of PostgreSQL CHECK constraints marked with “NO
    INHERIT”, setting the key `no_inherit=True` in the reflected data. Pull request
    courtesy Ellis Valentiner.
  id: totrans-2435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 PostgreSQL CHECK 约束的反射支持，标记为“NO INHERIT”，在反射数据中设置键 `no_inherit=True`。感谢
    Ellis Valentiner 提交的拉取请求。
- en: 'References: [#10777](https://www.sqlalchemy.org/trac/ticket/10777)'
  id: totrans-2436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10777](https://www.sqlalchemy.org/trac/ticket/10777)
- en: '**[postgresql] [usecase]**'
  id: totrans-2437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Support the `USING <method>` option for PostgreSQL `CREATE TABLE` to specify
    the access method to use to store the contents for the new table. Pull request
    courtesy Edgar Ramírez-Mondragón.
  id: totrans-2438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了支持 PostgreSQL 的 `CREATE TABLE` 中的 `USING <method>` 选项，以指定用于存储新表内容的访问方法。感谢
    Edgar Ramírez-Mondragón 提交的拉取请求。
- en: See also
  id: totrans-2439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[PostgreSQL Table Options](../dialects/postgresql.html#postgresql-table-options)'
  id: totrans-2440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL 表选项](../dialects/postgresql.html#postgresql-table-options)'
- en: 'References: [#10904](https://www.sqlalchemy.org/trac/ticket/10904)'
  id: totrans-2441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10904](https://www.sqlalchemy.org/trac/ticket/10904)
- en: '**[postgresql] [usecase]**'
  id: totrans-2442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Correctly type PostgreSQL RANGE and MULTIRANGE types as `Range[T]` and `Sequence[Range[T]]`.
    Introduced utility sequence [`MultiRange`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") to allow better interoperability
    of MULTIRANGE types.
  id: totrans-2443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正确地将PostgreSQL RANGE和MULTIRANGE类型类型化为`Range[T]`和`Sequence[Range[T]]`。引入了实用程序序列[`MultiRange`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange")，以更好地支持MULTIRANGE类型的互操作性。
- en: 'References: [#9736](https://www.sqlalchemy.org/trac/ticket/9736)'
  id: totrans-2444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9736](https://www.sqlalchemy.org/trac/ticket/9736)
- en: '**[postgresql] [usecase]**'
  id: totrans-2445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Differentiate between INT4 and INT8 ranges and multi-ranges types when inferring
    the database type from a [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") or [`MultiRange`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange") instance, preferring INT4 if the
    values fit into it.
  id: totrans-2446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当从[`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range")或[`MultiRange`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.MultiRange
    "sqlalchemy.dialects.postgresql.MultiRange")实例推断数据库类型时，区分INT4和INT8范围和多范围类型，如果值适合INT4，则优先使用INT4。
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-2447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [regression]**'
- en: Fixed regression in the asyncpg dialect caused by [#10717](https://www.sqlalchemy.org/trac/ticket/10717)
    in release 2.0.24 where the change that now attempts to gracefully close the asyncpg
    connection before terminating would not fall back to `terminate()` for other potential
    connection-related exceptions other than a timeout error, not taking into account
    cases where the graceful `.close()` attempt fails for other reasons such as connection
    errors.
  id: totrans-2448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在2.0.24版本中由于[#10717](https://www.sqlalchemy.org/trac/ticket/10717)导致的asyncpg方言中的回归问题修复，该变更现在在终止之前尝试优雅地关闭asyncpg连接，不会为除超时错误之外的其他潜在连接相关异常回退到`terminate()`，没有考虑到当优雅的`.close()`尝试由于其他原因（如连接错误）失败时的情况。
- en: 'References: [#10863](https://www.sqlalchemy.org/trac/ticket/10863)'
  id: totrans-2449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10863](https://www.sqlalchemy.org/trac/ticket/10863)
- en: '**[postgresql] [bug]**'
  id: totrans-2450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed an issue regarding the use of the [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype with the [`Uuid.as_uuid`](../core/type_basics.html#sqlalchemy.types.Uuid.params.as_uuid
    "sqlalchemy.types.Uuid") parameter set to False, when using PostgreSQL dialects.
    ORM-optimized INSERT statements (e.g. the “insertmanyvalues” feature) would not
    correctly align primary key UUID values for bulk INSERT statements, resulting
    in errors. Similar issues were fixed for the pymssql driver as well.
  id: totrans-2451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用PostgreSQL方言时，当使用[`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid")数据类型且[`Uuid.as_uuid`](../core/type_basics.html#sqlalchemy.types.Uuid.params.as_uuid
    "sqlalchemy.types.Uuid")参数设置为False时的问题。ORM优化的INSERT语句（例如“insertmanyvalues”功能）不会正确对齐批量INSERT语句的主键UUID值，导致错误。pymssql驱动程序也修复了类似的问题。
- en: mysql
  id: totrans-2452
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue where NULL/NOT NULL would not be properly reflected from a MySQL
    column that also specified the VIRTUAL or STORED directives. Pull request courtesy
    Georg Wicke-Arndt.
  id: totrans-2454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即当MySQL列还指定了VIRTUAL或STORED指令时，NULL/NOT NULL未能正确反映。感谢 Georg Wicke-Arndt
    的拉取请求。
- en: 'References: [#10850](https://www.sqlalchemy.org/trac/ticket/10850)'
  id: totrans-2455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10850](https://www.sqlalchemy.org/trac/ticket/10850)
- en: '**[mysql] [bug]**'
  id: totrans-2456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue in asyncio dialects asyncmy and aiomysql, where their `.close()`
    method is apparently not a graceful close. replace with non-standard `.ensure_closed()`
    method that’s awaitable and move `.close()` to the so-called “terminate” case.
  id: totrans-2457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了asyncio方言asyncmy和aiomysql中的一个问题，即它们的`.close()`方法显然不是一个优雅的关闭。将其替换为非标准的`.ensure_closed()`方法，该方法可等待，并将`.close()`移到所谓的“终止”情况。
- en: 'References: [#10893](https://www.sqlalchemy.org/trac/ticket/10893)'
  id: totrans-2458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10893](https://www.sqlalchemy.org/trac/ticket/10893)
- en: mssql
  id: totrans-2459
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed an issue regarding the use of the [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype with the [`Uuid.as_uuid`](../core/type_basics.html#sqlalchemy.types.Uuid.params.as_uuid
    "sqlalchemy.types.Uuid") parameter set to False, when using the pymssql dialect.
    ORM-optimized INSERT statements (e.g. the “insertmanyvalues” feature) would not
    correctly align primary key UUID values for bulk INSERT statements, resulting
    in errors. Similar issues were fixed for the PostgreSQL drivers as well.
  id: totrans-2461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")数据类型以及设置[`Uuid.as_uuid`](../core/type_basics.html#sqlalchemy.types.Uuid.params.as_uuid
    "sqlalchemy.types.Uuid")参数为False时的问题，当使用pymssql方言时，ORM优化的INSERT语句（例如“insertmanyvalues”功能）将不正确地对齐批量INSERT语句的主键UUID值，导致错误。类似的问题也已在PostgreSQL驱动程序中修复。
- en: oracle
  id: totrans-2462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [performance] [bug]**'
  id: totrans-2463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [performance] [bug]**'
- en: Changed the default arraysize of the Oracle dialects so that the value set by
    the driver is used, that is 100 at the time of writing for both cx_oracle and
    oracledb. Previously the value was set to 50 by default. The setting of 50 could
    cause significant performance regressions compared to when using cx_oracle/oracledb
    alone to fetch many hundreds of rows over slower networks.
  id: totrans-2464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了Oracle方言的默认arraysize，以使用驱动程序设置的值，在撰写本文时，cx_oracle和oracledb的值均为100。先前，默认值设置为50。默认值为50可能导致与仅使用cx_oracle/oracledb在较慢的网络上获取数百行时相比出现显着的性能回退。
- en: 'References: [#10877](https://www.sqlalchemy.org/trac/ticket/10877)'
  id: totrans-2465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10877](https://www.sqlalchemy.org/trac/ticket/10877)
- en: 2.0.25
  id: totrans-2466
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.25
- en: 'Released: January 2, 2024'
  id: totrans-2467
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2024年1月2日
- en: orm
  id: totrans-2468
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-2469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added preliminary support for Python 3.12 pep-695 type alias structures, when
    resolving custom type maps for ORM Annotated Declarative mappings.
  id: totrans-2470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对Python 3.12 pep-695类型别名结构的初步支持，用于解析ORM注释声明映射的自定义类型映射。
- en: 'References: [#10807](https://www.sqlalchemy.org/trac/ticket/10807)'
  id: totrans-2471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10807](https://www.sqlalchemy.org/trac/ticket/10807)
- en: '**[orm] [bug]**'
  id: totrans-2472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where when making use of the [`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") feature at the same time as using a mapper version_id_col
    could lead to a situation where the second UPDATE statement emitted by the post-update
    feature would fail to make use of the correct version identifier, assuming an
    UPDATE was already emitted in that flush which had already bumped the version
    counter.
  id: totrans-2473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在同时使用[`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship")特性和使用映射器version_id_col时可能导致第二个UPDATE语句未能使用正确的版本标识符的问题，假设在该flush中已经发出了一个已经增加了版本计数器的UPDATE。
- en: 'References: [#10800](https://www.sqlalchemy.org/trac/ticket/10800)'
  id: totrans-2474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10800](https://www.sqlalchemy.org/trac/ticket/10800)
- en: '**[orm] [bug]**'
  id: totrans-2475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where ORM Annotated Declarative would mis-interpret the left hand
    side of a relationship without any collection specified as uselist=True if the
    left type were given as a class and not a string, without using future-style annotations.
  id: totrans-2476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM注释声明会错误解释没有指定集合为uselist=True的关系左侧的问题，如果左侧类型被给定为类而不是字符串，并且没有使用future-style注释。
- en: 'References: [#10815](https://www.sqlalchemy.org/trac/ticket/10815)'
  id: totrans-2477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10815](https://www.sqlalchemy.org/trac/ticket/10815)
- en: sql
  id: totrans-2478
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Improved compilation of [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") / [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") in the context of a negation of boolean comparison,
    will now render `NOT (expr)` rather than reversing the equality operator to not
    equals, allowing finer-grained control of negations for these non-typical operators.
  id: totrans-2480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在布尔比较的否定情况下改进了[`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") / [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") 的编译，现在将呈现`NOT (expr)`而不是将等式操作符反转为不等号，允许对这些非典型操作符进行更精细的否定控制。
- en: 'References: [#10817](https://www.sqlalchemy.org/trac/ticket/10817)'
  id: totrans-2481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10817](https://www.sqlalchemy.org/trac/ticket/10817)
- en: typing
  id: totrans-2482
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-2483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: 'Fixed regressions caused by typing added to the `sqlalchemy.sql.functions`
    module in version 2.0.24, as part of [#6810](https://www.sqlalchemy.org/trac/ticket/6810):'
  id: totrans-2484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在版本2.0.24中向`sqlalchemy.sql.functions`模块添加了类型后引起的回归问题，作为[#6810](https://www.sqlalchemy.org/trac/ticket/6810)的一部分：
- en: Further enhancements to pep-484 typing to allow SQL functions from [`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") derived elements to work more effectively with
    ORM-mapped attributes ([#10801](https://www.sqlalchemy.org/trac/ticket/10801))
  id: totrans-2485
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进一步增强了 pep-484 类型提示，以便从 [`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") 派生的元素更有效地与 ORM 映射属性一起使用（[#10801](https://www.sqlalchemy.org/trac/ticket/10801)）
- en: Fixed the argument types passed to functions so that literal expressions like
    strings and ints are again interpreted correctly ([#10818](https://www.sqlalchemy.org/trac/ticket/10818))
  id: totrans-2486
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了传递给函数的参数类型，以便再次正确解释文本表达式，如字符串和整数（[#10818](https://www.sqlalchemy.org/trac/ticket/10818)）
- en: 'References: [#10801](https://www.sqlalchemy.org/trac/ticket/10801), [#10818](https://www.sqlalchemy.org/trac/ticket/10818)'
  id: totrans-2487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10801](https://www.sqlalchemy.org/trac/ticket/10801)，[#10818](https://www.sqlalchemy.org/trac/ticket/10818)
- en: asyncio
  id: totrans-2488
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [bug]**'
  id: totrans-2489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [错误]**'
- en: Fixed critical issue in asyncio version of the connection pool where calling
    [`AsyncEngine.dispose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose") would produce a new connection pool
    that did not fully re-establish the use of asyncio-compatible mutexes, leading
    to the use of a plain `threading.Lock()` which would then cause deadlocks in an
    asyncio context when using concurrency features like `asyncio.gather()`.
  id: totrans-2490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 asyncio 版本的连接池中的关键问题，调用 [`AsyncEngine.dispose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose") 会生成一个新的连接池，该连接池未完全重新建立对 asyncio
    兼容互斥锁的使用，导致在使用像 `asyncio.gather()` 这样的并发特性时，在 asyncio 上下文中发生死锁时使用了普通的 `threading.Lock()`。
- en: 'This change is also **backported** to: 1.4.51'
  id: totrans-2491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也 **回溯** 到：1.4.51
- en: 'References: [#10813](https://www.sqlalchemy.org/trac/ticket/10813)'
  id: totrans-2492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10813](https://www.sqlalchemy.org/trac/ticket/10813)
- en: oracle
  id: totrans-2493
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [asyncio]**'
  id: totrans-2494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [asyncio]**'
- en: Added support for [python-oracledb](../dialects/oracle.html#oracledb) in asyncio
    mode, using the newly released version of the `oracledb` DBAPI that includes asyncio
    support. For the 2.0 series, this is a preview release, where the current implementation
    does not yet have include support for [`AsyncConnection.stream()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream"). Improved support is planned
    for the 2.1 release of SQLAlchemy.
  id: totrans-2495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 asyncio 模式下添加了对 [python-oracledb](../dialects/oracle.html#oracledb) 的支持，使用了新发布的支持
    asyncio 的 `oracledb` DBAPI 版本。 对于 2.0 系列，这是一个预览版本，当前实现尚未包括对 [`AsyncConnection.stream()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream") 的支持。 改进的支持计划在 SQLAlchemy 的 2.1
    发布中实现。
- en: 'References: [#10679](https://www.sqlalchemy.org/trac/ticket/10679)'
  id: totrans-2496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10679](https://www.sqlalchemy.org/trac/ticket/10679)
- en: orm
  id: totrans-2497
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-2498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [使用情况]**'
- en: Added preliminary support for Python 3.12 pep-695 type alias structures, when
    resolving custom type maps for ORM Annotated Declarative mappings.
  id: totrans-2499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在为 ORM 注释性声明映射解析自定义类型映射时，添加了对 Python 3.12 pep-695 类型别名结构的初步支持。
- en: 'References: [#10807](https://www.sqlalchemy.org/trac/ticket/10807)'
  id: totrans-2500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10807](https://www.sqlalchemy.org/trac/ticket/10807)
- en: '**[orm] [bug]**'
  id: totrans-2501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue where when making use of the [`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") feature at the same time as using a mapper version_id_col
    could lead to a situation where the second UPDATE statement emitted by the post-update
    feature would fail to make use of the correct version identifier, assuming an
    UPDATE was already emitted in that flush which had already bumped the version
    counter.
  id: totrans-2502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了同时使用 [`relationship.post_update`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.post_update
    "sqlalchemy.orm.relationship") 功能和使用 mapper version_id_col 时可能导致的问题，在这种情况下，后续更新功能发出的第二个
    UPDATE 语句可能无法使用正确的版本标识符，假设在该刷新中已经发出了一个已经增加了版本计数器的 UPDATE。
- en: 'References: [#10800](https://www.sqlalchemy.org/trac/ticket/10800)'
  id: totrans-2503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10800](https://www.sqlalchemy.org/trac/ticket/10800)
- en: '**[orm] [bug]**'
  id: totrans-2504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue where ORM Annotated Declarative would mis-interpret the left hand
    side of a relationship without any collection specified as uselist=True if the
    left type were given as a class and not a string, without using future-style annotations.
  id: totrans-2505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 注释性声明在没有指定任何集合的情况下误解释关系左侧的问题，如果左侧类型是作为类而不是字符串给出的，并且没有使用未来样式注释。
- en: 'References: [#10815](https://www.sqlalchemy.org/trac/ticket/10815)'
  id: totrans-2506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10815](https://www.sqlalchemy.org/trac/ticket/10815)
- en: sql
  id: totrans-2507
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Improved compilation of [`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") / [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_") in the context of a negation of boolean comparison,
    will now render `NOT (expr)` rather than reversing the equality operator to not
    equals, allowing finer-grained control of negations for these non-typical operators.
  id: totrans-2509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了在布尔比较的否定上下文中[`any_()`](../core/sqlelement.html#sqlalchemy.sql.expression.any_
    "sqlalchemy.sql.expression.any_") / [`all_()`](../core/sqlelement.html#sqlalchemy.sql.expression.all_
    "sqlalchemy.sql.expression.all_")的编译，现在将呈现`NOT (expr)`而不是将等式运算符反转为不等于，允许更精细地控制这些非典型运算符的否定。
- en: 'References: [#10817](https://www.sqlalchemy.org/trac/ticket/10817)'
  id: totrans-2510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10817](https://www.sqlalchemy.org/trac/ticket/10817)
- en: typing
  id: totrans-2511
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入
- en: '**[typing] [bug]**'
  id: totrans-2512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: 'Fixed regressions caused by typing added to the `sqlalchemy.sql.functions`
    module in version 2.0.24, as part of [#6810](https://www.sqlalchemy.org/trac/ticket/6810):'
  id: totrans-2513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在版本2.0.24中添加到`sqlalchemy.sql.functions`模块的类型提示引起的回归，作为[#6810](https://www.sqlalchemy.org/trac/ticket/6810)的一部分：
- en: Further enhancements to pep-484 typing to allow SQL functions from [`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") derived elements to work more effectively with
    ORM-mapped attributes ([#10801](https://www.sqlalchemy.org/trac/ticket/10801))
  id: totrans-2514
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进一步增强了pep-484类型提示，以允许从[`sqlalchemy.sql.expression.func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")派生的元素更有效地与ORM映射的属性一起使用（[#10801](https://www.sqlalchemy.org/trac/ticket/10801)）
- en: Fixed the argument types passed to functions so that literal expressions like
    strings and ints are again interpreted correctly ([#10818](https://www.sqlalchemy.org/trac/ticket/10818))
  id: totrans-2515
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了传递给函数的参数类型，以便像字符串和整数这样的文字表达式再次被正确解释（[#10818](https://www.sqlalchemy.org/trac/ticket/10818)）
- en: 'References: [#10801](https://www.sqlalchemy.org/trac/ticket/10801), [#10818](https://www.sqlalchemy.org/trac/ticket/10818)'
  id: totrans-2516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10801](https://www.sqlalchemy.org/trac/ticket/10801), [#10818](https://www.sqlalchemy.org/trac/ticket/10818)
- en: asyncio
  id: totrans-2517
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [bug]**'
  id: totrans-2518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [错误]**'
- en: Fixed critical issue in asyncio version of the connection pool where calling
    [`AsyncEngine.dispose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose") would produce a new connection pool
    that did not fully re-establish the use of asyncio-compatible mutexes, leading
    to the use of a plain `threading.Lock()` which would then cause deadlocks in an
    asyncio context when using concurrency features like `asyncio.gather()`.
  id: totrans-2519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在连接池的asyncio版本中的关键问题，调用[`AsyncEngine.dispose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncEngine.dispose
    "sqlalchemy.ext.asyncio.AsyncEngine.dispose")会产生一个未完全重新建立使用asyncio兼容互斥锁的新连接池，导致在使用并发功能时（如`asyncio.gather()`）在asyncio上下文中使用普通的`threading.Lock()`会导致死锁。
- en: 'This change is also **backported** to: 1.4.51'
  id: totrans-2520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.51
- en: 'References: [#10813](https://www.sqlalchemy.org/trac/ticket/10813)'
  id: totrans-2521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10813](https://www.sqlalchemy.org/trac/ticket/10813)
- en: oracle
  id: totrans-2522
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [asyncio]**'
  id: totrans-2523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [asyncio]**'
- en: Added support for [python-oracledb](../dialects/oracle.html#oracledb) in asyncio
    mode, using the newly released version of the `oracledb` DBAPI that includes asyncio
    support. For the 2.0 series, this is a preview release, where the current implementation
    does not yet have include support for [`AsyncConnection.stream()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream"). Improved support is planned
    for the 2.1 release of SQLAlchemy.
  id: totrans-2524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在asyncio模式下添加了对[python-oracledb](../dialects/oracle.html#oracledb)的支持，使用包含asyncio支持的新发布版本的`oracledb`
    DBAPI。对于2.0系列，这是一个预览版本，当前实现尚未包括对[`AsyncConnection.stream()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.stream
    "sqlalchemy.ext.asyncio.AsyncConnection.stream")的支持。改进的支持计划在SQLAlchemy的2.1版本中实现。
- en: 'References: [#10679](https://www.sqlalchemy.org/trac/ticket/10679)'
  id: totrans-2525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10679](https://www.sqlalchemy.org/trac/ticket/10679)
- en: 2.0.24
  id: totrans-2526
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.24
- en: 'Released: December 28, 2023'
  id: totrans-2527
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年12月28日
- en: orm
  id: totrans-2528
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Improved a fix first implemented for [#3208](https://www.sqlalchemy.org/trac/ticket/3208)
    released in version 0.9.8, where the registry of classes used internally by declarative
    could be subject to a race condition in the case where individual mapped classes
    are being garbage collected at the same time while new mapped classes are being
    constructed, as can happen in some test suite configurations or dynamic class
    creation environments. In addition to the weakref check already added, the list
    of items being iterated is also copied first to avoid “list changed while iterating”
    errors. Pull request courtesy Yilei Yang.
  id: totrans-2530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了首次在版本0.9.8中发布的用于[#3208](https://www.sqlalchemy.org/trac/ticket/3208)的修复，其中声明内部使用的类注册表可能会受到竞争条件的影响，即在个别映射类同时被垃圾回收时，同时正在构建新的映射类，这可能发生在某些测试套件配置或动态类创建环境中。除了已添加的弱引用检查外，还首先复制正在迭代的项目列表，以避免“在迭代时更改列表”错误。拉取请求由Yilei
    Yang提供。
- en: 'This change is also **backported** to: 1.4.51'
  id: totrans-2531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.51
- en: 'References: [#10782](https://www.sqlalchemy.org/trac/ticket/10782)'
  id: totrans-2532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10782](https://www.sqlalchemy.org/trac/ticket/10782)
- en: '**[orm] [bug]**'
  id: totrans-2533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where use of [`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign
    "sqlalchemy.orm.foreign") annotation on a non-initialized [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct would produce an expression without
    a type, which was then not updated at initialization time of the actual column,
    leading to issues such as relationships not determining `use_get` appropriately.
  id: totrans-2534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在未对非初始化的[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")构造上使用[`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign
    "sqlalchemy.orm.foreign")注释会产生一个没有类型的表达式的问题，然后在实际列初始化时未更新，导致关系未适当确定`use_get`的问题。
- en: 'References: [#10597](https://www.sqlalchemy.org/trac/ticket/10597)'
  id: totrans-2535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10597](https://www.sqlalchemy.org/trac/ticket/10597)
- en: '**[orm] [bug]**'
  id: totrans-2536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the error message produced when the unit of work process sets the value
    of a primary key column to NULL due to a related object with a dependency rule
    on that column being deleted, to include not just the destination object and column
    name but also the source column from which the NULL value is originating. Pull
    request courtesy Jan Vollmer.
  id: totrans-2537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了当工作单元过程将主键列的值设置为NULL时产生的错误消息，原因是具有对该列的依赖规则的相关对象被删除，包括不仅目标对象和列名，还包括源列，从中NULL值起源。拉取请求由Jan
    Vollmer提供。
- en: 'References: [#10668](https://www.sqlalchemy.org/trac/ticket/10668)'
  id: totrans-2538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10668](https://www.sqlalchemy.org/trac/ticket/10668)
- en: '**[orm] [bug]**'
  id: totrans-2539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Modified the `__init_subclass__()` method used by [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass"), [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") and [`DeclarativeBaseNoMeta`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBaseNoMeta
    "sqlalchemy.orm.DeclarativeBaseNoMeta") to accept arbitrary `**kw` and to propagate
    them to the `super()` call, allowing greater flexibility in arranging custom superclasses
    and mixins which make use of `__init_subclass__()` keyword arguments. Pull request
    courtesy Michael Oliver.
  id: totrans-2540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了[`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")、[`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")和[`DeclarativeBaseNoMeta`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBaseNoMeta
    "sqlalchemy.orm.DeclarativeBaseNoMeta")使用的`__init_subclass__()`方法，以接受任意的`**kw`并将其传播到`super()`调用，允许更大的灵活性安排使用`__init_subclass__()`关键字参数的自定义超类和混入。拉取请求由Michael
    Oliver提供。
- en: 'References: [#10732](https://www.sqlalchemy.org/trac/ticket/10732)'
  id: totrans-2541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10732](https://www.sqlalchemy.org/trac/ticket/10732)
- en: '**[orm] [bug]**'
  id: totrans-2542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Ensured the use case of [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") objects used in the `returning()` portion of ORM-enabled
    INSERT, UPDATE and DELETE statements is tested and works fully. This was never
    explicitly implemented or tested previously and did not work correctly in the
    1.4 series; in the 2.0 series, ORM UPDATE/DELETE with WHERE criteria was missing
    an implementation method preventing [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") objects from working.
  id: totrans-2543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保在ORM启用的INSERT、UPDATE和DELETE语句的`returning()`部分中使用的[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle")对象的用例经过测试并完全可用。这在以前从未明确实现或测试过，并且在1.4系列中无法正常工作；在2.0系列中，带有WHERE条件的ORM
    UPDATE/DELETE缺少实现方法，导致无法使用[`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle")对象。
- en: 'References: [#10776](https://www.sqlalchemy.org/trac/ticket/10776)'
  id: totrans-2544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10776](https://www.sqlalchemy.org/trac/ticket/10776)
- en: '**[orm] [bug]**'
  id: totrans-2545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 2.0 regression in [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") where a routine that detects sequences would
    not correctly filter out string or bytes instances, making it impossible to assign
    a string value to a specific index (while non-sequence values would work fine).
  id: totrans-2546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了2.0版本中[`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList")的回归问题，其中检测序列的例程未能正确过滤字符串或字节实例，导致无法将字符串值分配给特定索引（而非序列值将正常工作）。
- en: 'References: [#10784](https://www.sqlalchemy.org/trac/ticket/10784)'
  id: totrans-2547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10784](https://www.sqlalchemy.org/trac/ticket/10784)
- en: engine
  id: totrans-2548
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed URL-encoding of the username and password components of [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") objects when converting them to string using the [`URL.render_as_string()`](../core/engines.html#sqlalchemy.engine.URL.render_as_string
    "sqlalchemy.engine.URL.render_as_string") method, by using Python standard library
    `urllib.parse.quote` while allowing for plus signs and spaces to remain unchanged
    as supported by SQLAlchemy’s non-standard URL parsing, rather than the legacy
    home-grown routine from many years ago. Pull request courtesy of Xavier NUNN.
  id: totrans-2550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在将[`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象转换为字符串时，使用[`URL.render_as_string()`](../core/engines.html#sqlalchemy.engine.URL.render_as_string
    "sqlalchemy.engine.URL.render_as_string")方法对用户名和密码组件进行URL编码的问题，通过使用Python标准库`urllib.parse.quote`，同时允许加号和空格保持不变，以支持SQLAlchemy的非标准URL解析，而不是多年前的传统自制例程。感谢Xavier
    NUNN的拉取请求。
- en: 'References: [#10662](https://www.sqlalchemy.org/trac/ticket/10662)'
  id: totrans-2551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10662](https://www.sqlalchemy.org/trac/ticket/10662)
- en: sql
  id: totrans-2552
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in stringify for SQL elements, where a specific dialect is not passed,
    where a dialect-specific element such as the PostgreSQL “on conflict do update”
    construct is encountered and then fails to provide for a stringify dialect with
    the appropriate state to render the construct, leading to internal errors.
  id: totrans-2554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL元素的字符串化问题，在没有传递特定方言的情况下，遇到特定方言元素（如PostgreSQL的“on conflict do update”构造）时，未能提供适当状态以渲染构造，导致内部错误。
- en: 'References: [#10753](https://www.sqlalchemy.org/trac/ticket/10753)'
  id: totrans-2555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10753](https://www.sqlalchemy.org/trac/ticket/10753)
- en: '**[sql] [bug]**'
  id: totrans-2556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where stringifying or compiling a [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") that was against a DML construct such as an [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct would fail to stringify, due to
    a mis-detection that the statement overall is an INSERT, leading to internal errors.
  id: totrans-2557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对DML构造（如[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")构造）的[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")的字符串化或编译失败的问题，由于错误地检���到语句整体为INSERT，导致内部错误。
- en: schema
  id: totrans-2558
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [bug]**'
  id: totrans-2559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Fixed issue where error reporting for unexpected schema item when creating objects
    like [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    would incorrectly handle an argument that was itself passed as a tuple, leading
    to a formatting error. The error message has been modernized to use f-strings.
  id: totrans-2560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在创建像[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")这样的对象时，当参数本身作为元组传递时，错误报告对意外模式项的处理不正确，导致格式错误。错误消息已经更新为使用f-strings。
- en: 'References: [#10654](https://www.sqlalchemy.org/trac/ticket/10654)'
  id: totrans-2561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10654](https://www.sqlalchemy.org/trac/ticket/10654)
- en: typing
  id: totrans-2562
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-2563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Completed pep-484 typing for the `sqlalchemy.sql.functions` module. [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs made against `func` elements should
    now have filled-in return types.
  id: totrans-2564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 `sqlalchemy.sql.functions` 模块完成了 pep-484 类型注解。针对 `func` 元素进行的 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造现在应该具有填充的返回类型。
- en: 'References: [#6810](https://www.sqlalchemy.org/trac/ticket/6810)'
  id: totrans-2565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6810](https://www.sqlalchemy.org/trac/ticket/6810)
- en: asyncio
  id: totrans-2566
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [change]**'
  id: totrans-2567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [change]**'
- en: The `async_fallback` dialect argument is now deprecated, and will be removed
    in SQLAlchemy 2.1\. This flag has not been used for SQLAlchemy’s test suite for
    some time. asyncio dialects can still run in a synchronous style by running code
    within a greenlet using `greenlet_spawn()`.
  id: totrans-2568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`async_fallback` 方言参数现已弃用，并将在 SQLAlchemy 2.1 中移除。这个标志在 SQLAlchemy 的测试套件中已经有一段时间没有使用了。通过使用
    `greenlet_spawn()` 在 greenlet 中运行代码，asyncio 方言仍然可以以同步方式运行。'
- en: postgresql
  id: totrans-2569
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Adjusted the asyncpg dialect such that when the `terminate()` method is used
    to discard an invalidated connection, the dialect will first attempt to gracefully
    close the connection using `.close()` with a timeout, if the operation is proceeding
    within an async event loop context only. This allows the asyncpg driver to attend
    to finalizing a `TimeoutError` including being able to close a long-running query
    server side, which otherwise can keep running after the program has exited.
  id: totrans-2571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 asyncpg 方言，使得当使用 `terminate()` 方法丢弃一个无效的连接时，方言将首先尝试使用带有超时的 `.close()` 优雅地关闭连接，如果操作仅在异步事件循环上下文中进行。这允许
    asyncpg 驱动程序处理最终化 `TimeoutError`，包括能够关闭长时间运行的查询服务器端，否则该查询可能会在程序退出后继续运行。
- en: 'References: [#10717](https://www.sqlalchemy.org/trac/ticket/10717)'
  id: totrans-2572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10717](https://www.sqlalchemy.org/trac/ticket/10717)
- en: mysql
  id: totrans-2573
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed regression introduced by the fix in ticket [#10492](https://www.sqlalchemy.org/trac/ticket/10492)
    when using pool pre-ping with PyMySQL version older than 1.0.
  id: totrans-2575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用旧于 1.0 版本的 PyMySQL 进行池预先检查时由修复票号 [#10492](https://www.sqlalchemy.org/trac/ticket/10492)
    引入的回归。
- en: 'This change is also **backported** to: 1.4.51'
  id: totrans-2576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.4.51
- en: 'References: [#10650](https://www.sqlalchemy.org/trac/ticket/10650)'
  id: totrans-2577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10650](https://www.sqlalchemy.org/trac/ticket/10650)
- en: tests
  id: totrans-2578
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tests
- en: '**[tests] [bug]**'
  id: totrans-2579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Improvements to the test suite to further harden its ability to run when Python
    `greenlet` is not installed. There is now a tox target that includes the token
    “nogreenlet” that will run the suite with greenlet not installed (note that it
    still temporarily installs greenlet as part of the tox config, however).
  id: totrans-2580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对测试套件进行了改进，进一步加固了在未安装 Python `greenlet` 时运行的能力。现在有一个 tox 目标，其中包含标记“nogreenlet”，将在未安装
    greenlet 的情况下运行测试套件（请注意，它仍然会在 tox 配置中临时安装 greenlet）。
- en: 'References: [#10747](https://www.sqlalchemy.org/trac/ticket/10747)'
  id: totrans-2581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10747](https://www.sqlalchemy.org/trac/ticket/10747)
- en: orm
  id: totrans-2582
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved a fix first implemented for [#3208](https://www.sqlalchemy.org/trac/ticket/3208)
    released in version 0.9.8, where the registry of classes used internally by declarative
    could be subject to a race condition in the case where individual mapped classes
    are being garbage collected at the same time while new mapped classes are being
    constructed, as can happen in some test suite configurations or dynamic class
    creation environments. In addition to the weakref check already added, the list
    of items being iterated is also copied first to avoid “list changed while iterating”
    errors. Pull request courtesy Yilei Yang.
  id: totrans-2584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了首次在版本 0.9.8 中发布的针对 [#3208](https://www.sqlalchemy.org/trac/ticket/3208) 实施的修复，其中
    declarative 内部使用的类注册表可能会在同时进行垃圾回收的个别映射类与新映射类构造时发生竞争条件，这可能会在某些测试套件配置或动态类创建环境中发生。除了已添加的
    weakref 检查外，还首先复制正在迭代的项目列表，以避免“在迭代时更改列表”错误。感谢 Yilei Yang 提交的拉取请求。
- en: 'This change is also **backported** to: 1.4.51'
  id: totrans-2585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.4.51
- en: 'References: [#10782](https://www.sqlalchemy.org/trac/ticket/10782)'
  id: totrans-2586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10782](https://www.sqlalchemy.org/trac/ticket/10782)
- en: '**[orm] [bug]**'
  id: totrans-2587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where use of [`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign
    "sqlalchemy.orm.foreign") annotation on a non-initialized [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct would produce an expression without
    a type, which was then not updated at initialization time of the actual column,
    leading to issues such as relationships not determining `use_get` appropriately.
  id: totrans-2588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在非初始化的 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 构造上使用 [`foreign()`](../orm/relationship_api.html#sqlalchemy.orm.foreign
    "sqlalchemy.orm.foreign") 注释会产生没有类型的表达式的问题，然后在实际列的初始化时不会更新，导致关系无法适当地确定 `use_get`
    等问题的问题。
- en: 'References: [#10597](https://www.sqlalchemy.org/trac/ticket/10597)'
  id: totrans-2589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10597](https://www.sqlalchemy.org/trac/ticket/10597)
- en: '**[orm] [bug]**'
  id: totrans-2590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the error message produced when the unit of work process sets the value
    of a primary key column to NULL due to a related object with a dependency rule
    on that column being deleted, to include not just the destination object and column
    name but also the source column from which the NULL value is originating. Pull
    request courtesy Jan Vollmer.
  id: totrans-2591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了工作单元过程生成的错误消息，当由于相关对象对该列具有依赖规则并且被删除时，工作单元过程将主键列的值设置为 NULL 时，不仅包括目标对象和列名，还包括源列的列名，从而使
    NULL 值起源于哪里。拉取请求由 Jan Vollmer 提供。
- en: 'References: [#10668](https://www.sqlalchemy.org/trac/ticket/10668)'
  id: totrans-2592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10668](https://www.sqlalchemy.org/trac/ticket/10668)
- en: '**[orm] [bug]**'
  id: totrans-2593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Modified the `__init_subclass__()` method used by [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass"), [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") and [`DeclarativeBaseNoMeta`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBaseNoMeta
    "sqlalchemy.orm.DeclarativeBaseNoMeta") to accept arbitrary `**kw` and to propagate
    them to the `super()` call, allowing greater flexibility in arranging custom superclasses
    and mixins which make use of `__init_subclass__()` keyword arguments. Pull request
    courtesy Michael Oliver.
  id: totrans-2594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")、[`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") 和 [`DeclarativeBaseNoMeta`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBaseNoMeta
    "sqlalchemy.orm.DeclarativeBaseNoMeta") 使用的 `__init_subclass__()` 方法，接受任意的 `**kw`
    并将它们传播到 `super()` 调用，允许更灵活地安排使用 `__init_subclass__()` 关键字参数的自定义超类和混入。拉取请求由 Michael
    Oliver 提供。
- en: 'References: [#10732](https://www.sqlalchemy.org/trac/ticket/10732)'
  id: totrans-2595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10732](https://www.sqlalchemy.org/trac/ticket/10732)
- en: '**[orm] [bug]**'
  id: totrans-2596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Ensured the use case of [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") objects used in the `returning()` portion of ORM-enabled
    INSERT, UPDATE and DELETE statements is tested and works fully. This was never
    explicitly implemented or tested previously and did not work correctly in the
    1.4 series; in the 2.0 series, ORM UPDATE/DELETE with WHERE criteria was missing
    an implementation method preventing [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") objects from working.
  id: totrans-2597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保在 ORM 启用的 INSERT、UPDATE 和 DELETE 语句的 `returning()` 部分中使用的 [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") 对象的用例经过测试并且完全可用。这在之前从未明确实现或测试过，在 1.4 系列中没有正常工作；在 2.0
    系列中，具有 WHERE 条件的 ORM UPDATE/DELETE 缺少实现方法，阻止了 [`Bundle`](../orm/queryguide/api.html#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") 对象的正常工作。
- en: 'References: [#10776](https://www.sqlalchemy.org/trac/ticket/10776)'
  id: totrans-2598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10776](https://www.sqlalchemy.org/trac/ticket/10776)
- en: '**[orm] [bug]**'
  id: totrans-2599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 2.0 regression in [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") where a routine that detects sequences would
    not correctly filter out string or bytes instances, making it impossible to assign
    a string value to a specific index (while non-sequence values would work fine).
  id: totrans-2600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 2.0 中的 [`MutableList`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.MutableList
    "sqlalchemy.ext.mutable.MutableList") 中的回归，其中检测序列的例程不会正确地过滤出字符串或字节实例，使得无法将字符串值分配给特定索引（而非序列值则正常工作）。
- en: 'References: [#10784](https://www.sqlalchemy.org/trac/ticket/10784)'
  id: totrans-2601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10784](https://www.sqlalchemy.org/trac/ticket/10784)
- en: engine
  id: totrans-2602
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-2603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed URL-encoding of the username and password components of [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") objects when converting them to string using the [`URL.render_as_string()`](../core/engines.html#sqlalchemy.engine.URL.render_as_string
    "sqlalchemy.engine.URL.render_as_string") method, by using Python standard library
    `urllib.parse.quote` while allowing for plus signs and spaces to remain unchanged
    as supported by SQLAlchemy’s non-standard URL parsing, rather than the legacy
    home-grown routine from many years ago. Pull request courtesy of Xavier NUNN.
  id: totrans-2604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用[`URL.render_as_string()`](../core/engines.html#sqlalchemy.engine.URL.render_as_string
    "sqlalchemy.engine.URL.render_as_string")方法将用户名和密码组件进行URL编码时的问题，通过使用Python标准库`urllib.parse.quote`，同时允许加号和空格保持不变，以支持SQLAlchemy的非标准URL解析，而不是多年前的传统自制程序。感谢Xavier
    NUNN的拉取请求。
- en: 'References: [#10662](https://www.sqlalchemy.org/trac/ticket/10662)'
  id: totrans-2605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10662](https://www.sqlalchemy.org/trac/ticket/10662)
- en: sql
  id: totrans-2606
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in stringify for SQL elements, where a specific dialect is not passed,
    where a dialect-specific element such as the PostgreSQL “on conflict do update”
    construct is encountered and then fails to provide for a stringify dialect with
    the appropriate state to render the construct, leading to internal errors.
  id: totrans-2608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了SQL元素的字符串化问题，其中未传递特定方言时，遇到特定方言元素（如PostgreSQL的“on conflict do update”构造），然后未提供适当状态以呈现构造的字符串化方言，导致内部错误。
- en: 'References: [#10753](https://www.sqlalchemy.org/trac/ticket/10753)'
  id: totrans-2609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10753](https://www.sqlalchemy.org/trac/ticket/10753)
- en: '**[sql] [bug]**'
  id: totrans-2610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where stringifying or compiling a [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") that was against a DML construct such as an [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") construct would fail to stringify, due to
    a mis-detection that the statement overall is an INSERT, leading to internal errors.
  id: totrans-2611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对DML构造（如[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")）的[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")进行字符串化或编译时失败的问题，由于错误地检测到语句整体是一个INSERT，导致内部错误。
- en: schema
  id: totrans-2612
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-2613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Fixed issue where error reporting for unexpected schema item when creating objects
    like [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    would incorrectly handle an argument that was itself passed as a tuple, leading
    to a formatting error. The error message has been modernized to use f-strings.
  id: totrans-2614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在创建对象（如[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")）时，对于意外模式项的错误报告处理不正确的问题，该参数本身被传递为元组，导致格式化错误。错误消息已经更新为使用f-strings。
- en: 'References: [#10654](https://www.sqlalchemy.org/trac/ticket/10654)'
  id: totrans-2615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10654](https://www.sqlalchemy.org/trac/ticket/10654)
- en: typing
  id: totrans-2616
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型注释
- en: '**[typing] [bug]**'
  id: totrans-2617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Completed pep-484 typing for the `sqlalchemy.sql.functions` module. [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") constructs made against `func` elements should
    now have filled-in return types.
  id: totrans-2618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成了`sqlalchemy.sql.functions`模块的pep-484类型注释。针对`func`元素进行的[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造现在应该具有填充的返回类型。
- en: 'References: [#6810](https://www.sqlalchemy.org/trac/ticket/6810)'
  id: totrans-2619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6810](https://www.sqlalchemy.org/trac/ticket/6810)
- en: asyncio
  id: totrans-2620
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [change]**'
  id: totrans-2621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [change]**'
- en: The `async_fallback` dialect argument is now deprecated, and will be removed
    in SQLAlchemy 2.1\. This flag has not been used for SQLAlchemy’s test suite for
    some time. asyncio dialects can still run in a synchronous style by running code
    within a greenlet using `greenlet_spawn()`.
  id: totrans-2622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`async_fallback`方言参数现已弃用，并将在SQLAlchemy 2.1中删除。这个标志已经有一段时间没有在SQLAlchemy的测试套件中使用了。通过使用`greenlet_spawn()`在greenlet中运行代码，asyncio方言仍然可以以同步方式运行。'
- en: postgresql
  id: totrans-2623
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Adjusted the asyncpg dialect such that when the `terminate()` method is used
    to discard an invalidated connection, the dialect will first attempt to gracefully
    close the connection using `.close()` with a timeout, if the operation is proceeding
    within an async event loop context only. This allows the asyncpg driver to attend
    to finalizing a `TimeoutError` including being able to close a long-running query
    server side, which otherwise can keep running after the program has exited.
  id: totrans-2625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 asyncpg 方言，使得当使用 `terminate()` 方法丢弃一个无效的连接时，方言将首先尝试使用带有超时的 `.close()` 优雅地关闭连接，仅在异步事件循环上下文中进行该操作时。这允许
    asyncpg 驱动程序处理最终化 `TimeoutError`，包括能够在程序退出后继续运行的长时间运行的查询服务器端。
- en: 'References: [#10717](https://www.sqlalchemy.org/trac/ticket/10717)'
  id: totrans-2626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10717](https://www.sqlalchemy.org/trac/ticket/10717)
- en: mysql
  id: totrans-2627
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed regression introduced by the fix in ticket [#10492](https://www.sqlalchemy.org/trac/ticket/10492)
    when using pool pre-ping with PyMySQL version older than 1.0.
  id: totrans-2629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用旧于 1.0 版本的 PyMySQL 与池预先PING时由修复票证 [#10492](https://www.sqlalchemy.org/trac/ticket/10492)
    引入的回归问题。
- en: 'This change is also **backported** to: 1.4.51'
  id: totrans-2630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.4.51
- en: 'References: [#10650](https://www.sqlalchemy.org/trac/ticket/10650)'
  id: totrans-2631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10650](https://www.sqlalchemy.org/trac/ticket/10650)
- en: tests
  id: totrans-2632
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-2633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Improvements to the test suite to further harden its ability to run when Python
    `greenlet` is not installed. There is now a tox target that includes the token
    “nogreenlet” that will run the suite with greenlet not installed (note that it
    still temporarily installs greenlet as part of the tox config, however).
  id: totrans-2634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对测试套件进行改进，以进一步加强在未安装 Python `greenlet` 时运行的能力。现在有一个 tox 目标包含标记“nogreenlet”，将以未安装
    greenlet 的方式运行测试套件（注意，它仍然在 tox 配置中临时安装 greenlet）。
- en: 'References: [#10747](https://www.sqlalchemy.org/trac/ticket/10747)'
  id: totrans-2635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10747](https://www.sqlalchemy.org/trac/ticket/10747)
- en: 2.0.23
  id: totrans-2636
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.23
- en: 'Released: November 2, 2023'
  id: totrans-2637
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年11月2日
- en: orm
  id: totrans-2638
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-2639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Implemented the [`Session.bulk_insert_mappings.render_nulls`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.render_nulls
    "sqlalchemy.orm.Session.bulk_insert_mappings") parameter for new style bulk ORM
    inserts, allowing `render_nulls=True` as an execution option. This allows for
    bulk ORM inserts with a mixture of `None` values in the parameter dictionaries
    to use a single batch of rows for a given set of dicationary keys, rather than
    breaking up into batches that omit the NULL columns from each INSERT.
  id: totrans-2640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于新样式批量 ORM 插入，实现了 [`Session.bulk_insert_mappings.render_nulls`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.render_nulls
    "sqlalchemy.orm.Session.bulk_insert_mappings") 参数，允许 `render_nulls=True` 作为执行选项。这允许参数字典中含有混合的
    `None` 值的批量 ORM 插入使用给定的字典键的单个行批次，而不是将每个 INSERT 中的 NULL 列分开成批次。
- en: See also
  id: totrans-2641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Sending NULL values in ORM bulk INSERT statements](../orm/queryguide/dml.html#orm-queryguide-insert-null-params)'
  id: totrans-2642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在 ORM 批量 INSERT 语句中发送 NULL 值](../orm/queryguide/dml.html#orm-queryguide-insert-null-params)'
- en: 'References: [#10575](https://www.sqlalchemy.org/trac/ticket/10575)'
  id: totrans-2643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10575](https://www.sqlalchemy.org/trac/ticket/10575)
- en: '**[orm] [bug]**'
  id: totrans-2644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the `__allow_unmapped__` directive failed to allow for legacy
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    / [`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred "sqlalchemy.orm.deferred")
    mappings that nonetheless had annotations such as `Any` or a specific type without
    `Mapped[]` as their type, without errors related to locating the attribute name.
  id: totrans-2645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 `__allow_unmapped__` 指令无法允许旧式 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") / [`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") 映射的问题，这些映射尽管没有 `Mapped[]` 作为它们的类型，但仍然具有诸如 `Any` 或特定类型的注释，并且不会出现有关定位属性名称的错误。
- en: 'References: [#10516](https://www.sqlalchemy.org/trac/ticket/10516)'
  id: totrans-2646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10516](https://www.sqlalchemy.org/trac/ticket/10516)
- en: '**[orm] [bug]**'
  id: totrans-2647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed caching bug where using the [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") construct in conjunction with loader options
    [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload"), [`lazyload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") would fail to substitute bound parameter values correctly
    on subsequent caching runs.
  id: totrans-2648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") 结构与加载器选项 [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")、[`lazyload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") 结合使用时，在后续缓存运行中无法正确替换绑定参数值的缓存错误。
- en: 'References: [#10570](https://www.sqlalchemy.org/trac/ticket/10570)'
  id: totrans-2649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10570](https://www.sqlalchemy.org/trac/ticket/10570)
- en: '**[orm] [bug]**'
  id: totrans-2650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in ORM annotated declarative where using a `ClassVar` that nonetheless
    referred in some way to an ORM mapped class name would fail to be interpreted
    as a `ClassVar` that’s not mapped.
  id: totrans-2651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 注释的声明式中的错误，其中使用 `ClassVar`，但仍然以某种方式引用了 ORM 映射类名，将无法解释为未映射的 `ClassVar`。
- en: 'References: [#10472](https://www.sqlalchemy.org/trac/ticket/10472)'
  id: totrans-2652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10472](https://www.sqlalchemy.org/trac/ticket/10472)
- en: sql
  id: totrans-2653
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-2654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Implemented “literal value processing” for the [`Interval`](../core/type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval") datatype for both the PostgreSQL and Oracle dialects,
    allowing literal rendering of interval values. Pull request courtesy Indivar Mishra.
  id: totrans-2655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 PostgreSQL 和 Oracle 方言的 [`Interval`](../core/type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval") 数据类型实现了“文字值处理”，允许文字渲染间隔值。Pull request 由 Indivar Mishra
    提供。
- en: 'References: [#9737](https://www.sqlalchemy.org/trac/ticket/9737)'
  id: totrans-2656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9737](https://www.sqlalchemy.org/trac/ticket/9737)
- en: '**[sql] [bug]**'
  id: totrans-2657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where using the same bound parameter more than once with `literal_execute=True`
    in some combinations with other literal rendering parameters would cause the wrong
    values to render due to an iteration issue.
  id: totrans-2658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在某些与其他文字渲染参数的组合中，使用相同的绑定参数超过一次并且 `literal_execute=True` 会导致错误值渲染的问题，这是由于迭代问题造成的。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-2659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已被**回溯**至：1.4.50
- en: 'References: [#10142](https://www.sqlalchemy.org/trac/ticket/10142)'
  id: totrans-2660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10142](https://www.sqlalchemy.org/trac/ticket/10142)
- en: '**[sql] [bug]**'
  id: totrans-2661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added compiler-level None/NULL handling for the “literal processors” of all
    datatypes that include literal processing, that is, where a value is rendered
    inline within a SQL statement rather than as a bound parameter, for all those
    types that do not feature explicit “null value” handling. Previously this behavior
    was undefined and inconsistent.
  id: totrans-2662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为所有包含文字处理的数据类型的“文字处理器”添加了编译器级的 None/NULL 处理，即在 SQL 语句中将值内联呈现而不是作为绑定参数，适用于所有那些不具有显式“null
    值”处理的类型。之前，这种行为是未定义且不一致的。
- en: 'References: [#10535](https://www.sqlalchemy.org/trac/ticket/10535)'
  id: totrans-2663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10535](https://www.sqlalchemy.org/trac/ticket/10535)
- en: '**[sql]**'
  id: totrans-2664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Removed unused placeholder method `TypeEngine.compare_against_backend()` This
    method was used by very old versions of Alembic. See [https://github.com/sqlalchemy/alembic/issues/1293](https://github.com/sqlalchemy/alembic/issues/1293)
    for details.
  id: totrans-2665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了未使用的占位符方法 `TypeEngine.compare_against_backend()` 。该方法被 Alembic 的非常旧的版本使用。有关详细信息，请参见
    [https://github.com/sqlalchemy/alembic/issues/1293](https://github.com/sqlalchemy/alembic/issues/1293)
    。
- en: asyncio
  id: totrans-2666
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [bug]**'
  id: totrans-2667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [bug]**'
- en: Fixed bug with method [`AsyncSession.close_all()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all") that was not working correctly.
    Also added function [`close_all_sessions()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions") that’s the equivalent of [`close_all_sessions()`](../orm/session_api.html#sqlalchemy.orm.close_all_sessions
    "sqlalchemy.orm.close_all_sessions"). Pull request courtesy of Bryan不可思议.
  id: totrans-2668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`AsyncSession.close_all()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all") 方法的错误。还添加了函数 [`close_all_sessions()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions") ，它是 [`close_all_sessions()`](../orm/session_api.html#sqlalchemy.orm.close_all_sessions
    "sqlalchemy.orm.close_all_sessions") 的等效项。Pull request 由 Bryan不可思议 提供。
- en: 'References: [#10421](https://www.sqlalchemy.org/trac/ticket/10421)'
  id: totrans-2669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10421](https://www.sqlalchemy.org/trac/ticket/10421)
- en: postgresql
  id: totrans-2670
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed 2.0 regression caused by [#7744](https://www.sqlalchemy.org/trac/ticket/7744)
    where chains of expressions involving PostgreSQL JSON operators combined with
    other operators such as string concatenation would lose correct parenthesization,
    due to an implementation detail specific to the PostgreSQL dialect.
  id: totrans-2672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 2.0 中由 [#7744](https://www.sqlalchemy.org/trac/ticket/7744) 引起的回归，其中涉及 PostgreSQL
    JSON 操作符与其他操作符（如字符串连接）组合的表达式链会由于特定于 PostgreSQL 方言的实现细节而失去正确的括号，。
- en: 'References: [#10479](https://www.sqlalchemy.org/trac/ticket/10479)'
  id: totrans-2673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10479](https://www.sqlalchemy.org/trac/ticket/10479)
- en: '**[postgresql] [bug]**'
  id: totrans-2674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed SQL handling for “insertmanyvalues” when using the [`BIT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT") datatype with the asyncpg backend. The [`BIT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT") on asyncpg apparently requires the use of
    an asyncpg-specific `BitString` type which is currently exposed when using this
    DBAPI, making it incompatible with other PostgreSQL DBAPIs that all work with
    plain bitstrings here. A future fix in version 2.1 will normalize this datatype
    across all PG backends. Pull request courtesy Sören Oldag.
  id: totrans-2675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 asyncpg 后端和 [`BIT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT") 数据类型时，修复了“insertmanyvalues”的 SQL 处理。 asyncpg
    上的 [`BIT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.BIT "sqlalchemy.dialects.postgresql.BIT")
    显然需要使用 asyncpg 特定的 `BitString` 类型，该类型当前在使用此 DBAPI 时公开，使其与其他所有在此处使用普通位串的 PostgreSQL
    DBAPI 不兼容。 在版本 2.1 中的未来修复将会使这种数据类型在所有 PG 后端上正规化。 感谢 Sören Oldag 提交的拉取请求。
- en: 'References: [#10532](https://www.sqlalchemy.org/trac/ticket/10532)'
  id: totrans-2676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10532](https://www.sqlalchemy.org/trac/ticket/10532)
- en: mysql
  id: totrans-2677
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Repaired a new incompatibility in the MySQL “pre-ping” routine where the `False`
    argument passed to `connection.ping()`, which is intended to disable an unwanted
    “automatic reconnect” feature, is being deprecated in MySQL drivers and backends,
    and is producing warnings for some versions of MySQL’s native client drivers.
    It’s removed for mysqlclient, whereas for PyMySQL and drivers based on PyMySQL,
    the parameter will be deprecated and removed at some point, so API introspection
    is used to future proof against these various stages of removal.
  id: totrans-2679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MySQL “预 Ping”例程中的新不兼容性，其中传递给`connection.ping()`的`False`参数，该参数旨在禁用不需要的“自动重新连接”功能，在
    MySQL 驱动程序和后端中被弃用，并且对于某些版本的 MySQL 本机客户端驱动程序正在产生警告。 对于 mysqlclient，它已被删除，而对于 PyMySQL
    和基于 PyMySQL 的驱动程序，该参数将在某个时候被弃用并删除，因此使用 API 内省来对抗这些不同阶段的移除。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-2680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：1.4.50
- en: 'References: [#10492](https://www.sqlalchemy.org/trac/ticket/10492)'
  id: totrans-2681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10492](https://www.sqlalchemy.org/trac/ticket/10492)
- en: mariadb
  id: totrans-2682
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mariadb
- en: '**[mariadb] [bug]**'
  id: totrans-2683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [bug]**'
- en: Adjusted the MySQL / MariaDB dialects to default a generated column to NULL
    when using MariaDB, if [`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column") was not specified with an explicit `True` or `False`
    value, as MariaDB does not support the “NOT NULL” phrase with a generated column.
    Pull request courtesy Indivar.
  id: totrans-2684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 MariaDB 时，调整了 MySQL / MariaDB 方言，如果未使用显式的`True`或`False`值指定[`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column")，则将生成的列默认设置为 NULL，因为 MariaDB 不支持具有生成列的“NOT NULL”短语。
    感谢 Indivar 提交的拉取请求。
- en: 'References: [#10056](https://www.sqlalchemy.org/trac/ticket/10056)'
  id: totrans-2685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10056](https://www.sqlalchemy.org/trac/ticket/10056)
- en: '**[mariadb] [bug] [regression]**'
  id: totrans-2686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [bug] [regression]**'
- en: Established a workaround for what seems to be an intrinsic issue across MySQL/MariaDB
    drivers where a RETURNING result for DELETE DML which returns no rows using SQLAlchemy’s
    “empty IN” criteria fails to provide a cursor.description, which then yields result
    that returns no rows, leading to regressions for the ORM that in the 2.0 series
    uses RETURNING for bulk DELETE statements for the “synchronize session” feature.
    To resolve, when the specific case of “no description when RETURNING was given”
    is detected, an “empty result” with a correct cursor description is generated
    and used in place of the non-working cursor.
  id: totrans-2687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为似乎是 MySQL/MariaDB 驱动程序之间的固有问题建立了一个解决方法，该问题在使用 SQLAlchemy 的“空 IN”条件返回不包含行的 DELETE
    DML 的 RETURNING 结果时失败，该 DELETE DML 在 2.0 系列中用于“同步会话”功能的批量 DELETE 语句。 为了解决这个问题，当检测到“给定
    RETURNING 时没有描述”的特定情况时，将生成一个带有正确游标描述的“空结果”，并将其用于替代不起作用的游标。
- en: 'References: [#10505](https://www.sqlalchemy.org/trac/ticket/10505)'
  id: totrans-2688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10505](https://www.sqlalchemy.org/trac/ticket/10505)
- en: mssql
  id: totrans-2689
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [usecase]**'
  id: totrans-2690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [usecase]**'
- en: Added support for the `aioodbc` driver implemented for SQL Server, which builds
    on top of the pyodbc and general aio* dialect architecture.
  id: totrans-2691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已添加对基于pyodbc和通用aio*方言架构构建的SQL Server的`aioodbc`驱动程序的支持。
- en: See also
  id: totrans-2692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[aioodbc](../dialects/mssql.html#mssql-aioodbc) - in the SQL Server dialect
    documentation.'
  id: totrans-2693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[aioodbc](../dialects/mssql.html#mssql-aioodbc) - 在SQL Server方言文档中。'
- en: 'References: [#6521](https://www.sqlalchemy.org/trac/ticket/6521)'
  id: totrans-2694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6521](https://www.sqlalchemy.org/trac/ticket/6521)
- en: '**[mssql] [bug] [reflection]**'
  id: totrans-2695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [reflection]**'
- en: Fixed issue where identity column reflection would fail for a bigint column
    with a large identity start value (more than 18 digits).
  id: totrans-2696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在具有大于18位数的大型标识起始值的bigint列的情况下，标识列反射将失败的问题。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-2697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**反向移植**到：1.4.50
- en: 'References: [#10504](https://www.sqlalchemy.org/trac/ticket/10504)'
  id: totrans-2698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10504](https://www.sqlalchemy.org/trac/ticket/10504)
- en: oracle
  id: totrans-2699
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue in [`Interval`](../core/type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval") datatype where the Oracle implementation was not
    being used for DDL generation, leading to the `day_precision` and `second_precision`
    parameters to be ignored, despite being supported by this dialect. Pull request
    courtesy Indivar.
  id: totrans-2701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`Interval`](../core/type_basics.html#sqlalchemy.types.Interval "sqlalchemy.types.Interval")数据类型中修复了问题，其中Oracle实现未用于DDL生成，导致`day_precision`和`second_precision`参数被忽略，尽管该方言支持。感谢Indivar的Pull请求。
- en: 'References: [#10509](https://www.sqlalchemy.org/trac/ticket/10509)'
  id: totrans-2702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10509](https://www.sqlalchemy.org/trac/ticket/10509)
- en: '**[oracle] [bug]**'
  id: totrans-2703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue where the cx_Oracle dialect claimed to support a lower cx_Oracle
    version (7.x) than was actually supported in practice within the 2.0 series of
    SQLAlchemy. The dialect imports symbols that are only in cx_Oracle 8 or higher,
    so runtime dialect checks as well as setup.cfg requirements have been updated
    to reflect this compatibility.
  id: totrans-2704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了cx_Oracle方言声称支持比实际上在SQLAlchemy 2.0系列中实际支持的更低的cx_Oracle版本（7.x）的问题。方言导入了仅在cx_Oracle
    8或更高版本中才有的符号，因此运行时方言检查以及setup.cfg要求已更新以反映此兼容性。
- en: 'References: [#10470](https://www.sqlalchemy.org/trac/ticket/10470)'
  id: totrans-2705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10470](https://www.sqlalchemy.org/trac/ticket/10470)
- en: orm
  id: totrans-2706
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-2707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Implemented the [`Session.bulk_insert_mappings.render_nulls`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.render_nulls
    "sqlalchemy.orm.Session.bulk_insert_mappings") parameter for new style bulk ORM
    inserts, allowing `render_nulls=True` as an execution option. This allows for
    bulk ORM inserts with a mixture of `None` values in the parameter dictionaries
    to use a single batch of rows for a given set of dicationary keys, rather than
    breaking up into batches that omit the NULL columns from each INSERT.
  id: totrans-2708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了[`Session.bulk_insert_mappings.render_nulls`](../orm/session_api.html#sqlalchemy.orm.Session.bulk_insert_mappings.params.render_nulls
    "sqlalchemy.orm.Session.bulk_insert_mappings")参数，用于新样式的批量ORM插入，允许`render_nulls=True`作为执行选项。这允许在参数字典中使用`None`值的批量ORM插入使用给定的一组字典键的单个行批次，而不是将其拆分为省略每个INSERT中的NULL列的批次。
- en: See also
  id: totrans-2709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Sending NULL values in ORM bulk INSERT statements](../orm/queryguide/dml.html#orm-queryguide-insert-null-params)'
  id: totrans-2710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在ORM批量INSERT语句中发送NULL值](../orm/queryguide/dml.html#orm-queryguide-insert-null-params)'
- en: 'References: [#10575](https://www.sqlalchemy.org/trac/ticket/10575)'
  id: totrans-2711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10575](https://www.sqlalchemy.org/trac/ticket/10575)
- en: '**[orm] [bug]**'
  id: totrans-2712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the `__allow_unmapped__` directive failed to allow for legacy
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    / [`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred "sqlalchemy.orm.deferred")
    mappings that nonetheless had annotations such as `Any` or a specific type without
    `Mapped[]` as their type, without errors related to locating the attribute name.
  id: totrans-2713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`__allow_unmapped__`指令无法允许具有`Any`或没有`Mapped[]`作为其类型的特定类型的注释的遗留[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") / [`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred")映射的问题，而无需与定位属性名称相关的错误。
- en: 'References: [#10516](https://www.sqlalchemy.org/trac/ticket/10516)'
  id: totrans-2714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10516](https://www.sqlalchemy.org/trac/ticket/10516)
- en: '**[orm] [bug]**'
  id: totrans-2715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed caching bug where using the [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") construct in conjunction with loader options
    [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload"), [`lazyload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") would fail to substitute bound parameter values correctly
    on subsequent caching runs.
  id: totrans-2716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") 结构与加载器选项 [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")，[`lazyload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.lazyload
    "sqlalchemy.orm.lazyload") 结合使用时，与后续缓存运行中正确替换绑定参数值失败的缓存错误。
- en: 'References: [#10570](https://www.sqlalchemy.org/trac/ticket/10570)'
  id: totrans-2717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10570](https://www.sqlalchemy.org/trac/ticket/10570)
- en: '**[orm] [bug]**'
  id: totrans-2718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in ORM annotated declarative where using a `ClassVar` that nonetheless
    referred in some way to an ORM mapped class name would fail to be interpreted
    as a `ClassVar` that’s not mapped.
  id: totrans-2719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 注释声明中的错误，其中使用了一个 `ClassVar`，尽管以某种方式引用了 ORM 映射的类名，但未能被解释为未映射的 `ClassVar`。
- en: 'References: [#10472](https://www.sqlalchemy.org/trac/ticket/10472)'
  id: totrans-2720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10472](https://www.sqlalchemy.org/trac/ticket/10472)
- en: sql
  id: totrans-2721
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-2722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Implemented “literal value processing” for the [`Interval`](../core/type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval") datatype for both the PostgreSQL and Oracle dialects,
    allowing literal rendering of interval values. Pull request courtesy Indivar Mishra.
  id: totrans-2723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了对于[`Interval`](../core/type_basics.html#sqlalchemy.types.Interval "sqlalchemy.types.Interval")数据类型的“字面值处理”，适用于
    PostgreSQL 和 Oracle 方言，允许直接渲染间隔值。感谢 Indivar Mishra 提供的拉取请求。
- en: 'References: [#9737](https://www.sqlalchemy.org/trac/ticket/9737)'
  id: totrans-2724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9737](https://www.sqlalchemy.org/trac/ticket/9737)
- en: '**[sql] [bug]**'
  id: totrans-2725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where using the same bound parameter more than once with `literal_execute=True`
    in some combinations with other literal rendering parameters would cause the wrong
    values to render due to an iteration issue.
  id: totrans-2726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即在某些与其他字面渲染参数组合使用`literal_execute=True`时，多次使用相同的绑定参数会由于迭代问题导致错误的值渲染。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-2727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.4.50
- en: 'References: [#10142](https://www.sqlalchemy.org/trac/ticket/10142)'
  id: totrans-2728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10142](https://www.sqlalchemy.org/trac/ticket/10142)
- en: '**[sql] [bug]**'
  id: totrans-2729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added compiler-level None/NULL handling for the “literal processors” of all
    datatypes that include literal processing, that is, where a value is rendered
    inline within a SQL statement rather than as a bound parameter, for all those
    types that do not feature explicit “null value” handling. Previously this behavior
    was undefined and inconsistent.
  id: totrans-2730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为所有包含字面处理的数据类型的“字面处理器”添加了编译器级 None/NULL 处理，即在 SQL 语句中将值内联呈现而不是作为绑定参数，对于所有不具有显式“空值”处理的类型。以前，此行为是未定义的且不一致的。
- en: 'References: [#10535](https://www.sqlalchemy.org/trac/ticket/10535)'
  id: totrans-2731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10535](https://www.sqlalchemy.org/trac/ticket/10535)
- en: '**[sql]**'
  id: totrans-2732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Removed unused placeholder method `TypeEngine.compare_against_backend()` This
    method was used by very old versions of Alembic. See [https://github.com/sqlalchemy/alembic/issues/1293](https://github.com/sqlalchemy/alembic/issues/1293)
    for details.
  id: totrans-2733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了未使用的占位符方法 `TypeEngine.compare_against_backend()`，此方法仅用于非常旧版本的 Alembic。有关详细信息，请参见[https://github.com/sqlalchemy/alembic/issues/1293](https://github.com/sqlalchemy/alembic/issues/1293)。
- en: asyncio
  id: totrans-2734
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [bug]**'
  id: totrans-2735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [bug]**'
- en: Fixed bug with method [`AsyncSession.close_all()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all") that was not working correctly.
    Also added function [`close_all_sessions()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions") that’s the equivalent of [`close_all_sessions()`](../orm/session_api.html#sqlalchemy.orm.close_all_sessions
    "sqlalchemy.orm.close_all_sessions"). Pull request courtesy of Bryan不可思议.
  id: totrans-2736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`AsyncSession.close_all()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.close_all
    "sqlalchemy.ext.asyncio.AsyncSession.close_all") 方法无法正常工作的错误。还添加了函数 [`close_all_sessions()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.close_all_sessions
    "sqlalchemy.ext.asyncio.close_all_sessions") ，它等同于 [`close_all_sessions()`](../orm/session_api.html#sqlalchemy.orm.close_all_sessions
    "sqlalchemy.orm.close_all_sessions")。拉取请求由 Bryan不可思议 提供。
- en: 'References: [#10421](https://www.sqlalchemy.org/trac/ticket/10421)'
  id: totrans-2737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10421](https://www.sqlalchemy.org/trac/ticket/10421)
- en: postgresql
  id: totrans-2738
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed 2.0 regression caused by [#7744](https://www.sqlalchemy.org/trac/ticket/7744)
    where chains of expressions involving PostgreSQL JSON operators combined with
    other operators such as string concatenation would lose correct parenthesization,
    due to an implementation detail specific to the PostgreSQL dialect.
  id: totrans-2740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 [#7744](https://www.sqlalchemy.org/trac/ticket/7744) 引起的 2.0 版本回归，其中涉及
    PostgreSQL JSON 运算符的表达式链与其他运算符（如字符串连接）组合会丢失正确的括号化，这是由于特定于 PostgreSQL 方言的实现细节造成的。
- en: 'References: [#10479](https://www.sqlalchemy.org/trac/ticket/10479)'
  id: totrans-2741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10479](https://www.sqlalchemy.org/trac/ticket/10479)
- en: '**[postgresql] [bug]**'
  id: totrans-2742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed SQL handling for “insertmanyvalues” when using the [`BIT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT") datatype with the asyncpg backend. The [`BIT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT") on asyncpg apparently requires the use of
    an asyncpg-specific `BitString` type which is currently exposed when using this
    DBAPI, making it incompatible with other PostgreSQL DBAPIs that all work with
    plain bitstrings here. A future fix in version 2.1 will normalize this datatype
    across all PG backends. Pull request courtesy Sören Oldag.
  id: totrans-2743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 asyncpg 后端时使用 [`BIT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.BIT
    "sqlalchemy.dialects.postgresql.BIT") 数据类型的 “insertmanyvalues” 的 SQL 处理问题。在 asyncpg
    上，[`BIT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.BIT "sqlalchemy.dialects.postgresql.BIT")
    显然需要使用 asyncpg 特定的 `BitString` 类型，目前在使用此 DBAPI 时暴露，这使其与其他 PostgreSQL DBAPI 不兼容，所有这些
    DBAPI 都在这里使用普通的位字符串。在版本 2.1 中，将通过将此数据类型在所有 PG 后端上归一化来解决此问题。拉取请求由 Sören Oldag 提供。
- en: 'References: [#10532](https://www.sqlalchemy.org/trac/ticket/10532)'
  id: totrans-2744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10532](https://www.sqlalchemy.org/trac/ticket/10532)
- en: mysql
  id: totrans-2745
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-2746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Repaired a new incompatibility in the MySQL “pre-ping” routine where the `False`
    argument passed to `connection.ping()`, which is intended to disable an unwanted
    “automatic reconnect” feature, is being deprecated in MySQL drivers and backends,
    and is producing warnings for some versions of MySQL’s native client drivers.
    It’s removed for mysqlclient, whereas for PyMySQL and drivers based on PyMySQL,
    the parameter will be deprecated and removed at some point, so API introspection
    is used to future proof against these various stages of removal.
  id: totrans-2747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MySQL 的 “pre-ping” 例程中的一个新的不兼容性，其中传递给 `connection.ping()` 的 `False` 参数，用于禁用不想要的
    “自动重新连接” 功能，正在被 MySQL 驱动程序和后端弃用，并且对某些版本的 MySQL 的本机客户端驱动程序产生警告。对于 mysqlclient，它已被移除，而对于
    PyMySQL 和基于 PyMySQL 的驱动程序，该参数将在某个时候被弃用并移除，因此使用 API 内省来未来证明对这些移除的各个阶段进行了保护。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-2748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到了：1.4.50
- en: 'References: [#10492](https://www.sqlalchemy.org/trac/ticket/10492)'
  id: totrans-2749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10492](https://www.sqlalchemy.org/trac/ticket/10492)
- en: mariadb
  id: totrans-2750
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mariadb
- en: '**[mariadb] [bug]**'
  id: totrans-2751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [bug]**'
- en: Adjusted the MySQL / MariaDB dialects to default a generated column to NULL
    when using MariaDB, if [`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column") was not specified with an explicit `True` or `False`
    value, as MariaDB does not support the “NOT NULL” phrase with a generated column.
    Pull request courtesy Indivar.
  id: totrans-2752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 MySQL / MariaDB 方言，当使用 MariaDB 时，默认将生成的列设置为 NULL，如果 [`Column.nullable`](../core/metadata.html#sqlalchemy.schema.Column.params.nullable
    "sqlalchemy.schema.Column") 没有使用显式的 `True` 或 `False` 值进行指定，因为 MariaDB 不支持带有生成列的“NOT
    NULL”短语。拉取请求由 Indivar 提供。
- en: 'References: [#10056](https://www.sqlalchemy.org/trac/ticket/10056)'
  id: totrans-2753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10056](https://www.sqlalchemy.org/trac/ticket/10056)
- en: '**[mariadb] [bug] [regression]**'
  id: totrans-2754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [bug] [regression]**'
- en: Established a workaround for what seems to be an intrinsic issue across MySQL/MariaDB
    drivers where a RETURNING result for DELETE DML which returns no rows using SQLAlchemy’s
    “empty IN” criteria fails to provide a cursor.description, which then yields result
    that returns no rows, leading to regressions for the ORM that in the 2.0 series
    uses RETURNING for bulk DELETE statements for the “synchronize session” feature.
    To resolve, when the specific case of “no description when RETURNING was given”
    is detected, an “empty result” with a correct cursor description is generated
    and used in place of the non-working cursor.
  id: totrans-2755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 建立了一个解决 MySQL/MariaDB 驱动程序中似乎存在的一个固有问题的方法，即对于使用 SQLAlchemy 的 “空 IN” 条件返回不返回任何行的
    DELETE DML 的 RETURNING 结果，失败提供 cursor.description，然后返回没有行的结果，导致在 2.0 系列中为 ORM
    使用 RETURNING 用于“同步会话”功能的批量 DELETE 语句时出现回归。为了解决这个问题，当检测到 “给出 RETURNING 时没有描述” 的特定情况时，会生成一个带有正确游标描述的“空结果”，并在非工作游标的位置使用它。
- en: 'References: [#10505](https://www.sqlalchemy.org/trac/ticket/10505)'
  id: totrans-2756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10505](https://www.sqlalchemy.org/trac/ticket/10505)
- en: mssql
  id: totrans-2757
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [usecase]**'
  id: totrans-2758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [usecase]**'
- en: Added support for the `aioodbc` driver implemented for SQL Server, which builds
    on top of the pyodbc and general aio* dialect architecture.
  id: totrans-2759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SQL Server 实现的 `aioodbc` 驱动添加了支持，该驱动建立在 pyodbc 和通用 aio* 方言架构之上。
- en: See also
  id: totrans-2760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[aioodbc](../dialects/mssql.html#mssql-aioodbc) - in the SQL Server dialect
    documentation.'
  id: totrans-2761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[aioodbc](../dialects/mssql.html#mssql-aioodbc) - 在 SQL Server 方言文档中。'
- en: 'References: [#6521](https://www.sqlalchemy.org/trac/ticket/6521)'
  id: totrans-2762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6521](https://www.sqlalchemy.org/trac/ticket/6521)
- en: '**[mssql] [bug] [reflection]**'
  id: totrans-2763
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [reflection]**'
- en: Fixed issue where identity column reflection would fail for a bigint column
    with a large identity start value (more than 18 digits).
  id: totrans-2764
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对于具有大于 18 位数的大整数起始值的 bigint 列的身份列反射失败的问题。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-2765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被 **回溯** 至：1.4.50
- en: 'References: [#10504](https://www.sqlalchemy.org/trac/ticket/10504)'
  id: totrans-2766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10504](https://www.sqlalchemy.org/trac/ticket/10504)
- en: oracle
  id: totrans-2767
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-2768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue in [`Interval`](../core/type_basics.html#sqlalchemy.types.Interval
    "sqlalchemy.types.Interval") datatype where the Oracle implementation was not
    being used for DDL generation, leading to the `day_precision` and `second_precision`
    parameters to be ignored, despite being supported by this dialect. Pull request
    courtesy Indivar.
  id: totrans-2769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Interval`](../core/type_basics.html#sqlalchemy.types.Interval "sqlalchemy.types.Interval")
    数据类型中的问题，在 Oracle 实现未用于 DDL 生成，导致 `day_precision` 和 `second_precision` 参数被忽略，尽管该方言支持这些参数。Indivar
    提供的拉取请求。
- en: 'References: [#10509](https://www.sqlalchemy.org/trac/ticket/10509)'
  id: totrans-2770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10509](https://www.sqlalchemy.org/trac/ticket/10509)
- en: '**[oracle] [bug]**'
  id: totrans-2771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue where the cx_Oracle dialect claimed to support a lower cx_Oracle
    version (7.x) than was actually supported in practice within the 2.0 series of
    SQLAlchemy. The dialect imports symbols that are only in cx_Oracle 8 or higher,
    so runtime dialect checks as well as setup.cfg requirements have been updated
    to reflect this compatibility.
  id: totrans-2772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 cx_Oracle 方言声称支持比实际在 SQLAlchemy 2.0 系列中支持的更低的 cx_Oracle 版本（7.x）的问题。方言导入了仅在
    cx_Oracle 8 或更高版本中才存在的符号，因此运行时方言检查以及 setup.cfg 要求已更新以反映此兼容性。
- en: 'References: [#10470](https://www.sqlalchemy.org/trac/ticket/10470)'
  id: totrans-2773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10470](https://www.sqlalchemy.org/trac/ticket/10470)
- en: 2.0.22
  id: totrans-2774
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.22
- en: 'Released: October 12, 2023'
  id: totrans-2775
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023 年 10 月 12 日
- en: orm
  id: totrans-2776
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-2777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added method [`Session.get_one()`](../orm/session_api.html#sqlalchemy.orm.Session.get_one
    "sqlalchemy.orm.Session.get_one") that behaves like [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") but raises an exception instead of returning `None`
    if no instance was found with the provided primary key. Pull request courtesy
    of Carlos Sousa.
  id: totrans-2778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 [`Session.get_one()`](../orm/session_api.html#sqlalchemy.orm.Session.get_one
    "sqlalchemy.orm.Session.get_one") 方法，其行为类似于 [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get")，但是如果未找到具有提供的主键的实例，则引发异常而不是返回 `None`。由 Carlos Sousa
    提供的拉取请求。
- en: 'References: [#10202](https://www.sqlalchemy.org/trac/ticket/10202)'
  id: totrans-2779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10202](https://www.sqlalchemy.org/trac/ticket/10202)
- en: '**[orm] [usecase]**'
  id: totrans-2780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added an option to permanently close sessions. Set to `False` the new parameter
    [`Session.close_resets_only`](../orm/session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") will prevent a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") from performing any other operation after [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") has been called.
  id: totrans-2781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个选项以永久关闭会话。将新参数 [`Session.close_resets_only`](../orm/session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") 设置为 `False` 将阻止在调用 [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") 后执行任何其他操作。
- en: Added new method [`Session.reset()`](../orm/session_api.html#sqlalchemy.orm.Session.reset
    "sqlalchemy.orm.Session.reset") that will reset a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to its initial state. This is an alias of [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close"), unless [`Session.close_resets_only`](../orm/session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") is set to `False`.
  id: totrans-2782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法[`Session.reset()`](../orm/session_api.html#sqlalchemy.orm.Session.reset
    "sqlalchemy.orm.Session.reset")，它将一个[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")重置为其初始状态。这是 [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") 的别名，除非 [`Session.close_resets_only`](../orm/session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") 设置为`False`。
- en: 'References: [#7787](https://www.sqlalchemy.org/trac/ticket/7787)'
  id: totrans-2783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7787](https://www.sqlalchemy.org/trac/ticket/7787)
- en: '**[orm] [bug]**'
  id: totrans-2784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a wide range of [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") parameters that were not being transferred when
    using the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") object inside of a pep-593 `Annotated` object,
    including [`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column"), [`mapped_column.deferred`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column"), [`mapped_column.autoincrement`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.autoincrement
    "sqlalchemy.orm.mapped_column"), [`mapped_column.system`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.system
    "sqlalchemy.orm.mapped_column"), [`mapped_column.info`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.info
    "sqlalchemy.orm.mapped_column") etc.
  id: totrans-2785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一系列[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")参数，在 pep-593 `Annotated` 对象中使用[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")对象时未被传递，包括 [`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column")，[`mapped_column.deferred`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column")，[`mapped_column.autoincrement`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.autoincrement
    "sqlalchemy.orm.mapped_column")，[`mapped_column.system`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.system
    "sqlalchemy.orm.mapped_column")，[`mapped_column.info`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.info
    "sqlalchemy.orm.mapped_column")等。
- en: Additionally, it remains not supported to have dataclass arguments, such as
    [`mapped_column.kw_only`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.kw_only
    "sqlalchemy.orm.mapped_column"), [`mapped_column.default_factory`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.default_factory
    "sqlalchemy.orm.mapped_column") etc. indicated within the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") received by `Annotated`, as this is not supported
    with pep-681 Dataclass Transforms. A warning is now emitted when these parameters
    are used within `Annotated` in this way (and they continue to be ignored).
  id: totrans-2786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，仍然不支持使用[`mapped_column.kw_only`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.kw_only
    "sqlalchemy.orm.mapped_column")等数据类参数，这些参数在通过`Annotated`接收的[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")中指定，因为这在 pep-681 数据类转换中不受支持。当以这种方式在`Annotated`中使用这些参数时，将发出警告（并且它们继续被忽略）。
- en: 'References: [#10046](https://www.sqlalchemy.org/trac/ticket/10046), [#10369](https://www.sqlalchemy.org/trac/ticket/10369)'
  id: totrans-2787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10046](https://www.sqlalchemy.org/trac/ticket/10046), [#10369](https://www.sqlalchemy.org/trac/ticket/10369)
- en: '**[orm] [bug]**'
  id: totrans-2788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where calling [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") with a new-style [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") query in the ORM, where one or more columns
    yields values that are of “unknown hashability”, typically when using JSON functions
    like `func.json_build_object()` without providing a type, would fail internally
    when the returned values were not actually hashable. The behavior is repaired
    to test the objects as they are received for hashability in this case, raising
    an informative error message if not. Note that for values of “known unhashability”,
    such as when the [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    or [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    types are used directly, an informative error message was already raised.
  id: totrans-2789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 ORM 中的新式 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 查询调用 [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") 方法时的问题，在此查询中，一个或多个列产生的值是“未知可哈希性”，通常是在使用 `func.json_build_object()`
    等 JSON 函数时没有提供类型时会导致内部失败。在这种情况下，修复了将对象作为接收到的对象测试其可哈希性的行为，并在不可哈希时引发一个信息性错误消息。请注意，对于“已知不可哈希性”的值，例如直接使用
    [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    或 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    类型时，已经会引发一个信息性错误消息。
- en: The “hashabiltiy testing” fix here is applied to legacy [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") as well, however in the legacy case, [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") is used for nearly all queries, so no new warning
    is emitted here; the legacy behavior of falling back to using `id()` in this case
    is maintained, with the improvement that an unknown type that turns out to be
    hashable will now be uniqufied, whereas previously it would not.
  id: totrans-2790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的“可哈希性测试”修复也适用于传统的 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")，然而在传统情况下，几乎所有的查询都使用 [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")，因此这里不会发出新的警告；在这种情况下，保持了使用 `id()` 的传统行为，改进是一个未知类型如果被证明是可哈希的，那么现在将被独特化，而以前是不会的。
- en: 'References: [#10459](https://www.sqlalchemy.org/trac/ticket/10459)'
  id: totrans-2791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10459](https://www.sqlalchemy.org/trac/ticket/10459)
- en: '**[orm] [bug]**'
  id: totrans-2792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in recently revised “insertmanyvalues” feature (likely issue
    [#9618](https://www.sqlalchemy.org/trac/ticket/9618)) where the ORM would inadvertently
    attempt to interpret a non-RETURNING result as one with RETURNING, in the case
    where the `implicit_returning=False` parameter were applied to the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), indicating that “insertmanyvalues” cannot be used
    if the primary key values are not provided.
  id: totrans-2793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了最近修订的“insertmanyvalues”功能中的回归（可能是问题 [#9618](https://www.sqlalchemy.org/trac/ticket/9618)），在这种情况下，ORM会不经意地将一个非
    RETURNING 结果误解为具有 RETURNING 结果，这是因为将 `implicit_returning=False` 参数应用于映射的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 时指示“insertmanyvalues”不能在不提供主键值的情况下使用。
- en: 'References: [#10453](https://www.sqlalchemy.org/trac/ticket/10453)'
  id: totrans-2794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10453](https://www.sqlalchemy.org/trac/ticket/10453)
- en: '**[orm] [bug]**'
  id: totrans-2795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where ORM [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") would not apply itself to a [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") where the ON clause were given as a plain
    SQL comparison, rather than as a relationship target or similar.
  id: totrans-2796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") 不会应用于 [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") 的 bug，其中 ON 子句被给定为一个普通的 SQL 比较，而不是作为一个关系目标或类似的东西。
- en: 'References: [#10365](https://www.sqlalchemy.org/trac/ticket/10365)'
  id: totrans-2797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10365](https://www.sqlalchemy.org/trac/ticket/10365)
- en: '**[orm] [bug]**'
  id: totrans-2798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    symbols like [`WriteOnlyMapped`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped") and [`DynamicMapped`](../orm/large_collections.html#sqlalchemy.orm.DynamicMapped
    "sqlalchemy.orm.DynamicMapped") could not be correctly resolved when referenced
    as an element of a sub-module in the given annotation, assuming string-based or
    “future annotations” style annotations.
  id: totrans-2799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当作为给定注释的子模块的元素引用时，无法正确解析 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 符号（如 [`WriteOnlyMapped`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped") 和 [`DynamicMapped`](../orm/large_collections.html#sqlalchemy.orm.DynamicMapped
    "sqlalchemy.orm.DynamicMapped")）的问题，假设注释是基于字符串或“未来注释”样式的。
- en: 'References: [#10412](https://www.sqlalchemy.org/trac/ticket/10412)'
  id: totrans-2800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10412](https://www.sqlalchemy.org/trac/ticket/10412)
- en: '**[orm] [bug]**'
  id: totrans-2801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue with `__allow_unmapped__` declarative option where types that were
    declared using collection types such as `list[SomeClass]` vs. the typing construct
    `List[SomeClass]` would fail to be recognized correctly. Pull request courtesy
    Pascal Corpet.
  id: totrans-2802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 `__allow_unmapped__` 声明选项时的问题，其中使用集合类型（例如 `list[SomeClass]`）声明的类型与使用 typing
    构造 `List[SomeClass]` 的类型无法正确识别。由 Pascal Corpet 提供的拉取请求。
- en: 'References: [#10385](https://www.sqlalchemy.org/trac/ticket/10385)'
  id: totrans-2803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10385](https://www.sqlalchemy.org/trac/ticket/10385)
- en: engine
  id: totrans-2804
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue within some dialects where the dialect could incorrectly return
    an empty result set for an INSERT statement that does not actually return rows
    at all, due to artfacts from pre- or post-fetching the primary key of the row
    or rows still being present. Affected dialects included asyncpg, all mssql dialects.
  id: totrans-2806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些方言中可能出现的问题，即方言可能会对根本不返回行的 INSERT 语句错误地返回空结果集，这是由于仍然存在来自行的主键的预获取或后获取的影响所致。受影响的方言包括
    asyncpg 和所有的 mssql 方言。
- en: '**[engine] [bug]**'
  id: totrans-2807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue where under some garbage collection / exception scenarios the connection
    pool’s cleanup routine would raise an error due to an unexpected set of state,
    which can be reproduced under specific conditions.
  id: totrans-2808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在某些垃圾回收/异常场景下，连接池的清理例程会由于意外的状态集而引发错误的问题，在特定条件下可以重现该问题。
- en: 'References: [#10414](https://www.sqlalchemy.org/trac/ticket/10414)'
  id: totrans-2809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10414](https://www.sqlalchemy.org/trac/ticket/10414)
- en: sql
  id: totrans-2810
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-2811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where referring to a FROM entry in the SET clause of an UPDATE statement
    would not include it in the FROM clause of the UPDATE statement, if that entry
    were nowhere else in the statement; this occurs currently for CTEs that were added
    using `Update.add_cte()` to provide the desired CTE at the top of the statement.
  id: totrans-2812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即在 UPDATE 语句的 SET 子句中引用 FROM 条目时，如果该条目在语句中没有其他地方，则不会将其包括在 UPDATE 语句的
    FROM 子句中；目前，对于使用 `Update.add_cte()` 添加的 CTE（通用表达式），以提供所需的 CTE 的情况，会出现这种情况。
- en: 'References: [#10408](https://www.sqlalchemy.org/trac/ticket/10408)'
  id: totrans-2813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10408](https://www.sqlalchemy.org/trac/ticket/10408)
- en: '**[sql] [bug]**'
  id: totrans-2814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed 2.0 regression where the [`DDL`](../core/ddl.html#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") construct would no longer `__repr__()` due to the removed
    `on` attribute not being accommodated. Pull request courtesy Iuri de Silvio.
  id: totrans-2815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 2.0 版本的回归问题，即由于移除了未被考虑到的 `on` 属性而导致 [`DDL`](../core/ddl.html#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") 结构不再执行 `__repr__()`。由 Iuri de Silvio 提供的拉取请求。
- en: 'References: [#10443](https://www.sqlalchemy.org/trac/ticket/10443)'
  id: totrans-2816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10443](https://www.sqlalchemy.org/trac/ticket/10443)
- en: typing
  id: totrans-2817
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-2818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue where the argument list passed to [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") was too-restrictively tied to `List` rather
    than `Sequence`. Pull request courtesy Iuri de Silvio.
  id: totrans-2819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了传递给 [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    的参数列表过于严格地与 `List` 而不是 `Sequence` 绑定的类型问题。由 Iuri de Silvio 提供的拉取请求。
- en: 'References: [#10451](https://www.sqlalchemy.org/trac/ticket/10451)'
  id: totrans-2820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10451](https://www.sqlalchemy.org/trac/ticket/10451)
- en: '**[typing] [bug]**'
  id: totrans-2821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Updates to the codebase to support Mypy 1.6.0.
  id: totrans-2822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了代码库以支持 Mypy 1.6.0。
- en: asyncio
  id: totrans-2823
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [bug]**'
  id: totrans-2824
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [bug]**'
- en: Fixed the [`AsyncSession.get.execution_options`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.get.params.execution_options
    "sqlalchemy.ext.asyncio.AsyncSession.get") parameter which was not being propagated
    to the underlying [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    and was instead being ignored.
  id: totrans-2825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了未将[`AsyncSession.get.execution_options`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.get.params.execution_options
    "sqlalchemy.ext.asyncio.AsyncSession.get")参数传播到底层[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")并且被忽略的问题。
- en: mariadb
  id: totrans-2826
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mariadb
- en: '**[mariadb] [bug]**'
  id: totrans-2827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [bug]**'
- en: Modified the mariadb-connector driver to pre-load the `cursor.rowcount` value
    for all queries, to suit tools such as Pandas that hardcode to calling `Result.rowcount`
    in this way. SQLAlchemy normally pre-loads `cursor.rowcount` only for UPDATE/DELETE
    statements and otherwise passes through to the DBAPI where it can return -1 if
    no value is available. However, mariadb-connector does not support invoking `cursor.rowcount`
    after the cursor itself is closed, raising an error instead. Generic test support
    has been added to ensure all backends support the allowing `Result.rowcount` to
    succceed (that is, returning an integer value with -1 for “not available”) after
    the result is closed.
  id: totrans-2828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了mariadb-connector驱动程序，预加载所有查询的`cursor.rowcount`值，以适应像Pandas这样硬编码调用`Result.rowcount`的工具。SQLAlchemy通常仅为UPDATE/DELETE语句预加载`cursor.rowcount`，否则会传递给DBAPI，在那里如果没有值可用，则可以返回-1。然而，mariadb-connector在关闭光标本身后不支持调用`cursor.rowcount`，而是引发错误。已添加通用测试支持，以确保所有后端支持在结果关闭后允许`Result.rowcount`成功（即返回一个整数值，-1表示“不可用”）。
- en: 'References: [#10396](https://www.sqlalchemy.org/trac/ticket/10396)'
  id: totrans-2829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10396](https://www.sqlalchemy.org/trac/ticket/10396)
- en: '**[mariadb] [bug]**'
  id: totrans-2830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [bug]**'
- en: Additional fixes for the mariadb-connector dialect to support UUID data values
    in the result in INSERT..RETURNING statements.
  id: totrans-2831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为mariadb-connector方言添加了额外的修复，以支持INSERT..RETURNING语句中结果中的UUID数据值。
- en: mssql
  id: totrans-2832
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2833
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where the rule that prevents ORDER BY from emitting within subqueries
    on SQL Server was not being disabled in the case where the `select.fetch()` method
    were used to limit rows in conjunction with WITH TIES or PERCENT, preventing valid
    subqueries with TOP / ORDER BY from being used.
  id: totrans-2834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，在这个bug中，阻止ORDER BY在SQL Server的子查询中发出的规则在使用`select.fetch()`方法限制行数与WITH
    TIES或PERCENT结合使用时未被禁用，从而阻止了可以使用带有TOP / ORDER BY的有效子查询。
- en: 'References: [#10458](https://www.sqlalchemy.org/trac/ticket/10458)'
  id: totrans-2835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10458](https://www.sqlalchemy.org/trac/ticket/10458)
- en: orm
  id: totrans-2836
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-2837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added method [`Session.get_one()`](../orm/session_api.html#sqlalchemy.orm.Session.get_one
    "sqlalchemy.orm.Session.get_one") that behaves like [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") but raises an exception instead of returning `None`
    if no instance was found with the provided primary key. Pull request courtesy
    of Carlos Sousa.
  id: totrans-2838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了类似于[`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")但在未找到具有提供的主键的实例时引发异常而不是返回`None`的方法[`Session.get_one()`](../orm/session_api.html#sqlalchemy.orm.Session.get_one
    "sqlalchemy.orm.Session.get_one")。感谢Carlos Sousa的拉取请求。
- en: 'References: [#10202](https://www.sqlalchemy.org/trac/ticket/10202)'
  id: totrans-2839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10202](https://www.sqlalchemy.org/trac/ticket/10202)
- en: '**[orm] [usecase]**'
  id: totrans-2840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added an option to permanently close sessions. Set to `False` the new parameter
    [`Session.close_resets_only`](../orm/session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") will prevent a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") from performing any other operation after [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") has been called.
  id: totrans-2841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个选项来永久关闭会话。将新参数[`Session.close_resets_only`](../orm/session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")设置为`False`将阻止[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")在调用[`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")后执行任何其他操作。
- en: Added new method [`Session.reset()`](../orm/session_api.html#sqlalchemy.orm.Session.reset
    "sqlalchemy.orm.Session.reset") that will reset a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to its initial state. This is an alias of [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close"), unless [`Session.close_resets_only`](../orm/session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") is set to `False`.
  id: totrans-2842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法[`Session.reset()`](../orm/session_api.html#sqlalchemy.orm.Session.reset
    "sqlalchemy.orm.Session.reset")，将[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")重置为初始状态。这是[`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")的别名，除非设置[`Session.close_resets_only`](../orm/session_api.html#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")为`False`。
- en: 'References: [#7787](https://www.sqlalchemy.org/trac/ticket/7787)'
  id: totrans-2843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7787](https://www.sqlalchemy.org/trac/ticket/7787)
- en: '**[orm] [bug]**'
  id: totrans-2844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a wide range of [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") parameters that were not being transferred when
    using the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") object inside of a pep-593 `Annotated` object,
    including [`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column"), [`mapped_column.deferred`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column"), [`mapped_column.autoincrement`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.autoincrement
    "sqlalchemy.orm.mapped_column"), [`mapped_column.system`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.system
    "sqlalchemy.orm.mapped_column"), [`mapped_column.info`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.info
    "sqlalchemy.orm.mapped_column") etc.
  id: totrans-2845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一系列[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")参数，在使用`Annotated`对象内部的[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")对象时未被传递，包括[`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column")，[`mapped_column.deferred`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column")，[`mapped_column.autoincrement`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.autoincrement
    "sqlalchemy.orm.mapped_column")，[`mapped_column.system`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.system
    "sqlalchemy.orm.mapped_column")，[`mapped_column.info`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.info
    "sqlalchemy.orm.mapped_column") 等。
- en: Additionally, it remains not supported to have dataclass arguments, such as
    [`mapped_column.kw_only`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.kw_only
    "sqlalchemy.orm.mapped_column"), [`mapped_column.default_factory`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.default_factory
    "sqlalchemy.orm.mapped_column") etc. indicated within the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") received by `Annotated`, as this is not supported
    with pep-681 Dataclass Transforms. A warning is now emitted when these parameters
    are used within `Annotated` in this way (and they continue to be ignored).
  id: totrans-2846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，在`Annotated`中接收到
- en: 'References: [#10046](https://www.sqlalchemy.org/trac/ticket/10046), [#10369](https://www.sqlalchemy.org/trac/ticket/10369)'
  id: totrans-2847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10046](https://www.sqlalchemy.org/trac/ticket/10046)，[#10369](https://www.sqlalchemy.org/trac/ticket/10369)
- en: '**[orm] [bug]**'
  id: totrans-2848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where calling [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") with a new-style [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") query in the ORM, where one or more columns
    yields values that are of “unknown hashability”, typically when using JSON functions
    like `func.json_build_object()` without providing a type, would fail internally
    when the returned values were not actually hashable. The behavior is repaired
    to test the objects as they are received for hashability in this case, raising
    an informative error message if not. Note that for values of “known unhashability”,
    such as when the [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    or [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    types are used directly, an informative error message was already raised.
  id: totrans-2849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 ORM 中使用新风格的 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 查询调用 [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") 时的问题，在此情况下，如果一个或多个列产生的值是“未知的可哈希性”，通常是在使用像 `func.json_build_object()`
    这样的 JSON 函数时没有提供类型时，会在返回的值实际上不可哈希时内部失败。此行为已修复，此时会对接收到的对象进行哈希性测试，如果不可哈希，则会引发一个信息性错误消息。请注意，对于“已知的不可哈希性”值，例如直接使用
    [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    或 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    类型时，已经会引发信息性错误消息。
- en: The “hashabiltiy testing” fix here is applied to legacy [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") as well, however in the legacy case, [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") is used for nearly all queries, so no new warning
    is emitted here; the legacy behavior of falling back to using `id()` in this case
    is maintained, with the improvement that an unknown type that turns out to be
    hashable will now be uniqufied, whereas previously it would not.
  id: totrans-2850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此处的“哈希性测试”修复也适用于传统的 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")，但在传统情况下，几乎所有查询都使用 [`Result.unique()`](../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")，因此此处不会发出新的警告；在这种情况下，保留了使用 `id()` 的传统行为，改进是现在将被证明是可哈希的未知类型现在会被唯一化，而以前则不会。
- en: 'References: [#10459](https://www.sqlalchemy.org/trac/ticket/10459)'
  id: totrans-2851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10459](https://www.sqlalchemy.org/trac/ticket/10459)
- en: '**[orm] [bug]**'
  id: totrans-2852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in recently revised “insertmanyvalues” feature (likely issue
    [#9618](https://www.sqlalchemy.org/trac/ticket/9618)) where the ORM would inadvertently
    attempt to interpret a non-RETURNING result as one with RETURNING, in the case
    where the `implicit_returning=False` parameter were applied to the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), indicating that “insertmanyvalues” cannot be used
    if the primary key values are not provided.
  id: totrans-2853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了最近修订的“insertmanyvalues”功能中的回归（可能是问题 [#9618](https://www.sqlalchemy.org/trac/ticket/9618)），在这种情况下，如果将
    `implicit_returning=False` 参数应用于映射的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，表示如果未提供主键值，则 ORM 会意外地尝试将非 RETURNING 结果解释为带有 RETURNING
    结果，表明“insertmanyvalues”不能在不提供主键值的情况下使用。
- en: 'References: [#10453](https://www.sqlalchemy.org/trac/ticket/10453)'
  id: totrans-2854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10453](https://www.sqlalchemy.org/trac/ticket/10453)
- en: '**[orm] [bug]**'
  id: totrans-2855
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where ORM [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") would not apply itself to a [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") where the ON clause were given as a plain
    SQL comparison, rather than as a relationship target or similar.
  id: totrans-2856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") 在 ON 子句被给定为普通 SQL 比较而不是作为关系目标或类似的情况下不应用于
    [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") 的 bug。
- en: 'References: [#10365](https://www.sqlalchemy.org/trac/ticket/10365)'
  id: totrans-2857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10365](https://www.sqlalchemy.org/trac/ticket/10365)
- en: '**[orm] [bug]**'
  id: totrans-2858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    symbols like [`WriteOnlyMapped`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped") and [`DynamicMapped`](../orm/large_collections.html#sqlalchemy.orm.DynamicMapped
    "sqlalchemy.orm.DynamicMapped") could not be correctly resolved when referenced
    as an element of a sub-module in the given annotation, assuming string-based or
    “future annotations” style annotations.
  id: totrans-2859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    符号，例如 [`WriteOnlyMapped`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped") 和 [`DynamicMapped`](../orm/large_collections.html#sqlalchemy.orm.DynamicMapped
    "sqlalchemy.orm.DynamicMapped") 在引用为给定注释的子模块的元素时无法正确解析的问题，假定使用基于字符串或“未来注释”样式注释。
- en: 'References: [#10412](https://www.sqlalchemy.org/trac/ticket/10412)'
  id: totrans-2860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10412](https://www.sqlalchemy.org/trac/ticket/10412)
- en: '**[orm] [bug]**'
  id: totrans-2861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed issue with `__allow_unmapped__` declarative option where types that were
    declared using collection types such as `list[SomeClass]` vs. the typing construct
    `List[SomeClass]` would fail to be recognized correctly. Pull request courtesy
    Pascal Corpet.
  id: totrans-2862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 `__allow_unmapped__` 声明选项中的问题，其中使用集合类型（如 `list[SomeClass]`）声明的类型与使用 typing
    构造 `List[SomeClass]` 相比将无法被正确识别。 感谢 Pascal Corpet 提供的拉取请求。
- en: 'References: [#10385](https://www.sqlalchemy.org/trac/ticket/10385)'
  id: totrans-2863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10385](https://www.sqlalchemy.org/trac/ticket/10385)
- en: engine
  id: totrans-2864
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-2865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed issue within some dialects where the dialect could incorrectly return
    an empty result set for an INSERT statement that does not actually return rows
    at all, due to artfacts from pre- or post-fetching the primary key of the row
    or rows still being present. Affected dialects included asyncpg, all mssql dialects.
  id: totrans-2866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了某些方言中的问题，其中方言可能会对根本不返回行的 INSERT 语句错误地返回空结果集，原因是仍然存在来自预先或后期获取行的主键的痕迹。受影响的方言包括
    asyncpg，所有 mssql 方言。
- en: '**[engine] [bug]**'
  id: totrans-2867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed issue where under some garbage collection / exception scenarios the connection
    pool’s cleanup routine would raise an error due to an unexpected set of state,
    which can be reproduced under specific conditions.
  id: totrans-2868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在某些垃圾收集 / 异常情况下，连接池的清理例程会由于意外的状态集而引发错误的问题，该问题可以在特定条件下重现。
- en: 'References: [#10414](https://www.sqlalchemy.org/trac/ticket/10414)'
  id: totrans-2869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10414](https://www.sqlalchemy.org/trac/ticket/10414)
- en: sql
  id: totrans-2870
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [bug]**'
  id: totrans-2871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: Fixed issue where referring to a FROM entry in the SET clause of an UPDATE statement
    would not include it in the FROM clause of the UPDATE statement, if that entry
    were nowhere else in the statement; this occurs currently for CTEs that were added
    using `Update.add_cte()` to provide the desired CTE at the top of the statement.
  id: totrans-2872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 UPDATE 语句的 SET 子句中引用 FROM 条目不会将其包括在 UPDATE 语句的 FROM 子句中的问题，如果该条目在语句中没有其他地方出现；这目前适用于通过
    `Update.add_cte()` 添加的 CTE，以在语句顶部提供所需的 CTE。
- en: 'References: [#10408](https://www.sqlalchemy.org/trac/ticket/10408)'
  id: totrans-2873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10408](https://www.sqlalchemy.org/trac/ticket/10408)
- en: '**[sql] [bug]**'
  id: totrans-2874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: Fixed 2.0 regression where the [`DDL`](../core/ddl.html#sqlalchemy.schema.DDL
    "sqlalchemy.schema.DDL") construct would no longer `__repr__()` due to the removed
    `on` attribute not being accommodated. Pull request courtesy Iuri de Silvio.
  id: totrans-2875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 2.0 版中的回归，其中 [`DDL`](../core/ddl.html#sqlalchemy.schema.DDL "sqlalchemy.schema.DDL")
    构造由于已移除的 `on` 属性未被容纳而不再 `__repr__()`。 感谢 Iuri de Silvio 提供的拉取请求。
- en: 'References: [#10443](https://www.sqlalchemy.org/trac/ticket/10443)'
  id: totrans-2876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10443](https://www.sqlalchemy.org/trac/ticket/10443)
- en: typing
  id: totrans-2877
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型
- en: '**[typing] [bug]**'
  id: totrans-2878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [错误]**'
- en: Fixed typing issue where the argument list passed to [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") was too-restrictively tied to `List` rather
    than `Sequence`. Pull request courtesy Iuri de Silvio.
  id: totrans-2879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了类型问题，其中传递给 [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") 的参数列表过于严格地绑定到 `List` 而不是 `Sequence`。 感谢 Iuri
    de Silvio 提供的拉取请求。
- en: 'References: [#10451](https://www.sqlalchemy.org/trac/ticket/10451)'
  id: totrans-2880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10451](https://www.sqlalchemy.org/trac/ticket/10451)
- en: '**[typing] [bug]**'
  id: totrans-2881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [错误]**'
- en: Updates to the codebase to support Mypy 1.6.0.
  id: totrans-2882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了代码库以支持 Mypy 1.6.0。
- en: asyncio
  id: totrans-2883
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 异步IO
- en: '**[asyncio] [bug]**'
  id: totrans-2884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[异步IO] [错误]**'
- en: Fixed the [`AsyncSession.get.execution_options`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.get.params.execution_options
    "sqlalchemy.ext.asyncio.AsyncSession.get") parameter which was not being propagated
    to the underlying [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    and was instead being ignored.
  id: totrans-2885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了未将 [`AsyncSession.get.execution_options`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.get.params.execution_options
    "sqlalchemy.ext.asyncio.AsyncSession.get") 参数传播到底层 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 并且被忽略的问题。
- en: mariadb
  id: totrans-2886
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mariadb
- en: '**[mariadb] [bug]**'
  id: totrans-2887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [bug]**'
- en: Modified the mariadb-connector driver to pre-load the `cursor.rowcount` value
    for all queries, to suit tools such as Pandas that hardcode to calling `Result.rowcount`
    in this way. SQLAlchemy normally pre-loads `cursor.rowcount` only for UPDATE/DELETE
    statements and otherwise passes through to the DBAPI where it can return -1 if
    no value is available. However, mariadb-connector does not support invoking `cursor.rowcount`
    after the cursor itself is closed, raising an error instead. Generic test support
    has been added to ensure all backends support the allowing `Result.rowcount` to
    succceed (that is, returning an integer value with -1 for “not available”) after
    the result is closed.
  id: totrans-2888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 mariadb-connector 驱动程序，以预加载所有查询的 `cursor.rowcount` 值，以适应像 Pandas 这样硬编码调用
    `Result.rowcount` 的工具。SQLAlchemy 通常仅为 UPDATE/DELETE 语句预加载 `cursor.rowcount`，否则传递给
    DBAPI，在那里如果没有值可用则可以返回 -1。但是，mariadb-connector 不支持在关闭游标本身后调用 `cursor.rowcount`，而是引发错误。已添加通用测试支持，以确保所有后端支持在结果关闭后允许
    `Result.rowcount` 成功（即返回一个整数值，-1 表示“不可用”）。
- en: 'References: [#10396](https://www.sqlalchemy.org/trac/ticket/10396)'
  id: totrans-2889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10396](https://www.sqlalchemy.org/trac/ticket/10396)
- en: '**[mariadb] [bug]**'
  id: totrans-2890
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [bug]**'
- en: Additional fixes for the mariadb-connector dialect to support UUID data values
    in the result in INSERT..RETURNING statements.
  id: totrans-2891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 mariadb-connector 方言添加了额外的修复，以支持 INSERT..RETURNING 语句中结果中的 UUID 数据值。
- en: mssql
  id: totrans-2892
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-2893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed bug where the rule that prevents ORDER BY from emitting within subqueries
    on SQL Server was not being disabled in the case where the `select.fetch()` method
    were used to limit rows in conjunction with WITH TIES or PERCENT, preventing valid
    subqueries with TOP / ORDER BY from being used.
  id: totrans-2894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即在 SQL Server 上阻止 ORDER BY 在子查询中发出的规则未在使用 `select.fetch()` 方法限制行数与 WITH
    TIES 或 PERCENT 结合时被禁用，导致无法使用带有 TOP / ORDER BY 的有效子查询。
- en: 'References: [#10458](https://www.sqlalchemy.org/trac/ticket/10458)'
  id: totrans-2895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10458](https://www.sqlalchemy.org/trac/ticket/10458)
- en: 2.0.21
  id: totrans-2896
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.21
- en: 'Released: September 18, 2023'
  id: totrans-2897
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年9月18日
- en: orm
  id: totrans-2898
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Adjusted the ORM’s interpretation of the “target” entity used within [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") to not interfere with the target “from” object
    passed to the statement, such as when passing an ORM-mapped [`aliased`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct that should be maintained within a phrase
    like “UPDATE FROM”. Cases like ORM session synchonize using “SELECT” statements
    such as with MySQL/ MariaDB will still have issues with UPDATE/DELETE of this
    form so it’s best to disable synchonize_session when using DML statements of this
    type.
  id: totrans-2900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 ORM 对“target”实体的解释，用于 [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") 和 [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") 中，以不干扰传递给语句的目标“from”对象，例如在传递 ORM 映射的 [`aliased`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 构造时应在“UPDATE FROM”等短语中保留。像使用“SELECT”语句进行 ORM 会话同步的情况，如与
    MySQL/MariaDB 一起使用此类形式的 UPDATE/DELETE 仍然会有问题，因此最好在使用此类 DML 语句时禁用 synchonize_session。
- en: 'References: [#10279](https://www.sqlalchemy.org/trac/ticket/10279)'
  id: totrans-2901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10279](https://www.sqlalchemy.org/trac/ticket/10279)
- en: '**[orm] [bug]**'
  id: totrans-2902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added new capability to the [`selectin_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.selectin_polymorphic
    "sqlalchemy.orm.selectin_polymorphic") loader option which allows other loader
    options to be bundled as siblings, referring to one of its subclasses, within
    the sub-options of parent loader option. Previously, this pattern was only supported
    if the [`selectin_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.selectin_polymorphic
    "sqlalchemy.orm.selectin_polymorphic") were at the top level of the options for
    the query. See new documentation section for example.
  id: totrans-2903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`selectin_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.selectin_polymorphic
    "sqlalchemy.orm.selectin_polymorphic") 加载器选项添加了新的功能，允许其他加载器选项作为兄弟节点捆绑在其中，引用其子类之一，在父加载器选项的子选项中。以前，只有在查询的选项的顶层才支持此模式。参见新的文档部分示例。
- en: As part of this change, improved the behavior of the [`Load.selectin_polymorphic()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.selectin_polymorphic
    "sqlalchemy.orm.Load.selectin_polymorphic") method / loader strategy so that the
    subclass load does not load most already-loaded columns from the parent table,
    when the option is used against a class that is already being relationship-loaded.
    Previously, the logic to load only the subclass columns worked only for a top
    level class load.
  id: totrans-2904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为此更改的一部分，改进了[`Load.selectin_polymorphic()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.selectin_polymorphic
    "sqlalchemy.orm.Load.selectin_polymorphic")方法/加载策略的行为，因此在对已经关系加载的类使用该选项时，子类加载不会加载父表中已加载的大多数列。先前，仅对顶级类加载的逻辑才能仅加载子类列。
- en: See also
  id: totrans-2905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Applying loader options when selectin_polymorphic is itself a sub-option](../orm/queryguide/inheritance.html#polymorphic-selectin-as-loader-option-target-plus-opts)'
  id: totrans-2906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在 selectin_polymorphic 本身作为子选项时应用加载器选项](../orm/queryguide/inheritance.html#polymorphic-selectin-as-loader-option-target-plus-opts)'
- en: 'References: [#10348](https://www.sqlalchemy.org/trac/ticket/10348)'
  id: totrans-2907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10348](https://www.sqlalchemy.org/trac/ticket/10348)
- en: engine
  id: totrans-2908
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-2909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed a series of reflection issues affecting the PostgreSQL, MySQL/MariaDB,
    and SQLite dialects when reflecting foreign key constraints where the target column
    contained parenthesis in one or both of the table name or column name.
  id: totrans-2910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一系列反射问题，影响到 PostgreSQL、MySQL/MariaDB 和 SQLite 方言，在反映外键约束时，目标列的表名或列名中包含括号的情况下。
- en: 'References: [#10275](https://www.sqlalchemy.org/trac/ticket/10275)'
  id: totrans-2911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10275](https://www.sqlalchemy.org/trac/ticket/10275)
- en: sql
  id: totrans-2912
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-2913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Adjusted the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    datatype to accept an argument of `None` for the [`Enum.length`](../core/type_basics.html#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum") parameter, resulting in a VARCHAR or other textual type
    with no length in the resulting DDL. This allows for new elements of any length
    to be added to the type after it exists in the schema. Pull request courtesy Eugene
    Toder.
  id: totrans-2914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")数据类型，接受`Enum.length`参数的值为`None`，在生成的
    DDL 中，结果为 VARCHAR 或其他文本类型而没有长度。这允许在模式中存在类型后向类型添加任意长度的新元素。感谢 Eugene Toder 的拉取请求。
- en: 'References: [#10269](https://www.sqlalchemy.org/trac/ticket/10269)'
  id: totrans-2915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10269](https://www.sqlalchemy.org/trac/ticket/10269)
- en: '**[sql] [usecase]**'
  id: totrans-2916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Added new generic SQL function [`aggregate_strings`](../core/functions.html#sqlalchemy.sql.functions.aggregate_strings
    "sqlalchemy.sql.functions.aggregate_strings"), which accepts a SQL expression
    and a decimeter, concatenating strings on multiple rows into a single aggregate
    value. The function is compiled on a per-backend basis, into functions such as
    `group_concat(),` `string_agg()`, or `LISTAGG()`. Pull request courtesy Joshua
    Morris.
  id: totrans-2917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的通用 SQL 函数[`aggregate_strings`](../core/functions.html#sqlalchemy.sql.functions.aggregate_strings
    "sqlalchemy.sql.functions.aggregate_strings")，接受一个 SQL 表达式和一个分隔符，将多行字符串连接为单个聚合值。该函数根据每个后端编译为诸如`group_concat()`、`string_agg()`或`LISTAGG()`等函数。感谢
    Joshua Morris 的拉取请求。
- en: 'References: [#9873](https://www.sqlalchemy.org/trac/ticket/9873)'
  id: totrans-2918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9873](https://www.sqlalchemy.org/trac/ticket/9873)
- en: '**[sql] [bug]**'
  id: totrans-2919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Adjusted the operator precedence for the string concatenation operator to be
    equal to that of string matching operators, such as [`ColumnElement.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.like
    "sqlalchemy.sql.expression.ColumnElement.like"), [`ColumnElement.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.regexp_match
    "sqlalchemy.sql.expression.ColumnElement.regexp_match"), [`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match"), etc., as well as plain `==`
    which has the same precedence as string comparison operators, so that parenthesis
    will be applied to a string concatenation expression that follows a string match
    operator. This provides for backends such as PostgreSQL where the “regexp match”
    operator is apparently of higher precedence than the string concatenation operator.
  id: totrans-2920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了字符串连接运算符的操作符优先级，使其等于字符串匹配运算符的优先级，例如 [`ColumnElement.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.like
    "sqlalchemy.sql.expression.ColumnElement.like")、[`ColumnElement.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.regexp_match
    "sqlalchemy.sql.expression.ColumnElement.regexp_match")、[`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match") 等，以及与字符串比较运算符相同优先级的纯 `==`，这样括号将应用于跟在字符串匹配运算符后面的字符串连接表达式。这为后端，例如
    PostgreSQL 提供了可能比字符串连接运算符优先级更高的 “regexp match” 运算符的情况。
- en: 'References: [#9610](https://www.sqlalchemy.org/trac/ticket/9610)'
  id: totrans-2921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9610](https://www.sqlalchemy.org/trac/ticket/9610)
- en: '**[sql] [bug]**'
  id: totrans-2922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Qualified the use of `hashlib.md5()` within the DDL compiler, which is used
    to generate deterministic four-character suffixes for long index and constraint
    names in DDL statements, to include the Python 3.9+ `usedforsecurity=False` parameter
    so that Python interpreters built for restricted environments such as FIPS do
    not consider this call to be related to security concerns.
  id: totrans-2923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 DDL 编译器中对 `hashlib.md5()` 的使用进行了限定，该函数用于在 DDL 语句中为长索引和约束名称生成确定性的四字符后缀，以包括
    Python 3.9+ 中的 `usedforsecurity=False` 参数，以便 Python 解释器构建为诸如 FIPS 之类的受限环境时不认为此调用与安全问题有关。
- en: 'References: [#10342](https://www.sqlalchemy.org/trac/ticket/10342)'
  id: totrans-2924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10342](https://www.sqlalchemy.org/trac/ticket/10342)
- en: '**[sql] [bug]**'
  id: totrans-2925
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct will now automatically create a proxy (i.e. a copy) of a [`column`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") if the column were already associated with
    an existing FROM clause. This allows that an expression like `values_obj.c.colname`
    will produce the correct FROM clause even in the case that `colname` was passed
    as a [`column`](../core/sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    that was already used with a previous [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") or other table construct. Originally this
    was considered to be a candidate for an error condition, however it’s likely this
    pattern is already in widespread use so it’s now added to support.
  id: totrans-2926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    构造现在将自动创建 [`column`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") 的代理（即复制），如果该列已经与现有的 FROM 子句相关联。这允许像 `values_obj.c.colname`
    这样的表达式即使在 `colname` 被传递为已经与以前的 [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") 或其他表构造一起使用的 [`column`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") 的情况下，也能产生正确的 FROM 子句。最初认为这可能是一个错误条件的候选项，但是很可能这种模式已经被广泛使用，所以现在添加了支持。'
- en: 'References: [#10280](https://www.sqlalchemy.org/trac/ticket/10280)'
  id: totrans-2927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10280](https://www.sqlalchemy.org/trac/ticket/10280)
- en: schema
  id: totrans-2928
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [bug]**'
  id: totrans-2929
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Modified the rendering of the Oracle only [`Identity.order`](../core/defaults.html#sqlalchemy.schema.Identity.params.order
    "sqlalchemy.schema.Identity") parameter that’s part of both [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") and [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") to only take place for the Oracle backend, and not
    other backends such as that of PostgreSQL. A future release will rename the [`Identity.order`](../core/defaults.html#sqlalchemy.schema.Identity.params.order
    "sqlalchemy.schema.Identity"), [`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence") and [`Identity.on_null`](../core/defaults.html#sqlalchemy.schema.Identity.params.on_null
    "sqlalchemy.schema.Identity") parameters to Oracle-specific names, deprecating
    the old names, these parameters only apply to Oracle.
  id: totrans-2930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了仅适用于 Oracle 的[`Identity.order`](../core/defaults.html#sqlalchemy.schema.Identity.params.order
    "sqlalchemy.schema.Identity")参数的渲染，该参数是[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")和[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")的一部分，仅适用于 Oracle 后端，而不适用于其他后端，如 PostgreSQL。未来的版本将重命名[`Identity.order`](../core/defaults.html#sqlalchemy.schema.Identity.params.order
    "sqlalchemy.schema.Identity")、[`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence")和[`Identity.on_null`](../core/defaults.html#sqlalchemy.schema.Identity.params.on_null
    "sqlalchemy.schema.Identity")参数为 Oracle 特定名称，弃用旧名称，这些参数仅适用于 Oracle。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-2931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.50
- en: 'References: [#10207](https://www.sqlalchemy.org/trac/ticket/10207)'
  id: totrans-2932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10207](https://www.sqlalchemy.org/trac/ticket/10207)
- en: typing
  id: totrans-2933
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [usecase]**'
  id: totrans-2934
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [usecase]**'
- en: Made the contained type for [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") covariant; this is to allow greater flexibility for end-user
    typing scenarios, such as the use of protocols to represent particular mapped
    class structures that are passed to other functions. As part of this change, the
    contained type was also made covariant for dependent and related types such as
    `SQLORMOperations`, [`WriteOnlyMapped`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped"), and [`SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression"). Pull request courtesy Roméo
    Després.
  id: totrans-2935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")的包含类型协变；这是为了允许更大的灵活性，以满足最终用户的类型化场景，例如使用协议来表示传递给其他函数的特定映射类结构。作为此更改的一部分，还使依赖和相关类型的包含类型协变，如`SQLORMOperations`、[`WriteOnlyMapped`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped")和[`SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression")。拉取请求由 Roméo Després 提供。
- en: 'References: [#10288](https://www.sqlalchemy.org/trac/ticket/10288)'
  id: totrans-2936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10288](https://www.sqlalchemy.org/trac/ticket/10288)
- en: '**[typing] [bug]**'
  id: totrans-2937
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed regression introduced in 2.0.20 via [#9600](https://www.sqlalchemy.org/trac/ticket/9600)
    fix which attempted to add more formal typing to [`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData"). This change prevented basic naming convention dictionaries
    from passing typing and has been adjusted so that a plain dictionary of strings
    for keys as well as dictionaries that use constraint types as keys or a mix of
    both, are again accepted.
  id: totrans-2938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 2.0.20 中引入的回归问题，通过 [#9600](https://www.sqlalchemy.org/trac/ticket/9600)
    修复尝试为[`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData")添加更正式的类型化。此更改阻止了基本命名约定字典通过类型化，并已调整为再次接受键为字符串的普通字典以及使用约束类型作为键或两者混合使用的字典。
- en: As part of this change, lesser used forms of the naming convention dictionary
    are also typed, including that it currently allows for `Constraint` type objects
    as keys as well.
  id: totrans-2939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为此更改的一部分，还对命名约定字典的较少使用形式进行了类型化，包括当前允许将`Constraint`类型对象用作键。
- en: 'References: [#10264](https://www.sqlalchemy.org/trac/ticket/10264), [#9284](https://www.sqlalchemy.org/trac/ticket/9284)'
  id: totrans-2940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10264](https://www.sqlalchemy.org/trac/ticket/10264), [#9284](https://www.sqlalchemy.org/trac/ticket/9284)
- en: '**[typing] [bug]**'
  id: totrans-2941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed the type annotation for `__class_getitem__()` as applied to the `Visitable`
    class at the base of expression constructs to accept `Any` for a key, rather than
    `str`, which helps with some IDEs such as PyCharm when attempting to write typing
    annotations for SQL constructs which include generic selectors. Pull request courtesy
    Jordan Macdonald.
  id: totrans-2942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了应用于表达式构造基类`Visitable`的`__class_getitem__()`的类型注释，使其接受`Any`作为键，而不是`str`，这有助于一些
    IDE（如 PyCharm）在尝试为包含泛型选择器的 SQL 构造编写类型注释时。感谢 Jordan Macdonald 的拉取请求。
- en: 'References: [#9878](https://www.sqlalchemy.org/trac/ticket/9878)'
  id: totrans-2943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#9878](https://www.sqlalchemy.org/trac/ticket/9878)
- en: '**[typing] [bug]**'
  id: totrans-2944
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[打字] [错误]**'
- en: Repaired the core “SQL element” class `SQLCoreOperations` to support the `__hash__()`
    method from a typing perspective, as objects like [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") and ORM [`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") are hashable and are used as dictionary
    keys in the public API for the [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") constructs. Previously, type checkers were
    not aware the root SQL element was hashable.
  id: totrans-2945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了核心“SQL 元素”类 `SQLCoreOperations` 以支持从类型角度来看的 `__hash__()` 方法，因为像 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 和 ORM [`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") 这样的对象是可散列的，并且在 [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") 和 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造的公共 API 中用作字典键。先前，类型检查器不知道根 SQL 元素是可散列的。
- en: 'References: [#10353](https://www.sqlalchemy.org/trac/ticket/10353)'
  id: totrans-2946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10353](https://www.sqlalchemy.org/trac/ticket/10353)
- en: '**[typing] [bug]**'
  id: totrans-2947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[打字] [错误]**'
- en: Fixed typing issue with `Existing.select_from()` that prevented its use with
    ORM classes.
  id: totrans-2948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 ORM 类时，`Existing.select_from()` 的类型注释问题。
- en: 'References: [#10337](https://www.sqlalchemy.org/trac/ticket/10337)'
  id: totrans-2949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10337](https://www.sqlalchemy.org/trac/ticket/10337)
- en: '**[typing] [bug]**'
  id: totrans-2950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[打字] [错误]**'
- en: Update type annotations for ORM loading options, restricting them to accept
    only “*” instead of any string for string arguments. Pull request courtesy Janek
    Nouvertné.
  id: totrans-2951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新 ORM 加载选项的类型注解，限制其只接受“*”而不是任何字符串作为字符串参数。感谢 Janek Nouvertné 的拉取请求。
- en: 'References: [#10131](https://www.sqlalchemy.org/trac/ticket/10131)'
  id: totrans-2952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10131](https://www.sqlalchemy.org/trac/ticket/10131)
- en: postgresql
  id: totrans-2953
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-2954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed regression which appeared in 2.0 due to [#8491](https://www.sqlalchemy.org/trac/ticket/8491)
    where the revised “ping” used for PostgreSQL dialects when the [`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") parameter is in use would interfere with the use of
    asyncpg with PGBouncer “transaction” mode, as the multiple PostgreSQL commands
    emitted by asnycpg could be broken out among multiple connections leading to errors,
    due to the lack of any transaction around this newly revised “ping”. The ping
    is now invoked within a transaction, in the same way that is implicit with all
    other backends that are based on the pep-249 DBAPI; this guarantees that the series
    of PG commands sent by asyncpg for this command are invoked on the same backend
    connection without it jumping to a different connection mid-command. The transaction
    is not used if the asyncpg dialect is used in “AUTOCOMMIT” mode, which remains
    incompatible with pgbouncer transaction mode.
  id: totrans-2955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于 [#8491](https://www.sqlalchemy.org/trac/ticket/8491) 在 2.0 中出现的回归问题，当使用
    [`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") 参数时，PostgreSQL 方言的修订“ping”会干扰 asyncpg 与 PGBouncer
    的“transaction”模式的使用，因为 asnycpg 发出的多个 PostgreSQL 命令可能被分成多个连接导致错误，因为这种新修订的“ping”周围没有任何事务。现在，在事务内调用
    ping，与所有其他基于 pep-249 DBAPI 的后端一样；这保证了由此命令发送的一系列 PG 命令在同一后端连接上被调用，而不是在命令执行中跳转到另一个连接。如果
    asyncpg 方言以“AUTOCOMMIT”模式使用，则不使用事务，这与 pgbouncer 事务模式不兼容。
- en: 'References: [#10226](https://www.sqlalchemy.org/trac/ticket/10226)'
  id: totrans-2956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10226](https://www.sqlalchemy.org/trac/ticket/10226)
- en: misc
  id: totrans-2957
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [setup]**'
  id: totrans-2958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [设置]**'
- en: Fixed very old issue where the full extent of SQLAlchemy modules, including
    `sqlalchemy.testing.fixtures`, could not be imported outside of a pytest run.
    This suits inspection utilities such as `pkgutil` that attempt to import all installed
    modules in all packages.
  id: totrans-2959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个很久以前的问题，即无法在 pytest 运行之外导入 SQLAlchemy 模块的全部范围，包括 `sqlalchemy.testing.fixtures`。这适用于诸如
    `pkgutil` 等尝试在所有包中导入所有已安装模块的检查实用程序。
- en: 'References: [#10321](https://www.sqlalchemy.org/trac/ticket/10321)'
  id: totrans-2960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10321](https://www.sqlalchemy.org/trac/ticket/10321)
- en: orm
  id: totrans-2961
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-2962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Adjusted the ORM’s interpretation of the “target” entity used within [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") to not interfere with the target “from” object
    passed to the statement, such as when passing an ORM-mapped [`aliased`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct that should be maintained within a phrase
    like “UPDATE FROM”. Cases like ORM session synchonize using “SELECT” statements
    such as with MySQL/ MariaDB will still have issues with UPDATE/DELETE of this
    form so it’s best to disable synchonize_session when using DML statements of this
    type.
  id: totrans-2963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 ORM 对于 [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    和 [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    中使用的“target”实体的解释，以避免干扰语句中传递的目标“from”对象，比如传递 ORM 映射的 [`aliased`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 结构，在像“UPDATE FROM”这样的短语中应保持不变。像 ORM 会话同步使用“SELECT”语句的情况，比如
    MySQL/MariaDB，仍然会出现这种形式的 UPDATE/DELETE 的问题，因此最好在使用此类 DML 语句时禁用 synchonize_session。
- en: 'References: [#10279](https://www.sqlalchemy.org/trac/ticket/10279)'
  id: totrans-2964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10279](https://www.sqlalchemy.org/trac/ticket/10279)
- en: '**[orm] [bug]**'
  id: totrans-2965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Added new capability to the [`selectin_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.selectin_polymorphic
    "sqlalchemy.orm.selectin_polymorphic") loader option which allows other loader
    options to be bundled as siblings, referring to one of its subclasses, within
    the sub-options of parent loader option. Previously, this pattern was only supported
    if the [`selectin_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.selectin_polymorphic
    "sqlalchemy.orm.selectin_polymorphic") were at the top level of the options for
    the query. See new documentation section for example.
  id: totrans-2966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`selectin_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.selectin_polymorphic
    "sqlalchemy.orm.selectin_polymorphic") 加载器选项添加了新的功能，允许将其他加载器选项作为同级项捆绑在其中，引用其中一个子类，在父加载器选项的子选项中。以前，只有在查询的选项的顶级中才支持这种模式。请参阅新的文档部分以获取示例。
- en: As part of this change, improved the behavior of the [`Load.selectin_polymorphic()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.selectin_polymorphic
    "sqlalchemy.orm.Load.selectin_polymorphic") method / loader strategy so that the
    subclass load does not load most already-loaded columns from the parent table,
    when the option is used against a class that is already being relationship-loaded.
    Previously, the logic to load only the subclass columns worked only for a top
    level class load.
  id: totrans-2967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变化的一部分，改进了 [`Load.selectin_polymorphic()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.selectin_polymorphic
    "sqlalchemy.orm.Load.selectin_polymorphic") 方法/加载器策略的行为，以便在已经对父表进行关系加载时，子类加载不会加载大部分已加载列。以前，仅加载子类列的逻辑仅适用于顶层类加载。
- en: See also
  id: totrans-2968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Applying loader options when selectin_polymorphic is itself a sub-option](../orm/queryguide/inheritance.html#polymorphic-selectin-as-loader-option-target-plus-opts)'
  id: totrans-2969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在 selectin_polymorphic 本身是子选项时应用加载器选项](../orm/queryguide/inheritance.html#polymorphic-selectin-as-loader-option-target-plus-opts)'
- en: 'References: [#10348](https://www.sqlalchemy.org/trac/ticket/10348)'
  id: totrans-2970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10348](https://www.sqlalchemy.org/trac/ticket/10348)
- en: engine
  id: totrans-2971
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-2972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [错误]**'
- en: Fixed a series of reflection issues affecting the PostgreSQL, MySQL/MariaDB,
    and SQLite dialects when reflecting foreign key constraints where the target column
    contained parenthesis in one or both of the table name or column name.
  id: totrans-2973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一系列反射问题，影响到 PostgreSQL、MySQL/MariaDB 和 SQLite 方言，在反射外键约束时，目标列中包含括号的情况下，其中一个或两个表名或列名中都包含括号。
- en: 'References: [#10275](https://www.sqlalchemy.org/trac/ticket/10275)'
  id: totrans-2974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10275](https://www.sqlalchemy.org/trac/ticket/10275)
- en: sql
  id: totrans-2975
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-2976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Adjusted the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    datatype to accept an argument of `None` for the [`Enum.length`](../core/type_basics.html#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum") parameter, resulting in a VARCHAR or other textual type
    with no length in the resulting DDL. This allows for new elements of any length
    to be added to the type after it exists in the schema. Pull request courtesy Eugene
    Toder.
  id: totrans-2977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")数据类型，使其接受`None`参数作为[`Enum.length`](../core/type_basics.html#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum")参数，从而在生成的DDL中得到一个没有长度限制的VARCHAR或其他文本类型。这允许在模式中存在该类型后添加任意长度的新元素。感谢Eugene
    Toder的拉取请求。
- en: 'References: [#10269](https://www.sqlalchemy.org/trac/ticket/10269)'
  id: totrans-2978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10269](https://www.sqlalchemy.org/trac/ticket/10269)
- en: '**[sql] [usecase]**'
  id: totrans-2979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Added new generic SQL function [`aggregate_strings`](../core/functions.html#sqlalchemy.sql.functions.aggregate_strings
    "sqlalchemy.sql.functions.aggregate_strings"), which accepts a SQL expression
    and a decimeter, concatenating strings on multiple rows into a single aggregate
    value. The function is compiled on a per-backend basis, into functions such as
    `group_concat(),` `string_agg()`, or `LISTAGG()`. Pull request courtesy Joshua
    Morris.
  id: totrans-2980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的通用SQL函数[`aggregate_strings`](../core/functions.html#sqlalchemy.sql.functions.aggregate_strings
    "sqlalchemy.sql.functions.aggregate_strings")，接受一个SQL表达式和一个分隔符，将多行字符串连接成单个聚合值。该函数根据每个后端编译成函数，如`group_concat()`、`string_agg()`或`LISTAGG()`。感谢Joshua
    Morris的拉取请求。
- en: 'References: [#9873](https://www.sqlalchemy.org/trac/ticket/9873)'
  id: totrans-2981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9873](https://www.sqlalchemy.org/trac/ticket/9873)
- en: '**[sql] [bug]**'
  id: totrans-2982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Adjusted the operator precedence for the string concatenation operator to be
    equal to that of string matching operators, such as [`ColumnElement.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.like
    "sqlalchemy.sql.expression.ColumnElement.like"), [`ColumnElement.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.regexp_match
    "sqlalchemy.sql.expression.ColumnElement.regexp_match"), [`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match"), etc., as well as plain `==`
    which has the same precedence as string comparison operators, so that parenthesis
    will be applied to a string concatenation expression that follows a string match
    operator. This provides for backends such as PostgreSQL where the “regexp match”
    operator is apparently of higher precedence than the string concatenation operator.
  id: totrans-2983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了字符串连接运算符的运算优先级，使其与字符串匹配运算符（如[`ColumnElement.like()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.like
    "sqlalchemy.sql.expression.ColumnElement.like")、[`ColumnElement.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.regexp_match
    "sqlalchemy.sql.expression.ColumnElement.regexp_match")、[`ColumnElement.match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.match
    "sqlalchemy.sql.expression.ColumnElement.match")等）以及普通的`==`运算符相等，这样括号将应用于跟在字符串匹配运算符后的字符串连接表达式。这为后端（如PostgreSQL）提供了支持，其中“regexp
    match”运算符显然比字符串连接运算符的优先级高。
- en: 'References: [#9610](https://www.sqlalchemy.org/trac/ticket/9610)'
  id: totrans-2984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9610](https://www.sqlalchemy.org/trac/ticket/9610)
- en: '**[sql] [bug]**'
  id: totrans-2985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Qualified the use of `hashlib.md5()` within the DDL compiler, which is used
    to generate deterministic four-character suffixes for long index and constraint
    names in DDL statements, to include the Python 3.9+ `usedforsecurity=False` parameter
    so that Python interpreters built for restricted environments such as FIPS do
    not consider this call to be related to security concerns.
  id: totrans-2986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 限定了DDL编译器中`hashlib.md5()`的使用，用于为DDL语句中的长索引和约束名称生成确定性的四字符后缀，以包括Python 3.9+的`usedforsecurity=False`参数，以便Python解释器构建用于受限环境（如FIPS）时不将此调用视为与安全问题相关。
- en: 'References: [#10342](https://www.sqlalchemy.org/trac/ticket/10342)'
  id: totrans-2987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10342](https://www.sqlalchemy.org/trac/ticket/10342)
- en: '**[sql] [bug]**'
  id: totrans-2988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    construct will now automatically create a proxy (i.e. a copy) of a [`column`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") if the column were already associated with
    an existing FROM clause. This allows that an expression like `values_obj.c.colname`
    will produce the correct FROM clause even in the case that `colname` was passed
    as a [`column`](../core/sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    that was already used with a previous [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") or other table construct. Originally this
    was considered to be a candidate for an error condition, however it’s likely this
    pattern is already in widespread use so it’s now added to support.
  id: totrans-2989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values "sqlalchemy.sql.expression.Values")
    构造现在将自动创建一个代理（即复制），如果列已经与现有的 FROM 子句相关联。这样一来，即使`colname`已经作为一个[`column`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")被传递给了先前的[`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values")或其他表构造，表达式`values_obj.c.colname`也会产生正确的 FROM
    子句。最初认为这可能会导致错误，但很可能这种模式已经被广泛使用，所以现在添加以支持。'
- en: 'References: [#10280](https://www.sqlalchemy.org/trac/ticket/10280)'
  id: totrans-2990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10280](https://www.sqlalchemy.org/trac/ticket/10280)
- en: schema
  id: totrans-2991
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-2992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Modified the rendering of the Oracle only [`Identity.order`](../core/defaults.html#sqlalchemy.schema.Identity.params.order
    "sqlalchemy.schema.Identity") parameter that’s part of both [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") and [`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity") to only take place for the Oracle backend, and not
    other backends such as that of PostgreSQL. A future release will rename the [`Identity.order`](../core/defaults.html#sqlalchemy.schema.Identity.params.order
    "sqlalchemy.schema.Identity"), [`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence") and [`Identity.on_null`](../core/defaults.html#sqlalchemy.schema.Identity.params.on_null
    "sqlalchemy.schema.Identity") parameters to Oracle-specific names, deprecating
    the old names, these parameters only apply to Oracle.
  id: totrans-2993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了仅适用于 Oracle 的[`Identity.order`](../core/defaults.html#sqlalchemy.schema.Identity.params.order
    "sqlalchemy.schema.Identity")参数的呈现方式，该参数既属于[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")又属于[`Identity`](../core/defaults.html#sqlalchemy.schema.Identity
    "sqlalchemy.schema.Identity")，现在只在 Oracle 后端生效，而不是像 PostgreSQL 那样适用于其他后端。将来的版本将会将[`Identity.order`](../core/defaults.html#sqlalchemy.schema.Identity.params.order
    "sqlalchemy.schema.Identity")、[`Sequence.order`](../core/defaults.html#sqlalchemy.schema.Sequence.params.order
    "sqlalchemy.schema.Sequence")和[`Identity.on_null`](../core/defaults.html#sqlalchemy.schema.Identity.params.on_null
    "sqlalchemy.schema.Identity")参数重命名为 Oracle 特定的名称，并弃用旧名称，这些参数仅适用于 Oracle。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-2994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯到**：1.4.50
- en: 'References: [#10207](https://www.sqlalchemy.org/trac/ticket/10207)'
  id: totrans-2995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10207](https://www.sqlalchemy.org/trac/ticket/10207)
- en: typing
  id: totrans-2996
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [usecase]**'
  id: totrans-2997
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [用例]**'
- en: Made the contained type for [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") covariant; this is to allow greater flexibility for end-user
    typing scenarios, such as the use of protocols to represent particular mapped
    class structures that are passed to other functions. As part of this change, the
    contained type was also made covariant for dependent and related types such as
    `SQLORMOperations`, [`WriteOnlyMapped`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped"), and [`SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression"). Pull request courtesy Roméo
    Després.
  id: totrans-2998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")中包含的类型进行了协变处理；这样做是为了在端用户的类型场景中提供更大的灵活性，比如使用协议来表示特定映射类结构，这些结构会传递给其他函数。作为这一变更的一部分，对于依赖和相关类型，如`SQLORMOperations`、[`WriteOnlyMapped`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped")和[`SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression")，也对其中包含的类型进行了协变处理。感谢 Roméo Després
    提交的拉取请求。
- en: 'References: [#10288](https://www.sqlalchemy.org/trac/ticket/10288)'
  id: totrans-2999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10288](https://www.sqlalchemy.org/trac/ticket/10288)
- en: '**[typing] [bug]**'
  id: totrans-3000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [错误]**'
- en: Fixed regression introduced in 2.0.20 via [#9600](https://www.sqlalchemy.org/trac/ticket/9600)
    fix which attempted to add more formal typing to [`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData"). This change prevented basic naming convention dictionaries
    from passing typing and has been adjusted so that a plain dictionary of strings
    for keys as well as dictionaries that use constraint types as keys or a mix of
    both, are again accepted.
  id: totrans-3001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 2.0.20 中引入的回归问题，通过 [#9600](https://www.sqlalchemy.org/trac/ticket/9600)
    修复，该修复尝试为 [`MetaData.naming_convention`](../core/metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") 添加更正式的类型注解。这一变更阻止了基本的命名约定字典通过类型检查，并已调整为再次接受纯字符串键的普通字典以及使用约束类型作为键或两者混合使用的字典。
- en: As part of this change, lesser used forms of the naming convention dictionary
    are also typed, including that it currently allows for `Constraint` type objects
    as keys as well.
  id: totrans-3002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变更的一部分，还对命名约定字典的较少使用形式进行了类型化，其中目前允许 `Constraint` 类型对象作为键。
- en: 'References: [#10264](https://www.sqlalchemy.org/trac/ticket/10264), [#9284](https://www.sqlalchemy.org/trac/ticket/9284)'
  id: totrans-3003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10264](https://www.sqlalchemy.org/trac/ticket/10264), [#9284](https://www.sqlalchemy.org/trac/ticket/9284)
- en: '**[typing] [bug]**'
  id: totrans-3004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed the type annotation for `__class_getitem__()` as applied to the `Visitable`
    class at the base of expression constructs to accept `Any` for a key, rather than
    `str`, which helps with some IDEs such as PyCharm when attempting to write typing
    annotations for SQL constructs which include generic selectors. Pull request courtesy
    Jordan Macdonald.
  id: totrans-3005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了应用于表达式构造基础的 `Visitable` 类的 `__class_getitem__()` 的类型注解，以接受 `Any` 作为键，而不是
    `str`，这有助于一些 IDE，如 PyCharm，在尝试为包含通用选择器的 SQL 构造编写类型注解时。感谢 Jordan Macdonald 的拉取请求。
- en: 'References: [#9878](https://www.sqlalchemy.org/trac/ticket/9878)'
  id: totrans-3006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9878](https://www.sqlalchemy.org/trac/ticket/9878)
- en: '**[typing] [bug]**'
  id: totrans-3007
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Repaired the core “SQL element” class `SQLCoreOperations` to support the `__hash__()`
    method from a typing perspective, as objects like [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") and ORM [`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") are hashable and are used as dictionary
    keys in the public API for the [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") constructs. Previously, type checkers were
    not aware the root SQL element was hashable.
  id: totrans-3008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了核心“SQL 元素”类 `SQLCoreOperations`，以支持从类型的角度看待 `__hash__()` 方法，因为像 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 和 ORM [`InstrumentedAttribute`](../orm/internals.html#sqlalchemy.orm.InstrumentedAttribute
    "sqlalchemy.orm.InstrumentedAttribute") 这样的对象是可哈希的，并且在公共 API 中用作字典键，用于 [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") 和 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 构造。以前，类型检查器不知道根 SQL 元素是可哈希的。
- en: 'References: [#10353](https://www.sqlalchemy.org/trac/ticket/10353)'
  id: totrans-3009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10353](https://www.sqlalchemy.org/trac/ticket/10353)
- en: '**[typing] [bug]**'
  id: totrans-3010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue with `Existing.select_from()` that prevented its use with
    ORM classes.
  id: totrans-3011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 `Existing.select_from()` 的类型问题，这阻止了它与 ORM 类的使用。
- en: 'References: [#10337](https://www.sqlalchemy.org/trac/ticket/10337)'
  id: totrans-3012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10337](https://www.sqlalchemy.org/trac/ticket/10337)
- en: '**[typing] [bug]**'
  id: totrans-3013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Update type annotations for ORM loading options, restricting them to accept
    only “*” instead of any string for string arguments. Pull request courtesy Janek
    Nouvertné.
  id: totrans-3014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了 ORM 加载选项的类型注解，将其限制为仅接受“*”而不是任何字符串作为字符串参数。感谢 Janek Nouvertné 的拉取请求。
- en: 'References: [#10131](https://www.sqlalchemy.org/trac/ticket/10131)'
  id: totrans-3015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10131](https://www.sqlalchemy.org/trac/ticket/10131)
- en: postgresql
  id: totrans-3016
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-3017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression which appeared in 2.0 due to [#8491](https://www.sqlalchemy.org/trac/ticket/8491)
    where the revised “ping” used for PostgreSQL dialects when the [`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") parameter is in use would interfere with the use of
    asyncpg with PGBouncer “transaction” mode, as the multiple PostgreSQL commands
    emitted by asnycpg could be broken out among multiple connections leading to errors,
    due to the lack of any transaction around this newly revised “ping”. The ping
    is now invoked within a transaction, in the same way that is implicit with all
    other backends that are based on the pep-249 DBAPI; this guarantees that the series
    of PG commands sent by asyncpg for this command are invoked on the same backend
    connection without it jumping to a different connection mid-command. The transaction
    is not used if the asyncpg dialect is used in “AUTOCOMMIT” mode, which remains
    incompatible with pgbouncer transaction mode.
  id: totrans-3018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了2.0版本中出现的回归问题，这是由于[#8491](https://www.sqlalchemy.org/trac/ticket/8491)导致的，其中当使用[`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine")参数时，用于PostgreSQL方言的修订“ping”会干扰asyncpg与PGBouncer“事务”模式的使用，因为asnycpg发出的多个PostgreSQL命令可能会被分配到多个连接中，导致错误，由于对此新修订的“ping”周围没有任何事务。现在，在事务中调用ping，就像所有其他基于pep-249
    DBAPI的后端隐式使用的一样；这保证了由于此命令发送的PG命令系列会在同一后端连接上调用，而不是在命令中间跳到不同的连接。如果使用asyncpg方言处于“AUTOCOMMIT”模式下，则不使用事务，这仍然与pgbouncer事务模式不兼容。
- en: 'References: [#10226](https://www.sqlalchemy.org/trac/ticket/10226)'
  id: totrans-3019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10226](https://www.sqlalchemy.org/trac/ticket/10226)
- en: misc
  id: totrans-3020
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [setup]**'
  id: totrans-3021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [设置]**'
- en: Fixed very old issue where the full extent of SQLAlchemy modules, including
    `sqlalchemy.testing.fixtures`, could not be imported outside of a pytest run.
    This suits inspection utilities such as `pkgutil` that attempt to import all installed
    modules in all packages.
  id: totrans-3022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了很旧的问题，即无法在pytest运行外导入SQLAlchemy模块的全部内容，包括`sqlalchemy.testing.fixtures`。这适用于诸如`pkgutil`等试图导入所有包中所有已安装模块的检查工具。
- en: 'References: [#10321](https://www.sqlalchemy.org/trac/ticket/10321)'
  id: totrans-3023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10321](https://www.sqlalchemy.org/trac/ticket/10321)
- en: 2.0.20
  id: totrans-3024
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.20
- en: 'Released: August 15, 2023'
  id: totrans-3025
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年8月15日
- en: orm
  id: totrans-3026
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-3027
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Implemented the “RETURNING ‘*’” use case for ORM enabled DML statements. This
    will render in as many cases as possible and return the unfiltered result set,
    however is not supported for multi-parameter “ORM bulk INSERT” statements that
    have specific column rendering requirements.
  id: totrans-3028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了ORM启用的DML语句的“RETURNING '*”用例。这将在尽可能多的情况下呈现，并返回未过滤的结果集，但不支持具有特定列呈现要求的多参数“ORM批量INSERT”语句。
- en: 'References: [#10192](https://www.sqlalchemy.org/trac/ticket/10192)'
  id: totrans-3029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10192](https://www.sqlalchemy.org/trac/ticket/10192)
- en: '**[orm] [bug]**'
  id: totrans-3030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed fundamental issue which prevented some forms of ORM “annotations” from
    taking place for subqueries which made use of [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") against a relationship target. These
    annotations are used whenever a subquery is used in special situations such as
    within [`PropComparator.and_()`](../orm/internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") and other ORM-specific scenarios.
  id: totrans-3031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止某些形式的ORM“注释”对使用[`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join")对关系目标进行连接的子查询进行的问题。在特殊情况下使用这些注释，例如在[`PropComparator.and_()`](../orm/internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_")和其他ORM特定场景中使用子查询时。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-3032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.50
- en: 'References: [#10223](https://www.sqlalchemy.org/trac/ticket/10223)'
  id: totrans-3033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10223](https://www.sqlalchemy.org/trac/ticket/10223)
- en: '**[orm] [bug]**'
  id: totrans-3034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue where the ORM’s generation of a SELECT from a joined inheritance
    model with same-named columns in superclass and subclass would somehow not send
    the correct list of column names to the [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") construct, when the RECURSIVE column list were
    generated.
  id: totrans-3035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM从具有同名列的超类和子类的连接继承模型中生成SELECT时出现问题的问题，当生成RECURSIVE列列表时，不会发送正确的列名列表到[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")构造。。
- en: 'References: [#10169](https://www.sqlalchemy.org/trac/ticket/10169)'
  id: totrans-3036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10169](https://www.sqlalchemy.org/trac/ticket/10169)
- en: '**[orm] [bug]**'
  id: totrans-3037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed fairly major issue where execution options passed to [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"), as well as execution options local to the ORM
    executed statement itself, would not be propagated along to eager loaders such
    as that of [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload"), [`immediateload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload
    "sqlalchemy.orm.immediateload"), and [`sqlalchemy.orm.subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload"), making it impossible to do things such as disabling
    the cache for a single statement or using `schema_translate_map` for a single
    statement, as well as the use of user-custom execution options. A change has been
    made where **all** user-facing execution options present for [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") will be propagated along to additional loaders.
  id: totrans-3038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个相当严重的问题，即传递给[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")的执行选项以及本身 ORM 执行的语句的执行选项将不会传递给 eager loaders，例如
    [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")、[`immediateload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload
    "sqlalchemy.orm.immediateload") 和 [`sqlalchemy.orm.subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload")，从而使得禁用单个语句的缓存或者为单个语句使用 `schema_translate_map` 等操作变得不可能，以及使用用户自定义执行选项。已经做出了更改，即现在所有对于
    [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    的用户界面执行选项都将传递到附加的 loaders 中。
- en: 'As part of this change, the warning for “excessively deep” eager loaders leading
    to caching being disabled can be silenced on a per-statement basis by sending
    `execution_options={"compiled_cache": None}` to [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"), which will disable caching for the full series
    of statements within that scope.'
  id: totrans-3039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '作为这一更改的一部分，对于导致禁用缓存的“过度深层” eager loaders 的警告现在可以通过向 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 发送 `execution_options={"compiled_cache": None}`
    来在每个语句的基础上消除，这将禁用该范围内所有语句的缓存。'
- en: 'References: [#10231](https://www.sqlalchemy.org/trac/ticket/10231)'
  id: totrans-3040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#10231](https://www.sqlalchemy.org/trac/ticket/10231)
- en: '**[orm] [bug]**'
  id: totrans-3041
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**【orm】【错误】**'
- en: Fixed issue where internal cloning used by the ORM for expressions like `Comparator.any()`
    to produce correlated EXISTS constructs would interfere with the “cartesian product
    warning” feature of the SQL compiler, leading the SQL compiler to warn when all
    elements of the statement were correctly joined.
  id: totrans-3042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 内部克隆的问题，该克隆用于像 `Comparator.any()` 这样的表达式，以生成相关 EXISTS 构造，会干扰 SQL 编译器的“笛卡尔积警告”特性，导致
    SQL 编译器在语句的所有元素都正确连接时发出警告。
- en: 'References: [#10124](https://www.sqlalchemy.org/trac/ticket/10124)'
  id: totrans-3043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#10124](https://www.sqlalchemy.org/trac/ticket/10124)
- en: '**[orm] [bug]**'
  id: totrans-3044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**【orm】【错误】**'
- en: Fixed issue where the `lazy="immediateload"` loader strategy would place an
    internal loading token into the ORM mapped attribute under circumstances where
    the load should not occur, such as in a recursive self-referential load. As part
    of this change, the `lazy="immediateload"` strategy now honors the [`relationship.join_depth`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.join_depth
    "sqlalchemy.orm.relationship") parameter for self-referential eager loads in the
    same way as that of other eager loaders, where leaving it unset or set at zero
    will lead to a self-referential immediateload not occurring, setting it to a value
    of one or greater will immediateload up until that given depth.
  id: totrans-3045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`lazy="immediateload"`加载策略在某些情况下会将内部加载令牌放入 ORM 映射属性中的问题，例如在递归自引用加载时不应发生加载。作为这一更改的一部分，`lazy="immediateload"`策略现在与其他
    eager loaders 一样尊重 [`relationship.join_depth`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.join_depth
    "sqlalchemy.orm.relationship") 参数，对于自引用 eager 加载，如果将其设置为未设置或设置为零，将不会发生自引用 immediateload，如果将其设置为大于零的值，将会立即加载直到给定的深度。
- en: 'References: [#10139](https://www.sqlalchemy.org/trac/ticket/10139)'
  id: totrans-3046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#10139](https://www.sqlalchemy.org/trac/ticket/10139)
- en: '**[orm] [bug]**'
  id: totrans-3047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**【orm】【错误】**'
- en: Fixed issue where dictionary-based collections such as [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict") did not fully pickle/unpickle correctly,
    leading to issues when attempting to mutate such a collection after unpickling.
  id: totrans-3048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即基于字典的集合（如[`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")）未正确地完全序列化/反序列化，导致在反序列化后尝试突变此类集合时出现问题。
- en: 'References: [#10175](https://www.sqlalchemy.org/trac/ticket/10175)'
  id: totrans-3049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#10175](https://www.sqlalchemy.org/trac/ticket/10175)
- en: '**[orm] [bug]**'
  id: totrans-3050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where chaining [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") or other wildcard use of [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") from another eager loader using a [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") against a joined inheritance subclass would fail to
    take effect for columns local to the superclass.
  id: totrans-3051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即从另一个急切加载器使用[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")对于连接的继承子类链的超类的本地列失败时，链接[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only")或其他通配符使用[`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer")。
- en: 'References: [#10125](https://www.sqlalchemy.org/trac/ticket/10125)'
  id: totrans-3052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#10125](https://www.sqlalchemy.org/trac/ticket/10125)
- en: '**[orm] [bug]**'
  id: totrans-3053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where an ORM-enabled [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct would not render any CTEs added
    only via the [`Select.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.Select.add_cte
    "sqlalchemy.sql.expression.Select.add_cte") method that were not otherwise referenced
    in the statement.
  id: totrans-3054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，其中启用ORM的[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")结构不会呈现仅通过[`Select.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.Select.add_cte
    "sqlalchemy.sql.expression.Select.add_cte")方法添加的任何CTEs，而这些CTEs在语句中没有被引用。
- en: 'References: [#10167](https://www.sqlalchemy.org/trac/ticket/10167)'
  id: totrans-3055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#10167](https://www.sqlalchemy.org/trac/ticket/10167)
- en: examples
  id: totrans-3056
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-3057
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: The dogpile_caching examples have been updated for 2.0 style queries. Within
    the “caching query” logic itself there is one conditional added to differentiate
    between `Query` and `select()` when performing an invalidation operation.
  id: totrans-3058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: dogpile_caching示例已更新为2.0样式的查询。在“缓存查询”逻辑内部，添加了一个条件来区分`Query`和`select()`在执行无效操作时。
- en: engine
  id: totrans-3059
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-3060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed critical issue where setting [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") to `AUTOCOMMIT` (as opposed to using the [`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method) would fail to restore “autocommit”
    to a pooled connection if an alternate isolation level were temporarily selected
    using [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options").
  id: totrans-3061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个严重问题，即将[`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")设置为`AUTOCOMMIT`（而不是使用[`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")方法），如果临时选择了替代隔离级别，则会导致无法将“autocommit”恢复到池化连接中，使用[`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")。
- en: 'References: [#10147](https://www.sqlalchemy.org/trac/ticket/10147)'
  id: totrans-3062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#10147](https://www.sqlalchemy.org/trac/ticket/10147)
- en: sql
  id: totrans-3063
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-3064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where unpickling of a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") or other [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") would fail to restore the correct “comparator”
    object, which is used to generate SQL expressions specific to the type object.
  id: totrans-3065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即对[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")或其他[`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")进行反序列化会失败恢复正确的“比较器”对象，该对象用于生成特定于类型对象的SQL表达式。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-3066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.4.50
- en: 'References: [#10213](https://www.sqlalchemy.org/trac/ticket/10213)'
  id: totrans-3067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#10213](https://www.sqlalchemy.org/trac/ticket/10213)
- en: typing
  id: totrans-3068
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型
- en: '**[typing] [usecase]**'
  id: totrans-3069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [usecase]**'
- en: Added new typing only utility functions [`Nullable()`](../core/sqlelement.html#sqlalchemy.Nullable
    "sqlalchemy.Nullable") and [`NotNullable()`](../core/sqlelement.html#sqlalchemy.NotNullable
    "sqlalchemy.NotNullable") to type a column or ORM class as, respectively, nullable
    or not nullable. These function are no-op at runtime, returning the input unchanged.
  id: totrans-3070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的仅用于类型的实用函数[`Nullable()`](../core/sqlelement.html#sqlalchemy.Nullable "sqlalchemy.Nullable")和[`NotNullable()`](../core/sqlelement.html#sqlalchemy.NotNullable
    "sqlalchemy.NotNullable")，用于分别将列或ORM类的类型定义为可空或不可空。这些函数在运行时不起作用，返回不变的输入。
- en: 'References: [#10173](https://www.sqlalchemy.org/trac/ticket/10173)'
  id: totrans-3071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10173](https://www.sqlalchemy.org/trac/ticket/10173)
- en: '**[typing] [bug]**'
  id: totrans-3072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: 'Typing improvements:'
  id: totrans-3073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型改进：
- en: '[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    is returned for some forms of [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") where DML without RETURNING is used'
  id: totrans-3074
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用无返回的 DML 时，对于某些形式的[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")，将返回[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")
- en: fixed type for [`Query.with_for_update.of`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update.params.of
    "sqlalchemy.orm.Query.with_for_update") parameter within [`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")
  id: totrans-3075
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修正了[`Query.with_for_update.of`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update.params.of
    "sqlalchemy.orm.Query.with_for_update")参数的类型，该参数在[`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")中被修复为正确的类型。
- en: improvements to `_DMLColumnArgument` type used by some DML methods to pass column
    expressions
  id: totrans-3076
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进了某些 DML 方法中使用的 `_DMLColumnArgument` 类型，用于传递列表达式
- en: Add overload to [`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal") so that it is inferred that the return type
    is `BindParameter[NullType]` where [`literal.type_`](../core/sqlelement.html#sqlalchemy.sql.expression.literal.params.type_
    "sqlalchemy.sql.expression.literal") param is None
  id: totrans-3077
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给 [`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal "sqlalchemy.sql.expression.literal")
    添加了重载，以便在未提供[`literal.type_`](../core/sqlelement.html#sqlalchemy.sql.expression.literal.params.type_
    "sqlalchemy.sql.expression.literal")参数时推断出返回类型为 `BindParameter[NullType]`
- en: Add overloads to [`ColumnElement.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.op
    "sqlalchemy.sql.expression.ColumnElement.op") so that the inferred type when [`ColumnElement.op.return_type`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.op.params.return_type
    "sqlalchemy.sql.expression.ColumnElement.op") is not provided is `Callable[[Any],
    BinaryExpression[Any]]`
  id: totrans-3078
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给 [`ColumnElement.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.op
    "sqlalchemy.sql.expression.ColumnElement.op") 添加了重载，以便在未提供[`ColumnElement.op.return_type`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.op.params.return_type
    "sqlalchemy.sql.expression.ColumnElement.op")时推断出的类型为 `Callable[[Any], BinaryExpression[Any]]`
- en: Add missing overload to `ColumnElement.__add__()`
  id: totrans-3079
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给 `ColumnElement.__add__()` 添加了缺失的重载
- en: Pull request courtesy Mehdi Gmira.
  id: totrans-3080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Pull request 由 Mehdi Gmira 提供。
- en: 'References: [#9185](https://www.sqlalchemy.org/trac/ticket/9185)'
  id: totrans-3081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9185](https://www.sqlalchemy.org/trac/ticket/9185)
- en: '**[typing] [bug]**'
  id: totrans-3082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed issue in [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    and [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") methods such as [`Session.connection()`](../orm/session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") where the [`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection") parameter were hardcoded to an internal type
    that is not user-facing.
  id: totrans-3083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")和[`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")方法中的问题，例如[`Session.connection()`](../orm/session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection")，其中[`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection")参数被硬编码为不面向用户的内部类型。
- en: 'References: [#10182](https://www.sqlalchemy.org/trac/ticket/10182)'
  id: totrans-3084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10182](https://www.sqlalchemy.org/trac/ticket/10182)
- en: asyncio
  id: totrans-3085
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [usecase]**'
  id: totrans-3086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [usecase]**'
- en: Added new methods [`AsyncConnection.aclose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.aclose
    "sqlalchemy.ext.asyncio.AsyncConnection.aclose") as a synonym for [`AsyncConnection.close()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.close
    "sqlalchemy.ext.asyncio.AsyncConnection.close") and [`AsyncSession.aclose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.aclose
    "sqlalchemy.ext.asyncio.AsyncSession.aclose") as a synonym for [`AsyncSession.close()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close") to the [`AsyncConnection`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") and [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects, to provide compatibility with
    Python standard library `@contextlib.aclosing` construct. Pull request courtesy
    Grigoriev Semyon.
  id: totrans-3087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新方法 [`AsyncConnection.aclose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.aclose
    "sqlalchemy.ext.asyncio.AsyncConnection.aclose") 作为 [`AsyncConnection.close()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.close
    "sqlalchemy.ext.asyncio.AsyncConnection.close") 的同义词，以及 [`AsyncSession.aclose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.aclose
    "sqlalchemy.ext.asyncio.AsyncSession.aclose") 作为 [`AsyncSession.close()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close") 的同义词，添加到 [`AsyncConnection`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") 和 [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") 对象中，以提供与 Python 标准库 `@contextlib.aclosing`
    构造的兼容性。拉取请求由 Grigoriev Semyon 提供。
- en: 'References: [#9698](https://www.sqlalchemy.org/trac/ticket/9698)'
  id: totrans-3088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9698](https://www.sqlalchemy.org/trac/ticket/9698)
- en: mysql
  id: totrans-3089
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-3090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [usecase]**'
- en: Updated aiomysql dialect since the dialect appears to be maintained again. Re-added
    to the ci testing using version 0.2.0.
  id: totrans-3091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 aiomysql 方言再次得到维护，已更新 aiomysql 方言。重新添加到 ci 测试中，使用版本 0.2.0。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-3092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也 **回溯** 到：1.4.50
- en: orm
  id: totrans-3093
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-3094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Implemented the “RETURNING ‘*’” use case for ORM enabled DML statements. This
    will render in as many cases as possible and return the unfiltered result set,
    however is not supported for multi-parameter “ORM bulk INSERT” statements that
    have specific column rendering requirements.
  id: totrans-3095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了 ORM 启用的 DML 语句的 “RETURNING ‘*’” 用例。这将尽可能地呈现，并返回未经过滤的结果集，但不支持具有特定列呈现要求的多参数
    “ORM 批量插入” 语句。
- en: 'References: [#10192](https://www.sqlalchemy.org/trac/ticket/10192)'
  id: totrans-3096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10192](https://www.sqlalchemy.org/trac/ticket/10192)
- en: '**[orm] [bug]**'
  id: totrans-3097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed fundamental issue which prevented some forms of ORM “annotations” from
    taking place for subqueries which made use of [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") against a relationship target. These
    annotations are used whenever a subquery is used in special situations such as
    within [`PropComparator.and_()`](../orm/internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") and other ORM-specific scenarios.
  id: totrans-3098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些形式的 ORM “注释” 无法对使用 [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") 进行的子查询进行注释的根本问题，这些子查询在特殊情况下使用，比如在 [`PropComparator.and_()`](../orm/internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") 和其他 ORM 特定场景中使用。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-3099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也 **回溯** 到：1.4.50
- en: 'References: [#10223](https://www.sqlalchemy.org/trac/ticket/10223)'
  id: totrans-3100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10223](https://www.sqlalchemy.org/trac/ticket/10223)
- en: '**[orm] [bug]**'
  id: totrans-3101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the ORM’s generation of a SELECT from a joined inheritance
    model with same-named columns in superclass and subclass would somehow not send
    the correct list of column names to the [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") construct, when the RECURSIVE column list were
    generated.
  id: totrans-3102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 从具有同名列的超类和子类的联合继承模型生成 SELECT 时，当生成递归列列表时，某种方式未正确发送列名列表到 [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") 构造的问题，当递归列列表被生成时。
- en: 'References: [#10169](https://www.sqlalchemy.org/trac/ticket/10169)'
  id: totrans-3103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10169](https://www.sqlalchemy.org/trac/ticket/10169)
- en: '**[orm] [bug]**'
  id: totrans-3104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed fairly major issue where execution options passed to [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"), as well as execution options local to the ORM
    executed statement itself, would not be propagated along to eager loaders such
    as that of [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload"), [`immediateload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload
    "sqlalchemy.orm.immediateload"), and [`sqlalchemy.orm.subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload"), making it impossible to do things such as disabling
    the cache for a single statement or using `schema_translate_map` for a single
    statement, as well as the use of user-custom execution options. A change has been
    made where **all** user-facing execution options present for [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") will be propagated along to additional loaders.
  id: totrans-3105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将执行选项传递给[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")以及ORM执行语句本身的执行选项不会传播到`selectinload()`、`immediateload()`和`sqlalchemy.orm.subqueryload()`等急切加载器的问题，使得无法禁用单个语句的缓存或对单个语句使用`schema_translate_map`，以及使用用户自定义执行选项。已经进行了更改，**所有**针对[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")的用户可见执行选项都将传播到其他加载器。
- en: 'As part of this change, the warning for “excessively deep” eager loaders leading
    to caching being disabled can be silenced on a per-statement basis by sending
    `execution_options={"compiled_cache": None}` to [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"), which will disable caching for the full series
    of statements within that scope.'
  id: totrans-3106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '作为这一变化的一部分，可以通过向[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")发送`execution_options={"compiled_cache": None}`来在每个语句的基础上消除“过度深入”急切加载器导致缓存被禁用的警告，这将禁用该范围内所有语句的缓存。'
- en: 'References: [#10231](https://www.sqlalchemy.org/trac/ticket/10231)'
  id: totrans-3107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10231](https://www.sqlalchemy.org/trac/ticket/10231)
- en: '**[orm] [bug]**'
  id: totrans-3108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where internal cloning used by the ORM for expressions like `Comparator.any()`
    to produce correlated EXISTS constructs would interfere with the “cartesian product
    warning” feature of the SQL compiler, leading the SQL compiler to warn when all
    elements of the statement were correctly joined.
  id: totrans-3109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了内部克隆在ORM中用于生成类似`Comparator.any()`的表达式以产生相关的EXISTS结构时会干扰SQL编译器的“笛卡尔积警告”功能的问题，导致SQL编译器在所有语句元素正确连接时发出警告。
- en: 'References: [#10124](https://www.sqlalchemy.org/trac/ticket/10124)'
  id: totrans-3110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10124](https://www.sqlalchemy.org/trac/ticket/10124)
- en: '**[orm] [bug]**'
  id: totrans-3111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the `lazy="immediateload"` loader strategy would place an
    internal loading token into the ORM mapped attribute under circumstances where
    the load should not occur, such as in a recursive self-referential load. As part
    of this change, the `lazy="immediateload"` strategy now honors the [`relationship.join_depth`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.join_depth
    "sqlalchemy.orm.relationship") parameter for self-referential eager loads in the
    same way as that of other eager loaders, where leaving it unset or set at zero
    will lead to a self-referential immediateload not occurring, setting it to a value
    of one or greater will immediateload up until that given depth.
  id: totrans-3112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`lazy="immediateload"`加载策略在某些情况下会将内部加载标记放入ORM映射属性中的问题，例如在递归自引用加载中不应发生加载的情况。作为这一变化的一部分，`lazy="immediateload"`策略现在以与其他急切加载器相同的方式尊重[`relationship.join_depth`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.join_depth
    "sqlalchemy.orm.relationship")参数用于自引用急切加载，其中将其未设置或设置为零将导致自引用的immediateload不会发生，将其设置为一个或更大的值将会immediateload直到给定深度。
- en: 'References: [#10139](https://www.sqlalchemy.org/trac/ticket/10139)'
  id: totrans-3113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10139](https://www.sqlalchemy.org/trac/ticket/10139)
- en: '**[orm] [bug]**'
  id: totrans-3114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where dictionary-based collections such as [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict") did not fully pickle/unpickle correctly,
    leading to issues when attempting to mutate such a collection after unpickling.
  id: totrans-3115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了诸如[`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")之类基于字典的集合在反序列化时未能完全正确地pickle/unpickle的问题，导致在反序列化后尝试修改此类集合时出现问题。
- en: 'References: [#10175](https://www.sqlalchemy.org/trac/ticket/10175)'
  id: totrans-3116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10175](https://www.sqlalchemy.org/trac/ticket/10175)
- en: '**[orm] [bug]**'
  id: totrans-3117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where chaining [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") or other wildcard use of [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") from another eager loader using a [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") against a joined inheritance subclass would fail to
    take effect for columns local to the superclass.
  id: totrans-3118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从另一个急切加载器使用[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")针对连接继承子类的情况下，链式调用[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only")或其他通配符使用[`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer")会导致对于超类本地列无法生效的问题。
- en: 'References: [#10125](https://www.sqlalchemy.org/trac/ticket/10125)'
  id: totrans-3119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10125](https://www.sqlalchemy.org/trac/ticket/10125)
- en: '**[orm] [bug]**'
  id: totrans-3120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where an ORM-enabled [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct would not render any CTEs added
    only via the [`Select.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.Select.add_cte
    "sqlalchemy.sql.expression.Select.add_cte") method that were not otherwise referenced
    in the statement.
  id: totrans-3121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM启用的[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造不会呈现仅通过[`Select.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.Select.add_cte
    "sqlalchemy.sql.expression.Select.add_cte")方法添加的任何CTE，而这些CTE在语句中没有被引用。
- en: 'References: [#10167](https://www.sqlalchemy.org/trac/ticket/10167)'
  id: totrans-3122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10167](https://www.sqlalchemy.org/trac/ticket/10167)
- en: examples
  id: totrans-3123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: examples
- en: '**[examples] [bug]**'
  id: totrans-3124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: The dogpile_caching examples have been updated for 2.0 style queries. Within
    the “caching query” logic itself there is one conditional added to differentiate
    between `Query` and `select()` when performing an invalidation operation.
  id: totrans-3125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: dogpile_caching示例已更新为2.0风格的查询。在“缓存查询”逻辑中，添���了一个条件来区分在执行无效操作时`Query`和`select()`之间的区别。
- en: engine
  id: totrans-3126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-3127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed critical issue where setting [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") to `AUTOCOMMIT` (as opposed to using the [`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") method) would fail to restore “autocommit”
    to a pooled connection if an alternate isolation level were temporarily selected
    using [`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options").
  id: totrans-3128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将[`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")设置为`AUTOCOMMIT`（而不是使用[`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")方法）会导致如果使用[`Connection.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options")临时选择了替代隔离级别，则无法将“autocommit”恢复到池化连接的关键问题。
- en: 'References: [#10147](https://www.sqlalchemy.org/trac/ticket/10147)'
  id: totrans-3129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10147](https://www.sqlalchemy.org/trac/ticket/10147)
- en: sql
  id: totrans-3130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-3131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where unpickling of a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") or other [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") would fail to restore the correct “comparator”
    object, which is used to generate SQL expressions specific to the type object.
  id: totrans-3132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反序列化[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")或其他[`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")时无法恢复正确的“比较器”对象的问题，该对象用于生成特定于类型对象的SQL表达式。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-3133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.50
- en: 'References: [#10213](https://www.sqlalchemy.org/trac/ticket/10213)'
  id: totrans-3134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10213](https://www.sqlalchemy.org/trac/ticket/10213)
- en: typing
  id: totrans-3135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [usecase]**'
  id: totrans-3136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [usecase]**'
- en: Added new typing only utility functions [`Nullable()`](../core/sqlelement.html#sqlalchemy.Nullable
    "sqlalchemy.Nullable") and [`NotNullable()`](../core/sqlelement.html#sqlalchemy.NotNullable
    "sqlalchemy.NotNullable") to type a column or ORM class as, respectively, nullable
    or not nullable. These function are no-op at runtime, returning the input unchanged.
  id: totrans-3137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的仅用于类型的实用函数[`Nullable()`](../core/sqlelement.html#sqlalchemy.Nullable "sqlalchemy.Nullable")和[`NotNullable()`](../core/sqlelement.html#sqlalchemy.NotNullable
    "sqlalchemy.NotNullable")，用于分别将列或ORM类类型化为可空或不可空。这些函数在运行时不起作用，返回不变的输入。
- en: 'References: [#10173](https://www.sqlalchemy.org/trac/ticket/10173)'
  id: totrans-3138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10173](https://www.sqlalchemy.org/trac/ticket/10173)
- en: '**[typing] [bug]**'
  id: totrans-3139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: 'Typing improvements:'
  id: totrans-3140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型改进：
- en: '[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult "sqlalchemy.engine.CursorResult")
    is returned for some forms of [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") where DML without RETURNING is used'
  id: totrans-3141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些形式的[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")中返回了[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")，其中使用了没有返回的DML
- en: fixed type for [`Query.with_for_update.of`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update.params.of
    "sqlalchemy.orm.Query.with_for_update") parameter within [`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")
  id: totrans-3142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修正了[`Query.with_for_update.of`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update.params.of
    "sqlalchemy.orm.Query.with_for_update")参数的类型，在[`Query.with_for_update()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")内部。
- en: improvements to `_DMLColumnArgument` type used by some DML methods to pass column
    expressions
  id: totrans-3143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对一些DML方法使用的`_DMLColumnArgument`类型进行了改进，以传递列表达式。
- en: Add overload to [`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal") so that it is inferred that the return type
    is `BindParameter[NullType]` where [`literal.type_`](../core/sqlelement.html#sqlalchemy.sql.expression.literal.params.type_
    "sqlalchemy.sql.expression.literal") param is None
  id: totrans-3144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了对[`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal")的重载，以便推断返回类型为`BindParameter[NullType]`，其中[`literal.type_`](../core/sqlelement.html#sqlalchemy.sql.expression.literal.params.type_
    "sqlalchemy.sql.expression.literal")参数为None
- en: Add overloads to [`ColumnElement.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.op
    "sqlalchemy.sql.expression.ColumnElement.op") so that the inferred type when [`ColumnElement.op.return_type`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.op.params.return_type
    "sqlalchemy.sql.expression.ColumnElement.op") is not provided is `Callable[[Any],
    BinaryExpression[Any]]`
  id: totrans-3145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了对[`ColumnElement.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.op
    "sqlalchemy.sql.expression.ColumnElement.op")的重载，以便在未提供[`ColumnElement.op.return_type`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.op.params.return_type
    "sqlalchemy.sql.expression.ColumnElement.op")时推断类型为`Callable[[Any], BinaryExpression[Any]]`。
- en: Add missing overload to `ColumnElement.__add__()`
  id: totrans-3146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了对`ColumnElement.__add__()`的缺失重载
- en: Pull request courtesy Mehdi Gmira.
  id: totrans-3147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 拉取请求由Mehdi Gmira提供。
- en: 'References: [#9185](https://www.sqlalchemy.org/trac/ticket/9185)'
  id: totrans-3148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9185](https://www.sqlalchemy.org/trac/ticket/9185)
- en: '**[typing] [bug]**'
  id: totrans-3149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed issue in [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    and [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") methods such as [`Session.connection()`](../orm/session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection") where the [`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection") parameter were hardcoded to an internal type
    that is not user-facing.
  id: totrans-3150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")和[`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")方法中的问题，例如[`Session.connection()`](../orm/session_api.html#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection")，其中[`Session.connection.execution_options`](../orm/session_api.html#sqlalchemy.orm.Session.connection.params.execution_options
    "sqlalchemy.orm.Session.connection")参数被硬编码为不是面向用户的内部类型。
- en: 'References: [#10182](https://www.sqlalchemy.org/trac/ticket/10182)'
  id: totrans-3151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10182](https://www.sqlalchemy.org/trac/ticket/10182)
- en: asyncio
  id: totrans-3152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [usecase]**'
  id: totrans-3153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [usecase]**'
- en: Added new methods [`AsyncConnection.aclose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.aclose
    "sqlalchemy.ext.asyncio.AsyncConnection.aclose") as a synonym for [`AsyncConnection.close()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.close
    "sqlalchemy.ext.asyncio.AsyncConnection.close") and [`AsyncSession.aclose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.aclose
    "sqlalchemy.ext.asyncio.AsyncSession.aclose") as a synonym for [`AsyncSession.close()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close") to the [`AsyncConnection`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection") and [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects, to provide compatibility with
    Python standard library `@contextlib.aclosing` construct. Pull request courtesy
    Grigoriev Semyon.
  id: totrans-3154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增了[`AsyncConnection.aclose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.aclose
    "sqlalchemy.ext.asyncio.AsyncConnection.aclose")作为[`AsyncConnection.close()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection.close
    "sqlalchemy.ext.asyncio.AsyncConnection.close")的同义词，以及[`AsyncSession.aclose()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.aclose
    "sqlalchemy.ext.asyncio.AsyncSession.aclose")作为[`AsyncSession.close()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.close
    "sqlalchemy.ext.asyncio.AsyncSession.close")的同义词，用于[`AsyncConnection`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncConnection
    "sqlalchemy.ext.asyncio.AsyncConnection")和[`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")对象，以与Python标准库`@contextlib.aclosing`构造兼容。感谢
    Grigoriev Semyon 提交的拉取请求。
- en: 'References: [#9698](https://www.sqlalchemy.org/trac/ticket/9698)'
  id: totrans-3155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9698](https://www.sqlalchemy.org/trac/ticket/9698)
- en: mysql
  id: totrans-3156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-3157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [usecase]**'
- en: Updated aiomysql dialect since the dialect appears to be maintained again. Re-added
    to the ci testing using version 0.2.0.
  id: totrans-3158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了aiomysql方言，因为该方言似乎再次得到维护。重新使用版本0.2.0进行ci测试。
- en: 'This change is also **backported** to: 1.4.50'
  id: totrans-3159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.4.50
- en: 2.0.19
  id: totrans-3160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.19
- en: 'Released: July 15, 2023'
  id: totrans-3161
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年7月15日
- en: orm
  id: totrans-3162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where setting a relationship collection directly, where an object
    in the new collection were already present, would not trigger a cascade event
    for that object, leading to it not being added to the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") if it were not already present. This is similar in nature
    to [#6471](https://www.sqlalchemy.org/trac/ticket/6471) and is a more apparent
    issue due to the removal of `cascade_backrefs` in the 2.0 series. The [`AttributeEvents.append_wo_mutation()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.append_wo_mutation
    "sqlalchemy.orm.AttributeEvents.append_wo_mutation") event added as part of [#6471](https://www.sqlalchemy.org/trac/ticket/6471)
    is now also emitted for existing members of a collection that are present in a
    bulk set of that same collection.
  id: totrans-3164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了直接设置关系集合的问题，其中新集合中的对象已经存在时，不会触发该对象的级联事件，导致如果该对象尚未存在，则不会添加到[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。这与[#6471](https://www.sqlalchemy.org/trac/ticket/6471)类似，并且由于在2.0系列中删除了`cascade_backrefs`，这个问题更加明显。作为[#6471](https://www.sqlalchemy.org/trac/ticket/6471)的一部分，现在还为已存在于相同集合的批量设置中的现有成员触发[`AttributeEvents.append_wo_mutation()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.append_wo_mutation
    "sqlalchemy.orm.AttributeEvents.append_wo_mutation")事件。
- en: 'References: [#10089](https://www.sqlalchemy.org/trac/ticket/10089)'
  id: totrans-3165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10089](https://www.sqlalchemy.org/trac/ticket/10089)
- en: '**[orm] [bug]**'
  id: totrans-3166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where objects that were associated with an unloaded collection via
    backref, but were not merged into the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") due to the removal of `cascade_backrefs` in the 2.0
    series, would not emit a warning that these objects were not being included in
    a flush, even though they were pending members of the collection; in other such
    cases, a warning is emitted when a collection being flushed contains non-attached
    objects which will be essentially discarded. The addition of the warning for backref-pending
    collection members establishes greater consistency with collections that may be
    present or non-present and possibly flushed or not flushed at different times
    based on different relationship loading strategies.
  id: totrans-3167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了通过 backref 与未合并到 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 中的加载集合相关联的对象的问题，由于在 2.0 系列中删除了 `cascade_backrefs`，这些对象不会发出警告，即使它们是集合的待定成员；在其他类似情况下，当要刷新的集合包含将被实质性丢弃的未附加对象时，会发出警告。为
    backref-待定集合成员添加警告增加了与可能存在或不存在的集合以及基于不同关系加载策略在不同时间可能刷新或不刷新的集合的一致性。
- en: 'References: [#10090](https://www.sqlalchemy.org/trac/ticket/10090)'
  id: totrans-3168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10090](https://www.sqlalchemy.org/trac/ticket/10090)
- en: '**[orm] [bug] [regression]**'
  id: totrans-3169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed additional regression caused by [#9805](https://www.sqlalchemy.org/trac/ticket/9805)
    where more aggressive propagation of the “ORM” flag on statements could lead to
    an internal attribute error when embedding an ORM [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") construct that nonetheless contained no ORM entities within
    a Core SQL statement, in this case ORM-enabled UPDATE and DELETE statements.
  id: totrans-3170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过 [#9805](https://www.sqlalchemy.org/trac/ticket/9805) 引起的额外回归被修复，其中对语句上的“ORM”标志更积极的传播可能导致在包含没有
    ORM 实体的 ORM [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    构造中引发内部属性错误，即使在这种情况下 ORM 启用的 UPDATE 和 DELETE 语句中也不包含 ORM 实体。
- en: 'References: [#10098](https://www.sqlalchemy.org/trac/ticket/10098)'
  id: totrans-3171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10098](https://www.sqlalchemy.org/trac/ticket/10098)
- en: engine
  id: totrans-3172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-3173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Renamed [`Row.t`](../core/connections.html#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")
    and [`Row.tuple()`](../core/connections.html#sqlalchemy.engine.Row.tuple "sqlalchemy.engine.Row.tuple")
    to [`Row._t`](../core/connections.html#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t")
    and [`Row._tuple()`](../core/connections.html#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple");
    this is to suit the policy that all methods and pre-defined attributes on [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") should be in the style of Python standard library `namedtuple`
    where all fixed names have a leading underscore, to avoid name conflicts with
    existing column names. The previous method/attribute is now deprecated and will
    emit a deprecation warning.
  id: totrans-3174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 [`Row.t`](../core/connections.html#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")
    和 [`Row.tuple()`](../core/connections.html#sqlalchemy.engine.Row.tuple "sqlalchemy.engine.Row.tuple")
    重命名为 [`Row._t`](../core/connections.html#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t")
    和 [`Row._tuple()`](../core/connections.html#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple")；这是为了遵循所有在[`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")上的方法和预定义属性应该以 Python 标准库 `namedtuple` 的风格命名的政策，所有固定名称都有一个前导下划线，以避免与现有列名称发生冲突。以前的方法/属性现在已被弃用，并将发出弃用警告。
- en: 'References: [#10093](https://www.sqlalchemy.org/trac/ticket/10093)'
  id: totrans-3175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10093](https://www.sqlalchemy.org/trac/ticket/10093)
- en: '**[engine] [bug]**'
  id: totrans-3176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added detection for non-string, non-[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") objects to the [`make_url()`](../core/engines.html#sqlalchemy.engine.make_url
    "sqlalchemy.engine.make_url") function, allowing `ArgumentError` to be thrown
    immediately, rather than causing failures later on. Special logic ensures that
    mock forms of [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    are allowed through. Pull request courtesy Grigoriev Semyon.
  id: totrans-3177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`make_url()`](../core/engines.html#sqlalchemy.engine.make_url "sqlalchemy.engine.make_url")函数添加了对非字符串、非[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")对象的检测，允许立即抛出`ArgumentError`，而不是在后来导致失败。特殊逻辑确保模拟形式的[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")可以通过。感谢 Grigoriev Semyon 的拉取请求。
- en: 'References: [#10079](https://www.sqlalchemy.org/trac/ticket/10079)'
  id: totrans-3178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10079](https://www.sqlalchemy.org/trac/ticket/10079)
- en: postgresql
  id: totrans-3179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-3180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression caused by improvements to PostgreSQL URL parsing in [#10004](https://www.sqlalchemy.org/trac/ticket/10004)
    where “host” query string arguments that had colons in them, to support various
    third party proxy servers and/or dialects, would not parse correctly as these
    were evaluted as `host:port` combinations. Parsing has been updated to consider
    a colon as indicating a `host:port` value only if the hostname contains only alphanumeric
    characters with dots or dashes only (e.g. no slashes), followed by exactly one
    colon followed by an all-integer token of zero or more integers. In all other
    cases, the full string is taken as a host.
  id: totrans-3181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于在[#10004](https://www.sqlalchemy.org/trac/ticket/10004)中对PostgreSQL URL解析进行了改进，导致的回归问题已修复，其中“host”查询字符串参数中包含冒号，以支持各种第三方代理服务器和/或方言，将无法正确解析，因为这些被视为`host:port`组合。解析已更新，只有当主机名仅包含字母数字字符，点或破折号（例如没有斜杠），后跟一个冒号，然后跟着一个零个或多个整数的令牌时，才将冒号视为指示`host:port`值。在所有其他情况下，整个字符串被视为主机。
- en: 'References: [#10069](https://www.sqlalchemy.org/trac/ticket/10069)'
  id: totrans-3182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10069](https://www.sqlalchemy.org/trac/ticket/10069)
- en: '**[postgresql] [bug]**'
  id: totrans-3183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where comparisons to the [`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT") datatype would cast the right side to
    `VARCHAR`, leading to the right side not being interpreted as a `CITEXT` datatype,
    for the asyncpg, psycopg3 and pg80000 dialects. This led to the [`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT") type being essentially unusable for practical
    use; this is now fixed and the test suite has been corrected to properly assert
    that expressions are rendered correctly.
  id: totrans-3184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与[`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT")数据类型的比较会将右侧转换为`VARCHAR`的问题，导致右侧不被解释为`CITEXT`数据类型，适用于asyncpg、psycopg3和pg80000方言。这导致[`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT")类型在实际使用中基本上无法使用；现在已修复此问题，并且测试套件已经更正，以正确断言表达式是否被正确渲染。
- en: 'References: [#10096](https://www.sqlalchemy.org/trac/ticket/10096)'
  id: totrans-3185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10096](https://www.sqlalchemy.org/trac/ticket/10096)
- en: orm
  id: totrans-3186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where setting a relationship collection directly, where an object
    in the new collection were already present, would not trigger a cascade event
    for that object, leading to it not being added to the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") if it were not already present. This is similar in nature
    to [#6471](https://www.sqlalchemy.org/trac/ticket/6471) and is a more apparent
    issue due to the removal of `cascade_backrefs` in the 2.0 series. The [`AttributeEvents.append_wo_mutation()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.append_wo_mutation
    "sqlalchemy.orm.AttributeEvents.append_wo_mutation") event added as part of [#6471](https://www.sqlalchemy.org/trac/ticket/6471)
    is now also emitted for existing members of a collection that are present in a
    bulk set of that same collection.
  id: totrans-3188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了直接设置关系集合的问题，其中新集合中的对象已经存在时，不会触发该对象的级联事件，导致如果该对象不存在，则不会被添加到[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。这与[#6471](https://www.sqlalchemy.org/trac/ticket/6471)类似，并且由于在2.0系列中删除了`cascade_backrefs`，这个问题更加明显。作为[#6471](https://www.sqlalchemy.org/trac/ticket/6471)的一部分添加的[`AttributeEvents.append_wo_mutation()`](../orm/events.html#sqlalchemy.orm.AttributeEvents.append_wo_mutation
    "sqlalchemy.orm.AttributeEvents.append_wo_mutation")事件现在也会对已存在于同一集合的批量设置中的现有成员发出。
- en: 'References: [#10089](https://www.sqlalchemy.org/trac/ticket/10089)'
  id: totrans-3189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10089](https://www.sqlalchemy.org/trac/ticket/10089)
- en: '**[orm] [bug]**'
  id: totrans-3190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where objects that were associated with an unloaded collection via
    backref, but were not merged into the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") due to the removal of `cascade_backrefs` in the 2.0
    series, would not emit a warning that these objects were not being included in
    a flush, even though they were pending members of the collection; in other such
    cases, a warning is emitted when a collection being flushed contains non-attached
    objects which will be essentially discarded. The addition of the warning for backref-pending
    collection members establishes greater consistency with collections that may be
    present or non-present and possibly flushed or not flushed at different times
    based on different relationship loading strategies.
  id: totrans-3191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即通过反向引用与未合并到[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的未加载集合相关联的对象，因为在 2.0 系列中删除了`cascade_backrefs`，所以不会发出警告，即这些对象未被包含在刷新中，即使它们是集合的待处理成员；在其他类似情况下，当正在刷新的集合包含将被基本丢弃的非附加对象时，将发出警告。对于反向引用挂起的集合成员添加警告，可以建立更大一致性，这些集合可能存在或不存在，并可能根据不同的关系加载策略在不同的时间进行刷新或不刷新。
- en: 'References: [#10090](https://www.sqlalchemy.org/trac/ticket/10090)'
  id: totrans-3192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10090](https://www.sqlalchemy.org/trac/ticket/10090)
- en: '**[orm] [bug] [regression]**'
  id: totrans-3193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed additional regression caused by [#9805](https://www.sqlalchemy.org/trac/ticket/9805)
    where more aggressive propagation of the “ORM” flag on statements could lead to
    an internal attribute error when embedding an ORM [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") construct that nonetheless contained no ORM entities within
    a Core SQL statement, in this case ORM-enabled UPDATE and DELETE statements.
  id: totrans-3194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#9805](https://www.sqlalchemy.org/trac/ticket/9805)导致的额外回归，其中对语句上的“ORM”标志的更积极传播可能导致在嵌入了
    ORM [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    构造的核心 SQL 语句中包含没有 ORM 实体的情况下导致内部属性错误，即使在这种情况下，ORM 启用的 UPDATE 和 DELETE 语句也不包含 ORM
    实体。
- en: 'References: [#10098](https://www.sqlalchemy.org/trac/ticket/10098)'
  id: totrans-3195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10098](https://www.sqlalchemy.org/trac/ticket/10098)
- en: engine
  id: totrans-3196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-3197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Renamed [`Row.t`](../core/connections.html#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")
    and [`Row.tuple()`](../core/connections.html#sqlalchemy.engine.Row.tuple "sqlalchemy.engine.Row.tuple")
    to [`Row._t`](../core/connections.html#sqlalchemy.engine.Row._t "sqlalchemy.engine.Row._t")
    and [`Row._tuple()`](../core/connections.html#sqlalchemy.engine.Row._tuple "sqlalchemy.engine.Row._tuple");
    this is to suit the policy that all methods and pre-defined attributes on [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") should be in the style of Python standard library `namedtuple`
    where all fixed names have a leading underscore, to avoid name conflicts with
    existing column names. The previous method/attribute is now deprecated and will
    emit a deprecation warning.
  id: totrans-3198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`Row.t`](../core/connections.html#sqlalchemy.engine.Row.t "sqlalchemy.engine.Row.t")和[`Row.tuple()`](../core/connections.html#sqlalchemy.engine.Row.tuple
    "sqlalchemy.engine.Row.tuple")重命名为[`Row._t`](../core/connections.html#sqlalchemy.engine.Row._t
    "sqlalchemy.engine.Row._t")和[`Row._tuple()`](../core/connections.html#sqlalchemy.engine.Row._tuple
    "sqlalchemy.engine.Row._tuple")；这是为了符合所有方法和预定义属性在[`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")上应采用 Python 标准库`namedtuple`风格的政策，其中所有固定名称都带有前导下划线，以避免与现有列名称发生冲突。以前的方法/属性现已弃用，并将发出弃用警告。
- en: 'References: [#10093](https://www.sqlalchemy.org/trac/ticket/10093)'
  id: totrans-3199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10093](https://www.sqlalchemy.org/trac/ticket/10093)
- en: '**[engine] [bug]**'
  id: totrans-3200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Added detection for non-string, non-[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") objects to the [`make_url()`](../core/engines.html#sqlalchemy.engine.make_url
    "sqlalchemy.engine.make_url") function, allowing `ArgumentError` to be thrown
    immediately, rather than causing failures later on. Special logic ensures that
    mock forms of [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    are allowed through. Pull request courtesy Grigoriev Semyon.
  id: totrans-3201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对非字符串、非[`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象的检测到[`make_url()`](../core/engines.html#sqlalchemy.engine.make_url
    "sqlalchemy.engine.make_url")函数，允许立即抛出`ArgumentError`，而不是后来导致失败。特殊逻辑确保允许通过 [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") 的模拟形式。感谢 Grigoriev Semyon 的拉取请求。
- en: 'References: [#10079](https://www.sqlalchemy.org/trac/ticket/10079)'
  id: totrans-3202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10079](https://www.sqlalchemy.org/trac/ticket/10079)
- en: postgresql
  id: totrans-3203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-3204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression caused by improvements to PostgreSQL URL parsing in [#10004](https://www.sqlalchemy.org/trac/ticket/10004)
    where “host” query string arguments that had colons in them, to support various
    third party proxy servers and/or dialects, would not parse correctly as these
    were evaluted as `host:port` combinations. Parsing has been updated to consider
    a colon as indicating a `host:port` value only if the hostname contains only alphanumeric
    characters with dots or dashes only (e.g. no slashes), followed by exactly one
    colon followed by an all-integer token of zero or more integers. In all other
    cases, the full string is taken as a host.
  id: totrans-3205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[#10004](https://www.sqlalchemy.org/trac/ticket/10004)中改进PostgreSQL URL解析时引起的回归，其中在主机查询字符串参数中含有冒号的情况下，以支持各种第三方代理服务器和/或方言，将无法正确解析，因为这些被评估为`host:port`组合。
    解析已更新为仅在主机名仅包含字母数字字符以及仅包含点或破折号（例如没有斜杠）的情况下，考虑冒号表示`host:port`值，后跟零个或多个整数的全整数标记的情况下，才表示主机。
    在所有其他情况下，将完整字符串视为主机。
- en: 'References: [#10069](https://www.sqlalchemy.org/trac/ticket/10069)'
  id: totrans-3206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10069](https://www.sqlalchemy.org/trac/ticket/10069)
- en: '**[postgresql] [bug]**'
  id: totrans-3207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where comparisons to the [`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT") datatype would cast the right side to
    `VARCHAR`, leading to the right side not being interpreted as a `CITEXT` datatype,
    for the asyncpg, psycopg3 and pg80000 dialects. This led to the [`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT") type being essentially unusable for practical
    use; this is now fixed and the test suite has been corrected to properly assert
    that expressions are rendered correctly.
  id: totrans-3208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与[`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT")数据类型的比较问题，导致右侧被转换为`VARCHAR`，导致右侧未被解释为`CITEXT`数据类型，适用于asyncpg、psycopg3和pg80000方言。
    这导致[`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT")类型在实际使用中基本不可用；现已修复此问题，并已更正测试套件以正确断言表达式是否被正确呈现。
- en: 'References: [#10096](https://www.sqlalchemy.org/trac/ticket/10096)'
  id: totrans-3209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10096](https://www.sqlalchemy.org/trac/ticket/10096)
- en: 2.0.18
  id: totrans-3210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.18
- en: 'Released: July 5, 2023'
  id: totrans-3211
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年7月5日
- en: engine
  id: totrans-3212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-3213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [bug]**'
- en: Adjusted the [`create_engine.schema_translate_map`](../core/engines.html#sqlalchemy.create_engine.params.schema_translate_map
    "sqlalchemy.create_engine") feature such that **all** schema names in the statement
    are now tokenized, regardless of whether or not a specific name is in the immediate
    schema translate map given, and to fallback to substituting the original name
    when the key is not in the actual schema translate map at execution time. These
    two changes allow for repeated use of a compiled object with schema schema_translate_maps
    that include or dont include various keys on each run, allowing cached SQL constructs
    to continue to function at runtime when schema translate maps with different sets
    of keys are used each time. In addition, added detection of schema_translate_map
    dictionaries which gain or lose a `None` key across calls for the same statement,
    which affects compilation of the statement and is not compatible with caching;
    an exception is raised for these scenarios.
  id: totrans-3214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了[`create_engine.schema_translate_map`](../core/engines.html#sqlalchemy.create_engine.params.schema_translate_map
    "sqlalchemy.create_engine")功能，使得语句中的**所有**模式名称现在都被标记化，而不管特定名称是否在给定的立即模式翻译映射中，并且在执行时当键不在实际模式翻译映射中时回退到替换原始名称。
    这两个更改允许在每次运行时使用包含或不包含各种键的模式翻译映射来重复使用已编译的对象，从而使得当每次使用时都使用具有不同键集的模式翻译映射时，缓存的SQL结构可以继续在运行时正常工作。
    另外，还添加了在相同语句的调用间获得或失去`None`键的schema_translate_map字典的检测，这会影响语句的编译，并且与缓存不兼容； 这些情况下会引发异常。
- en: 'References: [#10025](https://www.sqlalchemy.org/trac/ticket/10025)'
  id: totrans-3215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#10025](https://www.sqlalchemy.org/trac/ticket/10025)
- en: sql
  id: totrans-3216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-3217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where the [`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") when using “flags” would
    not produce a “stable” cache key, that is, the cache key would keep changing each
    time causing cache pollution. The same issue existed for [`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") with both the flags
    and the actual replacement expression. The flags are now represented as fixed
    modifier strings rendered as safestrings rather than bound parameters, and the
    replacement expression is established within the primary portion of the “binary”
    element so that it generates an appropriate cache key.
  id: totrans-3218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当使用“标志”时 [`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") 不会产生“稳定”的缓存密钥的问题，即，缓存密钥每次都会更改，导致缓存污染。对于带有标志和实际替换表达式的
    [`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 也存在相同的问题。现在，标志被表示为固定的修饰符字符串，呈现为
    safestring，而不是绑定参数，替换表达式在“二进制”元素的主要部分中确定，因此它生成适当的缓存密钥。
- en: Note that as part of this change, the [`ColumnOperators.regexp_match.flags`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match.params.flags
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") and [`ColumnOperators.regexp_replace.flags`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace.params.flags
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") have been modified
    to render as literal strings only, whereas previously they were rendered as full
    SQL expressions, typically bound parameters. These parameters should always be
    passed as plain Python strings and not as SQL expression constructs; it’s not
    expected that SQL expression constructs were used in practice for this parameter,
    so this is a backwards-incompatible change.
  id: totrans-3219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，作为此更改的一部分，[`ColumnOperators.regexp_match.flags`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match.params.flags
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") 和 [`ColumnOperators.regexp_replace.flags`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace.params.flags
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 已修改为仅渲染为文字字符串，而以前它们被渲染为完整的
    SQL 表达式，通常是绑定参数。这些参数应始终作为普通的 Python 字符串传递，而不是作为 SQL 表达式构造；不希望在实践中使用 SQL 表达式构造此参数，因此这是一个不兼容的更改。
- en: The change also modifies the internal structure of the expression generated,
    for [`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") with or without flags,
    and for [`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") with flags. Third party
    dialects which may have implemented regexp implementations of their own (no such
    dialects could be located in a search, so impact is expected to be low) would
    need to adjust the traversal of the structure to accommodate.
  id: totrans-3220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还修改了生成的表达式的内部结构，对于带有或不带有标志的 [`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 和带有标志的 [`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")。可能已经实现了自己的正则表达式实现的第三方方言（在搜索中找不到此类方言，因此预期影响很小）需要调整结构的遍历以适应。
- en: 'This change is also **backported** to: 1.4.49'
  id: totrans-3221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还 **回溯到**：1.4.49
- en: 'References: [#10042](https://www.sqlalchemy.org/trac/ticket/10042)'
  id: totrans-3222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10042](https://www.sqlalchemy.org/trac/ticket/10042)
- en: '**[sql] [bug]**'
  id: totrans-3223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed issue in mostly-internal [`CacheKey`](../core/foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") construct where the `__ne__()` operator
    were not properly implemented, leading to nonsensical results when comparing [`CacheKey`](../core/foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") instances to each other.
  id: totrans-3224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在主要内部[`CacheKey`](../core/foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") 构造中的问题，其中`__ne__()` 运算符未正确实现，导致当比较 [`CacheKey`](../core/foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") 实例时产生荒谬的结果。
- en: 'This change is also **backported** to: 1.4.49'
  id: totrans-3225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还 **回溯到**：1.4.49
- en: extensions
  id: totrans-3226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions] [usecase]**'
  id: totrans-3227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展] [用例]**'
- en: Added new option to [`association_proxy()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") [`association_proxy.create_on_none_assignment`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.create_on_none_assignment
    "sqlalchemy.ext.associationproxy.association_proxy"); when an association proxy
    which refers to a scalar relationship is assigned the value `None`, and the referenced
    object is not present, a new object is created via the creator. This was apparently
    an undefined behavior in the 1.2 series that was silently removed.
  id: totrans-3228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`association_proxy()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") [`association_proxy.create_on_none_assignment`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.create_on_none_assignment
    "sqlalchemy.ext.associationproxy.association_proxy") 添加了新选项；当一个关联代理引用一个标量关系并被赋予值
    `None`，并且引用的对象不存在时，通过创建者创建一个新对象。这显然是 1.2 系列中的一个未定义行为，已经被悄悄移除了。
- en: 'References: [#10013](https://www.sqlalchemy.org/trac/ticket/10013)'
  id: totrans-3229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10013](https://www.sqlalchemy.org/trac/ticket/10013)
- en: typing
  id: totrans-3230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型提示
- en: '**[typing] [usecase]**'
  id: totrans-3231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型提示] [用例]**'
- en: Improved typing when using standalone operator functions from `sqlalchemy.sql.operators`
    such as `sqlalchemy.sql.operators.eq`.
  id: totrans-3232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用`sqlalchemy.sql.operators`中的独立运算符函数（例如`sqlalchemy.sql.operators.eq`）时，改进了类型提示。
- en: 'References: [#10054](https://www.sqlalchemy.org/trac/ticket/10054)'
  id: totrans-3233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10054](https://www.sqlalchemy.org/trac/ticket/10054)
- en: '**[typing] [bug]**'
  id: totrans-3234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型提示] [错误]**'
- en: Fixed some of the typing within the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct to correctly accept a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object that’s been aliased with [`Table.alias()`](../core/metadata.html#sqlalchemy.schema.Table.alias
    "sqlalchemy.schema.Table.alias"), as well as general support for [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects to be passed as the “selectable”
    argument, since this is all supported.
  id: totrans-3235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了 [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    结构内部的一些类型提示，以正确接受已使用 [`Table.alias()`](../core/metadata.html#sqlalchemy.schema.Table.alias
    "sqlalchemy.schema.Table.alias") 别名的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象，以及对传递为“可选择”参数的 [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 对象的一般支持，因为这都得到了支持。
- en: 'References: [#10061](https://www.sqlalchemy.org/trac/ticket/10061)'
  id: totrans-3236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10061](https://www.sqlalchemy.org/trac/ticket/10061)
- en: postgresql
  id: totrans-3237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-3238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Added multi-host support for the asyncpg dialect. General improvements and error
    checking added to the PostgreSQL URL routines for the “multihost” use case added
    as well. Pull request courtesy Ilia Dmitriev.
  id: totrans-3239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 asyncpg 方言添加了多主机支持。还添加了对“多主机”用例的 PostgreSQL URL 例程的一般改进和错误检查。拉取请求由 Ilia Dmitriev
    提供。
- en: See also
  id: totrans-3240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Multihost Connections](../dialects/postgresql.html#asyncpg-multihost)'
  id: totrans-3241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[多主机连接](../dialects/postgresql.html#asyncpg-multihost)'
- en: 'References: [#10004](https://www.sqlalchemy.org/trac/ticket/10004)'
  id: totrans-3242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#10004](https://www.sqlalchemy.org/trac/ticket/10004)
- en: '**[postgresql] [bug]**'
  id: totrans-3243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Added new parameter `native_inet_types=False` to all PostgreSQL dialects, which
    indicates converters used by the DBAPI to convert rows from PostgreSQL [`INET`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INET
    "sqlalchemy.dialects.postgresql.INET") and [`CIDR`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CIDR
    "sqlalchemy.dialects.postgresql.CIDR") columns into Python `ipaddress` datatypes
    should be disabled, returning strings instead. This allows code written to work
    with strings for these datatypes to be migrated to asyncpg, psycopg, or pg8000
    without code changes other than adding this parameter to the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") or [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") function call.
  id: totrans-3244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向所有 PostgreSQL 方言添加了新参数 `native_inet_types=False`，该参数指示 DBAPI 使用的转换器将 PostgreSQL
    的 [`INET`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INET "sqlalchemy.dialects.postgresql.INET")
    和 [`CIDR`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CIDR "sqlalchemy.dialects.postgresql.CIDR")
    列中的行转换为 Python `ipaddress` 数据类型时应禁用，返回字符串。这样，编写用于这些数据类型的字符串的代码可以在无需代码更改的情况下添加此参数到
    [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    或 [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") 函数调用中而迁移到 asyncpg、psycopg 或 pg8000。
- en: See also
  id: totrans-3245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Network Data Types](../dialects/postgresql.html#postgresql-network-datatypes)'
  id: totrans-3246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[网络数据类型](../dialects/postgresql.html#postgresql-network-datatypes)'
- en: 'References: [#9945](https://www.sqlalchemy.org/trac/ticket/9945)'
  id: totrans-3247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9945](https://www.sqlalchemy.org/trac/ticket/9945)
- en: mariadb
  id: totrans-3248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mariadb
- en: '**[mariadb] [usecase] [reflection]**'
  id: totrans-3249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [用例] [反射]**'
- en: Allowed reflecting [`UUID`](../core/type_basics.html#sqlalchemy.types.UUID "sqlalchemy.types.UUID")
    columns from MariaDB. This allows Alembic to properly detect the type of such
    columns in existing MariaDB databases.
  id: totrans-3250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许从 MariaDB 反射 [`UUID`](../core/type_basics.html#sqlalchemy.types.UUID "sqlalchemy.types.UUID")
    列。这使得 Alembic 能够正确地检测现有 MariaDB 数据库中这些列的类型。
- en: 'References: [#10028](https://www.sqlalchemy.org/trac/ticket/10028)'
  id: totrans-3251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10028](https://www.sqlalchemy.org/trac/ticket/10028)
- en: mssql
  id: totrans-3252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [usecase]**'
  id: totrans-3253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [用例]**'
- en: Added support for creation and reflection of COLUMNSTORE indexes in MSSQL dialect.
    Can be specified on indexes specifying `mssql_columnstore=True`.
  id: totrans-3254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MSSQL 方言中添加了对 COLUMNSTORE 索引的创建和反射支持。可以在指定了 `mssql_columnstore=True` 的索引上指定。
- en: 'References: [#7340](https://www.sqlalchemy.org/trac/ticket/7340)'
  id: totrans-3255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7340](https://www.sqlalchemy.org/trac/ticket/7340)
- en: '**[mssql] [bug] [sql]**'
  id: totrans-3256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误] [sql]**'
- en: Fixed issue where performing [`Cast`](../core/sqlelement.html#sqlalchemy.sql.expression.Cast
    "sqlalchemy.sql.expression.Cast") to a string type with an explicit collation
    would render the COLLATE clause inside the CAST function, which resulted in a
    syntax error.
  id: totrans-3257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在对具有显式排序规则的字符串类型执行 [`Cast`](../core/sqlelement.html#sqlalchemy.sql.expression.Cast
    "sqlalchemy.sql.expression.Cast") 时会在 CAST 函数内部呈现 COLLATE 子句的问题，从而导致语法错误。
- en: 'References: [#9932](https://www.sqlalchemy.org/trac/ticket/9932)'
  id: totrans-3258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9932](https://www.sqlalchemy.org/trac/ticket/9932)
- en: engine
  id: totrans-3259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-3260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Adjusted the [`create_engine.schema_translate_map`](../core/engines.html#sqlalchemy.create_engine.params.schema_translate_map
    "sqlalchemy.create_engine") feature such that **all** schema names in the statement
    are now tokenized, regardless of whether or not a specific name is in the immediate
    schema translate map given, and to fallback to substituting the original name
    when the key is not in the actual schema translate map at execution time. These
    two changes allow for repeated use of a compiled object with schema schema_translate_maps
    that include or dont include various keys on each run, allowing cached SQL constructs
    to continue to function at runtime when schema translate maps with different sets
    of keys are used each time. In addition, added detection of schema_translate_map
    dictionaries which gain or lose a `None` key across calls for the same statement,
    which affects compilation of the statement and is not compatible with caching;
    an exception is raised for these scenarios.
  id: totrans-3261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 [`create_engine.schema_translate_map`](../core/engines.html#sqlalchemy.create_engine.params.schema_translate_map
    "sqlalchemy.create_engine") 功能，使得语句中的**所有**模式名称现在都被标记化，无论指定了具体名称是否在立即模式翻译映射中，都会在执行时回退到原始名称。这两个变化允许对具有包含或不包含不同键集的模式翻译映射的编译对象进行重复使用，每次运行时使用不同的模式翻译映射，从而使得缓存的
    SQL 构造在运行时继续工作。此外，增加了在同一语句的不同调用中增加或减少 `None` 键的 schema_translate_map 字典的检测，这会影响语句的编译，并且不兼容缓存；对于这些情况，会引发异常。
- en: 'References: [#10025](https://www.sqlalchemy.org/trac/ticket/10025)'
  id: totrans-3262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10025](https://www.sqlalchemy.org/trac/ticket/10025)
- en: sql
  id: totrans-3263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [bug]**'
  id: totrans-3264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed issue where the [`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") when using “flags” would
    not produce a “stable” cache key, that is, the cache key would keep changing each
    time causing cache pollution. The same issue existed for [`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") with both the flags
    and the actual replacement expression. The flags are now represented as fixed
    modifier strings rendered as safestrings rather than bound parameters, and the
    replacement expression is established within the primary portion of the “binary”
    element so that it generates an appropriate cache key.
  id: totrans-3265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用“flags”时 [`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") 未生成“稳定”缓存键的问题，即每次缓存键都会发生变化，导致缓存污染。相同的问题也存在于带有
    flags 和实际替换表达式的 [`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 中。现在，flags 被表示为固定的修改器字符串，呈现为安全字符串，而不是绑定参数，并且替换表达式在“binary”元素的主要部分内建立，以生成适当的缓存键。
- en: Note that as part of this change, the [`ColumnOperators.regexp_match.flags`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match.params.flags
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") and [`ColumnOperators.regexp_replace.flags`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace.params.flags
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") have been modified
    to render as literal strings only, whereas previously they were rendered as full
    SQL expressions, typically bound parameters. These parameters should always be
    passed as plain Python strings and not as SQL expression constructs; it’s not
    expected that SQL expression constructs were used in practice for this parameter,
    so this is a backwards-incompatible change.
  id: totrans-3266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，作为这一变更的一部分，[`ColumnOperators.regexp_match.flags`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match.params.flags
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") 和 [`ColumnOperators.regexp_replace.flags`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace.params.flags
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") 已经修改为仅呈现为字面字符串，而以前它们呈现为完整的
    SQL 表达式，通常是绑定参数。这些参数应始终作为普通的 Python 字符串传递，而不是作为 SQL 表达式构造；预计实践中不会使用 SQL 表达式构造来传递此参数，因此这是一个不兼容的变更。
- en: The change also modifies the internal structure of the expression generated,
    for [`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace") with or without flags,
    and for [`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match") with flags. Third party
    dialects which may have implemented regexp implementations of their own (no such
    dialects could be located in a search, so impact is expected to be low) would
    need to adjust the traversal of the structure to accommodate.
  id: totrans-3267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此变更还修改了生成的表达式的内部结构，用于带有或不带有 flags 的 [`ColumnOperators.regexp_replace()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_replace
    "sqlalchemy.sql.expression.ColumnOperators.regexp_replace")，以及带有 flags 的 [`ColumnOperators.regexp_match()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.regexp_match
    "sqlalchemy.sql.expression.ColumnOperators.regexp_match")。可能已经实现了自己的正则表达式的第三方方言（在搜索中找不到这样的方言，因此预期影响很小）需要调整结构的遍历以适应。
- en: 'This change is also **backported** to: 1.4.49'
  id: totrans-3268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此变更还 **回溯** 到：1.4.49
- en: 'References: [#10042](https://www.sqlalchemy.org/trac/ticket/10042)'
  id: totrans-3269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#10042](https://www.sqlalchemy.org/trac/ticket/10042)
- en: '**[sql] [bug]**'
  id: totrans-3270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: Fixed issue in mostly-internal [`CacheKey`](../core/foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") construct where the `__ne__()` operator
    were not properly implemented, leading to nonsensical results when comparing [`CacheKey`](../core/foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") instances to each other.
  id: totrans-3271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了大部分内部 [`CacheKey`](../core/foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") 构造中 `__ne__()` 运算符未正确实现的问题，导致在将 [`CacheKey`](../core/foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") 实例相互比较时产生荒谬的结果。
- en: 'This change is also **backported** to: 1.4.49'
  id: totrans-3272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此变更还 **回溯** 到：1.4.49
- en: extensions
  id: totrans-3273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions] [usecase]**'
  id: totrans-3274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展] [用例]**'
- en: Added new option to [`association_proxy()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") [`association_proxy.create_on_none_assignment`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.create_on_none_assignment
    "sqlalchemy.ext.associationproxy.association_proxy"); when an association proxy
    which refers to a scalar relationship is assigned the value `None`, and the referenced
    object is not present, a new object is created via the creator. This was apparently
    an undefined behavior in the 1.2 series that was silently removed.
  id: totrans-3275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`association_proxy()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy")添加了新选项[`association_proxy.create_on_none_assignment`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.create_on_none_assignment
    "sqlalchemy.ext.associationproxy.association_proxy"); 当将引用标量关系的关联代理分配为`None`值时，并且引用的对象不存在时，通过创建器创建一个新对象。在1.2系列中，这显然是一种未定义的行为，被默默删除了。
- en: 'References: [#10013](https://www.sqlalchemy.org/trac/ticket/10013)'
  id: totrans-3276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10013](https://www.sqlalchemy.org/trac/ticket/10013)
- en: typing
  id: totrans-3277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入
- en: '**[typing] [usecase]**'
  id: totrans-3278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [用例]**'
- en: Improved typing when using standalone operator functions from `sqlalchemy.sql.operators`
    such as `sqlalchemy.sql.operators.eq`.
  id: totrans-3279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用来自`sqlalchemy.sql.operators`的独立运算符函数（如`sqlalchemy.sql.operators.eq`）时，改进了类型提示。
- en: 'References: [#10054](https://www.sqlalchemy.org/trac/ticket/10054)'
  id: totrans-3280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10054](https://www.sqlalchemy.org/trac/ticket/10054)
- en: '**[typing] [bug]**'
  id: totrans-3281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Fixed some of the typing within the [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") construct to correctly accept a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object that’s been aliased with [`Table.alias()`](../core/metadata.html#sqlalchemy.schema.Table.alias
    "sqlalchemy.schema.Table.alias"), as well as general support for [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects to be passed as the “selectable”
    argument, since this is all supported.
  id: totrans-3282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")构造中的一些类型提示，以正确接受已使用[`Table.alias()`](../core/metadata.html#sqlalchemy.schema.Table.alias
    "sqlalchemy.schema.Table.alias")别名的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，以及一般性对于[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象作为“selectable”参数的支持，因为这都是受支持的。
- en: 'References: [#10061](https://www.sqlalchemy.org/trac/ticket/10061)'
  id: totrans-3283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10061](https://www.sqlalchemy.org/trac/ticket/10061)
- en: postgresql
  id: totrans-3284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-3285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Added multi-host support for the asyncpg dialect. General improvements and error
    checking added to the PostgreSQL URL routines for the “multihost” use case added
    as well. Pull request courtesy Ilia Dmitriev.
  id: totrans-3286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为asyncpg方言添加了多主机支持。还为“多主机”用例的PostgreSQL URL例程添加了一般性改进和错误检查。感谢Ilia Dmitriev的拉取请求。
- en: See also
  id: totrans-3287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Multihost Connections](../dialects/postgresql.html#asyncpg-multihost)'
  id: totrans-3288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[多主机连接](../dialects/postgresql.html#asyncpg-multihost)'
- en: 'References: [#10004](https://www.sqlalchemy.org/trac/ticket/10004)'
  id: totrans-3289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10004](https://www.sqlalchemy.org/trac/ticket/10004)
- en: '**[postgresql] [bug]**'
  id: totrans-3290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Added new parameter `native_inet_types=False` to all PostgreSQL dialects, which
    indicates converters used by the DBAPI to convert rows from PostgreSQL [`INET`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INET
    "sqlalchemy.dialects.postgresql.INET") and [`CIDR`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CIDR
    "sqlalchemy.dialects.postgresql.CIDR") columns into Python `ipaddress` datatypes
    should be disabled, returning strings instead. This allows code written to work
    with strings for these datatypes to be migrated to asyncpg, psycopg, or pg8000
    without code changes other than adding this parameter to the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") or [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") function call.
  id: totrans-3291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对所有PostgreSQL方言添加了新参数`native_inet_types=False`，指示DBAPI使用的转换器将PostgreSQL [`INET`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INET
    "sqlalchemy.dialects.postgresql.INET")和[`CIDR`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CIDR
    "sqlalchemy.dialects.postgresql.CIDR")列的行转换为Python `ipaddress` 数据类型时应禁用，而是返回字符串。这允许为这些数据类型编写使用字符串的代码迁移到asyncpg、psycopg或pg8000而无需其他代码更改，只需将此参数添加到[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")或[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")函数调用中。
- en: See also
  id: totrans-3292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Network Data Types](../dialects/postgresql.html#postgresql-network-datatypes)'
  id: totrans-3293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[网络数据类型](../dialects/postgresql.html#postgresql-network-datatypes)'
- en: 'References: [#9945](https://www.sqlalchemy.org/trac/ticket/9945)'
  id: totrans-3294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9945](https://www.sqlalchemy.org/trac/ticket/9945)
- en: mariadb
  id: totrans-3295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mariadb
- en: '**[mariadb] [usecase] [reflection]**'
  id: totrans-3296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [usecase] [reflection]**'
- en: Allowed reflecting [`UUID`](../core/type_basics.html#sqlalchemy.types.UUID "sqlalchemy.types.UUID")
    columns from MariaDB. This allows Alembic to properly detect the type of such
    columns in existing MariaDB databases.
  id: totrans-3297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许从MariaDB反射[`UUID`](../core/type_basics.html#sqlalchemy.types.UUID "sqlalchemy.types.UUID")列。
    这使得Alembic能够正确地检测到现有MariaDB数据库中此类列的类型。
- en: 'References: [#10028](https://www.sqlalchemy.org/trac/ticket/10028)'
  id: totrans-3298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10028](https://www.sqlalchemy.org/trac/ticket/10028)
- en: mssql
  id: totrans-3299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [usecase]**'
  id: totrans-3300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [usecase]**'
- en: Added support for creation and reflection of COLUMNSTORE indexes in MSSQL dialect.
    Can be specified on indexes specifying `mssql_columnstore=True`.
  id: totrans-3301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对MSSQL方言中COLUMNSTORE索引的创建和反射支持。 可以在指定`mssql_columnstore=True`的索引上指定。
- en: 'References: [#7340](https://www.sqlalchemy.org/trac/ticket/7340)'
  id: totrans-3302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7340](https://www.sqlalchemy.org/trac/ticket/7340)
- en: '**[mssql] [bug] [sql]**'
  id: totrans-3303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [sql]**'
- en: Fixed issue where performing [`Cast`](../core/sqlelement.html#sqlalchemy.sql.expression.Cast
    "sqlalchemy.sql.expression.Cast") to a string type with an explicit collation
    would render the COLLATE clause inside the CAST function, which resulted in a
    syntax error.
  id: totrans-3304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将具有显式排序规则的字符串类型执行[`Cast`](../core/sqlelement.html#sqlalchemy.sql.expression.Cast
    "sqlalchemy.sql.expression.Cast")时会在CAST函数内部呈现COLLATE子句的问题，这导致语法错误。
- en: 'References: [#9932](https://www.sqlalchemy.org/trac/ticket/9932)'
  id: totrans-3305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9932](https://www.sqlalchemy.org/trac/ticket/9932)
- en: 2.0.17
  id: totrans-3306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.17
- en: 'Released: June 23, 2023'
  id: totrans-3307
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年6月23日
- en: orm
  id: totrans-3308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [regression]**'
  id: totrans-3309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression in the 2.0 series where a query that used [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") with [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") or [`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload") would raise an `AttributeError`. Pull request courtesy
    of Matthew Martin.
  id: totrans-3310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了2.0系列中的回归问题，其中使用[`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group")与[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")或[`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload")的查询会引发`AttributeError`。 拉取请求由Matthew Martin提供。
- en: 'References: [#9870](https://www.sqlalchemy.org/trac/ticket/9870)'
  id: totrans-3311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9870](https://www.sqlalchemy.org/trac/ticket/9870)
- en: '**[orm] [bug]**'
  id: totrans-3312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in ORM Annotated Declarative which prevented a [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") from being used on a mixin which did not return
    a [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    datatype, and instead returned a supplemental ORM datatype such as [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy"). The Declarative runtime would
    erroneously try to interpret this annotation as needing to be [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") and raise an error.
  id: totrans-3313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在ORM注释声明中的问题，该问题阻止了[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")在未返回[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")数据类型的混合类型上使用，而是返回了诸如[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")之类的补充ORM数据类型。 声明式运行时会错误地尝试解释此注释为需要[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")并引发错误。
- en: 'References: [#9957](https://www.sqlalchemy.org/trac/ticket/9957)'
  id: totrans-3314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9957](https://www.sqlalchemy.org/trac/ticket/9957)
- en: '**[orm] [bug] [typing]**'
  id: totrans-3315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [typing]**'
- en: Fixed typing issue where using the [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") return type from a [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") function was disallowed.
  id: totrans-3316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")函数的[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")返回类型被禁止的类型问题。
- en: 'References: [#9957](https://www.sqlalchemy.org/trac/ticket/9957)'
  id: totrans-3317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9957](https://www.sqlalchemy.org/trac/ticket/9957)
- en: '**[orm] [bug] [regression]**'
  id: totrans-3318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression introduced in 2.0.16 by [#9879](https://www.sqlalchemy.org/trac/ticket/9879)
    where passing a callable to the [`mapped_column.default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column") parameter of [`mapped_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") while also setting `init=False` would interpret
    this value as a Dataclass default value which would be assigned directly to new
    instances of the object directly, bypassing the default generator taking place
    as the [`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") value generator on the underlying [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"). This condition is now detected so that the previous
    behavior is maintained, however a deprecation warning for this ambiguous use is
    emitted; to populate the default generator for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), the [`mapped_column.insert_default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.insert_default
    "sqlalchemy.orm.mapped_column") parameter should be used, which disambiguates
    from the [`mapped_column.default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column") parameter whose name is fixed as per pep-681.
  id: totrans-3319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了2.0.16中由[#9879](https://www.sqlalchemy.org/trac/ticket/9879)引入的回归，其中将可调用对象传递给[`mapped_column.default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column")参数时，同时设置`init=False`会将此值解释为Dataclass默认值，该值将直接分配给对象的新实例，绕过了作为底层[`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column")值生成器的默认生成器所发生的情况。现在检测到此条件以保持先前的行为，但发出了对此模棱两可用法的弃用警告；为了为[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")填充默认生成器，应使用[`mapped_column.insert_default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.insert_default
    "sqlalchemy.orm.mapped_column")参数，该参数使其与固定名称的[`mapped_column.default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column")参数相区分，根据pep-681。
- en: 'References: [#9936](https://www.sqlalchemy.org/trac/ticket/9936)'
  id: totrans-3320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9936](https://www.sqlalchemy.org/trac/ticket/9936)
- en: '**[orm] [bug]**'
  id: totrans-3321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Additional hardening and documentation for the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") “state change” system, which detects concurrent use
    of [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    and [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects; an additional check is added within
    the process to acquire connections from the underlying engine, which is a critical
    section with regards to internal connection management.
  id: totrans-3322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    “状态更改”系统进行了额外的强化和文档编写，该系统检测到[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")和[`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")对象的并发使用；在从底层引擎获取连接的过程中添加了额外的检查，在内部连接管理方面是一个关键部分。
- en: 'References: [#9973](https://www.sqlalchemy.org/trac/ticket/9973)'
  id: totrans-3323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9973](https://www.sqlalchemy.org/trac/ticket/9973)
- en: '**[orm] [bug]**'
  id: totrans-3324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in ORM loader strategy logic which further allows for long chains
    of [`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") loader options across complex inheriting polymorphic
    / aliased / of_type() relationship chains to take proper effect in queries.
  id: totrans-3325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM加载器策略逻辑中的问题，进一步允许在复杂的继承多态/别名/`of_type()`关系链中横跨长链的[`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")加载器选项以正确生效于查询中。
- en: 'References: [#10006](https://www.sqlalchemy.org/trac/ticket/10006)'
  id: totrans-3326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10006](https://www.sqlalchemy.org/trac/ticket/10006)
- en: '**[orm] [bug]**'
  id: totrans-3327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in support for the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") datatype in the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") first added as part of [#8859](https://www.sqlalchemy.org/trac/ticket/8859)
    where using a custom [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    with fixed configuration in the map would fail to transfer the [`Enum.name`](../core/type_basics.html#sqlalchemy.types.Enum.params.name
    "sqlalchemy.types.Enum") parameter, which among other issues would prevent PostgreSQL
    enums from working if the enum values were passed as individual values. Logic
    has been updated so that “name” is transferred over, but also that the default
    [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    which is against the plain Python enum.Enum class or other “empty” enum won’t
    set a hardcoded name of `"enum"` either.
  id: totrans-3328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") 中首次添加的 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 数据类型支持中的问题，其中使用映射中的自定义 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 并且在映射中使用固定配置会导致传输 [`Enum.name`](../core/type_basics.html#sqlalchemy.types.Enum.params.name
    "sqlalchemy.types.Enum") 参数失败，其中一个问题是如果枚举值作为单独的值传递，则会阻止 PostgreSQL 枚举正常工作。逻辑已更新，使“name”被传输，但也使默认的
    [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    不会设置一个硬编码的名称为 `"enum"`。
- en: 'References: [#9963](https://www.sqlalchemy.org/trac/ticket/9963)'
  id: totrans-3329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9963](https://www.sqlalchemy.org/trac/ticket/9963)
- en: orm declarative
  id: totrans-3330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM 声明性
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [声明性] [错误]**'
- en: A warning is emitted when an ORM [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") and other [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects are assigned to two different class attributes
    at once; only one of the attributes will be mapped. A warning for this condition
    was already in place for [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") and [`mapped_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") objects.
  id: totrans-3332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将 ORM [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 和其他 [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") 对象同时分配给两个不同的类属性时，会发出警告；只会映射其中一个属性。对于此情况的警告已经适用于
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    和 [`mapped_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    对象。
- en: 'References: [#3532](https://www.sqlalchemy.org/trac/ticket/3532)'
  id: totrans-3333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3532](https://www.sqlalchemy.org/trac/ticket/3532)
- en: extensions
  id: totrans-3334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions] [bug]**'
  id: totrans-3335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展] [错误]**'
- en: Fixed issue in mypy plugin for use with mypy 1.4.
  id: totrans-3336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 mypy 1.4 结合使用的 mypy 插件中的问题。
- en: 'This change is also **backported** to: 1.4.49'
  id: totrans-3337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被 **回溯** 至：1.4.49
- en: typing
  id: totrans-3338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-3339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [错误]**'
- en: Fixed typing issue which prevented [`WriteOnlyMapped`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped") and [`DynamicMapped`](../orm/large_collections.html#sqlalchemy.orm.DynamicMapped
    "sqlalchemy.orm.DynamicMapped") attributes from being used fully within ORM queries.
  id: totrans-3340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止 [`WriteOnlyMapped`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped") 和 [`DynamicMapped`](../orm/large_collections.html#sqlalchemy.orm.DynamicMapped
    "sqlalchemy.orm.DynamicMapped") 属性在 ORM 查询中完全使用的类型问题。
- en: 'References: [#9985](https://www.sqlalchemy.org/trac/ticket/9985)'
  id: totrans-3341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9985](https://www.sqlalchemy.org/trac/ticket/9985)
- en: postgresql
  id: totrans-3342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-3343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: The pg8000 dialect now supports RANGE and MULTIRANGE datatypes, using the existing
    RANGE API described at [Range and Multirange Types](../dialects/postgresql.html#postgresql-ranges).
    Range and multirange types are supported in the pg8000 driver from version 1.29.8.
    Pull request courtesy Tony Locke.
  id: totrans-3344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pg8000 方言现在支持 RANGE 和 MULTIRANGE 数据类型，使用现有的 RANGE API 描述在 [Range and Multirange
    Types](../dialects/postgresql.html#postgresql-ranges)。pg8000 驱动程序从版本 1.29.8 开始支持范围和多范围类型。感谢
    Tony Locke 提交的拉取请求。
- en: 'References: [#9965](https://www.sqlalchemy.org/trac/ticket/9965)'
  id: totrans-3345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9965](https://www.sqlalchemy.org/trac/ticket/9965)
- en: orm
  id: totrans-3346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [bug] [regression]**'
  id: totrans-3347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误] [回归]**'
- en: Fixed regression in the 2.0 series where a query that used [`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group") with [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") or [`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload") would raise an `AttributeError`. Pull request courtesy
    of Matthew Martin.
  id: totrans-3348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 2.0 系列中的回归问题，即使用[`undefer_group()`](../orm/queryguide/columns.html#sqlalchemy.orm.undefer_group
    "sqlalchemy.orm.undefer_group")与[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")或[`subqueryload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.subqueryload
    "sqlalchemy.orm.subqueryload")的查询会引发`AttributeError`。感谢 Matthew Martin 提交的拉取请求。
- en: 'References: [#9870](https://www.sqlalchemy.org/trac/ticket/9870)'
  id: totrans-3349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9870](https://www.sqlalchemy.org/trac/ticket/9870)
- en: '**[orm] [bug]**'
  id: totrans-3350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in ORM Annotated Declarative which prevented a [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") from being used on a mixin which did not return
    a [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    datatype, and instead returned a supplemental ORM datatype such as [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy"). The Declarative runtime would
    erroneously try to interpret this annotation as needing to be [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") and raise an error.
  id: totrans-3351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 注释声明中的问题，该问题导致无法在未返回[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")数据类型的混合使用[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")，而是返回了诸如[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")等补充的 ORM 数据类型。声明式运行时错误地尝试将此注释解释为需要[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")并引发错误。
- en: 'References: [#9957](https://www.sqlalchemy.org/trac/ticket/9957)'
  id: totrans-3352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9957](https://www.sqlalchemy.org/trac/ticket/9957)
- en: '**[orm] [bug] [typing]**'
  id: totrans-3353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [typing]**'
- en: Fixed typing issue where using the [`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy") return type from a [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") function was disallowed.
  id: totrans-3354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")函数中的[`AssociationProxy`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.AssociationProxy
    "sqlalchemy.ext.associationproxy.AssociationProxy")返回类型被禁止的类型问题。
- en: 'References: [#9957](https://www.sqlalchemy.org/trac/ticket/9957)'
  id: totrans-3355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9957](https://www.sqlalchemy.org/trac/ticket/9957)
- en: '**[orm] [bug] [regression]**'
  id: totrans-3356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression introduced in 2.0.16 by [#9879](https://www.sqlalchemy.org/trac/ticket/9879)
    where passing a callable to the [`mapped_column.default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column") parameter of [`mapped_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") while also setting `init=False` would interpret
    this value as a Dataclass default value which would be assigned directly to new
    instances of the object directly, bypassing the default generator taking place
    as the [`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") value generator on the underlying [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"). This condition is now detected so that the previous
    behavior is maintained, however a deprecation warning for this ambiguous use is
    emitted; to populate the default generator for a [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), the [`mapped_column.insert_default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.insert_default
    "sqlalchemy.orm.mapped_column") parameter should be used, which disambiguates
    from the [`mapped_column.default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column") parameter whose name is fixed as per pep-681.
  id: totrans-3357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 2.0.16 中由 [#9879](https://www.sqlalchemy.org/trac/ticket/9879) 引入的回归问题，当将可调用对象传递给
    [`mapped_column.default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column") 参数时，同时设置 `init=False` 会将此值解释为 Dataclass 的默认值，该值将直接分配给对象的新实例，绕过了基础
    [`Column.default`](../core/metadata.html#sqlalchemy.schema.Column.params.default
    "sqlalchemy.schema.Column") 值生成器在 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 上发生的默认生成器。现在检测到这种情况以保持先前的行为，但是对于这种模棱两可的使用会发出弃用警告；要为
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    填充默认生成器，应使用 [`mapped_column.insert_default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.insert_default
    "sqlalchemy.orm.mapped_column") 参数，该参数与 [`mapped_column.default`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.default
    "sqlalchemy.orm.mapped_column") 参数相区分，其名称固定为 pep-681。
- en: 'References: [#9936](https://www.sqlalchemy.org/trac/ticket/9936)'
  id: totrans-3358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9936](https://www.sqlalchemy.org/trac/ticket/9936)
- en: '**[orm] [bug]**'
  id: totrans-3359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Additional hardening and documentation for the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") “state change” system, which detects concurrent use
    of [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    and [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") objects; an additional check is added within
    the process to acquire connections from the underlying engine, which is a critical
    section with regards to internal connection management.
  id: totrans-3360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    的“状态更改”系统进行了额外的加固和文档编制，该系统检测到同时使用 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 和 [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") 对象；在获取来自底层引擎的连接过程中添加了额外的检查，这是关于内部连接管理的关键部分。
- en: 'References: [#9973](https://www.sqlalchemy.org/trac/ticket/9973)'
  id: totrans-3361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9973](https://www.sqlalchemy.org/trac/ticket/9973)
- en: '**[orm] [bug]**'
  id: totrans-3362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in ORM loader strategy logic which further allows for long chains
    of [`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") loader options across complex inheriting polymorphic
    / aliased / of_type() relationship chains to take proper effect in queries.
  id: totrans-3363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 加载程序策略逻辑中的问题，进一步允许在复杂的继承多态/别名/ of_type() 关系链上跨长链的 [`contains_eager()`](../orm/queryguide/relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") 加载选项，以在查询中产生正确的效果。
- en: 'References: [#10006](https://www.sqlalchemy.org/trac/ticket/10006)'
  id: totrans-3364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#10006](https://www.sqlalchemy.org/trac/ticket/10006)
- en: '**[orm] [bug]**'
  id: totrans-3365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in support for the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") datatype in the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") first added as part of [#8859](https://www.sqlalchemy.org/trac/ticket/8859)
    where using a custom [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    with fixed configuration in the map would fail to transfer the [`Enum.name`](../core/type_basics.html#sqlalchemy.types.Enum.params.name
    "sqlalchemy.types.Enum") parameter, which among other issues would prevent PostgreSQL
    enums from working if the enum values were passed as individual values. Logic
    has been updated so that “name” is transferred over, but also that the default
    [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    which is against the plain Python enum.Enum class or other “empty” enum won’t
    set a hardcoded name of `"enum"` either.
  id: totrans-3366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") 中首次添加的 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 数据类型支持中出现的问题，该问题涉及使用映射中的固定配置的自定义 [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") 时会失败传输 [`Enum.name`](../core/type_basics.html#sqlalchemy.types.Enum.params.name
    "sqlalchemy.types.Enum") 参数，其中，如果将枚举值作为单独的值传递，则会导致阻止PostgreSQL枚举起作用的问题。逻辑已更新，使“name”被传递，但同时也确保了默认
    [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")
    不会设置硬编码的名称为`"enum"`。
- en: 'References: [#9963](https://www.sqlalchemy.org/trac/ticket/9963)'
  id: totrans-3367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9963](https://www.sqlalchemy.org/trac/ticket/9963)
- en: orm declarative
  id: totrans-3368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM声明
- en: '**[orm] [declarative] [bug]**'
  id: totrans-3369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [声明] [错误]**'
- en: A warning is emitted when an ORM [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") and other [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects are assigned to two different class attributes
    at once; only one of the attributes will be mapped. A warning for this condition
    was already in place for [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") and [`mapped_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") objects.
  id: totrans-3370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当ORM [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 和其他 [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") 对象同时分配给两个不同的类属性时，会发出警告；只有其中一个属性会被映射。对于这种情况的警告已经存在于
    [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    和 [`mapped_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    对象中。
- en: 'References: [#3532](https://www.sqlalchemy.org/trac/ticket/3532)'
  id: totrans-3371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#3532](https://www.sqlalchemy.org/trac/ticket/3532)
- en: extensions
  id: totrans-3372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions] [bug]**'
  id: totrans-3373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展] [错误]**'
- en: Fixed issue in mypy plugin for use with mypy 1.4.
  id: totrans-3374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与mypy 1.4一起使用时的mypy插件中的问题。
- en: 'This change is also **backported** to: 1.4.49'
  id: totrans-3375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.49
- en: typing
  id: totrans-3376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打字
- en: '**[typing] [bug]**'
  id: totrans-3377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[打字] [错误]**'
- en: Fixed typing issue which prevented [`WriteOnlyMapped`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped") and [`DynamicMapped`](../orm/large_collections.html#sqlalchemy.orm.DynamicMapped
    "sqlalchemy.orm.DynamicMapped") attributes from being used fully within ORM queries.
  id: totrans-3378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个打字错误问题，该问题导致[`WriteOnlyMapped`](../orm/large_collections.html#sqlalchemy.orm.WriteOnlyMapped
    "sqlalchemy.orm.WriteOnlyMapped")和[`DynamicMapped`](../orm/large_collections.html#sqlalchemy.orm.DynamicMapped
    "sqlalchemy.orm.DynamicMapped")属性在ORM查询中无法完全使用。
- en: 'References: [#9985](https://www.sqlalchemy.org/trac/ticket/9985)'
  id: totrans-3379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9985](https://www.sqlalchemy.org/trac/ticket/9985)
- en: postgresql
  id: totrans-3380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-3381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: The pg8000 dialect now supports RANGE and MULTIRANGE datatypes, using the existing
    RANGE API described at [Range and Multirange Types](../dialects/postgresql.html#postgresql-ranges).
    Range and multirange types are supported in the pg8000 driver from version 1.29.8.
    Pull request courtesy Tony Locke.
  id: totrans-3382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pg8000方言现在支持RANGE和MULTIRANGE数据类型，使用现有的[RANGE和Multirange类型](../dialects/postgresql.html#postgresql-ranges)中描述的RANGE
    API。Range和multirange类型在pg8000驱动程序的版本1.29.8中受支持。感谢Tony Locke提供的拉取请求。
- en: 'References: [#9965](https://www.sqlalchemy.org/trac/ticket/9965)'
  id: totrans-3383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9965](https://www.sqlalchemy.org/trac/ticket/9965)
- en: 2.0.16
  id: totrans-3384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.16
- en: 'Released: June 10, 2023'
  id: totrans-3385
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年6月10日
- en: platform
  id: totrans-3386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 平台
- en: '**[platform] [usecase]**'
  id: totrans-3387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[平台] [用例]**'
- en: Compatibility improvements allowing the complete test suite to pass on Python
    3.12.0b1.
  id: totrans-3388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 兼容性改进，允许完整测试套件在Python 3.12.0b1上通过。
- en: orm
  id: totrans-3389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [usecase]**'
  id: totrans-3390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Improved [`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare") to accept arbitrary `**kw`
    arguments that are passed to [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect"), allowing use cases such as reflection of
    views as well as dialect-specific arguments to be passed. Additionally, modernized
    the [`DeferredReflection.prepare.bind`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare.params.bind
    "sqlalchemy.ext.declarative.DeferredReflection.prepare") argument so that either
    an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    are accepted as the “bind” argument.
  id: totrans-3391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进 [`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare")，接受任意的 `**kw` 参数，这些参数将传递给
    [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")，允许用例，例如反射视图以及传递特定于方言的参数。此外，现代化了 [`DeferredReflection.prepare.bind`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare.params.bind
    "sqlalchemy.ext.declarative.DeferredReflection.prepare") 参数，使得一个 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 或 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 都可作为“bind”参数。
- en: 'References: [#9828](https://www.sqlalchemy.org/trac/ticket/9828)'
  id: totrans-3392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9828](https://www.sqlalchemy.org/trac/ticket/9828)
- en: '**[orm] [bug]**'
  id: totrans-3393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where [`DeclarativeBaseNoMeta`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBaseNoMeta
    "sqlalchemy.orm.DeclarativeBaseNoMeta") declarative base class would not function
    with non-mapped mixins or abstract classes, raising an `AttributeError` instead.
  id: totrans-3394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`DeclarativeBaseNoMeta`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBaseNoMeta
    "sqlalchemy.orm.DeclarativeBaseNoMeta")声明基类无法与非映射的混入或抽象类一起使用的问题，而是引发 `AttributeError`。
- en: 'References: [#9862](https://www.sqlalchemy.org/trac/ticket/9862)'
  id: totrans-3395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9862](https://www.sqlalchemy.org/trac/ticket/9862)
- en: '**[orm] [bug] [regression]**'
  id: totrans-3396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression in the 2.0 series where the default value of [`validates.include_backrefs`](../orm/mapped_attributes.html#sqlalchemy.orm.validates.params.include_backrefs
    "sqlalchemy.orm.validates") got changed to `False` for the [`validates()`](../orm/mapped_attributes.html#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates") function. This default is now restored to `True`.
  id: totrans-3397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 2.0 系列中的回归问题，其中 [`validates.include_backrefs`](../orm/mapped_attributes.html#sqlalchemy.orm.validates.params.include_backrefs
    "sqlalchemy.orm.validates") 的默认值在 [`validates()`](../orm/mapped_attributes.html#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates") 函数中更改为 `False`。现在将此默认值恢复为 `True`。
- en: 'References: [#9820](https://www.sqlalchemy.org/trac/ticket/9820)'
  id: totrans-3398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9820](https://www.sqlalchemy.org/trac/ticket/9820)
- en: '**[orm] [bug]**'
  id: totrans-3399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new feature which allows a WHERE clause to be used in conjunction
    with [ORM Bulk UPDATE by Primary Key](../orm/queryguide/dml.html#orm-queryguide-bulk-update),
    added in version 2.0.11 as part of [#9583](https://www.sqlalchemy.org/trac/ticket/9583),
    where sending dictionaries that did not include the primary key values for each
    row would run through the bulk process and include “pk=NULL” for the rows, silently
    failing. An exception is now raised if primary key values for bulk UPDATE are
    not supplied.
  id: totrans-3400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个新功能中的错误，该功能允许在 [ORM 通过主键进行批量更新](../orm/queryguide/dml.html#orm-queryguide-bulk-update)
    时与 WHERE 子句一起使用，该功能是在版本 2.0.11 中作为 [#9583](https://www.sqlalchemy.org/trac/ticket/9583)
    的一部分添加的，如果发送的字典不包括每行的主键值，则会通过批量处理过程并为行包含“pk=NULL”，这将导致静默失败。如果未提供批量更新的主键值，则现在会引发异常。
- en: 'References: [#9917](https://www.sqlalchemy.org/trac/ticket/9917)'
  id: totrans-3401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9917](https://www.sqlalchemy.org/trac/ticket/9917)
- en: '**[orm] [bug] [dataclasses]**'
  id: totrans-3402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [dataclasses]**'
- en: Fixed an issue where generating dataclasses fields that specified a `default`
    value and set `init=False` would not work. The dataclasses behavior in this case
    is to set the default value on the class, that’s not compatible with the descriptors
    used by SQLAlchemy. To support this case the default is transformed to a `default_factory`
    when generating the dataclass.
  id: totrans-3403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即生成指定了 `default` 值并设置 `init=False` 的数据类字段不起作用。在这种情况下，数据类的行为是在类上设置默认值，这与
    SQLAlchemy 使用的描述符不兼容。为了支持这种情况，生成数据类时将默认值转换为 `default_factory`。
- en: 'References: [#9879](https://www.sqlalchemy.org/trac/ticket/9879)'
  id: totrans-3404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9879](https://www.sqlalchemy.org/trac/ticket/9879)
- en: '**[orm] [bug]**'
  id: totrans-3405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A deprecation warning is emitted whenever a property is added to a [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") where an ORM mapped property were already configured,
    or an attribute is already present on the class. Previously, there was a non-deprecation
    warning for this case that did not emit consistently. The logic for this warning
    has been improved so that it detects end-user replacement of attribute while not
    having false positives for internal Declarative and other cases where replacement
    of descriptors with new ones is expected.
  id: totrans-3406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每当在 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    上添加属性时，如果已经配置了 ORM 映射属性，或者类上已经存在属性，则会发出弃用警告。以前，对于这种情况有一个不一致地发出的非弃用警告。对于这个警告的逻辑已经改进，以便检测到终端用户替换属性，同时不会误报内部声明式和其他情况，其中替换描述符为新描述符是预期的。
- en: 'References: [#9841](https://www.sqlalchemy.org/trac/ticket/9841)'
  id: totrans-3407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9841](https://www.sqlalchemy.org/trac/ticket/9841)
- en: '**[orm] [bug]**'
  id: totrans-3408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the argument chacking on the [`map_imperatively.local_table`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.local_table
    "sqlalchemy.orm.registry.map_imperatively") parameter of the [`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method, ensuring only a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") is passed, and not an existing mapped
    class, which would lead to undefined behavior as the object were further interpreted
    for a new mapping.
  id: totrans-3409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 [`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") 方法的 [`map_imperatively.local_table`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.local_table
    "sqlalchemy.orm.registry.map_imperatively") 参数上的参数检查，确保仅传递 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或其他 [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") ，而不是现有的映射类，这会导致未定义的行为，因为对象将进一步解释为新的映射。
- en: 'References: [#9869](https://www.sqlalchemy.org/trac/ticket/9869)'
  id: totrans-3410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9869](https://www.sqlalchemy.org/trac/ticket/9869)
- en: '**[orm] [bug]**'
  id: totrans-3411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The [`InstanceState.unloaded_expirable`](../orm/internals.html#sqlalchemy.orm.InstanceState.unloaded_expirable
    "sqlalchemy.orm.InstanceState.unloaded_expirable") attribute is a synonym for
    [`InstanceState.unloaded`](../orm/internals.html#sqlalchemy.orm.InstanceState.unloaded
    "sqlalchemy.orm.InstanceState.unloaded"), and is now deprecated; this attribute
    was always implementation-specific and should not have been public.
  id: totrans-3412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`InstanceState.unloaded_expirable`](../orm/internals.html#sqlalchemy.orm.InstanceState.unloaded_expirable
    "sqlalchemy.orm.InstanceState.unloaded_expirable") 属性是 [`InstanceState.unloaded`](../orm/internals.html#sqlalchemy.orm.InstanceState.unloaded
    "sqlalchemy.orm.InstanceState.unloaded") 的同义词，现已弃用；此属性始终是特定于实现的，并且不应该是公共的。'
- en: 'References: [#9913](https://www.sqlalchemy.org/trac/ticket/9913)'
  id: totrans-3413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9913](https://www.sqlalchemy.org/trac/ticket/9913)
- en: asyncio
  id: totrans-3414
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [usecase]**'
  id: totrans-3415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [usecase]**'
- en: Added new [`create_async_engine.async_creator`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine.params.async_creator
    "sqlalchemy.ext.asyncio.create_async_engine") parameter to [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"), which accomplishes the same purpose
    as the [`create_engine.creator`](../core/engines.html#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine") parameter of [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"). This is a no-argument callable that provides a new
    asyncio connection, using the asyncio database driver directly. The [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") function will wrap the driver-level
    connection in the appropriate structures. Pull request courtesy of Jack Wotherspoon.
  id: totrans-3416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") 中添加了新的 [`create_async_engine.async_creator`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine.params.async_creator
    "sqlalchemy.ext.asyncio.create_async_engine") 参数，其作用与 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 的 [`create_engine.creator`](../core/engines.html#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine") 参数相同。这是一个无参数可调用对象，使用 asyncio 数据库驱动程序直接提供新的 asyncio
    连接。[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") 函数将在适当的结构中包装驱动程序级连接。拉取请求由杰克·沃瑟斯普恩提供。
- en: 'References: [#8215](https://www.sqlalchemy.org/trac/ticket/8215)'
  id: totrans-3417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8215](https://www.sqlalchemy.org/trac/ticket/8215)
- en: postgresql
  id: totrans-3418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase] [reflection]**'
  id: totrans-3419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase] [reflection]**'
- en: Cast `NAME` columns to `TEXT` when using `ARRAY_AGG` in PostgreSQL reflection.
    This seems to improve compatibility with some PostgreSQL derivatives that may
    not support aggregations on the `NAME` type.
  id: totrans-3420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 反射中，将 `NAME` 列转换为 `TEXT` 当使用 `ARRAY_AGG` 时。这似乎提高了与一些不支持 `NAME`
    类型聚合的 PostgreSQL 派生产品的兼容性。
- en: 'References: [#9838](https://www.sqlalchemy.org/trac/ticket/9838)'
  id: totrans-3421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9838](https://www.sqlalchemy.org/trac/ticket/9838)
- en: '**[postgresql] [usecase]**'
  id: totrans-3422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Unified the custom PostgreSQL operator definitions, since they are shared among
    multiple different data types.
  id: totrans-3423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 统一了自定义的 PostgreSQL 运算符定义，因为它们在多个不同的数据类型之间共享。
- en: 'References: [#9041](https://www.sqlalchemy.org/trac/ticket/9041)'
  id: totrans-3424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9041](https://www.sqlalchemy.org/trac/ticket/9041)
- en: '**[postgresql] [usecase]**'
  id: totrans-3425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added support for PostgreSQL 10 `NULLS NOT DISTINCT` feature of unique indexes
    and unique constraint using the dialect option `postgresql_nulls_not_distinct`.
    Updated the reflection logic to also correctly take this option into account.
    Pull request courtesy of Pavel Siarchenia.
  id: totrans-3426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 PostgreSQL 10 `NULLS NOT DISTINCT` 特性的支持，使用方言选项 `postgresql_nulls_not_distinct`。更新了反射逻辑，以正确考虑此选项。感谢
    Pavel Siarchenia 的拉取请求。
- en: 'References: [#8240](https://www.sqlalchemy.org/trac/ticket/8240)'
  id: totrans-3427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8240](https://www.sqlalchemy.org/trac/ticket/8240)
- en: '**[postgresql] [bug]**'
  id: totrans-3428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Use proper precedence on PostgreSQL specific operators, such as `@>`. Previously
    the precedence was wrong, leading to wrong parenthesis when rendering against
    and `ANY` or `ALL` construct.
  id: totrans-3429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 特定运算符上使用正确的优先级，比如 `@>`。之前的优先级错误，导致在与 `ANY` 或 `ALL` 结构渲染时括号错误。
- en: 'References: [#9836](https://www.sqlalchemy.org/trac/ticket/9836)'
  id: totrans-3430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9836](https://www.sqlalchemy.org/trac/ticket/9836)
- en: '**[postgresql] [bug]**'
  id: totrans-3431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the [`ColumnOperators.like.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.like") and similar parameters did not
    allow an empty string as an argument that would be passed through as the “escape”
    character; this is a supported syntax by PostgreSQL. Pull requset courtesy Martin
    Caslavsky.
  id: totrans-3432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`ColumnOperators.like.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.like") 和类似参数不允许空字符串作为传递的“转义”字符的问题；这是
    PostgreSQL 支持的语法。感谢 Martin Caslavsky 的拉取请求。
- en: 'References: [#9907](https://www.sqlalchemy.org/trac/ticket/9907)'
  id: totrans-3433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9907](https://www.sqlalchemy.org/trac/ticket/9907)
- en: platform
  id: totrans-3434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: platform
- en: '**[platform] [usecase]**'
  id: totrans-3435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[platform] [usecase]**'
- en: Compatibility improvements allowing the complete test suite to pass on Python
    3.12.0b1.
  id: totrans-3436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 兼容性改进，使完整的测试套件能够在 Python 3.12.0b1 上通过。
- en: orm
  id: totrans-3437
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-3438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Improved [`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare") to accept arbitrary `**kw`
    arguments that are passed to [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect"), allowing use cases such as reflection of
    views as well as dialect-specific arguments to be passed. Additionally, modernized
    the [`DeferredReflection.prepare.bind`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare.params.bind
    "sqlalchemy.ext.declarative.DeferredReflection.prepare") argument so that either
    an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    are accepted as the “bind” argument.
  id: totrans-3439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 [`DeferredReflection.prepare()`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare
    "sqlalchemy.ext.declarative.DeferredReflection.prepare")，接受传递给 [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 的任意 `**kw` 参数，允许用例如反射视图以及传递方言特定参数。此外，现代化了
    [`DeferredReflection.prepare.bind`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.DeferredReflection.prepare.params.bind
    "sqlalchemy.ext.declarative.DeferredReflection.prepare") 参数，以便接受 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 或 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 作为“bind”参数。
- en: 'References: [#9828](https://www.sqlalchemy.org/trac/ticket/9828)'
  id: totrans-3440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9828](https://www.sqlalchemy.org/trac/ticket/9828)
- en: '**[orm] [bug]**'
  id: totrans-3441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where [`DeclarativeBaseNoMeta`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBaseNoMeta
    "sqlalchemy.orm.DeclarativeBaseNoMeta") declarative base class would not function
    with non-mapped mixins or abstract classes, raising an `AttributeError` instead.
  id: totrans-3442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`DeclarativeBaseNoMeta`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBaseNoMeta
    "sqlalchemy.orm.DeclarativeBaseNoMeta") 声明基类无法与非映射混入类或抽象类一起使用的问题，而是引发 `AttributeError`。
- en: 'References: [#9862](https://www.sqlalchemy.org/trac/ticket/9862)'
  id: totrans-3443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9862](https://www.sqlalchemy.org/trac/ticket/9862)
- en: '**[orm] [bug] [regression]**'
  id: totrans-3444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression in the 2.0 series where the default value of [`validates.include_backrefs`](../orm/mapped_attributes.html#sqlalchemy.orm.validates.params.include_backrefs
    "sqlalchemy.orm.validates") got changed to `False` for the [`validates()`](../orm/mapped_attributes.html#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates") function. This default is now restored to `True`.
  id: totrans-3445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 2.0 系列中的回归问题，其中 [`validates.include_backrefs`](../orm/mapped_attributes.html#sqlalchemy.orm.validates.params.include_backrefs
    "sqlalchemy.orm.validates") 的默认值在 [`validates()`](../orm/mapped_attributes.html#sqlalchemy.orm.validates
    "sqlalchemy.orm.validates") 函数中被更改为 `False`。现在将此默认值恢复为 `True`。
- en: 'References: [#9820](https://www.sqlalchemy.org/trac/ticket/9820)'
  id: totrans-3446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9820](https://www.sqlalchemy.org/trac/ticket/9820)
- en: '**[orm] [bug]**'
  id: totrans-3447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in new feature which allows a WHERE clause to be used in conjunction
    with [ORM Bulk UPDATE by Primary Key](../orm/queryguide/dml.html#orm-queryguide-bulk-update),
    added in version 2.0.11 as part of [#9583](https://www.sqlalchemy.org/trac/ticket/9583),
    where sending dictionaries that did not include the primary key values for each
    row would run through the bulk process and include “pk=NULL” for the rows, silently
    failing. An exception is now raised if primary key values for bulk UPDATE are
    not supplied.
  id: totrans-3448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新功能中的 bug，该功能允许在 [ORM 按主键批量更新](../orm/queryguide/dml.html#orm-queryguide-bulk-update)
    中使用 WHERE 子句，该功能在版本 2.0.11 中作为 [#9583](https://www.sqlalchemy.org/trac/ticket/9583)
    的一部分添加，其中发送的字典未包含每行的主键值时，将通过批量处理并为行包括“pk=NULL”，默默失败。如果未提供批量更新的主键值，则现在会引发异常。
- en: 'References: [#9917](https://www.sqlalchemy.org/trac/ticket/9917)'
  id: totrans-3449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9917](https://www.sqlalchemy.org/trac/ticket/9917)
- en: '**[orm] [bug] [dataclasses]**'
  id: totrans-3450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [dataclasses]**'
- en: Fixed an issue where generating dataclasses fields that specified a `default`
    value and set `init=False` would not work. The dataclasses behavior in this case
    is to set the default value on the class, that’s not compatible with the descriptors
    used by SQLAlchemy. To support this case the default is transformed to a `default_factory`
    when generating the dataclass.
  id: totrans-3451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了生成指定 `default` 值并设置 `init=False` 的 dataclasses 字段不起作用的问题。在这种情况下，dataclasses
    的行为是在类上设置默认值，这与 SQLAlchemy 使用的描述符不兼容。为了支持这种情况，在生成 dataclass 时将默认值转换为 `default_factory`。
- en: 'References: [#9879](https://www.sqlalchemy.org/trac/ticket/9879)'
  id: totrans-3452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9879](https://www.sqlalchemy.org/trac/ticket/9879)
- en: '**[orm] [bug]**'
  id: totrans-3453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A deprecation warning is emitted whenever a property is added to a [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") where an ORM mapped property were already configured,
    or an attribute is already present on the class. Previously, there was a non-deprecation
    warning for this case that did not emit consistently. The logic for this warning
    has been improved so that it detects end-user replacement of attribute while not
    having false positives for internal Declarative and other cases where replacement
    of descriptors with new ones is expected.
  id: totrans-3454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当向 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    添加属性时，如果已经配置了 ORM 映射属性，或者类上已经存在属性，则会发出弃用警告。以前，对于这种情况，存在一个不一致发出的非弃用警告。现在已经改进了此警告的逻辑，以便在检测到用户替换属性时发出警告，同时不会对内部
    Declarative 和其他情况产生误报，其中预期使用新描述符替换旧描述符。
- en: 'References: [#9841](https://www.sqlalchemy.org/trac/ticket/9841)'
  id: totrans-3455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9841](https://www.sqlalchemy.org/trac/ticket/9841)
- en: '**[orm] [bug]**'
  id: totrans-3456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the argument chacking on the [`map_imperatively.local_table`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.local_table
    "sqlalchemy.orm.registry.map_imperatively") parameter of the [`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method, ensuring only a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") is passed, and not an existing mapped
    class, which would lead to undefined behavior as the object were further interpreted
    for a new mapping.
  id: totrans-3457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 [`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") 方法的 [`map_imperatively.local_table`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively.params.local_table
    "sqlalchemy.orm.registry.map_imperatively") 参数的参数检查，确保只传递了 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或其他 [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")，而不是已存在的映射类，因为这将导致对象在进一步解释时出现未定义的行为。
- en: 'References: [#9869](https://www.sqlalchemy.org/trac/ticket/9869)'
  id: totrans-3458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9869](https://www.sqlalchemy.org/trac/ticket/9869)
- en: '**[orm] [bug]**'
  id: totrans-3459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: The [`InstanceState.unloaded_expirable`](../orm/internals.html#sqlalchemy.orm.InstanceState.unloaded_expirable
    "sqlalchemy.orm.InstanceState.unloaded_expirable") attribute is a synonym for
    [`InstanceState.unloaded`](../orm/internals.html#sqlalchemy.orm.InstanceState.unloaded
    "sqlalchemy.orm.InstanceState.unloaded"), and is now deprecated; this attribute
    was always implementation-specific and should not have been public.
  id: totrans-3460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`InstanceState.unloaded_expirable`](../orm/internals.html#sqlalchemy.orm.InstanceState.unloaded_expirable
    "sqlalchemy.orm.InstanceState.unloaded_expirable") 属性是 [`InstanceState.unloaded`](../orm/internals.html#sqlalchemy.orm.InstanceState.unloaded
    "sqlalchemy.orm.InstanceState.unloaded") 的同义词，并已弃用；此属性始终是特定于实现的，不应公开。 '
- en: 'References: [#9913](https://www.sqlalchemy.org/trac/ticket/9913)'
  id: totrans-3461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9913](https://www.sqlalchemy.org/trac/ticket/9913)
- en: asyncio
  id: totrans-3462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [usecase]**'
  id: totrans-3463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [用例]**'
- en: Added new [`create_async_engine.async_creator`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine.params.async_creator
    "sqlalchemy.ext.asyncio.create_async_engine") parameter to [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine"), which accomplishes the same purpose
    as the [`create_engine.creator`](../core/engines.html#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine") parameter of [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"). This is a no-argument callable that provides a new
    asyncio connection, using the asyncio database driver directly. The [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") function will wrap the driver-level
    connection in the appropriate structures. Pull request courtesy of Jack Wotherspoon.
  id: totrans-3464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") 添加了新的 [`create_async_engine.async_creator`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine.params.async_creator
    "sqlalchemy.ext.asyncio.create_async_engine") 参数，它实现了与 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 的 [`create_engine.creator`](../core/engines.html#sqlalchemy.create_engine.params.creator
    "sqlalchemy.create_engine") 参数相同的目的。这是一个无参数的可调用对象，提供一个新的 asyncio 连接，直接使用 asyncio
    数据库驱动程序。[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") 函数将以适当的结构包装驱动程序级别的连接。感谢 Jack Wotherspoon
    提交的拉取请求。
- en: 'References: [#8215](https://www.sqlalchemy.org/trac/ticket/8215)'
  id: totrans-3465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8215](https://www.sqlalchemy.org/trac/ticket/8215)
- en: postgresql
  id: totrans-3466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase] [reflection]**'
  id: totrans-3467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例] [反射]**'
- en: Cast `NAME` columns to `TEXT` when using `ARRAY_AGG` in PostgreSQL reflection.
    This seems to improve compatibility with some PostgreSQL derivatives that may
    not support aggregations on the `NAME` type.
  id: totrans-3468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 PostgreSQL 反射时，将 `NAME` 列转换为 `TEXT`。这似乎提高了与一些 PostgreSQL 派生产品的兼容性，这些产品可能不支持在
    `NAME` 类型上进行聚合。
- en: 'References: [#9838](https://www.sqlalchemy.org/trac/ticket/9838)'
  id: totrans-3469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9838](https://www.sqlalchemy.org/trac/ticket/9838)
- en: '**[postgresql] [usecase]**'
  id: totrans-3470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Unified the custom PostgreSQL operator definitions, since they are shared among
    multiple different data types.
  id: totrans-3471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 统一了自定义 PostgreSQL 操作符的定义，因为它们在多个不同的数据类型之间共享。
- en: 'References: [#9041](https://www.sqlalchemy.org/trac/ticket/9041)'
  id: totrans-3472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9041](https://www.sqlalchemy.org/trac/ticket/9041)
- en: '**[postgresql] [usecase]**'
  id: totrans-3473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Added support for PostgreSQL 10 `NULLS NOT DISTINCT` feature of unique indexes
    and unique constraint using the dialect option `postgresql_nulls_not_distinct`.
    Updated the reflection logic to also correctly take this option into account.
    Pull request courtesy of Pavel Siarchenia.
  id: totrans-3474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 PostgreSQL 10 `NULLS NOT DISTINCT` 特性的支持，该特性使用方言选项 `postgresql_nulls_not_distinct`。
    更新了反射逻辑以正确考虑此选项。 Pavel Siarchenia 的 Pull request 提供支持。
- en: 'References: [#8240](https://www.sqlalchemy.org/trac/ticket/8240)'
  id: totrans-3475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8240](https://www.sqlalchemy.org/trac/ticket/8240)
- en: '**[postgresql] [bug]**'
  id: totrans-3476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Use proper precedence on PostgreSQL specific operators, such as `@>`. Previously
    the precedence was wrong, leading to wrong parenthesis when rendering against
    and `ANY` or `ALL` construct.
  id: totrans-3477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 特定运算符上使用正确的优先级，例如 `@>`。 之前优先级错误，导致在与 `ANY` 或 `ALL` 结构进行渲染时出现错误的括号。
- en: 'References: [#9836](https://www.sqlalchemy.org/trac/ticket/9836)'
  id: totrans-3478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9836](https://www.sqlalchemy.org/trac/ticket/9836)
- en: '**[postgresql] [bug]**'
  id: totrans-3479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the [`ColumnOperators.like.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.like") and similar parameters did not
    allow an empty string as an argument that would be passed through as the “escape”
    character; this is a supported syntax by PostgreSQL. Pull requset courtesy Martin
    Caslavsky.
  id: totrans-3480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，[`ColumnOperators.like.escape`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.like.params.escape
    "sqlalchemy.sql.expression.ColumnOperators.like")和类似参数不允许空字符串作为参数，该参数将作为“转义”字符传递；这是
    PostgreSQL 支持的语法。 感谢 Martin Caslavsky 的 Pull requset。
- en: 'References: [#9907](https://www.sqlalchemy.org/trac/ticket/9907)'
  id: totrans-3481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9907](https://www.sqlalchemy.org/trac/ticket/9907)
- en: 2.0.15
  id: totrans-3482
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.15
- en: 'Released: May 19, 2023'
  id: totrans-3483
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年5月19日
- en: orm
  id: totrans-3484
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: As more projects are using new-style “2.0” ORM querying, it’s becoming apparent
    that the conditional nature of “autoflush”, being based on whether or not the
    given statement refers to ORM entities, is becoming more of a key behavior. Up
    until now, the “ORM” flag for a statement has been loosely based around whether
    or not the statement returns rows that correspond to ORM entities or columns;
    the original purpose of the “ORM” flag was to enable ORM-entity fetching rules
    which apply post-processing to Core result sets as well as ORM loader strategies
    to the statement. For statements that don’t build on rows that contain ORM entities,
    the “ORM” flag was considered to be mostly unnecessary.
  id: totrans-3486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 随着越来越多的项目开始使用新型“2.0” ORM 查询，显然“自动刷新”的条件性质，基于给定语句是否涉及 ORM 实体，正在变得更加关键。直到现在，“ORM”标志对于语句是否返回与
    ORM 实体或列对应的行一直是松散的；“ORM”标志的原始目的是启用 ORM 实体获取规则，该规则将后处理应用于核心结果集以及将 ORM 加载器策略应用于语句。
    对于不建立在包含 ORM 实体的行上的语句，认为“ORM”标志基本上是不必要的。
- en: It still may be the case that “autoflush” would be better taking effect for
    *all* usage of [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") and related methods, even for purely Core SQL
    constructs. However, this still could impact legacy cases where this is not expected
    and may be more of a 2.1 thing. For now however, the rules for the “ORM-flag”
    have been opened up so that a statement that includes ORM entities or attributes
    anywhere within, including in the WHERE / ORDER BY / GROUP BY clause alone, within
    scalar subqueries, etc. will enable this flag. This will cause “autoflush” to
    occur for such statements and also be visible via the [`ORMExecuteState.is_orm_statement`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_orm_statement
    "sqlalchemy.orm.ORMExecuteState.is_orm_statement") event-level attribute.
  id: totrans-3487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仍然可能是“自动刷新”对于 *所有* 使用 [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 和相关方法更好，即使对于纯粹的 Core SQL 构造也是如此。 但是，这可能仍然会影响不期望的遗留情况，并且可能更多地成为
    2.1 版本的事情。 然而，目前“ORM标志”的规则已经放宽，因此任何语句，包括在 WHERE / ORDER BY / GROUP BY 子句中的 ORM
    实体或属性，在标量子查询中等都将启用此标志。 这将导致对这些语句进行“自动刷新”，并且还可以通过 [`ORMExecuteState.is_orm_statement`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_orm_statement
    "sqlalchemy.orm.ORMExecuteState.is_orm_statement") 事件级属性可见。
- en: 'References: [#9805](https://www.sqlalchemy.org/trac/ticket/9805)'
  id: totrans-3488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9805](https://www.sqlalchemy.org/trac/ticket/9805)
- en: postgresql
  id: totrans-3489
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-3490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [regression]**'
- en: Repaired the base [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")
    datatype for the PostgreSQL dialect to make full use of the PG-specific `UUID`
    dialect-specific datatype when “native_uuid” is selected, so that PG driver behaviors
    are included. This issue became apparent due to the insertmanyvalues improvement
    made as part of [#9618](https://www.sqlalchemy.org/trac/ticket/9618), where in
    a similar manner as that of [#9739](https://www.sqlalchemy.org/trac/ticket/9739),
    the asyncpg driver is very sensitive to datatype casts being present or not, and
    the PostgreSQL driver-specific native `UUID` datatype must be invoked when this
    generic type is used so that these casts take place.
  id: totrans-3491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL 方言的基本[`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid")数据类型，以充分利用 PG 特定的 `UUID` 方言特定数据类型，当选择“native_uuid”时，以便包含
    PG 驱动程序的行为。由于作为[#9618](https://www.sqlalchemy.org/trac/ticket/9618)的一部分进行的 insertmanyvalues
    改进，这个问题变得明显，类似于[#9739](https://www.sqlalchemy.org/trac/ticket/9739)，asyncpg 驱动程序对数据类型转换的存在与否非常敏感，当使用这种通用类型时，必须调用
    PostgreSQL 驱动程序特定的本地 `UUID` 数据类型，以便进行这些转换。
- en: 'References: [#9808](https://www.sqlalchemy.org/trac/ticket/9808)'
  id: totrans-3492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9808](https://www.sqlalchemy.org/trac/ticket/9808)
- en: orm
  id: totrans-3493
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: As more projects are using new-style “2.0” ORM querying, it’s becoming apparent
    that the conditional nature of “autoflush”, being based on whether or not the
    given statement refers to ORM entities, is becoming more of a key behavior. Up
    until now, the “ORM” flag for a statement has been loosely based around whether
    or not the statement returns rows that correspond to ORM entities or columns;
    the original purpose of the “ORM” flag was to enable ORM-entity fetching rules
    which apply post-processing to Core result sets as well as ORM loader strategies
    to the statement. For statements that don’t build on rows that contain ORM entities,
    the “ORM” flag was considered to be mostly unnecessary.
  id: totrans-3495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 随着越来越多的项目使用新式“2.0” ORM 查询，显而易见的是，“autoflush”的条件性，基于给定语句是否涉及 ORM 实体，正在变得更加关键。直到现在，对于语句是否返回与
    ORM 实体或列对应的行，一直是围绕“ORM”标志的松散基础；“ORM”标志的最初目的是启用 ORM 实体获取规则，这些规则将后处理应用于 Core 结果集以及
    ORM 加载器策略到语句。对于不建立在包含 ORM 实体的行上的语句，认为“ORM”标志基本上是不必要的。
- en: It still may be the case that “autoflush” would be better taking effect for
    *all* usage of [`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") and related methods, even for purely Core SQL
    constructs. However, this still could impact legacy cases where this is not expected
    and may be more of a 2.1 thing. For now however, the rules for the “ORM-flag”
    have been opened up so that a statement that includes ORM entities or attributes
    anywhere within, including in the WHERE / ORDER BY / GROUP BY clause alone, within
    scalar subqueries, etc. will enable this flag. This will cause “autoflush” to
    occur for such statements and also be visible via the [`ORMExecuteState.is_orm_statement`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_orm_statement
    "sqlalchemy.orm.ORMExecuteState.is_orm_statement") event-level attribute.
  id: totrans-3496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仍然可能是“autoflush”对于*所有*使用[`Session.execute()`](../orm/session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")和相关方法更好，即使是纯粹的 Core SQL 构造。然而，这可能会影响到不期望的遗留情况，可能更多是
    2.1 的事情。但是，目前，“ORM-flag”的规则已经放宽，以便包含 ORM 实体或属性的语句中的任何地方，包括仅在 WHERE / ORDER BY
    / GROUP BY 子句中，在标量子查询中等，将启用此标志。这将导致这些语句发生“autoflush”，并且还可以通过[`ORMExecuteState.is_orm_statement`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_orm_statement
    "sqlalchemy.orm.ORMExecuteState.is_orm_statement")事件级属性可见。
- en: 'References: [#9805](https://www.sqlalchemy.org/trac/ticket/9805)'
  id: totrans-3497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9805](https://www.sqlalchemy.org/trac/ticket/9805)
- en: postgresql
  id: totrans-3498
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-3499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [regression]**'
- en: Repaired the base [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")
    datatype for the PostgreSQL dialect to make full use of the PG-specific `UUID`
    dialect-specific datatype when “native_uuid” is selected, so that PG driver behaviors
    are included. This issue became apparent due to the insertmanyvalues improvement
    made as part of [#9618](https://www.sqlalchemy.org/trac/ticket/9618), where in
    a similar manner as that of [#9739](https://www.sqlalchemy.org/trac/ticket/9739),
    the asyncpg driver is very sensitive to datatype casts being present or not, and
    the PostgreSQL driver-specific native `UUID` datatype must be invoked when this
    generic type is used so that these casts take place.
  id: totrans-3500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了基本的[`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")数据类型，使其在选择“native_uuid”时充分利用了
    PostgreSQL 方言的 PG 特定 `UUID` 方言特定数据类型，以便包含 PG 驱动程序的行为。这个问题由于作为[#9618](https://www.sqlalchemy.org/trac/ticket/9618)的一部分所做的insertmanyvalues改进而变得显而易见，其中与[#9739](https://www.sqlalchemy.org/trac/ticket/9739)类似，asyncpg驱动程序对是否存在数据类型转换非常敏感，当使用此通用类型时，必须调用
    PostgreSQL 驱动程序特定的本地 `UUID` 数据类型，以便进行这些转换。
- en: 'References: [#9808](https://www.sqlalchemy.org/trac/ticket/9808)'
  id: totrans-3501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9808](https://www.sqlalchemy.org/trac/ticket/9808)
- en: 2.0.14
  id: totrans-3502
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.14
- en: 'Released: May 18, 2023'
  id: totrans-3503
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年5月18日
- en: orm
  id: totrans-3504
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Modified the `JoinedLoader` implementation to use a simpler approach in one
    particular area where it previously used a cached structure that would be shared
    among threads. The rationale is to avoid a potential race condition which is suspected
    of being the cause of a particular crash that’s been reported multiple times.
    The cached structure in question is still ultimately “cached” via the compiled
    SQL cache, so a performance degradation is not anticipated.
  id: totrans-3506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了`JoinedLoader`的实现，在一个特定的区域使用了更简单的方法，之前它使用了一个缓存结构，该结构将在线程之间共享。这样做的原因是避免潜在的竞争条件，这被怀疑是导致特定崩溃的原因。所涉及的缓存结构最终仍然通过编译后的
    SQL 缓存“缓存”，因此不预期出现性能下降。
- en: 'References: [#9777](https://www.sqlalchemy.org/trac/ticket/9777)'
  id: totrans-3507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9777](https://www.sqlalchemy.org/trac/ticket/9777)
- en: '**[orm] [bug] [regression]**'
  id: totrans-3508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression where use of [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") or [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") within a [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") construct, then used in a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), would raise a [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") as a result of ORM related rules for performing
    ORM-level update/delete statements.
  id: totrans-3509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造中使用 [`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    或 [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")，然后在
    [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    中使用会引发 [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError "sqlalchemy.exc.CompileError")
    的回归，原因是 ORM 相关规则执行 ORM 级别的更新/删除语句。
- en: 'References: [#9767](https://www.sqlalchemy.org/trac/ticket/9767)'
  id: totrans-3510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9767](https://www.sqlalchemy.org/trac/ticket/9767)
- en: '**[orm] [bug]**'
  id: totrans-3511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in new ORM Annotated Declarative where using a [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") (or other column-level constraint) inside of [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") which is then copied out to models via pep-593
    `Annotated` would apply duplicates of each constraint to the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") as produced in the target [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), leading to incorrect CREATE TABLE DDL as well as migration
    directives under Alembic.
  id: totrans-3512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在新的 ORM Annotated Declarative 中修复了使用 [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")（或其他列级约束）位于 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 中，然后通过 pep-593 `Annotated` 复制到模型中时，将每个约束的副本应用到目标
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    中的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")，从而导致不正确的
    CREATE TABLE DDL 以及 Alembic 下的迁移指令。
- en: 'References: [#9766](https://www.sqlalchemy.org/trac/ticket/9766)'
  id: totrans-3513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9766](https://www.sqlalchemy.org/trac/ticket/9766)
- en: '**[orm] [bug]**'
  id: totrans-3514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where using additional relationship criteria with the [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") loader option, where the additional criteria itself
    contained correlated subqueries that referred to the joined entities and therefore
    also required “adaption” to aliased entities, would be excluded from this adaption,
    producing the wrong ON clause for the joinedload.
  id: totrans-3515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload")加载器选项时，使用附加的关系条件的问题，其中附加的条件本身包含引用加入实体的相关子查询，因此还需要对别名实体进行“调整”，否则会排除这种调整，导致joinedload的ON子句错误。
- en: 'References: [#9779](https://www.sqlalchemy.org/trac/ticket/9779)'
  id: totrans-3516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#9779](https://www.sqlalchemy.org/trac/ticket/9779)'
- en: sql
  id: totrans-3517
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-3518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Generalized the MSSQL [`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast
    "sqlalchemy.sql.expression.try_cast") function into the `sqlalchemy.` import namespace
    so that it may be implemented by third party dialects as well. Within SQLAlchemy,
    the [`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast
    "sqlalchemy.sql.expression.try_cast") function remains a SQL Server-only construct
    that will raise [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") if used with backends that don’t support it.
  id: totrans-3519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将MSSQL的[`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast
    "sqlalchemy.sql.expression.try_cast")函数泛化为`sqlalchemy.`导入命名空间，以便第三方方言也可以实现它。在SQLAlchemy中，[`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast
    "sqlalchemy.sql.expression.try_cast")函数仍然是一个仅支持SQL Server的构造，如果在不支持它的后端使用它，则会引发[`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")。
- en: '[`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    implements a CAST where un-castable conversions are returned as NULL, instead
    of raising an error. Theoretically, the construct could be implemented by third
    party dialects for Google BigQuery, DuckDB, and Snowflake, and possibly others.'
  id: totrans-3520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")实现了一个CAST，其中无法转换的转换将返回为NULL，而不是引发错误。从理论上讲，该结构可以由第三方方言实现，如Google
    BigQuery、DuckDB和Snowflake，可能还有其他方言。'
- en: Pull request courtesy Nick Crews.
  id: totrans-3521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Pull request courtesy Nick Crews.
- en: 'References: [#9752](https://www.sqlalchemy.org/trac/ticket/9752)'
  id: totrans-3522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#9752](https://www.sqlalchemy.org/trac/ticket/9752)'
- en: '**[sql] [bug]**'
  id: totrans-3523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in [`values()`](../core/selectable.html#sqlalchemy.sql.expression.values
    "sqlalchemy.sql.expression.values") construct where an internal compilation error
    would occur if the construct were used inside of a scalar subquery.
  id: totrans-3524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`values()`](../core/selectable.html#sqlalchemy.sql.expression.values "sqlalchemy.sql.expression.values")结构中使用时会出现内部编译错误的问题，如果该结构在标量子查询内使用，则会发生错误。
- en: 'References: [#9772](https://www.sqlalchemy.org/trac/ticket/9772)'
  id: totrans-3525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#9772](https://www.sqlalchemy.org/trac/ticket/9772)'
- en: postgresql
  id: totrans-3526
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-3527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed apparently very old issue where the [`ENUM.create_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.create_type
    "sqlalchemy.dialects.postgresql.ENUM") parameter, when set to its non-default
    of `False`, would not be propagated when the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") which it’s a part of were copied, as is common when
    using ORM Declarative mixins.
  id: totrans-3528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个明显非常古老的问题，即当[`ENUM.create_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.create_type
    "sqlalchemy.dialects.postgresql.ENUM")参数设置为其非默认值`False`时，它将不会在复制[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")时传播，这在使用ORM Declarative mixins时很常见。
- en: 'References: [#9773](https://www.sqlalchemy.org/trac/ticket/9773)'
  id: totrans-3529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#9773](https://www.sqlalchemy.org/trac/ticket/9773)'
- en: tests
  id: totrans-3530
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tests
- en: '**[tests] [bug] [pypy]**'
  id: totrans-3531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug] [pypy]**'
- en: Fixed test that relied on the `sys.getsizeof()` function to not run on pypy,
    where this function appears to have different behavior than it does on cpython.
  id: totrans-3532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了依赖于`sys.getsizeof()`函数在pypy上不运行的测试问题，在pypy上，这个函数似乎与cpython上的行为不同。
- en: 'References: [#9789](https://www.sqlalchemy.org/trac/ticket/9789)'
  id: totrans-3533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#9789](https://www.sqlalchemy.org/trac/ticket/9789)'
- en: orm
  id: totrans-3534
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Modified the `JoinedLoader` implementation to use a simpler approach in one
    particular area where it previously used a cached structure that would be shared
    among threads. The rationale is to avoid a potential race condition which is suspected
    of being the cause of a particular crash that’s been reported multiple times.
    The cached structure in question is still ultimately “cached” via the compiled
    SQL cache, so a performance degradation is not anticipated.
  id: totrans-3536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了 `JoinedLoader` 的实现，以在先前使用缓存结构的一个特定区域中使用更简单的方法，该缓存结构会在线程之间共享。其理由是避免潜在的竞争条件，这被怀疑是引起多次报告的特定崩溃的原因。所讨论的缓存结构最终仍通过编译的
    SQL 缓存“缓存”，因此不预期性能下降。
- en: 'References: [#9777](https://www.sqlalchemy.org/trac/ticket/9777)'
  id: totrans-3537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9777](https://www.sqlalchemy.org/trac/ticket/9777)
- en: '**[orm] [bug] [regression]**'
  id: totrans-3538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression where use of [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") or [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") within a [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") construct, then used in a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), would raise a [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") as a result of ORM related rules for performing
    ORM-level update/delete statements.
  id: totrans-3539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用 [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造中使用 [`update()`](../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    或 [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    ，然后在 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    中使用时，由于执行 ORM 级别的更新/删除语句的 ORM 相关规则而引发 [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") 的回归。
- en: 'References: [#9767](https://www.sqlalchemy.org/trac/ticket/9767)'
  id: totrans-3540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9767](https://www.sqlalchemy.org/trac/ticket/9767)
- en: '**[orm] [bug]**'
  id: totrans-3541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in new ORM Annotated Declarative where using a [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") (or other column-level constraint) inside of [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") which is then copied out to models via pep-593
    `Annotated` would apply duplicates of each constraint to the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") as produced in the target [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), leading to incorrect CREATE TABLE DDL as well as migration
    directives under Alembic.
  id: totrans-3542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在新的 ORM Annotated Declarative 中使用 [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")（或其他列级约束）在通过 pep-593 `Annotated` 复制到模型时，在 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 内部应用每个约束的副本到由目标 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 生成的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 上的问题，导致不正确的 CREATE TABLE DDL 以及 Alembic 下的迁移指令重复。
- en: 'References: [#9766](https://www.sqlalchemy.org/trac/ticket/9766)'
  id: totrans-3543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9766](https://www.sqlalchemy.org/trac/ticket/9766)
- en: '**[orm] [bug]**'
  id: totrans-3544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where using additional relationship criteria with the [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") loader option, where the additional criteria itself
    contained correlated subqueries that referred to the joined entities and therefore
    also required “adaption” to aliased entities, would be excluded from this adaption,
    producing the wrong ON clause for the joinedload.
  id: totrans-3545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用额外的关系标准与 [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") 加载器选项时的问题，其中额外的标准本身包含与联接实体相关的相关子查询，因此还需要对别名实体进行“适应”，但这些会被排除在此适应之外，从而为
    joinedload 生成错误的 ON 子句。
- en: 'References: [#9779](https://www.sqlalchemy.org/trac/ticket/9779)'
  id: totrans-3546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9779](https://www.sqlalchemy.org/trac/ticket/9779)
- en: sql
  id: totrans-3547
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-3548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Generalized the MSSQL [`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast
    "sqlalchemy.sql.expression.try_cast") function into the `sqlalchemy.` import namespace
    so that it may be implemented by third party dialects as well. Within SQLAlchemy,
    the [`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast
    "sqlalchemy.sql.expression.try_cast") function remains a SQL Server-only construct
    that will raise [`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError") if used with backends that don’t support it.
  id: totrans-3549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将MSSQL的[`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast
    "sqlalchemy.sql.expression.try_cast")函数泛化到`sqlalchemy.`导入命名空间中，以便它也可以由第三方方言实现。在SQLAlchemy内部，[`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast
    "sqlalchemy.sql.expression.try_cast")函数仍然是一个仅适用于SQL Server的构造，在不支持它的后端使用时将引发[`CompileError`](../core/exceptions.html#sqlalchemy.exc.CompileError
    "sqlalchemy.exc.CompileError")。
- en: '[`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")
    implements a CAST where un-castable conversions are returned as NULL, instead
    of raising an error. Theoretically, the construct could be implemented by third
    party dialects for Google BigQuery, DuckDB, and Snowflake, and possibly others.'
  id: totrans-3550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`try_cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.try_cast "sqlalchemy.sql.expression.try_cast")实现了一个CAST，其中无法转换的转换将被返回为NULL，而不是引发错误。理论上，该构造可以由Google
    BigQuery、DuckDB和Snowflake等第三方方言实现，并可能还有其他方言。'
- en: Pull request courtesy Nick Crews.
  id: totrans-3551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 感谢Nick Crews提供的拉取请求。
- en: 'References: [#9752](https://www.sqlalchemy.org/trac/ticket/9752)'
  id: totrans-3552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9752](https://www.sqlalchemy.org/trac/ticket/9752)
- en: '**[sql] [bug]**'
  id: totrans-3553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in [`values()`](../core/selectable.html#sqlalchemy.sql.expression.values
    "sqlalchemy.sql.expression.values") construct where an internal compilation error
    would occur if the construct were used inside of a scalar subquery.
  id: totrans-3554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`values()`](../core/selectable.html#sqlalchemy.sql.expression.values "sqlalchemy.sql.expression.values")构造中出现内部编译错误的问题，如果该构造在标量子查询内部使用将会发生该错误。
- en: 'References: [#9772](https://www.sqlalchemy.org/trac/ticket/9772)'
  id: totrans-3555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9772](https://www.sqlalchemy.org/trac/ticket/9772)
- en: postgresql
  id: totrans-3556
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-3557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed apparently very old issue where the [`ENUM.create_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.create_type
    "sqlalchemy.dialects.postgresql.ENUM") parameter, when set to its non-default
    of `False`, would not be propagated when the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") which it’s a part of were copied, as is common when
    using ORM Declarative mixins.
  id: totrans-3558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个明显很旧的问题，即当[`ENUM.create_type`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.create_type
    "sqlalchemy.dialects.postgresql.ENUM")参数被设置为非默认值`False`时，在复制其所属的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")时，该参数不会被传播，这在使用ORM Declarative mixins时很常见。
- en: 'References: [#9773](https://www.sqlalchemy.org/trac/ticket/9773)'
  id: totrans-3559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9773](https://www.sqlalchemy.org/trac/ticket/9773)
- en: tests
  id: totrans-3560
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tests
- en: '**[tests] [bug] [pypy]**'
  id: totrans-3561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug] [pypy]**'
- en: Fixed test that relied on the `sys.getsizeof()` function to not run on pypy,
    where this function appears to have different behavior than it does on cpython.
  id: totrans-3562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了依赖于`sys.getsizeof()`函数在pypy上不运行的测试问题，pypy上该函数的行为似乎与cpython上有所不同。
- en: 'References: [#9789](https://www.sqlalchemy.org/trac/ticket/9789)'
  id: totrans-3563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9789](https://www.sqlalchemy.org/trac/ticket/9789)
- en: 2.0.13
  id: totrans-3564
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.13
- en: 'Released: May 10, 2023'
  id: totrans-3565
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年5月10日
- en: orm
  id: totrans-3566
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where ORM Annotated Declarative would not resolve forward references
    correctly in all cases; in particular, when using `from __future__ import annotations`
    in combination with Pydantic dataclasses.
  id: totrans-3568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM Annotated Declarative在所有情况下都无法正确解析正向引用的问题；特别是在与Pydantic数据类结合使用`from __future__
    import annotations`时。
- en: 'References: [#9717](https://www.sqlalchemy.org/trac/ticket/9717)'
  id: totrans-3569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9717](https://www.sqlalchemy.org/trac/ticket/9717)
- en: '**[orm] [bug]**'
  id: totrans-3570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in new [Using RETURNING with upsert statements](../orm/queryguide/dml.html#orm-queryguide-upsert-returning)
    feature where the `populate_existing` execution option was not being propagated
    to the loading option, preventing existing attributes from being refreshed in-place.
  id: totrans-3571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在新的[使用RETURNING与upsert语句](../orm/queryguide/dml.html#orm-queryguide-upsert-returning)功能中修复了一个问题，即`populate_existing`执行选项未传播到加载选项，导致现有属性无法在原地刷新。
- en: 'References: [#9746](https://www.sqlalchemy.org/trac/ticket/9746)'
  id: totrans-3572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9746](https://www.sqlalchemy.org/trac/ticket/9746)
- en: '**[orm] [bug]**'
  id: totrans-3573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed loader strategy pathing issues where eager loaders such as [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") / [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") would fail to traverse fully for many-levels deep
    following a load that had a [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") or similar construct as an interim member.
  id: totrans-3574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了加载器策略路径问题，其中像[`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") / [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")这样的急加载器在遍历多级深度时会因为跟随具有[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")或类似结构的中间成员而无法完全遍历。
- en: 'References: [#9715](https://www.sqlalchemy.org/trac/ticket/9715)'
  id: totrans-3575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9715](https://www.sqlalchemy.org/trac/ticket/9715)
- en: '**[orm] [bug]**'
  id: totrans-3576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Fixed issue in [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct where the correct warning for “column
    X named directly multiple times” would not be emitted when ORM mapped attributes
    referred to the same [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), if the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct were involved, raising an internal assertion
    instead.
  id: totrans-3577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")构造中的问题，当ORM映射属性引用相同的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")时，如果涉及[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")构造，则不会发出正确的“直接多次命名列X”的警告，而是会引发内部断言。
- en: 'References: [#9630](https://www.sqlalchemy.org/trac/ticket/9630)'
  id: totrans-3578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9630](https://www.sqlalchemy.org/trac/ticket/9630)
- en: sql
  id: totrans-3579
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [usecase]**'
  id: totrans-3580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [用例]**'
- en: Implemented the “cartesian product warning” for UPDATE and DELETE statements,
    those which include multiple tables that are not correlated together in some way.
  id: totrans-3581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于包含多个未以某种方式相关联的表的UPDATE和DELETE语句实施了“笛卡尔积警告”。
- en: 'References: [#9721](https://www.sqlalchemy.org/trac/ticket/9721)'
  id: totrans-3582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9721](https://www.sqlalchemy.org/trac/ticket/9721)
- en: '**[sql] [bug]**'
  id: totrans-3583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: Fixed the base class for dialect-specific float/double types; Oracle [`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE") now subclasses [`Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double"), and internal types for [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") for asyncpg and pg8000 now correctly subclass [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float").
  id: totrans-3584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了特定于方言的浮点/双精度类型的基类；Oracle的[`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE")现在是[`Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double")的子类，而用于asyncpg和pg8000的内部类型现在正确地是[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float")的子类。
- en: '**[sql] [bug]**'
  id: totrans-3585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: Fixed issue where [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") construct that included multiple tables and
    no VALUES clause would raise with an internal error. Current behavior for [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") with no values is to generate a SQL UPDATE
    statement with an empty “set” clause, so this has been made consistent for this
    specific sub-case.
  id: totrans-3586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了包含多个表且没有VALUES子句的[`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")构造会导致内部错误的问题。当前对于没有值的[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")的行为是生成一个带有空“set”子句的SQL UPDATE语句，因此对于这种特定子情况已经做出了一致的处理。
- en: schema
  id: totrans-3587
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [performance]**'
  id: totrans-3588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [性能]**'
- en: Improved how table columns are added, avoiding unnecessary allocations, significantly
    speeding up the creation of many table, like when reflecting entire schemas.
  id: totrans-3589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了添加表列的方式，避免不必要的分配，显著加快了创建许多表的过程，比如在反射整个模式时。
- en: 'References: [#9597](https://www.sqlalchemy.org/trac/ticket/9597)'
  id: totrans-3590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9597](https://www.sqlalchemy.org/trac/ticket/9597)
- en: typing
  id: totrans-3591
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型
- en: '**[typing] [bug]**'
  id: totrans-3592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [错误]**'
- en: Fixed typing for the [`Session.get.with_for_update`](../orm/session_api.html#sqlalchemy.orm.Session.get.params.with_for_update
    "sqlalchemy.orm.Session.get") parameter of [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") and [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") (as well as corresponding methods on [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")) to accept boolean `True` and all other
    argument forms accepted by the parameter at runtime.
  id: totrans-3593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    和 [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")（以及[`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")上对应的方法）中的[`Session.get.with_for_update`](../orm/session_api.html#sqlalchemy.orm.Session.get.params.with_for_update
    "sqlalchemy.orm.Session.get")参数的类型问题，现在在运行时可以接受布尔值`True`以及参数在运行时可以接受的其他所有形式。
- en: 'References: [#9762](https://www.sqlalchemy.org/trac/ticket/9762)'
  id: totrans-3594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9762](https://www.sqlalchemy.org/trac/ticket/9762)
- en: '**[typing] [sql]**'
  id: totrans-3595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [sql]**'
- en: Added type [`ColumnExpressionArgument`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnExpressionArgument
    "sqlalchemy.sql.expression.ColumnExpressionArgument") as a public-facing type
    that indicates column-oriented arguments which are passed to SQLAlchemy constructs,
    such as [`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where"), [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") and others. This may be used to add typing to
    end-user functions which call these methods.
  id: totrans-3596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了类型[`ColumnExpressionArgument`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnExpressionArgument
    "sqlalchemy.sql.expression.ColumnExpressionArgument")作为一个公共类型，指示传递给SQLAlchemy构造的基于列的参数，例如[`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where")、[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")等。这可以用于为调用这些方法的最终用户函数添加类型。
- en: 'References: [#9656](https://www.sqlalchemy.org/trac/ticket/9656)'
  id: totrans-3597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9656](https://www.sqlalchemy.org/trac/ticket/9656)
- en: asyncio
  id: totrans-3598
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [usecase]**'
  id: totrans-3599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [usecase]**'
- en: Added a new helper mixin [`AsyncAttrs`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs") that seeks to improve the use of lazy-loader
    and other expired or deferred ORM attributes with asyncio, providing a simple
    attribute accessor that provides an `await` interface to any ORM attribute, whether
    or not it needs to emit SQL.
  id: totrans-3600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的助手混合类[`AsyncAttrs`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs")，旨在改善在asyncio中使用惰性加载器和其他过期或延迟的ORM属性的情况，提供了一个简单的属性访问器，为任何ORM属性提供了一个`await`接口，无论它是否需要发出SQL。
- en: See also
  id: totrans-3601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[`AsyncAttrs`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs")'
  id: totrans-3602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`AsyncAttrs`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs")'
- en: 'References: [#9731](https://www.sqlalchemy.org/trac/ticket/9731)'
  id: totrans-3603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9731](https://www.sqlalchemy.org/trac/ticket/9731)
- en: '**[asyncio] [bug]**'
  id: totrans-3604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [bug]**'
- en: Fixed issue in semi-private `await_only()` and `await_fallback()` concurrency
    functions where the given awaitable would remain un-awaited if the function threw
    a `GreenletError`, which could cause “was not awaited” warnings later on if the
    program continued. In this case, the given awaitable is now cancelled before the
    exception is thrown.
  id: totrans-3605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了半私有的`await_only()`和`await_fallback()`并发函数中的问题，在函数抛出`GreenletError`后，给定的可等待对象仍然未被等待，这可能导致如果程序继续运行，稍后会出现“未被等待”的警告。在这种情况下，在抛出异常之前，给定的可等待对象现在将被取消。
- en: postgresql
  id: totrans-3606
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-3607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [regression]**'
- en: Fixed another regression due to the “insertmanyvalues” change in 2.0.10 as part
    of [#9618](https://www.sqlalchemy.org/trac/ticket/9618), in a similar way as regression
    [#9701](https://www.sqlalchemy.org/trac/ticket/9701), where [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") datatypes also need additional casts on when using
    the asyncpg driver specifically in order to work with the new bulk INSERT format.
  id: totrans-3608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了另一个因为2.0.10版本中“insertmanyvalues”更改而引起的回归问题，作为[#9618](https://www.sqlalchemy.org/trac/ticket/9618)的一部分，以类似于回归问题[#9701](https://www.sqlalchemy.org/trac/ticket/9701)的方式，使用asyncpg驱动程序时，[`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")数据类型在使用新的批量插入格式时也需要额外的转换。
- en: 'References: [#9739](https://www.sqlalchemy.org/trac/ticket/9739)'
  id: totrans-3609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9739](https://www.sqlalchemy.org/trac/ticket/9739)
- en: oracle
  id: totrans-3610
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [reflection]**'
  id: totrans-3611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [reflection]**'
- en: Added reflection support in the Oracle dialect to expression based indexes and
    the ordering direction of index expressions.
  id: totrans-3612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Oracle 方言中，对基于表达式的索引和索引表达式的排序方向增加了反射支持。
- en: 'References: [#9597](https://www.sqlalchemy.org/trac/ticket/9597)'
  id: totrans-3613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9597](https://www.sqlalchemy.org/trac/ticket/9597)
- en: misc
  id: totrans-3614
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-3615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed issue in [`Mutable`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable
    "sqlalchemy.ext.mutable.Mutable") where event registration for ORM mapped attributes
    would be called repeatedly for mapped inheritance subclasses, leading to duplicate
    events being invoked in inheritance hierarchies.
  id: totrans-3616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Mutable`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable
    "sqlalchemy.ext.mutable.Mutable") 中的问题，其中 ORM 映射的属性的事件注册将对映射的继承子类重复调用，导致在继承层次结构中调用重复事件。
- en: 'References: [#9676](https://www.sqlalchemy.org/trac/ticket/9676)'
  id: totrans-3617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9676](https://www.sqlalchemy.org/trac/ticket/9676)
- en: orm
  id: totrans-3618
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where ORM Annotated Declarative would not resolve forward references
    correctly in all cases; in particular, when using `from __future__ import annotations`
    in combination with Pydantic dataclasses.
  id: totrans-3620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 注释声明在某些情况下无法正确解析前向引用的问题；特别是，在使用 `from __future__ import annotations`
    与 Pydantic 数据类结合使用时。
- en: 'References: [#9717](https://www.sqlalchemy.org/trac/ticket/9717)'
  id: totrans-3621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9717](https://www.sqlalchemy.org/trac/ticket/9717)
- en: '**[orm] [bug]**'
  id: totrans-3622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in new [Using RETURNING with upsert statements](../orm/queryguide/dml.html#orm-queryguide-upsert-returning)
    feature where the `populate_existing` execution option was not being propagated
    to the loading option, preventing existing attributes from being refreshed in-place.
  id: totrans-3623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的 [使用 RETURNING 语句进行 upsert](../orm/queryguide/dml.html#orm-queryguide-upsert-returning)
    功能中的问题，其中 `populate_existing` 执行选项未传播到加载选项，导致现有属性无法在原位刷新。
- en: 'References: [#9746](https://www.sqlalchemy.org/trac/ticket/9746)'
  id: totrans-3624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9746](https://www.sqlalchemy.org/trac/ticket/9746)
- en: '**[orm] [bug]**'
  id: totrans-3625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed loader strategy pathing issues where eager loaders such as [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") / [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") would fail to traverse fully for many-levels deep
    following a load that had a [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") or similar construct as an interim member.
  id: totrans-3626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了加载器策略路径问题，例如，当一个加载器，如 [`joinedload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.joinedload
    "sqlalchemy.orm.joinedload") / [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") 遇到一个 [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") 或类似结构时，会导致许多级别的深度跟踪失败。
- en: 'References: [#9715](https://www.sqlalchemy.org/trac/ticket/9715)'
  id: totrans-3627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9715](https://www.sqlalchemy.org/trac/ticket/9715)
- en: '**[orm] [bug]**'
  id: totrans-3628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct where the correct warning for “column
    X named directly multiple times” would not be emitted when ORM mapped attributes
    referred to the same [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), if the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct were involved, raising an internal assertion
    instead.
  id: totrans-3629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 构造中的问题，当 ORM 映射的属性引用相同的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 时，如果 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 构造涉及，则不会发出“直接多次命名列 X”的正确警告，而是引发内部断言。
- en: 'References: [#9630](https://www.sqlalchemy.org/trac/ticket/9630)'
  id: totrans-3630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9630](https://www.sqlalchemy.org/trac/ticket/9630)
- en: sql
  id: totrans-3631
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-3632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Implemented the “cartesian product warning” for UPDATE and DELETE statements,
    those which include multiple tables that are not correlated together in some way.
  id: totrans-3633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于包含多个未相关的表的 UPDATE 和 DELETE 语句，实施了“笛卡尔积警告”。
- en: 'References: [#9721](https://www.sqlalchemy.org/trac/ticket/9721)'
  id: totrans-3634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9721](https://www.sqlalchemy.org/trac/ticket/9721)
- en: '**[sql] [bug]**'
  id: totrans-3635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed the base class for dialect-specific float/double types; Oracle [`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE") now subclasses [`Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double"), and internal types for [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") for asyncpg and pg8000 now correctly subclass [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float").
  id: totrans-3636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了方言特定的浮点/双精度类型的基类；Oracle [`BINARY_DOUBLE`](../dialects/oracle.html#sqlalchemy.dialects.oracle.BINARY_DOUBLE
    "sqlalchemy.dialects.oracle.BINARY_DOUBLE") 现在是 [`Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double") 的子类，而且对于 asyncpg 和 pg8000 的内部类型 [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 现在正确地是 [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 的子类。
- en: '**[sql] [bug]**'
  id: totrans-3637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") construct that included multiple tables and
    no VALUES clause would raise with an internal error. Current behavior for [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") with no values is to generate a SQL UPDATE
    statement with an empty “set” clause, so this has been made consistent for this
    specific sub-case.
  id: totrans-3638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了包含多个表且没有 VALUES 子句的 [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 构造会导致内部错误的问题。不包含值的 [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") 的当前行为是生成一个带有空“set”子句的 SQL UPDATE 语句，因此这一特定子情况的行为已经统一。
- en: schema
  id: totrans-3639
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [performance]**'
  id: totrans-3640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [performance]**'
- en: Improved how table columns are added, avoiding unnecessary allocations, significantly
    speeding up the creation of many table, like when reflecting entire schemas.
  id: totrans-3641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了添加表列的方式，避免了不必要的分配，显著加快了创建许多表，例如反射整个模式时的速度。
- en: 'References: [#9597](https://www.sqlalchemy.org/trac/ticket/9597)'
  id: totrans-3642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9597](https://www.sqlalchemy.org/trac/ticket/9597)
- en: typing
  id: totrans-3643
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-3644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing for the [`Session.get.with_for_update`](../orm/session_api.html#sqlalchemy.orm.Session.get.params.with_for_update
    "sqlalchemy.orm.Session.get") parameter of [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") and [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") (as well as corresponding methods on [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")) to accept boolean `True` and all other
    argument forms accepted by the parameter at runtime.
  id: totrans-3645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Session.get.with_for_update`](../orm/session_api.html#sqlalchemy.orm.Session.get.params.with_for_update
    "sqlalchemy.orm.Session.get") 参数的类型注解，该参数在运行时接受布尔值 `True` 和所有其他参数形式，在 [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") 和 [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") 方法（以及 [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession") 上对应的方法）中也适用。
- en: 'References: [#9762](https://www.sqlalchemy.org/trac/ticket/9762)'
  id: totrans-3646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9762](https://www.sqlalchemy.org/trac/ticket/9762)
- en: '**[typing] [sql]**'
  id: totrans-3647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [sql]**'
- en: Added type [`ColumnExpressionArgument`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnExpressionArgument
    "sqlalchemy.sql.expression.ColumnExpressionArgument") as a public-facing type
    that indicates column-oriented arguments which are passed to SQLAlchemy constructs,
    such as [`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where"), [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") and others. This may be used to add typing to
    end-user functions which call these methods.
  id: totrans-3648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了类型 [`ColumnExpressionArgument`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnExpressionArgument
    "sqlalchemy.sql.expression.ColumnExpressionArgument") 作为一个公共类型，指示传递给 SQLAlchemy
    构造的面向列的参数，例如 [`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where")、[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") 等。这可以用于为调用这些方法的最终用户函数添加类型注解。
- en: 'References: [#9656](https://www.sqlalchemy.org/trac/ticket/9656)'
  id: totrans-3649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9656](https://www.sqlalchemy.org/trac/ticket/9656)
- en: asyncio
  id: totrans-3650
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [usecase]**'
  id: totrans-3651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [usecase]**'
- en: Added a new helper mixin [`AsyncAttrs`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs") that seeks to improve the use of lazy-loader
    and other expired or deferred ORM attributes with asyncio, providing a simple
    attribute accessor that provides an `await` interface to any ORM attribute, whether
    or not it needs to emit SQL.
  id: totrans-3652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的辅助混合类[`AsyncAttrs`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs")，旨在改进与asyncio一起使用的懒加载器和其他已过期或延迟的ORM属性的使用，提供了一个简单的属性访问器，为任何ORM属性提供了一个`await`接口，无论它是否需要发出SQL。
- en: See also
  id: totrans-3653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`AsyncAttrs`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs")'
  id: totrans-3654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`AsyncAttrs`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncAttrs
    "sqlalchemy.ext.asyncio.AsyncAttrs")'
- en: 'References: [#9731](https://www.sqlalchemy.org/trac/ticket/9731)'
  id: totrans-3655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9731](https://www.sqlalchemy.org/trac/ticket/9731)
- en: '**[asyncio] [bug]**'
  id: totrans-3656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [bug]**'
- en: Fixed issue in semi-private `await_only()` and `await_fallback()` concurrency
    functions where the given awaitable would remain un-awaited if the function threw
    a `GreenletError`, which could cause “was not awaited” warnings later on if the
    program continued. In this case, the given awaitable is now cancelled before the
    exception is thrown.
  id: totrans-3657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了半私有的`await_only()`和`await_fallback()`并发函数中的问题，其中给定的可等待对象如果函数抛出`GreenletError`，则会保持未等待状态，这可能会导致后续程序继续运行时出现“未等待”的警告。在这种情况下，在抛出异常之前现在会取消给定的可等待对象。
- en: postgresql
  id: totrans-3658
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-3659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [regression]**'
- en: Fixed another regression due to the “insertmanyvalues” change in 2.0.10 as part
    of [#9618](https://www.sqlalchemy.org/trac/ticket/9618), in a similar way as regression
    [#9701](https://www.sqlalchemy.org/trac/ticket/9701), where [`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary") datatypes also need additional casts on when using
    the asyncpg driver specifically in order to work with the new bulk INSERT format.
  id: totrans-3660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了另一个由于2.0.10中的“insertmanyvalues”更改而导致的回归，类似于回归[#9701](https://www.sqlalchemy.org/trac/ticket/9701)，其中[`LargeBinary`](../core/type_basics.html#sqlalchemy.types.LargeBinary
    "sqlalchemy.types.LargeBinary")数据类型在使用asyncpg驱动程序时也需要对新的批量INSERT格式进行额外的强制转换才能正常工作。
- en: 'References: [#9739](https://www.sqlalchemy.org/trac/ticket/9739)'
  id: totrans-3661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9739](https://www.sqlalchemy.org/trac/ticket/9739)
- en: oracle
  id: totrans-3662
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [reflection]**'
  id: totrans-3663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [reflection]**'
- en: Added reflection support in the Oracle dialect to expression based indexes and
    the ordering direction of index expressions.
  id: totrans-3664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Oracle方言中增加了对基于表达式的索引和索引表达式的排序方向的反射支持。
- en: 'References: [#9597](https://www.sqlalchemy.org/trac/ticket/9597)'
  id: totrans-3665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9597](https://www.sqlalchemy.org/trac/ticket/9597)
- en: misc
  id: totrans-3666
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-3667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed issue in [`Mutable`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable
    "sqlalchemy.ext.mutable.Mutable") where event registration for ORM mapped attributes
    would be called repeatedly for mapped inheritance subclasses, leading to duplicate
    events being invoked in inheritance hierarchies.
  id: totrans-3668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Mutable`](../orm/extensions/mutable.html#sqlalchemy.ext.mutable.Mutable
    "sqlalchemy.ext.mutable.Mutable")中的问题，其中为ORM映射属性注册的事件将被重复调用，导致在继承层次结构中调用重复事件。
- en: 'References: [#9676](https://www.sqlalchemy.org/trac/ticket/9676)'
  id: totrans-3669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9676](https://www.sqlalchemy.org/trac/ticket/9676)
- en: 2.0.12
  id: totrans-3670
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.12
- en: 'Released: April 30, 2023'
  id: totrans-3671
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年4月30日
- en: orm
  id: totrans-3672
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed critical caching issue where the combination of [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") and [`hybrid_property()`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") expression compositions would cause a
    cache key mismatch, leading to cache keys that held onto the actual [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") object while also not matching that of equivalent constructs,
    filling up the cache.
  id: totrans-3674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个严重的缓存问题，即[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")和[`hybrid_property()`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")表达式组合的组合会导致缓存键不匹配，从而导致缓存键保存了实际的[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")对象，同时又不匹配等效构造的缓存键，填满了缓存。
- en: 'This change is also **backported** to: 1.4.48'
  id: totrans-3675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**到：1.4.48
- en: 'References: [#9728](https://www.sqlalchemy.org/trac/ticket/9728)'
  id: totrans-3676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9728](https://www.sqlalchemy.org/trac/ticket/9728)
- en: mysql
  id: totrans-3677
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [mariadb]**'
  id: totrans-3678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [mariadb]**'
- en: Fixed issues regarding reflection of comments for [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, where the comments contained control characters
    such as newlines. Additional testing support for these characters as well as extended
    Unicode characters in table and column comments (the latter of which aren’t supported
    by MySQL/MariaDB) added to testing overall.
  id: totrans-3679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")和[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象反射注释的问题，其中注释包含控制字符，如换行符。还为这些字符以及扩展的Unicode字符在表和列注释中（后者不受MySQL/MariaDB支持）添加了额外的测试支持，以提高整体测试。
- en: 'References: [#9722](https://www.sqlalchemy.org/trac/ticket/9722)'
  id: totrans-3680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9722](https://www.sqlalchemy.org/trac/ticket/9722)
- en: orm
  id: totrans-3681
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed critical caching issue where the combination of [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") and [`hybrid_property()`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") expression compositions would cause a
    cache key mismatch, leading to cache keys that held onto the actual [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") object while also not matching that of equivalent constructs,
    filling up the cache.
  id: totrans-3683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关键的缓存问题，其中[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")和[`hybrid_property()`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")表达式组合的组合会导致缓存键不匹配，导致缓存键保留实际的[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")对象，同时也不匹配等效构造的缓存键，填满缓存。
- en: 'This change is also **backported** to: 1.4.48'
  id: totrans-3684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.4.48
- en: 'References: [#9728](https://www.sqlalchemy.org/trac/ticket/9728)'
  id: totrans-3685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9728](https://www.sqlalchemy.org/trac/ticket/9728)
- en: mysql
  id: totrans-3686
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [mariadb]**'
  id: totrans-3687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [mariadb]**'
- en: Fixed issues regarding reflection of comments for [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, where the comments contained control characters
    such as newlines. Additional testing support for these characters as well as extended
    Unicode characters in table and column comments (the latter of which aren’t supported
    by MySQL/MariaDB) added to testing overall.
  id: totrans-3688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")和[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象反射注释的问题，其中注释包含控制字符，如换行符。还为这些字符以及扩展的Unicode字符在表和列注释中（后者不受MySQL/MariaDB支持）添加了额外的测试支持，以提高整体测试。
- en: 'References: [#9722](https://www.sqlalchemy.org/trac/ticket/9722)'
  id: totrans-3689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9722](https://www.sqlalchemy.org/trac/ticket/9722)
- en: 2.0.11
  id: totrans-3690
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.11
- en: 'Released: April 26, 2023'
  id: totrans-3691
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年4月26日
- en: orm
  id: totrans-3692
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-3693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: 'The [ORM bulk INSERT and UPDATE](../orm/queryguide/dml.html#orm-expression-update-delete)
    features now add these capabilities:'
  id: totrans-3694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM批量INSERT和UPDATE](../orm/queryguide/dml.html#orm-expression-update-delete)功能现在增加了以下功能：'
- en: The requirement that extra parameters aren’t passed when using ORM INSERT using
    the “orm” dml_strategy setting is lifted.
  id: totrans-3695
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用ORM INSERT时，不再要求使用“orm” dml_strategy设置时不传递额外的参数。
- en: The requirement that additional WHERE criteria is not passed when using ORM
    UPDATE using the “bulk” dml_strategy setting is lifted. Note that in this case,
    the check for expected row count is turned off.
  id: totrans-3696
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用ORM UPDATE时，不再要求使用“bulk” dml_strategy设置时不传递额外的WHERE条件。请注意，在这种情况下，预期行数的检查被关闭。
- en: 'References: [#9583](https://www.sqlalchemy.org/trac/ticket/9583), [#9595](https://www.sqlalchemy.org/trac/ticket/9595)'
  id: totrans-3697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9583](https://www.sqlalchemy.org/trac/ticket/9583), [#9595](https://www.sqlalchemy.org/trac/ticket/9595)
- en: '**[orm] [bug]**'
  id: totrans-3698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 2.0 regression where use of [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") inside of [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") would fail to be interpreted correctly
    when executing the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") statement using the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), due to the new [ORM-enabled insert feature](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    not implementing this use case.
  id: totrans-3699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了2.0版本中在使用ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")执行[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")语句时，[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")内部使用[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")无法正确解释的回归，这是由于新的[启用ORM插入功能](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)未实现此用例。
- en: 'References: [#9583](https://www.sqlalchemy.org/trac/ticket/9583), [#9595](https://www.sqlalchemy.org/trac/ticket/9595)'
  id: totrans-3700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9583](https://www.sqlalchemy.org/trac/ticket/9583), [#9595](https://www.sqlalchemy.org/trac/ticket/9595)
- en: engine
  id: totrans-3701
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [performance]**'
  id: totrans-3702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [性能]**'
- en: 'A series of performance enhancements to [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row"):'
  id: totrans-3703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一系列针对[`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")的性能增强：
- en: '`__getattr__` performance of the row’s “named tuple” interface has been improved;
    within this change, the [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") implementation has been streamlined, removing constructs
    and logic that were specific to the 1.4 and prior series of SQLAlchemy. As part
    of this change, the serialization format of [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") has been modified slightly, however rows which were pickled
    with previous SQLAlchemy 2.0 releases will be recognized within the new format.
    Pull request courtesy J. Nick Koston.'
  id: totrans-3704
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进了行的“命名元组”接口的`__getattr__`性能；在此更改中，[`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")的实现已经简化，删除了特定于1.4版本及之前版本的SQLAlchemy的构造和逻辑。作为此更改的一部分，[`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")的序列化格式略有修改，但是使用之前SQLAlchemy 2.0版本进行pickle的行将在新格式中被识别。感谢J.
    Nick Koston的拉取请求。
- en: Improved row processing performance for “binary” datatypes by making the “bytes”
    handler conditional on a per driver basis. As a result, the “bytes” result handler
    has been removed for nearly all drivers other than psycopg2, all of which in modern
    forms support returning Python “bytes” directly. Pull request courtesy J. Nick
    Koston.
  id: totrans-3705
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使“bytes”处理程序在每个驱动程序基础上有条件地执行，改进了“二进制”数据类型的行处理性能。因此，除了psycopg2之外的几乎所有驱动程序都已删除了“bytes”结果处理程序，所有这些驱动程序在现代形式下都支持直接返回Python“bytes”。感谢J.
    Nick Koston的拉取请求。
- en: Additional refactorings inside of [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") to improve performance by Federico Caselli.
  id: totrans-3706
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由Federico Caselli对[`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")进行的额外重构以提高性能。
- en: 'References: [#9678](https://www.sqlalchemy.org/trac/ticket/9678), [#9680](https://www.sqlalchemy.org/trac/ticket/9680)'
  id: totrans-3707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9678](https://www.sqlalchemy.org/trac/ticket/9678), [#9680](https://www.sqlalchemy.org/trac/ticket/9680)
- en: '**[engine] [bug] [regression]**'
  id: totrans-3708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误] [回归]**'
- en: Fixed regression which prevented the [`URL.normalized_query`](../core/engines.html#sqlalchemy.engine.URL.normalized_query
    "sqlalchemy.engine.URL.normalized_query") attribute of [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") from functioning.
  id: totrans-3709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了阻止[`URL.normalized_query`](../core/engines.html#sqlalchemy.engine.URL.normalized_query
    "sqlalchemy.engine.URL.normalized_query")属性在[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL")中正常运行的回归。
- en: 'References: [#9682](https://www.sqlalchemy.org/trac/ticket/9682)'
  id: totrans-3710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9682](https://www.sqlalchemy.org/trac/ticket/9682)
- en: sql
  id: totrans-3711
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL
- en: '**[sql] [usecase]**'
  id: totrans-3712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [用例]**'
- en: Added support for slice access with [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection"), e.g. `table.c[0:5]`, `subquery.c[:-1]`
    etc. Slice access returns a sub [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") in the same way as passing a tuple
    of keys. This is a natural continuation of the key-tuple access added for [#8285](https://www.sqlalchemy.org/trac/ticket/8285),
    where it appears to be an oversight that the slice access use case was omitted.
  id: totrans-3713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 添加了切片访问的支持，例如 `table.c[0:5]`、`subquery.c[:-1]`
    等。切片访问返回一个子 [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，与传递键元组的方式相同。这是对 [#8285](https://www.sqlalchemy.org/trac/ticket/8285)
    添加的键元组访问的自然延续，其中切片访问用例被遗漏似乎是一个疏忽。
- en: 'References: [#8285](https://www.sqlalchemy.org/trac/ticket/8285)'
  id: totrans-3714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8285](https://www.sqlalchemy.org/trac/ticket/8285)
- en: typing
  id: totrans-3715
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-3716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [错误]**'
- en: Improved typing of [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") to indicate that it support also [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") as index objects, not only string names. Pull request
    courtesy Andy Freeland.
  id: totrans-3717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    的类型提示，指示它也支持 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    作为索引对象，而不仅仅是字符串名称。感谢 Andy Freeland 提交的拉取请求。
- en: 'References: [#9644](https://www.sqlalchemy.org/trac/ticket/9644)'
  id: totrans-3718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9644](https://www.sqlalchemy.org/trac/ticket/9644)
- en: postgresql
  id: totrans-3719
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-3720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误] [回归]**'
- en: Fixed critical regression caused by [#9618](https://www.sqlalchemy.org/trac/ticket/9618),
    which modified the architecture of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature for 2.0.10, which caused floating point values to lose all decimal places
    when being inserted using the insertmanyvalues feature with either the psycopg2
    or psycopg drivers.
  id: totrans-3721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 [#9618](https://www.sqlalchemy.org/trac/ticket/9618) 引起的严重回归，该回归修改了 2.0.10
    版本的 [insertmanyvalues](../glossary.html#term-insertmanyvalues) 功能的架构，导致在使用 insertmanyvalues
    功能插入时，使用 psycopg2 或 psycopg 驱动程序时，浮点值失去了所有小数位。
- en: 'References: [#9701](https://www.sqlalchemy.org/trac/ticket/9701)'
  id: totrans-3722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9701](https://www.sqlalchemy.org/trac/ticket/9701)
- en: mssql
  id: totrans-3723
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-3724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: Implemented the [`Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double") type for SQL Server, where it will render `DOUBLE PRECISION`
    at DDL time. This is implemented using a new MSSQL datatype [`DOUBLE_PRECISION`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DOUBLE_PRECISION
    "sqlalchemy.dialects.mssql.DOUBLE_PRECISION") which also may be used directly.
  id: totrans-3725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 SQL Server 中实现了 [`Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double") 类型，它将在 DDL 时渲染 `DOUBLE PRECISION`。这是使用一个新的 MSSQL 数据类型
    [`DOUBLE_PRECISION`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DOUBLE_PRECISION
    "sqlalchemy.dialects.mssql.DOUBLE_PRECISION") 实现的，也可以直接使用。
- en: oracle
  id: totrans-3726
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-3727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Fixed issue in Oracle dialects where `Decimal` returning types such as [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") would return floating point values, rather than `Decimal`
    objects, when these columns were used in the [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") clause to return INSERTed values.
  id: totrans-3728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Oracle 方言中修复了一个问题，即当这些列在 [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") 子句中用于返回 INSERT 的值时，`Decimal` 返回类型（如
    [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")）将返回浮点值，而不是
    `Decimal` 对象。
- en: orm
  id: totrans-3729
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-3730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: 'The [ORM bulk INSERT and UPDATE](../orm/queryguide/dml.html#orm-expression-update-delete)
    features now add these capabilities:'
  id: totrans-3731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM bulk INSERT and UPDATE](../orm/queryguide/dml.html#orm-expression-update-delete)
    功能现在增加了以下功能：'
- en: The requirement that extra parameters aren’t passed when using ORM INSERT using
    the “orm” dml_strategy setting is lifted.
  id: totrans-3732
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用“orm” dml_strategy 设置进行 ORM INSERT 时，解除了不传递额外参数的要求。
- en: The requirement that additional WHERE criteria is not passed when using ORM
    UPDATE using the “bulk” dml_strategy setting is lifted. Note that in this case,
    the check for expected row count is turned off.
  id: totrans-3733
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在使用“bulk” dml_strategy 设置进行 ORM UPDATE 时，解除了不传递额外 WHERE 条件的要求。请注意，在这种情况下，关闭了对预期行数的检查。
- en: 'References: [#9583](https://www.sqlalchemy.org/trac/ticket/9583), [#9595](https://www.sqlalchemy.org/trac/ticket/9595)'
  id: totrans-3734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9583](https://www.sqlalchemy.org/trac/ticket/9583)，[#9595](https://www.sqlalchemy.org/trac/ticket/9595)
- en: '**[orm] [bug]**'
  id: totrans-3735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed 2.0 regression where use of [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") inside of [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") would fail to be interpreted correctly
    when executing the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") statement using the ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), due to the new [ORM-enabled insert feature](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    not implementing this use case.
  id: totrans-3736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 2.0 版本中的回归，当在使用 ORM [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 执行 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 语句时，在 [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") 中使用 [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 会无法被正确解释的问题，原因是新的 [ORM-enabled insert feature](../orm/queryguide/dml.html#orm-queryguide-bulk-insert)
    没有实现这种用例。
- en: 'References: [#9583](https://www.sqlalchemy.org/trac/ticket/9583), [#9595](https://www.sqlalchemy.org/trac/ticket/9595)'
  id: totrans-3737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9583](https://www.sqlalchemy.org/trac/ticket/9583)，[#9595](https://www.sqlalchemy.org/trac/ticket/9595)
- en: engine
  id: totrans-3738
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [performance]**'
  id: totrans-3739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [performance]**'
- en: 'A series of performance enhancements to [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row"):'
  id: totrans-3740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一系列针对 [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    的性能增强：
- en: '`__getattr__` performance of the row’s “named tuple” interface has been improved;
    within this change, the [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") implementation has been streamlined, removing constructs
    and logic that were specific to the 1.4 and prior series of SQLAlchemy. As part
    of this change, the serialization format of [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") has been modified slightly, however rows which were pickled
    with previous SQLAlchemy 2.0 releases will be recognized within the new format.
    Pull request courtesy J. Nick Koston.'
  id: totrans-3741
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__getattr__` 函数在行的“命名元组”接口的性能得到了提升；在这个改变中，[`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 的实现已经被简化，移除了特定于 SQLAlchemy 1.4 及之前系列的构造和逻辑。作为这个改变的一部分，[`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 的序列化格式已经稍微修改，然而之前的 SQLAlchemy 2.0 版本中使用 pickle 序列化的行将在新的格式中被识别。拉取请求由
    J. Nick Koston 提供。'
- en: Improved row processing performance for “binary” datatypes by making the “bytes”
    handler conditional on a per driver basis. As a result, the “bytes” result handler
    has been removed for nearly all drivers other than psycopg2, all of which in modern
    forms support returning Python “bytes” directly. Pull request courtesy J. Nick
    Koston.
  id: totrans-3742
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使“bytes”处理器在每个驱动程序基础上有条件地生效，提高了对“binary”数据类型的行处理性能。因此，除了 psycopg2 外，几乎所有现代形式的驱动程序都已删除了“bytes”结果处理器，所有这些驱动程序都支持直接返回
    Python “bytes”。拉取请求由 J. Nick Koston 提供。
- en: Additional refactorings inside of [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") to improve performance by Federico Caselli.
  id: totrans-3743
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进一步重构 [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    以提高性能，由 Federico Caselli 提供。
- en: 'References: [#9678](https://www.sqlalchemy.org/trac/ticket/9678), [#9680](https://www.sqlalchemy.org/trac/ticket/9680)'
  id: totrans-3744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9678](https://www.sqlalchemy.org/trac/ticket/9678)，[#9680](https://www.sqlalchemy.org/trac/ticket/9680)
- en: '**[engine] [bug] [regression]**'
  id: totrans-3745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [regression]**'
- en: Fixed regression which prevented the [`URL.normalized_query`](../core/engines.html#sqlalchemy.engine.URL.normalized_query
    "sqlalchemy.engine.URL.normalized_query") attribute of [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") from functioning.
  id: totrans-3746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个阻止 [`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    的 [`URL.normalized_query`](../core/engines.html#sqlalchemy.engine.URL.normalized_query
    "sqlalchemy.engine.URL.normalized_query") 属性正常运行的回归。
- en: 'References: [#9682](https://www.sqlalchemy.org/trac/ticket/9682)'
  id: totrans-3747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9682](https://www.sqlalchemy.org/trac/ticket/9682)
- en: sql
  id: totrans-3748
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-3749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Added support for slice access with [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection"), e.g. `table.c[0:5]`, `subquery.c[:-1]`
    etc. Slice access returns a sub [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") in the same way as passing a tuple
    of keys. This is a natural continuation of the key-tuple access added for [#8285](https://www.sqlalchemy.org/trac/ticket/8285),
    where it appears to be an oversight that the slice access use case was omitted.
  id: totrans-3750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 添加了切片访问支持，例如 `table.c[0:5]`，`subquery.c[:-1]`
    等。 切片访问返回一个子 [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，方式与传递键元组相同。 这是对 [#8285](https://www.sqlalchemy.org/trac/ticket/8285)
    添加的键元组访问的自然延伸，在该案例中，切片访问用例被遗漏似乎是一个疏忽。
- en: 'References: [#8285](https://www.sqlalchemy.org/trac/ticket/8285)'
  id: totrans-3751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8285](https://www.sqlalchemy.org/trac/ticket/8285)
- en: typing
  id: totrans-3752
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-3753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Improved typing of [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") to indicate that it support also [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") as index objects, not only string names. Pull request
    courtesy Andy Freeland.
  id: totrans-3754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    的类型，指示它也支持 [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    作为索引对象，而不仅仅是字符串名称。 感谢 Andy Freeland 提供的拉取请求。
- en: 'References: [#9644](https://www.sqlalchemy.org/trac/ticket/9644)'
  id: totrans-3755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9644](https://www.sqlalchemy.org/trac/ticket/9644)
- en: postgresql
  id: totrans-3756
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug] [regression]**'
  id: totrans-3757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [regression]**'
- en: Fixed critical regression caused by [#9618](https://www.sqlalchemy.org/trac/ticket/9618),
    which modified the architecture of the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature for 2.0.10, which caused floating point values to lose all decimal places
    when being inserted using the insertmanyvalues feature with either the psycopg2
    or psycopg drivers.
  id: totrans-3758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于 [#9618](https://www.sqlalchemy.org/trac/ticket/9618) 引起的严重回归，该回归修改了 2.0.10
    版本中的 [insertmanyvalues](../glossary.html#term-insertmanyvalues) 功能的架构，导致使用 psycopg2
    或 psycopg 驱动程序的 insertmanyvalues 功能插入浮点值时丢失所有小数位。
- en: 'References: [#9701](https://www.sqlalchemy.org/trac/ticket/9701)'
  id: totrans-3759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9701](https://www.sqlalchemy.org/trac/ticket/9701)
- en: mssql
  id: totrans-3760
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-3761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Implemented the [`Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double") type for SQL Server, where it will render `DOUBLE PRECISION`
    at DDL time. This is implemented using a new MSSQL datatype [`DOUBLE_PRECISION`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DOUBLE_PRECISION
    "sqlalchemy.dialects.mssql.DOUBLE_PRECISION") which also may be used directly.
  id: totrans-3762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SQL Server 实现了 [`Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double") 类型，在 DDL 时间将呈现 `DOUBLE PRECISION`。 这是使用新的 MSSQL 数据类型
    [`DOUBLE_PRECISION`](../dialects/mssql.html#sqlalchemy.dialects.mssql.DOUBLE_PRECISION
    "sqlalchemy.dialects.mssql.DOUBLE_PRECISION") 实现的，也可以直接使用。
- en: oracle
  id: totrans-3763
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-3764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue in Oracle dialects where `Decimal` returning types such as [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") would return floating point values, rather than `Decimal`
    objects, when these columns were used in the [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") clause to return INSERTed values.
  id: totrans-3765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle 方言中的问题，当这些列在 [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") 子句中返回 INSERTed 值时，`Decimal` 返回类型（如
    [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")）将返回浮点值，而不是
    `Decimal` 对象。
- en: 2.0.10
  id: totrans-3766
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.10
- en: 'Released: April 21, 2023'
  id: totrans-3767
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023 年 4 月 21 日
- en: orm
  id: totrans-3768
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where various ORM-specific getters such as [`ORMExecuteState.is_column_load`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_column_load
    "sqlalchemy.orm.ORMExecuteState.is_column_load"), [`ORMExecuteState.is_relationship_load`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_relationship_load
    "sqlalchemy.orm.ORMExecuteState.is_relationship_load"), [`ORMExecuteState.loader_strategy_path`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.loader_strategy_path
    "sqlalchemy.orm.ORMExecuteState.loader_strategy_path") etc. would throw an `AttributeError`
    if the SQL statement itself were a “compound select” such as a UNION.
  id: totrans-3770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了各种ORM特定的获取器（如[`ORMExecuteState.is_column_load`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_column_load
    "sqlalchemy.orm.ORMExecuteState.is_column_load")，[`ORMExecuteState.is_relationship_load`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_relationship_load
    "sqlalchemy.orm.ORMExecuteState.is_relationship_load")，[`ORMExecuteState.loader_strategy_path`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.loader_strategy_path
    "sqlalchemy.orm.ORMExecuteState.loader_strategy_path")等）在SQL语句本身是“复合选择”（如UNION）时会抛出`AttributeError`的错误。
- en: 'This change is also **backported** to: 1.4.48'
  id: totrans-3771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.48
- en: 'References: [#9634](https://www.sqlalchemy.org/trac/ticket/9634)'
  id: totrans-3772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9634](https://www.sqlalchemy.org/trac/ticket/9634)
- en: '**[orm] [bug]**'
  id: totrans-3773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`declared_attr.directive()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.directive
    "sqlalchemy.orm.declared_attr.directive") modifier was not correctly honored for
    subclasses when applied to the `__mapper_args__` special method name, as opposed
    to direct use of [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr"). The two constructs should have identical runtime
    behaviors.
  id: totrans-3774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当应用于`__mapper_args__`特殊方法名时，[`declared_attr.directive()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.directive
    "sqlalchemy.orm.declared_attr.directive")修饰符未正确遵守子类的问题，而不是直接使用[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")。这两个构造应具有相同的运行时行为。
- en: 'References: [#9625](https://www.sqlalchemy.org/trac/ticket/9625)'
  id: totrans-3775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9625](https://www.sqlalchemy.org/trac/ticket/9625)
- en: '**[orm] [bug]**'
  id: totrans-3776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Made an improvement to the [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") loader option to allow it to be indicated
    in the [`Executable.options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") method of a top-level statement
    that is not itself an ORM statement. Examples include [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") that’s embedded in compound statements such
    as [`union()`](../core/selectable.html#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union"),
    within an [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") construct, as well as within CTE
    expressions that are not ORM related at the top level.
  id: totrans-3777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")加载器选项进行了改进，允许在不是ORM语句本身的顶层语句的[`Executable.options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options")方法中指示它。示例包括嵌入在复合语句中的[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")，在[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")构造中，以及在顶层不与ORM相关的CTE表达式中。
- en: 'References: [#9635](https://www.sqlalchemy.org/trac/ticket/9635)'
  id: totrans-3778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9635](https://www.sqlalchemy.org/trac/ticket/9635)
- en: '**[orm] [bug]**'
  id: totrans-3779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in ORM bulk insert feature where additional unnecessary columns would
    be rendered in the INSERT statement if RETURNING of individual columns were requested.
  id: totrans-3780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM批量插入功能中的错误，如果请求返回单独的列，则在INSERT语句中会渲染额外的不必要列。
- en: 'References: [#9685](https://www.sqlalchemy.org/trac/ticket/9685)'
  id: totrans-3781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9685](https://www.sqlalchemy.org/trac/ticket/9685)
- en: '**[orm] [bug]**'
  id: totrans-3782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in ORM Declarative Dataclasses where the [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") and [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") constructs, which are documented as read-only
    constructs in the context of a Declarative mapping, could not be used with a [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") class without adding `init=False`, which in
    the case of [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") was not possible as no `init` parameter was
    included. These constructs have been modified from a dataclass perspective to
    be assumed to be “read only”, setting `init=False` by default and no longer including
    them in the pep-681 constructor. The dataclass parameters for [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") `init`, `default`, `default_factory`, `kw_only`
    are now deprecated; these fields don’t apply to [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") as used in a Declarative dataclasses configuration
    where the construct would be read-only. Also added read-specific parameter [`query_expression.compare`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.compare
    "sqlalchemy.orm.query_expression") to [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression"); [`query_expression.repr`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.repr
    "sqlalchemy.orm.query_expression") was already present.
  id: totrans-3783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM声明式数据类中的错误，其中[`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression")和[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")构造被文档化为在声明式映射上下文中的只读构造，不能在没有添加`init=False`的情况下与[`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")类一起使用，因为在[`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression")的情况下未包含`init`参数，这是不可能的。 这些构造已从数据类的角度进行了修改，假定为“只读”，默认设置`init=False`，并且不再将它们包括在pep-681构造函数中。
    [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")的数据类参数`init`，`default`，`default_factory`，`kw_only`现已过时；
    这些字段不适用于在构造为只读的声明性数据类配置中使用的[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")。 还为[`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression")添加了仅读特定参数[`query_expression.compare`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.compare
    "sqlalchemy.orm.query_expression")； [`query_expression.repr`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.repr
    "sqlalchemy.orm.query_expression")已经存在。
- en: 'References: [#9628](https://www.sqlalchemy.org/trac/ticket/9628)'
  id: totrans-3784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9628](https://www.sqlalchemy.org/trac/ticket/9628)
- en: '**[orm] [bug]**'
  id: totrans-3785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added missing [`mapped_column.active_history`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.active_history
    "sqlalchemy.orm.mapped_column") parameter to [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct.
  id: totrans-3786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")构造中添加了丢失的[`mapped_column.active_history`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.active_history
    "sqlalchemy.orm.mapped_column")参数。
- en: engine
  id: totrans-3787
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [usecase]**'
  id: totrans-3788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [usecase]**'
- en: Added [`create_pool_from_url()`](../core/engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url") and [`create_async_pool_from_url()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_pool_from_url
    "sqlalchemy.ext.asyncio.create_async_pool_from_url") to create a [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") instance from an input url passed as string or `URL`.
  id: totrans-3789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了[`create_pool_from_url()`](../core/engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url")和[`create_async_pool_from_url()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_pool_from_url
    "sqlalchemy.ext.asyncio.create_async_pool_from_url")以从作为字符串或`URL`传递的输入url创建[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")实例。
- en: 'References: [#9613](https://www.sqlalchemy.org/trac/ticket/9613)'
  id: totrans-3790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9613](https://www.sqlalchemy.org/trac/ticket/9613)
- en: '**[engine] [bug]**'
  id: totrans-3791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Repaired a major shortcoming which was identified in the [“Insert Many Values”
    Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    performance optimization feature first introduced in the 2.0 series. This was
    a continuation of the change in 2.0.9 which disabled the SQL Server version of
    the feature due to a reliance in the ORM on apparent row ordering that is not
    guaranteed to take place. The fix applies new logic to all “insertmanyvalues”
    operations, which takes effect when a new parameter [`Insert.returning.sort_by_parameter_order`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") on the [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") or [`UpdateBase.return_defaults()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") methods, that through
    a combination of alternate SQL forms, direct correspondence of client side parameters,
    and in some cases downgrading to running row-at-a-time, will apply sorting to
    each batch of returned rows using correspondence to primary key or other unique
    values in each row which can be correlated to the input data.
  id: totrans-3792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在2.0系列中首次引入的[INSERT语句的“Insert Many Values”行为](../core/connections.html#engine-insertmanyvalues)性能优化功能中发现的一个主要缺陷。这是对2.0.9中的更改的延续，该更改禁用了SQL
    Server版本的功能，因为ORM依赖于明显的行排序，而这种排序不能保证发生。修复将新逻辑应用于所有“insertmanyvalues”操作，当在[`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning")或[`UpdateBase.return_defaults()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults")方法上设置了新参数[`Insert.returning.sort_by_parameter_order`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning")时生效，通过交替的SQL形式、客户端参数的直接对应以及在某些情况下降级到逐行运行，将对每个返回行批次应用排序，使用与每行中的主键或其他唯一值对应的值，这些值可以与输入数据相关联。
- en: Performance impact is expected to be minimal as nearly all common primary key
    scenarios are suitable for parameter-ordered batching to be achieved for all backends
    other than SQLite, while “row-at-a-time” mode operates with a bare minimum of
    Python overhead compared to the very heavyweight approaches used in the 1.x series.
    For SQLite, there is no difference in performance when “row-at-a-time” mode is
    used.
  id: totrans-3793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预计性能影响将是最小的，因为几乎所有常见的主键场景都适合于为所有后端实现参数排序的批处理，而“逐行”模式与1.x系列中使用的非常沉重的方法相比，具有最少的Python开销。对于SQLite，当使用“逐行”模式时，性能没有差异。
- en: It’s anticipated that with an efficient “row-at-a-time” INSERT with RETURNING
    batching capability, the “insertmanyvalues” feature can be later be more easily
    generalized to third party backends that include RETURNING support but not necessarily
    easy ways to guarantee a correspondence with parameter order.
  id: totrans-3794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预计通过高效的“逐行”插入与返回批处理功能，“insertmanyvalues”功能可以更容易地推广到第三方后端，这些后端包括返回支持但不一定易于保证与参数顺序对应的方式。
- en: See also
  id: totrans-3795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correlating RETURNING rows to parameter sets](../core/connections.html#engine-insertmanyvalues-returning-order)'
  id: totrans-3796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将返回的行与参数集相关联](../core/connections.html#engine-insertmanyvalues-returning-order)'
- en: 'References: [#9603](https://www.sqlalchemy.org/trac/ticket/9603), [#9618](https://www.sqlalchemy.org/trac/ticket/9618)'
  id: totrans-3797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9603](https://www.sqlalchemy.org/trac/ticket/9603), [#9618](https://www.sqlalchemy.org/trac/ticket/9618)
- en: typing
  id: totrans-3798
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-3799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Added typing information for recently added operators [`ColumnOperators.icontains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains"), [`ColumnOperators.istartswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"), [`ColumnOperators.iendswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"), and bitwise operators
    [`ColumnOperators.bitwise_and()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and"), [`ColumnOperators.bitwise_or()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or"), [`ColumnOperators.bitwise_xor()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor"), [`ColumnOperators.bitwise_not()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not"), [`ColumnOperators.bitwise_lshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") [`ColumnOperators.bitwise_rshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift"). Pull request courtesy
    Martijn Pieters.
  id: totrans-3800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为最近添加的运算符[`ColumnOperators.icontains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains")、[`ColumnOperators.istartswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")、[`ColumnOperators.iendswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")以及位运算符[`ColumnOperators.bitwise_and()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and")、[`ColumnOperators.bitwise_or()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or")、[`ColumnOperators.bitwise_xor()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor")、[`ColumnOperators.bitwise_not()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not")、[`ColumnOperators.bitwise_lshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift")、[`ColumnOperators.bitwise_rshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift")添加了类型信息。感谢Martijn Pieters的拉取请求。
- en: 'References: [#9650](https://www.sqlalchemy.org/trac/ticket/9650)'
  id: totrans-3801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9650](https://www.sqlalchemy.org/trac/ticket/9650)
- en: '**[typing] [bug]**'
  id: totrans-3802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [错误]**'
- en: Updates to the codebase to pass typing with Mypy 1.2.0.
  id: totrans-3803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新了代码库以通过Mypy 1.2.0进行类型检查。
- en: '**[typing] [bug]**'
  id: totrans-3804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [错误]**'
- en: Fixed typing issue where [`PropComparator.and_()`](../orm/internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") expressions would not be correctly typed
    inside of loader options such as [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload").
  id: totrans-3805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`PropComparator.and_()`](../orm/internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_")表达式在加载器选项中（如[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")）内部未正确类型化的问题。
- en: 'References: [#9669](https://www.sqlalchemy.org/trac/ticket/9669)'
  id: totrans-3806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9669](https://www.sqlalchemy.org/trac/ticket/9669)
- en: postgresql
  id: totrans-3807
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-3808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Added `prepared_statement_name_func` connection argument option in the asyncpg
    dialect. This option allows passing a callable used to customize the name of the
    prepared statement that will be created by the driver when executing queries.
    Pull request courtesy Pavel Sirotkin.
  id: totrans-3809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在asyncpg方言中添加了`prepared_statement_name_func`连接参数选项。此选项允许传递一个可调用对象，用于自定义驱动程序在执行查询时将创建的准备好的语句的名称。感谢Pavel
    Sirotkin的拉取请求。
- en: See also
  id: totrans-3810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Prepared Statement Name with PGBouncer](../dialects/postgresql.html#asyncpg-prepared-statement-name)'
  id: totrans-3811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用PGBouncer的准备好的语句名称](../dialects/postgresql.html#asyncpg-prepared-statement-name)'
- en: 'References: [#9608](https://www.sqlalchemy.org/trac/ticket/9608)'
  id: totrans-3812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9608](https://www.sqlalchemy.org/trac/ticket/9608)
- en: '**[postgresql] [usecase]**'
  id: totrans-3813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Add missing [`Range.intersection()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.intersection
    "sqlalchemy.dialects.postgresql.Range.intersection") method. Pull request courtesy
    Yurii Karabas.
  id: totrans-3814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了缺失的[`Range.intersection()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.intersection
    "sqlalchemy.dialects.postgresql.Range.intersection")方法。感谢Yurii Karabas的拉取请求。
- en: 'References: [#9509](https://www.sqlalchemy.org/trac/ticket/9509)'
  id: totrans-3815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9509](https://www.sqlalchemy.org/trac/ticket/9509)
- en: '**[postgresql] [bug]**'
  id: totrans-3816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Restored the [`ENUM.name`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.name
    "sqlalchemy.dialects.postgresql.ENUM") parameter as optional in the signature
    for [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM"),
    as this is chosen automatically from a given pep-435 `Enum` type.
  id: totrans-3817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")签名中的[`ENUM.name`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.name
    "sqlalchemy.dialects.postgresql.ENUM")参数作为可选参数，因为这是从给定的pep-435 `Enum`类型中自动选择的。
- en: 'References: [#9611](https://www.sqlalchemy.org/trac/ticket/9611)'
  id: totrans-3818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9611](https://www.sqlalchemy.org/trac/ticket/9611)
- en: '**[postgresql] [bug]**'
  id: totrans-3819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the comparison for [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") against a plain string would cast that
    right-hand side type as VARCHAR, which due to more explicit casting added to dialects
    such as asyncpg would produce a PostgreSQL type mismatch error.
  id: totrans-3820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")与普通字符串的比较，会将右侧类型转换为VARCHAR的问题，这是由于像asyncpg这样的方言添加了更明确的转换，会产生PostgreSQL类型不匹配错误。
- en: 'References: [#9621](https://www.sqlalchemy.org/trac/ticket/9621)'
  id: totrans-3821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9621](https://www.sqlalchemy.org/trac/ticket/9621)
- en: '**[postgresql] [bug]**'
  id: totrans-3822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue that prevented reflection of expression based indexes with long
    expressions in PostgreSQL. The expression where erroneously truncated to the identifier
    length (that’s 63 bytes by default).
  id: totrans-3823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在PostgreSQL中阻止基于表达式的长表达式的反射的问题。表达式错误地截断为标识符长度（默认为63字节）。
- en: 'References: [#9615](https://www.sqlalchemy.org/trac/ticket/9615)'
  id: totrans-3824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9615](https://www.sqlalchemy.org/trac/ticket/9615)
- en: mssql
  id: totrans-3825
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-3826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Restored the [insertmanyvalues](../glossary.html#term-insertmanyvalues) feature
    for Microsoft SQL Server. This feature was disabled in version 2.0.9 due to an
    apparent reliance on the ordering of RETURNING that is not guaranteed. The architecture
    of the “insertmanyvalues” feature has been reworked to accommodate for specific
    organizations of INSERT statements and result row handling that can guarantee
    the correspondence of returned rows to input records.
  id: totrans-3827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了Microsoft SQL Server的[insertmanyvalues](../glossary.html#term-insertmanyvalues)功能。该功能在版本2.0.9中被禁用，因为显然依赖于未保证的RETURNING排序。
    “insertmanyvalues”功能的架构已经重构，以适应INSERT语句的特定组织和可以保证返回行与输入记录对应的结果行处理。
- en: See also
  id: totrans-3828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Correlating RETURNING rows to parameter sets](../core/connections.html#engine-insertmanyvalues-returning-order)'
  id: totrans-3829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将RETURNING行与参数集相关联](../core/connections.html#engine-insertmanyvalues-returning-order)'
- en: 'References: [#9603](https://www.sqlalchemy.org/trac/ticket/9603), [#9618](https://www.sqlalchemy.org/trac/ticket/9618)'
  id: totrans-3830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9603](https://www.sqlalchemy.org/trac/ticket/9603), [#9618](https://www.sqlalchemy.org/trac/ticket/9618)
- en: oracle
  id: totrans-3831
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-3832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue where the [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype could not be used in an INSERT..RETURNING clause
    with the Oracle dialect.
  id: totrans-3833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")数据类型在Oracle方言的INSERT..RETURNING子句中无法使用的问题。
- en: orm
  id: totrans-3834
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where various ORM-specific getters such as [`ORMExecuteState.is_column_load`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_column_load
    "sqlalchemy.orm.ORMExecuteState.is_column_load"), [`ORMExecuteState.is_relationship_load`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_relationship_load
    "sqlalchemy.orm.ORMExecuteState.is_relationship_load"), [`ORMExecuteState.loader_strategy_path`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.loader_strategy_path
    "sqlalchemy.orm.ORMExecuteState.loader_strategy_path") etc. would throw an `AttributeError`
    if the SQL statement itself were a “compound select” such as a UNION.
  id: totrans-3836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了各种ORM特定的getter（例如[`ORMExecuteState.is_column_load`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_column_load
    "sqlalchemy.orm.ORMExecuteState.is_column_load")、[`ORMExecuteState.is_relationship_load`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.is_relationship_load
    "sqlalchemy.orm.ORMExecuteState.is_relationship_load")、[`ORMExecuteState.loader_strategy_path`](../orm/session_api.html#sqlalchemy.orm.ORMExecuteState.loader_strategy_path
    "sqlalchemy.orm.ORMExecuteState.loader_strategy_path")等）如果SQL语句本身是“复合选择”（例如UNION）时，会抛出`AttributeError`的错误。
- en: 'This change is also **backported** to: 1.4.48'
  id: totrans-3837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.4.48
- en: 'References: [#9634](https://www.sqlalchemy.org/trac/ticket/9634)'
  id: totrans-3838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9634](https://www.sqlalchemy.org/trac/ticket/9634)
- en: '**[orm] [bug]**'
  id: totrans-3839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`declared_attr.directive()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.directive
    "sqlalchemy.orm.declared_attr.directive") modifier was not correctly honored for
    subclasses when applied to the `__mapper_args__` special method name, as opposed
    to direct use of [`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr"). The two constructs should have identical runtime
    behaviors.
  id: totrans-3840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当应用于`__mapper_args__`特殊方法名时，[`declared_attr.directive()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr.directive
    "sqlalchemy.orm.declared_attr.directive")修改器未正确遵守子类的问题，而不是直接使用[`declared_attr`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")。这两种构造应具有相同的运行时行为。
- en: 'References: [#9625](https://www.sqlalchemy.org/trac/ticket/9625)'
  id: totrans-3841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9625](https://www.sqlalchemy.org/trac/ticket/9625)
- en: '**[orm] [bug]**'
  id: totrans-3842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Made an improvement to the [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") loader option to allow it to be indicated
    in the [`Executable.options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options") method of a top-level statement
    that is not itself an ORM statement. Examples include [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") that’s embedded in compound statements such
    as [`union()`](../core/selectable.html#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union"),
    within an [`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select") construct, as well as within CTE
    expressions that are not ORM related at the top level.
  id: totrans-3843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")加载选项进行了改进，允许在不是ORM语句本身的顶级语句的[`Executable.options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.options
    "sqlalchemy.sql.expression.Executable.options")方法中指定。示例包括嵌入在复合语句中的[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")，在[`Insert.from_select()`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select
    "sqlalchemy.sql.expression.Insert.from_select")构造中以及在顶级与ORM无关的CTE表达式中。
- en: 'References: [#9635](https://www.sqlalchemy.org/trac/ticket/9635)'
  id: totrans-3844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9635](https://www.sqlalchemy.org/trac/ticket/9635)
- en: '**[orm] [bug]**'
  id: totrans-3845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in ORM bulk insert feature where additional unnecessary columns would
    be rendered in the INSERT statement if RETURNING of individual columns were requested.
  id: totrans-3846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM批量插入功能中的错误，如果请求了单个列的RETURNING，则插入语句中将呈现额外的不必要列。
- en: 'References: [#9685](https://www.sqlalchemy.org/trac/ticket/9685)'
  id: totrans-3847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9685](https://www.sqlalchemy.org/trac/ticket/9685)
- en: '**[orm] [bug]**'
  id: totrans-3848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in ORM Declarative Dataclasses where the [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") and [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") constructs, which are documented as read-only
    constructs in the context of a Declarative mapping, could not be used with a [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") class without adding `init=False`, which in
    the case of [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") was not possible as no `init` parameter was
    included. These constructs have been modified from a dataclass perspective to
    be assumed to be “read only”, setting `init=False` by default and no longer including
    them in the pep-681 constructor. The dataclass parameters for [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") `init`, `default`, `default_factory`, `kw_only`
    are now deprecated; these fields don’t apply to [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") as used in a Declarative dataclasses configuration
    where the construct would be read-only. Also added read-specific parameter [`query_expression.compare`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.compare
    "sqlalchemy.orm.query_expression") to [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression"); [`query_expression.repr`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.repr
    "sqlalchemy.orm.query_expression") was already present.
  id: totrans-3849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM声明性数据类中的bug，其中[`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression")和[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")构造，在声明性映射的上下文中被记录为只读构造，不能在不添加`init=False`的情况下与[`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")类一起使用，因为在[`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression")的情况下不可能包含`init`参数。这些构造已经从数据类的角度进行了修改，被假定为“只读”，默认设置`init=False`，不再包括在pep-681构造函数中。对于[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")的数据类参数`init`、`default`、`default_factory`、`kw_only`现已被弃用；这些字段不适用于在声明性数据类配置中使用的[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")，其中该构造将是只读的。还为[`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression")添加了特定于读取的参数[`query_expression.compare`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.compare
    "sqlalchemy.orm.query_expression")；[`query_expression.repr`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression.params.repr
    "sqlalchemy.orm.query_expression")已经存在。
- en: 'References: [#9628](https://www.sqlalchemy.org/trac/ticket/9628)'
  id: totrans-3850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9628](https://www.sqlalchemy.org/trac/ticket/9628)
- en: '**[orm] [bug]**'
  id: totrans-3851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added missing [`mapped_column.active_history`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.active_history
    "sqlalchemy.orm.mapped_column") parameter to [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct.
  id: totrans-3852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")构造中添加了缺失的[`mapped_column.active_history`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.active_history
    "sqlalchemy.orm.mapped_column")参数。
- en: engine
  id: totrans-3853
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [usecase]**'
  id: totrans-3854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [usecase]**'
- en: Added [`create_pool_from_url()`](../core/engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url") and [`create_async_pool_from_url()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_pool_from_url
    "sqlalchemy.ext.asyncio.create_async_pool_from_url") to create a [`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool") instance from an input url passed as string or `URL`.
  id: totrans-3855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了[`create_pool_from_url()`](../core/engines.html#sqlalchemy.create_pool_from_url
    "sqlalchemy.create_pool_from_url")和[`create_async_pool_from_url()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_pool_from_url
    "sqlalchemy.ext.asyncio.create_async_pool_from_url")来从作为字符串或`URL`传递的输入url创建一个[`Pool`](../core/pooling.html#sqlalchemy.pool.Pool
    "sqlalchemy.pool.Pool")实例。
- en: 'References: [#9613](https://www.sqlalchemy.org/trac/ticket/9613)'
  id: totrans-3856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9613](https://www.sqlalchemy.org/trac/ticket/9613)
- en: '**[engine] [bug]**'
  id: totrans-3857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Repaired a major shortcoming which was identified in the [“Insert Many Values”
    Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    performance optimization feature first introduced in the 2.0 series. This was
    a continuation of the change in 2.0.9 which disabled the SQL Server version of
    the feature due to a reliance in the ORM on apparent row ordering that is not
    guaranteed to take place. The fix applies new logic to all “insertmanyvalues”
    operations, which takes effect when a new parameter [`Insert.returning.sort_by_parameter_order`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") on the [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") or [`UpdateBase.return_defaults()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") methods, that through
    a combination of alternate SQL forms, direct correspondence of client side parameters,
    and in some cases downgrading to running row-at-a-time, will apply sorting to
    each batch of returned rows using correspondence to primary key or other unique
    values in each row which can be correlated to the input data.
  id: totrans-3858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 2.0 系列中首次引入的 [“插入多个值”INSERT语句性能优化功能](../core/connections.html#engine-insertmanyvalues)
    中识别出的主要缺陷。这是对 2.0.9 中的更改的延续，该更改禁用了 SQL Server 版本的该功能，因为 ORM 依赖于不保证发生的明显行排序。该修复将新逻辑应用于所有“insertmanyvalues”操作，当在
    [`Insert.returning()`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning
    "sqlalchemy.sql.expression.Insert.returning") 或 [`UpdateBase.return_defaults()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.return_defaults
    "sqlalchemy.sql.expression.UpdateBase.return_defaults") 方法上设置了新参数[`Insert.returning.sort_by_parameter_order`](../core/dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") 时生效，通过交替的 SQL 表单、直接客户端参数对应以及在某些情况下降级到逐行运行，将对返回的每批行应用排序，使用与每行中的主键或其他唯一值的对应关系与输入数据相关联。
- en: Performance impact is expected to be minimal as nearly all common primary key
    scenarios are suitable for parameter-ordered batching to be achieved for all backends
    other than SQLite, while “row-at-a-time” mode operates with a bare minimum of
    Python overhead compared to the very heavyweight approaches used in the 1.x series.
    For SQLite, there is no difference in performance when “row-at-a-time” mode is
    used.
  id: totrans-3859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预期性能影响将是最小的，因为几乎所有常见的主键场景都适用于为所有后端实现参数排序的批处理，除了 SQLite，而“逐行”模式与 1.x 系列中使用的非常重量级的方法相比，具有最小的
    Python 开销。对于 SQLite，在使用“逐行”模式时，性能没有区别。
- en: It’s anticipated that with an efficient “row-at-a-time” INSERT with RETURNING
    batching capability, the “insertmanyvalues” feature can be later be more easily
    generalized to third party backends that include RETURNING support but not necessarily
    easy ways to guarantee a correspondence with parameter order.
  id: totrans-3860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 预计通过高效的“逐行”插入与具有 RETURNING 支持但不一定易于保证与参数顺序对应的第三方后端的批处理能力，“insertmanyvalues”功能将更容易地推广到第三方后端。
- en: See also
  id: totrans-3861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Correlating RETURNING rows to parameter sets](../core/connections.html#engine-insertmanyvalues-returning-order)'
  id: totrans-3862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将RETURNING行与参数集相关联](../core/connections.html#engine-insertmanyvalues-returning-order)'
- en: 'References: [#9603](https://www.sqlalchemy.org/trac/ticket/9603), [#9618](https://www.sqlalchemy.org/trac/ticket/9618)'
  id: totrans-3863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9603](https://www.sqlalchemy.org/trac/ticket/9603), [#9618](https://www.sqlalchemy.org/trac/ticket/9618)
- en: typing
  id: totrans-3864
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入
- en: '**[typing] [bug]**'
  id: totrans-3865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Added typing information for recently added operators [`ColumnOperators.icontains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains"), [`ColumnOperators.istartswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"), [`ColumnOperators.iendswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"), and bitwise operators
    [`ColumnOperators.bitwise_and()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and"), [`ColumnOperators.bitwise_or()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or"), [`ColumnOperators.bitwise_xor()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor"), [`ColumnOperators.bitwise_not()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not"), [`ColumnOperators.bitwise_lshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") [`ColumnOperators.bitwise_rshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift"). Pull request courtesy
    Martijn Pieters.
  id: totrans-3866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为最近添加的运算符[`ColumnOperators.icontains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains")、[`ColumnOperators.istartswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith")、[`ColumnOperators.iendswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith") 和位运算符[`ColumnOperators.bitwise_and()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_and
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_and")、[`ColumnOperators.bitwise_or()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_or
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_or")、[`ColumnOperators.bitwise_xor()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_xor
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_xor")、[`ColumnOperators.bitwise_not()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_not
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_not")、[`ColumnOperators.bitwise_lshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_lshift") 和 [`ColumnOperators.bitwise_rshift()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift
    "sqlalchemy.sql.expression.ColumnOperators.bitwise_rshift") 添加了类型信息。拉取请求由 Martijn
    Pieters 提供。
- en: 'References: [#9650](https://www.sqlalchemy.org/trac/ticket/9650)'
  id: totrans-3867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9650](https://www.sqlalchemy.org/trac/ticket/9650)
- en: '**[typing] [bug]**'
  id: totrans-3868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [错误]**'
- en: Updates to the codebase to pass typing with Mypy 1.2.0.
  id: totrans-3869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新代码库以通过 Mypy 1.2.0 进行类型检查。
- en: '**[typing] [bug]**'
  id: totrans-3870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [错误]**'
- en: Fixed typing issue where [`PropComparator.and_()`](../orm/internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") expressions would not be correctly typed
    inside of loader options such as [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload").
  id: totrans-3871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`PropComparator.and_()`](../orm/internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") 表达式在诸如[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")等加载器选项内未正确类型化的问题。
- en: 'References: [#9669](https://www.sqlalchemy.org/trac/ticket/9669)'
  id: totrans-3872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9669](https://www.sqlalchemy.org/trac/ticket/9669)
- en: postgresql
  id: totrans-3873
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-3874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Added `prepared_statement_name_func` connection argument option in the asyncpg
    dialect. This option allows passing a callable used to customize the name of the
    prepared statement that will be created by the driver when executing queries.
    Pull request courtesy Pavel Sirotkin.
  id: totrans-3875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 asyncpg 方言中添加了 `prepared_statement_name_func` 连接参数选项。此选项允许传递一个可调用对象，用于自定义驱动程序在执行查询时将创建的准备语句的名称。拉取请求由
    Pavel Sirotkin 提供。
- en: See also
  id: totrans-3876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Prepared Statement Name with PGBouncer](../dialects/postgresql.html#asyncpg-prepared-statement-name)'
  id: totrans-3877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 PGBouncer 的预处理语句名称](../dialects/postgresql.html#asyncpg-prepared-statement-name)'
- en: 'References: [#9608](https://www.sqlalchemy.org/trac/ticket/9608)'
  id: totrans-3878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9608](https://www.sqlalchemy.org/trac/ticket/9608)
- en: '**[postgresql] [usecase]**'
  id: totrans-3879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Add missing [`Range.intersection()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.intersection
    "sqlalchemy.dialects.postgresql.Range.intersection") method. Pull request courtesy
    Yurii Karabas.
  id: totrans-3880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了缺失的 [`Range.intersection()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.intersection
    "sqlalchemy.dialects.postgresql.Range.intersection") 方法。拉取请求由 Yurii Karabas 提供。
- en: 'References: [#9509](https://www.sqlalchemy.org/trac/ticket/9509)'
  id: totrans-3881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9509](https://www.sqlalchemy.org/trac/ticket/9509)
- en: '**[postgresql] [bug]**'
  id: totrans-3882
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Restored the [`ENUM.name`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.name
    "sqlalchemy.dialects.postgresql.ENUM") parameter as optional in the signature
    for [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM "sqlalchemy.dialects.postgresql.ENUM"),
    as this is chosen automatically from a given pep-435 `Enum` type.
  id: totrans-3883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了 [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 的签名中的可选参数 [`ENUM.name`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.name
    "sqlalchemy.dialects.postgresql.ENUM") ，因为这会自动从给定的 pep-435 `Enum` 类型中选择。
- en: 'References: [#9611](https://www.sqlalchemy.org/trac/ticket/9611)'
  id: totrans-3884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9611](https://www.sqlalchemy.org/trac/ticket/9611)
- en: '**[postgresql] [bug]**'
  id: totrans-3885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue where the comparison for [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") against a plain string would cast that
    right-hand side type as VARCHAR, which due to more explicit casting added to dialects
    such as asyncpg would produce a PostgreSQL type mismatch error.
  id: totrans-3886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对 plain string 的 [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 的比较会将右侧类型转换为 VARCHAR 的问题，由于像 asyncpg 这样的方言添加了更明确的转换，这会产生
    PostgreSQL 类型不匹配错误。
- en: 'References: [#9621](https://www.sqlalchemy.org/trac/ticket/9621)'
  id: totrans-3887
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9621](https://www.sqlalchemy.org/trac/ticket/9621)
- en: '**[postgresql] [bug]**'
  id: totrans-3888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed issue that prevented reflection of expression based indexes with long
    expressions in PostgreSQL. The expression where erroneously truncated to the identifier
    length (that’s 63 bytes by default).
  id: totrans-3889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL 中基于表达式的索引的反射问题，当表达式过长时会出现问题。表达式错误地被截断为标识符长度（默认为 63 字节）。
- en: 'References: [#9615](https://www.sqlalchemy.org/trac/ticket/9615)'
  id: totrans-3890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9615](https://www.sqlalchemy.org/trac/ticket/9615)
- en: mssql
  id: totrans-3891
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-3892
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Restored the [insertmanyvalues](../glossary.html#term-insertmanyvalues) feature
    for Microsoft SQL Server. This feature was disabled in version 2.0.9 due to an
    apparent reliance on the ordering of RETURNING that is not guaranteed. The architecture
    of the “insertmanyvalues” feature has been reworked to accommodate for specific
    organizations of INSERT statements and result row handling that can guarantee
    the correspondence of returned rows to input records.
  id: totrans-3893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了 Microsoft SQL Server 中 [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    功能。该功能在版本 2.0.9 中被禁用，因为似乎依赖于不能保证的 RETURNING 的排序。"insertmanyvalues" 功能的架构已经重新设计，以适应
    INSERT 语句的特定组织和结果行处理，可以保证返回的行与输入记录的对应关系。
- en: See also
  id: totrans-3894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Correlating RETURNING rows to parameter sets](../core/connections.html#engine-insertmanyvalues-returning-order)'
  id: totrans-3895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 RETURNING 行与参数集相关联](../core/connections.html#engine-insertmanyvalues-returning-order)'
- en: 'References: [#9603](https://www.sqlalchemy.org/trac/ticket/9603), [#9618](https://www.sqlalchemy.org/trac/ticket/9618)'
  id: totrans-3896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9603](https://www.sqlalchemy.org/trac/ticket/9603), [#9618](https://www.sqlalchemy.org/trac/ticket/9618)
- en: oracle
  id: totrans-3897
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-3898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue where the [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype could not be used in an INSERT..RETURNING clause
    with the Oracle dialect.
  id: totrans-3899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Oracle 方言中无法在 INSERT..RETURNING 子句中使用 [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") 数据类型的问题。
- en: 2.0.9
  id: totrans-3900
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.9
- en: 'Released: April 5, 2023'
  id: totrans-3901
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023 年 4 月 5 日
- en: orm
  id: totrans-3902
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed endless loop which could occur when using “relationship to aliased class”
    feature and also indicating a recursive eager loader such as `lazy="selectinload"`
    in the loader, in combination with another eager loader on the opposite side.
    The check for cycles has been fixed to include aliased class relationships.
  id: totrans-3904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用“别名类关系”功能并在加载器中指定递归的 eager loader（如 `lazy="selectinload"`）时可能发生的无限循环。已经修复了检查循环是否包括别名类关系的问题。
- en: 'This change is also **backported** to: 1.4.48'
  id: totrans-3905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也被**回溯**到：1.4.48
- en: 'References: [#9590](https://www.sqlalchemy.org/trac/ticket/9590)'
  id: totrans-3906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9590](https://www.sqlalchemy.org/trac/ticket/9590)
- en: mariadb
  id: totrans-3907
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mariadb
- en: '**[mariadb] [bug]**'
  id: totrans-3908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [bug]**'
- en: Added `row_number` as reserved word in MariaDb.
  id: totrans-3909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MariaDb 中添加了 `row_number` 作为保留字。
- en: 'References: [#9588](https://www.sqlalchemy.org/trac/ticket/9588)'
  id: totrans-3910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9588](https://www.sqlalchemy.org/trac/ticket/9588)
- en: mssql
  id: totrans-3911
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-3912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: The SQLAlchemy “insertmanyvalues” feature which allows fast INSERT of many rows
    while also supporting RETURNING is temporarily disabled for SQL Server. As the
    unit of work currently relies upon this feature such that it matches existing
    ORM objects to returned primary key identities, this particular use pattern does
    not work with SQL Server in all cases as the order of rows returned by “OUTPUT
    inserted” may not always match the order in which the tuples were sent, leading
    to the ORM making the wrong decisions about these objects in subsequent operations.
  id: totrans-3913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy的“insertmanyvalues”功能允许快速插入多行数据，同时支持RETURNING，在SQL Server上暂时禁用。由于工作单元目前依赖于此功能，使其匹配现有的ORM对象与返回的主键标识，这种特定的使用模式在某些情况下与SQL
    Server不兼容，因为“OUTPUT inserted”返回的行的顺序可能不总是与发送的元组的顺序相匹配，导致ORM在后续操作中对这些对象做出错误决定。
- en: The feature will be re-enabled in an upcoming release and will again take effect
    for multi-row INSERT statements, however the unit-of-work’s use of the feature
    will be disabled, possibly for all dialects, unless ORM-mapped tables also include
    a “sentinel” column so that the returned rows can be referenced back to the original
    data passed in.
  id: totrans-3914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此功能将在即将发布的版本中重新启用，并将再次对多行INSERT语句生效，但是工作单元对该功能的使用将被禁用，可能对所有方言都禁用，除非ORM映射的表也包括一个“sentinel”列，以便将返回的行引用回传入的原始数据。
- en: 'References: [#9603](https://www.sqlalchemy.org/trac/ticket/9603)'
  id: totrans-3915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9603](https://www.sqlalchemy.org/trac/ticket/9603)
- en: '**[mssql] [bug]**'
  id: totrans-3916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Changed the bulk INSERT strategy used for SQL Server “executemany” with pyodbc
    when `fast_executemany` is set to `True` by using `fast_executemany` / `cursor.executemany()`
    for bulk INSERT that does not include RETURNING, restoring the same behavior as
    was used in SQLAlchemy 1.4 when this parameter is set.
  id: totrans-3917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了在设置`fast_executemany`为`True`时用于SQL Server“executemany”的批量INSERT策略，通过使用`fast_executemany`
    / `cursor.executemany()`来进行批量INSERT，不包括RETURNING，恢复了当此参数设置时使用的与SQLAlchemy 1.4相同的行为。
- en: New performance details from end users have shown that `fast_executemany` is
    still much faster for very large datasets as it uses ODBC commands that can receive
    all rows in a single round trip, allowing for much larger datasizes than the batches
    that can be sent by “insertmanyvalues” as was implemented for SQL Server.
  id: totrans-3918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终用户提供的新性能细节显示，对于非常大的数据集，`fast_executemany`仍然比“insertmanyvalues”更快，因为它使用可以在单次往返中接收所有行的ODBC命令，允许比SQL
    Server实现的批量发送的数据大小大得多。
- en: While this change was made such that “insertmanyvalues” continued to be used
    for INSERT that includes RETURNING, as well as if `fast_executemany` were not
    set, due to [#9603](https://www.sqlalchemy.org/trac/ticket/9603), the “insertmanyvalues”
    strategy has been disabled for SQL Server across the board in any case.
  id: totrans-3919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管进行了此更改以使“insertmanyvalues”继续用于包含RETURNING的INSERT，以及如果未设置`fast_executemany`，但由于[#9603](https://www.sqlalchemy.org/trac/ticket/9603)，“insertmanyvalues”策略已在任何情况下禁用了SQL
    Server。
- en: 'References: [#9586](https://www.sqlalchemy.org/trac/ticket/9586)'
  id: totrans-3920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9586](https://www.sqlalchemy.org/trac/ticket/9586)
- en: orm
  id: totrans-3921
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-3922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed endless loop which could occur when using “relationship to aliased class”
    feature and also indicating a recursive eager loader such as `lazy="selectinload"`
    in the loader, in combination with another eager loader on the opposite side.
    The check for cycles has been fixed to include aliased class relationships.
  id: totrans-3923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用“关联到别名类”功能时可能发生的无限循环问题，同时在加载器中指示了递归急加载器，例如`lazy="selectinload"`，与另一个相对立的急加载器组合使用时。检查循环的代码已修复以包括别名类关系。
- en: 'This change is also **backported** to: 1.4.48'
  id: totrans-3924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**被回溯**到：1.4.48
- en: 'References: [#9590](https://www.sqlalchemy.org/trac/ticket/9590)'
  id: totrans-3925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9590](https://www.sqlalchemy.org/trac/ticket/9590)
- en: mariadb
  id: totrans-3926
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mariadb
- en: '**[mariadb] [bug]**'
  id: totrans-3927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [bug]**'
- en: Added `row_number` as reserved word in MariaDb.
  id: totrans-3928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MariaDb中添加了`row_number`作为保留字。
- en: 'References: [#9588](https://www.sqlalchemy.org/trac/ticket/9588)'
  id: totrans-3929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9588](https://www.sqlalchemy.org/trac/ticket/9588)
- en: mssql
  id: totrans-3930
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-3931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: The SQLAlchemy “insertmanyvalues” feature which allows fast INSERT of many rows
    while also supporting RETURNING is temporarily disabled for SQL Server. As the
    unit of work currently relies upon this feature such that it matches existing
    ORM objects to returned primary key identities, this particular use pattern does
    not work with SQL Server in all cases as the order of rows returned by “OUTPUT
    inserted” may not always match the order in which the tuples were sent, leading
    to the ORM making the wrong decisions about these objects in subsequent operations.
  id: totrans-3932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy的“insertmanyvalues”功能，允许快速插入多行数据同时支持RETURNING，暂时在SQL Server上被禁用。由于工作单元目前依赖于此功能，以便将现有ORM对象与返回的主键标识匹配，这种特定的使用模式在某些情况下与SQL
    Server不兼容，因为“OUTPUT inserted”返回的行的顺序可能不总是与发送的元组的顺序匹配，导致ORM在后续操作中对这些对象做出错误决策。
- en: The feature will be re-enabled in an upcoming release and will again take effect
    for multi-row INSERT statements, however the unit-of-work’s use of the feature
    will be disabled, possibly for all dialects, unless ORM-mapped tables also include
    a “sentinel” column so that the returned rows can be referenced back to the original
    data passed in.
  id: totrans-3933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该功能将在即将发布的版本中重新启用，并且将再次对多行INSERT语句生效，但是除非ORM映射的表也包括一个“sentinel”列，以便返回的行可以被引用回传递的原始数据，否则该功能将被禁用，可能对所有方言都禁用。
- en: 'References: [#9603](https://www.sqlalchemy.org/trac/ticket/9603)'
  id: totrans-3934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9603](https://www.sqlalchemy.org/trac/ticket/9603)
- en: '**[mssql] [bug]**'
  id: totrans-3935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Changed the bulk INSERT strategy used for SQL Server “executemany” with pyodbc
    when `fast_executemany` is set to `True` by using `fast_executemany` / `cursor.executemany()`
    for bulk INSERT that does not include RETURNING, restoring the same behavior as
    was used in SQLAlchemy 1.4 when this parameter is set.
  id: totrans-3936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当`fast_executemany`设置为`True`时，使用pyodbc为SQL Server执行批量INSERT的“executemany”策略已更改为使用`fast_executemany`
    / `cursor.executemany()`，用于不包含RETURNING的批量INSERT，恢复了在设置此参数时在SQLAlchemy 1.4中使用的相同行为。
- en: New performance details from end users have shown that `fast_executemany` is
    still much faster for very large datasets as it uses ODBC commands that can receive
    all rows in a single round trip, allowing for much larger datasizes than the batches
    that can be sent by “insertmanyvalues” as was implemented for SQL Server.
  id: totrans-3937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终用户提供的新性能细节显示，对于非常大的数据集，`fast_executemany`仍然比“insertmanyvalues”更快，因为它使用可以在单次往返中接收所有行的ODBC命令，允许比SQL
    Server实现的批量发送的数据量大得多。
- en: While this change was made such that “insertmanyvalues” continued to be used
    for INSERT that includes RETURNING, as well as if `fast_executemany` were not
    set, due to [#9603](https://www.sqlalchemy.org/trac/ticket/9603), the “insertmanyvalues”
    strategy has been disabled for SQL Server across the board in any case.
  id: totrans-3938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管此更改是为了使“insertmanyvalues”继续用于包含RETURNING的INSERT，以及如果未设置`fast_executemany`，但由于[#9603](https://www.sqlalchemy.org/trac/ticket/9603)，在任何情况下，“insertmanyvalues”策略已在SQL
    Server上被禁用。
- en: 'References: [#9586](https://www.sqlalchemy.org/trac/ticket/9586)'
  id: totrans-3939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9586](https://www.sqlalchemy.org/trac/ticket/9586)
- en: 2.0.8
  id: totrans-3940
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.8
- en: 'Released: March 31, 2023'
  id: totrans-3941
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年3月31日
- en: orm
  id: totrans-3942
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-3943
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Exceptions such as `TypeError` and `ValueError` raised by Python dataclasses
    when making use of the [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") mixin class or [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") decorator are now wrapped within
    an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") wrapper along with informative context about
    the error message, referring to the Python dataclasses documentation as the authoritative
    source of background information on the cause of the exception.
  id: totrans-3944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")混合类或[`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass")装饰器时，Python dataclasses引发的`TypeError`和`ValueError`等异常现在会被包装在一个带有有关错误消息的信息性上下文的[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")包装器中，指向Python dataclasses文档作为异常原因的背景信息的权威来源。
- en: See also
  id: totrans-3945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Python dataclasses error encountered when creating dataclass for <classname>](../errors.html#error-dcte)'
  id: totrans-3946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为<classname>创建数据类时遇到的Python dataclasses错误](../errors.html#error-dcte)'
- en: 'References: [#9563](https://www.sqlalchemy.org/trac/ticket/9563)'
  id: totrans-3947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9563](https://www.sqlalchemy.org/trac/ticket/9563)
- en: '**[orm] [bug]**'
  id: totrans-3948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in ORM Annotated Declarative where using a recursive type (e.g.
    using a nested Dict type) would result in a recursion overflow in the ORM’s annotation
    resolution logic, even if this datatype were not necessary to map the column.
  id: totrans-3949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 ORM Annotated Declarative 中使用递归类型（例如使用嵌套的字典类型）会导致 ORM 的注释解析逻辑中发生递归溢出的问题，即使此数据类型对于映射列并非必需。
- en: 'References: [#9553](https://www.sqlalchemy.org/trac/ticket/9553)'
  id: totrans-3950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9553](https://www.sqlalchemy.org/trac/ticket/9553)
- en: '**[orm] [bug]**'
  id: totrans-3951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct would raise an internal error if used
    on a Declarative mixin and included the [`mapped_column.deferred`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column") parameter.
  id: totrans-3952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Declarative 混合中使用 [`mapped_column.deferred`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column") 参数时，[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 结构会引发内部错误的问题。
- en: 'References: [#9550](https://www.sqlalchemy.org/trac/ticket/9550)'
  id: totrans-3953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9550](https://www.sqlalchemy.org/trac/ticket/9550)
- en: '**[orm] [bug]**'
  id: totrans-3954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Expanded the warning emitted when a plain [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") object is present in a Declarative mapping
    to include any arbitrary SQL expression that is not declared within an appropriate
    property type such as [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), [`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred"), etc. These attributes are otherwise not mapped at
    all and remain unchanged within the class dictionary. As it seems likely that
    such an expression is usually not what’s intended, this case now warns for all
    such otherwise ignored expressions, rather than just the [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") case.
  id: totrans-3955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 扩展了当在 Declarative 映射中存在一个纯 [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") 对象时发出的警告，以包括任何未在适当属性类型中声明的任意 SQL 表达式，例如 [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")、[`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") 等。这些属性否则根本不被映射，并且在类字典中保持不变。由于这种表达式通常不是预期的情况，因此现在对所有这些否则被忽略的表达式发出警告，而不仅仅是
    [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    情况。
- en: 'References: [#9537](https://www.sqlalchemy.org/trac/ticket/9537)'
  id: totrans-3956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9537](https://www.sqlalchemy.org/trac/ticket/9537)
- en: '**[orm] [bug]**'
  id: totrans-3957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where accessing the expression value of a hybrid property on
    a class that was either unmapped or not-yet-mapped (such as calling upon it within
    a [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    method) would raise an internal error, as an internal fetch for the parent class’
    mapper would fail and an instruction for this failure to be ignored were inadvertently
    removed in 2.0.
  id: totrans-3958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，在一个未映射或尚未映射的类上访问混合属性的表达式值（例如，在[`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")方法中调用它）会引发内部错误，因为对父类映射器的内部获取将失败，并且这种失败的指示在 2.0
    中被意外删除。
- en: 'References: [#9519](https://www.sqlalchemy.org/trac/ticket/9519)'
  id: totrans-3959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9519](https://www.sqlalchemy.org/trac/ticket/9519)
- en: '**[orm] [bug]**'
  id: totrans-3960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fields that are declared on Declarative Mixins and then combined with classes
    that make use of [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass"), where those mixin fields are not themselves
    part of a dataclass, now emit a deprecation warning as these fields will be ignored
    in a future release, as Python dataclasses behavior is to ignore these fields.
    Type checkers will not see these fields under pep-681.
  id: totrans-3961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Declarative Mixins 上声明的字段，然后与使用 [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") 的类组合，其中这些混合字段本身不是数据类的一部分，现在会发出弃用警告，因为在将来的版本中将会忽略这些字段，因为
    Python 数据类的行为是忽略这些字段。类型检查器不会在 pep-681 下看到这些字段。
- en: See also
  id: totrans-3962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[When transforming <cls> to a dataclass, attribute(s) originate from superclass
    <cls> which is not a dataclass.](../errors.html#error-dcmx) - background on rationale'
  id: totrans-3963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 <cls> 转换为数据类时，属性来源于不是数据类的超类 <cls>。](../errors.html#error-dcmx) - 背景理由'
- en: '[Using mixins and abstract superclasses](../orm/dataclasses.html#orm-declarative-dc-mixins)'
  id: totrans-3964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用混合和抽象超类](../orm/dataclasses.html#orm-declarative-dc-mixins)'
- en: 'References: [#9350](https://www.sqlalchemy.org/trac/ticket/9350)'
  id: totrans-3965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9350](https://www.sqlalchemy.org/trac/ticket/9350)
- en: '**[orm] [bug]**'
  id: totrans-3966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`BindParameter.render_literal_execute()`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute") method would
    fail when called on a parameter that also had ORM annotations associated with
    it. In practice, this would be observed as a failure of SQL compilation when using
    some combinations of a dialect that uses “FETCH FIRST” such as Oracle along with
    a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct that uses [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit"), within some ORM contexts, including
    if the statement were embedded within a relationship primaryjoin expression.
  id: totrans-3967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即当调用具有ORM注释的参数的[`BindParameter.render_literal_execute()`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute")方法时会失败。在实践中，当使用一些使用“FETCH
    FIRST”（如Oracle）的方言与使用[`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit")的[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造的某些组合时，会观察到SQL编译失败，包括在某些ORM上下文中，包括如果语句嵌入在关系主连接表达式中。
- en: 'References: [#9526](https://www.sqlalchemy.org/trac/ticket/9526)'
  id: totrans-3968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9526](https://www.sqlalchemy.org/trac/ticket/9526)
- en: '**[orm] [bug]**'
  id: totrans-3969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Towards maintaining consistency with unit-of-work changes made for [#5984](https://www.sqlalchemy.org/trac/ticket/5984)
    and [#8862](https://www.sqlalchemy.org/trac/ticket/8862), both of which disable
    “lazy=’raise’” handling within [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") processes that aren’t triggered by attribute access,
    the [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") method will now also disable “lazy=’raise’” handling
    when it traverses relationship paths in order to process the “delete” and “delete-orphan”
    cascade rules. Previously, there was no easy way to generically call [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") on an object that had “lazy=’raise’” set up such
    that only the necessary relationships would be loaded. As “lazy=’raise’” is primarily
    intended to catch SQL loading that emits on attribute access, [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") is now made to behave like other [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") methods including [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") as well as [`Session.flush()`](../orm/session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") along with autoflush.
  id: totrans-3970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了与为[#5984](https://www.sqlalchemy.org/trac/ticket/5984)和[#8862](https://www.sqlalchemy.org/trac/ticket/8862)所做的工作单元一致性更改保持一致，这两个更改禁用了在[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")进程中“lazy='raise'”处理，这些进程不是由属性访问触发的，[`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete")方法现在也会在遍历关系路径以处理“delete”和“delete-orphan”级联规则时禁用“lazy='raise'”处理。以前，没有简单的方法可以通用地调用具有设置了“lazy='raise'”的对象的[`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete")，以便仅加载必要的关系。由于“lazy='raise'”主要用于捕获在属性访问时发出的SQL加载，[`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete")现在被制作成像其他[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")方法一样，包括[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")以及[`Session.flush()`](../orm/session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")以及自动刷新。
- en: 'References: [#9549](https://www.sqlalchemy.org/trac/ticket/9549)'
  id: totrans-3971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9549](https://www.sqlalchemy.org/trac/ticket/9549)
- en: '**[orm] [bug]**'
  id: totrans-3972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where an annotation-only [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") directive could not be used in a Declarative mixin class,
    without that attribute attempting to take effect for single- or joined-inheritance
    subclasses of mapped classes that had already mapped that attribute on a superclass,
    producing conflicting column errors and/or warnings.
  id: totrans-3973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即只有注释的[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")指令无法在声明性混合类中使用，而不会导致已经在超类上映射了该属性的映射类的单个或联接继承子类尝试生效，从而产生冲突的列错误和/或警告。
- en: 'References: [#9564](https://www.sqlalchemy.org/trac/ticket/9564)'
  id: totrans-3974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9564](https://www.sqlalchemy.org/trac/ticket/9564)
- en: '**[orm] [bug] [typing]**'
  id: totrans-3975
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误] [类型]**'
- en: Properly type [`Insert.from_select.names`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select.params.names
    "sqlalchemy.sql.expression.Insert.from_select") to accept a list of string or
    columns or mapped attributes.
  id: totrans-3976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了 [`Insert.from_select.names`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select.params.names
    "sqlalchemy.sql.expression.Insert.from_select") 的类型，以接受字符串、列或映射属性的列表。
- en: 'References: [#9514](https://www.sqlalchemy.org/trac/ticket/9514)'
  id: totrans-3977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9514](https://www.sqlalchemy.org/trac/ticket/9514)
- en: examples
  id: totrans-3978
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-3979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Fixed issue in “versioned history” example where using a declarative base that
    is derived from [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") would fail to be mapped. Additionally, repaired
    the given test suite so that the documented instructions for running the example
    using Python unittest now work again.
  id: totrans-3980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“版本化历史”示例中使用从 [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") 派生的声明基类会失败映射的问题。此外，修复了给定的测试套件，以便通过 Python unittest
    运行示例的文档说明现在再次有效。
- en: typing
  id: totrans-3981
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型
- en: '**[typing] [bug]**'
  id: totrans-3982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [错误]**'
- en: Fixed typing for [`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") and [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") to work correctly with 2.0 style mappings.
  id: totrans-3983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred "sqlalchemy.orm.deferred")
    和 [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") 的类型，使其与 2.0 风格的映射正确工作。
- en: 'References: [#9536](https://www.sqlalchemy.org/trac/ticket/9536)'
  id: totrans-3984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9536](https://www.sqlalchemy.org/trac/ticket/9536)
- en: postgresql
  id: totrans-3985
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-3986
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed critical regression in PostgreSQL dialects such as asyncpg which rely
    upon explicit casts in SQL in order for datatypes to be passed to the driver correctly,
    where a [`String`](../core/type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    datatype would be cast along with the exact column length being compared, leading
    to implicit truncation when comparing a `VARCHAR` of a smaller length to a string
    of greater length regardless of operator in use (e.g. LIKE, MATCH, etc.). The
    PostgreSQL dialect now omits the length from `VARCHAR` when rendering these casts.
  id: totrans-3987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 PostgreSQL 方言中的关键回归，例如 asyncpg 依赖于 SQL 中的显式转换，以便正确传递数据类型给驱动程序的问题，其中 [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") 数据类型将与要比较的确切列长度一起转换，导致在比较较小长度的 `VARCHAR` 与较大长度的字符串时，无论使用的操作符如何（例如
    LIKE、MATCH 等），都会导致隐式截断。现在，PostgreSQL 方言在呈现这些转换时省略了 `VARCHAR` 的长度。
- en: 'References: [#9511](https://www.sqlalchemy.org/trac/ticket/9511)'
  id: totrans-3988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9511](https://www.sqlalchemy.org/trac/ticket/9511)
- en: mysql
  id: totrans-3989
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-3990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误]** '
- en: Fixed issue where string datatypes such as [`CHAR`](../core/type_basics.html#sqlalchemy.types.CHAR
    "sqlalchemy.types.CHAR"), [`VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR"), [`TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT"), as well as binary [`BLOB`](../core/type_basics.html#sqlalchemy.types.BLOB
    "sqlalchemy.types.BLOB"), could not be produced with an explicit length of zero,
    which has special meaning for MySQL. Pull request courtesy J. Nick Koston.
  id: totrans-3991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了字符串数据类型（如 [`CHAR`](../core/type_basics.html#sqlalchemy.types.CHAR "sqlalchemy.types.CHAR")、[`VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR")、[`TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT")）以及二进制 [`BLOB`](../core/type_basics.html#sqlalchemy.types.BLOB
    "sqlalchemy.types.BLOB") 不能以零长度显式生成的问题，这在 MySQL 中具有特殊含义。感谢 J. Nick Koston 提交的拉取请求。
- en: 'References: [#9544](https://www.sqlalchemy.org/trac/ticket/9544)'
  id: totrans-3992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9544](https://www.sqlalchemy.org/trac/ticket/9544)
- en: misc
  id: totrans-3993
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [util]**'
  id: totrans-3994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [工具]**'
- en: Implemented missing methods `copy` and `pop` in OrderedSet class.
  id: totrans-3995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 OrderedSet 类中实现了缺失的 `copy` 和 `pop` 方法。
- en: 'References: [#9487](https://www.sqlalchemy.org/trac/ticket/9487)'
  id: totrans-3996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9487](https://www.sqlalchemy.org/trac/ticket/9487)
- en: orm
  id: totrans-3997
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-3998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Exceptions such as `TypeError` and `ValueError` raised by Python dataclasses
    when making use of the [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") mixin class or [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") decorator are now wrapped within
    an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") wrapper along with informative context about
    the error message, referring to the Python dataclasses documentation as the authoritative
    source of background information on the cause of the exception.
  id: totrans-3999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过使用[`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") mixin类或[`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass")装饰器时，由Python数据类引发的`TypeError`和`ValueError`等异常现在被包装在一个[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")包装器中，并提供有关错误消息的信息上下文，指向Python数据类文档作为异常原因的权威来源。
- en: See also
  id: totrans-4000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Python dataclasses error encountered when creating dataclass for <classname>](../errors.html#error-dcte)'
  id: totrans-4001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[创建<classname>的数据类时遇到的Python数据类错误](../errors.html#error-dcte)'
- en: 'References: [#9563](https://www.sqlalchemy.org/trac/ticket/9563)'
  id: totrans-4002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9563](https://www.sqlalchemy.org/trac/ticket/9563)
- en: '**[orm] [bug]**'
  id: totrans-4003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in ORM Annotated Declarative where using a recursive type (e.g.
    using a nested Dict type) would result in a recursion overflow in the ORM’s annotation
    resolution logic, even if this datatype were not necessary to map the column.
  id: totrans-4004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在ORM注释式声明中的问题，当使用递归类型（例如使用嵌套的Dict类型）时，即使此数据类型不是必要的以映射列，也会导致ORM的注释解析逻辑出现递归溢出。
- en: 'References: [#9553](https://www.sqlalchemy.org/trac/ticket/9553)'
  id: totrans-4005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9553](https://www.sqlalchemy.org/trac/ticket/9553)
- en: '**[orm] [bug]**'
  id: totrans-4006
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct would raise an internal error if used
    on a Declarative mixin and included the [`mapped_column.deferred`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column") parameter.
  id: totrans-4007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在声明式混合中使用[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")构造会引发内部错误的问题，并且包括[`mapped_column.deferred`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.deferred
    "sqlalchemy.orm.mapped_column")参数。
- en: 'References: [#9550](https://www.sqlalchemy.org/trac/ticket/9550)'
  id: totrans-4008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9550](https://www.sqlalchemy.org/trac/ticket/9550)
- en: '**[orm] [bug]**'
  id: totrans-4009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Expanded the warning emitted when a plain [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") object is present in a Declarative mapping
    to include any arbitrary SQL expression that is not declared within an appropriate
    property type such as [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), [`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred"), etc. These attributes are otherwise not mapped at
    all and remain unchanged within the class dictionary. As it seems likely that
    such an expression is usually not what’s intended, this case now warns for all
    such otherwise ignored expressions, rather than just the [`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") case.
  id: totrans-4010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在声明式映射中存在一个纯粹的[`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")对象时，扩展了发出警告的情况，以包括任何未在适当的属性类型内声明的任意SQL表达式，如[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")，[`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred")等。这些属性否则不被映射，并且在类字典中保持不变。由于这样的表达式通常不是所期望的，因此现在对所有这些被忽略的表达式发出警告，而不仅仅是[`column()`](../core/sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")的情况。
- en: 'References: [#9537](https://www.sqlalchemy.org/trac/ticket/9537)'
  id: totrans-4011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9537](https://www.sqlalchemy.org/trac/ticket/9537)
- en: '**[orm] [bug]**'
  id: totrans-4012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression where accessing the expression value of a hybrid property on
    a class that was either unmapped or not-yet-mapped (such as calling upon it within
    a [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr "sqlalchemy.orm.declared_attr")
    method) would raise an internal error, as an internal fetch for the parent class’
    mapper would fail and an instruction for this failure to be ignored were inadvertently
    removed in 2.0.
  id: totrans-4013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，即在尝试访问未映射或尚未映射（例如在 [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") 方法中调用它）的类上的混合属性的表达式值时，会引发内部错误，因为对父类映射器的内部获取将失败，并且无意中删除了对此失败忽略指令的引用。
- en: 'References: [#9519](https://www.sqlalchemy.org/trac/ticket/9519)'
  id: totrans-4014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9519](https://www.sqlalchemy.org/trac/ticket/9519)
- en: '**[orm] [bug]**'
  id: totrans-4015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fields that are declared on Declarative Mixins and then combined with classes
    that make use of [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass"), where those mixin fields are not themselves
    part of a dataclass, now emit a deprecation warning as these fields will be ignored
    in a future release, as Python dataclasses behavior is to ignore these fields.
    Type checkers will not see these fields under pep-681.
  id: totrans-4016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") 的类中与声明在 Declarative Mixins 上然后与使用 [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") 的类结合在一起的字段（其中这些混合字段本身不是数据类的一部分）现在会发出停用警告，因为这些字段将在将来的版本中被忽略，因为
    Python 数据类的行为是忽略这些字段。类型检查器将不会在 pep-681 下看到这些字段。
- en: See also
  id: totrans-4017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[When transforming <cls> to a dataclass, attribute(s) originate from superclass
    <cls> which is not a dataclass.](../errors.html#error-dcmx) - background on rationale'
  id: totrans-4018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[将 <cls> 转换为数据类时，属性来自于不是数据类的超类 <cls>。](../errors.html#error-dcmx) - 背景和理由'
- en: '[Using mixins and abstract superclasses](../orm/dataclasses.html#orm-declarative-dc-mixins)'
  id: totrans-4019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用混合类和抽象超类](../orm/dataclasses.html#orm-declarative-dc-mixins)'
- en: 'References: [#9350](https://www.sqlalchemy.org/trac/ticket/9350)'
  id: totrans-4020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9350](https://www.sqlalchemy.org/trac/ticket/9350)
- en: '**[orm] [bug]**'
  id: totrans-4021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`BindParameter.render_literal_execute()`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute") method would
    fail when called on a parameter that also had ORM annotations associated with
    it. In practice, this would be observed as a failure of SQL compilation when using
    some combinations of a dialect that uses “FETCH FIRST” such as Oracle along with
    a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct that uses [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit"), within some ORM contexts, including
    if the statement were embedded within a relationship primaryjoin expression.
  id: totrans-4022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即当调用具有ORM注解的参数的 [`BindParameter.render_literal_execute()`](../core/sqlelement.html#sqlalchemy.sql.expression.BindParameter.render_literal_execute
    "sqlalchemy.sql.expression.BindParameter.render_literal_execute") 方法时会失败。在实践中，这将被观察为在使用一些使用“FETCH
    FIRST”（例如Oracle）的方言与使用 [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造的 [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") 的某些组合时，当在某些ORM上下文中使用时，包括如果语句嵌入在关系主连接表达式中时，会触发SQL编译失败。
- en: 'References: [#9526](https://www.sqlalchemy.org/trac/ticket/9526)'
  id: totrans-4023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9526](https://www.sqlalchemy.org/trac/ticket/9526)
- en: '**[orm] [bug]**'
  id: totrans-4024
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Towards maintaining consistency with unit-of-work changes made for [#5984](https://www.sqlalchemy.org/trac/ticket/5984)
    and [#8862](https://www.sqlalchemy.org/trac/ticket/8862), both of which disable
    “lazy=’raise’” handling within [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") processes that aren’t triggered by attribute access,
    the [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") method will now also disable “lazy=’raise’” handling
    when it traverses relationship paths in order to process the “delete” and “delete-orphan”
    cascade rules. Previously, there was no easy way to generically call [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") on an object that had “lazy=’raise’” set up such
    that only the necessary relationships would be loaded. As “lazy=’raise’” is primarily
    intended to catch SQL loading that emits on attribute access, [`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete") is now made to behave like other [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") methods including [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") as well as [`Session.flush()`](../orm/session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") along with autoflush.
  id: totrans-4025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了与为[#5984](https://www.sqlalchemy.org/trac/ticket/5984)和[#8862](https://www.sqlalchemy.org/trac/ticket/8862)所做的工作单元一致性更改保持一致，这两个更改禁用了在未通过属性访问触发的[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")进程中的“lazy='raise'”处理，[`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete")方法现在也会在遍历关系路径以处理“delete”和“delete-orphan”级联规则时禁用“lazy='raise'”处理。以前，没有简单的方法可以通用地调用具有设置“lazy='raise'”的对象的[`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete")，以便仅加载必要的关系。由于“lazy='raise'”主要用于捕获在属性访问时发出的 SQL
    加载，[`Session.delete()`](../orm/session_api.html#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete")现在被制作成像其他[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")方法一样，包括[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")以及[`Session.flush()`](../orm/session_api.html#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")以及自动刷新。
- en: 'References: [#9549](https://www.sqlalchemy.org/trac/ticket/9549)'
  id: totrans-4026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9549](https://www.sqlalchemy.org/trac/ticket/9549)
- en: '**[orm] [bug]**'
  id: totrans-4027
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where an annotation-only [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") directive could not be used in a Declarative mixin class,
    without that attribute attempting to take effect for single- or joined-inheritance
    subclasses of mapped classes that had already mapped that attribute on a superclass,
    producing conflicting column errors and/or warnings.
  id: totrans-4028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了仅注释的[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")指令无法在声明性混合类中使用的问题，而不会使该属性试图对已经在超类上映射了该属性的映射类的单个或联接继承子类产生冲突的列错误和/或警告。
- en: 'References: [#9564](https://www.sqlalchemy.org/trac/ticket/9564)'
  id: totrans-4029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9564](https://www.sqlalchemy.org/trac/ticket/9564)
- en: '**[orm] [bug] [typing]**'
  id: totrans-4030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [typing]**'
- en: Properly type [`Insert.from_select.names`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select.params.names
    "sqlalchemy.sql.expression.Insert.from_select") to accept a list of string or
    columns or mapped attributes.
  id: totrans-4031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 正确地将[`Insert.from_select.names`](../core/dml.html#sqlalchemy.sql.expression.Insert.from_select.params.names
    "sqlalchemy.sql.expression.Insert.from_select")类型化为接受字符串列表或列或映射属性。
- en: 'References: [#9514](https://www.sqlalchemy.org/trac/ticket/9514)'
  id: totrans-4032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9514](https://www.sqlalchemy.org/trac/ticket/9514)
- en: examples
  id: totrans-4033
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-4034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [bug]**'
- en: Fixed issue in “versioned history” example where using a declarative base that
    is derived from [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") would fail to be mapped. Additionally, repaired
    the given test suite so that the documented instructions for running the example
    using Python unittest now work again.
  id: totrans-4035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“版本历史”示例中的问题，使用从[`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")派生的声明基类会导致映射失败。此外，修复了给定的测试套件，使得使用 Python unittest
    运行示例的文档说明现在再次有效。
- en: typing
  id: totrans-4036
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入
- en: '**[typing] [bug]**'
  id: totrans-4037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing for [`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") and [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") to work correctly with 2.0 style mappings.
  id: totrans-4038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred "sqlalchemy.orm.deferred")和[`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression")在2.0风格映射中正确工作的类型问题。
- en: 'References: [#9536](https://www.sqlalchemy.org/trac/ticket/9536)'
  id: totrans-4039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9536](https://www.sqlalchemy.org/trac/ticket/9536)
- en: postgresql
  id: totrans-4040
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-4041
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed critical regression in PostgreSQL dialects such as asyncpg which rely
    upon explicit casts in SQL in order for datatypes to be passed to the driver correctly,
    where a [`String`](../core/type_basics.html#sqlalchemy.types.String "sqlalchemy.types.String")
    datatype would be cast along with the exact column length being compared, leading
    to implicit truncation when comparing a `VARCHAR` of a smaller length to a string
    of greater length regardless of operator in use (e.g. LIKE, MATCH, etc.). The
    PostgreSQL dialect now omits the length from `VARCHAR` when rendering these casts.
  id: totrans-4042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了PostgreSQL方言中的关键回归，例如依赖SQL中显式转换以使数据类型正确传递给驱动程序的asyncpg，其中[`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")数据类型将与要比较的确切列长度一起转换，导致在比较`VARCHAR`长度较小的字符串与长度较大的字符串时隐式截断，无论使用的操作符是什么（例如LIKE，MATCH等）。现在，PostgreSQL方言在渲染这些转换时省略了`VARCHAR`的长度。
- en: 'References: [#9511](https://www.sqlalchemy.org/trac/ticket/9511)'
  id: totrans-4043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9511](https://www.sqlalchemy.org/trac/ticket/9511)
- en: mysql
  id: totrans-4044
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-4045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue where string datatypes such as [`CHAR`](../core/type_basics.html#sqlalchemy.types.CHAR
    "sqlalchemy.types.CHAR"), [`VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR"), [`TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT"), as well as binary [`BLOB`](../core/type_basics.html#sqlalchemy.types.BLOB
    "sqlalchemy.types.BLOB"), could not be produced with an explicit length of zero,
    which has special meaning for MySQL. Pull request courtesy J. Nick Koston.
  id: totrans-4046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了字符串数据类型如[`CHAR`](../core/type_basics.html#sqlalchemy.types.CHAR "sqlalchemy.types.CHAR")、[`VARCHAR`](../core/type_basics.html#sqlalchemy.types.VARCHAR
    "sqlalchemy.types.VARCHAR")、[`TEXT`](../core/type_basics.html#sqlalchemy.types.TEXT
    "sqlalchemy.types.TEXT")以及二进制[`BLOB`](../core/type_basics.html#sqlalchemy.types.BLOB
    "sqlalchemy.types.BLOB")无法以零长度显式生成的问题，这在MySQL中具有特殊含义。感谢J. Nick Koston的拉取请求。
- en: 'References: [#9544](https://www.sqlalchemy.org/trac/ticket/9544)'
  id: totrans-4047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9544](https://www.sqlalchemy.org/trac/ticket/9544)
- en: misc
  id: totrans-4048
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [util]**'
  id: totrans-4049
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [util]**'
- en: Implemented missing methods `copy` and `pop` in OrderedSet class.
  id: totrans-4050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在OrderedSet类中实现了缺失的方法`copy`和`pop`。
- en: 'References: [#9487](https://www.sqlalchemy.org/trac/ticket/9487)'
  id: totrans-4051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9487](https://www.sqlalchemy.org/trac/ticket/9487)
- en: 2.0.7
  id: totrans-4052
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.7
- en: 'Released: March 18, 2023'
  id: totrans-4053
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年3月18日
- en: typing
  id: totrans-4054
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-4055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue where [`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") would not allow an arbitrary callable as the source
    of the composite class.
  id: totrans-4056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`composite()`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")不允许任意可调用项作为复合类来源的类型问题。
- en: 'References: [#9502](https://www.sqlalchemy.org/trac/ticket/9502)'
  id: totrans-4057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9502](https://www.sqlalchemy.org/trac/ticket/9502)
- en: postgresql
  id: totrans-4058
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-4059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added new PostgreSQL type [`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT"). Pull request courtesy Julian David Rath.
  id: totrans-4060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的PostgreSQL类型[`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT")。感谢Julian David Rath的拉取请求。
- en: 'References: [#9416](https://www.sqlalchemy.org/trac/ticket/9416)'
  id: totrans-4061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9416](https://www.sqlalchemy.org/trac/ticket/9416)
- en: '**[postgresql] [usecase]**'
  id: totrans-4062
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Modifications to the base PostgreSQL dialect to allow for better integration
    with the sqlalchemy-redshift third party dialect for SQLAlchemy 2.0\. Pull request
    courtesy matthewgdv.
  id: totrans-4063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对基本PostgreSQL方言进行了修改，以便更好地与SQLAlchemy 2.0的第三方dialect sqlalchemy-redshift集成。感谢matthewgdv的拉取请求。
- en: 'References: [#9442](https://www.sqlalchemy.org/trac/ticket/9442)'
  id: totrans-4064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9442](https://www.sqlalchemy.org/trac/ticket/9442)
- en: typing
  id: totrans-4065
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-4066
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue where [`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") would not allow an arbitrary callable as the source
    of the composite class.
  id: totrans-4067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`composite()`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")不允许任意可调用项作为复合类来源的类型问题。
- en: 'References: [#9502](https://www.sqlalchemy.org/trac/ticket/9502)'
  id: totrans-4068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9502](https://www.sqlalchemy.org/trac/ticket/9502)
- en: postgresql
  id: totrans-4069
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-4070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added new PostgreSQL type [`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT"). Pull request courtesy Julian David Rath.
  id: totrans-4071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的 PostgreSQL 类型 [`CITEXT`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.CITEXT
    "sqlalchemy.dialects.postgresql.CITEXT")。感谢 Julian David Rath 提交的拉取请求。
- en: 'References: [#9416](https://www.sqlalchemy.org/trac/ticket/9416)'
  id: totrans-4072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9416](https://www.sqlalchemy.org/trac/ticket/9416)
- en: '**[postgresql] [usecase]**'
  id: totrans-4073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Modifications to the base PostgreSQL dialect to allow for better integration
    with the sqlalchemy-redshift third party dialect for SQLAlchemy 2.0\. Pull request
    courtesy matthewgdv.
  id: totrans-4074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对基础的 PostgreSQL 方言进行修改，以便更好地与第三方方言 sqlalchemy-redshift 在 SQLAlchemy 2.0 中进行集成。感谢
    matthewgdv 提交的拉取请求。
- en: 'References: [#9442](https://www.sqlalchemy.org/trac/ticket/9442)'
  id: totrans-4075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9442](https://www.sqlalchemy.org/trac/ticket/9442)
- en: 2.0.6
  id: totrans-4076
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.6
- en: 'Released: March 13, 2023'
  id: totrans-4077
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年3月13日
- en: orm
  id: totrans-4078
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-4079
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where the “active history” feature was not fully implemented for composite
    attributes, making it impossible to receive events that included the “old” value.
    This seems to have been the case with older SQLAlchemy versions as well, where
    “active_history” would be propagated to the underlying column-based attributes,
    but an event handler listening to the composite attribute itself would not be
    given the “old” value being replaced, even if the composite() were set up with
    active_history=True.
  id: totrans-4080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即“活动历史”功能对复合属性的实现不完整，导致无法接收包含“旧”值的事件。这似乎也是旧版 SQLAlchemy 的情况，其中“active_history”将传播到基础的基于列的属性，但是即使将
    composite() 设置为 active_history=True，仍然不会向监听复合属性本身的事件处理程序提供将要替换的“旧”值。
- en: Additionally, fixed a regression that’s local to 2.0 which disallowed active_history
    on composite from being assigned to the impl with `attr.impl.active_history=True`.
  id: totrans-4081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，修复了一个局限于 2.0 版本的回归，该回归禁止对复合属性的 active_history 分配给具有`attr.impl.active_history=True`的
    impl。
- en: 'References: [#9460](https://www.sqlalchemy.org/trac/ticket/9460)'
  id: totrans-4082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9460](https://www.sqlalchemy.org/trac/ticket/9460)
- en: '**[orm] [bug]**'
  id: totrans-4083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression involving pickling of Python rows between the cython and pure
    Python implementations of [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row"), which occurred as part of refactoring code for version
    2.0 with typing. A particular constant were turned into a string based `Enum`
    for the pure Python version of [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") whereas the cython version continued to use an integer
    constant, leading to deserialization failures.
  id: totrans-4084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 Python 行的 cython 和纯 Python 实现之间进行 pickling 时的回归，该回归发生在为版本 2.0 进行代码重构和添加类型时。特定常量被转换为纯
    Python 版本的字符串型 `Enum`，而 cython 版本继续使用整数常量，导致反序列化失败。
- en: 'References: [#9418](https://www.sqlalchemy.org/trac/ticket/9418)'
  id: totrans-4085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9418](https://www.sqlalchemy.org/trac/ticket/9418)
- en: sql
  id: totrans-4086
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [regression]**'
  id: totrans-4087
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [regression]**'
- en: Fixed regression where the fix for [#8098](https://www.sqlalchemy.org/trac/ticket/8098),
    which was released in the 1.4 series and provided a layer of concurrency-safe
    checks for the lambda SQL API, included additional fixes in the patch that failed
    to be applied to the main branch. These additional fixes have been applied.
  id: totrans-4088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归，即对于在 1.4 系列中发布的修复 [#8098](https://www.sqlalchemy.org/trac/ticket/8098)，该修复为
    lambda SQL API 提供了一层并发安全检查，包含在补丁中的额外修复未能应用到主分支。已应用这些额外修复。
- en: 'References: [#9461](https://www.sqlalchemy.org/trac/ticket/9461)'
  id: totrans-4089
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9461](https://www.sqlalchemy.org/trac/ticket/9461)
- en: '**[sql] [bug]**'
  id: totrans-4090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression where the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct would not be able to render if it
    were given no columns and then used in the context of an EXISTS, raising an internal
    exception instead. While an empty “SELECT” is not typically valid SQL, in the
    context of EXISTS databases such as PostgreSQL allow it, and in any case the condition
    now no longer raises an internal exception.
  id: totrans-4091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归，即如果 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造未给定列并且在 EXISTS 的上下文中使用，则无法渲染，而是引发内部异常。虽然空“SELECT”通常不是有效的
    SQL，但在 EXISTS 数据库（如 PostgreSQL）中允许它，在任何情况下，该条件现在不再引发内部异常。
- en: 'References: [#9440](https://www.sqlalchemy.org/trac/ticket/9440)'
  id: totrans-4092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9440](https://www.sqlalchemy.org/trac/ticket/9440)
- en: typing
  id: totrans-4093
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-4094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue where [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") did not allow a [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") argument independent of the type of the [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") itself, which is the purpose of [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast").
  id: totrans-4095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast")中的打字问题，该问题不允许独立于[`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")本身的[`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")参数，这就是[`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast")的目的。
- en: 'References: [#9451](https://www.sqlalchemy.org/trac/ticket/9451)'
  id: totrans-4096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9451](https://www.sqlalchemy.org/trac/ticket/9451)
- en: '**[typing] [bug]**'
  id: totrans-4097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[打字] [错误]**'
- en: Fixed issues to allow typing tests to pass under Mypy 1.1.1.
  id: totrans-4098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了允许打字测试在Mypy 1.1.1下通过的问题。
- en: oracle
  id: totrans-4099
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-4100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Fixed reflection bug where Oracle “name normalize” would not work correctly
    for reflection of symbols that are in the “PUBLIC” schema, such as synonyms, meaning
    the PUBLIC name could not be indicated as lower case on the Python side for the
    [`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    argument. Using uppercase “PUBLIC” would work, but would then lead to awkward
    SQL queries including a quoted `"PUBLIC"` name as well as indexing the table under
    uppercase “PUBLIC”, which was inconsistent.
  id: totrans-4101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反射错误，Oracle的“名称规范化”对于“PUBLIC”模式中的符号的反射无法正确工作，比如同义词，这意味着在Python端无法将PUBLIC名称指示为小写以用于[`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数。使用大写的“PUBLIC”会起作用，但会导致包括带引号的`"PUBLIC"`名称的尴尬SQL查询以及将表索引化为大写的“PUBLIC”，这是不一致的。
- en: 'References: [#9459](https://www.sqlalchemy.org/trac/ticket/9459)'
  id: totrans-4102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9459](https://www.sqlalchemy.org/trac/ticket/9459)
- en: orm
  id: totrans-4103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-4104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug where the “active history” feature was not fully implemented for composite
    attributes, making it impossible to receive events that included the “old” value.
    This seems to have been the case with older SQLAlchemy versions as well, where
    “active_history” would be propagated to the underlying column-based attributes,
    but an event handler listening to the composite attribute itself would not be
    given the “old” value being replaced, even if the composite() were set up with
    active_history=True.
  id: totrans-4105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即“活动历史”功能对于复合属性并未完全实现，使得无法接收包含“旧”值的事件。这似乎也是旧的SQLAlchemy版本的情况，其中“active_history”会传播到基于列的属性，但是一个监听复合属性本身的事件处理程序将不会收到被替换的“旧”值，即使复合()设置为active_history=True。
- en: Additionally, fixed a regression that’s local to 2.0 which disallowed active_history
    on composite from being assigned to the impl with `attr.impl.active_history=True`.
  id: totrans-4106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，修复了一个仅限于2.0的回归，不允许将composite上的active_history分配给`attr.impl.active_history=True`。
- en: 'References: [#9460](https://www.sqlalchemy.org/trac/ticket/9460)'
  id: totrans-4107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9460](https://www.sqlalchemy.org/trac/ticket/9460)
- en: '**[orm] [bug]**'
  id: totrans-4108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed regression involving pickling of Python rows between the cython and pure
    Python implementations of [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row"), which occurred as part of refactoring code for version
    2.0 with typing. A particular constant were turned into a string based `Enum`
    for the pure Python version of [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") whereas the cython version continued to use an integer
    constant, leading to deserialization failures.
  id: totrans-4109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在版本2.0中为了打字重构代码而发生的Python行在cython和纯Python实现之间的pickling问题，其中一个特定的常量被转换为纯Python版本的[`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")的基于字符串的`Enum`，而cython版本继续使用整数常量，导致反序列化失败。
- en: 'References: [#9418](https://www.sqlalchemy.org/trac/ticket/9418)'
  id: totrans-4110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9418](https://www.sqlalchemy.org/trac/ticket/9418)
- en: sql
  id: totrans-4111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [regression]**'
  id: totrans-4112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误] [回归]**'
- en: Fixed regression where the fix for [#8098](https://www.sqlalchemy.org/trac/ticket/8098),
    which was released in the 1.4 series and provided a layer of concurrency-safe
    checks for the lambda SQL API, included additional fixes in the patch that failed
    to be applied to the main branch. These additional fixes have been applied.
  id: totrans-4113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了回归问题，该问题导致在 1.4 系列中发布的 [#8098](https://www.sqlalchemy.org/trac/ticket/8098)
    的修复为 lambda SQL API 提供了一层并发安全检查，包含在未能应用到主分支的补丁中的其他修复。 这些额外的修复已经应用。
- en: 'References: [#9461](https://www.sqlalchemy.org/trac/ticket/9461)'
  id: totrans-4114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9461](https://www.sqlalchemy.org/trac/ticket/9461)
- en: '**[sql] [bug]**'
  id: totrans-4115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed regression where the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct would not be able to render if it
    were given no columns and then used in the context of an EXISTS, raising an internal
    exception instead. While an empty “SELECT” is not typically valid SQL, in the
    context of EXISTS databases such as PostgreSQL allow it, and in any case the condition
    now no longer raises an internal exception.
  id: totrans-4116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造没有列并且在 EXISTS 上下文中使用时，将无法渲染的回归问题，而是引发内部异常。 虽然空的“SELECT”通常不是有效的 SQL，但在 EXISTS
    数据库中，如 PostgreSQL 允许它，并且无论如何，该条件现在不再引发内部异常。
- en: 'References: [#9440](https://www.sqlalchemy.org/trac/ticket/9440)'
  id: totrans-4117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9440](https://www.sqlalchemy.org/trac/ticket/9440)
- en: typing
  id: totrans-4118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-4119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue where [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") did not allow a [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") argument independent of the type of the [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") itself, which is the purpose of [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast").
  id: totrans-4120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") 不允许独立于 [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") 类型本身的 [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") 参数的类型问题，这是 [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") 的目的。
- en: 'References: [#9451](https://www.sqlalchemy.org/trac/ticket/9451)'
  id: totrans-4121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9451](https://www.sqlalchemy.org/trac/ticket/9451)
- en: '**[typing] [bug]**'
  id: totrans-4122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed issues to allow typing tests to pass under Mypy 1.1.1.
  id: totrans-4123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了问题以允许在 Mypy 1.1.1 下通过类型测试。
- en: oracle
  id: totrans-4124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-4125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed reflection bug where Oracle “name normalize” would not work correctly
    for reflection of symbols that are in the “PUBLIC” schema, such as synonyms, meaning
    the PUBLIC name could not be indicated as lower case on the Python side for the
    [`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema "sqlalchemy.schema.Table")
    argument. Using uppercase “PUBLIC” would work, but would then lead to awkward
    SQL queries including a quoted `"PUBLIC"` name as well as indexing the table under
    uppercase “PUBLIC”, which was inconsistent.
  id: totrans-4126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle 的“名称规范化”反射错误，该错误会导致对于位于“PUBLIC”模式中的符号的反射无法正确工作，例如同义词，意味着在 Python
    侧无法将 PUBLIC 名称指示为小写形式以供[`Table.schema`](../core/metadata.html#sqlalchemy.schema.Table.params.schema
    "sqlalchemy.schema.Table")参数使用。 使用大写的“PUBLIC”会起作用，但随后会导致包括带引号的 `"PUBLIC"` 名称以及在大写“PUBLIC”下对表进行索引的尴尬
    SQL 查询，这是不一致的。
- en: 'References: [#9459](https://www.sqlalchemy.org/trac/ticket/9459)'
  id: totrans-4127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9459](https://www.sqlalchemy.org/trac/ticket/9459)
- en: 2.0.5.post1
  id: totrans-4128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.5.post1
- en: 'Released: March 5, 2023'
  id: totrans-4129
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年3月5日
- en: orm
  id: totrans-4130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-4131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added constructor arguments to the built-in mapping collection types including
    [`KeyFuncDict`](../orm/collection_api.html#sqlalchemy.orm.KeyFuncDict "sqlalchemy.orm.KeyFuncDict"),
    [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict"), [`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict") so that these dictionary types may be constructed
    in place given the data up front; this provides further compatibility with tools
    such as Python dataclasses `.asdict()` which relies upon invoking these classes
    directly as ordinary dictionary classes.
  id: totrans-4132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向内置映射集合类型添加构造函数参数，包括[`KeyFuncDict`](../orm/collection_api.html#sqlalchemy.orm.KeyFuncDict
    "sqlalchemy.orm.KeyFuncDict")、[`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")、[`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict")，以便这些字典类型可以立即根据提前给定的数据构建；这进一步与诸如Python数据类`.asdict()`之类的工具兼容，该工具依赖于直接调用这些类作为普通字典类。
- en: 'References: [#9418](https://www.sqlalchemy.org/trac/ticket/9418)'
  id: totrans-4133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9418](https://www.sqlalchemy.org/trac/ticket/9418)
- en: '**[orm] [bug] [regression]**'
  id: totrans-4134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed multiple regressions due to [#8372](https://www.sqlalchemy.org/trac/ticket/8372),
    involving [`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection") (now called [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")).
  id: totrans-4135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#8372](https://www.sqlalchemy.org/trac/ticket/8372)引起的多个回归已修复，涉及[`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection")（现在称为[`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")）。
- en: First, the collection was no longer usable with “key” attributes that were not
    themselves ordinary mapped attributes; attributes linked to descriptors and/or
    association proxy attributes have been fixed.
  id: totrans-4136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，该集合不再可用于不是普通映射属性的“key”属性；与描述符和/或关联代理属性相关的属性已经修复。
- en: Second, if an event or other operation needed access to the “key” in order to
    populate the dictionary from an mapped attribute that was not loaded, this also
    would raise an error inappropriately, rather than trying to load the attribute
    as was the behavior in 1.4\. This is also fixed.
  id: totrans-4137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其次，如果事件或其他操作需要访问“key”以从未加载的映射属性填充字典，这也会不当地引发错误，而不是像1.4版本中的行为那样尝试加载属性。这也已修复。
- en: For both cases, the behavior of [#8372](https://www.sqlalchemy.org/trac/ticket/8372)
    has been expanded. [#8372](https://www.sqlalchemy.org/trac/ticket/8372) introduced
    an error that raises when the derived key that would be used as a mapped dictionary
    key is effectively unassigned. In this change, a warning only is emitted if the
    effective value of the “.key” attribute is `None`, where it cannot be unambiguously
    determined if this `None` was intentional or not. `None` will be not supported
    as mapped collection dictionary keys going forward (as it typically refers to
    NULL which means “unknown”). Setting [`attribute_keyed_dict.ignore_unpopulated_attribute`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict.params.ignore_unpopulated_attribute
    "sqlalchemy.orm.attribute_keyed_dict") will now cause such `None` keys to be ignored
    as well.
  id: totrans-4138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于这两种情况，[#8372](https://www.sqlalchemy.org/trac/ticket/8372)的行为已扩展。[#8372](https://www.sqlalchemy.org/trac/ticket/8372)引入了一个错误，当将作为映射字典键使用的派生键实际上未分配时会引发错误。在此更改中，仅在“.key”属性的有效值为`None`时发出警告，其中无法明确确定此`None`是否是有意的。`None`将不再作为映射集合字典键支持（因为它通常指NULL，表示“未知”）。设置[`attribute_keyed_dict.ignore_unpopulated_attribute`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict.params.ignore_unpopulated_attribute
    "sqlalchemy.orm.attribute_keyed_dict")现在将导致这些`None`键被忽略。
- en: 'References: [#9424](https://www.sqlalchemy.org/trac/ticket/9424)'
  id: totrans-4139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9424](https://www.sqlalchemy.org/trac/ticket/9424)
- en: '**[orm] [bug]**'
  id: totrans-4140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Identified that the `sqlite` and `mssql+pyodbc` dialects are now compatible
    with the SQLAlchemy ORM’s “versioned rows” feature, since SQLAlchemy now computes
    rowcount for a RETURNING statement in this specific case by counting the rows
    returned, rather than relying upon `cursor.rowcount`. In particular, the ORM versioned
    rows use case (documented at [Configuring a Version Counter](../orm/versioning.html#mapper-version-counter))
    should now be fully supported with the SQL Server pyodbc dialect.
  id: totrans-4141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确定 `sqlite` 和 `mssql+pyodbc` 方言现在与 SQLAlchemy ORM 的“版本化行”功能兼容，因为 SQLAlchemy
    现在通过计算返回的行数来计算 RETURNING 语句的行数，而不是依赖于 `cursor.rowcount`。特别是，ORM 版本化行用例（文档化的在 [配置版本计数器](../orm/versioning.html#mapper-version-counter)）现在应该完全支持
    SQL Server pyodbc 方言。
- en: '**[orm] [bug]**'
  id: totrans-4142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Added support for the [`Mapper.polymorphic_load`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_load
    "sqlalchemy.orm.Mapper") parameter to be applied to each mapper in an inheritance
    hierarchy more than one level deep, allowing columns to load for all classes in
    the hierarchy that indicate `"selectin"` using a single statement, rather than
    ignoring elements on those intermediary classes that nonetheless indicate they
    also would participate in `"selectin"` loading and were not part of the base-most
    SELECT statement.
  id: totrans-4143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在继承层次结构中的每个映射器上应用[`Mapper.polymorphic_load`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_load
    "sqlalchemy.orm.Mapper")参数的支持已经添加，允许使用单个语句为层次结构中所有指示 `"selectin"` 的类加载列，而不是忽略那些中间类上的元素，尽管它们也指示它们将参与
    `"selectin"` 加载，并且不是基本最底层的 SELECT 语句的一部分。
- en: 'References: [#9373](https://www.sqlalchemy.org/trac/ticket/9373)'
  id: totrans-4144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9373](https://www.sqlalchemy.org/trac/ticket/9373)
- en: '**[orm] [bug]**'
  id: totrans-4145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Continued the fix for [#8853](https://www.sqlalchemy.org/trac/ticket/8853),
    allowing the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    name to be fully qualified regardless of whether or not `from __annotations__
    import future` were present. This issue first fixed in 2.0.0b3 confirmed that
    this case worked via the test suite, however the test suite apparently was not
    testing the behavior for the name [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") not being locally present at all; string resolution has
    been updated to ensure the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") symbol is locatable as applies to how the ORM uses these
    functions.
  id: totrans-4146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续修复了 [#8853](https://www.sqlalchemy.org/trac/ticket/8853)，允许 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 名称在是否存在 `from __annotations__ import future` 的情况下都可以是完全限定的。此问题首次在
    2.0.0b3 中修复，确认这种情况通过测试套件工作，但测试套件显然未测试名称为 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 的行为是否根本不存在；字符串解析已更新以确保 ORM 如何使用这些函数的 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 符号是可定位的。
- en: 'References: [#8853](https://www.sqlalchemy.org/trac/ticket/8853), [#9335](https://www.sqlalchemy.org/trac/ticket/9335)'
  id: totrans-4147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8853](https://www.sqlalchemy.org/trac/ticket/8853), [#9335](https://www.sqlalchemy.org/trac/ticket/9335)
- en: orm declarative
  id: totrans-4148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM 声明式
- en: '**[bug] [orm declarative]**'
  id: totrans-4149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [ORM 声明式]**'
- en: Fixed issue where new [`mapped_column.use_existing_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.use_existing_column
    "sqlalchemy.orm.mapped_column") feature would not work if the two same-named columns
    were mapped under attribute names that were differently-named from an explicit
    name given to the column itself. The attribute names can now be differently named
    when using this parameter.
  id: totrans-4150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即如果两个同名列被映射到与列本身命名不同的属性名下，则新的[`mapped_column.use_existing_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.use_existing_column
    "sqlalchemy.orm.mapped_column")功能将无法工作。当使用此参数时，现在可以对属性名称进行不同的命名。
- en: 'References: [#9332](https://www.sqlalchemy.org/trac/ticket/9332)'
  id: totrans-4151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9332](https://www.sqlalchemy.org/trac/ticket/9332)
- en: engine
  id: totrans-4152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [performance]**'
  id: totrans-4153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [性能]**'
- en: A small optimization to the Cython implementation of [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") using a cdef for a particular int value to avoid Python
    overhead. Pull request courtesy Matus Valo.
  id: totrans-4154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    的 Cython 实现进行了小优化，使用特定 int 值的 cdef 来避免 Python 开销。感谢 Matus Valo 的拉取请求。
- en: 'References: [#9343](https://www.sqlalchemy.org/trac/ticket/9343)'
  id: totrans-4155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9343](https://www.sqlalchemy.org/trac/ticket/9343)
- en: '**[engine] [bug]**'
  id: totrans-4156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed bug where [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects could not be reliably unpickled across processes due to an accidental
    reliance on an unstable hash value.
  id: totrans-4157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象由于意外依赖于不稳定的哈希值而无法可靠地跨进程反序列化的错误。
- en: 'References: [#9423](https://www.sqlalchemy.org/trac/ticket/9423)'
  id: totrans-4158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9423](https://www.sqlalchemy.org/trac/ticket/9423)
- en: sql
  id: totrans-4159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [regression]**'
  id: totrans-4160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误] [回归]**'
- en: Restore the [`nullslast()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullslast
    "sqlalchemy.sql.expression.nullslast") and [`nullsfirst()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst") legacy functions into the `sqlalchemy`
    import namespace. Previously, the newer [`nulls_last()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") and [`nulls_first()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") functions were available, but the legacy
    ones were inadvertently removed.
  id: totrans-4161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`nullslast()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullslast
    "sqlalchemy.sql.expression.nullslast")和[`nullsfirst()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst")旧函数恢复到`sqlalchemy`导入命名空间中。先前，较新的[`nulls_last()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last")和[`nulls_first()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first")函数是可用的，但旧函数被不小心移除了。
- en: 'References: [#9390](https://www.sqlalchemy.org/trac/ticket/9390)'
  id: totrans-4162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9390](https://www.sqlalchemy.org/trac/ticket/9390)
- en: schema
  id: totrans-4163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-4164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: Validate that when provided the [`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") argument of [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") is a string.
  id: totrans-4165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 验证当提供了[`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数时，[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")是一个字符串。
- en: typing
  id: totrans-4166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入
- en: '**[typing] [usecase]**'
  id: totrans-4167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [用例]**'
- en: Exported the type returned by [`scoped_session.query_property()`](../orm/contextual.html#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") using a new public type [`QueryPropertyDescriptor`](../orm/contextual.html#sqlalchemy.orm.QueryPropertyDescriptor
    "sqlalchemy.orm.QueryPropertyDescriptor").
  id: totrans-4168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 导出由[`scoped_session.query_property()`](../orm/contextual.html#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property")返回的类型，使用一个新的公共类型[`QueryPropertyDescriptor`](../orm/contextual.html#sqlalchemy.orm.QueryPropertyDescriptor
    "sqlalchemy.orm.QueryPropertyDescriptor")。
- en: 'References: [#9338](https://www.sqlalchemy.org/trac/ticket/9338)'
  id: totrans-4169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9338](https://www.sqlalchemy.org/trac/ticket/9338)
- en: '**[typing] [bug]**'
  id: totrans-4170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Fixed bug where the [`Connection.scalars()`](../core/connections.html#sqlalchemy.engine.Connection.scalars
    "sqlalchemy.engine.Connection.scalars") method was not typed as allowing a multiple-parameters
    list, which is now supported using insertmanyvalues operations.
  id: totrans-4171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Connection.scalars()`](../core/connections.html#sqlalchemy.engine.Connection.scalars
    "sqlalchemy.engine.Connection.scalars")方法未被类型化为允许多参数列表的错误，现在支持使用`insertmanyvalues`操作。
- en: '**[typing] [bug]**'
  id: totrans-4172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Improved typing for the mapping passed to [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") and [`Update.values()`](../core/dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values") to be more open-ended about collection
    type, by indicating read-only `Mapping` instead of writeable `Dict` which would
    error out on too limited of a key type.
  id: totrans-4173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了传递给[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")和[`Update.values()`](../core/dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values")的映射的类型，使其对集合类型更加开放，通过指示只读`Mapping`而不是可写`Dict`，后者在键类型过于受限时会出错。
- en: 'References: [#9376](https://www.sqlalchemy.org/trac/ticket/9376)'
  id: totrans-4174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9376](https://www.sqlalchemy.org/trac/ticket/9376)
- en: '**[typing] [bug]**'
  id: totrans-4175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Added missing init overload to the [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") type object so that pep-484 type checkers may properly
    resolve the complete type, deriving from the [`Numeric.asdecimal`](../core/type_basics.html#sqlalchemy.types.Numeric.params.asdecimal
    "sqlalchemy.types.Numeric") parameter whether `Decimal` or `float` objects will
    be represented.
  id: totrans-4176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")类型对象添加了缺失的init重载，以便pep-484类型检查器可以正确解析完整类型，从[`Numeric.asdecimal`](../core/type_basics.html#sqlalchemy.types.Numeric.params.asdecimal
    "sqlalchemy.types.Numeric")参数派生出`Decimal`或`float`对象将被表示。
- en: 'References: [#9391](https://www.sqlalchemy.org/trac/ticket/9391)'
  id: totrans-4177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9391](https://www.sqlalchemy.org/trac/ticket/9391)
- en: '**[typing] [bug]**'
  id: totrans-4178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[键入] [错误]**'
- en: Fixed typing bug where [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") would not accept [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") or [`TextualSelect`](../core/selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") objects as a valid type. Additionally
    repaired the `columns` method to have a return type, which was missing.
  id: totrans-4179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement")中的键入错误，该方法不接受[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")或[`TextualSelect`](../core/selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect")对象作为有效类型。此外，修复了`columns`方法的返回类型，该方法之前缺少了返回类型。
- en: 'References: [#9398](https://www.sqlalchemy.org/trac/ticket/9398)'
  id: totrans-4180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9398](https://www.sqlalchemy.org/trac/ticket/9398)
- en: '**[typing] [bug]**'
  id: totrans-4181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[键入] [错误]**'
- en: Fixed typing issue where [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") would not record the class type correctly.
  id: totrans-4182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")中的键入问题，该问题导致类类型无法正确记录。
- en: 'References: [#9340](https://www.sqlalchemy.org/trac/ticket/9340)'
  id: totrans-4183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9340](https://www.sqlalchemy.org/trac/ticket/9340)
- en: postgresql
  id: totrans-4184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-4185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed issue in PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") where literal values were
    being compiled as bound parameters and not direct inline values as is required
    for DDL.
  id: totrans-4186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 中的问题，其中文字值被编译为绑定参数而不是直接的内联值，这是DDL所要求的。
- en: 'References: [#9349](https://www.sqlalchemy.org/trac/ticket/9349)'
  id: totrans-4187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9349](https://www.sqlalchemy.org/trac/ticket/9349)
- en: '**[postgresql] [bug]**'
  id: totrans-4188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed issue where the PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") construct would not be copyable
    within operations such as [`Table.to_metadata()`](../core/metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") as well as within some Alembic scenarios,
    if the constraint contained textual expression elements.
  id: totrans-4189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 构造在一些操作中无法被复制的问题，例如[`Table.to_metadata()`](../core/metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata")以及一些 Alembic 场景，如果约束包含文本表达式元素。
- en: 'References: [#9401](https://www.sqlalchemy.org/trac/ticket/9401)'
  id: totrans-4190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9401](https://www.sqlalchemy.org/trac/ticket/9401)
- en: mysql
  id: totrans-4191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [postgresql]**'
  id: totrans-4192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误] [postgresql]**'
- en: The support for pool ping listeners to receive exception events via the [`DialectEvents.handle_error()`](../core/events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event added in 2.0.0b1 for [#5648](https://www.sqlalchemy.org/trac/ticket/5648)
    failed to take into account dialect-specific ping routines such as that of MySQL
    and PostgreSQL. The dialect feature has been reworked so that all dialects participate
    within event handling. Additionally, a new boolean element [`ExceptionContext.is_pre_ping`](../core/connections.html#sqlalchemy.engine.ExceptionContext.is_pre_ping
    "sqlalchemy.engine.ExceptionContext.is_pre_ping") is added which identifies if
    this operation is occurring within the pre-ping operation.
  id: totrans-4193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于在 2.0.0b1 中添加的通过[`DialectEvents.handle_error()`](../core/events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")事件接收异常事件的池 ping 监听器的支持，未考虑到诸如 MySQL
    和 PostgreSQL 的特定于方言的 ping 例程。方言功能已经重写，以便所有方言都参与事件处理。另外，添加了一个新的布尔元素[`ExceptionContext.is_pre_ping`](../core/connections.html#sqlalchemy.engine.ExceptionContext.is_pre_ping
    "sqlalchemy.engine.ExceptionContext.is_pre_ping")，用于标识此操作是否在预 ping 操作中发生。
- en: For this release, third party dialects which implement a custom [`Dialect.do_ping()`](../core/internals.html#sqlalchemy.engine.Dialect.do_ping
    "sqlalchemy.engine.Dialect.do_ping") method can opt in to the newly improved behavior
    by having their method no longer catch exceptions or check exceptions for “is_disconnect”,
    instead just propagating all exceptions outwards. Checking the exception for “is_disconnect”
    is now done by an enclosing method on the default dialect, which ensures that
    the event hook is invoked for all exception scenarios before testing the exception
    as a “disconnect” exception. If an existing `do_ping()` method continues to catch
    exceptions and check “is_disconnect”, it will continue to work as it did previously,
    but `handle_error` hooks will not have access to the exception if it isn’t propagated
    outwards.
  id: totrans-4194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个版本中，实现自定义[`Dialect.do_ping()`](../core/internals.html#sqlalchemy.engine.Dialect.do_ping
    "sqlalchemy.engine.Dialect.do_ping")方法的第三方方言可以选择使用新的改进行为，方法不再捕获异常或检查异常是否为“is_disconnect”，而是将所有异常传播到外部。现在，默认方言的一个封闭方法会检查异常是否为“断开连接”异常，这样可以确保在将异常视为“断开连接”异常之前调用事件钩子处理所有异常情况。如果现有的
    `do_ping()` 方法继续捕获异常并检查“is_disconnect”，则它将继续像以前一样工作，但是如果异常不被传播到外部，`handle_error`
    钩子将无法访问异常。
- en: 'References: [#5648](https://www.sqlalchemy.org/trac/ticket/5648)'
  id: totrans-4195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5648](https://www.sqlalchemy.org/trac/ticket/5648)
- en: sqlite
  id: totrans-4196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug] [regression]**'
  id: totrans-4197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug] [regression]**'
- en: Fixed regression for SQLite connections where use of the `deterministic` parameter
    when establishing database functions would fail for older SQLite versions, those
    prior to version 3.8.3\. The version checking logic has been improved to accommodate
    for this case.
  id: totrans-4198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 连接的回归问题，旧版本 SQLite（版本 3.8.3 之前）在建立数据库函数时使用 `deterministic` 参数会失败。改进了版本检查逻辑以适应这种情况。
- en: 'References: [#9379](https://www.sqlalchemy.org/trac/ticket/9379)'
  id: totrans-4199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9379](https://www.sqlalchemy.org/trac/ticket/9379)
- en: mssql
  id: totrans-4200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-4201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue in the new [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype which prevented it from working with the pymssql
    driver. As pymssql seems to be maintained again, restored testing support for
    pymssql.
  id: totrans-4202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新 [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")
    数据类型与 pymssql 驱动程序不兼容的问题。由于 pymssql 看起来又开始维护了，因此恢复了对 pymssql 的测试支持。
- en: 'References: [#9414](https://www.sqlalchemy.org/trac/ticket/9414)'
  id: totrans-4203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9414](https://www.sqlalchemy.org/trac/ticket/9414)
- en: '**[mssql] [bug]**'
  id: totrans-4204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Tweaked the pymssql dialect to take better advantage of RETURNING for INSERT
    statements in order to retrieve last inserted primary key values, in the same
    way as occurs for the mssql+pyodbc dialect right now.
  id: totrans-4205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 pymssql 方言以更好地利用 INSERT 语句的 RETURNING，在插入语句中检索最后插入的主键值，方式与当前 mssql+pyodbc
    方言相同。
- en: misc
  id: totrans-4206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[bug] [ext]**'
  id: totrans-4207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed issue in automap where calling [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") from a specific mapped class, rather
    than from the [`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase") directly, would not use the correct base
    class when automap detected new tables, instead using the given class, leading
    to mappers trying to configure inheritance. While one should normally call [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") from the base in any case, it shouldn’t
    misbehave that badly when called from a subclass.
  id: totrans-4208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 automap 中的问题，从特定映射类而不是直接从 [`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase") 调用 [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") 时，当 automap 检测到新表时不会使用正确的基类，而是使用给定的类，导致映射器尝试配置继承。虽然通常应该从基类调用
    [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare")，但当从子类调用时不应该出现严重问题。
- en: 'References: [#9367](https://www.sqlalchemy.org/trac/ticket/9367)'
  id: totrans-4209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9367](https://www.sqlalchemy.org/trac/ticket/9367)
- en: '**[bug] [ext] [regression]**'
  id: totrans-4210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext] [regression]**'
- en: Fixed regression caused by typing added to `sqlalchemy.ext.mutable` for [#8667](https://www.sqlalchemy.org/trac/ticket/8667),
    where the semantics of the `.pop()` method changed such that the method was non-working.
    Pull request courtesy Nils Philippsen.
  id: totrans-4211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于增加到 `sqlalchemy.ext.mutable` 的类型而引起的回归问题，该类型用于 [#8667](https://www.sqlalchemy.org/trac/ticket/8667)，其中
    `.pop()` 方法的语义发生了变化，导致该方法无法使用。拉取请求由 Nils Philippsen 提供。
- en: 'References: [#9380](https://www.sqlalchemy.org/trac/ticket/9380)'
  id: totrans-4212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9380](https://www.sqlalchemy.org/trac/ticket/9380)
- en: orm
  id: totrans-4213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-4214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added constructor arguments to the built-in mapping collection types including
    [`KeyFuncDict`](../orm/collection_api.html#sqlalchemy.orm.KeyFuncDict "sqlalchemy.orm.KeyFuncDict"),
    [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict"), [`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict") so that these dictionary types may be constructed
    in place given the data up front; this provides further compatibility with tools
    such as Python dataclasses `.asdict()` which relies upon invoking these classes
    directly as ordinary dictionary classes.
  id: totrans-4215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对内置映射集合类型（包括[`KeyFuncDict`](../orm/collection_api.html#sqlalchemy.orm.KeyFuncDict
    "sqlalchemy.orm.KeyFuncDict")、[`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")、[`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict")）添加了构造函数参数，以便可以立即构造这些字典类型，从而进一步与诸如 Python 数据类`.asdict()`之类的工具兼容，后者依赖于直接调用这些类作为普通字典类。
- en: 'References: [#9418](https://www.sqlalchemy.org/trac/ticket/9418)'
  id: totrans-4216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9418](https://www.sqlalchemy.org/trac/ticket/9418)
- en: '**[orm] [bug] [regression]**'
  id: totrans-4217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed multiple regressions due to [#8372](https://www.sqlalchemy.org/trac/ticket/8372),
    involving [`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection") (now called [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")).
  id: totrans-4218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于[#8372](https://www.sqlalchemy.org/trac/ticket/8372)，修复了多个回归问题，涉及[`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection")（现在称为[`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")）。
- en: First, the collection was no longer usable with “key” attributes that were not
    themselves ordinary mapped attributes; attributes linked to descriptors and/or
    association proxy attributes have been fixed.
  id: totrans-4219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，集合再也不能使用不是普通映射属性的“键”属性；已修复与描述符和/或关联代理属性相关联的属性。
- en: Second, if an event or other operation needed access to the “key” in order to
    populate the dictionary from an mapped attribute that was not loaded, this also
    would raise an error inappropriately, rather than trying to load the attribute
    as was the behavior in 1.4\. This is also fixed.
  id: totrans-4220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其次，如果事件或其他操作需要访问“键”以从未加载的映射属性填充字典，则这也会不适当地引发错误，而不是像1.4版本中的行为一样尝试加载属性。这也已经修复。
- en: For both cases, the behavior of [#8372](https://www.sqlalchemy.org/trac/ticket/8372)
    has been expanded. [#8372](https://www.sqlalchemy.org/trac/ticket/8372) introduced
    an error that raises when the derived key that would be used as a mapped dictionary
    key is effectively unassigned. In this change, a warning only is emitted if the
    effective value of the “.key” attribute is `None`, where it cannot be unambiguously
    determined if this `None` was intentional or not. `None` will be not supported
    as mapped collection dictionary keys going forward (as it typically refers to
    NULL which means “unknown”). Setting [`attribute_keyed_dict.ignore_unpopulated_attribute`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict.params.ignore_unpopulated_attribute
    "sqlalchemy.orm.attribute_keyed_dict") will now cause such `None` keys to be ignored
    as well.
  id: totrans-4221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于这两种情况，扩展了[#8372](https://www.sqlalchemy.org/trac/ticket/8372)的行为。[#8372](https://www.sqlalchemy.org/trac/ticket/8372)引入了一个错误，当作为映射字典键使用的派生键实际上未被分配时，会引发错误。在这个变化中，仅在“.key”属性的有效值为`None`时发出警告，因此无法明确确定此`None`是有意的还是无意的。`None`将不再支持作为映射集合字典键（因为它通常指的是
    NULL，意味着“未知”）。设置[`attribute_keyed_dict.ignore_unpopulated_attribute`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict.params.ignore_unpopulated_attribute
    "sqlalchemy.orm.attribute_keyed_dict")现在也将导致忽略此类`None`键。
- en: 'References: [#9424](https://www.sqlalchemy.org/trac/ticket/9424)'
  id: totrans-4222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9424](https://www.sqlalchemy.org/trac/ticket/9424)
- en: '**[orm] [bug]**'
  id: totrans-4223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Identified that the `sqlite` and `mssql+pyodbc` dialects are now compatible
    with the SQLAlchemy ORM’s “versioned rows” feature, since SQLAlchemy now computes
    rowcount for a RETURNING statement in this specific case by counting the rows
    returned, rather than relying upon `cursor.rowcount`. In particular, the ORM versioned
    rows use case (documented at [Configuring a Version Counter](../orm/versioning.html#mapper-version-counter))
    should now be fully supported with the SQL Server pyodbc dialect.
  id: totrans-4224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 发现`sqlite`和`mssql+pyodbc`方言现在与SQLAlchemy ORM的“版本行”功能兼容，因为SQLAlchemy现在通过计算返回的行来计算此特定情况下的RETURNING语句的行数，而不是依赖于`cursor.rowcount`。特别是ORM版本行用例（在[配置版本计数器](../orm/versioning.html#mapper-version-counter)文档中记录）现在应该完全受到SQL
    Server pyodbc方言的支持。
- en: '**[orm] [bug]**'
  id: totrans-4225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added support for the [`Mapper.polymorphic_load`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_load
    "sqlalchemy.orm.Mapper") parameter to be applied to each mapper in an inheritance
    hierarchy more than one level deep, allowing columns to load for all classes in
    the hierarchy that indicate `"selectin"` using a single statement, rather than
    ignoring elements on those intermediary classes that nonetheless indicate they
    also would participate in `"selectin"` loading and were not part of the base-most
    SELECT statement.
  id: totrans-4226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加对[`Mapper.polymorphic_load`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_load
    "sqlalchemy.orm.Mapper")参数的支持，可以应用到继承层次结构中每个映射器超过一级深度，允许列为层次结构中的所有类加载指示为`"selectin"`的列，而不是忽略那些中间类上的元素，尽管它们也指示它们也将参与`"selectin"`加载，并且不是基本的SELECT语句的一部分。
- en: 'References: [#9373](https://www.sqlalchemy.org/trac/ticket/9373)'
  id: totrans-4227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9373](https://www.sqlalchemy.org/trac/ticket/9373)
- en: '**[orm] [bug]**'
  id: totrans-4228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Continued the fix for [#8853](https://www.sqlalchemy.org/trac/ticket/8853),
    allowing the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    name to be fully qualified regardless of whether or not `from __annotations__
    import future` were present. This issue first fixed in 2.0.0b3 confirmed that
    this case worked via the test suite, however the test suite apparently was not
    testing the behavior for the name [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") not being locally present at all; string resolution has
    been updated to ensure the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") symbol is locatable as applies to how the ORM uses these
    functions.
  id: totrans-4229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续修复[#8853](https://www.sqlalchemy.org/trac/ticket/8853)，允许[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")名称完全限定，无论是否存在`from __annotations__ import future`。此问题首次在2.0.0b3中修复，确认了此情况通过测试套件工作，但测试套件显然未测试名为[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")的名称是否根本不存在的情况；字符串解析已更新以确保ORM如何使用这些函数时，[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")符号是可定位的。
- en: 'References: [#8853](https://www.sqlalchemy.org/trac/ticket/8853), [#9335](https://www.sqlalchemy.org/trac/ticket/9335)'
  id: totrans-4230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8853](https://www.sqlalchemy.org/trac/ticket/8853)，[#9335](https://www.sqlalchemy.org/trac/ticket/9335)
- en: orm declarative
  id: totrans-4231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM声明式
- en: '**[bug] [orm declarative]**'
  id: totrans-4232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ORM声明式]**'
- en: Fixed issue where new [`mapped_column.use_existing_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.use_existing_column
    "sqlalchemy.orm.mapped_column") feature would not work if the two same-named columns
    were mapped under attribute names that were differently-named from an explicit
    name given to the column itself. The attribute names can now be differently named
    when using this parameter.
  id: totrans-4233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的[`mapped_column.use_existing_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.use_existing_column
    "sqlalchemy.orm.mapped_column")特性不会工作的问题，如果两个同名列被映射到与列本身给定的显式名称不同命名的属性名称下。当使用此参数时，属性名称现在可以不同命名。
- en: 'References: [#9332](https://www.sqlalchemy.org/trac/ticket/9332)'
  id: totrans-4234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9332](https://www.sqlalchemy.org/trac/ticket/9332)
- en: engine
  id: totrans-4235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [performance]**'
  id: totrans-4236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [performance]**'
- en: A small optimization to the Cython implementation of [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") using a cdef for a particular int value to avoid Python
    overhead. Pull request courtesy Matus Valo.
  id: totrans-4237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对Cython实现的[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")进行了一个小优化，使用cdef来避免Python开销。拉请求归功于Matus
    Valo。
- en: 'References: [#9343](https://www.sqlalchemy.org/trac/ticket/9343)'
  id: totrans-4238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9343](https://www.sqlalchemy.org/trac/ticket/9343)
- en: '**[engine] [bug]**'
  id: totrans-4239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed bug where [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects could not be reliably unpickled across processes due to an accidental
    reliance on an unstable hash value.
  id: totrans-4240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，[`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")对象由于意外依赖于不稳定的哈希值，跨进程无法可靠地反序列化。
- en: 'References: [#9423](https://www.sqlalchemy.org/trac/ticket/9423)'
  id: totrans-4241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9423](https://www.sqlalchemy.org/trac/ticket/9423)
- en: sql
  id: totrans-4242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [regression]**'
  id: totrans-4243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [regression]**'
- en: Restore the [`nullslast()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullslast
    "sqlalchemy.sql.expression.nullslast") and [`nullsfirst()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst") legacy functions into the `sqlalchemy`
    import namespace. Previously, the newer [`nulls_last()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last") and [`nulls_first()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first") functions were available, but the legacy
    ones were inadvertently removed.
  id: totrans-4244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`nullslast()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullslast
    "sqlalchemy.sql.expression.nullslast")和[`nullsfirst()`](../core/sqlelement.html#sqlalchemy.sql.expression.nullsfirst
    "sqlalchemy.sql.expression.nullsfirst")这两个旧版函数恢复到`sqlalchemy`的导入命名空间中。之前，较新的[`nulls_last()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_last
    "sqlalchemy.sql.expression.nulls_last")和[`nulls_first()`](../core/sqlelement.html#sqlalchemy.sql.expression.nulls_first
    "sqlalchemy.sql.expression.nulls_first")函数是可用的，但旧版函数被意外删除了。
- en: 'References: [#9390](https://www.sqlalchemy.org/trac/ticket/9390)'
  id: totrans-4245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9390](https://www.sqlalchemy.org/trac/ticket/9390)
- en: schema
  id: totrans-4246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema]**'
  id: totrans-4247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: Validate that when provided the [`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData") argument of [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") is a string.
  id: totrans-4248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 验证当提供[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")的[`MetaData.schema`](../core/metadata.html#sqlalchemy.schema.MetaData.params.schema
    "sqlalchemy.schema.MetaData")参数时，其值为字符串。
- en: typing
  id: totrans-4249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [usecase]**'
  id: totrans-4250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [usecase]**'
- en: Exported the type returned by [`scoped_session.query_property()`](../orm/contextual.html#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property") using a new public type [`QueryPropertyDescriptor`](../orm/contextual.html#sqlalchemy.orm.QueryPropertyDescriptor
    "sqlalchemy.orm.QueryPropertyDescriptor").
  id: totrans-4251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 导出了由[`scoped_session.query_property()`](../orm/contextual.html#sqlalchemy.orm.scoped_session.query_property
    "sqlalchemy.orm.scoped_session.query_property")返回的类型，使用了一个新的公共类型[`QueryPropertyDescriptor`](../orm/contextual.html#sqlalchemy.orm.QueryPropertyDescriptor
    "sqlalchemy.orm.QueryPropertyDescriptor")。
- en: 'References: [#9338](https://www.sqlalchemy.org/trac/ticket/9338)'
  id: totrans-4252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9338](https://www.sqlalchemy.org/trac/ticket/9338)
- en: '**[typing] [bug]**'
  id: totrans-4253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed bug where the [`Connection.scalars()`](../core/connections.html#sqlalchemy.engine.Connection.scalars
    "sqlalchemy.engine.Connection.scalars") method was not typed as allowing a multiple-parameters
    list, which is now supported using insertmanyvalues operations.
  id: totrans-4254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，[`Connection.scalars()`](../core/connections.html#sqlalchemy.engine.Connection.scalars
    "sqlalchemy.engine.Connection.scalars")方法未被类型化为允许多参数列表，现在支持使用insertmanyvalues操作。
- en: '**[typing] [bug]**'
  id: totrans-4255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Improved typing for the mapping passed to [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") and [`Update.values()`](../core/dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values") to be more open-ended about collection
    type, by indicating read-only `Mapping` instead of writeable `Dict` which would
    error out on too limited of a key type.
  id: totrans-4256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了传递给[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")和[`Update.values()`](../core/dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values")的映射的类型，使其更加开放，指示只读`Mapping`而不是可写`Dict`，后者在键类型过于受限时会出错。
- en: 'References: [#9376](https://www.sqlalchemy.org/trac/ticket/9376)'
  id: totrans-4257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9376](https://www.sqlalchemy.org/trac/ticket/9376)
- en: '**[typing] [bug]**'
  id: totrans-4258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Added missing init overload to the [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") type object so that pep-484 type checkers may properly
    resolve the complete type, deriving from the [`Numeric.asdecimal`](../core/type_basics.html#sqlalchemy.types.Numeric.params.asdecimal
    "sqlalchemy.types.Numeric") parameter whether `Decimal` or `float` objects will
    be represented.
  id: totrans-4259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")类型对象添加了缺失的init重载，以便pep-484类型检查器可以正确解析完整类型，根据[`Numeric.asdecimal`](../core/type_basics.html#sqlalchemy.types.Numeric.params.asdecimal
    "sqlalchemy.types.Numeric")参数推断`Decimal`或`float`对象将如何表示。
- en: 'References: [#9391](https://www.sqlalchemy.org/trac/ticket/9391)'
  id: totrans-4260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9391](https://www.sqlalchemy.org/trac/ticket/9391)
- en: '**[typing] [bug]**'
  id: totrans-4261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Fixed typing bug where [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") would not accept [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") or [`TextualSelect`](../core/selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") objects as a valid type. Additionally
    repaired the `columns` method to have a return type, which was missing.
  id: totrans-4262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了 [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") 不接受 [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 或 [`TextualSelect`](../core/selectable.html#sqlalchemy.sql.expression.TextualSelect
    "sqlalchemy.sql.expression.TextualSelect") 对象作为有效类型的类型错误。另外，修复了 `columns` 方法的返回类型，该方法缺失了。 '
- en: 'References: [#9398](https://www.sqlalchemy.org/trac/ticket/9398)'
  id: totrans-4263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9398](https://www.sqlalchemy.org/trac/ticket/9398)
- en: '**[typing] [bug]**'
  id: totrans-4264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Fixed typing issue where [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") would not record the class type correctly.
  id: totrans-4265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`with_polymorphic()`](../orm/queryguide/inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") 无法正确记录类类型的输入问题。
- en: 'References: [#9340](https://www.sqlalchemy.org/trac/ticket/9340)'
  id: totrans-4266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9340](https://www.sqlalchemy.org/trac/ticket/9340)
- en: postgresql
  id: totrans-4267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-4268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed issue in PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") where literal values were
    being compiled as bound parameters and not direct inline values as is required
    for DDL.
  id: totrans-4269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 中的问题，其中文字值被编译为绑定参数而不是直接的内联值，这是DDL所要求的。
- en: 'References: [#9349](https://www.sqlalchemy.org/trac/ticket/9349)'
  id: totrans-4270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9349](https://www.sqlalchemy.org/trac/ticket/9349)
- en: '**[postgresql] [bug]**'
  id: totrans-4271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed issue where the PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") construct would not be copyable
    within operations such as [`Table.to_metadata()`](../core/metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") as well as within some Alembic scenarios,
    if the constraint contained textual expression elements.
  id: totrans-4272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了 PostgreSQL [`ExcludeConstraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ExcludeConstraint
    "sqlalchemy.dialects.postgresql.ExcludeConstraint") 构造中的问题，在某些情况下，如 [`Table.to_metadata()`](../core/metadata.html#sqlalchemy.schema.Table.to_metadata
    "sqlalchemy.schema.Table.to_metadata") 中以及在一些 Alembic 场景中，如果约束包含文本表达式元素，则不可复制。 '
- en: 'References: [#9401](https://www.sqlalchemy.org/trac/ticket/9401)'
  id: totrans-4273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9401](https://www.sqlalchemy.org/trac/ticket/9401)
- en: mysql
  id: totrans-4274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [postgresql]**'
  id: totrans-4275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [错误] [postgresql]**'
- en: The support for pool ping listeners to receive exception events via the [`DialectEvents.handle_error()`](../core/events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event added in 2.0.0b1 for [#5648](https://www.sqlalchemy.org/trac/ticket/5648)
    failed to take into account dialect-specific ping routines such as that of MySQL
    and PostgreSQL. The dialect feature has been reworked so that all dialects participate
    within event handling. Additionally, a new boolean element [`ExceptionContext.is_pre_ping`](../core/connections.html#sqlalchemy.engine.ExceptionContext.is_pre_ping
    "sqlalchemy.engine.ExceptionContext.is_pre_ping") is added which identifies if
    this operation is occurring within the pre-ping operation.
  id: totrans-4276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 2.0.0b1 中通过 [`DialectEvents.handle_error()`](../core/events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 事件添加的池预检监听器接收异常事件的支持，未考虑到诸如 MySQL
    和 PostgreSQL 的方言特定的预检例程。方言特性已重新设计，以便所有方言在事件处理中参与其中。此外，添加了一个新的布尔元素 [`ExceptionContext.is_pre_ping`](../core/connections.html#sqlalchemy.engine.ExceptionContext.is_pre_ping
    "sqlalchemy.engine.ExceptionContext.is_pre_ping")，用于识别此操作是否发生在预检操作中。
- en: For this release, third party dialects which implement a custom [`Dialect.do_ping()`](../core/internals.html#sqlalchemy.engine.Dialect.do_ping
    "sqlalchemy.engine.Dialect.do_ping") method can opt in to the newly improved behavior
    by having their method no longer catch exceptions or check exceptions for “is_disconnect”,
    instead just propagating all exceptions outwards. Checking the exception for “is_disconnect”
    is now done by an enclosing method on the default dialect, which ensures that
    the event hook is invoked for all exception scenarios before testing the exception
    as a “disconnect” exception. If an existing `do_ping()` method continues to catch
    exceptions and check “is_disconnect”, it will continue to work as it did previously,
    but `handle_error` hooks will not have access to the exception if it isn’t propagated
    outwards.
  id: totrans-4277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于此版本，实现自定义 [`Dialect.do_ping()`](../core/internals.html#sqlalchemy.engine.Dialect.do_ping
    "sqlalchemy.engine.Dialect.do_ping") 方法的第三方方言可以选择通过不再捕获异常或检查异常的方式来选择新的改进行为，而只需将其方法外部传播所有异常。现在，默认方言的封闭方法执行异常检查“is_disconnect”，这确保在测试异常是否为“断开连接”异常之前调用事件钩子以处理所有异常场景。如果现有的
    `do_ping()` 方法继续捕获异常并检查“is_disconnect”，则其行为将与以前一样工作，但是如果异常没有传播出去，则`handle_error`钩子将无法访问异常。
- en: 'References: [#5648](https://www.sqlalchemy.org/trac/ticket/5648)'
  id: totrans-4278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5648](https://www.sqlalchemy.org/trac/ticket/5648)
- en: sqlite
  id: totrans-4279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug] [regression]**'
  id: totrans-4280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug] [regression]**'
- en: Fixed regression for SQLite connections where use of the `deterministic` parameter
    when establishing database functions would fail for older SQLite versions, those
    prior to version 3.8.3\. The version checking logic has been improved to accommodate
    for this case.
  id: totrans-4281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对 SQLite 连接的回归，其中在建立数据库函数时使用`deterministic`参数会在旧版本的 SQLite 中失败，即版本低于 3.8.3\.
    版本检查逻辑已经改进以适应这种情况。
- en: 'References: [#9379](https://www.sqlalchemy.org/trac/ticket/9379)'
  id: totrans-4282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9379](https://www.sqlalchemy.org/trac/ticket/9379)
- en: mssql
  id: totrans-4283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-4284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue in the new [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype which prevented it from working with the pymssql
    driver. As pymssql seems to be maintained again, restored testing support for
    pymssql.
  id: totrans-4285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的 [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")
    数据类型与 pymssql 驱动程序无法正常工作的问题。由于 pymssql 看起来又得到了维护，因此恢复了对 pymssql 的测试支持。
- en: 'References: [#9414](https://www.sqlalchemy.org/trac/ticket/9414)'
  id: totrans-4286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9414](https://www.sqlalchemy.org/trac/ticket/9414)
- en: '**[mssql] [bug]**'
  id: totrans-4287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Tweaked the pymssql dialect to take better advantage of RETURNING for INSERT
    statements in order to retrieve last inserted primary key values, in the same
    way as occurs for the mssql+pyodbc dialect right now.
  id: totrans-4288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 pymssql 方言，以更好地利用 RETURNING 语句来检索最后插入的主键值，与当前对 mssql+pyodbc 方言的情况相同。
- en: misc
  id: totrans-4289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[bug] [ext]**'
  id: totrans-4290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext]**'
- en: Fixed issue in automap where calling [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") from a specific mapped class, rather
    than from the [`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase") directly, would not use the correct base
    class when automap detected new tables, instead using the given class, leading
    to mappers trying to configure inheritance. While one should normally call [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") from the base in any case, it shouldn’t
    misbehave that badly when called from a subclass.
  id: totrans-4291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 automap 中的问题，其中从特定映射类而不是直接从 [`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase") 调用 [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") 方法将不会在 automap 检测到新表时使用正确的基类，而是使用给定的类，导致映射器尝试配置继承关系。虽然通常情况下应该从基类调用
    [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare")，但是当从子类调用时不应该出现这种严重的问题。
- en: 'References: [#9367](https://www.sqlalchemy.org/trac/ticket/9367)'
  id: totrans-4292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9367](https://www.sqlalchemy.org/trac/ticket/9367)
- en: '**[bug] [ext] [regression]**'
  id: totrans-4293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [ext] [regression]**'
- en: Fixed regression caused by typing added to `sqlalchemy.ext.mutable` for [#8667](https://www.sqlalchemy.org/trac/ticket/8667),
    where the semantics of the `.pop()` method changed such that the method was non-working.
    Pull request courtesy Nils Philippsen.
  id: totrans-4294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于为[#8667](https://www.sqlalchemy.org/trac/ticket/8667)添加了类型而导致的回归，其中`.pop()`方法的语义发生了变化，使得该方法无法工作。感谢
    Nils Philippsen 提交的拉取请求。
- en: 'References: [#9380](https://www.sqlalchemy.org/trac/ticket/9380)'
  id: totrans-4295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9380](https://www.sqlalchemy.org/trac/ticket/9380)
- en: 2.0.4
  id: totrans-4296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.4
- en: 'Released: February 17, 2023'
  id: totrans-4297
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年2月17日
- en: orm
  id: totrans-4298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-4299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: To accommodate a change in column ordering used by ORM Declarative in SQLAlchemy
    2.0, a new parameter [`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column") has been added that can be used to control the
    order of the columns defined in the table by the ORM, for common use cases such
    as mixins with primary key columns that should appear first in tables. The change
    notes at [ORM Declarative Applies Column Orders Differently; Control behavior
    using sort_order](whatsnew_20.html#change-9297) illustrate the default change
    in ordering behavior (which is part of all SQLAlchemy 2.0 releases) as well as
    use of the [`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column") to control column ordering when using mixins and
    multiple classes (new in 2.0.4).
  id: totrans-4300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了适应SQLAlchemy 2.0中ORM声明式使用的列排序更改，已添加了一个新参数 [`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column") ，可用于控制ORM在表中定义的列的顺序，用于常见用例，例如具有应在表中首先显示的主键列的混合使用。变更说明中
    [ORM声明式以不同方式应用列顺序；使用sort_order控制行为](whatsnew_20.html#change-9297) 说明了默认的排序行为更改（这是所有SQLAlchemy
    2.0版本的一部分）以及在使用混合和多个类时使用 [`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column") 控制列顺序。
- en: See also
  id: totrans-4301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[ORM Declarative Applies Column Orders Differently; Control behavior using
    sort_order](whatsnew_20.html#change-9297)'
  id: totrans-4302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM声明式以不同方式应用列顺序；使用sort_order控制行为](whatsnew_20.html#change-9297)'
- en: 'References: [#9297](https://www.sqlalchemy.org/trac/ticket/9297)'
  id: totrans-4303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9297](https://www.sqlalchemy.org/trac/ticket/9297)
- en: '**[orm] [usecase]**'
  id: totrans-4304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: The [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method will now immediately load a relationship-bound
    attribute that is explicitly named within the [`Session.refresh.attribute_names`](../orm/session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") collection even if it is currently linked to
    the “select” loader, which normally is a “lazy” loader that does not fire off
    during a refresh. The “lazy loader” strategy will now detect that the operation
    is specifically a user-initiated [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") operation which named this attribute explicitly,
    and will then call upon the “immediateload” strategy to actually emit SQL to load
    the attribute. This should be helpful in particular for some asyncio situations
    where the loading of an unloaded lazy-loaded attribute must be forced, without
    using the actual lazy-loading attribute pattern not supported in asyncio.
  id: totrans-4305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") 方法现在会立即加载一个在 [`Session.refresh.attribute_names`](../orm/session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") 集合中明确命名的与关系绑定的属性，即使它当前连接到“select”加载器，通常是一个“懒加载器”，在刷新期间不会触发。现在，“懒加载器”策略将检测到该操作特别是一个由用户启动的
    [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    操作，该操作明确命名了此属性，然后将调用“immediateload”策略来实际发出SQL以加载属性。对于某些asyncio情况，必须强制加载未加载的惰性加载属性，而不使用实际不支持asyncio的惰性加载属性模式，这应该是有帮助的。'
- en: 'References: [#9298](https://www.sqlalchemy.org/trac/ticket/9298)'
  id: totrans-4306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9298](https://www.sqlalchemy.org/trac/ticket/9298)
- en: '**[orm] [bug] [regression]**'
  id: totrans-4307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误] [回归]**'
- en: Fixed regression introduced in version 2.0.2 due to [#9217](https://www.sqlalchemy.org/trac/ticket/9217)
    where using DML RETURNING statements, as well as [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") constructs as was “fixed” in
    [#9217](https://www.sqlalchemy.org/trac/ticket/9217), in conjunction with ORM
    mapped classes that used expressions such as with [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), would lead to an internal error within Core
    where it would attempt to match the expression by name. The fix repairs the Core
    issue, and also adjusts the fix in [#9217](https://www.sqlalchemy.org/trac/ticket/9217)
    to not take effect for the DML RETURNING use case, where it adds unnecessary overhead.
  id: totrans-4308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在版本2.0.2中引入的回归问题，原因是 [#9217](https://www.sqlalchemy.org/trac/ticket/9217)，其中使用
    DML RETURNING 语句以及[`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") 构造，就像在 [#9217](https://www.sqlalchemy.org/trac/ticket/9217)
    中“修复”的一样，与使用表达式的 ORM 映射类一起，例如 [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")，将导致 Core 内部错误，其中它将尝试按名称匹配表达式。修复修复了 Core 问题，并且还调整了在
    DML RETURNING 用例中的修复 [#9217](https://www.sqlalchemy.org/trac/ticket/9217)，其中它添加了不必要的开销。
- en: 'References: [#9273](https://www.sqlalchemy.org/trac/ticket/9273)'
  id: totrans-4309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9273](https://www.sqlalchemy.org/trac/ticket/9273)
- en: '**[orm] [bug]**'
  id: totrans-4310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Marked the internal `EvaluatorCompiler` module as private to the ORM, and renamed
    it to `_EvaluatorCompiler`. For users that may have been relying upon this, the
    name `EvaluatorCompiler` is still present, however this use is not supported and
    will be removed in a future release.
  id: totrans-4311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将内部的`EvaluatorCompiler`模块标记为 ORM 的私有，并将其重命名为`_EvaluatorCompiler`。对于可能依赖于此的用户，名称`EvaluatorCompiler`仍然存在，但不支持此用法，并将在未来的版本中移除。
- en: orm declarative
  id: totrans-4312
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明式
- en: '**[usecase] [orm declarative]**'
  id: totrans-4313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[用例] [orm 声明式]**'
- en: Added new parameter `dataclasses_callable` to both the [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") class as well as the [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") method which allows an alternative
    callable to Python `dataclasses.dataclass` to be used in order to produce dataclasses.
    The use case here is to drop in Pydantic’s dataclass function instead. Adjustments
    have been made to the mixin support added for [#9179](https://www.sqlalchemy.org/trac/ticket/9179)
    in version 2.0.1 so that the `__annotations__` collection of the mixin is rewritten
    to not include the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    container, in the same way as occurs with mapped classes, so that the Pydantic
    dataclasses constructor is not exposed to unknown types.
  id: totrans-4314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") 类以及 [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") 方法中添加了新参数 `dataclasses_callable`，该参数允许使用
    Python `dataclasses.dataclass` 的替代可调用对象来生成数据类。此处的用例是替换 Pydantic 的 dataclass 函数。对于版本2.0.1中添加的对
    [#9179](https://www.sqlalchemy.org/trac/ticket/9179) 的 mixin 支持进行了调整，以便重写 mixin
    的 `__annotations__` 集合，以不包括 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 容器，与映射类一样，这样 Pydantic 数据类的构造函数就不会暴露给未知类型。
- en: See also
  id: totrans-4315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Integrating with Alternate Dataclass Providers such as Pydantic](../orm/dataclasses.html#dataclasses-pydantic)'
  id: totrans-4316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[与 Pydantic 等替代数据类提供程序集成](../orm/dataclasses.html#dataclasses-pydantic)'
- en: 'References: [#9266](https://www.sqlalchemy.org/trac/ticket/9266)'
  id: totrans-4317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9266](https://www.sqlalchemy.org/trac/ticket/9266)
- en: sql
  id: totrans-4318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-4319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where element types of a tuple value would be hardcoded to take
    on the types from a compared-to tuple, when the comparison were using the [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") operator. This was inconsistent
    with the usual way that types are determined for a binary expression, which is
    that the actual element type on the right side is considered first before applying
    the left-hand-side type.
  id: totrans-4320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了元组值的元素类型将被硬编码为从比较元组中获取的类型的问题，当比较使用 [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 运算符时。这与通常确定二元表达式类型的方式不一致，通常是首先考虑右侧的实际元素类型，然后应用左侧的类型。
- en: 'References: [#9313](https://www.sqlalchemy.org/trac/ticket/9313)'
  id: totrans-4321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9313](https://www.sqlalchemy.org/trac/ticket/9313)
- en: '**[sql]**'
  id: totrans-4322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added public property [`Table.autoincrement_column`](../core/metadata.html#sqlalchemy.schema.Table.autoincrement_column
    "sqlalchemy.schema.Table.autoincrement_column") that returns the column identified
    as autoincrementing in the column.
  id: totrans-4323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了公共属性 [`Table.autoincrement_column`](../core/metadata.html#sqlalchemy.schema.Table.autoincrement_column
    "sqlalchemy.schema.Table.autoincrement_column")，返回标识为自增的列。
- en: 'References: [#9277](https://www.sqlalchemy.org/trac/ticket/9277)'
  id: totrans-4324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9277](https://www.sqlalchemy.org/trac/ticket/9277)
- en: typing
  id: totrans-4325
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [usecase]**'
  id: totrans-4326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [usecase]**'
- en: Improved the typing support for the [Hybrid Attributes](../orm/extensions/hybrid.html)
    extension, updated all documentation to use ORM Annotated Declarative mappings,
    and added a new modifier called [`hybrid_property.inplace`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace"). This modifier provides a way
    to alter the state of a [`hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") **in place**, which is essentially what
    very early versions of hybrids did, before SQLAlchemy version 1.2.0 [#3912](https://www.sqlalchemy.org/trac/ticket/3912)
    changed this to remove in-place mutation. This in-place mutation is now restored
    on an **opt-in** basis to allow a single hybrid to have multiple methods set up,
    without the need to name all the methods the same and without the need to carefully
    “chain” differently-named methods in order to maintain the composition. Typing
    tools such as Mypy and Pyright do not allow same-named methods on a class, so
    with this change a succinct method of setting up hybrids with typing support is
    restored.
  id: totrans-4327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对 [Hybrid Attributes](../orm/extensions/hybrid.html) 扩展的类型支持，更新了所有文档以使用 ORM
    注释性声明映射，并添加了一个名为 [`hybrid_property.inplace`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") 的新修饰符。此修饰符提供了一种在原地更改 [`hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") 状态的方法，这基本上是 SQLAlchemy 版本 1.2.0 之前非常早期的混合版本所做的，版本
    1.2.0 [#3912](https://www.sqlalchemy.org/trac/ticket/3912) 改变了这一点，以删除原地变异。现在，这种原地变异已恢复为**选择加入**的基础，以允许单个混合具有多个设置的方法，而无需命名所有方法相同，也无需仔细地“链接”名称不同的方法以维护组合。类型工具如
    Mypy 和 Pyright 不允许在类上具有相同名称的方法，因此通过此更改，恢复了一种具有类型支持的混合的简洁方法。
- en: See also
  id: totrans-4328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using inplace to create pep-484 compliant hybrid properties](../orm/extensions/hybrid.html#hybrid-pep484-naming)'
  id: totrans-4329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 inplace 创建符合 pep-484 标准的混合属性](../orm/extensions/hybrid.html#hybrid-pep484-naming)'
- en: 'References: [#9321](https://www.sqlalchemy.org/trac/ticket/9321)'
  id: totrans-4330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9321](https://www.sqlalchemy.org/trac/ticket/9321)
- en: oracle
  id: totrans-4331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-4332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Adjusted the behavior of the `thick_mode` parameter for the [python-oracledb](../dialects/oracle.html#oracledb)
    dialect to correctly accept `False` as a value. Previously, only `None` would
    indicate that thick mode should be disabled.
  id: totrans-4333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 [python-oracledb](../dialects/oracle.html#oracledb) 方言的 `thick_mode` 参数的行为，以正确接受
    `False` 作为值。之前，只有 `None` 会指示应禁用 thick mode。
- en: 'References: [#9295](https://www.sqlalchemy.org/trac/ticket/9295)'
  id: totrans-4334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9295](https://www.sqlalchemy.org/trac/ticket/9295)
- en: orm
  id: totrans-4335
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-4336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: To accommodate a change in column ordering used by ORM Declarative in SQLAlchemy
    2.0, a new parameter [`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column") has been added that can be used to control the
    order of the columns defined in the table by the ORM, for common use cases such
    as mixins with primary key columns that should appear first in tables. The change
    notes at [ORM Declarative Applies Column Orders Differently; Control behavior
    using sort_order](whatsnew_20.html#change-9297) illustrate the default change
    in ordering behavior (which is part of all SQLAlchemy 2.0 releases) as well as
    use of the [`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column") to control column ordering when using mixins and
    multiple classes (new in 2.0.4).
  id: totrans-4337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了适应 SQLAlchemy 2.0 中 ORM Declarative 使用的列排序变化，已添加了一个新参数 [`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column")，可以用于控制 ORM 定义的表中列的顺序，用于常见用例，例如带有应首先出现在表中的主键列的混合的情况。[ORM
    Declarative Applies Column Orders Differently; Control behavior using sort_order](whatsnew_20.html#change-9297)
    中的更改说明描述了默认的顺序更改行为（这是所有 SQLAlchemy 2.0 发行版的一部分）以及在使用 mixins 和多个类时使用 [`mapped_column.sort_order`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.sort_order
    "sqlalchemy.orm.mapped_column") 控制列排序的用法（2.0.4 中的新功能）。
- en: See also
  id: totrans-4338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[ORM Declarative Applies Column Orders Differently; Control behavior using
    sort_order](whatsnew_20.html#change-9297)'
  id: totrans-4339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM Declarative Applies Column Orders Differently; Control behavior using
    sort_order](whatsnew_20.html#change-9297)'
- en: 'References: [#9297](https://www.sqlalchemy.org/trac/ticket/9297)'
  id: totrans-4340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9297](https://www.sqlalchemy.org/trac/ticket/9297)
- en: '**[orm] [usecase]**'
  id: totrans-4341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: The [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method will now immediately load a relationship-bound
    attribute that is explicitly named within the [`Session.refresh.attribute_names`](../orm/session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") collection even if it is currently linked to
    the “select” loader, which normally is a “lazy” loader that does not fire off
    during a refresh. The “lazy loader” strategy will now detect that the operation
    is specifically a user-initiated [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") operation which named this attribute explicitly,
    and will then call upon the “immediateload” strategy to actually emit SQL to load
    the attribute. This should be helpful in particular for some asyncio situations
    where the loading of an unloaded lazy-loaded attribute must be forced, without
    using the actual lazy-loading attribute pattern not supported in asyncio.
  id: totrans-4342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") 方法现在将立即加载在[`Session.refresh.attribute_names`](../orm/session_api.html#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") 集合中显式命名的与关系绑定的属性，即使它当前连接到“select”加载器，这通常是一个“延迟”加载器，在刷新期间不会触发。
    “延迟加载器”策略现在将检测到该操作明确是用户启动的 [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") 操作，该操作明确命名了此属性，并且将调用“immediateload”策略来实际发出 SQL
    以加载属性。这对某些 asyncio 情况特别有帮助，其中必须强制加载未加载的惰性加载属性，而无需使用实际不支持的 asyncio 惰性加载属性模式。'
- en: 'References: [#9298](https://www.sqlalchemy.org/trac/ticket/9298)'
  id: totrans-4343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9298](https://www.sqlalchemy.org/trac/ticket/9298)
- en: '**[orm] [bug] [regression]**'
  id: totrans-4344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression introduced in version 2.0.2 due to [#9217](https://www.sqlalchemy.org/trac/ticket/9217)
    where using DML RETURNING statements, as well as [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") constructs as was “fixed” in
    [#9217](https://www.sqlalchemy.org/trac/ticket/9217), in conjunction with ORM
    mapped classes that used expressions such as with [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property"), would lead to an internal error within Core
    where it would attempt to match the expression by name. The fix repairs the Core
    issue, and also adjusts the fix in [#9217](https://www.sqlalchemy.org/trac/ticket/9217)
    to not take effect for the DML RETURNING use case, where it adds unnecessary overhead.
  id: totrans-4345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在版本 2.0.2 中引入的回归问题，原因是 [#9217](https://www.sqlalchemy.org/trac/ticket/9217)，其中使用
    DML RETURNING 语句以及 [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") 构造，在与使用了 [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") 等表达式的 ORM 映射类一起使用时，会导致核心内部错误，该错误尝试按名称匹配表达式。该修复修复了核心问题，并且还调整了
    [#9217](https://www.sqlalchemy.org/trac/ticket/9217) 中的修复，以便不会影响 DML RETURNING
    的用例，因为它增加了不必要的开销。
- en: 'References: [#9273](https://www.sqlalchemy.org/trac/ticket/9273)'
  id: totrans-4346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9273](https://www.sqlalchemy.org/trac/ticket/9273)
- en: '**[orm] [bug]**'
  id: totrans-4347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Marked the internal `EvaluatorCompiler` module as private to the ORM, and renamed
    it to `_EvaluatorCompiler`. For users that may have been relying upon this, the
    name `EvaluatorCompiler` is still present, however this use is not supported and
    will be removed in a future release.
  id: totrans-4348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将内部的 `EvaluatorCompiler` 模块标记为 ORM 的私有，并将其重命名为 `_EvaluatorCompiler`。对于可能依赖此功能的用户，名称
    `EvaluatorCompiler` 仍然存在，但不支持此用法，并将在未来的版本中移除。
- en: orm declarative
  id: totrans-4349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明式
- en: '**[usecase] [orm declarative]**'
  id: totrans-4350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[用例] [orm声明式]**'
- en: Added new parameter `dataclasses_callable` to both the [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") class as well as the [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") method which allows an alternative
    callable to Python `dataclasses.dataclass` to be used in order to produce dataclasses.
    The use case here is to drop in Pydantic’s dataclass function instead. Adjustments
    have been made to the mixin support added for [#9179](https://www.sqlalchemy.org/trac/ticket/9179)
    in version 2.0.1 so that the `__annotations__` collection of the mixin is rewritten
    to not include the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    container, in the same way as occurs with mapped classes, so that the Pydantic
    dataclasses constructor is not exposed to unknown types.
  id: totrans-4351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") 类和 [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") 方法中添加了新参数 `dataclasses_callable`，允许使用替代
    Python `dataclasses.dataclass` 的可调用对象来生成数据类。这里的用例是使用 Pydantic 的 dataclass 函数。对版本
    2.0.1 中添加的用于 [#9179](https://www.sqlalchemy.org/trac/ticket/9179) 的 mixin 支持进行了调整，以便将
    mixin 的 `__annotations__` 集合重写为不包含 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 容器，与映射类一样，这样 Pydantic 数据类的构造函数就不会暴露给未知类型。
- en: See also
  id: totrans-4352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Integrating with Alternate Dataclass Providers such as Pydantic](../orm/dataclasses.html#dataclasses-pydantic)'
  id: totrans-4353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[与 Pydantic 等备选数据类提供程序集成](../orm/dataclasses.html#dataclasses-pydantic)'
- en: 'References: [#9266](https://www.sqlalchemy.org/trac/ticket/9266)'
  id: totrans-4354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9266](https://www.sqlalchemy.org/trac/ticket/9266)
- en: sql
  id: totrans-4355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-4356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue where element types of a tuple value would be hardcoded to take
    on the types from a compared-to tuple, when the comparison were using the [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") operator. This was inconsistent
    with the usual way that types are determined for a binary expression, which is
    that the actual element type on the right side is considered first before applying
    the left-hand-side type.
  id: totrans-4357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了元组值的元素类型会被硬编码为与比较元组相同类型的问题，当比较使用[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 运算符时。这与通常确定二元表达式类型的方式不一致，通常情况下会首先考虑右侧的实际元素类型，然后再应用左侧的类型。
- en: 'References: [#9313](https://www.sqlalchemy.org/trac/ticket/9313)'
  id: totrans-4358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9313](https://www.sqlalchemy.org/trac/ticket/9313)
- en: '**[sql]**'
  id: totrans-4359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Added public property [`Table.autoincrement_column`](../core/metadata.html#sqlalchemy.schema.Table.autoincrement_column
    "sqlalchemy.schema.Table.autoincrement_column") that returns the column identified
    as autoincrementing in the column.
  id: totrans-4360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了公共属性 [`Table.autoincrement_column`](../core/metadata.html#sqlalchemy.schema.Table.autoincrement_column
    "sqlalchemy.schema.Table.autoincrement_column")，该属性返回标识为自动增量的列。
- en: 'References: [#9277](https://www.sqlalchemy.org/trac/ticket/9277)'
  id: totrans-4361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9277](https://www.sqlalchemy.org/trac/ticket/9277)
- en: typing
  id: totrans-4362
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [usecase]**'
  id: totrans-4363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [usecase]**'
- en: Improved the typing support for the [Hybrid Attributes](../orm/extensions/hybrid.html)
    extension, updated all documentation to use ORM Annotated Declarative mappings,
    and added a new modifier called [`hybrid_property.inplace`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace"). This modifier provides a way
    to alter the state of a [`hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") **in place**, which is essentially what
    very early versions of hybrids did, before SQLAlchemy version 1.2.0 [#3912](https://www.sqlalchemy.org/trac/ticket/3912)
    changed this to remove in-place mutation. This in-place mutation is now restored
    on an **opt-in** basis to allow a single hybrid to have multiple methods set up,
    without the need to name all the methods the same and without the need to carefully
    “chain” differently-named methods in order to maintain the composition. Typing
    tools such as Mypy and Pyright do not allow same-named methods on a class, so
    with this change a succinct method of setting up hybrids with typing support is
    restored.
  id: totrans-4364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对 [Hybrid Attributes](../orm/extensions/hybrid.html) 扩展的类型支持，更新了所有文档以使用 ORM
    Annotated Declarative mappings，并添加了一个名为 [`hybrid_property.inplace`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property.inplace
    "sqlalchemy.ext.hybrid.hybrid_property.inplace") 的新修饰符。此修饰符提供了一种**就地**修改 [`hybrid_property`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property") 状态的方式，这本质上是早期版本的 hybrids 在 SQLAlchemy
    版本 1.2.0 之前所做的事情，它在此版本中取消了就地变异。现在，此就地变异已经恢复，以允许单个 hybrid 具有多个设置的方法，而无需将所有方法命名相同，并且无需仔细“链接”不同命名的方法以维护组成。例如
    Mypy 和 Pyright 等类型工具不允许类上具有相同名称的方法，因此通过此更改，恢复了带有类型支持的简洁方法来设置 hybrids。
- en: See also
  id: totrans-4365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using inplace to create pep-484 compliant hybrid properties](../orm/extensions/hybrid.html#hybrid-pep484-naming)'
  id: totrans-4366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 inplace 创建符合 pep-484 的混合属性](../orm/extensions/hybrid.html#hybrid-pep484-naming)'
- en: 'References: [#9321](https://www.sqlalchemy.org/trac/ticket/9321)'
  id: totrans-4367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9321](https://www.sqlalchemy.org/trac/ticket/9321)
- en: oracle
  id: totrans-4368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-4369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Adjusted the behavior of the `thick_mode` parameter for the [python-oracledb](../dialects/oracle.html#oracledb)
    dialect to correctly accept `False` as a value. Previously, only `None` would
    indicate that thick mode should be disabled.
  id: totrans-4370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了[python-oracledb](../dialects/oracle.html#oracledb)方言的`thick_mode`参数的行为，以正确接受`False`作为值。之前，只有`None`表示应禁用
    thick mode。
- en: 'References: [#9295](https://www.sqlalchemy.org/trac/ticket/9295)'
  id: totrans-4371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9295](https://www.sqlalchemy.org/trac/ticket/9295)
- en: 2.0.3
  id: totrans-4372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.3
- en: 'Released: February 9, 2023'
  id: totrans-4373
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023 年 2 月 9 日
- en: sql
  id: totrans-4374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [regression]**'
  id: totrans-4375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [regression]**'
- en: Fixed critical regression in SQL expression formulation in the 2.0 series due
    to [#7744](https://www.sqlalchemy.org/trac/ticket/7744) which improved support
    for SQL expressions that contained many elements against the same operator repeatedly;
    parenthesis grouping would be lost with expression elements beyond the first two
    elements.
  id: totrans-4376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 [#7744](https://www.sqlalchemy.org/trac/ticket/7744) 引入的严重回归问题，修复了 SQL 表达式在
    2.0 系列中的组合，该问题改进了对重复使用同一运算符的 SQL 表达式的支持；表达式中包含的多个元素会丢失括号分组，除了前两个元素之外的表达式元素。
- en: 'References: [#9271](https://www.sqlalchemy.org/trac/ticket/9271)'
  id: totrans-4377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9271](https://www.sqlalchemy.org/trac/ticket/9271)
- en: typing
  id: totrans-4378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-4379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Remove `typing.Self` workaround, now using [**PEP 673**](https://peps.python.org/pep-0673/)
    for most methods that return `Self`. As a consequence of this change `mypy>=1.0.0`
    is now required to type check SQLAlchemy code. Pull request courtesy Yurii Karabas.
  id: totrans-4380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了 `typing.Self` 的解决方法，现在使用 [**PEP 673**](https://peps.python.org/pep-0673/)
    大多数返回 `Self` 的方法。由于此更改，现在需要 `mypy>=1.0.0` 来类型检查 SQLAlchemy 代码。感谢 Yurii Karabas
    提供的拉取请求。
- en: 'References: [#9254](https://www.sqlalchemy.org/trac/ticket/9254)'
  id: totrans-4381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9254](https://www.sqlalchemy.org/trac/ticket/9254)
- en: sql
  id: totrans-4382
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [regression]**'
  id: totrans-4383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [regression]**'
- en: Fixed critical regression in SQL expression formulation in the 2.0 series due
    to [#7744](https://www.sqlalchemy.org/trac/ticket/7744) which improved support
    for SQL expressions that contained many elements against the same operator repeatedly;
    parenthesis grouping would be lost with expression elements beyond the first two
    elements.
  id: totrans-4384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 2.0 系列中由于 [#7744](https://www.sqlalchemy.org/trac/ticket/7744) 导致的 SQL 表达式形成中的关键回归，该回归改进了对包含多个相同运算符的
    SQL 表达式的支持；当表达式元素超过前两个元素时，括号分组将会丢失。
- en: 'References: [#9271](https://www.sqlalchemy.org/trac/ticket/9271)'
  id: totrans-4385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9271](https://www.sqlalchemy.org/trac/ticket/9271)
- en: typing
  id: totrans-4386
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型
- en: '**[typing] [bug]**'
  id: totrans-4387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [错误]**'
- en: Remove `typing.Self` workaround, now using [**PEP 673**](https://peps.python.org/pep-0673/)
    for most methods that return `Self`. As a consequence of this change `mypy>=1.0.0`
    is now required to type check SQLAlchemy code. Pull request courtesy Yurii Karabas.
  id: totrans-4388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了 `typing.Self` 的解决方法，现在大多数返回 `Self` 的方法使用 [**PEP 673**](https://peps.python.org/pep-0673/)。由于这一变更，现在需要
    `mypy>=1.0.0` 来对 SQLAlchemy 代码进行类型检查。感谢 Yurii Karabas 提交的拉取请求。
- en: 'References: [#9254](https://www.sqlalchemy.org/trac/ticket/9254)'
  id: totrans-4389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9254](https://www.sqlalchemy.org/trac/ticket/9254)
- en: 2.0.2
  id: totrans-4390
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.2
- en: 'Released: February 6, 2023'
  id: totrans-4391
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023 年 2 月 6 日
- en: orm
  id: totrans-4392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-4393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Added new event hook [`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed"), which supplies an event
    hook to take place right as the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object has been fully constructed, but before the [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") call has been called. This allows code that
    can create additional mappings and table structures based on the initial configuration
    of a [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper"),
    which also integrates within Declarative configuration. Previously, when using
    Declarative, where the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object is created within the class creation process,
    there was no documented means of running code at this point. The change is to
    immediately benefit custom mapping schemes such as that of the [Versioning with
    a History Table](../orm/examples.html#examples-versioned-history) example, which
    generate additional mappers and tables in response to the creation of mapped classes.
  id: totrans-4394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件钩子 [`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed")，它提供了一个事件钩子，可以在 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 对象完全构建完成后但在调用 [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") 前发生。这允许根据 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 的初始配置创建其他映射和表结构的代码，这也与声明性配置集成。以前，当使用声明性时，在类创建过程中创建了 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 对象时，没有记录文档的方式在这一点运行代码。该变更立即受益于自定义映射方案，例如 [带有历史表的版本控制](../orm/examples.html#examples-versioned-history)
    示例，该示例根据映射类的创建生成其他映射和表。
- en: 'References: [#9220](https://www.sqlalchemy.org/trac/ticket/9220)'
  id: totrans-4395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9220](https://www.sqlalchemy.org/trac/ticket/9220)
- en: '**[orm] [usecase]**'
  id: totrans-4396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: The infrequently used [`Mapper.iterate_properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.iterate_properties
    "sqlalchemy.orm.Mapper.iterate_properties") attribute and [`Mapper.get_property()`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.get_property
    "sqlalchemy.orm.Mapper.get_property") method, which are primarily used internally,
    no longer implicitly invoke the [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") process. Public access to these methods is
    extremely rare and the only benefit to having [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") would have been allowing “backref” properties
    be present in these collections. In order to support the new [`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed") event, iteration and access
    to the internal [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects is now possible without triggering an
    implicit configure of the mapper itself.
  id: totrans-4397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不常用的 [`Mapper.iterate_properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.iterate_properties
    "sqlalchemy.orm.Mapper.iterate_properties") 属性和 [`Mapper.get_property()`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.get_property
    "sqlalchemy.orm.Mapper.get_property") 方法，主要用于内部，不再隐式调用 [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") 过程。对这些方法的公共访问极为罕见，而拥有 [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") 的唯一好处将是允许这些集合中存在“backref”属性。为了支持新的 [`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed") 事件，现在可以遍历和访问内部的 [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") 对象，而不触发映射器本身的隐式配置。
- en: The more-public facing route to iteration of all mapper attributes, the [`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs") collection and similar, will still implicitly invoke
    the [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") step thus making backref attributes available.
  id: totrans-4398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更为公开的遍历所有映射器属性的路径，[`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs") 集合等，仍将隐式调用 [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") 步骤，从而使反向引用属性可用。
- en: In all cases, the [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") is always available to be called directly.
  id: totrans-4399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在所有情况下，都可以直接调用 [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure")。
- en: 'References: [#9220](https://www.sqlalchemy.org/trac/ticket/9220)'
  id: totrans-4400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9220](https://www.sqlalchemy.org/trac/ticket/9220)
- en: '**[orm] [bug] [ression]**'
  id: totrans-4401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [回归]**'
- en: Fixed obscure ORM inheritance issue caused by [#8705](https://www.sqlalchemy.org/trac/ticket/8705)
    where some scenarios of inheriting mappers that indicated groups of columns from
    the local table and the inheriting table together under a [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") would nonetheless warn that properties of the
    same name were being combined implicitly.
  id: totrans-4402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 [#8705](https://www.sqlalchemy.org/trac/ticket/8705) 引起的不常见的 ORM 继承问题，在某些情况下，继承自本地表和继承表的列组的映射器，会在
    [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    下发出警告，指示同名属性被隐式合并。
- en: 'References: [#9232](https://www.sqlalchemy.org/trac/ticket/9232)'
  id: totrans-4403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9232](https://www.sqlalchemy.org/trac/ticket/9232)
- en: '**[orm] [bug] [regression]**'
  id: totrans-4404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [回归]**'
- en: Fixed regression where using the [`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") feature with a regular Python-side incrementing column
    would fail to work for SQLite and other databases that don’t support “rowcount”
    with “RETURNING”, as “RETURNING” would be assumed for such columns even though
    that’s not what actually takes place.
  id: totrans-4405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 [`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") 功能时的回归，当使用普通的 Python 递增列时，SQLite 和其他不支持“rowcount”与“RETURNING”的数据库将无法正常工作，因为对于这些列，将假定使用“RETURNING”，尽管实际情况并非如此。
- en: 'References: [#9228](https://www.sqlalchemy.org/trac/ticket/9228)'
  id: totrans-4406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9228](https://www.sqlalchemy.org/trac/ticket/9228)
- en: '**[orm] [bug] [regression]**'
  id: totrans-4407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [回归]**'
- en: Fixed regression when using [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") in an ORM context, where matching
    of columns to SQL labels based on name alone was disabled for ORM-statements that
    weren’t fully textual. This would prevent arbitrary SQL expressions with column-name
    labels from matching up to the entity to be loaded, which previously would work
    within the 1.4 and previous series, so the previous behavior has been restored.
  id: totrans-4408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在ORM上下文中使用[`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement")时的回归，其中仅基于名称匹配列到SQL标签的功能在不是完全文本的ORM语句上被禁用。这将阻止具有列名标签的任意SQL表达式与要加载的实体匹配，而以前在1.4和之前的系列中可以工作，因此已恢复了以前的行为。
- en: 'References: [#9217](https://www.sqlalchemy.org/trac/ticket/9217)'
  id: totrans-4409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9217](https://www.sqlalchemy.org/trac/ticket/9217)
- en: orm declarative
  id: totrans-4410
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM声明式
- en: '**[bug] [orm declarative]**'
  id: totrans-4411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [orm声明式]**'
- en: Fixed regression caused by the fix for [#9171](https://www.sqlalchemy.org/trac/ticket/9171),
    which itself was fixing a regression, involving the mechanics of `__init__()`
    on classes that extend from [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase"). The change made it such that `__init__()` was
    applied to the user-defined base if there were no `__init__()` method directly
    on the class. This has been adjusted so that `__init__()` is applied only if no
    other class in the hierarchy of the user-defined base has an `__init__()` method.
    This again allows user-defined base classes based on [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") to include mixins that themselves include a
    custom `__init__()` method.
  id: totrans-4412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由对[#9171](https://www.sqlalchemy.org/trac/ticket/9171)的修复引起的回归，该修复本身正在修复涉及从[`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")扩展的类上的`__init__()`机制的回归。更改使得如果类上没有直接`__init__()`方法，则`__init__()`将应用于用户定义的基类。已调整为仅在用户定义的基类的层次结构中没有其他类具有`__init__()`方法时才应用`__init__()`。这再次允许基于[`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")的用户定义基类包含自身包含自定义`__init__()`方法的混入。
- en: 'References: [#9249](https://www.sqlalchemy.org/trac/ticket/9249)'
  id: totrans-4413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9249](https://www.sqlalchemy.org/trac/ticket/9249)
- en: '**[bug] [orm declarative]**'
  id: totrans-4414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [orm声明式]**'
- en: Fixed issue in ORM Declarative Dataclass mappings related to newly added support
    for mixins added in 2.0.1 via [#9179](https://www.sqlalchemy.org/trac/ticket/9179),
    where a combination of using mixins plus ORM inheritance would mis-classify fields
    in some cases leading to field-level dataclass arguments such as `init=False`
    being lost.
  id: totrans-4415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与2.0.1中新增的对混入支持相关的ORM声明式数据类映射问题，该支持是通过[#9179](https://www.sqlalchemy.org/trac/ticket/9179)添加的，其中在某些情况下使用混入加上ORM继承会导致字段被错误分类，从而导致像`init=False`这样的字段级数据类参数丢失。
- en: 'References: [#9226](https://www.sqlalchemy.org/trac/ticket/9226)'
  id: totrans-4416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9226](https://www.sqlalchemy.org/trac/ticket/9226)
- en: '**[bug] [orm declarative]**'
  id: totrans-4417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [orm声明式]**'
- en: Repaired ORM Declarative mappings to allow for the [`Mapper.primary_key`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") parameter to be specified within `__mapper_args__` when
    using [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column"). Despite this usage being directly in the 2.0
    documentation, the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    was not accepting the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct in this context. Ths feature was already
    working for the [`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") and [`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") parameters.
  id: totrans-4418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ORM声明式映射，允许在使用[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")时在`__mapper_args__`中指定[`Mapper.primary_key`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper")参数。尽管这种用法直接在2.0文档中，但[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")在这种情况下不接受[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")构造。这个功能已经适用于[`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper")和[`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper")参数。
- en: As part of this change, the `__mapper_args__` attribute may be specified without
    using [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") on a non-mapped mixin class, including a `"primary_key"`
    entry that refers to [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") or [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") objects locally present on the mixin; Declarative
    will also translate these columns into the correct ones for a particular mapped
    class. This again was working already for the [`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") and [`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") parameters. Additionally, elements within `"primary_key"`
    may be indicated as string names of existing mapped properties.
  id: totrans-4419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变更的一部分，可以在非映射混合类上指定`__mapper_args__`属性，而无需使用[`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")，包括引用本地存在于混合类上的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")或[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")对象的`"primary_key"`条目；Declarative还将这些列转换为特定映射类的正确列。这对于[`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper")和[`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper")参数已经可以正常工作。此外，`"primary_key"`中的元素可以表示为现有映射属性的字符串名称。
- en: 'References: [#9240](https://www.sqlalchemy.org/trac/ticket/9240)'
  id: totrans-4420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9240](https://www.sqlalchemy.org/trac/ticket/9240)
- en: '**[bug] [orm declarative]**'
  id: totrans-4421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm declarative]**'
- en: An explicit error is raised if a mapping attempts to mix the use of [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") with [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") within the same class hierarchy,
    as this produces issues with the dataclass function being applied at the wrong
    time to the mapped class, leading to errors during the mapping process.
  id: totrans-4422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果映射尝试在同一类层次结构中混合使用[`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")和[`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass")，则会显式引发错误，因为这会导致数据类函数在错误的时间应用于映射类，从而在映射过程中产生错误。
- en: 'References: [#9211](https://www.sqlalchemy.org/trac/ticket/9211)'
  id: totrans-4423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9211](https://www.sqlalchemy.org/trac/ticket/9211)
- en: examples
  id: totrans-4424
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: examples
- en: '**[examples] [bug]**'
  id: totrans-4425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[examples] [bug]**'
- en: Reworked the [Versioning with a History Table](../orm/examples.html#examples-versioned-history)
    to work with version 2.0, while at the same time improving the overall working
    of this example to use newer APIs, including a newly added hook [`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed").
  id: totrans-4426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了[带有历史表的版本控制](../orm/examples.html#examples-versioned-history)，以适配版本2.0，同时改进了此示例的整体工作方式，使用了更新的API，包括新添加的钩子[`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed")。
- en: 'References: [#9220](https://www.sqlalchemy.org/trac/ticket/9220)'
  id: totrans-4427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9220](https://www.sqlalchemy.org/trac/ticket/9220)
- en: sql
  id: totrans-4428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-4429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Added a full suite of new SQL bitwise operators, for performing database-side
    bitwise expressions on appropriate data values such as integers, bit-strings,
    and similar. Pull request courtesy Yegor Statkevich.
  id: totrans-4430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一套全新的SQL位运算符，用于在适当的数据值（如整数、位字符串等）上执行数据库端的位运算表达式。感谢Yegor Statkevich的拉取请求。
- en: See also
  id: totrans-4431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../core/operators.html#operators-bitwise)'
  id: totrans-4432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[位运算符](../core/operators.html#operators-bitwise)'
- en: 'References: [#8780](https://www.sqlalchemy.org/trac/ticket/8780)'
  id: totrans-4433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8780](https://www.sqlalchemy.org/trac/ticket/8780)
- en: asyncio
  id: totrans-4434
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [bug]**'
  id: totrans-4435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [bug]**'
- en: Repaired a regression caused by the fix for [#8419](https://www.sqlalchemy.org/trac/ticket/8419)
    which caused asyncpg connections to be reset (i.e. transaction `rollback()` called)
    and returned to the pool normally in the case that the connection were not explicitly
    returned to the connection pool and was instead being intercepted by Python garbage
    collection, which would fail if the garbage collection operation were being called
    outside of the asyncio event loop, leading to a large amount of stack trace activity
    dumped into logging and standard output.
  id: totrans-4436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由于修复了 [#8419](https://www.sqlalchemy.org/trac/ticket/8419) 而导致的回归，该回归导致 asyncpg
    连接在连接未被显式返回到连接池的情况下（即未显式调用事务 `rollback()`）并且被 Python 垃圾收集拦截时，正常重置并返回到池中，如果垃圾收集操作在
    asyncio 事件循环之外调用，则会导致大量堆栈跟踪活动被转储到日志和标准输出。
- en: The correct behavior is restored, which is that all asyncio connections that
    are garbage collected due to not being explicitly returned to the connection pool
    are detached from the pool and discarded, along with a warning, rather than being
    returned the pool, as they cannot be reliably reset. In the case of asyncpg connections,
    the asyncpg-specific `terminate()` method will be used to end the connection more
    gracefully within this process as opposed to just dropping it.
  id: totrans-4437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了正确的行为，即所有由于未被显式返回到连接池而被垃圾收集的 asyncio 连接都会被分离并丢弃，同时发出警告，而不是返回到池中，因为它们无法可靠地重置。对于
    asyncpg 连接，将使用 asyncpg 特定的 `terminate()` 方法更优雅地结束连接，而不仅仅是将其丢弃。
- en: This change includes a small behavioral change that is hoped to be useful for
    debugging asyncio applications, where the warning that’s emitted in the case of
    asyncio connections being unexpectedly garbage collected has been made slightly
    more aggressive by moving it outside of a `try/except` block and into a `finally:`
    block, where it will emit unconditionally regardless of whether the detach/termination
    operation succeeded or not. It will also have the effect that applications or
    test suites which promote Python warnings to exceptions will see this as a full
    exception raise, whereas previously it was not possible for this warning to actually
    propagate as an exception. Applications and test suites which need to tolerate
    this warning in the interim should adjust the Python warnings filter to allow
    these warnings to not raise.
  id: totrans-4438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改包括了一个希望对调试 asyncio 应用程序有用的小行为更改，其中在 asyncio 连接意外垃圾收集的情况下发出的警告已经通过将其移到 `finally:`
    块之外并放入 `try/except` 块中稍微更积极地发出，无论 detach/termination 操作成功与否都会无条件发出。它还将导致应用程序或测试套件将
    Python 警告提升为异常，从而将此警告视为完整的异常引发，而以前不可能使此警告实际传播为异常。需要在过渡期容忍此警告的应用程序和测试套件应调整 Python
    警告过滤器，以允许这些警告不引发异常。
- en: The behavior for traditional sync connections remains unchanged, that garbage
    collected connections continue to be returned to the pool normally without emitting
    a warning. This will likely be changed in a future major release to at least emit
    a similar warning as is emitted for asyncio drivers, as it is a usage error for
    pooled connections to be intercepted by garbage collection without being properly
    returned to the pool.
  id: totrans-4439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传统同步连接的行为保持不变，即垃圾收集的连接将继续正常返回到池中，而不会发出警告。这可能会在将来的主要版本发布中进行更改，至少会发出类似于 asyncio
    驱动程序发出的警告，因为池化连接被垃圾收集拦截而没有正确返回到池中是使用错误。
- en: 'References: [#9237](https://www.sqlalchemy.org/trac/ticket/9237)'
  id: totrans-4440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9237](https://www.sqlalchemy.org/trac/ticket/9237)
- en: mysql
  id: totrans-4441
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [regression]**'
  id: totrans-4442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [regression]**'
- en: Fixed regression caused by issue [#9058](https://www.sqlalchemy.org/trac/ticket/9058)
    which adjusted the MySQL dialect’s `has_table()` to again use “DESCRIBE”, where
    the specific error code raised by MySQL version 8 when using a non-existent schema
    name was unexpected and failed to be interpreted as a boolean result.
  id: totrans-4443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由问题 [#9058](https://www.sqlalchemy.org/trac/ticket/9058) 引起的回归，该问题调整了 MySQL
    方言的 `has_table()`，再次使用“DESCRIBE”，在使用不存在的模式名称时，MySQL 版本 8 引发的特定错误代码是意外的，并且无法解释为布尔结果。
- en: 'References: [#9251](https://www.sqlalchemy.org/trac/ticket/9251)'
  id: totrans-4444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9251](https://www.sqlalchemy.org/trac/ticket/9251)
- en: '**[mysql] [bug]**'
  id: totrans-4445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for MySQL 8’s new `AS <name> ON DUPLICATE KEY` syntax when using
    [`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update"), which is required
    for newer versions of MySQL 8 as the previous syntax using `VALUES()` now emits
    a deprecation warning with those versions. Server version detection is employed
    to determine if traditional MariaDB / MySQL < 8 `VALUES()` syntax should be used,
    vs. the newer MySQL 8 required syntax. Pull request courtesy Caspar Wylie.
  id: totrans-4446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 [`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") 时，为 MySQL 8 新的 `AS
    <name> ON DUPLICATE KEY` 语法添加了支持，这是新版本的 MySQL 8 所必需的，因为先前使用 `VALUES()` 的语法现在在这些版本中会发出弃用警告。服务器版本检测用于确定是使用传统的
    MariaDB / MySQL < 8 `VALUES()` 语法，还是使用较新的 MySQL 8 必需的语法。感谢 Caspar Wylie 提供的拉取请求。
- en: 'References: [#8626](https://www.sqlalchemy.org/trac/ticket/8626)'
  id: totrans-4447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8626](https://www.sqlalchemy.org/trac/ticket/8626)
- en: sqlite
  id: totrans-4448
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-4449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed the SQLite dialect’s `has_table()` function to correctly report False
    for queries that include a non-None schema name for a schema that doesn’t exist;
    previously, a database error was raised.
  id: totrans-4450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 方言的 `has_table()` 函数，以便在包含不存在的模式名称的查询中正确报告 False；之前，会引发数据库错误。
- en: 'References: [#9251](https://www.sqlalchemy.org/trac/ticket/9251)'
  id: totrans-4451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#9251](https://www.sqlalchemy.org/trac/ticket/9251)
- en: orm
  id: totrans-4452
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [usecase]**'
  id: totrans-4453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Added new event hook [`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed"), which supplies an event
    hook to take place right as the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object has been fully constructed, but before the [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") call has been called. This allows code that
    can create additional mappings and table structures based on the initial configuration
    of a [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper"),
    which also integrates within Declarative configuration. Previously, when using
    Declarative, where the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object is created within the class creation process,
    there was no documented means of running code at this point. The change is to
    immediately benefit custom mapping schemes such as that of the [Versioning with
    a History Table](../orm/examples.html#examples-versioned-history) example, which
    generate additional mappers and tables in response to the creation of mapped classes.
  id: totrans-4454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的事件钩子 [`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed")，它提供了一个事件钩子，在完全构建了 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 对象之后，但在调用 [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") 之前发生。这允许基于初始配置创建其他映射和表结构的代码，这也与 Declarative
    配置集成。之前，在使用 Declarative 时，[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 对象是在类创建过程中创建的，没有记录文档化的方法在此时运行代码。此更改立即有利于自定义映射方案，例如[带有历史表的版本控制](../orm/examples.html#examples-versioned-history)示例中生成额外映射和表的代码。
- en: 'References: [#9220](https://www.sqlalchemy.org/trac/ticket/9220)'
  id: totrans-4455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#9220](https://www.sqlalchemy.org/trac/ticket/9220)
- en: '**[orm] [usecase]**'
  id: totrans-4456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: The infrequently used [`Mapper.iterate_properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.iterate_properties
    "sqlalchemy.orm.Mapper.iterate_properties") attribute and [`Mapper.get_property()`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.get_property
    "sqlalchemy.orm.Mapper.get_property") method, which are primarily used internally,
    no longer implicitly invoke the [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") process. Public access to these methods is
    extremely rare and the only benefit to having [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") would have been allowing “backref” properties
    be present in these collections. In order to support the new [`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed") event, iteration and access
    to the internal [`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty") objects is now possible without triggering an
    implicit configure of the mapper itself.
  id: totrans-4457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 很少使用的[`Mapper.iterate_properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.iterate_properties
    "sqlalchemy.orm.Mapper.iterate_properties")属性和[`Mapper.get_property()`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.get_property
    "sqlalchemy.orm.Mapper.get_property")方法，主要用于内部，现在不再隐式调用[`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure")过程。对这些方法的公共访问极其罕见，而具有[`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure")的唯一好处将是允许这些集合中存在“backref”属性。为了支持新的[`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed")事件，现在可以迭代和访问内部[`MapperProperty`](../orm/internals.html#sqlalchemy.orm.MapperProperty
    "sqlalchemy.orm.MapperProperty")对象，而不会触发隐式的 mapper 配置。
- en: The more-public facing route to iteration of all mapper attributes, the [`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs") collection and similar, will still implicitly invoke
    the [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") step thus making backref attributes available.
  id: totrans-4458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更公共的遍历所有 mapper 属性的路径，[`Mapper.attrs`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.attrs
    "sqlalchemy.orm.Mapper.attrs") 集合等，仍然会隐式调用 [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") 步骤，从而使 backref 属性可用。
- en: In all cases, the [`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") is always available to be called directly.
  id: totrans-4459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在所有情况下，[`registry.configure()`](../orm/mapping_api.html#sqlalchemy.orm.registry.configure
    "sqlalchemy.orm.registry.configure") 始终可供直接调用。
- en: 'References: [#9220](https://www.sqlalchemy.org/trac/ticket/9220)'
  id: totrans-4460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9220](https://www.sqlalchemy.org/trac/ticket/9220)
- en: '**[orm] [bug] [ression]**'
  id: totrans-4461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [ression]**'
- en: Fixed obscure ORM inheritance issue caused by [#8705](https://www.sqlalchemy.org/trac/ticket/8705)
    where some scenarios of inheriting mappers that indicated groups of columns from
    the local table and the inheriting table together under a [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") would nonetheless warn that properties of the
    same name were being combined implicitly.
  id: totrans-4462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 [#8705](https://www.sqlalchemy.org/trac/ticket/8705) 引起的模糊的 ORM 继承问题，其中某些从本地表和继承表一起指示列组的继承映射器的情景，在
    [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    下仍然会警告同名属性被隐式组合的问题。
- en: 'References: [#9232](https://www.sqlalchemy.org/trac/ticket/9232)'
  id: totrans-4463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9232](https://www.sqlalchemy.org/trac/ticket/9232)
- en: '**[orm] [bug] [regression]**'
  id: totrans-4464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression where using the [`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") feature with a regular Python-side incrementing column
    would fail to work for SQLite and other databases that don’t support “rowcount”
    with “RETURNING”, as “RETURNING” would be assumed for such columns even though
    that’s not what actually takes place.
  id: totrans-4465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper")特性时的退化情况，当使用普通的Python端递增列时，该特性无法在SQLite和其他不支持“返回行数”的数据库中正常工作，因为会假设对于这些列使用“返回”，尽管实际上并非如此。
- en: 'References: [#9228](https://www.sqlalchemy.org/trac/ticket/9228)'
  id: totrans-4466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9228](https://www.sqlalchemy.org/trac/ticket/9228)
- en: '**[orm] [bug] [regression]**'
  id: totrans-4467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression when using [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") in an ORM context, where matching
    of columns to SQL labels based on name alone was disabled for ORM-statements that
    weren’t fully textual. This would prevent arbitrary SQL expressions with column-name
    labels from matching up to the entity to be loaded, which previously would work
    within the 1.4 and previous series, so the previous behavior has been restored.
  id: totrans-4468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 ORM 上下文中使用 [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") 时的回归问题，其中仅基于名称的列与 SQL 标签的匹配被禁用，以前完全不是文本的
    ORM 语句。 这将阻止具有基于列名标签的任意 SQL 表达式与要加载的实体匹配，这在 1.4 和以前的系列中以前可以工作，因此已恢复了先前的行为。
- en: 'References: [#9217](https://www.sqlalchemy.org/trac/ticket/9217)'
  id: totrans-4469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9217](https://www.sqlalchemy.org/trac/ticket/9217)
- en: orm declarative
  id: totrans-4470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[bug] [orm declarative]**'
  id: totrans-4471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm declarative]**'
- en: Fixed regression caused by the fix for [#9171](https://www.sqlalchemy.org/trac/ticket/9171),
    which itself was fixing a regression, involving the mechanics of `__init__()`
    on classes that extend from [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase"). The change made it such that `__init__()` was
    applied to the user-defined base if there were no `__init__()` method directly
    on the class. This has been adjusted so that `__init__()` is applied only if no
    other class in the hierarchy of the user-defined base has an `__init__()` method.
    This again allows user-defined base classes based on [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") to include mixins that themselves include a
    custom `__init__()` method.
  id: totrans-4472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于对 [#9171](https://www.sqlalchemy.org/trac/ticket/9171) 修复引起的回归问题进行了修复，该问题本身修复了涉及从[`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") 派生的类的`__init__()` 机制的回归问题。 更改使得如果类上没有直接 `__init__()`
    方法，则 `__init__()` 将应用于用户定义的基类。 现已调整为仅在用户定义的基类的层次结构中没有其他类具有 `__init__()` 方法时才应用
    `__init__()`。 这再次允许基于[`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") 的用户定义的基类包括包含自定义 `__init__()` 方法的 mixins。
- en: 'References: [#9249](https://www.sqlalchemy.org/trac/ticket/9249)'
  id: totrans-4473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9249](https://www.sqlalchemy.org/trac/ticket/9249)
- en: '**[bug] [orm declarative]**'
  id: totrans-4474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm declarative]**'
- en: Fixed issue in ORM Declarative Dataclass mappings related to newly added support
    for mixins added in 2.0.1 via [#9179](https://www.sqlalchemy.org/trac/ticket/9179),
    where a combination of using mixins plus ORM inheritance would mis-classify fields
    in some cases leading to field-level dataclass arguments such as `init=False`
    being lost.
  id: totrans-4475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM Declarative Dataclass 映射中的问题，与 2.0.1 中新增的对 mixins 的支持相关，通过 [#9179](https://www.sqlalchemy.org/trac/ticket/9179)
    添加，其中使用 mixins 加上 ORM 继承的组合在某些情况下会错误地分类字段，导致字段级别的 dataclass 参数（如 `init=False`）丢失。
- en: 'References: [#9226](https://www.sqlalchemy.org/trac/ticket/9226)'
  id: totrans-4476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9226](https://www.sqlalchemy.org/trac/ticket/9226)
- en: '**[bug] [orm declarative]**'
  id: totrans-4477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm declarative]**'
- en: Repaired ORM Declarative mappings to allow for the [`Mapper.primary_key`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") parameter to be specified within `__mapper_args__` when
    using [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column"). Despite this usage being directly in the 2.0
    documentation, the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    was not accepting the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct in this context. Ths feature was already
    working for the [`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") and [`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") parameters.
  id: totrans-4478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM Declarative 映射，以允许在使用 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 时在 `__mapper_args__` 中指定 [`Mapper.primary_key`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") 参数。 尽管此用法直接在 2.0 文档中，但 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 在此上下文中不接受 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 构造。 此功能已经适用于 [`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") 和 [`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") 参数。
- en: As part of this change, the `__mapper_args__` attribute may be specified without
    using [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") on a non-mapped mixin class, including a `"primary_key"`
    entry that refers to [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") or [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") objects locally present on the mixin; Declarative
    will also translate these columns into the correct ones for a particular mapped
    class. This again was working already for the [`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") and [`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") parameters. Additionally, elements within `"primary_key"`
    may be indicated as string names of existing mapped properties.
  id: totrans-4479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为此更改的一部分，可以在非映射的混合类上指定 `__mapper_args__` 属性，而无需使用 [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")，其中包括引用了本地存在的 [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 或 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 对象的 `"primary_key"` 条目；声明式还将这些列转换为特定映射类的正确列。这在[`Mapper.version_id_col`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.version_id_col
    "sqlalchemy.orm.Mapper") 和 [`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") 参数中已经起作用。此外，`"primary_key"` 中的元素可以表示为现有映射属性的字符串名称。
- en: 'References: [#9240](https://www.sqlalchemy.org/trac/ticket/9240)'
  id: totrans-4480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#9240](https://www.sqlalchemy.org/trac/ticket/9240)
- en: '**[bug] [orm declarative]**'
  id: totrans-4481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [orm声明]**'
- en: An explicit error is raised if a mapping attempts to mix the use of [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") with [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") within the same class hierarchy,
    as this produces issues with the dataclass function being applied at the wrong
    time to the mapped class, leading to errors during the mapping process.
  id: totrans-4482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果映射尝试在同一类层次结构中混合使用 [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") 和 [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass")，则会引发明确的错误，因为这会导致在错误的时间应用数据类函数到映射的类上，从而在映射过程中导致错误。
- en: 'References: [#9211](https://www.sqlalchemy.org/trac/ticket/9211)'
  id: totrans-4483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#9211](https://www.sqlalchemy.org/trac/ticket/9211)
- en: examples
  id: totrans-4484
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: '**[examples] [bug]**'
  id: totrans-4485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[示例] [错误]**'
- en: Reworked the [Versioning with a History Table](../orm/examples.html#examples-versioned-history)
    to work with version 2.0, while at the same time improving the overall working
    of this example to use newer APIs, including a newly added hook [`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed").
  id: totrans-4486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了[带历史表的版本化](../orm/examples.html#examples-versioned-history)，使其适用于版本2.0，同时改进了此示例的整体工作，以使用更新的API，包括新添加的钩子
    [`MapperEvents.after_mapper_constructed()`](../orm/events.html#sqlalchemy.orm.MapperEvents.after_mapper_constructed
    "sqlalchemy.orm.MapperEvents.after_mapper_constructed")。
- en: 'References: [#9220](https://www.sqlalchemy.org/trac/ticket/9220)'
  id: totrans-4487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#9220](https://www.sqlalchemy.org/trac/ticket/9220)
- en: sql
  id: totrans-4488
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-4489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Added a full suite of new SQL bitwise operators, for performing database-side
    bitwise expressions on appropriate data values such as integers, bit-strings,
    and similar. Pull request courtesy Yegor Statkevich.
  id: totrans-4490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一套完整的新的SQL位运算符，用于对适当的数据值（如整数、位字符串等）执行数据库端的位运算表达式。拉取请求由 Yegor Statkevich 提供。
- en: See also
  id: totrans-4491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Bitwise Operators](../core/operators.html#operators-bitwise)'
  id: totrans-4492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[位运算符](../core/operators.html#operators-bitwise)'
- en: 'References: [#8780](https://www.sqlalchemy.org/trac/ticket/8780)'
  id: totrans-4493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8780](https://www.sqlalchemy.org/trac/ticket/8780)
- en: asyncio
  id: totrans-4494
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [bug]**'
  id: totrans-4495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [错误]**'
- en: Repaired a regression caused by the fix for [#8419](https://www.sqlalchemy.org/trac/ticket/8419)
    which caused asyncpg connections to be reset (i.e. transaction `rollback()` called)
    and returned to the pool normally in the case that the connection were not explicitly
    returned to the connection pool and was instead being intercepted by Python garbage
    collection, which would fail if the garbage collection operation were being called
    outside of the asyncio event loop, leading to a large amount of stack trace activity
    dumped into logging and standard output.
  id: totrans-4496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由修复[#8419](https://www.sqlalchemy.org/trac/ticket/8419)引起的回归，该修复导致asyncpg连接被重置（即调用事务`rollback()`）并正常返回到池中，在连接未显式返回到连接池而是被Python垃圾回收拦截的情况下发生这种情况，如果垃圾回收操作在asyncio事件循环之外被调用，将导致大量的堆栈跟踪活动被转储到日志和标准输出中。
- en: The correct behavior is restored, which is that all asyncio connections that
    are garbage collected due to not being explicitly returned to the connection pool
    are detached from the pool and discarded, along with a warning, rather than being
    returned the pool, as they cannot be reliably reset. In the case of asyncpg connections,
    the asyncpg-specific `terminate()` method will be used to end the connection more
    gracefully within this process as opposed to just dropping it.
  id: totrans-4497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了正确的行为，即所有由于未显式返回到连接池而被垃圾回收的asyncio连接都会从池中分离并被丢弃，并发出警告，而不是返回到池中，因为它们不能可靠地重置。对于asyncpg连接，在这个过程中，将使用asyncpg特定的`terminate()`方法更优雅地结束连接，而不是简单地丢弃它。
- en: This change includes a small behavioral change that is hoped to be useful for
    debugging asyncio applications, where the warning that’s emitted in the case of
    asyncio connections being unexpectedly garbage collected has been made slightly
    more aggressive by moving it outside of a `try/except` block and into a `finally:`
    block, where it will emit unconditionally regardless of whether the detach/termination
    operation succeeded or not. It will also have the effect that applications or
    test suites which promote Python warnings to exceptions will see this as a full
    exception raise, whereas previously it was not possible for this warning to actually
    propagate as an exception. Applications and test suites which need to tolerate
    this warning in the interim should adjust the Python warnings filter to allow
    these warnings to not raise.
  id: totrans-4498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变包括一个小的行为改变，希望对调试asyncio应用程序有用，在asyncio连接意外被垃圾回收时发出的警告已经通过将其移出`try/except`块并放入`finally:`块稍微更加激进，无论分离/终止操作是否成功，它都会无条件地发出。它还将导致将Python警告提升为异常的应用程序或测试套件将其视为完整的异常引发，而以前这个警告不可能作为异常传播。需要在此期间容忍此警告的应用程序和测试套件应调整Python警告过滤器，以允许这些警告不引发异常。
- en: The behavior for traditional sync connections remains unchanged, that garbage
    collected connections continue to be returned to the pool normally without emitting
    a warning. This will likely be changed in a future major release to at least emit
    a similar warning as is emitted for asyncio drivers, as it is a usage error for
    pooled connections to be intercepted by garbage collection without being properly
    returned to the pool.
  id: totrans-4499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传统同步连接的行为保持不变，即垃圾回收的连接会正常返回到池中，而不会发出警告。这在未来的主要版本中可能会发生变化，至少会发出与asyncio驱动程序发出的类似警告，因为对于池化连接被垃圾回收而没有被正确返回到池中是一种使用错误。
- en: 'References: [#9237](https://www.sqlalchemy.org/trac/ticket/9237)'
  id: totrans-4500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9237](https://www.sqlalchemy.org/trac/ticket/9237)
- en: mysql
  id: totrans-4501
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug] [regression]**'
  id: totrans-4502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug] [regression]**'
- en: Fixed regression caused by issue [#9058](https://www.sqlalchemy.org/trac/ticket/9058)
    which adjusted the MySQL dialect’s `has_table()` to again use “DESCRIBE”, where
    the specific error code raised by MySQL version 8 when using a non-existent schema
    name was unexpected and failed to be interpreted as a boolean result.
  id: totrans-4503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由问题[#9058](https://www.sqlalchemy.org/trac/ticket/9058)引起的回归，该问题调整了MySQL方言的`has_table()`以再次使用“DESCRIBE”，在使用不存在的模式名称时MySQL版本8引发的特定错误代码是意外的，并且无法解释为布尔结果。
- en: 'References: [#9251](https://www.sqlalchemy.org/trac/ticket/9251)'
  id: totrans-4504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9251](https://www.sqlalchemy.org/trac/ticket/9251)
- en: '**[mysql] [bug]**'
  id: totrans-4505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Added support for MySQL 8’s new `AS <name> ON DUPLICATE KEY` syntax when using
    [`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update"), which is required
    for newer versions of MySQL 8 as the previous syntax using `VALUES()` now emits
    a deprecation warning with those versions. Server version detection is employed
    to determine if traditional MariaDB / MySQL < 8 `VALUES()` syntax should be used,
    vs. the newer MySQL 8 required syntax. Pull request courtesy Caspar Wylie.
  id: totrans-4506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update")时，为 MySQL 8 的新`AS <name>
    ON DUPLICATE KEY`语法添加了支持，这在使用新版本的 MySQL 8 时是必需的，因为先前的语法使用`VALUES()`现在会针对这些版本发出弃用警告。服务器版本检测用于确定是否应使用传统的
    MariaDB / MySQL < 8 `VALUES()`语法，还是应使用新的 MySQL 8 所需的语法。由 Caspar Wylie 提供的拉取请求。
- en: 'References: [#8626](https://www.sqlalchemy.org/trac/ticket/8626)'
  id: totrans-4507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8626](https://www.sqlalchemy.org/trac/ticket/8626)
- en: sqlite
  id: totrans-4508
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [bug]**'
  id: totrans-4509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Fixed the SQLite dialect’s `has_table()` function to correctly report False
    for queries that include a non-None schema name for a schema that doesn’t exist;
    previously, a database error was raised.
  id: totrans-4510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 SQLite 方言的`has_table()`函数，使其对于包含不存在的架构的非空架构的查询正确报告为False；以前会引发数据库错误。
- en: 'References: [#9251](https://www.sqlalchemy.org/trac/ticket/9251)'
  id: totrans-4511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9251](https://www.sqlalchemy.org/trac/ticket/9251)
- en: 2.0.1
  id: totrans-4512
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.1
- en: 'Released: February 1, 2023'
  id: totrans-4513
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年2月1日
- en: orm
  id: totrans-4514
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [regression]**'
  id: totrans-4515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression where ORM models that used joined table inheritance with a
    composite foreign key would encounter an internal error in the mapper internals.
  id: totrans-4516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用具有复合外键的连接表继承的 ORM 模型遇到映射器内部错误的回归问题。
- en: 'References: [#9164](https://www.sqlalchemy.org/trac/ticket/9164)'
  id: totrans-4517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9164](https://www.sqlalchemy.org/trac/ticket/9164)
- en: '**[orm] [bug]**'
  id: totrans-4518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the error reporting when linking strategy options from a base class
    to another attribute that’s off a subclass, where `of_type()` should be used.
    Previously, when [`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options") is used, the message would lack informative detail
    that `of_type()` should be used, which was not the case when linking the options
    directly. The informative detail now emits even if [`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options") is used.
  id: totrans-4519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当从基类链接策略选项到另一个子类的属性时，当应该使用`of_type()`时，改进了错误报告。以前，当使用[`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options")时，消息会缺乏提示性的详细信息，即应该使用`of_type()`，而直接链接选项时则不是这种情况。即使使用[`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options")，提示性的详细信息现在也会发出。
- en: 'References: [#9182](https://www.sqlalchemy.org/trac/ticket/9182)'
  id: totrans-4520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9182](https://www.sqlalchemy.org/trac/ticket/9182)
- en: orm declarative
  id: totrans-4521
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明式
- en: '**[bug] [orm declarative]**'
  id: totrans-4522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm 声明式]**'
- en: Added support for [**PEP 484**](https://peps.python.org/pep-0484/) `NewType`
    to be used in the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") as well as within [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") constructs. These types will behave in the same way as
    custom subclasses of types right now; they must appear explicitly within the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") to be mapped.
  id: totrans-4523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对[**PEP 484**](https://peps.python.org/pep-0484/) `NewType`的支持，以及在[`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry")中以及在[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")结构内部使用。这些类型现在将与当前的自定义类型子类以相同的方式运行；它们必须明确出现在[`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry")中以进行映射。
- en: 'References: [#9175](https://www.sqlalchemy.org/trac/ticket/9175)'
  id: totrans-4524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9175](https://www.sqlalchemy.org/trac/ticket/9175)
- en: '**[bug] [orm declarative]**'
  id: totrans-4525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm 声明式]**'
- en: When using the [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") superclass, all classes within the hierarchy
    that are subclasses of this class will now be run through the `@dataclasses.dataclass`
    function whether or not they are actually mapped, so that non-ORM fields declared
    on non-mapped classes within the hierarchy will be used when mapped subclasses
    are turned into dataclasses. This behavior applies both to intermediary classes
    mapped with `__abstract__ = True` as well as to the user-defined declarative base
    itself, assuming [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") is present as a superclass for these classes.
  id: totrans-4526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用[`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")超类时，现在将对属于此类的子类的所有类进行`@dataclasses.dataclass`函数处理，无论它们是否实际映射，以便在映射的子类转换为数据类时使用在层次结构中声明的非ORM字段。此行为适用于通过`__abstract__
    = True`映射的中间类以及用户定义的声明基类本身，假设[`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")作为这些类的超类存在。
- en: This allows non-mapped attributes such as `InitVar` declarations on superclasses
    to be used, without the need to run the `@dataclasses.dataclass` decorator explicitly
    on each non-mapped class. The new behavior is considered as correct as this is
    what the [**PEP 681**](https://peps.python.org/pep-0681/) implementation expects
    when using a superclass to indicate dataclass behavior.
  id: totrans-4527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这允许使用超类上的非映射属性，例如`InitVar`声明，而无需显式在每个非映射类上运行`@dataclasses.dataclass`装饰器。新行为被认为是正确的，因为这是使用超类指示数据类行为时[**PEP
    681**](https://peps.python.org/pep-0681/)实现预期的行为。
- en: 'References: [#9179](https://www.sqlalchemy.org/trac/ticket/9179)'
  id: totrans-4528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9179](https://www.sqlalchemy.org/trac/ticket/9179)
- en: '**[bug] [orm declarative]**'
  id: totrans-4529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm 声明式]**'
- en: Added support for [**PEP 586**](https://peps.python.org/pep-0586/) `Literal[]`
    to be used in the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") as well as within [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") constructs. To use custom types such as these, they must
    appear explicitly within the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") to be mapped. Pull request courtesy Frederik Aalund.
  id: totrans-4530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加对[**PEP 586**](https://peps.python.org/pep-0586/) `Literal[]`的支持，以及在[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")结构中的使用。要使用这些自定义类型，它们必须明确出现在[`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry")中进行映射。感谢Frederik Aalund的拉取请求。
- en: As part of this change, the support for [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.sql.sqltypes.Enum") in the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") has been expanded to include support for `Literal[]`
    types consisting of string values to be used, in addition to `enum.Enum` datatypes.
    If a `Literal[]` datatype is used within `Mapped[]` that is not linked in [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") to a specific datatype, a [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.sql.sqltypes.Enum") will be used by default.
  id: totrans-4531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变化的一部分，对[`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry")中的[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.sql.sqltypes.Enum")的支持已经扩展，包括支持由字符串值组成的`Literal[]`类型的使用，除了`enum.Enum`数据类型之外。如果在`Mapped[]`中使用的`Literal[]`数据类型未在[`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry")中与特定数据类型关联，那么默认将使用[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.sql.sqltypes.Enum")。
- en: See also
  id: totrans-4532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Python Enum or pep-586 Literal types in the type map](../orm/declarative_tables.html#orm-declarative-mapped-column-enums)'
  id: totrans-4533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在类型映射中使用Python Enum或pep-586 Literal类型](../orm/declarative_tables.html#orm-declarative-mapped-column-enums)
- en: 'References: [#9187](https://www.sqlalchemy.org/trac/ticket/9187)'
  id: totrans-4534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9187](https://www.sqlalchemy.org/trac/ticket/9187)
- en: '**[bug] [orm declarative]**'
  id: totrans-4535
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm 声明式]**'
- en: Fixed issue involving the use of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.sql.sqltypes.Enum") within the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") where the [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") parameter would not be correctly copied to the mapped
    column datatype, if it were overridden as stated in the documentation to set this
    parameter to False.
  id: totrans-4536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry")中使用[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.sql.sqltypes.Enum")时的问题，其中如果按照文档中所述覆盖为将此参数设置为False，则[`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum")参数将不会正确复制到映射列数据类型。
- en: 'References: [#9200](https://www.sqlalchemy.org/trac/ticket/9200)'
  id: totrans-4537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9200](https://www.sqlalchemy.org/trac/ticket/9200)
- en: '**[bug] [orm declarative] [regression]**'
  id: totrans-4538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm declarative] [regression]**'
- en: Fixed regression in [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") class where the registry’s default constructor
    would not be applied to the base itself, which is different from how the previous
    [`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") construct works. This would prevent a mapped
    class with its own `__init__()` method from calling `super().__init__()` in order
    to access the registry’s default constructor and automatically populate attributes,
    instead hitting `object.__init__()` which would raise a `TypeError` on any arguments.
  id: totrans-4539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")类中的回归问题，其中注册表的默认构造函数不会应用于基类本身，这与先前的[`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base")构造方式不同。这将阻止具有自己`__init__()`方法的映射类调用`super().__init__()`以访问注册表的默认构造函数并自动填充属性，而是调用`object.__init__()`，这将导致任何参数引发`TypeError`。
- en: 'References: [#9171](https://www.sqlalchemy.org/trac/ticket/9171)'
  id: totrans-4540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9171](https://www.sqlalchemy.org/trac/ticket/9171)
- en: '**[bug] [orm declarative]**'
  id: totrans-4541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm declarative]**'
- en: Improved the ruleset used to interpret [**PEP 593**](https://peps.python.org/pep-0593/)
    `Annotated` types when used with Annotated Declarative mapping, the inner type
    will be checked for “Optional” in all cases which will be added to the criteria
    by which the column is set as “nullable” or not; if the type within the `Annotated`
    container is optional (or unioned with `None`), the column will be considered
    nullable if there are no explicit [`mapped_column.nullable`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.nullable
    "sqlalchemy.orm.mapped_column") parameters overriding it.
  id: totrans-4542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了用于解释[**PEP 593**](https://peps.python.org/pep-0593/) `Annotated`类型的规则集，当与Annotated
    Declarative映射一起使用时，内部类型将在所有情况下被检查是否为“Optional”，这将被添加到设置列是否为“nullable”的标准中；如果`Annotated`容器中的类型是可选的（或与`None`联合），则如果没有显式的[`mapped_column.nullable`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.nullable
    "sqlalchemy.orm.mapped_column")参数覆盖它，则列将被视为可为空。
- en: 'References: [#9177](https://www.sqlalchemy.org/trac/ticket/9177)'
  id: totrans-4543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9177](https://www.sqlalchemy.org/trac/ticket/9177)
- en: sql
  id: totrans-4544
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-4545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Corrected the fix for [#7664](https://www.sqlalchemy.org/trac/ticket/7664),
    released in version 2.0.0, to also include [`DropSchema`](../core/ddl.html#sqlalchemy.schema.DropSchema
    "sqlalchemy.schema.DropSchema") which was inadvertently missed in this fix, allowing
    stringification without a dialect. The fixes for both constructs is backported
    to the 1.4 series as of 1.4.47.
  id: totrans-4546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更正了版本2.0.0中发布的[#7664](https://www.sqlalchemy.org/trac/ticket/7664)的修复，以便还包括无意中在此修复中遗漏的[`DropSchema`](../core/ddl.html#sqlalchemy.schema.DropSchema
    "sqlalchemy.schema.DropSchema")，允许在没有方言的情况下进行字符串化。这两个构造的修复已经回溯到1.4.47版本的1.4系列。
- en: 'References: [#7664](https://www.sqlalchemy.org/trac/ticket/7664)'
  id: totrans-4547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7664](https://www.sqlalchemy.org/trac/ticket/7664)
- en: '**[sql] [bug] [regression]**'
  id: totrans-4548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [regression]**'
- en: Fixed regression related to the implementation for the new “insertmanyvalues”
    feature where an internal `TypeError` would occur in arrangements where a [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") would be referenced inside of another [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") via a CTE; made additional repairs for this
    use case for positional dialects such as asyncpg when using “insertmanyvalues”.
  id: totrans-4549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与新的“insertmanyvalues”功能实现相关的回归问题，在这种情况下，在 CTE 中引用 [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") 的情况下会出现内部 `TypeError`；针对此用例进行了额外的修复，例如在使用“insertmanyvalues”时使用异步
    pg 时的位置方言。
- en: 'References: [#9173](https://www.sqlalchemy.org/trac/ticket/9173)'
  id: totrans-4550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9173](https://www.sqlalchemy.org/trac/ticket/9173)
- en: typing
  id: totrans-4551
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-4552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Opened up typing on [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update") to also accept table and mapped
    class arguments, as seems to be available for the MySQL dialect.
  id: totrans-4553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update") 打开了类型标注，也接受表格和映射类参数，因为在 MySQL
    方言中似乎可用。
- en: 'References: [#9174](https://www.sqlalchemy.org/trac/ticket/9174)'
  id: totrans-4554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9174](https://www.sqlalchemy.org/trac/ticket/9174)
- en: '**[typing] [bug]**'
  id: totrans-4555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing for limit/offset methods including [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit"), [`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset"), [`Query.limit()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.limit
    "sqlalchemy.orm.Query.limit"), [`Query.offset()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.offset
    "sqlalchemy.orm.Query.offset") to allow `None`, which is the documented API to
    “cancel” the current limit/offset.
  id: totrans-4556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 limit/offset 方法的类型标注，包括 [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit"), [`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset"), [`Query.limit()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.limit
    "sqlalchemy.orm.Query.limit"), [`Query.offset()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.offset
    "sqlalchemy.orm.Query.offset")，允许 `None`，这是“取消”当前 limit/offset 的文档化 API。
- en: 'References: [#9183](https://www.sqlalchemy.org/trac/ticket/9183)'
  id: totrans-4557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9183](https://www.sqlalchemy.org/trac/ticket/9183)
- en: '**[typing] [bug]**'
  id: totrans-4558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue where [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") objects typed as [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") wouldn’t be accepted in schema constraints such as [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") or [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index").
  id: totrans-4559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 对象作为 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 类型无法被接受在模式约束中，如 [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 或 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 的类型标注问题。
- en: 'References: [#9170](https://www.sqlalchemy.org/trac/ticket/9170)'
  id: totrans-4560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9170](https://www.sqlalchemy.org/trac/ticket/9170)
- en: '**[typing] [bug]**'
  id: totrans-4561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing for [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") to accept both `Type[TypeEngine[T]]`
    and `TypeEngine[T]`; previously only `TypeEngine[T]` was accepted. Pull request
    courtesy Yurii Karabas.
  id: totrans-4562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") 的类型标注，现在接受 `Type[TypeEngine[T]]`
    和 `TypeEngine[T]` 两者；之前只接受 `TypeEngine[T]`。感谢 Yurii Karabas 的拉取请求。
- en: 'References: [#9156](https://www.sqlalchemy.org/trac/ticket/9156)'
  id: totrans-4563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9156](https://www.sqlalchemy.org/trac/ticket/9156)
- en: orm
  id: totrans-4564
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug] [regression]**'
  id: totrans-4565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression where ORM models that used joined table inheritance with a
    composite foreign key would encounter an internal error in the mapper internals.
  id: totrans-4566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用联接表继承和复合外键的 ORM 模型会在映射器内部遇到内部错误的回归问题。
- en: 'References: [#9164](https://www.sqlalchemy.org/trac/ticket/9164)'
  id: totrans-4567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#9164](https://www.sqlalchemy.org/trac/ticket/9164)
- en: '**[orm] [bug]**'
  id: totrans-4568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved the error reporting when linking strategy options from a base class
    to another attribute that’s off a subclass, where `of_type()` should be used.
    Previously, when [`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options") is used, the message would lack informative detail
    that `of_type()` should be used, which was not the case when linking the options
    directly. The informative detail now emits even if [`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options") is used.
  id: totrans-4569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将基类的策略选项链接到另一个子类的属性，需要使用 `of_type()` 时，改进了链接策略选项时的错误报告。以前，当使用 [`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options") 时，消息缺乏关于应该使用 `of_type()` 的详细信息，而直接链接选项时不是这种情况。现在即使使用
    [`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options")，也会发出详细的信息。
- en: 'References: [#9182](https://www.sqlalchemy.org/trac/ticket/9182)'
  id: totrans-4570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9182](https://www.sqlalchemy.org/trac/ticket/9182)
- en: orm declarative
  id: totrans-4571
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM 声明式
- en: '**[bug] [orm declarative]**'
  id: totrans-4572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [ORM 声明式]**'
- en: Added support for [**PEP 484**](https://peps.python.org/pep-0484/) `NewType`
    to be used in the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") as well as within [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") constructs. These types will behave in the same way as
    custom subclasses of types right now; they must appear explicitly within the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") to be mapped.
  id: totrans-4573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已添加对 [**PEP 484**](https://peps.python.org/pep-0484/) 中 `NewType` 的支持，可在 [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") 和 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 结构中使用。这些类型将与当前自定义类型的子类相同地行为；它们必须明确出现在 [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") 中才能被映射。
- en: 'References: [#9175](https://www.sqlalchemy.org/trac/ticket/9175)'
  id: totrans-4574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9175](https://www.sqlalchemy.org/trac/ticket/9175)
- en: '**[bug] [orm declarative]**'
  id: totrans-4575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [ORM 声明式]**'
- en: When using the [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") superclass, all classes within the hierarchy
    that are subclasses of this class will now be run through the `@dataclasses.dataclass`
    function whether or not they are actually mapped, so that non-ORM fields declared
    on non-mapped classes within the hierarchy will be used when mapped subclasses
    are turned into dataclasses. This behavior applies both to intermediary classes
    mapped with `__abstract__ = True` as well as to the user-defined declarative base
    itself, assuming [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") is present as a superclass for these classes.
  id: totrans-4576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") 超类时，层次结构中所有的子类都将通过 `@dataclasses.dataclass`
    函数运行，无论它们是否实际上被映射，以便在映射的子类转换为数据类时使用在层次结构中声明的非 ORM 字段。该行为既适用于使用 `__abstract__ =
    True` 映射的中介类，也适用于用户定义的声明基类本身，假设 [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") 作为这些类的超类。
- en: This allows non-mapped attributes such as `InitVar` declarations on superclasses
    to be used, without the need to run the `@dataclasses.dataclass` decorator explicitly
    on each non-mapped class. The new behavior is considered as correct as this is
    what the [**PEP 681**](https://peps.python.org/pep-0681/) implementation expects
    when using a superclass to indicate dataclass behavior.
  id: totrans-4577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这允许在超类上使用非映射属性，例如 `InitVar` 声明，而无需在每个非映射类上显式运行 `@dataclasses.dataclass` 装饰器。新的行为被认为是正确的，因为这是使用超类指示数据类行为时
    [**PEP 681**](https://peps.python.org/pep-0681/) 实现所期望的。
- en: 'References: [#9179](https://www.sqlalchemy.org/trac/ticket/9179)'
  id: totrans-4578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9179](https://www.sqlalchemy.org/trac/ticket/9179)
- en: '**[bug] [orm declarative]**'
  id: totrans-4579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [ORM 声明式]**'
- en: Added support for [**PEP 586**](https://peps.python.org/pep-0586/) `Literal[]`
    to be used in the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") as well as within [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") constructs. To use custom types such as these, they must
    appear explicitly within the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") to be mapped. Pull request courtesy Frederik Aalund.
  id: totrans-4580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已添加对[**PEP 586**](https://peps.python.org/pep-0586/) `Literal[]`的支持，可在[`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry")以及[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")结构中使用。要使用此类自定义类型，它们必须明确出现在[`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry")中以进行映射。感谢 Frederik Aalund 提供的拉取请求。
- en: As part of this change, the support for [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.sql.sqltypes.Enum") in the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") has been expanded to include support for `Literal[]`
    types consisting of string values to be used, in addition to `enum.Enum` datatypes.
    If a `Literal[]` datatype is used within `Mapped[]` that is not linked in [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") to a specific datatype, a [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.sql.sqltypes.Enum") will be used by default.
  id: totrans-4581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为此更改的一部分，已扩展了[`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry")中对[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.sql.sqltypes.Enum")的支持，以包括对由字符串值组成的`Literal[]`类型的支持，以及对`enum.Enum`数据类型的支持。如果在`Mapped[]`中使用了未在[`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry")中链接到特定数据类型的`Literal[]`数据类型，则将默认使用[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.sql.sqltypes.Enum")。
- en: See also
  id: totrans-4582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Using Python Enum or pep-586 Literal types in the type map](../orm/declarative_tables.html#orm-declarative-mapped-column-enums)'
  id: totrans-4583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在类型映射中使用 Python 枚举或 pep-586 字面类型](../orm/declarative_tables.html#orm-declarative-mapped-column-enums)'
- en: 'References: [#9187](https://www.sqlalchemy.org/trac/ticket/9187)'
  id: totrans-4584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9187](https://www.sqlalchemy.org/trac/ticket/9187)
- en: '**[bug] [orm declarative]**'
  id: totrans-4585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [orm 声明式]**'
- en: Fixed issue involving the use of [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.sql.sqltypes.Enum") within the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") where the [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") parameter would not be correctly copied to the mapped
    column datatype, if it were overridden as stated in the documentation to set this
    parameter to False.
  id: totrans-4586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '修复了在[`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry")中使用[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.sql.sqltypes.Enum")时出现的问题，在其中，如果覆盖了[`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum")参数，则不会正确地将该参数复制到映射列数据类型中，如文档中所述，如果将此参数设置为 False。 '
- en: 'References: [#9200](https://www.sqlalchemy.org/trac/ticket/9200)'
  id: totrans-4587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9200](https://www.sqlalchemy.org/trac/ticket/9200)
- en: '**[bug] [orm declarative] [regression]**'
  id: totrans-4588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [orm 声明式] [回归]**'
- en: Fixed regression in [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") class where the registry’s default constructor
    would not be applied to the base itself, which is different from how the previous
    [`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base") construct works. This would prevent a mapped
    class with its own `__init__()` method from calling `super().__init__()` in order
    to access the registry’s default constructor and automatically populate attributes,
    instead hitting `object.__init__()` which would raise a `TypeError` on any arguments.
  id: totrans-4589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")类中的回归，其中注册表的默认构造函数不会应用于基类本身，这与以前的[`declarative_base()`](../orm/mapping_api.html#sqlalchemy.orm.declarative_base
    "sqlalchemy.orm.declarative_base")构造方式不同。这将阻止具有自己的`__init__()`方法的映射类调用`super().__init__()`以访问注册表的默认构造函数并自动填充属性，而是会触发`object.__init__()`，这将在任何参数上引发`TypeError`。
- en: 'References: [#9171](https://www.sqlalchemy.org/trac/ticket/9171)'
  id: totrans-4590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9171](https://www.sqlalchemy.org/trac/ticket/9171)
- en: '**[bug] [orm declarative]**'
  id: totrans-4591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [orm声明]**'
- en: Improved the ruleset used to interpret [**PEP 593**](https://peps.python.org/pep-0593/)
    `Annotated` types when used with Annotated Declarative mapping, the inner type
    will be checked for “Optional” in all cases which will be added to the criteria
    by which the column is set as “nullable” or not; if the type within the `Annotated`
    container is optional (or unioned with `None`), the column will be considered
    nullable if there are no explicit [`mapped_column.nullable`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.nullable
    "sqlalchemy.orm.mapped_column") parameters overriding it.
  id: totrans-4592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了用于解释[**PEP 593**](https://peps.python.org/pep-0593/) `Annotated`类型的规则集，当与Annotated
    Declarative映射一起使用时，内部类型将在所有情况下被检查是否为“Optional”，这将被添加到设置列是否“可为空”的标准中；如果`Annotated`容器内的类型是可选的（或与`None`联合），则如果没有显式的[`mapped_column.nullable`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column)参数覆盖它，列将被视为可为空。
- en: 'References: [#9177](https://www.sqlalchemy.org/trac/ticket/9177)'
  id: totrans-4593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9177](https://www.sqlalchemy.org/trac/ticket/9177)
- en: sql
  id: totrans-4594
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-4595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Corrected the fix for [#7664](https://www.sqlalchemy.org/trac/ticket/7664),
    released in version 2.0.0, to also include [`DropSchema`](../core/ddl.html#sqlalchemy.schema.DropSchema
    "sqlalchemy.schema.DropSchema") which was inadvertently missed in this fix, allowing
    stringification without a dialect. The fixes for both constructs is backported
    to the 1.4 series as of 1.4.47.
  id: totrans-4596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了版本2.0.0中发布的对[#7664](https://www.sqlalchemy.org/trac/ticket/7664)的修复，还包括了[`DropSchema`](../core/ddl.html#sqlalchemy.schema.DropSchema
    "sqlalchemy.schema.DropSchema")，这在修复中被意外遗漏，允许在没有方言的情况下进行字符串化。这两个构造的修复已经回溯到了1.4.47版本的1.4系列。
- en: 'References: [#7664](https://www.sqlalchemy.org/trac/ticket/7664)'
  id: totrans-4597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7664](https://www.sqlalchemy.org/trac/ticket/7664)
- en: '**[sql] [bug] [regression]**'
  id: totrans-4598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误] [回归]**'
- en: Fixed regression related to the implementation for the new “insertmanyvalues”
    feature where an internal `TypeError` would occur in arrangements where a [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") would be referenced inside of another [`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert") via a CTE; made additional repairs for this
    use case for positional dialects such as asyncpg when using “insertmanyvalues”.
  id: totrans-4599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与新“insertmanyvalues”功能实现相关的回归，其中在另一个通过CTE引用[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert)的[`insert()`](../core/dml.html#sqlalchemy.sql.expression.insert)内部会发生内部`TypeError`的情况；为这种情况进行了额外的修复，例如在使用“insertmanyvalues”时使用位置方言如asyncpg时。
- en: 'References: [#9173](https://www.sqlalchemy.org/trac/ticket/9173)'
  id: totrans-4600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9173](https://www.sqlalchemy.org/trac/ticket/9173)
- en: typing
  id: totrans-4601
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类型化
- en: '**[typing] [bug]**'
  id: totrans-4602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Opened up typing on [`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update.params.of
    "sqlalchemy.sql.expression.Select.with_for_update") to also accept table and mapped
    class arguments, as seems to be available for the MySQL dialect.
  id: totrans-4603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开了对[`Select.with_for_update.of`](../core/selectable.html#sqlalchemy.sql.expression.Select.with_for_update)的类型化，也接受表和映射类参数，就像MySQL方言中可用的那样。
- en: 'References: [#9174](https://www.sqlalchemy.org/trac/ticket/9174)'
  id: totrans-4604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9174](https://www.sqlalchemy.org/trac/ticket/9174)
- en: '**[typing] [bug]**'
  id: totrans-4605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Fixed typing for limit/offset methods including [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit"), [`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset"), [`Query.limit()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.limit
    "sqlalchemy.orm.Query.limit"), [`Query.offset()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.offset
    "sqlalchemy.orm.Query.offset") to allow `None`, which is the documented API to
    “cancel” the current limit/offset.
  id: totrans-4606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了包括[`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit)、[`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset)、[`Query.limit()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.limit)、[`Query.offset()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.offset)在内的限制/偏移方法的类型化，允许`None`，这是“取消”当前限制/偏移的记录API。
- en: 'References: [#9183](https://www.sqlalchemy.org/trac/ticket/9183)'
  id: totrans-4607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9183](https://www.sqlalchemy.org/trac/ticket/9183)
- en: '**[typing] [bug]**'
  id: totrans-4608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Fixed typing issue where [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") objects typed as [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") wouldn’t be accepted in schema constraints such as [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey"), [`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") or [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index").
  id: totrans-4609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 对象在类型为 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 时不会被接受到架构约束中的类型问题，例如 [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")、[`UniqueConstraint`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 或 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")。
- en: 'References: [#9170](https://www.sqlalchemy.org/trac/ticket/9170)'
  id: totrans-4610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9170](https://www.sqlalchemy.org/trac/ticket/9170)
- en: '**[typing] [bug]**'
  id: totrans-4611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[类型] [错误]**'
- en: Fixed typing for [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") to accept both `Type[TypeEngine[T]]`
    and `TypeEngine[T]`; previously only `TypeEngine[T]` was accepted. Pull request
    courtesy Yurii Karabas.
  id: totrans-4612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`ColumnElement.cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement.cast
    "sqlalchemy.sql.expression.ColumnElement.cast") 的类型定义，现在接受 `Type[TypeEngine[T]]`
    和 `TypeEngine[T]`，之前只接受 `TypeEngine[T]`。感谢 Yurii Karabas 提供的拉取请求。
- en: 'References: [#9156](https://www.sqlalchemy.org/trac/ticket/9156)'
  id: totrans-4613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9156](https://www.sqlalchemy.org/trac/ticket/9156)
- en: 2.0.0
  id: totrans-4614
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.0
- en: 'Released: January 26, 2023'
  id: totrans-4615
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023 年 1 月 26 日
- en: orm
  id: totrans-4616
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [bug]**'
  id: totrans-4617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Improved the notification of warnings that are emitted within the configure
    mappers or flush process, which are often invoked as part of a different operation,
    to add additional context to the message that indicates one of these operations
    as the source of the warning within operations that may not be obviously related.
  id: totrans-4618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了在配置映射器或刷新过程中发出的警告的通知方式，这些警告通常作为不同操作的一部分调用，以在可能不明显相关的操作中添加附加上下文到警告的消息中，指示其中一个操作作为警告来源，而这些操作可能不明显相关。
- en: 'References: [#7305](https://www.sqlalchemy.org/trac/ticket/7305)'
  id: totrans-4619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7305](https://www.sqlalchemy.org/trac/ticket/7305)
- en: orm extensions
  id: totrans-4620
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM 扩展
- en: '**[feature] [orm extensions]**'
  id: totrans-4621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[特性] [ORM 扩展]**'
- en: Added new option to horizontal sharding API [`set_shard_id`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.set_shard_id
    "sqlalchemy.ext.horizontal_shard.set_shard_id") which sets the effective shard
    identifier to query against, for both the primary query as well as for all secondary
    loaders including relationship eager loaders as well as relationship and column
    lazy loaders.
  id: totrans-4622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在水平分片 API [`set_shard_id`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.set_shard_id
    "sqlalchemy.ext.horizontal_shard.set_shard_id") 中添加了新选项，该选项设置要查询的有效分片标识符，用于主查询以及所有二级加载器，包括关系急切加载器以及关系和列惰性加载器。
- en: 'References: [#7226](https://www.sqlalchemy.org/trac/ticket/7226)'
  id: totrans-4623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7226](https://www.sqlalchemy.org/trac/ticket/7226)
- en: '**[usecase] [orm extensions]**'
  id: totrans-4624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[用例] [ORM 扩展]**'
- en: Added new feature to [`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase") for autoload of classes across multiple
    schemas which may have overlapping names, by providing a [`AutomapBase.prepare.modulename_for_table`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare.params.modulename_for_table
    "sqlalchemy.ext.automap.AutomapBase.prepare") parameter which allows customization
    of the `__module__` attribute of newly generated classes, as well as a new collection
    [`AutomapBase.by_module`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.by_module
    "sqlalchemy.ext.automap.AutomapBase.by_module"), which stores a dot-separated
    namespace of module names linked to classes based on the `__module__` attribute.
  id: totrans-4625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase") 添加了新功能，用于在可能具有重叠名称的多个模式中自动加载类，方法是提供一个 [`AutomapBase.prepare.modulename_for_table`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare.params.modulename_for_table
    "sqlalchemy.ext.automap.AutomapBase.prepare") 参数，该参数允许自定义新生成的类的 `__module__` 属性，以及一个新的集合
    [`AutomapBase.by_module`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.by_module
    "sqlalchemy.ext.automap.AutomapBase.by_module")，它存储基于 `__module__` 属性的类的点分隔的模块名称命名空间。
- en: Additionally, the [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") method may now be invoked any number
    of times, with or without reflection enabled; only newly added tables that were
    not previously mapped will be processed on each call. Previously, the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") method would need to be called explicitly
    each time.
  id: totrans-4626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，现在可以任意次调用[`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") 方法，无论是否启用了反射；在每次调用时，只会处理未映射的新增表。以前，每次都需要显式调用[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") 方法。
- en: See also
  id: totrans-4627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Generating Mappings from Multiple Schemas](../orm/extensions/automap.html#automap-by-module)
    - illustrates use of both techniques at once.'
  id: totrans-4628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[从多个模式生成映射](../orm/extensions/automap.html#automap-by-module) - 同时演示了两种技术的使用。'
- en: 'References: [#5145](https://www.sqlalchemy.org/trac/ticket/5145)'
  id: totrans-4629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#5145](https://www.sqlalchemy.org/trac/ticket/5145)
- en: sql
  id: totrans-4630
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-4631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: 'Fixed stringify for a the [`CreateSchema`](../core/ddl.html#sqlalchemy.schema.CreateSchema
    "sqlalchemy.schema.CreateSchema") DDL construct, which would fail with an `AttributeError`
    when stringified without a dialect. Update: Note this fix failed to accommodate
    for [`DropSchema`](../core/ddl.html#sqlalchemy.schema.DropSchema "sqlalchemy.schema.DropSchema");
    a followup fix in version 2.0.1 repairs this case. The fix for both elements is
    backported to 1.4.47.'
  id: totrans-4632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`CreateSchema`](../core/ddl.html#sqlalchemy.schema.CreateSchema "sqlalchemy.schema.CreateSchema")
    DDL 结构的字符串化，当没有方言时会导致`AttributeError`。更新：请注意，这个修复未能考虑到[`DropSchema`](../core/ddl.html#sqlalchemy.schema.DropSchema
    "sqlalchemy.schema.DropSchema")；版本 2.0.1 中的后续修复解决了这个问题。对于这两个元素的修复已回溯到 1.4.47。
- en: 'References: [#7664](https://www.sqlalchemy.org/trac/ticket/7664)'
  id: totrans-4633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#7664](https://www.sqlalchemy.org/trac/ticket/7664)
- en: typing
  id: totrans-4634
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入
- en: '**[typing] [bug]**'
  id: totrans-4635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Added typing for the built-in generic functions that are available from the
    [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    namespace, which accept a particular set of arguments and return a particular
    type, such as for `count`, `current_timestamp`, etc.
  id: totrans-4636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为从[`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    命名空间可用的内置通用函数添加了类型，这些函数接受特定的参数集并返回特定的类型，例如 `count`、`current_timestamp` 等。
- en: 'References: [#9129](https://www.sqlalchemy.org/trac/ticket/9129)'
  id: totrans-4637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#9129](https://www.sqlalchemy.org/trac/ticket/9129)
- en: '**[typing] [bug]**'
  id: totrans-4638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Corrected the type passed for “lambda statements” so that a plain lambda is
    accepted by mypy, pyright, others without any errors about argument types. Additionally
    implemented typing for more of the public API for lambda statements and ensured
    [`StatementLambdaElement`](../core/foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") is part of the [`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") hierarchy so it’s typed as accepted by
    [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").
  id: totrans-4639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更正了“lambda 表达式”传递的类型，以便 mypy、pyright 等可以接受纯 lambda 而不会有任何关于参数类型的错误。另外，为 lambda
    表达式的更多公共 API 实现了输入，并确保[`StatementLambdaElement`](../core/foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") 属于[`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") 层次结构，因此被[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 接受为已接受的类型。
- en: 'References: [#9120](https://www.sqlalchemy.org/trac/ticket/9120)'
  id: totrans-4640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#9120](https://www.sqlalchemy.org/trac/ticket/9120)
- en: '**[typing] [bug]**'
  id: totrans-4641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: The [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") methods are typed to include
    `Iterable[Any]` rather than `Sequence[Any]` for more flexibility in argument type.
  id: totrans-4642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 和 [`ColumnOperators.not_in()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") 方法的类型已更改为包括`Iterable[Any]`，而不是`Sequence[Any]`，以获得更灵活的参数类型。'
- en: 'References: [#9122](https://www.sqlalchemy.org/trac/ticket/9122)'
  id: totrans-4643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#9122](https://www.sqlalchemy.org/trac/ticket/9122)
- en: '**[typing] [bug]**'
  id: totrans-4644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: The [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    and [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    from a typing perspective require the first argument to be present, however these
    functions still accept zero arguments which will emit a deprecation warning at
    runtime. Typing is also added to support sending the fixed literal `False` for
    [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    and `True` for [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") as the first argument only, however the documentation
    now indicates sending the [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false") and [`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") constructs in these cases as a more explicit
    approach.
  id: totrans-4645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从类型的角度来看，[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")和[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")要求第一个参数必须存在，但是这些函数仍然接受零参数，这将在运行时发出弃用警告。还添加了类型支持，以仅将固定的文字`False`用于[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")和`True`用于[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")作为第一个参数，但是文档现在指示在这些情况下发送[`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false")和[`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true")构造作为更明确的方法。
- en: 'References: [#9123](https://www.sqlalchemy.org/trac/ticket/9123)'
  id: totrans-4646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9123](https://www.sqlalchemy.org/trac/ticket/9123)
- en: '**[typing] [bug]**'
  id: totrans-4647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [错误]**'
- en: Fixed typing issue where iterating over a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object was not correctly typed.
  id: totrans-4648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在迭代[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象时出现的类型问题。
- en: 'References: [#9125](https://www.sqlalchemy.org/trac/ticket/9125)'
  id: totrans-4649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9125](https://www.sqlalchemy.org/trac/ticket/9125)
- en: '**[typing] [bug]**'
  id: totrans-4650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [错误]**'
- en: Fixed typing issue where the object type when using [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") as a context manager were not preserved, indicating
    [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    in all cases rather than the specific [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") sub-type. Pull request courtesy Martin Baláž.
  id: totrans-4651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")作为上下文管理器时出现的类型问题，未保留对象类型，而是在所有情况下指示[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")而不是特定的[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")子类型。感谢Martin Baláž提供的拉取请求。
- en: 'References: [#9136](https://www.sqlalchemy.org/trac/ticket/9136)'
  id: totrans-4652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9136](https://www.sqlalchemy.org/trac/ticket/9136)
- en: '**[typing] [bug]**'
  id: totrans-4653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [错误]**'
- en: Fixed issue where using the [`relationship.remote_side`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship") and similar parameters, passing an annotated declarative
    object typed as [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped"),
    would not be accepted by the type checker.
  id: totrans-4654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`relationship.remote_side`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship")和类似参数时出现的问题，通过将声明为[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")的注释对象传递给类型检查器时，类型检查器将不接受。
- en: 'References: [#9150](https://www.sqlalchemy.org/trac/ticket/9150)'
  id: totrans-4655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9150](https://www.sqlalchemy.org/trac/ticket/9150)
- en: '**[typing] [bug]**'
  id: totrans-4656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [错误]**'
- en: Added typing to legacy operators such as `isnot()`, `notin_()`, etc. which previously
    were referencing the newer operators but were not themselves typed.
  id: totrans-4657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对诸如`isnot()`、`notin_()`等旧操作符的类型支持，这些操作符以前引用了新操作符，但它们本身并未被类型化。
- en: 'References: [#9148](https://www.sqlalchemy.org/trac/ticket/9148)'
  id: totrans-4658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9148](https://www.sqlalchemy.org/trac/ticket/9148)
- en: postgresql
  id: totrans-4659
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-4660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Added support to the asyncpg dialect to return the `cursor.rowcount` value for
    SELECT statements when available. While this is not a typical use for `cursor.rowcount`,
    the other PostgreSQL dialects generally provide this value. Pull request courtesy
    Michael Gorven.
  id: totrans-4661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对asyncpg方言的支持，以在可用时返回`cursor.rowcount`值。虽然这不是`cursor.rowcount`的典型用法，但其他PostgreSQL方言通常提供此值。感谢Michael
    Gorven提供的拉取请求。
- en: 'This change is also **backported** to: 1.4.47'
  id: totrans-4662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯到**：1.4.47
- en: 'References: [#9048](https://www.sqlalchemy.org/trac/ticket/9048)'
  id: totrans-4663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9048](https://www.sqlalchemy.org/trac/ticket/9048)
- en: mysql
  id: totrans-4664
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-4665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [用例]**'
- en: Added support to MySQL index reflection to correctly reflect the `mysql_length`
    dictionary, which previously was being ignored.
  id: totrans-4666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 MySQL 索引反射的支持，以正确反映先前被忽略的 `mysql_length` 字典。
- en: 'This change is also **backported** to: 1.4.47'
  id: totrans-4667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**至：1.4.47
- en: 'References: [#9047](https://www.sqlalchemy.org/trac/ticket/9047)'
  id: totrans-4668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9047](https://www.sqlalchemy.org/trac/ticket/9047)
- en: mssql
  id: totrans-4669
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MSSQL
- en: '**[mssql] [bug] [regression]**'
  id: totrans-4670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[MSSQL] [错误] [回归]**'
- en: The newly added comment reflection and rendering capability of the MSSQL dialect,
    added in [#7844](https://www.sqlalchemy.org/trac/ticket/7844), will now be disabled
    by default if it cannot be determined that an unsupported backend such as Azure
    Synapse may be in use; this backend does not support table and column comments
    and does not support the SQL Server routines in use to generate them as well as
    to reflect them. A new parameter `supports_comments` is added to the dialect which
    defaults to `None`, indicating that comment support should be auto-detected. When
    set to `True` or `False`, the comment support is either enabled or disabled unconditionally.
  id: totrans-4671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增的 MSSQL 方言中的注释反射和渲染功能，添加在 [#7844](https://www.sqlalchemy.org/trac/ticket/7844)，如果无法确定是否正在使用不受支持的后端（如
    Azure Synapse），则现在将默认禁用；此后端不支持表和列注释，也不支持用于生成它们以及反映它们的 SQL Server 例程。在方言中添加了一个新参数
    `supports_comments`，默认值为 `None`，表示应自动检测注释支持。当设置为 `True` 或 `False` 时，注释支持将被无条件地启用或禁用。
- en: See also
  id: totrans-4672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[DDL Comment Support](../dialects/mssql.html#mssql-comment-support)'
  id: totrans-4673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[DDL 注释支持](../dialects/mssql.html#mssql-comment-support)'
- en: 'References: [#9142](https://www.sqlalchemy.org/trac/ticket/9142)'
  id: totrans-4674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9142](https://www.sqlalchemy.org/trac/ticket/9142)
- en: orm
  id: totrans-4675
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm] [bug]**'
  id: totrans-4676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM] [错误]**'
- en: Improved the notification of warnings that are emitted within the configure
    mappers or flush process, which are often invoked as part of a different operation,
    to add additional context to the message that indicates one of these operations
    as the source of the warning within operations that may not be obviously related.
  id: totrans-4677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了在配置映射器或刷新过程中发出的警告的通知，这些警告通常作为不同操作的一部分调用，以在可能不明显相关的操作中添加附加上下文到指示警告来源的消息。
- en: 'References: [#7305](https://www.sqlalchemy.org/trac/ticket/7305)'
  id: totrans-4678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7305](https://www.sqlalchemy.org/trac/ticket/7305)
- en: orm extensions
  id: totrans-4679
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM 扩展
- en: '**[feature] [orm extensions]**'
  id: totrans-4680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[功能] [ORM 扩展]**'
- en: Added new option to horizontal sharding API [`set_shard_id`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.set_shard_id
    "sqlalchemy.ext.horizontal_shard.set_shard_id") which sets the effective shard
    identifier to query against, for both the primary query as well as for all secondary
    loaders including relationship eager loaders as well as relationship and column
    lazy loaders.
  id: totrans-4681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在水平分片 API [`set_shard_id`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.set_shard_id
    "sqlalchemy.ext.horizontal_shard.set_shard_id") 中添加了一个新选项，该选项设置用于查询的有效分片标识符，用于主查询以及所有辅助加载器，包括关系及其懒加载器和列懒加载器。
- en: 'References: [#7226](https://www.sqlalchemy.org/trac/ticket/7226)'
  id: totrans-4682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7226](https://www.sqlalchemy.org/trac/ticket/7226)
- en: '**[usecase] [orm extensions]**'
  id: totrans-4683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[用例] [ORM 扩展]**'
- en: Added new feature to [`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase") for autoload of classes across multiple
    schemas which may have overlapping names, by providing a [`AutomapBase.prepare.modulename_for_table`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare.params.modulename_for_table
    "sqlalchemy.ext.automap.AutomapBase.prepare") parameter which allows customization
    of the `__module__` attribute of newly generated classes, as well as a new collection
    [`AutomapBase.by_module`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.by_module
    "sqlalchemy.ext.automap.AutomapBase.by_module"), which stores a dot-separated
    namespace of module names linked to classes based on the `__module__` attribute.
  id: totrans-4684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`AutomapBase`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase
    "sqlalchemy.ext.automap.AutomapBase") 添加了一个新功能，用于跨多个模式自动加载具有重叠名称的类，通过提供一个 [`AutomapBase.prepare.modulename_for_table`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare.params.modulename_for_table
    "sqlalchemy.ext.automap.AutomapBase.prepare") 参数，该参数允许定制新生成的类的 `__module__` 属性，以及一个新集合
    [`AutomapBase.by_module`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.by_module
    "sqlalchemy.ext.automap.AutomapBase.by_module")，它存储基于 `__module__` 属性的类的点分隔的模块名称命名空间。
- en: Additionally, the [`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare") method may now be invoked any number
    of times, with or without reflection enabled; only newly added tables that were
    not previously mapped will be processed on each call. Previously, the [`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect") method would need to be called explicitly
    each time.
  id: totrans-4685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，现在可以任意次调用[`AutomapBase.prepare()`](../orm/extensions/automap.html#sqlalchemy.ext.automap.AutomapBase.prepare
    "sqlalchemy.ext.automap.AutomapBase.prepare")方法，无论是否启用了反射；每次调用只会处理以前未映射的新添加的表。以前，需要显式调用[`MetaData.reflect()`](../core/metadata.html#sqlalchemy.schema.MetaData.reflect
    "sqlalchemy.schema.MetaData.reflect")方法。
- en: See also
  id: totrans-4686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Generating Mappings from Multiple Schemas](../orm/extensions/automap.html#automap-by-module)
    - illustrates use of both techniques at once.'
  id: totrans-4687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[从多个模式生成映射](../orm/extensions/automap.html#automap-by-module) - 同时演示了两种技术的使用。'
- en: 'References: [#5145](https://www.sqlalchemy.org/trac/ticket/5145)'
  id: totrans-4688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5145](https://www.sqlalchemy.org/trac/ticket/5145)
- en: sql
  id: totrans-4689
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-4690
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: 'Fixed stringify for a the [`CreateSchema`](../core/ddl.html#sqlalchemy.schema.CreateSchema
    "sqlalchemy.schema.CreateSchema") DDL construct, which would fail with an `AttributeError`
    when stringified without a dialect. Update: Note this fix failed to accommodate
    for [`DropSchema`](../core/ddl.html#sqlalchemy.schema.DropSchema "sqlalchemy.schema.DropSchema");
    a followup fix in version 2.0.1 repairs this case. The fix for both elements is
    backported to 1.4.47.'
  id: totrans-4691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`CreateSchema`](../core/ddl.html#sqlalchemy.schema.CreateSchema "sqlalchemy.schema.CreateSchema")
    DDL 构造的字符串化，当没有方言时会导致`AttributeError`错误。更新：请注意，此修复未能适应[`DropSchema`](../core/ddl.html#sqlalchemy.schema.DropSchema
    "sqlalchemy.schema.DropSchema")；版本2.0.1中的后续修复解决了这种情况。这两个元素的修复已经回溯到1.4.47。
- en: 'References: [#7664](https://www.sqlalchemy.org/trac/ticket/7664)'
  id: totrans-4692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7664](https://www.sqlalchemy.org/trac/ticket/7664)
- en: typing
  id: totrans-4693
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入
- en: '**[typing] [bug]**'
  id: totrans-4694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Added typing for the built-in generic functions that are available from the
    [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    namespace, which accept a particular set of arguments and return a particular
    type, such as for `count`, `current_timestamp`, etc.
  id: totrans-4695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为从[`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")命名空间中可用的内置通用函数添加了类型，这些函数接受特定的参数并返回特定的类型，例如`count`，`current_timestamp`等。
- en: 'References: [#9129](https://www.sqlalchemy.org/trac/ticket/9129)'
  id: totrans-4696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9129](https://www.sqlalchemy.org/trac/ticket/9129)
- en: '**[typing] [bug]**'
  id: totrans-4697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Corrected the type passed for “lambda statements” so that a plain lambda is
    accepted by mypy, pyright, others without any errors about argument types. Additionally
    implemented typing for more of the public API for lambda statements and ensured
    [`StatementLambdaElement`](../core/foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement") is part of the [`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") hierarchy so it’s typed as accepted by
    [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").
  id: totrans-4698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了“lambda语句”传递的类型，以便mypy、pyright等可以接受普通lambda而不会出现关于参数类型的任何错误。此外，为lambda语句的公共API实现了更多的类型，并确保[`StatementLambdaElement`](../core/foundation.html#sqlalchemy.sql.expression.StatementLambdaElement
    "sqlalchemy.sql.expression.StatementLambdaElement")是[`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")层次结构的一部分，因此它被[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")接受。
- en: 'References: [#9120](https://www.sqlalchemy.org/trac/ticket/9120)'
  id: totrans-4699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9120](https://www.sqlalchemy.org/trac/ticket/9120)
- en: '**[typing] [bug]**'
  id: totrans-4700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: The [`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") and [`ColumnOperators.not_in()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in") methods are typed to include
    `Iterable[Any]` rather than `Sequence[Any]` for more flexibility in argument type.
  id: totrans-4701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")和[`ColumnOperators.not_in()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.not_in
    "sqlalchemy.sql.expression.ColumnOperators.not_in")方法的类型被定义为包含`Iterable[Any]`而不是`Sequence[Any]`，以便在参数类型上具有更大的灵活性。'
- en: 'References: [#9122](https://www.sqlalchemy.org/trac/ticket/9122)'
  id: totrans-4702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9122](https://www.sqlalchemy.org/trac/ticket/9122)
- en: '**[typing] [bug]**'
  id: totrans-4703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: The [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    and [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_ "sqlalchemy.sql.expression.and_")
    from a typing perspective require the first argument to be present, however these
    functions still accept zero arguments which will emit a deprecation warning at
    runtime. Typing is also added to support sending the fixed literal `False` for
    [`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")
    and `True` for [`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_") as the first argument only, however the documentation
    now indicates sending the [`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false") and [`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true") constructs in these cases as a more explicit
    approach.
  id: totrans-4704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从打字的角度看，[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_ "sqlalchemy.sql.expression.or_")和[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")需要第一个参数存在，但这些函数仍然接受零个参数，这将在运行时发出弃用警告。还添加了打字以支持将固定的字面量`False`发送给[`or_()`](../core/sqlelement.html#sqlalchemy.sql.expression.or_
    "sqlalchemy.sql.expression.or_")和`True`发送给[`and_()`](../core/sqlelement.html#sqlalchemy.sql.expression.and_
    "sqlalchemy.sql.expression.and_")作为唯一的第一个参数，但文档现在指示在这些情况下发送[`false()`](../core/sqlelement.html#sqlalchemy.sql.expression.false
    "sqlalchemy.sql.expression.false")和[`true()`](../core/sqlelement.html#sqlalchemy.sql.expression.true
    "sqlalchemy.sql.expression.true")构造作为更明确的方法。
- en: 'References: [#9123](https://www.sqlalchemy.org/trac/ticket/9123)'
  id: totrans-4705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9123](https://www.sqlalchemy.org/trac/ticket/9123)
- en: '**[typing] [bug]**'
  id: totrans-4706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[打字] [错误]**'
- en: Fixed typing issue where iterating over a [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object was not correctly typed.
  id: totrans-4707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象上迭代时类型不正确的打字问题。
- en: 'References: [#9125](https://www.sqlalchemy.org/trac/ticket/9125)'
  id: totrans-4708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9125](https://www.sqlalchemy.org/trac/ticket/9125)
- en: '**[typing] [bug]**'
  id: totrans-4709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[打字] [错误]**'
- en: Fixed typing issue where the object type when using [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") as a context manager were not preserved, indicating
    [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    in all cases rather than the specific [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") sub-type. Pull request courtesy Martin Baláž.
  id: totrans-4710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")作为上下文管理器时对象类型未被保留的打字问题，始终在所有情况下指示[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")而不是特定的[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")子类型。感谢Martin Baláž的拉取请求。
- en: 'References: [#9136](https://www.sqlalchemy.org/trac/ticket/9136)'
  id: totrans-4711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9136](https://www.sqlalchemy.org/trac/ticket/9136)
- en: '**[typing] [bug]**'
  id: totrans-4712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[打字] [错误]**'
- en: Fixed issue where using the [`relationship.remote_side`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship") and similar parameters, passing an annotated declarative
    object typed as [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped"),
    would not be accepted by the type checker.
  id: totrans-4713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用[`relationship.remote_side`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.remote_side
    "sqlalchemy.orm.relationship")和类似参数时的问题，传递一个注释的声明对象类型为[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")，类型检查器不会接受。
- en: 'References: [#9150](https://www.sqlalchemy.org/trac/ticket/9150)'
  id: totrans-4714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9150](https://www.sqlalchemy.org/trac/ticket/9150)
- en: '**[typing] [bug]**'
  id: totrans-4715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[打字] [错误]**'
- en: Added typing to legacy operators such as `isnot()`, `notin_()`, etc. which previously
    were referencing the newer operators but were not themselves typed.
  id: totrans-4716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为诸如`isnot()`、`notin_()`等旧操作符添加了打字，这些操作符以前引用了新操作符，但它们本身没有类型。
- en: 'References: [#9148](https://www.sqlalchemy.org/trac/ticket/9148)'
  id: totrans-4717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9148](https://www.sqlalchemy.org/trac/ticket/9148)
- en: postgresql
  id: totrans-4718
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-4719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Added support to the asyncpg dialect to return the `cursor.rowcount` value for
    SELECT statements when available. While this is not a typical use for `cursor.rowcount`,
    the other PostgreSQL dialects generally provide this value. Pull request courtesy
    Michael Gorven.
  id: totrans-4720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对asyncpg方言的支持，以在可用时为SELECT语句返回`cursor.rowcount`值。虽然这不是`cursor.rowcount`的典型用法，但其他PostgreSQL方言通常提供此值。感谢Michael
    Gorven的拉取请求。
- en: 'This change is also **backported** to: 1.4.47'
  id: totrans-4721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.47
- en: 'References: [#9048](https://www.sqlalchemy.org/trac/ticket/9048)'
  id: totrans-4722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9048](https://www.sqlalchemy.org/trac/ticket/9048)
- en: mysql
  id: totrans-4723
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase]**'
  id: totrans-4724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [用例]**'
- en: Added support to MySQL index reflection to correctly reflect the `mysql_length`
    dictionary, which previously was being ignored.
  id: totrans-4725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Added support to MySQL index reflection to correctly reflect the `mysql_length`
    dictionary, which previously was being ignored.  '
- en: 'This change is also **backported** to: 1.4.47'
  id: totrans-4726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'This change is also **backported** to: 1.4.47  '
- en: 'References: [#9047](https://www.sqlalchemy.org/trac/ticket/9047)'
  id: totrans-4727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#9047](https://www.sqlalchemy.org/trac/ticket/9047)  '
- en: mssql
  id: totrans-4728
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'mssql  '
- en: '**[mssql] [bug] [regression]**'
  id: totrans-4729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [regression]**  '
- en: The newly added comment reflection and rendering capability of the MSSQL dialect,
    added in [#7844](https://www.sqlalchemy.org/trac/ticket/7844), will now be disabled
    by default if it cannot be determined that an unsupported backend such as Azure
    Synapse may be in use; this backend does not support table and column comments
    and does not support the SQL Server routines in use to generate them as well as
    to reflect them. A new parameter `supports_comments` is added to the dialect which
    defaults to `None`, indicating that comment support should be auto-detected. When
    set to `True` or `False`, the comment support is either enabled or disabled unconditionally.
  id: totrans-4730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'The newly added comment reflection and rendering capability of the MSSQL dialect,
    added in [#7844](https://www.sqlalchemy.org/trac/ticket/7844), will now be disabled
    by default if it cannot be determined that an unsupported backend such as Azure
    Synapse may be in use; this backend does not support table and column comments
    and does not support the SQL Server routines in use to generate them as well as
    to reflect them. A new parameter `supports_comments` is added to the dialect which
    defaults to `None`, indicating that comment support should be auto-detected. When
    set to `True` or `False`, the comment support is either enabled or disabled unconditionally.  '
- en: See also
  id: totrans-4731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '另请参阅  '
- en: '[DDL Comment Support](../dialects/mssql.html#mssql-comment-support)'
  id: totrans-4732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[DDL Comment Support](../dialects/mssql.html#mssql-comment-support)  '
- en: 'References: [#9142](https://www.sqlalchemy.org/trac/ticket/9142)'
  id: totrans-4733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#9142](https://www.sqlalchemy.org/trac/ticket/9142)  '
- en: 2.0.0rc3
  id: totrans-4734
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2.0.0rc3  '
- en: 'Released: January 18, 2023'
  id: totrans-4735
  prefs: []
  type: TYPE_NORMAL
  zh: 'Released: January 18, 2023  '
- en: orm
  id: totrans-4736
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'orm  '
- en: '**[orm] [feature]**'
  id: totrans-4737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**  '
- en: Added a new parameter to [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") called [`Mapper.polymorphic_abstract`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_abstract
    "sqlalchemy.orm.Mapper"). The purpose of this directive is so that the ORM will
    not consider the class to be instantiated or loaded directly, only subclasses.
    The actual effect is that the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") will prevent direct instantiation of instances of the
    class and will expect that the class does not have a distinct polymorphic identity
    configured.
  id: totrans-4738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'Added a new parameter to [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") called [`Mapper.polymorphic_abstract`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_abstract
    "sqlalchemy.orm.Mapper"). The purpose of this directive is so that the ORM will
    not consider the class to be instantiated or loaded directly, only subclasses.
    The actual effect is that the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") will prevent direct instantiation of instances of the
    class and will expect that the class does not have a distinct polymorphic identity
    configured.  '
- en: In practice, the class that is mapped with [`Mapper.polymorphic_abstract`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_abstract
    "sqlalchemy.orm.Mapper") can be used as the target of a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") as well as be used in queries; subclasses must
    of course include polymorphic identities in their mappings.
  id: totrans-4739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'In practice, the class that is mapped with [`Mapper.polymorphic_abstract`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_abstract
    "sqlalchemy.orm.Mapper") can be used as the target of a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") as well as be used in queries; subclasses must
    of course include polymorphic identities in their mappings.  '
- en: The new parameter is automatically applied to classes that subclass the [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") class, as this class is not
    intended to be instantiated.
  id: totrans-4740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'The new parameter is automatically applied to classes that subclass the [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") class, as this class is not
    intended to be instantiated.  '
- en: See also
  id: totrans-4741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '另请参阅  '
- en: '[Building Deeper Hierarchies with polymorphic_abstract](../orm/inheritance.html#orm-inheritance-abstract-poly)'
  id: totrans-4742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Building Deeper Hierarchies with polymorphic_abstract](../orm/inheritance.html#orm-inheritance-abstract-poly)  '
- en: 'References: [#9060](https://www.sqlalchemy.org/trac/ticket/9060)'
  id: totrans-4743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#9060](https://www.sqlalchemy.org/trac/ticket/9060)  '
- en: '**[orm] [bug]**'
  id: totrans-4744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**  '
- en: Fixed issue where using a pep-593 `Annotated` type in the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") which itself contained a generic plain container or
    `collections.abc` type (e.g. `list`, `dict`, `collections.abc.Sequence`, etc.
    ) as the target type would produce an internal error when the ORM were trying
    to interpret the `Annotated` instance.
  id: totrans-4745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 pep-593 `Annotated` 类型时的问题，在其中自身包含泛型普通容器或 `collections.abc` 类型（例如 `list`、`dict`、`collections.abc.Sequence`
    等）的 [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry")，当 ORM 尝试解释 `Annotated` 实例时，会产生内部错误。
- en: 'References: [#9099](https://www.sqlalchemy.org/trac/ticket/9099)'
  id: totrans-4746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9099](https://www.sqlalchemy.org/trac/ticket/9099)
- en: '**[orm] [bug]**'
  id: totrans-4747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added an error message when a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") is mapped against an abstract container type, such
    as `Mapped[Sequence[B]]`, without providing the [`relationship.container_class`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.container_class
    "sqlalchemy.orm.relationship") parameter which is necessary when the type is abstract.
    Previously the abstract container would attempt to be instantiated at a later
    step and fail.
  id: totrans-4748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 映射到抽象容器类型（例如 `Mapped[Sequence[B]]`）时，未提供必需的 [`relationship.container_class`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.container_class
    "sqlalchemy.orm.relationship") 参数时，添加了一个错误消息，此前，抽象容器会尝试在后续步骤中实例化并失败。
- en: 'References: [#9100](https://www.sqlalchemy.org/trac/ticket/9100)'
  id: totrans-4749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9100](https://www.sqlalchemy.org/trac/ticket/9100)
- en: sql
  id: totrans-4750
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-4751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug / regression where using [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") with the same name as a column in the [`Update.values()`](../core/dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values") method of [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update"), as well as the [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method of [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") in 2.0 only, would in some cases silently
    fail to honor the SQL expression in which the parameter were presented, replacing
    the expression with a new parameter of the same name and discarding any other
    elements of the SQL expression, such as SQL functions, etc. The specific case
    would be statements that were constructed against ORM entities rather than plain
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    instances, but would occur if the statement were invoked with a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") or a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-4752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误/回归，即在 2.0 中，使用与 [`Update.values()`](../core/dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values") 方法中的列相同的名称与 [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 一起使用时，有时会无声地无法遵守 SQL 表达式，将表达式替换为同名的新参数，并丢弃
    SQL 表达式的任何其他元素，例如 SQL 函数等。具体情况将是针对 ORM 实体而不是纯 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 实例构造的语句，但如果使用 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 或 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 调用语句，则会发生。
- en: '[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    part of the issue was present in both 2.0 and 1.4 and is backported to 1.4.'
  id: totrans-4753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 问题的一部分存在于 2.0 和 1.4 中，并且已回溯到 1.4。
- en: 'This change is also **backported** to: 1.4.47'
  id: totrans-4754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**回溯**到：1.4.47
- en: 'References: [#9075](https://www.sqlalchemy.org/trac/ticket/9075)'
  id: totrans-4755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9075](https://www.sqlalchemy.org/trac/ticket/9075)
- en: typing
  id: totrans-4756
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-4757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixes to the annotations within the `sqlalchemy.ext.hybrid` extension for more
    effective typing of user-defined methods. The typing now uses [**PEP 612**](https://peps.python.org/pep-0612/)
    features, now supported by recent versions of Mypy, to maintain argument signatures
    for [`hybrid_method`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method"). Return values for hybrid methods are accepted
    as SQL expressions in contexts such as [`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") while still supporting SQL methods.
  id: totrans-4758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 `sqlalchemy.ext.hybrid` 扩展中对用户定义方法进行更有效类型注释的问题。现在的类型注释使用了 [**PEP 612**](https://peps.python.org/pep-0612/)
    功能，最近版本的 Mypy 已支持，以维护 [`hybrid_method`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method") 的参数签名。混合方法的返回值在诸如 [`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") 这样的上下文中被接受为 SQL 表达式，同时仍支持 SQL 方法。
- en: 'References: [#9096](https://www.sqlalchemy.org/trac/ticket/9096)'
  id: totrans-4759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9096](https://www.sqlalchemy.org/trac/ticket/9096)
- en: mypy
  id: totrans-4760
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mypy
- en: '**[mypy] [bug]**'
  id: totrans-4761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mypy] [bug]**'
- en: 'Adjustments made to the mypy plugin to accommodate for some potential changes
    being made for issue #236 sqlalchemy2-stubs when using SQLAlchemy 1.4\. These
    changes are being kept in sync within SQLAlchemy 2.0. The changes are also backwards
    compatible with older versions of sqlalchemy2-stubs.'
  id: totrans-4762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '调整了 mypy 插件，以适应在使用 SQLAlchemy 1.4 时可能对 issue #236 sqlalchemy2-stubs 进行的一些潜在更改。这些更改在
    SQLAlchemy 2.0 中保持同步。这些更改也向后兼容旧版本的 sqlalchemy2-stubs。'
- en: 'This change is also **backported** to: 1.4.47'
  id: totrans-4763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.47
- en: '**[mypy] [bug]**'
  id: totrans-4764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mypy] [bug]**'
- en: Fixed crash in mypy plugin which could occur on both 1.4 and 2.0 versions if
    a decorator for the [`mapped()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") decorator were used that was referenced in an
    expression with more than two components (e.g. `@Backend.mapper_registry.mapped`).
    This scenario is now ignored; when using the plugin, the decorator expression
    needs to be two components (i.e. `@reg.mapped`).
  id: totrans-4765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 mypy 插件中的崩溃，该崩溃可能会在 1.4 和 2.0 版本中发生，如果在表达式中使用了一个装饰器，该装饰器具有超过两个组件的引用（例如 `@Backend.mapper_registry.mapped`）。现在会忽略这种情况；在使用插件时，装饰器表达式需要是两个组件（即
    `@reg.mapped`）。
- en: 'This change is also **backported** to: 1.4.47'
  id: totrans-4766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.47
- en: 'References: [#9102](https://www.sqlalchemy.org/trac/ticket/9102)'
  id: totrans-4767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9102](https://www.sqlalchemy.org/trac/ticket/9102)
- en: postgresql
  id: totrans-4768
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-4769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression where psycopg3 changed an API call as of version 3.1.8 to expect
    a specific object type that was previously not enforced, breaking connectivity
    for the psycopg3 dialect.
  id: totrans-4770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 psycopg3 在版本 3.1.8 中更改了一个 API 调用，要求先前未强制执行的特定对象类型，导致 psycopg3 方言的连接中断的回归。
- en: 'References: [#9106](https://www.sqlalchemy.org/trac/ticket/9106)'
  id: totrans-4771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9106](https://www.sqlalchemy.org/trac/ticket/9106)
- en: oracle
  id: totrans-4772
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [usecase]**'
  id: totrans-4773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [usecase]**'
- en: Added support for the Oracle SQL type `TIMESTAMP WITH LOCAL TIME ZONE`, using
    a newly added Oracle-specific [`TIMESTAMP`](../dialects/oracle.html#sqlalchemy.dialects.oracle.TIMESTAMP
    "sqlalchemy.dialects.oracle.TIMESTAMP") datatype.
  id: totrans-4774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 Oracle SQL 类型 `TIMESTAMP WITH LOCAL TIME ZONE` 的支持，使用了新添加的 Oracle 特定的 [`TIMESTAMP`](../dialects/oracle.html#sqlalchemy.dialects.oracle.TIMESTAMP
    "sqlalchemy.dialects.oracle.TIMESTAMP") 数据类型。
- en: 'References: [#9086](https://www.sqlalchemy.org/trac/ticket/9086)'
  id: totrans-4775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9086](https://www.sqlalchemy.org/trac/ticket/9086)
- en: orm
  id: totrans-4776
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-4777
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new parameter to [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") called [`Mapper.polymorphic_abstract`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_abstract
    "sqlalchemy.orm.Mapper"). The purpose of this directive is so that the ORM will
    not consider the class to be instantiated or loaded directly, only subclasses.
    The actual effect is that the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") will prevent direct instantiation of instances of the
    class and will expect that the class does not have a distinct polymorphic identity
    configured.
  id: totrans-4778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    添加了一个名为 [`Mapper.polymorphic_abstract`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_abstract
    "sqlalchemy.orm.Mapper") 的新参数。此指令的目的是，ORM 不会考虑该类直接实例化或加载，只会考虑子类。实际效果是，[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 将阻止直接实例化类的实例，并期望该类没有配置独特的多态标识。
- en: In practice, the class that is mapped with [`Mapper.polymorphic_abstract`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_abstract
    "sqlalchemy.orm.Mapper") can be used as the target of a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") as well as be used in queries; subclasses must
    of course include polymorphic identities in their mappings.
  id: totrans-4779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实际上，与 [`Mapper.polymorphic_abstract`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_abstract
    "sqlalchemy.orm.Mapper") 映射的类也可以作为 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 的目标，以及在查询中使用；当然，子类必须在其映射中包含多态标识。
- en: The new parameter is automatically applied to classes that subclass the [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") class, as this class is not
    intended to be instantiated.
  id: totrans-4780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新参数自动应用于子类化 [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") 类的类，因为该类不打算被实例化。
- en: See also
  id: totrans-4781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Building Deeper Hierarchies with polymorphic_abstract](../orm/inheritance.html#orm-inheritance-abstract-poly)'
  id: totrans-4782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 polymorphic_abstract 构建更深的层次结构](../orm/inheritance.html#orm-inheritance-abstract-poly)'
- en: 'References: [#9060](https://www.sqlalchemy.org/trac/ticket/9060)'
  id: totrans-4783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9060](https://www.sqlalchemy.org/trac/ticket/9060)
- en: '**[orm] [bug]**'
  id: totrans-4784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where using a pep-593 `Annotated` type in the [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") which itself contained a generic plain container or
    `collections.abc` type (e.g. `list`, `dict`, `collections.abc.Sequence`, etc.
    ) as the target type would produce an internal error when the ORM were trying
    to interpret the `Annotated` instance.
  id: totrans-4785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`registry.type_annotation_map`](../orm/mapping_api.html#sqlalchemy.orm.registry.params.type_annotation_map
    "sqlalchemy.orm.registry") 中使用 pep-593 `Annotated` 类型时的问题，其中包含一个通用的普通容器或 `collections.abc`
    类型（例如 `list`、`dict`、`collections.abc.Sequence` 等）作为目标类型会导致 ORM 尝试解释 `Annotated`
    实例时产生内部错误的问题。
- en: 'References: [#9099](https://www.sqlalchemy.org/trac/ticket/9099)'
  id: totrans-4786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9099](https://www.sqlalchemy.org/trac/ticket/9099)
- en: '**[orm] [bug]**'
  id: totrans-4787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added an error message when a [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") is mapped against an abstract container type, such
    as `Mapped[Sequence[B]]`, without providing the [`relationship.container_class`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.container_class
    "sqlalchemy.orm.relationship") parameter which is necessary when the type is abstract.
    Previously the abstract container would attempt to be instantiated at a later
    step and fail.
  id: totrans-4788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 映射到抽象容器类型（例如 `Mapped[Sequence[B]]`）时，添加了一个错误消息，但未提供必要的
    [`relationship.container_class`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.container_class
    "sqlalchemy.orm.relationship") 参数，当类型为抽象时，这是必要的。以前，抽象容器将尝试在后续步骤中实例化并失败。
- en: 'References: [#9100](https://www.sqlalchemy.org/trac/ticket/9100)'
  id: totrans-4789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9100](https://www.sqlalchemy.org/trac/ticket/9100)
- en: sql
  id: totrans-4790
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-4791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed bug / regression where using [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") with the same name as a column in the [`Update.values()`](../core/dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values") method of [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update"), as well as the [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method of [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") in 2.0 only, would in some cases silently
    fail to honor the SQL expression in which the parameter were presented, replacing
    the expression with a new parameter of the same name and discarding any other
    elements of the SQL expression, such as SQL functions, etc. The specific case
    would be statements that were constructed against ORM entities rather than plain
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    instances, but would occur if the statement were invoked with a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") or a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-4792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug/回归，即在[`Update.values()`](../core/dml.html#sqlalchemy.sql.expression.Update.values
    "sqlalchemy.sql.expression.Update.values")的方法中使用与列相同名称的[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")以及在2.0版本中仅在[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")的方法中使用相同名称的参数，在某些情况下会静默失败地遵循参数所呈现的SQL表达式，将表达式替换为相同名称的新参数并丢弃SQL表达式的任何其他元素，如SQL函数等。具体情况是针对ORM实体构建的语句而不是普通的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")实例，但如果使用[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")或[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")调用语句，则会发生。
- en: '[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    part of the issue was present in both 2.0 and 1.4 and is backported to 1.4.'
  id: totrans-4793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")部分的问题在2.0和1.4版本中均存在，并已回溯到1.4。'
- en: 'This change is also **backported** to: 1.4.47'
  id: totrans-4794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.47
- en: 'References: [#9075](https://www.sqlalchemy.org/trac/ticket/9075)'
  id: totrans-4795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9075](https://www.sqlalchemy.org/trac/ticket/9075)
- en: typing
  id: totrans-4796
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入
- en: '**[typing] [bug]**'
  id: totrans-4797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixes to the annotations within the `sqlalchemy.ext.hybrid` extension for more
    effective typing of user-defined methods. The typing now uses [**PEP 612**](https://peps.python.org/pep-0612/)
    features, now supported by recent versions of Mypy, to maintain argument signatures
    for [`hybrid_method`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method"). Return values for hybrid methods are accepted
    as SQL expressions in contexts such as [`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where") while still supporting SQL methods.
  id: totrans-4798
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对`sqlalchemy.ext.hybrid`扩展中用户定义方法的类型注释进行修复，以更有效地类型化。现在的类型注释使用[**PEP 612**](https://peps.python.org/pep-0612/)的特性，最近的Mypy版本支持，以保持[`hybrid_method`](../orm/extensions/hybrid.html#sqlalchemy.ext.hybrid.hybrid_method
    "sqlalchemy.ext.hybrid.hybrid_method")的参数签名。混合方法的返回值在诸如[`Select.where()`](../core/selectable.html#sqlalchemy.sql.expression.Select.where
    "sqlalchemy.sql.expression.Select.where")等上下文中被接受为SQL表达式，同时仍支持SQL方法。
- en: 'References: [#9096](https://www.sqlalchemy.org/trac/ticket/9096)'
  id: totrans-4799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9096](https://www.sqlalchemy.org/trac/ticket/9096)
- en: mypy
  id: totrans-4800
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mypy
- en: '**[mypy] [bug]**'
  id: totrans-4801
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mypy] [bug]**'
- en: 'Adjustments made to the mypy plugin to accommodate for some potential changes
    being made for issue #236 sqlalchemy2-stubs when using SQLAlchemy 1.4\. These
    changes are being kept in sync within SQLAlchemy 2.0. The changes are also backwards
    compatible with older versions of sqlalchemy2-stubs.'
  id: totrans-4802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '对mypy插件进行了调整，以适应使用SQLAlchemy 1.4时可能进行的对issue #236 sqlalchemy2-stubs的一些潜在更改。这些更改在SQLAlchemy
    2.0内保持同步。这些更改也与旧版本的sqlalchemy2-stubs兼容。'
- en: 'This change is also **backported** to: 1.4.47'
  id: totrans-4803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.47
- en: '**[mypy] [bug]**'
  id: totrans-4804
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mypy] [bug]**'
- en: Fixed crash in mypy plugin which could occur on both 1.4 and 2.0 versions if
    a decorator for the [`mapped()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped
    "sqlalchemy.orm.registry.mapped") decorator were used that was referenced in an
    expression with more than two components (e.g. `@Backend.mapper_registry.mapped`).
    This scenario is now ignored; when using the plugin, the decorator expression
    needs to be two components (i.e. `@reg.mapped`).
  id: totrans-4805
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在mypy插件中的崩溃，如果在表达式中引用了超过两个组件的装饰器（例如`@Backend.mapper_registry.mapped`），则在1.4和2.0版本上都可能发生。现在这种情况被忽略；在使用插件时，装饰器表达式需要是两个组件（即`@reg.mapped`）。
- en: 'This change is also **backported** to: 1.4.47'
  id: totrans-4806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**回溯**到了：1.4.47
- en: 'References: [#9102](https://www.sqlalchemy.org/trac/ticket/9102)'
  id: totrans-4807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9102](https://www.sqlalchemy.org/trac/ticket/9102)
- en: postgresql
  id: totrans-4808
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-4809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression where psycopg3 changed an API call as of version 3.1.8 to expect
    a specific object type that was previously not enforced, breaking connectivity
    for the psycopg3 dialect.
  id: totrans-4810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了回归，在版本3.1.8中psycopg3更改了一个API调用，以期望之前没有强制执行的特定对象类型，从而破坏了psycopg3方言的连通性。
- en: 'References: [#9106](https://www.sqlalchemy.org/trac/ticket/9106)'
  id: totrans-4811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9106](https://www.sqlalchemy.org/trac/ticket/9106)
- en: oracle
  id: totrans-4812
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [usecase]**'
  id: totrans-4813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [usecase]**'
- en: Added support for the Oracle SQL type `TIMESTAMP WITH LOCAL TIME ZONE`, using
    a newly added Oracle-specific [`TIMESTAMP`](../dialects/oracle.html#sqlalchemy.dialects.oracle.TIMESTAMP
    "sqlalchemy.dialects.oracle.TIMESTAMP") datatype.
  id: totrans-4814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对Oracle SQL类型`TIMESTAMP WITH LOCAL TIME ZONE`的支持，使用了新添加的Oracle特定[`TIMESTAMP`](../dialects/oracle.html#sqlalchemy.dialects.oracle.TIMESTAMP
    "sqlalchemy.dialects.oracle.TIMESTAMP")数据类型。
- en: 'References: [#9086](https://www.sqlalchemy.org/trac/ticket/9086)'
  id: totrans-4815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9086](https://www.sqlalchemy.org/trac/ticket/9086)
- en: 2.0.0rc2
  id: totrans-4816
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.0rc2
- en: 'Released: January 9, 2023'
  id: totrans-4817
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2023年1月9日
- en: orm
  id: totrans-4818
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-4819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where an overly restrictive ORM mapping rule were added in 2.0 which
    prevented mappings against [`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") objects, such as those used in the view
    recipe on the wiki.
  id: totrans-4820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在2.0中添加了一个过于严格的ORM映射规则的问题，该规则阻止了对[`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "`sqlalchemy.sql.expression.TableClause`")对象的映射，例如在wiki上使用的视图配方中使用的那些。
- en: 'References: [#9071](https://www.sqlalchemy.org/trac/ticket/9071)'
  id: totrans-4821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9071](https://www.sqlalchemy.org/trac/ticket/9071)
- en: typing
  id: totrans-4822
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-4823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: The Data Class Transforms argument `field_descriptors` was renamed to `field_specifiers`
    in the accepted version of PEP 681.
  id: totrans-4824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在PEP 681的被接受版本中，Data Class Transforms参数`field_descriptors`被重命名为`field_specifiers`。
- en: 'References: [#9067](https://www.sqlalchemy.org/trac/ticket/9067)'
  id: totrans-4825
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9067](https://www.sqlalchemy.org/trac/ticket/9067)
- en: postgresql
  id: totrans-4826
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [json]**'
  id: totrans-4827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [json]**'
- en: 'Implemented missing `JSONB` operations:'
  id: totrans-4828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了缺失的`JSONB`操作：
- en: '`@@` using [`Comparator.path_match()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match")'
  id: totrans-4829
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[`Comparator.path_match()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match
    "`sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match`")来处理`@@`。
- en: '`@?` using [`Comparator.path_exists()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists")'
  id: totrans-4830
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[`Comparator.path_exists()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists
    "`sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists`")来处理`@?`。
- en: '`#-` using [`Comparator.delete_path()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path")'
  id: totrans-4831
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[`Comparator.delete_path()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path
    "`sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path`")来处理`#-`。
- en: Pull request courtesy of Guilherme Martins Crocetti.
  id: totrans-4832
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由Guilherme Martins Crocetti提供的拉取请求。
- en: 'References: [#7147](https://www.sqlalchemy.org/trac/ticket/7147)'
  id: totrans-4833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7147](https://www.sqlalchemy.org/trac/ticket/7147)
- en: mysql
  id: totrans-4834
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-4835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Restored the behavior of [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") to report on temporary tables
    for MySQL / MariaDB. This is currently the behavior for all other included dialects,
    but was removed for MySQL in 1.4 due to no longer using the DESCRIBE command;
    there was no documented support for temp tables being reported by the [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") method in this version or
    on any previous version, so the previous behavior was undefined.
  id: totrans-4836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了[`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table")方法的行为，用于报告MySQL / MariaDB的临时表。这是所有其他包含的方言的当前行为，但在1.4中对MySQL进行了删除，因为不再使用DESCRIBE命令；在这个版本或任何之前的版本中，没有记录支持通过[`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table")方法报告临时表，因此之前的行为是未定义的。
- en: As SQLAlchemy 2.0 has added formal support for temp table status via [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table"), the MySQL /MariaDB dialect
    has been reverted to use the “DESCRIBE” statement as it did in the SQLAlchemy
    1.3 series and previously, and test support is added to include MySQL / MariaDB
    for this behavior. The previous issues with ROLLBACK being emitted which 1.4 sought
    to improve upon don’t apply in SQLAlchemy 2.0 due to simplifications in how [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") handles transactions.
  id: totrans-4837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于SQLAlchemy 2.0通过[`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table")正式支持临时表状态，MySQL / MariaDB方言已经恢复为在SQLAlchemy
    1.3系列和以前使用“DESCRIBE”语句的方式，并且添加了测试支持以包括MySQL / MariaDB的这种行为。由于[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")处理事务的简化，1.4试图改进的以前发生的ROLLBACK问题在SQLAlchemy 2.0中不适用。
- en: DESCRIBE is necessary as MariaDB in particular has no consistently available
    public information schema of any kind in order to report on temp tables other
    than DESCRIBE/SHOW COLUMNS, which rely on throwing an error in order to report
    no results.
  id: totrans-4838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DESCRIBE是必要的，因为特别是MariaDB没有一致可用的公共信息模式来报告除DESCRIBE/SHOW COLUMNS之外的临时表，这依赖于抛出错误以报告无结果。
- en: 'References: [#9058](https://www.sqlalchemy.org/trac/ticket/9058)'
  id: totrans-4839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9058](https://www.sqlalchemy.org/trac/ticket/9058)
- en: oracle
  id: totrans-4840
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-4841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Supported use case for foreign key constraints where the local column is marked
    as “invisible”. The errors normally generated when a [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") is created that check for the target
    column are disabled when reflecting, and the constraint is skipped with a warning
    in the same way which already occurs for an [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") with a similar issue.
  id: totrans-4842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持外键约束的用例，其中本地列标记为“不可见”。在反射时，创建[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")时通常生成的错误被禁用，并且与已经存在类似问题的[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")一样，跳过约束并发出警告。
- en: 'References: [#9059](https://www.sqlalchemy.org/trac/ticket/9059)'
  id: totrans-4843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9059](https://www.sqlalchemy.org/trac/ticket/9059)
- en: orm
  id: totrans-4844
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-4845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where an overly restrictive ORM mapping rule were added in 2.0 which
    prevented mappings against [`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") objects, such as those used in the view
    recipe on the wiki.
  id: totrans-4846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在2.0版本中添加的一个过于严格的ORM映射规则，导致无法对[`TableClause`](../core/selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause")对象进行映射，比如在维基百科上使用的视图配方中使用的对象。
- en: 'References: [#9071](https://www.sqlalchemy.org/trac/ticket/9071)'
  id: totrans-4847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9071](https://www.sqlalchemy.org/trac/ticket/9071)
- en: typing
  id: totrans-4848
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-4849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: The Data Class Transforms argument `field_descriptors` was renamed to `field_specifiers`
    in the accepted version of PEP 681.
  id: totrans-4850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在PEP 681的已接受版本中，Data Class Transforms参数`field_descriptors`被重命名为`field_specifiers`。
- en: 'References: [#9067](https://www.sqlalchemy.org/trac/ticket/9067)'
  id: totrans-4851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9067](https://www.sqlalchemy.org/trac/ticket/9067)
- en: postgresql
  id: totrans-4852
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [json]**'
  id: totrans-4853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [json]**'
- en: 'Implemented missing `JSONB` operations:'
  id: totrans-4854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了缺失的`JSONB`操作：
- en: '`@@` using [`Comparator.path_match()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match")'
  id: totrans-4855
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@@` 使用[`Comparator.path_match()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_match")'
- en: '`@?` using [`Comparator.path_exists()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists")'
  id: totrans-4856
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@?` 使用[`Comparator.path_exists()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.path_exists")'
- en: '`#-` using [`Comparator.delete_path()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path")'
  id: totrans-4857
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#-` 使用[`Comparator.delete_path()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path
    "sqlalchemy.dialects.postgresql.JSONB.Comparator.delete_path")'
- en: Pull request courtesy of Guilherme Martins Crocetti.
  id: totrans-4858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 感谢Guilherme Martins Crocetti提供的拉取请求。
- en: 'References: [#7147](https://www.sqlalchemy.org/trac/ticket/7147)'
  id: totrans-4859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#7147](https://www.sqlalchemy.org/trac/ticket/7147)'
- en: mysql
  id: totrans-4860
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [bug]**'
  id: totrans-4861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Restored the behavior of [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") to report on temporary tables
    for MySQL / MariaDB. This is currently the behavior for all other included dialects,
    but was removed for MySQL in 1.4 due to no longer using the DESCRIBE command;
    there was no documented support for temp tables being reported by the [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") method in this version or
    on any previous version, so the previous behavior was undefined.
  id: totrans-4862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了[`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table")的行为，以报告MySQL / MariaDB的临时表。这是所有其他包含的方言的当前行为，但是在1.4中删除了MySQL的行为，因为不再使用DESCRIBE命令;在此版本或任何先前版本中，[`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table")方法没有记录支持临时表的报告，因此之前的行为未定义。
- en: As SQLAlchemy 2.0 has added formal support for temp table status via [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table"), the MySQL /MariaDB dialect
    has been reverted to use the “DESCRIBE” statement as it did in the SQLAlchemy
    1.3 series and previously, and test support is added to include MySQL / MariaDB
    for this behavior. The previous issues with ROLLBACK being emitted which 1.4 sought
    to improve upon don’t apply in SQLAlchemy 2.0 due to simplifications in how [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") handles transactions.
  id: totrans-4863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于SQLAlchemy 2.0已经增加了对临时表状态的正式支持，因此将MySQL / MariaDB方言恢复为使用“DESCRIBE”语句，就像SQLAlchemy
    1.3系列和以前一样，并且添加了测试支持以包含MySQL / MariaDB用于此行为。由于[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")处理事务的简化，在SQLAlchemy 2.0中，1.4试图改进的ROLLBACK的先前问题不适用。
- en: DESCRIBE is necessary as MariaDB in particular has no consistently available
    public information schema of any kind in order to report on temp tables other
    than DESCRIBE/SHOW COLUMNS, which rely on throwing an error in order to report
    no results.
  id: totrans-4864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DESCRIBE是必需的，因为特别是MariaDB没有任何一致可用的公共信息模式，以便报告除DESCRIBE/SHOW COLUMNS之外的临时表，这些信息模式依赖于抛出错误以报告没有结果。
- en: 'References: [#9058](https://www.sqlalchemy.org/trac/ticket/9058)'
  id: totrans-4865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'References: [#9058](https://www.sqlalchemy.org/trac/ticket/9058)'
- en: oracle
  id: totrans-4866
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-4867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Supported use case for foreign key constraints where the local column is marked
    as “invisible”. The errors normally generated when a [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") is created that check for the target
    column are disabled when reflecting, and the constraint is skipped with a warning
    in the same way which already occurs for an [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") with a similar issue.
  id: totrans-4868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持外键约束的用例，其中本地列标记为“不可见”。当反射时禁用通常在创建[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")时生成的检查目标列的错误，并且与发生类似问题的[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")一样，以相同的警告跳过约束。
- en: 'References: [#9059](https://www.sqlalchemy.org/trac/ticket/9059)'
  id: totrans-4869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9059](https://www.sqlalchemy.org/trac/ticket/9059)
- en: 2.0.0rc1
  id: totrans-4870
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.0rc1
- en: 'Released: December 28, 2022'
  id: totrans-4871
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2022年12月28日
- en: general
  id: totrans-4872
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general] [bug]**'
  id: totrans-4873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general] [bug]**'
- en: Fixed regression where the base compat module was calling upon `platform.architecture()`
    in order to detect some system properties, which results in an over-broad system
    call against the system-level `file` call that is unavailable under some circumstances,
    including within some secure environment configurations.
  id: totrans-4874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了基本兼容模块调用`platform.architecture()`来检测某些系统属性的回归，结果是针对一些情况下不可用的系统级`file`调用进行了过度广泛的系统调用，包括一些安全环境配置。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-4875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.46
- en: 'References: [#8995](https://www.sqlalchemy.org/trac/ticket/8995)'
  id: totrans-4876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8995](https://www.sqlalchemy.org/trac/ticket/8995)
- en: orm
  id: totrans-4877
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-4878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added a new default value for the [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") parameter “auto”, which will automatically fetch table
    default values during a unit of work flush, if the dialect supports RETURNING
    for the INSERT being run, as well as [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    available. Eager fetches for server-side UPDATE defaults, which are very uncommon,
    continue to only take place if [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") is set to `True`, as there is no batch-RETURNING form
    for UPDATE statements.
  id: totrans-4879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper")参数“auto”添加了一个新的默认值，该参数将在工作单元刷新时自动获取表默认值，如果方言支持正在运行的INSERT的RETURNING，以及[insertmanyvalues](../core/connections.html#engine-insertmanyvalues)可用。对于服务器端UPDATE默认值的急切获取是非常罕见的，只有在[`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper")设置为`True`时才会发生，因为对于UPDATE语句，没有批量RETURNING形式。
- en: 'References: [#8889](https://www.sqlalchemy.org/trac/ticket/8889)'
  id: totrans-4880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8889](https://www.sqlalchemy.org/trac/ticket/8889)
- en: '**[orm] [usecase]**'
  id: totrans-4881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: 'Adjustments to the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in terms of extensibility, as well as updates to the
    [`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession") extension:'
  id: totrans-4882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的可扩展性，以及对[`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession")扩展的更新：
- en: '[`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    now accepts [`Session.get.bind_arguments`](../orm/session_api.html#sqlalchemy.orm.Session.get.params.bind_arguments
    "sqlalchemy.orm.Session.get"), which in particular may be useful when using the
    horizontal sharding extension.'
  id: totrans-4883
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")现在接受[`Session.get.bind_arguments`](../orm/session_api.html#sqlalchemy.orm.Session.get.params.bind_arguments
    "sqlalchemy.orm.Session.get")，尤其在使用水平分片扩展时可能会有用。'
- en: '[`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") accepts arbitrary kw arguments, which assists
    in developing code that uses a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") class which overrides this method with additional arguments.'
  id: totrans-4884
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")接受任意关键字参数，这有助于开发使用覆盖此方法的[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")类的代码，以及额外的参数。'
- en: Added a new ORM execution option `identity_token` which may be used to directly
    affect the “identity token” that will be associated with newly loaded ORM objects.
    This token is how sharding approaches (namely the [`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession"), but can be used in other cases
    as well) separate object identities across different “shards”.
  id: totrans-4885
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个新的ORM执行选项`identity_token`，可用于直接影响将与新加载的ORM对象关联的“身份令牌”。这个令牌是分片方法（主要是[`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession")，但也可以在其他情况下使用）在不同“分片”之间分离对象标识的方式。
- en: See also
  id: totrans-4886
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Identity Token](../orm/queryguide/api.html#queryguide-identity-token)'
  id: totrans-4887
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[身份令牌](../orm/queryguide/api.html#queryguide-identity-token)'
- en: The [`SessionEvents.do_orm_execute()`](../orm/events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook may now be used to affect
    all ORM-related options, including `autoflush`, `populate_existing`, and `yield_per`;
    these options are re-consumed subsequent to event hooks being invoked before they
    are acted upon. Previously, options like `autoflush` would have been already evaluated
    at this point. The new `identity_token` option is also supported in this mode
    and is now used by the horizontal sharding extension.
  id: totrans-4888
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SessionEvents.do_orm_execute()`](../orm/events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") 事件钩子现在可以用于影响所有 ORM 相关的选项，包括 `autoflush`、`populate_existing`
    和 `yield_per`；在事件钩子被调用后，这些选项会被重新使用，然后才被执行。之前，像 `autoflush` 这样的选项在此时已经被评估过了。这种模式还支持新的
    `identity_token` 选项，并且水平分片扩展现在正在使用它。'
- en: The [`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession") class replaces the [`ShardedSession.id_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.id_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession") hook with a new hook [`ShardedSession.identity_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.identity_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession"), which no longer relies upon
    the legacy [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object. [`ShardedSession.id_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.id_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession") is still accepted in place of
    [`ShardedSession.identity_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.identity_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession") with a deprecation warning.
  id: totrans-4889
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession") 类替换了 [`ShardedSession.id_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.id_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession") 钩子，使用一个新的钩子 [`ShardedSession.identity_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.identity_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession")，它不再依赖于传统的 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象。虽然 [`ShardedSession.id_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.id_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession") 仍然可以在警告弃用的情况下替代 [`ShardedSession.identity_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.identity_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession")。'
- en: 'References: [#7837](https://www.sqlalchemy.org/trac/ticket/7837)'
  id: totrans-4890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7837](https://www.sqlalchemy.org/trac/ticket/7837)
- en: '**[orm] [usecase]**'
  id: totrans-4891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: The behavior of “joining an external transaction into a Session” has been revised
    and improved, allowing explicit control over how the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will accommodate an incoming [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") that already has a transaction and possibly a
    savepoint already established. The new parameter [`Session.join_transaction_mode`](../orm/session_api.html#sqlalchemy.orm.Session.params.join_transaction_mode
    "sqlalchemy.orm.Session") includes a series of option values which can accommodate
    the existing transaction in several ways, most importantly allowing a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to operate in a fully transactional style using savepoints
    exclusively, while leaving the externally initiated transaction non-committed
    and active under all circumstances, allowing test suites to rollback all changes
    that take place within tests.
  id: totrans-4892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “将外部事务加入到一个会话中”的行为已经进行了修订和改进，允许对 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 如何适应已经建立了事务和可能已经建立了保存点的传入 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 进行显式控制。新参数 [`Session.join_transaction_mode`](../orm/session_api.html#sqlalchemy.orm.Session.params.join_transaction_mode
    "sqlalchemy.orm.Session") 包含了一系列选项值，可以以几种方式适应现有的事务，最重要的是允许 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 以完全事务化的方式使用独占的保存点，同时在所有情况下保持外部启动的事务未提交且处于活动状态，允许测试套件回滚在测试中发生的所有更改。
- en: Additionally, revised the [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method to fully close out savepoints that may
    still be present, which also allows the “external transaction” recipe to proceed
    without warnings if the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") did not explicitly end its own SAVEPOINT transactions.
  id: totrans-4893
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，修改了[`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") 方法，以完全关闭可能仍然存在的保存点，这还允许“外部事务”配方在[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")没有显式结束其自己的 SAVEPOINT 事务时继续进行而不会出现警告。
- en: See also
  id: totrans-4894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[New transaction join modes for Session](whatsnew_20.html#change-9015)'
  id: totrans-4895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[会话的新事务连接模式](whatsnew_20.html#change-9015)'
- en: 'References: [#9015](https://www.sqlalchemy.org/trac/ticket/9015)'
  id: totrans-4896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9015](https://www.sqlalchemy.org/trac/ticket/9015)
- en: '**[orm] [usecase]**'
  id: totrans-4897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [usecase]**'
- en: Removed the requirement that the `__allow_unmapped__` attribute be used on Declarative
    Dataclass Mapped class when non-`Mapped[]` annotations are detected; previously,
    an error message that was intended to support legacy ORM typed mappings would
    be raised, which additionally did not mention correct patterns to use with Dataclasses
    specifically. This error message is now no longer raised if [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") or [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") is used.
  id: totrans-4898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了在检测到非`Mapped[]`注释时必须在 Declarative Dataclass Mapped 类上使用`__allow_unmapped__`
    属性的要求；以前，会引发一个意图支持传统 ORM 类型映射的错误消息，该错误消息还没有明确提到与 Dataclasses 特定相关的正确模式。如果使用了[`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") 或 [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")，则不再引发此错误消息。
- en: See also
  id: totrans-4899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Using Non-Mapped Dataclass Fields](../orm/dataclasses.html#orm-declarative-native-dataclasses-non-mapped-fields)'
  id: totrans-4900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用未映射的数据类字段](../orm/dataclasses.html#orm-declarative-native-dataclasses-non-mapped-fields)'
- en: 'References: [#8973](https://www.sqlalchemy.org/trac/ticket/8973)'
  id: totrans-4901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8973](https://www.sqlalchemy.org/trac/ticket/8973)
- en: '**[orm] [bug]**'
  id: totrans-4902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in the internal SQL traversal for DML statements like [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") which would cause among other potential issues,
    a specific issue using lambda statements with the ORM update/delete feature.
  id: totrans-4903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了用于 DML 语句（如[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    和 [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")）的内部
    SQL 遍历中的问题，该问题会导致使用 ORM 更新/删除功能时出现一些潜在问题，其中包括使用 lambda 语句时出现的特定问题。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-4904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还已**回溯**到：1.4.46
- en: 'References: [#9033](https://www.sqlalchemy.org/trac/ticket/9033)'
  id: totrans-4905
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9033](https://www.sqlalchemy.org/trac/ticket/9033)
- en: '**[orm] [bug]**'
  id: totrans-4906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") would fail to preserve the current loaded contents
    of relationship attributes that were indicated with the [`relationship.viewonly`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship") parameter, thus defeating strategies that use [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") to pull fully loaded objects from caches and other
    similar techniques. In a related change, fixed issue where an object that contains
    a loaded relationship that was nonetheless configured as `lazy='raise'` on the
    mapping would fail when passed to [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge"); checks for “raise” are now suspended within the
    merge process assuming the [`Session.merge.load`](../orm/session_api.html#sqlalchemy.orm.Session.merge.params.load
    "sqlalchemy.orm.Session.merge") parameter remains at its default of `True`.
  id: totrans-4907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")无法保留使用[`relationship.viewonly`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship")参数指示的关系属性的当前加载内容的情况，从而破坏了使用[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")从缓存和其他类似技术中提取完全加载的对象的策略。在相关变更中，修复了一个问题，即一个包含已加载关系的对象，但仍然在映射上配置为
    `lazy='raise'` 的对象，在传递给[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")时会失败；在合并过程中暂停了“raise”检查，假定[`Session.merge.load`](../orm/session_api.html#sqlalchemy.orm.Session.merge.params.load
    "sqlalchemy.orm.Session.merge")参数保持其默认值为 `True`。
- en: Overall, this is a behavioral adjustment to a change introduced in the 1.4 series
    as of [#4994](https://www.sqlalchemy.org/trac/ticket/4994), which took “merge”
    out of the set of cascades applied by default to “viewonly” relationships. As
    “viewonly” relationships aren’t persisted under any circumstances, allowing their
    contents to transfer during “merge” does not impact the persistence behavior of
    the target object. This allows [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") to correctly suit one of its use cases, that of
    adding objects to a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") that were loaded elsewhere, often for the purposes of
    restoring from a cache.
  id: totrans-4908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总的来说，这是对 1.4 系列中引入的一个变更的行为调整，即 [#4994](https://www.sqlalchemy.org/trac/ticket/4994)，该变更将“merge”从默认应用于“viewonly”关系的级联集合中移除。由于“viewonly”关系在任何情况下都不会被持久化，允许它们的内容在“merge”期间传输不会影响目标对象的持久化行为。这使得[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")能够正确地满足其中一个用例，即向[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")添加在其他地方加载的对象，通常是为了从缓存中恢复。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-4909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也被**反向移植**到：1.4.45
- en: 'References: [#8862](https://www.sqlalchemy.org/trac/ticket/8862)'
  id: totrans-4910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8862](https://www.sqlalchemy.org/trac/ticket/8862)
- en: '**[orm] [bug]**'
  id: totrans-4911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issues in [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") where expressions that were composed of columns
    that were referenced from the enclosing SELECT would not render correct SQL in
    some contexts, in the case where the expression had a label name that matched
    the attribute which used [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression"), even when [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") had no default expression. For the moment,
    if the [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") does have a default expression, that label
    name is still used for that default, and an additional label with the same name
    will continue to be ignored. Overall, this case is pretty thorny so further adjustments
    might be warranted.
  id: totrans-4912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression")中的问题，在这个表达式中，由于列被引用自封闭的SELECT，有些情况下 SQL 渲染不正确，即使表达式具有与使用[`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression")的属性匹配的标签名称，即使[`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression")没有默认表达式。目前，如果[`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression")确实具有默认表达式，该标签名称仍然用于该默认值，并且将继续忽略具有相同名称的其他标签。总的来说，这种情况相当棘手，因此可能需要进一步调整。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-4913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改动也**回溯**到：1.4.45
- en: 'References: [#8881](https://www.sqlalchemy.org/trac/ticket/8881)'
  id: totrans-4914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8881](https://www.sqlalchemy.org/trac/ticket/8881)
- en: '**[orm] [bug]**'
  id: totrans-4915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted if a backref name used in [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") names an attribute on the target class which already
    has a method or attribute assigned to that name, as the backref declaration will
    replace that attribute.
  id: totrans-4916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")中使用的反向引用名称命名了目标类上已经分配给该名称的方法或属性，则会发出警告，因为反向引用声明将替换该属性。
- en: 'References: [#4629](https://www.sqlalchemy.org/trac/ticket/4629)'
  id: totrans-4917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4629](https://www.sqlalchemy.org/trac/ticket/4629)
- en: '**[orm] [bug]**'
  id: totrans-4918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A series of changes and improvements regarding [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh"). The overall change is that primary key attributes
    for an object are now included in a refresh operation unconditionally when relationship-bound
    attributes are to be refreshed, even if not expired and even if not specified
    in the refresh.
  id: totrans-4919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一系列关于[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")的变更和改进。总的变化是，当要刷新关系绑定的属性时，对象的主键属性现在无条件地包含在刷新操作中，即使没有过期，甚至如果没有在刷新中指定。
- en: Improved [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") so that if autoflush is enabled (as is the default
    for [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")),
    the autoflush takes place at an earlier part of the refresh process so that pending
    primary key changes are applied without errors being raised. Previously, this
    autoflush took place too late in the process and the SELECT statement would not
    use the correct key to locate the row and an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") would be raised.
  id: totrans-4920
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进了[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")，以便如果启用了自动刷新（作为 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 的默认设置），自动刷新会在刷新过程的较早阶段进行，以便应用待处理的主键更改而不会引发错误。以前，此自动刷新发生得太晚，SELECT
    语句将不使用正确的键来定位行，并且会引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: When the above condition is present, that is, unflushed primary key changes
    are present on the object, but autoflush is not enabled, the refresh() method
    now explicitly disallows the operation to proceed, and an informative [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised asking that the pending primary
    key changes be flushed first. Previously, this use case was simply broken and
    [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") would be raised anyway. This restriction
    is so that it’s safe for the primary key attributes to be refreshed, as is necessary
    for the case of being able to refresh the object with relationship-bound secondary
    eagerloaders also being emitted. This rule applies in all cases to keep API behavior
    consistent regardless of whether or not the PK cols are actually needed in the
    refresh, as it is unusual to be refreshing some attributes on an object while
    keeping other attributes “pending” in any case.
  id: totrans-4921
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当上述条件存在时，即对象上存在未刷新的主键更改，但未启用自动刷新时，`refresh()`方法现在明确禁止操作继续进行，并引发一个信息性的[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")，要求先刷新待处理的主键更改。以前，这种用例简单地被破坏，无论如何都会引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。这个限制是为了安全地刷新主键属性，这在需要刷新具有关系绑定的次要预加载器的对象的情况下是必要的。无论是否实际上需要在刷新中使用PK列，此规则都适用于保持API行为一致，因为在任何情况下，刷新对象的某些属性而保留其他属性“待处理”是不寻常的。
- en: The [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method has been enhanced such that attributes
    which are [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")-bound and linked to an eager loader, either at
    mapping time or via last-used loader options, will be refreshed in all cases even
    when a list of attributes is passed that does not include any columns on the parent
    row. This builds upon the feature first implemented for non-column attributes
    as part of [#1763](https://www.sqlalchemy.org/trac/ticket/1763) fixed in 1.4 allowing
    eagerly-loaded relationship-bound attributes to participate in the [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") operation. If the refresh operation does not
    indicate any columns on the parent row to be refreshed, the primary key columns
    will nonetheless be included in the refresh operation, which allows the load to
    proceed into the secondary relationship loaders indicated as it does normally.
    Previously an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") error would be raised for this condition
    ([#8703](https://www.sqlalchemy.org/trac/ticket/8703))
  id: totrans-4922
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")方法已经得到增强，使得那些与[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")绑定并链接到急加载器的属性，在所有情况下都将被刷新，即使传递了一个不包括父行上任何列的属性列表。这是在1.4中作为[#1763](https://www.sqlalchemy.org/trac/ticket/1763)的一部分首次实现的功能，允许急加载的关系绑定属性参与[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")操作。如果刷新操作没有指示要刷新父行上的任何列，则主键列仍将包括在刷新操作中，这允许加载继续到正常情况下指示的次要关系加载器。以前，对于这种情况会引发一个[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")错误（[#8703](https://www.sqlalchemy.org/trac/ticket/8703))。'
- en: Fixed issue where an unnecessary additional SELECT would be emitted in the case
    where [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") were called with a combination of expired attributes,
    as well as an eager loader such as [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") that emits a “secondary” query, if the primary
    key attributes were also in an expired state. As the primary key attributes are
    now included in the refresh automatically, there is no additional load for these
    attributes when a relationship loader goes to select for them ([#8997](https://www.sqlalchemy.org/trac/ticket/8997))
  id: totrans-4923
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了一个问题，即在调用[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")时，如果属性过期并且同时存在一个发射“次要”查询的急加载器（例如[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")），则会额外发出一个不必要的附加SELECT。现在，由于主键属性已自动包含在刷新中，因此在关系加载器选择这些属性时不会有额外的加载。([#8997](https://www.sqlalchemy.org/trac/ticket/8997))
- en: Fixed regression caused by [#8126](https://www.sqlalchemy.org/trac/ticket/8126)
    released in 2.0.0b1 where the [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method would fail with an `AttributeError`,
    if passed both an expired column name as well as the name of a relationship-bound
    attribute that was linked to a “secondary” eagerloader such as the [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") eager loader ([#8996](https://www.sqlalchemy.org/trac/ticket/8996))
  id: totrans-4924
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了由2.0.0b1中引起的[#8126](https://www.sqlalchemy.org/trac/ticket/8126)引起的回归，其中[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")方法将在传递过期的列名以及与“次要”急加载器（如[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")）链接的关系绑定属性名称时导致`AttributeError`失败。 ([#8996](https://www.sqlalchemy.org/trac/ticket/8996))
- en: 'References: [#8703](https://www.sqlalchemy.org/trac/ticket/8703), [#8996](https://www.sqlalchemy.org/trac/ticket/8996),
    [#8997](https://www.sqlalchemy.org/trac/ticket/8997)'
  id: totrans-4925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8703](https://www.sqlalchemy.org/trac/ticket/8703), [#8996](https://www.sqlalchemy.org/trac/ticket/8996),
    [#8997](https://www.sqlalchemy.org/trac/ticket/8997)
- en: '**[orm] [bug]**'
  id: totrans-4926
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved a fix first made in version 1.4 for [#8456](https://www.sqlalchemy.org/trac/ticket/8456)
    which scaled back the usage of internal “polymorphic adapters”, that are used
    to render ORM queries when the [`Mapper.with_polymorphic`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.with_polymorphic
    "sqlalchemy.orm.Mapper") parameter is used. These adapters, which are very complex
    and error prone, are now used only in those cases where an explicit user-supplied
    subquery is used for [`Mapper.with_polymorphic`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.with_polymorphic
    "sqlalchemy.orm.Mapper"), which includes only the use case of concrete inheritance
    mappings that use the [`polymorphic_union()`](../orm/mapping_api.html#sqlalchemy.orm.polymorphic_union
    "sqlalchemy.orm.polymorphic_union") helper, as well as the legacy use case of
    using an aliased subquery for joined inheritance mappings, which is not needed
    in modern use.
  id: totrans-4927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了版本1.4中针对[#8456](https://www.sqlalchemy.org/trac/ticket/8456)的首次修复，该修复减少了在使用[`Mapper.with_polymorphic`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.with_polymorphic
    "sqlalchemy.orm.Mapper")参数时用于呈现ORM查询的内部“多态适配器”的使用。这些非常复杂且容易出错的适配器现在仅在显式用户提供子查询用于[`Mapper.with_polymorphic`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.with_polymorphic
    "sqlalchemy.orm.Mapper")的情况下使用，其中包括仅使用[`polymorphic_union()`](../orm/mapping_api.html#sqlalchemy.orm.polymorphic_union
    "sqlalchemy.orm.polymorphic_union")助手的具体继承映射的用例，以及使用别名子查询的传统用例，这在现代用例中不需要。
- en: For the most common case of joined inheritance mappings that use the built-in
    polymorphic loading scheme, which includes those which make use of the [`Mapper.polymorphic_load`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_load
    "sqlalchemy.orm.Mapper") parameter set to `inline`, polymorphic adapters are now
    no longer used. This has both a positive performance impact on the construction
    of queries as well as a substantial simplification of the internal query rendering
    process.
  id: totrans-4928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于使用内置多态加载方案的最常见的连接继承映射情况，包括那些使用[`Mapper.polymorphic_load`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_load
    "sqlalchemy.orm.Mapper")参数设置为`inline`的情况，现在不再使用多态适配器。这对于查询的构造有着积极的性能影响，同时也极大地简化了内部查询渲染过程。
- en: The specific issue targeted was to allow a [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") to refer to joined-inheritance classes within
    a scalar subquery, which now works as intuitively as is feasible.
  id: totrans-4929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具体针对的问题是允许[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")引用标量子查询中的继承类，现在可以像可行的那样直观地工作。
- en: 'References: [#8168](https://www.sqlalchemy.org/trac/ticket/8168)'
  id: totrans-4930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8168](https://www.sqlalchemy.org/trac/ticket/8168)
- en: engine
  id: totrans-4931
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [bug]**'
  id: totrans-4932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [错误]**'
- en: Fixed a long-standing race condition in the connection pool which could occur
    under eventlet/gevent monkeypatching schemes in conjunction with the use of eventlet/gevent
    `Timeout` conditions, where a connection pool checkout that’s interrupted due
    to the timeout would fail to clean up the failed state, causing the underlying
    connection record and sometimes the database connection itself to “leak”, leaving
    the pool in an invalid state with unreachable entries. This issue was first identified
    and fixed in SQLAlchemy 1.2 for [#4225](https://www.sqlalchemy.org/trac/ticket/4225),
    however the failure modes detected in that fix failed to accommodate for `BaseException`,
    rather than `Exception`, which prevented eventlet/gevent `Timeout` from being
    caught. In addition, a block within initial pool connect has also been identified
    and hardened with a `BaseException` -> “clean failed connect” block to accommodate
    for the same condition in this location. Big thanks to Github user @niklaus for
    their tenacious efforts in identifying and describing this intricate issue.
  id: totrans-4933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池中长期存在的竞争条件，在与eventlet/gevent monkeypatching方案一起使用eventlet/gevent `Timeout`条件时可能会发生，在这种情况下，由于超时而中断的连接池检出将无法清理失败状态，导致底层连接记录和有时数据库连接本身“泄漏”，使池处于无效状态，无法访问条目。这个问题首次在SQLAlchemy
    1.2中被识别和修复，用于[#4225](https://www.sqlalchemy.org/trac/ticket/4225)，然而在该修复中检测到的故障模式未能适应`BaseException`，而不是`Exception`，这阻止了eventlet/gevent
    `Timeout`的捕获。此外，在初始池连接中还识别并加固了一个`BaseException` -> “清理失败连接”块，以适应此位置的相同条件。非常感谢Github用户@niklaus为他们在识别和描述这个错综复杂问题中的顽强努力。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-4934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.46
- en: 'References: [#8974](https://www.sqlalchemy.org/trac/ticket/8974)'
  id: totrans-4935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8974](https://www.sqlalchemy.org/trac/ticket/8974)
- en: '**[engine] [bug]**'
  id: totrans-4936
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [错误]**'
- en: Fixed issue where [`Result.freeze()`](../core/connections.html#sqlalchemy.engine.Result.freeze
    "sqlalchemy.engine.Result.freeze") method would not work for textual SQL using
    either [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    or [`Connection.exec_driver_sql()`](../core/connections.html#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql").
  id: totrans-4937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Result.freeze()`](../core/connections.html#sqlalchemy.engine.Result.freeze
    "sqlalchemy.engine.Result.freeze")方法无法用于使用[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")或[`Connection.exec_driver_sql()`](../core/connections.html#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql")的文本SQL的问题。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-4938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.45
- en: 'References: [#8963](https://www.sqlalchemy.org/trac/ticket/8963)'
  id: totrans-4939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8963](https://www.sqlalchemy.org/trac/ticket/8963)
- en: sql
  id: totrans-4940
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-4941
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: An informative re-raise is now thrown in the case where any “literal bindparam”
    render operation fails, indicating the value itself and the datatype in use, to
    assist in debugging when literal params are being rendered in a statement.
  id: totrans-4942
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当任何“文字绑定参数”渲染操作失败时，现在会抛出一个信息性的重新引发，指示值本身和正在使用的数据类型，以帮助调试在语句中渲染文字参数时发生的情况。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-4943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.45
- en: 'References: [#8800](https://www.sqlalchemy.org/trac/ticket/8800)'
  id: totrans-4944
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8800](https://www.sqlalchemy.org/trac/ticket/8800)
- en: '**[sql] [bug]**'
  id: totrans-4945
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed issue in lambda SQL feature where the calculated type of a literal value
    would not take into account the type coercion rules of the “compared to type”,
    leading to a lack of typing information for SQL expressions, such as comparisons
    to [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    elements and similar.
  id: totrans-4946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了lambda SQL功能中的问题，其中文字值的计算类型不会考虑“与类型比较”的类型强制转换规则，导致SQL表达式缺乏类型信息，例如与[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON")元素等的比较。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-4947
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.46
- en: 'References: [#9029](https://www.sqlalchemy.org/trac/ticket/9029)'
  id: totrans-4948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9029](https://www.sqlalchemy.org/trac/ticket/9029)
- en: '**[sql] [bug]**'
  id: totrans-4949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed a series of issues regarding the position and sometimes the identity of
    rendered bound parameters, such as those used for SQLite, asyncpg, MySQL, Oracle
    and others. Some compiled forms would not maintain the order of parameters correctly,
    such as the PostgreSQL `regexp_replace()` function, the “nesting” feature of the
    [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    construct first introduced in [#4123](https://www.sqlalchemy.org/trac/ticket/4123),
    and selectable tables formed by using the [`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") method with Oracle.
  id: totrans-4950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于呈现的绑定参数的位置以及有时是身份的一系列问题，例如 SQLite、asyncpg、MySQL、Oracle 等使用的参数。一些编译的形式不会正确地保持参数的顺序，例如
    PostgreSQL `regexp_replace()` 函数、首次在 [#4123](https://www.sqlalchemy.org/trac/ticket/4123)
    中引入的 [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    构造的“嵌套”功能，以及使用 Oracle 的 [`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") 方法形成的可选择表。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-4951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**反向移植**到：1.4.45
- en: 'References: [#8827](https://www.sqlalchemy.org/trac/ticket/8827)'
  id: totrans-4952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8827](https://www.sqlalchemy.org/trac/ticket/8827)
- en: '**[sql] [bug]**'
  id: totrans-4953
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added test support to ensure that all compiler `visit_xyz()` methods across
    all `Compiler` implementations in SQLAlchemy accept a `**kw` parameter, so that
    all compilers accept additional keyword arguments under all circumstances.
  id: totrans-4954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了测试支持，以确保 SQLAlchemy 中所有 `Compiler` 实现中的所有编译器 `visit_xyz()` 方法都接受一个 `**kw`
    参数，以便所有编译器在所有情况下都接受额外的关键字参数。
- en: 'References: [#8988](https://www.sqlalchemy.org/trac/ticket/8988)'
  id: totrans-4955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8988](https://www.sqlalchemy.org/trac/ticket/8988)
- en: '**[sql] [bug]**'
  id: totrans-4956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`SQLCompiler.construct_params()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.construct_params
    "sqlalchemy.sql.compiler.SQLCompiler.construct_params") method, as well as the
    [`SQLCompiler.params`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.params
    "sqlalchemy.sql.compiler.SQLCompiler.params") accessor, will now return the exact
    parameters that correspond to a compiled statement that used the `render_postcompile`
    parameter to compile. Previously, the method returned a parameter structure that
    by itself didn’t correspond to either the original parameters or the expanded
    ones.
  id: totrans-4957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`SQLCompiler.construct_params()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.construct_params
    "sqlalchemy.sql.compiler.SQLCompiler.construct_params") 方法以及 [`SQLCompiler.params`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.params
    "sqlalchemy.sql.compiler.SQLCompiler.params") 访问器现在将返回与使用 `render_postcompile`
    参数编译的编译语句相对应的确切参数。以前，该方法返回的参数结构本身既不对应原始参数也不对应扩展参数。'
- en: Passing a new dictionary of parameters to [`SQLCompiler.construct_params()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.construct_params
    "sqlalchemy.sql.compiler.SQLCompiler.construct_params") for a [`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") that was constructed with `render_postcompile`
    is now disallowed; instead, to make a new SQL string and parameter set for an
    alternate set of parameters, a new method [`SQLCompiler.construct_expanded_state()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state
    "sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state") is added which
    will produce a new expanded form for the given parameter set, using the [`ExpandedState`](../core/internals.html#sqlalchemy.sql.compiler.ExpandedState
    "sqlalchemy.sql.compiler.ExpandedState") container which includes a new SQL statement
    and new parameter dictionary, as well as a positional parameter tuple.
  id: totrans-4958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不再允许向使用 `render_postcompile` 构造的 [`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") 传递新的参数字典；而是，为了为备选参数集制作新的 SQL 字符串和参数集，添加了一个新方法
    [`SQLCompiler.construct_expanded_state()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state
    "sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state")，该方法将使用 [`ExpandedState`](../core/internals.html#sqlalchemy.sql.compiler.ExpandedState
    "sqlalchemy.sql.compiler.ExpandedState") 容器为给定的参数集生成新的扩展形式，其中包括新的 SQL 语句和新的参数字典，以及位置参数元组。
- en: 'References: [#6114](https://www.sqlalchemy.org/trac/ticket/6114)'
  id: totrans-4959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#6114](https://www.sqlalchemy.org/trac/ticket/6114)
- en: '**[sql] [bug]**'
  id: totrans-4960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: To accommodate for third party dialects with different character escaping needs
    regarding bound parameters, the system by which SQLAlchemy “escapes” (i.e., replaces
    with another character in its place) special characters in bound parameter names
    has been made extensible for third party dialects, using the `SQLCompiler.bindname_escape_chars`
    dictionary which can be overridden at the class declaration level on any [`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") subclass. As part of this change, also
    added the dot `"."` as a default “escaped” character.
  id: totrans-4961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了适应具有不同字符转义需求的第三方方言，关于绑定参数的特殊字符的SQLAlchemy“转义”（即用另一个字符替换）的系统已经被扩展为第三方方言可扩展，使用`SQLCompiler.bindname_escape_chars`字典，可以在任何[`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler")子类的类声明级别上进行覆盖。作为这一变化的一部分，还添加了点“.”作为默认的“转义”字符。
- en: 'References: [#8994](https://www.sqlalchemy.org/trac/ticket/8994)'
  id: totrans-4962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8994](https://www.sqlalchemy.org/trac/ticket/8994)
- en: typing
  id: totrans-4963
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入
- en: '**[typing] [bug]**'
  id: totrans-4964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: pep-484 typing has been completed for the `sqlalchemy.ext.horizontal_shard`
    extension as well as the `sqlalchemy.orm.events` module. Thanks to Gleb Kisenkov
    for their efforts.
  id: totrans-4965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pep-484 输入已经完成了`sqlalchemy.ext.horizontal_shard`扩展以及`sqlalchemy.orm.events`模块的类型。感谢Gleb
    Kisenkov的努力。
- en: 'References: [#6810](https://www.sqlalchemy.org/trac/ticket/6810), [#9025](https://www.sqlalchemy.org/trac/ticket/9025)'
  id: totrans-4966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6810](https://www.sqlalchemy.org/trac/ticket/6810)，[#9025](https://www.sqlalchemy.org/trac/ticket/9025)
- en: asyncio
  id: totrans-4967
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [bug]**'
  id: totrans-4968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [错误]**'
- en: Removed non-functional `merge()` method from [`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult"). This method has never worked and was included
    with [`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") in error.
  id: totrans-4969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从[`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")中删除了无效的`merge()`方法。这个方法从未起作用，并且错误地包含在[`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")中。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-4970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.45
- en: 'References: [#8952](https://www.sqlalchemy.org/trac/ticket/8952)'
  id: totrans-4971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8952](https://www.sqlalchemy.org/trac/ticket/8952)
- en: postgresql
  id: totrans-4972
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-4973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed bug where the PostgreSQL [`Insert.on_conflict_do_update.constraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") parameter would
    accept an [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    object, however would not expand this index out into its individual index expressions,
    instead rendering its name in an ON CONFLICT ON CONSTRAINT clause, which is not
    accepted by PostgreSQL; the “constraint name” form only accepts unique or exclude
    constraint names. The parameter continues to accept the index but now expands
    it out into its component expressions for the render.
  id: totrans-4974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即PostgreSQL [`Insert.on_conflict_do_update.constraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update")参数将接受一个[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象，但不会将此索引展开为其各个索引表达式，而是在ON CONFLICT ON CONSTRAINT子句中呈现其名称，这不被PostgreSQL接受；“约束名”形式只接受唯一或排除约束名。该参数继续接受索引，但现在将其展开为其组成表达式以进行呈现。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-4975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.46
- en: 'References: [#9023](https://www.sqlalchemy.org/trac/ticket/9023)'
  id: totrans-4976
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9023](https://www.sqlalchemy.org/trac/ticket/9023)
- en: '**[postgresql] [bug]**'
  id: totrans-4977
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Made an adjustment to how the PostgreSQL dialect considers column types when
    it reflects columns from a table, to accommodate for alternative backends which
    may return NULL from the PG `format_type()` function.
  id: totrans-4978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了PostgreSQL方言在从表中反映列类型时的考虑方式，以适应可能从PG `format_type()`函数返回NULL的替代后端。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-4979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.45
- en: 'References: [#8748](https://www.sqlalchemy.org/trac/ticket/8748)'
  id: totrans-4980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8748](https://www.sqlalchemy.org/trac/ticket/8748)
- en: '**[postgresql] [bug]**'
  id: totrans-4981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Added support for explicit use of PG full text functions with asyncpg and psycopg
    (SQLAlchemy 2.0 only), with regards to the `REGCONFIG` type cast for the first
    argument, which previously would be incorrectly cast to a VARCHAR, causing failures
    on these dialects that rely upon explicit type casts. This includes support for
    [`to_tsvector`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.to_tsvector
    "sqlalchemy.dialects.postgresql.to_tsvector"), [`to_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.to_tsquery
    "sqlalchemy.dialects.postgresql.to_tsquery"), [`plainto_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.plainto_tsquery
    "sqlalchemy.dialects.postgresql.plainto_tsquery"), [`phraseto_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.phraseto_tsquery
    "sqlalchemy.dialects.postgresql.phraseto_tsquery"), [`websearch_to_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery"), [`ts_headline`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ts_headline
    "sqlalchemy.dialects.postgresql.ts_headline"), each of which will determine based
    on number of arguments passed if the first string argument should be interpreted
    as a PostgreSQL “REGCONFIG” value; if so, the argument is typed using a newly
    added type object [`REGCONFIG`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG") which is then explicitly cast in the
    SQL expression.
  id: totrans-4982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对asyncpg和psycopg（仅适用于SQLAlchemy 2.0）明确使用PG全文函数的支持，关于第一个参数的`REGCONFIG`类型转换，以前会错误地转换为VARCHAR，导致这些方言上的失败依赖于明确的类型转换。这包括对[`to_tsvector`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.to_tsvector
    "sqlalchemy.dialects.postgresql.to_tsvector")、[`to_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.to_tsquery
    "sqlalchemy.dialects.postgresql.to_tsquery")、[`plainto_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.plainto_tsquery
    "sqlalchemy.dialects.postgresql.plainto_tsquery")、[`phraseto_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.phraseto_tsquery
    "sqlalchemy.dialects.postgresql.phraseto_tsquery")、[`websearch_to_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery")、[`ts_headline`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ts_headline
    "sqlalchemy.dialects.postgresql.ts_headline")的支持，每个函数都会根据传递的参数数量确定第一个字符串参数是否应该被解释为PostgreSQL的“REGCONFIG”值；如果是，则使用新添加的类型对象[`REGCONFIG`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG")对参数进行显式类型化，然后在SQL表达式中显式转换。
- en: 'References: [#8977](https://www.sqlalchemy.org/trac/ticket/8977)'
  id: totrans-4983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8977](https://www.sqlalchemy.org/trac/ticket/8977)
- en: '**[postgresql] [bug]**'
  id: totrans-4984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed regression where newly revised PostgreSQL range types such as [`INT4RANGE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INT4RANGE
    "sqlalchemy.dialects.postgresql.INT4RANGE") could not be set up as the impl of
    a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator "sqlalchemy.types.TypeDecorator")
    custom type, instead raising a `TypeError`.
  id: totrans-4985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新修订的PostgreSQL范围类型（如[`INT4RANGE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INT4RANGE
    "sqlalchemy.dialects.postgresql.INT4RANGE")）无法设置为[`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator")自定义类型的impl，而是引发了`TypeError`的回归问题。
- en: 'References: [#9020](https://www.sqlalchemy.org/trac/ticket/9020)'
  id: totrans-4986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9020](https://www.sqlalchemy.org/trac/ticket/9020)
- en: '**[postgresql] [bug]**'
  id: totrans-4987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The `Range.__eq___()` will now return `NotImplemented` when comparing with an
    instance of a different class, instead of raising an `AttributeError` exception.
  id: totrans-4988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当与不同类的实例进行比较时，`Range.__eq___()`现在会返回`NotImplemented`，而不是引发`AttributeError`异常。
- en: 'References: [#8984](https://www.sqlalchemy.org/trac/ticket/8984)'
  id: totrans-4989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8984](https://www.sqlalchemy.org/trac/ticket/8984)
- en: sqlite
  id: totrans-4990
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-4991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [usecase]**'
- en: Added support for the SQLite backend to reflect the “DEFERRABLE” and “INITIALLY”
    keywords which may be present on a foreign key construct. Pull request courtesy
    Michael Gorven.
  id: totrans-4992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对SQLite后端的支持，以反映可能存在于外键构造上的“DEFERRABLE”和“INITIALLY”关键字。感谢Michael Gorven的拉取请求。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-4993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也**被回溯**到：1.4.45
- en: 'References: [#8903](https://www.sqlalchemy.org/trac/ticket/8903)'
  id: totrans-4994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8903](https://www.sqlalchemy.org/trac/ticket/8903)
- en: '**[sqlite] [usecase]**'
  id: totrans-4995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [usecase]**'
- en: Added support for reflection of expression-oriented WHERE criteria included
    in indexes on the SQLite dialect, in a manner similar to that of the PostgreSQL
    dialect. Pull request courtesy Tobias Pfeiffer.
  id: totrans-4996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对SQLite方言中包含在索引中的基于表达式的WHERE条件的反射支持，类似于PostgreSQL方言的方式。感谢Tobias Pfeiffer的拉取请求。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-4997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也**被回溯**到：1.4.45
- en: 'References: [#8804](https://www.sqlalchemy.org/trac/ticket/8804)'
  id: totrans-4998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8804](https://www.sqlalchemy.org/trac/ticket/8804)
- en: oracle
  id: totrans-4999
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-5000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Fixed issue in Oracle compiler where the syntax for [`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") was incorrect, rendering
    the name `COLUMN_VALUE` without qualifying the source table correctly.
  id: totrans-5001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle 编译器中 [`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") 语法错误的问题，导致 `COLUMN_VALUE`
    名称没有正确限定源表。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-5002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被迁移**至：1.4.45
- en: 'References: [#8945](https://www.sqlalchemy.org/trac/ticket/8945)'
  id: totrans-5003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8945](https://www.sqlalchemy.org/trac/ticket/8945)
- en: tests
  id: totrans-5004
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-5005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误]**'
- en: Fixed issue in tox.ini file where changes in the tox 4.0 series to the format
    of “passenv” caused tox to not function correctly, in particular raising an error
    as of tox 4.0.6.
  id: totrans-5006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 tox.ini 文件中的问题，在 tox 4.0 系列对于 “passenv” 格式的更改导致 tox 无法正常工作，特别是在 tox 4.0.6
    之后引发错误。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-5007
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被迁移**至：1.4.46
- en: '**[tests] [bug]**'
  id: totrans-5008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误]**'
- en: Added new exclusion rule for third party dialects called `unusual_column_name_characters`,
    which can be “closed” for third party dialects that don’t support column names
    with unusual characters such as dots, slashes, or percent signs in them, even
    if the name is properly quoted.
  id: totrans-5009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为第三方方言添加了一个名为 `unusual_column_name_characters` 的新的排除规则，可以针对不支持具有不寻常字符的列名的第三方方言进行“关闭”，即使该名称已正确引用。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-5010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被迁移**至：1.4.46
- en: 'References: [#9002](https://www.sqlalchemy.org/trac/ticket/9002)'
  id: totrans-5011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9002](https://www.sqlalchemy.org/trac/ticket/9002)
- en: general
  id: totrans-5012
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general] [bug]**'
  id: totrans-5013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [错误]**'
- en: Fixed regression where the base compat module was calling upon `platform.architecture()`
    in order to detect some system properties, which results in an over-broad system
    call against the system-level `file` call that is unavailable under some circumstances,
    including within some secure environment configurations.
  id: totrans-5014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了基础兼容模块调用 `platform.architecture()` 以检测某些系统属性的回归，这会导致对于一些情况下不可用的系统级别 `file`
    调用进行过度广泛的系统调用，包括在某些安全环境配置中。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-5015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被迁移**至：1.4.46
- en: 'References: [#8995](https://www.sqlalchemy.org/trac/ticket/8995)'
  id: totrans-5016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8995](https://www.sqlalchemy.org/trac/ticket/8995)
- en: orm
  id: totrans-5017
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-5018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added a new default value for the [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") parameter “auto”, which will automatically fetch table
    default values during a unit of work flush, if the dialect supports RETURNING
    for the INSERT being run, as well as [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)
    available. Eager fetches for server-side UPDATE defaults, which are very uncommon,
    continue to only take place if [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") is set to `True`, as there is no batch-RETURNING form
    for UPDATE statements.
  id: totrans-5019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") 参数“auto”添加了一个新的默认值，“auto” 将在工作单元刷新期间自动获取表默认值，如果方言支持用于运行的
    INSERT 的 RETURNING，并且可用 [insertmanyvalues](../core/connections.html#engine-insertmanyvalues)。对于服务端
    UPDATE 默认值的急切获取，这是非常罕见的，仅在 [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") 设置为 `True` 时才会发生，因为没有 UPDATE 语句的批量 RETURNING 形式。
- en: 'References: [#8889](https://www.sqlalchemy.org/trac/ticket/8889)'
  id: totrans-5020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8889](https://www.sqlalchemy.org/trac/ticket/8889)
- en: '**[orm] [usecase]**'
  id: totrans-5021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: 'Adjustments to the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in terms of extensibility, as well as updates to the
    [`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession") extension:'
  id: totrans-5022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    在可扩展性方面的调整，以及对 [`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession") 扩展的更新：
- en: '[`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    now accepts [`Session.get.bind_arguments`](../orm/session_api.html#sqlalchemy.orm.Session.get.params.bind_arguments
    "sqlalchemy.orm.Session.get"), which in particular may be useful when using the
    horizontal sharding extension.'
  id: totrans-5023
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    现在接受 [`Session.get.bind_arguments`](../orm/session_api.html#sqlalchemy.orm.Session.get.params.bind_arguments
    "sqlalchemy.orm.Session.get.params.bind_arguments")，特别是在使用水平分片扩展时可能会很有用。'
- en: '[`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") accepts arbitrary kw arguments, which assists
    in developing code that uses a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") class which overrides this method with additional arguments.'
  id: totrans-5024
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Session.get_bind()`](../orm/session_api.html#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") 接受任意的关键字参数，这有助于开发使用重载了此方法并具有额外参数的 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 类的代码。'
- en: Added a new ORM execution option `identity_token` which may be used to directly
    affect the “identity token” that will be associated with newly loaded ORM objects.
    This token is how sharding approaches (namely the [`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession"), but can be used in other cases
    as well) separate object identities across different “shards”.
  id: totrans-5025
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个新的 ORM 执行选项 `identity_token`，可直接影响将与新加载的 ORM 对象关联的“标识令牌”。该令牌是分片方法（主要是 [`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession")，但也可用于其他情况）在不同“分片”中分隔对象标识的方式。
- en: See also
  id: totrans-5026
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Identity Token](../orm/queryguide/api.html#queryguide-identity-token)'
  id: totrans-5027
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[标识令牌](../orm/queryguide/api.html#queryguide-identity-token)'
- en: The [`SessionEvents.do_orm_execute()`](../orm/events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook may now be used to affect
    all ORM-related options, including `autoflush`, `populate_existing`, and `yield_per`;
    these options are re-consumed subsequent to event hooks being invoked before they
    are acted upon. Previously, options like `autoflush` would have been already evaluated
    at this point. The new `identity_token` option is also supported in this mode
    and is now used by the horizontal sharding extension.
  id: totrans-5028
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SessionEvents.do_orm_execute()`](../orm/events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") 事件钩子现在可用于影响所有与 ORM 相关的选项，包括 `autoflush`、`populate_existing`
    和 `yield_per`；在事件钩子被调用后，这些选项会重新被消费，然后再执行。以前，像 `autoflush` 这样的选项在此时已经被评估过了。新的 `identity_token`
    选项也在此模式中受支持，并且现在被水平分片扩展使用。'
- en: The [`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession") class replaces the [`ShardedSession.id_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.id_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession") hook with a new hook [`ShardedSession.identity_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.identity_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession"), which no longer relies upon
    the legacy [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object. [`ShardedSession.id_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.id_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession") is still accepted in place of
    [`ShardedSession.identity_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.identity_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession") with a deprecation warning.
  id: totrans-5029
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`ShardedSession`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession
    "sqlalchemy.ext.horizontal_shard.ShardedSession") 类用新的钩子 [`ShardedSession.identity_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.identity_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession") 替换了 [`ShardedSession.id_chooser`](../orm/extensions/horizontal_shard.html#sqlalchemy.ext.horizontal_shard.ShardedSession.params.id_chooser
    "sqlalchemy.ext.horizontal_shard.ShardedSession") 钩子，不再依赖于传统的 [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象。在此情况下，`ShardedSession.id_chooser` 仍然被接受，并发出弃用警告。'
- en: 'References: [#7837](https://www.sqlalchemy.org/trac/ticket/7837)'
  id: totrans-5030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7837](https://www.sqlalchemy.org/trac/ticket/7837)
- en: '**[orm] [usecase]**'
  id: totrans-5031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: The behavior of “joining an external transaction into a Session” has been revised
    and improved, allowing explicit control over how the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will accommodate an incoming [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") that already has a transaction and possibly a
    savepoint already established. The new parameter [`Session.join_transaction_mode`](../orm/session_api.html#sqlalchemy.orm.Session.params.join_transaction_mode
    "sqlalchemy.orm.Session") includes a series of option values which can accommodate
    the existing transaction in several ways, most importantly allowing a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to operate in a fully transactional style using savepoints
    exclusively, while leaving the externally initiated transaction non-committed
    and active under all circumstances, allowing test suites to rollback all changes
    that take place within tests.
  id: totrans-5032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “将外部事务加入到会话中”的行为已经修订和改进，允许对 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 如何适应已经建立了事务和可能已经建立了保存点的传入 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 进行显式控制。新参数 [`Session.join_transaction_mode`](../orm/session_api.html#sqlalchemy.orm.Session.params.join_transaction_mode
    "sqlalchemy.orm.Session.params.join_transaction_mode") 包括一系列选项值，可以以几种方式适应现有事务，最重要的是允许
    [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    以完全事务样式使用仅保存点，同时在所有情况下保持外部启动的事务未提交且活跃，允许测试套件在测试中回滚所有发生的更改。
- en: Additionally, revised the [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method to fully close out savepoints that may
    still be present, which also allows the “external transaction” recipe to proceed
    without warnings if the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") did not explicitly end its own SAVEPOINT transactions.
  id: totrans-5033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，修订了 [`Session.close()`](../orm/session_api.html#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") 方法以完全关闭可能仍然存在的保存点，这也允许“外部事务”方案在未显式结束其自己的 SAVEPOINT
    事务的情况下进行而不会出现警告。
- en: See also
  id: totrans-5034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New transaction join modes for Session](whatsnew_20.html#change-9015)'
  id: totrans-5035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[会话的新事务加入模式](whatsnew_20.html#change-9015)'
- en: 'References: [#9015](https://www.sqlalchemy.org/trac/ticket/9015)'
  id: totrans-5036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#9015](https://www.sqlalchemy.org/trac/ticket/9015)
- en: '**[orm] [usecase]**'
  id: totrans-5037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Removed the requirement that the `__allow_unmapped__` attribute be used on Declarative
    Dataclass Mapped class when non-`Mapped[]` annotations are detected; previously,
    an error message that was intended to support legacy ORM typed mappings would
    be raised, which additionally did not mention correct patterns to use with Dataclasses
    specifically. This error message is now no longer raised if [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") or [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass") is used.
  id: totrans-5038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到非`Mapped[]`注释时，不再要求在 Declarative Dataclass Mapped 类上使用 `__allow_unmapped__`
    属性；以前，如果使用 [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") 或 [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")，就会触发一个旨在支持传统 ORM 类型映射的错误消息，而且此错误消息还未明确提到与
    Dataclasses 特别相关的正确模式。如果使用 [`registry.mapped_as_dataclass()`](../orm/mapping_api.html#sqlalchemy.orm.registry.mapped_as_dataclass
    "sqlalchemy.orm.registry.mapped_as_dataclass") 或 [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")，则不再触发此错误消息。
- en: See also
  id: totrans-5039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Non-Mapped Dataclass Fields](../orm/dataclasses.html#orm-declarative-native-dataclasses-non-mapped-fields)'
  id: totrans-5040
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用非映射 Dataclass 字段](../orm/dataclasses.html#orm-declarative-native-dataclasses-non-mapped-fields)'
- en: 'References: [#8973](https://www.sqlalchemy.org/trac/ticket/8973)'
  id: totrans-5041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#8973](https://www.sqlalchemy.org/trac/ticket/8973)
- en: '**[orm] [bug]**'
  id: totrans-5042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]** '
- en: Fixed issue in the internal SQL traversal for DML statements like [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") which would cause among other potential issues,
    a specific issue using lambda statements with the ORM update/delete feature.
  id: totrans-5043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了内部 SQL 遍历中关于 `Update` 和 `Delete` 等 DML 语句的问题，这些问题会导致一些潜在问题，其中之一是在使用 ORM 更新/删除功能时使用
    lambda 表达式的特定问题。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-5044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**回溯**到：1.4.46
- en: 'References: [#9033](https://www.sqlalchemy.org/trac/ticket/9033)'
  id: totrans-5045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9033](https://www.sqlalchemy.org/trac/ticket/9033)
- en: '**[orm] [bug]**'
  id: totrans-5046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug where [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") would fail to preserve the current loaded contents
    of relationship attributes that were indicated with the [`relationship.viewonly`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship") parameter, thus defeating strategies that use [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") to pull fully loaded objects from caches and other
    similar techniques. In a related change, fixed issue where an object that contains
    a loaded relationship that was nonetheless configured as `lazy='raise'` on the
    mapping would fail when passed to [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge"); checks for “raise” are now suspended within the
    merge process assuming the [`Session.merge.load`](../orm/session_api.html#sqlalchemy.orm.Session.merge.params.load
    "sqlalchemy.orm.Session.merge") parameter remains at its default of `True`.
  id: totrans-5047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，[`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") 在指定了 [`relationship.viewonly`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.viewonly
    "sqlalchemy.orm.relationship") 参数的关系属性的当前加载内容时会失败，从而破坏了使用 [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") 从缓存和其他类似技术中提取完全加载的对象的策略。在相关变更中，修复了一个问题，即包含已加载关系的对象，而映射上仍配置为`lazy='raise'`时，当传递给
    [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    时会失败；假定 [`Session.merge.load`](../orm/session_api.html#sqlalchemy.orm.Session.merge.params.load
    "sqlalchemy.orm.Session.merge") 参数保持默认值`True`的情况下，合并过程中的“raise”检查现在被挂起。
- en: Overall, this is a behavioral adjustment to a change introduced in the 1.4 series
    as of [#4994](https://www.sqlalchemy.org/trac/ticket/4994), which took “merge”
    out of the set of cascades applied by default to “viewonly” relationships. As
    “viewonly” relationships aren’t persisted under any circumstances, allowing their
    contents to transfer during “merge” does not impact the persistence behavior of
    the target object. This allows [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") to correctly suit one of its use cases, that of
    adding objects to a [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") that were loaded elsewhere, often for the purposes of
    restoring from a cache.
  id: totrans-5048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总体而言，这是对 1.4 系列中引入的更改的行为调整，即 [#4994](https://www.sqlalchemy.org/trac/ticket/4994)
    中的一项更改，将“merge”从默认应用于“viewonly”关系的级联集中删除。由于“viewonly”关系在任何情况下都不会持久化，因此允许它们的内容在“merge”期间转移不会影响目标对象的持久化行为。这使得
    [`Session.merge()`](../orm/session_api.html#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    正确地适应了其中一种用例，即将对象添加到其他地方加载的 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 中，通常是为了从缓存中恢复。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-5049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.4.45
- en: 'References: [#8862](https://www.sqlalchemy.org/trac/ticket/8862)'
  id: totrans-5050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8862](https://www.sqlalchemy.org/trac/ticket/8862)
- en: '**[orm] [bug]**'
  id: totrans-5051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issues in [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") where expressions that were composed of columns
    that were referenced from the enclosing SELECT would not render correct SQL in
    some contexts, in the case where the expression had a label name that matched
    the attribute which used [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression"), even when [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") had no default expression. For the moment,
    if the [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") does have a default expression, that label
    name is still used for that default, and an additional label with the same name
    will continue to be ignored. Overall, this case is pretty thorny so further adjustments
    might be warranted.
  id: totrans-5052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [`with_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.with_expression
    "sqlalchemy.orm.with_expression") 中的问题，其中由从封闭 SELECT 引用的列组成的表达式在某些情况下不会正确渲染 SQL，在表达式具有与使用
    [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") 的属性匹配的标签名称的情况下，即使 [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") 没有默认表达式。目前，如果 [`query_expression()`](../orm/queryguide/columns.html#sqlalchemy.orm.query_expression
    "sqlalchemy.orm.query_expression") 确实有一个默认表达式，则该标签名称仍然用于该默认表达式，并且将继续忽略具有相同名称的附加标签。总体来说，这种情况相当棘手，因此可能需要进一步调整。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-5053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被后移**至：1.4.45
- en: 'References: [#8881](https://www.sqlalchemy.org/trac/ticket/8881)'
  id: totrans-5054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8881](https://www.sqlalchemy.org/trac/ticket/8881)
- en: '**[orm] [bug]**'
  id: totrans-5055
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A warning is emitted if a backref name used in [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") names an attribute on the target class which already
    has a method or attribute assigned to that name, as the backref declaration will
    replace that attribute.
  id: totrans-5056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果在 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 中使用的反向引用名称指定了目标类上已经有方法或属性分配给该名称，则会发出警告，因为反向引用声明将替换该属性。
- en: 'References: [#4629](https://www.sqlalchemy.org/trac/ticket/4629)'
  id: totrans-5057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#4629](https://www.sqlalchemy.org/trac/ticket/4629)
- en: '**[orm] [bug]**'
  id: totrans-5058
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: A series of changes and improvements regarding [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh"). The overall change is that primary key attributes
    for an object are now included in a refresh operation unconditionally when relationship-bound
    attributes are to be refreshed, even if not expired and even if not specified
    in the refresh.
  id: totrans-5059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一系列关于 [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") 的变更和改进。总体变更是：当刷新与关系绑定的属性时，对象的主键属性现在无条件地包含在刷新操作中，即使未过期，即使未在刷新中指定。
- en: Improved [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") so that if autoflush is enabled (as is the default
    for [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")),
    the autoflush takes place at an earlier part of the refresh process so that pending
    primary key changes are applied without errors being raised. Previously, this
    autoflush took place too late in the process and the SELECT statement would not
    use the correct key to locate the row and an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") would be raised.
  id: totrans-5060
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进了 [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh")，这样如果启用了自动刷新（默认情况下为 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")），则自动刷新会在刷新过程的较早阶段发生，以便应用挂起的主键更改而不引发错误。以前，这个自动刷新发生得太晚，而且
    SELECT 语句将不使用正确的键来定位行，将会引发 [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: When the above condition is present, that is, unflushed primary key changes
    are present on the object, but autoflush is not enabled, the refresh() method
    now explicitly disallows the operation to proceed, and an informative [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised asking that the pending primary
    key changes be flushed first. Previously, this use case was simply broken and
    [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") would be raised anyway. This restriction
    is so that it’s safe for the primary key attributes to be refreshed, as is necessary
    for the case of being able to refresh the object with relationship-bound secondary
    eagerloaders also being emitted. This rule applies in all cases to keep API behavior
    consistent regardless of whether or not the PK cols are actually needed in the
    refresh, as it is unusual to be refreshing some attributes on an object while
    keeping other attributes “pending” in any case.
  id: totrans-5061
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当存在上述条件时，即对象上存在未刷新的主键更改，但未启用自动刷新时，refresh() 方法现在明确禁止操作继续进行，并且会引发一个提示性的 [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")，要求首先刷新挂起的主键更改。以前，这种用例仅仅是无法使用，并且无论如何都会引发
    [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。此限制是为了安全地刷新主键属性，因为对于能够使用关系绑定的次要急切加载器刷新对象也是必要的。无论是否实际上需要在刷新中使用
    PK 列，此规则都适用于保持 API 行为一致，因为在任何情况下都不太可能在刷新对象的同时保留其他属性的“挂起”状态。
- en: The [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method has been enhanced such that attributes
    which are [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")-bound and linked to an eager loader, either at
    mapping time or via last-used loader options, will be refreshed in all cases even
    when a list of attributes is passed that does not include any columns on the parent
    row. This builds upon the feature first implemented for non-column attributes
    as part of [#1763](https://www.sqlalchemy.org/trac/ticket/1763) fixed in 1.4 allowing
    eagerly-loaded relationship-bound attributes to participate in the [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") operation. If the refresh operation does not
    indicate any columns on the parent row to be refreshed, the primary key columns
    will nonetheless be included in the refresh operation, which allows the load to
    proceed into the secondary relationship loaders indicated as it does normally.
    Previously an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") error would be raised for this condition
    ([#8703](https://www.sqlalchemy.org/trac/ticket/8703))
  id: totrans-5062
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") 方法已经改进，以至于那些在映射时间或者通过最后使用的加载器选项与 [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 绑定并链接到急切加载器的属性，将在所有情况下刷新，即使传递的属性列表不包括父行上的任何列也是如此。这是在
    [#1763](https://www.sqlalchemy.org/trac/ticket/1763) 中首次实现的功能的基础上构建的，在 1.4 中修复了非列属性的情况，允许急切加载的关系绑定属性参与
    [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    操作。如果刷新操作未指示刷新父行上的任何列，则仍将包括主键列在刷新操作中，这允许加载器按照通常的方式进行到所指示的次要关系加载器。以前，对于此条件，会引发一个
    [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") 错误（[#8703](https://www.sqlalchemy.org/trac/ticket/8703)）。'
- en: Fixed issue where an unnecessary additional SELECT would be emitted in the case
    where [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") were called with a combination of expired attributes,
    as well as an eager loader such as [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") that emits a “secondary” query, if the primary
    key attributes were also in an expired state. As the primary key attributes are
    now included in the refresh automatically, there is no additional load for these
    attributes when a relationship loader goes to select for them ([#8997](https://www.sqlalchemy.org/trac/ticket/8997))
  id: totrans-5063
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了在 [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") 与过期属性的组合被调用时，在存在一个发出“secondary”查询的 eager loader（例如
    [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")）的情况下，会发出不必要的额外 SELECT 语句的问题，如果主键属性也处于过期状态，则不会为这些属性额外加载。由于主键属性现在自动包含在刷新中，当关系加载程序选择它们时，这些属性不会产生额外的负载
    ([#8997](https://www.sqlalchemy.org/trac/ticket/8997))
- en: Fixed regression caused by [#8126](https://www.sqlalchemy.org/trac/ticket/8126)
    released in 2.0.0b1 where the [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method would fail with an `AttributeError`,
    if passed both an expired column name as well as the name of a relationship-bound
    attribute that was linked to a “secondary” eagerloader such as the [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") eager loader ([#8996](https://www.sqlalchemy.org/trac/ticket/8996))
  id: totrans-5064
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复了 2.0.0b1 版本中由 [#8126](https://www.sqlalchemy.org/trac/ticket/8126) 引起的回归问题，该问题是
    [`Session.refresh()`](../orm/session_api.html#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    方法将在传递了一个已过期的列名以及与“secondary” eagerloader 相关联的关系绑定属性的名称时失败，并且该 eagerloader 是例如
    [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") 的“secondary” eagerloader ([#8996](https://www.sqlalchemy.org/trac/ticket/8996))
- en: 'References: [#8703](https://www.sqlalchemy.org/trac/ticket/8703), [#8996](https://www.sqlalchemy.org/trac/ticket/8996),
    [#8997](https://www.sqlalchemy.org/trac/ticket/8997)'
  id: totrans-5065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8703](https://www.sqlalchemy.org/trac/ticket/8703), [#8996](https://www.sqlalchemy.org/trac/ticket/8996),
    [#8997](https://www.sqlalchemy.org/trac/ticket/8997)
- en: '**[orm] [bug]**'
  id: totrans-5066
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved a fix first made in version 1.4 for [#8456](https://www.sqlalchemy.org/trac/ticket/8456)
    which scaled back the usage of internal “polymorphic adapters”, that are used
    to render ORM queries when the [`Mapper.with_polymorphic`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.with_polymorphic
    "sqlalchemy.orm.Mapper") parameter is used. These adapters, which are very complex
    and error prone, are now used only in those cases where an explicit user-supplied
    subquery is used for [`Mapper.with_polymorphic`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.with_polymorphic
    "sqlalchemy.orm.Mapper"), which includes only the use case of concrete inheritance
    mappings that use the [`polymorphic_union()`](../orm/mapping_api.html#sqlalchemy.orm.polymorphic_union
    "sqlalchemy.orm.polymorphic_union") helper, as well as the legacy use case of
    using an aliased subquery for joined inheritance mappings, which is not needed
    in modern use.
  id: totrans-5067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优化了 1.4 版本中首次修复的问题，该问题涉及减少了内部“多态适配器”的使用，该适配器用于在使用 [`Mapper.with_polymorphic`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.with_polymorphic
    "sqlalchemy.orm.Mapper") 参数时呈现 ORM 查询。这些适配器非常复杂且容易出错，现在仅在使用显式用户提供的子查询的情况下使用这些适配器，其中包括仅适用于使用
    [`polymorphic_union()`](../orm/mapping_api.html#sqlalchemy.orm.polymorphic_union
    "sqlalchemy.orm.polymorphic_union") 助手的具体继承映射的用例，以及使用联接继承映射的别名子查询的传统用例，后者在现代用例中不再需要。
- en: For the most common case of joined inheritance mappings that use the built-in
    polymorphic loading scheme, which includes those which make use of the [`Mapper.polymorphic_load`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_load
    "sqlalchemy.orm.Mapper") parameter set to `inline`, polymorphic adapters are now
    no longer used. This has both a positive performance impact on the construction
    of queries as well as a substantial simplification of the internal query rendering
    process.
  id: totrans-5068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于使用内置多态加载方案的联接继承映射的最常见情况，包括将 [`Mapper.polymorphic_load`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_load
    "sqlalchemy.orm.Mapper") 参数设置为 `inline` 的情况，不再使用多态适配器。这既对查询的构造产生了积极的性能影响，也大大简化了内部查询呈现过程。
- en: The specific issue targeted was to allow a [`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property") to refer to joined-inheritance classes within
    a scalar subquery, which now works as intuitively as is feasible.
  id: totrans-5069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 具体的目标问题是允许[`column_property()`](../orm/mapping_api.html#sqlalchemy.orm.column_property
    "sqlalchemy.orm.column_property")引用标量子查询中的连接继承类，这个现在可以尽可能直观地工作了。
- en: 'References: [#8168](https://www.sqlalchemy.org/trac/ticket/8168)'
  id: totrans-5070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8168](https://www.sqlalchemy.org/trac/ticket/8168)
- en: engine
  id: totrans-5071
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [bug]**'
  id: totrans-5072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed a long-standing race condition in the connection pool which could occur
    under eventlet/gevent monkeypatching schemes in conjunction with the use of eventlet/gevent
    `Timeout` conditions, where a connection pool checkout that’s interrupted due
    to the timeout would fail to clean up the failed state, causing the underlying
    connection record and sometimes the database connection itself to “leak”, leaving
    the pool in an invalid state with unreachable entries. This issue was first identified
    and fixed in SQLAlchemy 1.2 for [#4225](https://www.sqlalchemy.org/trac/ticket/4225),
    however the failure modes detected in that fix failed to accommodate for `BaseException`,
    rather than `Exception`, which prevented eventlet/gevent `Timeout` from being
    caught. In addition, a block within initial pool connect has also been identified
    and hardened with a `BaseException` -> “clean failed connect” block to accommodate
    for the same condition in this location. Big thanks to Github user @niklaus for
    their tenacious efforts in identifying and describing this intricate issue.
  id: totrans-5073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接池中长期存在的竞争条件，在与eventlet/gevent的monkeypatching方案一起使用时可能会发生，并且使用eventlet/gevent的`Timeout`条件，其中由于超时而中断的连接池检出将无法清理失败状态，导致底层连接记录和有时数据库连接本身“泄漏”，使连接池处于无效状态，其中的条目无法访问。这个问题首次在SQLAlchemy
    1.2中被发现并修复了[#4225](https://www.sqlalchemy.org/trac/ticket/4225)，然而在那次修复中检测到的失败模式未能适应`BaseException`，而不是`Exception`，这阻止了eventlet/gevent
    `Timeout`的捕获。此外，在初始连接池连接中还确定并加固了一个`BaseException` -> “清理失败连接”块，以适应在此位置中的相同条件。非常感谢Github用户@niklaus在识别和描述这个复杂问题方面的顽强努力。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-5074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也被**反向移植**到了：1.4.46
- en: 'References: [#8974](https://www.sqlalchemy.org/trac/ticket/8974)'
  id: totrans-5075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8974](https://www.sqlalchemy.org/trac/ticket/8974)
- en: '**[engine] [bug]**'
  id: totrans-5076
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue where [`Result.freeze()`](../core/connections.html#sqlalchemy.engine.Result.freeze
    "sqlalchemy.engine.Result.freeze") method would not work for textual SQL using
    either [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    or [`Connection.exec_driver_sql()`](../core/connections.html#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql").
  id: totrans-5077
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Result.freeze()`](../core/connections.html#sqlalchemy.engine.Result.freeze
    "sqlalchemy.engine.Result.freeze")方法在使用[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")或[`Connection.exec_driver_sql()`](../core/connections.html#sqlalchemy.engine.Connection.exec_driver_sql
    "sqlalchemy.engine.Connection.exec_driver_sql")时无法正常工作的问题。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-5078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也被**反向移植**到了：1.4.45
- en: 'References: [#8963](https://www.sqlalchemy.org/trac/ticket/8963)'
  id: totrans-5079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8963](https://www.sqlalchemy.org/trac/ticket/8963)
- en: sql
  id: totrans-5080
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-5081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: An informative re-raise is now thrown in the case where any “literal bindparam”
    render operation fails, indicating the value itself and the datatype in use, to
    assist in debugging when literal params are being rendered in a statement.
  id: totrans-5082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在任何“文字绑定参数”渲染操作失败的情况下，现在会抛出一个信息性的重新引发，指示值本身和使用的数据类型，以帮助调试在语句中渲染文字参数时发生的情况。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-5083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也被**反向移植**到了：1.4.45
- en: 'References: [#8800](https://www.sqlalchemy.org/trac/ticket/8800)'
  id: totrans-5084
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8800](https://www.sqlalchemy.org/trac/ticket/8800)
- en: '**[sql] [bug]**'
  id: totrans-5085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue in lambda SQL feature where the calculated type of a literal value
    would not take into account the type coercion rules of the “compared to type”,
    leading to a lack of typing information for SQL expressions, such as comparisons
    to [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    elements and similar.
  id: totrans-5086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了lambda SQL功能中的问题，其中文字值的计算类型不会考虑到“与类型进行比较的强制转换规则”，导致SQL表达式的缺乏类型信息，例如与[`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON")元素等进行比较。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-5087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个改变也被**反向移植**到了：1.4.46
- en: 'References: [#9029](https://www.sqlalchemy.org/trac/ticket/9029)'
  id: totrans-5088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9029](https://www.sqlalchemy.org/trac/ticket/9029)
- en: '**[sql] [bug]**'
  id: totrans-5089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed a series of issues regarding the position and sometimes the identity of
    rendered bound parameters, such as those used for SQLite, asyncpg, MySQL, Oracle
    and others. Some compiled forms would not maintain the order of parameters correctly,
    such as the PostgreSQL `regexp_replace()` function, the “nesting” feature of the
    [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE "sqlalchemy.sql.expression.CTE")
    construct first introduced in [#4123](https://www.sqlalchemy.org/trac/ticket/4123),
    and selectable tables formed by using the [`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") method with Oracle.
  id: totrans-5090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关于渲染绑定参数位置和有时身份的一系列问题，例如用于SQLite、asyncpg、MySQL、Oracle等的参数。一些编译形式无法正确维护参数的顺序，例如PostgreSQL的`regexp_replace()`函数，首次引入于[#4123](https://www.sqlalchemy.org/trac/ticket/4123)的[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")构造中的“嵌套”功能，以及使用Oracle的[`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")方法形成的可选择表。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-5091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.45
- en: 'References: [#8827](https://www.sqlalchemy.org/trac/ticket/8827)'
  id: totrans-5092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8827](https://www.sqlalchemy.org/trac/ticket/8827)
- en: '**[sql] [bug]**'
  id: totrans-5093
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added test support to ensure that all compiler `visit_xyz()` methods across
    all `Compiler` implementations in SQLAlchemy accept a `**kw` parameter, so that
    all compilers accept additional keyword arguments under all circumstances.
  id: totrans-5094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了测试支持，以确保SQLAlchemy中所有`Compiler`实现中的所有`visit_xyz()`方法都接受`**kw`参数，以便所有编译器在所有情况下都接受额外的关键字参数。
- en: 'References: [#8988](https://www.sqlalchemy.org/trac/ticket/8988)'
  id: totrans-5095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8988](https://www.sqlalchemy.org/trac/ticket/8988)
- en: '**[sql] [bug]**'
  id: totrans-5096
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`SQLCompiler.construct_params()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.construct_params
    "sqlalchemy.sql.compiler.SQLCompiler.construct_params") method, as well as the
    [`SQLCompiler.params`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.params
    "sqlalchemy.sql.compiler.SQLCompiler.params") accessor, will now return the exact
    parameters that correspond to a compiled statement that used the `render_postcompile`
    parameter to compile. Previously, the method returned a parameter structure that
    by itself didn’t correspond to either the original parameters or the expanded
    ones.
  id: totrans-5097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`SQLCompiler.construct_params()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.construct_params
    "sqlalchemy.sql.compiler.SQLCompiler.construct_params")方法以及[`SQLCompiler.params`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.params
    "sqlalchemy.sql.compiler.SQLCompiler.params")访问器现在将返回与使用`render_postcompile`参数编译的编译语句完全对应的参数。以前，该方法返回一个参数结构，它本身既不对应原始参数也不对应扩展参数。'
- en: Passing a new dictionary of parameters to [`SQLCompiler.construct_params()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.construct_params
    "sqlalchemy.sql.compiler.SQLCompiler.construct_params") for a [`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") that was constructed with `render_postcompile`
    is now disallowed; instead, to make a new SQL string and parameter set for an
    alternate set of parameters, a new method [`SQLCompiler.construct_expanded_state()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state
    "sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state") is added which
    will produce a new expanded form for the given parameter set, using the [`ExpandedState`](../core/internals.html#sqlalchemy.sql.compiler.ExpandedState
    "sqlalchemy.sql.compiler.ExpandedState") container which includes a new SQL statement
    and new parameter dictionary, as well as a positional parameter tuple.
  id: totrans-5098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 禁止向使用`render_postcompile`构造的[`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler")传递新的参数字典；相反，为了为另一组参数创建新的SQL字符串和参数集，添加了一个新方法[`SQLCompiler.construct_expanded_state()`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state
    "sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state")，它将为给定的参数集生成一个新的扩展形式，使用包含新SQL语句和新参数字典以及位置参数元组的[`ExpandedState`](../core/internals.html#sqlalchemy.sql.compiler.ExpandedState
    "sqlalchemy.sql.compiler.ExpandedState")容器。
- en: 'References: [#6114](https://www.sqlalchemy.org/trac/ticket/6114)'
  id: totrans-5099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6114](https://www.sqlalchemy.org/trac/ticket/6114)
- en: '**[sql] [bug]**'
  id: totrans-5100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: To accommodate for third party dialects with different character escaping needs
    regarding bound parameters, the system by which SQLAlchemy “escapes” (i.e., replaces
    with another character in its place) special characters in bound parameter names
    has been made extensible for third party dialects, using the `SQLCompiler.bindname_escape_chars`
    dictionary which can be overridden at the class declaration level on any [`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") subclass. As part of this change, also
    added the dot `"."` as a default “escaped” character.
  id: totrans-5101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了适应具有不同字符转义需求的第三方方言，关于绑定参数的特殊字符的 SQLAlchemy “转义”（即，用另一个字符替换它）的系统已被扩展为第三方方言可扩展，使用
    `SQLCompiler.bindname_escape_chars` 字典，该字典可以在任何 [`SQLCompiler`](../core/internals.html#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") 子类的类声明级别上进行覆盖。作为这个更改的一部分，还将点 `"."` 添加为默认的“转义”字符。
- en: 'References: [#8994](https://www.sqlalchemy.org/trac/ticket/8994)'
  id: totrans-5102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8994](https://www.sqlalchemy.org/trac/ticket/8994)
- en: typing
  id: totrans-5103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-5104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: pep-484 typing has been completed for the `sqlalchemy.ext.horizontal_shard`
    extension as well as the `sqlalchemy.orm.events` module. Thanks to Gleb Kisenkov
    for their efforts.
  id: totrans-5105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 `sqlalchemy.ext.horizontal_shard` 扩展以及 `sqlalchemy.orm.events` 模块完成了 pep-484
    typing。感谢 Gleb Kisenkov 的努力。
- en: 'References: [#6810](https://www.sqlalchemy.org/trac/ticket/6810), [#9025](https://www.sqlalchemy.org/trac/ticket/9025)'
  id: totrans-5106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6810](https://www.sqlalchemy.org/trac/ticket/6810)，[#9025](https://www.sqlalchemy.org/trac/ticket/9025)
- en: asyncio
  id: totrans-5107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: asyncio
- en: '**[asyncio] [bug]**'
  id: totrans-5108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[asyncio] [bug]**'
- en: Removed non-functional `merge()` method from [`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult"). This method has never worked and was included
    with [`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") in error.
  id: totrans-5109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 [`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") 中删除了非功能性的 `merge()` 方法。该方法从未起作用，而且错误地包含在
    [`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") 中。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-5110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**反向移植**到：1.4.45
- en: 'References: [#8952](https://www.sqlalchemy.org/trac/ticket/8952)'
  id: totrans-5111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8952](https://www.sqlalchemy.org/trac/ticket/8952)
- en: postgresql
  id: totrans-5112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [bug]**'
  id: totrans-5113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Fixed bug where the PostgreSQL [`Insert.on_conflict_do_update.constraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") parameter would
    accept an [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    object, however would not expand this index out into its individual index expressions,
    instead rendering its name in an ON CONFLICT ON CONSTRAINT clause, which is not
    accepted by PostgreSQL; the “constraint name” form only accepts unique or exclude
    constraint names. The parameter continues to accept the index but now expands
    it out into its component expressions for the render.
  id: totrans-5114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个 bug，即 PostgreSQL [`Insert.on_conflict_do_update.constraint`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update.params.constraint
    "sqlalchemy.dialects.postgresql.Insert.on_conflict_do_update") 参数将接受 [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 对象，但不会将此索引展开为其各个索引表达式，而是在 ON CONFLICT ON CONSTRAINT
    子句中呈现其名称，而 PostgreSQL 不接受这种形式的“约束名称”；该参数仅接受唯一或排除约束名称。参数继续接受索引，但现在将其展开为其组成表达式以进行呈现。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-5115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**反向移植**到：1.4.46
- en: 'References: [#9023](https://www.sqlalchemy.org/trac/ticket/9023)'
  id: totrans-5116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9023](https://www.sqlalchemy.org/trac/ticket/9023)
- en: '**[postgresql] [bug]**'
  id: totrans-5117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Made an adjustment to how the PostgreSQL dialect considers column types when
    it reflects columns from a table, to accommodate for alternative backends which
    may return NULL from the PG `format_type()` function.
  id: totrans-5118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 PostgreSQL 方言在从表中反射列时如何考虑列类型进行了调整，以适应可能从 PG `format_type()` 函数返回 NULL 的替代后端。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-5119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还被**反向移植**到：1.4.45
- en: 'References: [#8748](https://www.sqlalchemy.org/trac/ticket/8748)'
  id: totrans-5120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8748](https://www.sqlalchemy.org/trac/ticket/8748)
- en: '**[postgresql] [bug]**'
  id: totrans-5121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added support for explicit use of PG full text functions with asyncpg and psycopg
    (SQLAlchemy 2.0 only), with regards to the `REGCONFIG` type cast for the first
    argument, which previously would be incorrectly cast to a VARCHAR, causing failures
    on these dialects that rely upon explicit type casts. This includes support for
    [`to_tsvector`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.to_tsvector
    "sqlalchemy.dialects.postgresql.to_tsvector"), [`to_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.to_tsquery
    "sqlalchemy.dialects.postgresql.to_tsquery"), [`plainto_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.plainto_tsquery
    "sqlalchemy.dialects.postgresql.plainto_tsquery"), [`phraseto_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.phraseto_tsquery
    "sqlalchemy.dialects.postgresql.phraseto_tsquery"), [`websearch_to_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery"), [`ts_headline`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ts_headline
    "sqlalchemy.dialects.postgresql.ts_headline"), each of which will determine based
    on number of arguments passed if the first string argument should be interpreted
    as a PostgreSQL “REGCONFIG” value; if so, the argument is typed using a newly
    added type object [`REGCONFIG`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG") which is then explicitly cast in the
    SQL expression.
  id: totrans-5122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 asyncpg 和 psycopg（仅适用于 SQLAlchemy 2.0）使用 PG 全文函数的显式支持，关于第一个参数的 `REGCONFIG`
    类型转换，之前会错误地将其转换为 VARCHAR，在这些方言上依赖显式类型转换会导致失败。这包括对 [`to_tsvector`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.to_tsvector
    "sqlalchemy.dialects.postgresql.to_tsvector")、[`to_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.to_tsquery
    "sqlalchemy.dialects.postgresql.to_tsquery")、[`plainto_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.plainto_tsquery
    "sqlalchemy.dialects.postgresql.plainto_tsquery")、[`phraseto_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.phraseto_tsquery
    "sqlalchemy.dialects.postgresql.phraseto_tsquery")、[`websearch_to_tsquery`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.websearch_to_tsquery
    "sqlalchemy.dialects.postgresql.websearch_to_tsquery")、[`ts_headline`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ts_headline
    "sqlalchemy.dialects.postgresql.ts_headline") 的支持，其中每个函数都会根据传递的参数数量确定第一个字符串参数是否应该被解释为
    PostgreSQL 的 “REGCONFIG” 值；如果是，则使用新添加的类型对象 [`REGCONFIG`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.REGCONFIG
    "sqlalchemy.dialects.postgresql.REGCONFIG") 将参数显式转换为 SQL 表达式。
- en: 'References: [#8977](https://www.sqlalchemy.org/trac/ticket/8977)'
  id: totrans-5123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8977](https://www.sqlalchemy.org/trac/ticket/8977)
- en: '**[postgresql] [bug]**'
  id: totrans-5124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: Fixed regression where newly revised PostgreSQL range types such as [`INT4RANGE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INT4RANGE
    "sqlalchemy.dialects.postgresql.INT4RANGE") could not be set up as the impl of
    a [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator "sqlalchemy.types.TypeDecorator")
    custom type, instead raising a `TypeError`.
  id: totrans-5125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新修订的 PostgreSQL 范围类型（例如 [`INT4RANGE`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.INT4RANGE
    "sqlalchemy.dialects.postgresql.INT4RANGE")）不能被设置为 [`TypeDecorator`](../core/custom_types.html#sqlalchemy.types.TypeDecorator
    "sqlalchemy.types.TypeDecorator") 自定义类型的实现时引发 `TypeError` 的回归。
- en: 'References: [#9020](https://www.sqlalchemy.org/trac/ticket/9020)'
  id: totrans-5126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9020](https://www.sqlalchemy.org/trac/ticket/9020)
- en: '**[postgresql] [bug]**'
  id: totrans-5127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: The `Range.__eq___()` will now return `NotImplemented` when comparing with an
    instance of a different class, instead of raising an `AttributeError` exception.
  id: totrans-5128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Range.__eq___()` 现在会在与不同类的实例比较时返回 `NotImplemented`，而不是引发 `AttributeError`
    异常。'
- en: 'References: [#8984](https://www.sqlalchemy.org/trac/ticket/8984)'
  id: totrans-5129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8984](https://www.sqlalchemy.org/trac/ticket/8984)
- en: sqlite
  id: totrans-5130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-5131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [用例]**'
- en: Added support for the SQLite backend to reflect the “DEFERRABLE” and “INITIALLY”
    keywords which may be present on a foreign key construct. Pull request courtesy
    Michael Gorven.
  id: totrans-5132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 SQLite 后端反射“DEFERRABLE”和“INITIALLY”关键字的支持，这些关键字可能出现在外键构造中。贡献的拉取请求来自 Michael
    Gorven。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-5133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也被 **反向移植** 到：1.4.45
- en: 'References: [#8903](https://www.sqlalchemy.org/trac/ticket/8903)'
  id: totrans-5134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8903](https://www.sqlalchemy.org/trac/ticket/8903)
- en: '**[sqlite] [usecase]**'
  id: totrans-5135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [用例]**'
- en: Added support for reflection of expression-oriented WHERE criteria included
    in indexes on the SQLite dialect, in a manner similar to that of the PostgreSQL
    dialect. Pull request courtesy Tobias Pfeiffer.
  id: totrans-5136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 SQLite 方言中包含在索引中的表达式导向 WHERE 条件的反射支持，类似于 PostgreSQL 方言的方式。贡献的拉取请求来自 Tobias
    Pfeiffer。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-5137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个变更也被 **反向移植** 到：1.4.45
- en: 'References: [#8804](https://www.sqlalchemy.org/trac/ticket/8804)'
  id: totrans-5138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8804](https://www.sqlalchemy.org/trac/ticket/8804)
- en: oracle
  id: totrans-5139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-5140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Fixed issue in Oracle compiler where the syntax for [`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued") was incorrect, rendering
    the name `COLUMN_VALUE` without qualifying the source table correctly.
  id: totrans-5141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle编译器中[`FunctionElement.column_valued()`](../core/functions.html#sqlalchemy.sql.functions.FunctionElement.column_valued
    "sqlalchemy.sql.functions.FunctionElement.column_valued")的语法错误问题，导致名称`COLUMN_VALUE`未正确限定源表。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-5142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**被迁移**到：1.4.45
- en: 'References: [#8945](https://www.sqlalchemy.org/trac/ticket/8945)'
  id: totrans-5143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8945](https://www.sqlalchemy.org/trac/ticket/8945)
- en: tests
  id: totrans-5144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-5145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误]**'
- en: Fixed issue in tox.ini file where changes in the tox 4.0 series to the format
    of “passenv” caused tox to not function correctly, in particular raising an error
    as of tox 4.0.6.
  id: totrans-5146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了tox.ini文件中的问题，tox 4.0系列对“passenv”的格式进行了更改，导致tox无法正确运行，特别是在tox 4.0.6中引发错误。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-5147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**被迁移**到：1.4.46
- en: '**[tests] [bug]**'
  id: totrans-5148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误]**'
- en: Added new exclusion rule for third party dialects called `unusual_column_name_characters`,
    which can be “closed” for third party dialects that don’t support column names
    with unusual characters such as dots, slashes, or percent signs in them, even
    if the name is properly quoted.
  id: totrans-5149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了针对第三方方言的新排除规则`unusual_column_name_characters`，可以将其“关闭”以不支持具有不寻常字符（如点、斜杠或百分号）的列名的第三方方言，即使名称已经正确引用。
- en: 'This change is also **backported** to: 1.4.46'
  id: totrans-5150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改还**被迁移**到：1.4.46
- en: 'References: [#9002](https://www.sqlalchemy.org/trac/ticket/9002)'
  id: totrans-5151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#9002](https://www.sqlalchemy.org/trac/ticket/9002)
- en: 2.0.0b4
  id: totrans-5152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.0b4
- en: 'Released: December 5, 2022'
  id: totrans-5153
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2022年12月5日
- en: orm
  id: totrans-5154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-5155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added a new parameter [`mapped_column.use_existing_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.use_existing_column
    "sqlalchemy.orm.mapped_column") to accommodate the use case of a single-table
    inheritance mapping that uses the pattern of more than one subclass indicating
    the same column to take place on the superclass. This pattern was previously possible
    by using [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") in conjunction with locating the existing column
    in the `.__table__` of the superclass, however is now updated to work with [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") as well as with pep-484 typing, in a simple and
    succinct way.
  id: totrans-5156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的参数[`mapped_column.use_existing_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.use_existing_column
    "sqlalchemy.orm.mapped_column")，以适应单表继承映射的用例，其中超类上的多个子类指示使用相同的列。之前可以使用[`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")与在超类的`.__table__`中查找现有列来实现此模式，但现在也已更新为使用[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")以及pep-484类型，以一种简单和简洁的方式。
- en: See also
  id: totrans-5157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Resolving Column Conflicts with use_existing_column](../orm/inheritance.html#orm-inheritance-column-conflicts)'
  id: totrans-5158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用`use_existing_column`解决列冲突](../orm/inheritance.html#orm-inheritance-column-conflicts)'
- en: 'References: [#8822](https://www.sqlalchemy.org/trac/ticket/8822)'
  id: totrans-5159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8822](https://www.sqlalchemy.org/trac/ticket/8822)
- en: '**[orm] [usecase]**'
  id: totrans-5160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Added support custom user-defined types which extend the Python `enum.Enum`
    base class to be resolved automatically to SQLAlchemy [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") SQL types, when using the Annotated Declarative Table
    feature. The feature is made possible through new lookup features added to the
    ORM type map feature, and includes support for changing the arguments of the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") that’s generated by default as well as setting up specific
    `enum.Enum` types within the map with specific arguments.
  id: totrans-5161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对自定义用户定义类型的支持，这些类型扩展了Python `enum.Enum`基类，当使用注释声明表特性时，可以自动解析为SQLAlchemy [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") SQL类型。该功能通过向ORM类型映射功能添加新的查找功能实现，并包括更改默认生成的[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")的参数以及在映射中设置具有特定参数的特定`enum.Enum`类型的支持。
- en: See also
  id: totrans-5162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Python Enum or pep-586 Literal types in the type map](../orm/declarative_tables.html#orm-declarative-mapped-column-enums)'
  id: totrans-5163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在类型映射中使用Python枚举或pep-586字面类型](../orm/declarative_tables.html#orm-declarative-mapped-column-enums)'
- en: 'References: [#8859](https://www.sqlalchemy.org/trac/ticket/8859)'
  id: totrans-5164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8859](https://www.sqlalchemy.org/trac/ticket/8859)
- en: '**[orm] [usecase]**'
  id: totrans-5165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Added [`mapped_column.compare`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.compare
    "sqlalchemy.orm.mapped_column") parameter to relevant ORM attribute constructs
    including [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column"), [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") etc. to provide for the Python dataclasses `compare`
    parameter on `field()`, when using the [Declarative Dataclass Mapping](../orm/dataclasses.html#orm-declarative-native-dataclasses)
    feature. Pull request courtesy Simon Schiele.
  id: totrans-5166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为相关的 ORM 属性构造（包括 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")、[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 等）添加了 [`mapped_column.compare`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.compare
    "sqlalchemy.orm.mapped_column") 参数，以便在使用[声明式数据类映射](../orm/dataclasses.html#orm-declarative-native-dataclasses)功能时，为
    Python 数据类的 `field()` 提供 `compare` 参数。感谢 Simon Schiele 提供的拉取请求。
- en: 'References: [#8905](https://www.sqlalchemy.org/trac/ticket/8905)'
  id: totrans-5167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8905](https://www.sqlalchemy.org/trac/ticket/8905)
- en: '**[orm] [performance] [bug]**'
  id: totrans-5168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [性能] [错误]**'
- en: Additional performance enhancements within ORM-enabled SQL statements, specifically
    targeting callcounts within the construction of ORM statements, using combinations
    of [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    with [`union()`](../core/selectable.html#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union")
    and similar “compound” constructs, in addition to direct performance improvements
    to the `corresponding_column()` internal method that is used heavily by the ORM
    by constructs like [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") and similar.
  id: totrans-5169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在启用 ORM 的 SQL 语句中进一步增强了性能，特别是针对 ORM 语句构造中的调用计数，使用 [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 与 [`union()`](../core/selectable.html#sqlalchemy.sql.expression.union
    "sqlalchemy.sql.expression.union") 等“复合”构造的组合，以及直接改进了 ORM 通过 [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 等构造频繁使用的 `corresponding_column()` 内部方法的性能。
- en: 'References: [#8796](https://www.sqlalchemy.org/trac/ticket/8796)'
  id: totrans-5170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8796](https://www.sqlalchemy.org/trac/ticket/8796)
- en: '**[orm] [bug]**'
  id: totrans-5171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed issue where use of an unknown datatype within a [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") annotation for a column-based attribute would silently
    fail to map the attribute, rather than reporting an exception; an informative
    exception message is now raised.
  id: totrans-5172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在列属性的注解[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")中使用未知数据类型会静默失败而不是报告异常的问题；现在会引发一个信息丰富的异常消息。
- en: 'References: [#8888](https://www.sqlalchemy.org/trac/ticket/8888)'
  id: totrans-5173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8888](https://www.sqlalchemy.org/trac/ticket/8888)
- en: '**[orm] [bug]**'
  id: totrans-5174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed a suite of issues involving [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") use with dictionary types, such as `Mapped[Dict[str,
    str] | None]`, would not be correctly interpreted in Declarative ORM mappings.
    Support to correctly “de-optionalize” this type including for lookup in `type_annotation_map`
    has been fixed.
  id: totrans-5175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与字典类型一起使用 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    的一系列问题，例如 `Mapped[Dict[str, str] | None]` 在声明式 ORM 映射中无法正确解释的问题。修复了正确“去可选化”此类型的支持，包括在
    `type_annotation_map` 中查找时修复。
- en: 'References: [#8777](https://www.sqlalchemy.org/trac/ticket/8777)'
  id: totrans-5176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8777](https://www.sqlalchemy.org/trac/ticket/8777)
- en: '**[orm] [bug]**'
  id: totrans-5177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: Fixed bug in [Declarative Dataclass Mapping](../orm/dataclasses.html#orm-declarative-native-dataclasses)
    feature where using plain dataclass fields with the `__allow_unmapped__` directive
    in a mapping would not create a dataclass with the correct class-level state for
    those fields, copying the raw `Field` object to the class inappropriately after
    dataclasses itself had replaced the `Field` object with the class-level default
    value.
  id: totrans-5178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[声明式数据类映射](../orm/dataclasses.html#orm-declarative-native-dataclasses)功能中的错误，该功能在映射中使用带有
    `__allow_unmapped__` 指令的普通数据类字段将不会为这些字段创建具有正确类级状态的数据类，不当地在数据类本身将 `Field` 对象替换为类级默认值后，将原始
    `Field` 对象复制到类中。
- en: 'References: [#8880](https://www.sqlalchemy.org/trac/ticket/8880)'
  id: totrans-5179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8880](https://www.sqlalchemy.org/trac/ticket/8880)
- en: '**[orm] [bug] [regression]**'
  id: totrans-5180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误] [回归]**'
- en: Fixed regression where flushing a mapped class that’s mapped against a subquery,
    such as a direct mapping or some forms of concrete table inheritance, would fail
    if the [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") parameter were used.
  id: totrans-5181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个回归问题，即刷新映射到子查询的映射类（例如直接映射或某些形式的具体表继承），如果使用了[`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper")参数，则会失败。
- en: 'References: [#8812](https://www.sqlalchemy.org/trac/ticket/8812)'
  id: totrans-5182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8812](https://www.sqlalchemy.org/trac/ticket/8812)
- en: '**[orm] [bug]**'
  id: totrans-5183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in 2.0.0b3 caused by [#8759](https://www.sqlalchemy.org/trac/ticket/8759)
    where indicating the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    name using a qualified name such as `sqlalchemy.orm.Mapped` would fail to be recognized
    by Declarative as indicating the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") construct.
  id: totrans-5184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了2.0.0b3中由[#8759](https://www.sqlalchemy.org/trac/ticket/8759)引起的回归问题，即使用限定名称（如`sqlalchemy.orm.Mapped`）指示[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")名称时，声明性无法识别为指示[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")构造。
- en: 'References: [#8853](https://www.sqlalchemy.org/trac/ticket/8853)'
  id: totrans-5185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8853](https://www.sqlalchemy.org/trac/ticket/8853)
- en: orm extensions
  id: totrans-5186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm扩展
- en: '**[usecase] [orm extensions]**'
  id: totrans-5187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[用例] [orm扩展]**'
- en: Added support for the [`association_proxy()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") extension function to take
    part within Python `dataclasses` configuration, when using the native dataclasses
    feature described at [Declarative Dataclass Mapping](../orm/dataclasses.html#orm-declarative-native-dataclasses).
    Included are attribute-level arguments including [`association_proxy.init`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.init
    "sqlalchemy.ext.associationproxy.association_proxy") and [`association_proxy.default_factory`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.default_factory
    "sqlalchemy.ext.associationproxy.association_proxy").
  id: totrans-5188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持[`association_proxy()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy")扩展函数，以在使用原生数据类功能描述的Python
    `dataclasses`配置中参与，详见[声明性数据类映射](../orm/dataclasses.html#orm-declarative-native-dataclasses)。包括属性级参数，如[`association_proxy.init`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.init
    "sqlalchemy.ext.associationproxy.association_proxy")和[`association_proxy.default_factory`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.default_factory
    "sqlalchemy.ext.associationproxy.association_proxy")。
- en: Documentation for association proxy has also been updated to use “Annotated
    Declarative Table” forms within examples, including type annotations used for
    `AssocationProxy` itself.
  id: totrans-5189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 协会代理文档也已更新，示例中使用了“带注解的声明性表”形式，包括用于`AssocationProxy`本身的类型注解。
- en: 'References: [#8878](https://www.sqlalchemy.org/trac/ticket/8878)'
  id: totrans-5190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8878](https://www.sqlalchemy.org/trac/ticket/8878)
- en: sql
  id: totrans-5191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-5192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Added [`ScalarValues`](../core/selectable.html#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues") that can be used as a column element
    allowing using [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") inside `IN` clauses or in conjunction with
    `ANY` or `ALL` collection aggregates. This new class is generated using the method
    [`Values.scalar_values()`](../core/selectable.html#sqlalchemy.sql.expression.Values.scalar_values
    "sqlalchemy.sql.expression.Values.scalar_values"). The [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") instance is now coerced to a [`ScalarValues`](../core/selectable.html#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues") when used in a `IN` or `NOT IN` operation.
  id: totrans-5193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了[`ScalarValues`](../core/selectable.html#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues")，可用作列元素，允许在`IN`子句中使用[`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values")，或与`ANY`或`ALL`集合聚合一起使用。当在`IN`或`NOT IN`操作中使用时，现在将[`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values")实例强制转换为[`ScalarValues`](../core/selectable.html#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues")。
- en: 'References: [#6289](https://www.sqlalchemy.org/trac/ticket/6289)'
  id: totrans-5194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6289](https://www.sqlalchemy.org/trac/ticket/6289)
- en: '**[sql] [bug]**'
  id: totrans-5195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed critical memory issue identified in cache key generation, where for very
    large and complex ORM statements that make use of lots of ORM aliases with subqueries,
    cache key generation could produce excessively large keys that were orders of
    magnitude bigger than the statement itself. Much thanks to Rollo Konig Brock for
    their very patient, long term help in finally identifying this issue.
  id: totrans-5196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在缓存键生成中发现的关键内存问题，对于使用大量 ORM 别名和子查询的非常大型和复杂的 ORM 语句，缓存键生成可能会产生比语句本身大得多的键。非常感谢
    Rollo Konig Brock 对于最终识别此问题的非常耐心和长期的帮助。
- en: 'This change is also **backported** to: 1.4.44'
  id: totrans-5197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被回溯**至：1.4.44
- en: 'References: [#8790](https://www.sqlalchemy.org/trac/ticket/8790)'
  id: totrans-5198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8790](https://www.sqlalchemy.org/trac/ticket/8790)
- en: '**[sql] [bug]**'
  id: totrans-5199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: The approach to the `numeric` pep-249 paramstyle has been rewritten, and is
    now fully supported, including by features such as “expanding IN” and “insertmanyvalues”.
    Parameter names may also be repeated in the source SQL construct which will be
    correctly represented within the numeric format using a single parameter. Introduced
    an additional numeric paramstyle called `numeric_dollar`, which is specifically
    what’s used by the asyncpg dialect; the paramstyle is equivalent to `numeric`
    except numeric indicators are indicated by a dollar-sign rather than a colon.
    The asyncpg dialect now uses `numeric_dollar` paramstyle directly, rather than
    compiling to `format` style first.
  id: totrans-5200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 `numeric` pep-249 参数风格的处理方式已经重写，并且现在得到了完全支持，包括“扩展 IN”和“insertmanyvalues”等特性。源
    SQL 构造中的参数名称也可以重复，在数字格式中使用单个参数会被正确表示。引入了一个名为 `numeric_dollar` 的额外数字参数风格，它是 asyncpg
    方言专门使用的；该参数风格等效于 `numeric`，但数字指示符使用美元符号而不是冒号。asyncpg 方言现在直接使用 `numeric_dollar`
    参数风格，而不是首先编译为 `format` 风格。
- en: The `numeric` and `numeric_dollar` paramstyles assume that the target backend
    is capable of receiving the numeric parameters in any order, and will match the
    given parameter values to the statement based on matching their position (1-based)
    to the numeric indicator. This is the normal behavior of “numeric” paramstyles,
    although it was observed that the SQLite DBAPI implements a not-used “numeric”
    style that does not honor parameter ordering.
  id: totrans-5201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`numeric` 和 `numeric_dollar` 参数风格假定目标后端能够按任意顺序接收数字参数，并且将给定的参数值与语句进行匹配，基于匹配它们的位置（从
    1 开始）与数字指示符。这是“numeric”参数风格的正常行为，尽管观察到 SQLite DBAPI 实现了一个未使用的“numeric”风格，它不遵守参数顺序。'
- en: 'References: [#8849](https://www.sqlalchemy.org/trac/ticket/8849)'
  id: totrans-5202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8849](https://www.sqlalchemy.org/trac/ticket/8849)
- en: '**[sql] [bug]**'
  id: totrans-5203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[SQL] [错误]**'
- en: Adjusted the rendering of `RETURNING`, in particular when using [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"), such that it now renders columns using the
    same logic as that of the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct to generate labels, which will include
    disambiguating labels, as well as that a SQL function surrounding a named column
    will be labeled using the column name itself. This establishes better cross-compatibility
    when selecting rows from either [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") constructs or from DML statements that use
    [`UpdateBase.returning()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning"). A narrower scale change was
    also made for the 1.4 series that adjusted the function label issue only.
  id: totrans-5204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 `RETURNING` 的渲染，特别是在使用 [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") 时，现在它使用与 [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造相同的逻辑来生成标签，这将包括消除歧义的标签，以及使用命名列周围的 SQL 函数将使用列名本身作为标签。这样做可以在从
    [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    构造或使用 [`UpdateBase.returning()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") 的 DML 语句中选择行时建立更好的交叉兼容性。1.4
    系列还进行了较窄范围的更改，仅调整了函数标签问题。
- en: 'References: [#8770](https://www.sqlalchemy.org/trac/ticket/8770)'
  id: totrans-5205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8770](https://www.sqlalchemy.org/trac/ticket/8770)
- en: schema
  id: totrans-5206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [bug]**'
  id: totrans-5207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: Stricter rules are in place for appending of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects, both moving some previous deprecation warnings
    to exceptions, and preventing some previous scenarios that would cause duplicate
    columns to appear in tables, when [`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") were set to `True`, for both programmatic [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construction as well as during reflection operations.
  id: totrans-5208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，对于将[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象附加到[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象，制定了更严格的规则，包括将一些先前的弃用警告移至异常，并防止一些以前的情况导致重复的列出现在表中，当[`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table")设置为`True`时，无论是在编程时构建[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")还是在反射操作期间。
- en: See [Stricter rules for replacement of Columns in Table objects with same-names,
    keys](whatsnew_20.html#change-8925) for a rundown of these changes.
  id: totrans-5209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关这些更改的详细信息，请参见[对具有相同名称、键的表对象列的替换规则更严格](whatsnew_20.html#change-8925)。
- en: See also
  id: totrans-5210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Stricter rules for replacement of Columns in Table objects with same-names,
    keys](whatsnew_20.html#change-8925)'
  id: totrans-5211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对具有相同名称、键的表对象列的替换规则更严格](whatsnew_20.html#change-8925)'
- en: 'References: [#8925](https://www.sqlalchemy.org/trac/ticket/8925)'
  id: totrans-5212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8925](https://www.sqlalchemy.org/trac/ticket/8925)
- en: typing
  id: totrans-5213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入
- en: '**[typing] [usecase]**'
  id: totrans-5214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [用例]**'
- en: Added a new type [`SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression") which may be indicated in user
    code to represent any SQL column oriented expression, including both those based
    on [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") as well as on ORM [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute"). This type is a real class, not an alias,
    so can also be used as the foundation for other objects. An additional ORM-specific
    subclass [`SQLORMExpression`](../orm/internals.html#sqlalchemy.orm.SQLORMExpression
    "sqlalchemy.orm.SQLORMExpression") is also included.
  id: totrans-5215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新类型[`SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression")，用户可以在用户代码中指定该类型以表示任何SQL列导向表达式，包括基于[`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")和基于ORM [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")的表达式。此类型是一个真实的类，而不是别名，因此也可以用作其他对象的基础。还包括一个额外的ORM特定子类[`SQLORMExpression`](../orm/internals.html#sqlalchemy.orm.SQLORMExpression
    "sqlalchemy.orm.SQLORMExpression")。
- en: 'References: [#8847](https://www.sqlalchemy.org/trac/ticket/8847)'
  id: totrans-5216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8847](https://www.sqlalchemy.org/trac/ticket/8847)
- en: '**[typing] [bug]**'
  id: totrans-5217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Adjusted internal use of the Python `enum.IntFlag` class which changed its behavioral
    contract in Python 3.11\. This was not causing runtime failures however caused
    typing runs to fail under Python 3.11.
  id: totrans-5218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了Python `enum.IntFlag`类的内部使用，该类在Python 3.11中更改了其行为合同。这并没有导致运行时失败，但在Python
    3.11下导致了类型运行失败。
- en: 'References: [#8783](https://www.sqlalchemy.org/trac/ticket/8783)'
  id: totrans-5219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8783](https://www.sqlalchemy.org/trac/ticket/8783)
- en: '**[typing] [bug]**'
  id: totrans-5220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: The `sqlalchemy.ext.mutable` extension and `sqlalchemy.ext.automap` extensions
    are now fully pep-484 typed. Huge thanks to Gleb Kisenkov for their efforts on
    this.
  id: totrans-5221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.mutable`扩展和`sqlalchemy.ext.automap`扩展现在完全符合pep-484类型。非常感谢Gleb
    Kisenkov在此方面的努力。'
- en: 'References: [#6810](https://www.sqlalchemy.org/trac/ticket/6810), [#8667](https://www.sqlalchemy.org/trac/ticket/8667)'
  id: totrans-5222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6810](https://www.sqlalchemy.org/trac/ticket/6810), [#8667](https://www.sqlalchemy.org/trac/ticket/8667)
- en: '**[typing] [bug]**'
  id: totrans-5223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Corrected typing support for the [`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship") argument which may also accept a callable (lambda)
    that returns a [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-5224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了对[`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship")参数的类型支持，该参数也可以接受返回[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的可调用函数（lambda）。
- en: '**[typing] [bug]**'
  id: totrans-5225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[输入] [错误]**'
- en: Improved the typing for [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") and [`async_sessionmaker`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker"), so that the default type of their
    return value will be [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") or [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession"), without the need to type this explicitly.
    Previously, Mypy would not automaticaly infer these return types from its generic
    base.
  id: totrans-5226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")和[`async_sessionmaker`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.async_sessionmaker")的输入进行了改进，使得它们的返回值的默认类型将是[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")或[`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")，无需显式地进行类型声明。之前，Mypy无法从其通用基类中自动推断这些返回类型。
- en: As part of this change, arguments for [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession"), [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") and [`async_sessionmaker`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") beyond the initial “bind” argument
    have been made keyword-only, which includes parameters that have always been documented
    as keyword arguments, such as [`Session.autoflush`](../orm/session_api.html#sqlalchemy.orm.Session.params.autoflush
    "sqlalchemy.orm.Session"), [`Session.class_`](../orm/session_api.html#sqlalchemy.orm.Session.params.class_
    "sqlalchemy.orm.Session"), etc.
  id: totrans-5227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变更的一部分，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")，[`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")，[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")和[`async_sessionmaker`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker")的参数除了初始的“bind”参数外，都已经变成了仅限关键字参数，其中包括一直被记录为关键字参数的参数，如[`Session.autoflush`](../orm/session_api.html#sqlalchemy.orm.Session.params.autoflush
    "sqlalchemy.orm.Session")，[`Session.class_`](../orm/session_api.html#sqlalchemy.orm.Session.params.class_
    "sqlalchemy.orm.Session")等。
- en: Pull request courtesy Sam Bull.
  id: totrans-5228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 感谢Sam Bull的拉取请求。
- en: 'References: [#8842](https://www.sqlalchemy.org/trac/ticket/8842)'
  id: totrans-5229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8842](https://www.sqlalchemy.org/trac/ticket/8842)
- en: '**[typing] [bug]**'
  id: totrans-5230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed issue where passing a callbale function returning an iterable of column
    elements to [`relationship.order_by`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.order_by
    "sqlalchemy.orm.relationship") was flagged as an error in type checkers.
  id: totrans-5231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将返回列元素可迭代的可调用函数传递给[`relationship.order_by`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.order_by
    "sqlalchemy.orm.relationship")时，在类型检查器中被标记为错误的问题。
- en: 'References: [#8776](https://www.sqlalchemy.org/trac/ticket/8776)'
  id: totrans-5232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8776](https://www.sqlalchemy.org/trac/ticket/8776)
- en: postgresql
  id: totrans-5233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-5234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Complementing [#8690](https://www.sqlalchemy.org/trac/ticket/8690), new comparison
    methods such as [`Range.adjacent_to()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.adjacent_to
    "sqlalchemy.dialects.postgresql.Range.adjacent_to"), [`Range.difference()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.difference
    "sqlalchemy.dialects.postgresql.Range.difference"), [`Range.union()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.union
    "sqlalchemy.dialects.postgresql.Range.union"), etc., were added to the PG-specific
    range objects, bringing them in par with the standard operators implemented by
    the underlying [`AbstractRange.comparator_factory`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory").
  id: totrans-5235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 补充[#8690](https://www.sqlalchemy.org/trac/ticket/8690)，新增了一些比较方法，如[`Range.adjacent_to()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.adjacent_to
    "sqlalchemy.dialects.postgresql.Range.adjacent_to")，[`Range.difference()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.difference
    "sqlalchemy.dialects.postgresql.Range.difference")，[`Range.union()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.union
    "sqlalchemy.dialects.postgresql.Range.union")等，添加到了PG特定的范围对象中，使其与底层的[`AbstractRange.comparator_factory`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory")实现的标准运算符相匹配。
- en: 'In addition, the `__bool__()` method of the class has been corrected to be
    consistent with the common Python containers behavior as well as how other popular
    PostgreSQL drivers do: it now tells whether the range instance is *not* empty,
    rather than the other way around.'
  id: totrans-5236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另外，该类的`__bool__()`方法已校正，以与常见的Python容器行为以及其他流行的PostgreSQL驱动程序一致：现在它告诉范围实例是否*不*为空，而不是相反。
- en: Pull request courtesy Lele Gaifax.
  id: totrans-5237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 感谢Lele Gaifax的拉取请求。
- en: 'References: [#8765](https://www.sqlalchemy.org/trac/ticket/8765)'
  id: totrans-5238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8765](https://www.sqlalchemy.org/trac/ticket/8765)
- en: '**[postgresql] [change] [asyncpg]**'
  id: totrans-5239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [change] [asyncpg]**'
- en: Changed the paramstyle used by asyncpg from `format` to `numeric_dollar`. This
    has two main benefits since it does not require additional processing of the statement
    and allows for duplicate parameters to be present in the statements.
  id: totrans-5240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将asyncpg使用的paramstyle从`format`更改为`numeric_dollar`。这有两个主要好处，因为它不需要对语句进行额外处理，并且允许语句中存在重复的参数。
- en: 'References: [#8926](https://www.sqlalchemy.org/trac/ticket/8926)'
  id: totrans-5241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8926](https://www.sqlalchemy.org/trac/ticket/8926)
- en: '**[postgresql] [bug] [mssql]**'
  id: totrans-5242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [mssql]**'
- en: For the PostgreSQL and SQL Server dialects only, adjusted the compiler so that
    when rendering column expressions in the RETURNING clause, the “non anon” label
    that’s used in SELECT statements is suggested for SQL expression elements that
    generate a label; the primary example is a SQL function that may be emitting as
    part of the column’s type, where the label name should match the column’s name
    by default. This restores a not-well defined behavior that had changed in version
    1.4.21 due to [#6718](https://www.sqlalchemy.org/trac/ticket/6718), [#6710](https://www.sqlalchemy.org/trac/ticket/6710).
    The Oracle dialect has a different RETURNING implementation and was not affected
    by this issue. Version 2.0 features an across the board change for its widely
    expanded support of RETURNING on other backends.
  id: totrans-5243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅适用于PostgreSQL和SQL Server方言，调整了编译器，以便在渲染RETURNING子句中的列表达式时，对于生成标签的SQL表达式元素建议使用在SELECT语句中使用的“非匿名”标签；主要示例是可能作为列类型的一部分发出的SQL函数，其中标签名称应默认匹配列名称。这恢复了一个在版本1.4.21中由于[#6718](https://www.sqlalchemy.org/trac/ticket/6718)、[#6710](https://www.sqlalchemy.org/trac/ticket/6710)而发生变化的行为，该行为之前定义不清晰。Oracle方言具有不同的RETURNING实现，不受此问题影响。版本2.0在广泛扩展的其他后端支持上进行了全面更改。
- en: 'This change is also **backported** to: 1.4.44'
  id: totrans-5244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.4.44
- en: 'References: [#8770](https://www.sqlalchemy.org/trac/ticket/8770)'
  id: totrans-5245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8770](https://www.sqlalchemy.org/trac/ticket/8770)
- en: '**[postgresql] [bug]**'
  id: totrans-5246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added additional type-detection for the new PostgreSQL [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") type, where previous cases that allowed
    the psycopg2-native range objects to be received directly by the DBAPI without
    SQLAlchemy intercepting them stopped working, as we now have our own value object.
    The [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") object has been enhanced such that SQLAlchemy
    Core detects it in otherwise ambiguous situations (such as comparison to dates)
    and applies appropriate bind handlers. Pull request courtesy Lele Gaifax.
  id: totrans-5247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为新的PostgreSQL [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range")类型添加了额外的类型检测，之前允许psycopg2原生范围对象直接被DBAPI接收而不被SQLAlchemy拦截的情况停止工作，因为现在我们有了自己的值对象。[`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range")对象已经得到增强，以便SQLAlchemy Core在否则模糊的情况下检测到它（例如与日期的比较）并应用适当的绑定处理程序。感谢Lele
    Gaifax的拉取请求。
- en: 'References: [#8884](https://www.sqlalchemy.org/trac/ticket/8884)'
  id: totrans-5248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8884](https://www.sqlalchemy.org/trac/ticket/8884)
- en: mssql
  id: totrans-5249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-5250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed regression caused by the combination of [#8177](https://www.sqlalchemy.org/trac/ticket/8177),
    re-enable setinputsizes for SQL server unless fast_executemany + DBAPI executemany
    is used for a statement, along with [#6047](https://www.sqlalchemy.org/trac/ticket/6047),
    implement “insertmanyvalues”, which bypasses DBAPI executemany in place of a custom
    DBAPI execute for INSERT statements. setinputsizes would incorrectly not be used
    for a multiple parameter-set INSERT statement that used “insertmanyvalues” if
    fast_executemany were turned on, as the check would incorrectly assume this is
    a DBAPI executemany call. The “regression” would then be that the “insertmanyvalues”
    statement format is apparently slightly more sensitive to multiple rows that don’t
    use the same types for each row, so in such a case setinputsizes is especially
    needed.
  id: totrans-5251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由 [#8177](https://www.sqlalchemy.org/trac/ticket/8177) 的组合引起的回归修复，除非用于语句的 `fast_executemany`
    + DBAPI `executemany`，否则重新启用 SQL Server 的 `setinputsizes`，以及 [#6047](https://www.sqlalchemy.org/trac/ticket/6047)，实现“insertmanyvalues”，它绕过了
    DBAPI 的 `executemany`，而是用于 INSERT 语句的自定义 DBAPI 执行。如果打开了 `fast_executemany`，则会错误地不使用
    `setinputsizes` 用于多参数集 INSERT 语句，因为检查会错误地假定这是一个 DBAPI `executemany` 调用。然后“回归”是“insertmanyvalues”语句格式显然对于不使用相同类型的多行特别敏感，因此在这种情况下尤其需要
    `setinputsizes`。
- en: The fix repairs the fast_executemany check so that it only disables setinputsizes
    if true DBAPI executemany is to be used.
  id: totrans-5252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此修复修复了 `fast_executemany` 检查，使其仅在要使用真正的 DBAPI `executemany` 时禁用 `setinputsizes`。
- en: 'References: [#8917](https://www.sqlalchemy.org/trac/ticket/8917)'
  id: totrans-5253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8917](https://www.sqlalchemy.org/trac/ticket/8917)
- en: oracle
  id: totrans-5254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-5255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Continued fixes for Oracle fix [#8708](https://www.sqlalchemy.org/trac/ticket/8708)
    released in 1.4.43 where bound parameter names that start with underscores, which
    are disallowed by Oracle, were still not being properly escaped in all circumstances.
  id: totrans-5256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于在 1.4.43 中发布的 Oracle 修复 [#8708](https://www.sqlalchemy.org/trac/ticket/8708)，继续修复了绑定参数名称以下划线开头的问题，Oracle
    不允许这样做，在所有情况下仍然不能正确地转义。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-5257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被反向移植**至：1.4.45
- en: 'References: [#8708](https://www.sqlalchemy.org/trac/ticket/8708)'
  id: totrans-5258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8708](https://www.sqlalchemy.org/trac/ticket/8708)
- en: tests
  id: totrans-5259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-5260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[测试] [错误]**'
- en: Fixed issue where the `--disable-asyncio` parameter to the test suite would
    fail to not actually run greenlet tests and would also not prevent the suite from
    using a “wrapping” greenlet for the whole suite. This parameter now ensures that
    no greenlet or asyncio use will occur within the entire run when set.
  id: totrans-5261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了测试套件中 `--disable-asyncio` 参数无法实际不运行 greenlet 测试并且也无法阻止测试套件在整个运行期间使用“包装” greenlet
    的问题。设置此参数现在可以确保在整个运行期间不会使用 greenlet 或 asyncio。
- en: 'This change is also **backported** to: 1.4.44'
  id: totrans-5262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**被反向移植**至：1.4.44
- en: 'References: [#8793](https://www.sqlalchemy.org/trac/ticket/8793)'
  id: totrans-5263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8793](https://www.sqlalchemy.org/trac/ticket/8793)
- en: orm
  id: totrans-5264
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature]**'
  id: totrans-5265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added a new parameter [`mapped_column.use_existing_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.use_existing_column
    "sqlalchemy.orm.mapped_column") to accommodate the use case of a single-table
    inheritance mapping that uses the pattern of more than one subclass indicating
    the same column to take place on the superclass. This pattern was previously possible
    by using [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") in conjunction with locating the existing column
    in the `.__table__` of the superclass, however is now updated to work with [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") as well as with pep-484 typing, in a simple and
    succinct way.
  id: totrans-5266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新参数[`mapped_column.use_existing_column`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.use_existing_column
    "sqlalchemy.orm.mapped_column")，以适应使用单表继承映射的用例，该映射使用了一个以上的子类指示在超类上发生的相同列的模式。先前，可以通过在超类的
    `.__table__` 中使用 [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") 来定位现有列来实现此模式，但现在已更新为与 pep-484 类型提示一起使用 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 以及简单而简洁地工作。
- en: See also
  id: totrans-5267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Resolving Column Conflicts with use_existing_column](../orm/inheritance.html#orm-inheritance-column-conflicts)'
  id: totrans-5268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[使用 `use_existing_column` 解决列冲突](../orm/inheritance.html#orm-inheritance-column-conflicts)'
- en: 'References: [#8822](https://www.sqlalchemy.org/trac/ticket/8822)'
  id: totrans-5269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8822](https://www.sqlalchemy.org/trac/ticket/8822)
- en: '**[orm] [usecase]**'
  id: totrans-5270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Added support custom user-defined types which extend the Python `enum.Enum`
    base class to be resolved automatically to SQLAlchemy [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") SQL types, when using the Annotated Declarative Table
    feature. The feature is made possible through new lookup features added to the
    ORM type map feature, and includes support for changing the arguments of the [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") that’s generated by default as well as setting up specific
    `enum.Enum` types within the map with specific arguments.
  id: totrans-5271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对自定义用户定义类型的支持，这些类型扩展了Python `enum.Enum`基类，当使用注释声明表功能时，将自动解析为SQLAlchemy [`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") SQL类型。 该功能是通过向ORM类型映射功能添加新的查找功能实现的，并包括支持更改默认生成的[`Enum`](../core/type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum")的参数以及设置在映射中具有特定参数的特定`enum.Enum`类型。
- en: See also
  id: totrans-5272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Python Enum or pep-586 Literal types in the type map](../orm/declarative_tables.html#orm-declarative-mapped-column-enums)'
  id: totrans-5273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[在类型映射中使用Python Enum或pep-586 Literal类型](../orm/declarative_tables.html#orm-declarative-mapped-column-enums)'
- en: 'References: [#8859](https://www.sqlalchemy.org/trac/ticket/8859)'
  id: totrans-5274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8859](https://www.sqlalchemy.org/trac/ticket/8859)
- en: '**[orm] [usecase]**'
  id: totrans-5275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Added [`mapped_column.compare`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.compare
    "sqlalchemy.orm.mapped_column") parameter to relevant ORM attribute constructs
    including [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column"), [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") etc. to provide for the Python dataclasses `compare`
    parameter on `field()`, when using the [Declarative Dataclass Mapping](../orm/dataclasses.html#orm-declarative-native-dataclasses)
    feature. Pull request courtesy Simon Schiele.
  id: totrans-5276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在相关的ORM属性构造中添加了[`mapped_column.compare`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column.params.compare
    "sqlalchemy.orm.mapped_column")参数，包括[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")、[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")等，以提供Python dataclasses `field()`上的`compare`参数，当使用[声明性数据类映射](../orm/dataclasses.html#orm-declarative-native-dataclasses)功能时。
    拉取请求由Simon Schiele提供。
- en: 'References: [#8905](https://www.sqlalchemy.org/trac/ticket/8905)'
  id: totrans-5277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8905](https://www.sqlalchemy.org/trac/ticket/8905)
- en: '**[orm] [performance] [bug]**'
  id: totrans-5278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [性能] [bug]**'
- en: Additional performance enhancements within ORM-enabled SQL statements, specifically
    targeting callcounts within the construction of ORM statements, using combinations
    of [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    with [`union()`](../core/selectable.html#sqlalchemy.sql.expression.union "sqlalchemy.sql.expression.union")
    and similar “compound” constructs, in addition to direct performance improvements
    to the `corresponding_column()` internal method that is used heavily by the ORM
    by constructs like [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") and similar.
  id: totrans-5279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM启用的SQL语句中的其他性能增强，特别针对ORM语句的构造中的调用次数，使用[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")与[`union()`](../core/selectable.html#sqlalchemy.sql.expression.union
    "sqlalchemy.sql.expression.union")和类似的“复合”构造的组合，以及直接改进了ORM大量使用的`corresponding_column()`内部方法的性能，例如[`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")等。
- en: 'References: [#8796](https://www.sqlalchemy.org/trac/ticket/8796)'
  id: totrans-5280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8796](https://www.sqlalchemy.org/trac/ticket/8796)
- en: '**[orm] [bug]**'
  id: totrans-5281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where use of an unknown datatype within a [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") annotation for a column-based attribute would silently
    fail to map the attribute, rather than reporting an exception; an informative
    exception message is now raised.
  id: totrans-5282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在列属性的[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")注释中使用未知数据类型会静默失败而不是报告异常的问题；现在会引发一个信息性异常消息。
- en: 'References: [#8888](https://www.sqlalchemy.org/trac/ticket/8888)'
  id: totrans-5283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8888](https://www.sqlalchemy.org/trac/ticket/8888)
- en: '**[orm] [bug]**'
  id: totrans-5284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed a suite of issues involving [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") use with dictionary types, such as `Mapped[Dict[str,
    str] | None]`, would not be correctly interpreted in Declarative ORM mappings.
    Support to correctly “de-optionalize” this type including for lookup in `type_annotation_map`
    has been fixed.
  id: totrans-5285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及与字典类型一起使用的 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    在声明性 ORM 映射中无法正确解释的一系列问题，例如 `Mapped[Dict[str, str] | None]`，支持正确“去可选化”此类型，包括用于
    `type_annotation_map` 中查找。
- en: 'References: [#8777](https://www.sqlalchemy.org/trac/ticket/8777)'
  id: totrans-5286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8777](https://www.sqlalchemy.org/trac/ticket/8777)
- en: '**[orm] [bug]**'
  id: totrans-5287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in [Declarative Dataclass Mapping](../orm/dataclasses.html#orm-declarative-native-dataclasses)
    feature where using plain dataclass fields with the `__allow_unmapped__` directive
    in a mapping would not create a dataclass with the correct class-level state for
    those fields, copying the raw `Field` object to the class inappropriately after
    dataclasses itself had replaced the `Field` object with the class-level default
    value.
  id: totrans-5288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 [声明性数据类映射](../orm/dataclasses.html#orm-declarative-native-dataclasses)
    特性中的一个错误，其中在映射中使用带有 `__allow_unmapped__` 指令的普通数据类字段将不会为这些字段创建具有正确类级状态的数据类，在 dataclasses
    自身替换了 `Field` 对象为类级默认值后不适当地将原始 `Field` 对象复制到类中。
- en: 'References: [#8880](https://www.sqlalchemy.org/trac/ticket/8880)'
  id: totrans-5289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8880](https://www.sqlalchemy.org/trac/ticket/8880)
- en: '**[orm] [bug] [regression]**'
  id: totrans-5290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [regression]**'
- en: Fixed regression where flushing a mapped class that’s mapped against a subquery,
    such as a direct mapping or some forms of concrete table inheritance, would fail
    if the [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") parameter were used.
  id: totrans-5291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了回归，其中刷新一个映射类，该映射类映射到一个子查询，例如直接映射或某些形式的具体表继承，如果使用了 [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") 参数，则会失败。
- en: 'References: [#8812](https://www.sqlalchemy.org/trac/ticket/8812)'
  id: totrans-5292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8812](https://www.sqlalchemy.org/trac/ticket/8812)
- en: '**[orm] [bug]**'
  id: totrans-5293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed regression in 2.0.0b3 caused by [#8759](https://www.sqlalchemy.org/trac/ticket/8759)
    where indicating the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")
    name using a qualified name such as `sqlalchemy.orm.Mapped` would fail to be recognized
    by Declarative as indicating the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") construct.
  id: totrans-5294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 2.0.0b3 中由 [#8759](https://www.sqlalchemy.org/trac/ticket/8759) 引起的回归，其中指示使用限定名如
    `sqlalchemy.orm.Mapped` 表示 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 名称将无法被声明性识别为指示 [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") 结构。
- en: 'References: [#8853](https://www.sqlalchemy.org/trac/ticket/8853)'
  id: totrans-5295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8853](https://www.sqlalchemy.org/trac/ticket/8853)
- en: orm extensions
  id: totrans-5296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 扩展
- en: '**[usecase] [orm extensions]**'
  id: totrans-5297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[usecase] [orm 扩展]**'
- en: Added support for the [`association_proxy()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") extension function to take
    part within Python `dataclasses` configuration, when using the native dataclasses
    feature described at [Declarative Dataclass Mapping](../orm/dataclasses.html#orm-declarative-native-dataclasses).
    Included are attribute-level arguments including [`association_proxy.init`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.init
    "sqlalchemy.ext.associationproxy.association_proxy") and [`association_proxy.default_factory`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.default_factory
    "sqlalchemy.ext.associationproxy.association_proxy").
  id: totrans-5298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对 [`association_proxy()`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy
    "sqlalchemy.ext.associationproxy.association_proxy") 扩展函数的支持，以便在使用原生数据类特性时，在 Python
    `dataclasses` 配置中参与，详情请参见 [声明性数据类映射](../orm/dataclasses.html#orm-declarative-native-dataclasses)。包括属性级参数，如
    [`association_proxy.init`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.init
    "sqlalchemy.ext.associationproxy.association_proxy") 和 [`association_proxy.default_factory`](../orm/extensions/associationproxy.html#sqlalchemy.ext.associationproxy.association_proxy.params.default_factory
    "sqlalchemy.ext.associationproxy.association_proxy")。
- en: Documentation for association proxy has also been updated to use “Annotated
    Declarative Table” forms within examples, including type annotations used for
    `AssocationProxy` itself.
  id: totrans-5299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 协会代理的文档也已更新，以在示例中使用“带注释的声明性表格”形式，包括用于 `AssocationProxy` 本身的类型注释。
- en: 'References: [#8878](https://www.sqlalchemy.org/trac/ticket/8878)'
  id: totrans-5300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8878](https://www.sqlalchemy.org/trac/ticket/8878)
- en: sql
  id: totrans-5301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [usecase]**'
  id: totrans-5302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Added [`ScalarValues`](../core/selectable.html#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues") that can be used as a column element
    allowing using [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") inside `IN` clauses or in conjunction with
    `ANY` or `ALL` collection aggregates. This new class is generated using the method
    [`Values.scalar_values()`](../core/selectable.html#sqlalchemy.sql.expression.Values.scalar_values
    "sqlalchemy.sql.expression.Values.scalar_values"). The [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") instance is now coerced to a [`ScalarValues`](../core/selectable.html#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues") when used in a `IN` or `NOT IN` operation.
  id: totrans-5303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了[`ScalarValues`](../core/selectable.html#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues")，它可以用作列元素，允许在 `IN` 子句中使用 [`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") 或与 `ANY` 或 `ALL` 集合聚合一起使用。这个新类是使用方法 [`Values.scalar_values()`](../core/selectable.html#sqlalchemy.sql.expression.Values.scalar_values
    "sqlalchemy.sql.expression.Values.scalar_values") 生成的。当在 `IN` 或 `NOT IN` 操作中使用时，[`Values`](../core/selectable.html#sqlalchemy.sql.expression.Values
    "sqlalchemy.sql.expression.Values") 实例现在会被强制转换为 [`ScalarValues`](../core/selectable.html#sqlalchemy.sql.expression.ScalarValues
    "sqlalchemy.sql.expression.ScalarValues")。
- en: 'References: [#6289](https://www.sqlalchemy.org/trac/ticket/6289)'
  id: totrans-5304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6289](https://www.sqlalchemy.org/trac/ticket/6289)
- en: '**[sql] [bug]**'
  id: totrans-5305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed critical memory issue identified in cache key generation, where for very
    large and complex ORM statements that make use of lots of ORM aliases with subqueries,
    cache key generation could produce excessively large keys that were orders of
    magnitude bigger than the statement itself. Much thanks to Rollo Konig Brock for
    their very patient, long term help in finally identifying this issue.
  id: totrans-5306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了缓存密钥生成中发现的关键内存问题，对于使用大量具有子查询的 ORM 别名的非常大且复杂的 ORM 语句，缓存密钥生成可能会生成比语句本身大数个数量级的密钥。非常感谢
    Rollo Konig Brock 长期以来在最终确定此问题上提供的非常耐心和持久的帮助。
- en: 'This change is also **backported** to: 1.4.44'
  id: totrans-5307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已 **回溯到**：1.4.44
- en: 'References: [#8790](https://www.sqlalchemy.org/trac/ticket/8790)'
  id: totrans-5308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8790](https://www.sqlalchemy.org/trac/ticket/8790)
- en: '**[sql] [bug]**'
  id: totrans-5309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The approach to the `numeric` pep-249 paramstyle has been rewritten, and is
    now fully supported, including by features such as “expanding IN” and “insertmanyvalues”.
    Parameter names may also be repeated in the source SQL construct which will be
    correctly represented within the numeric format using a single parameter. Introduced
    an additional numeric paramstyle called `numeric_dollar`, which is specifically
    what’s used by the asyncpg dialect; the paramstyle is equivalent to `numeric`
    except numeric indicators are indicated by a dollar-sign rather than a colon.
    The asyncpg dialect now uses `numeric_dollar` paramstyle directly, rather than
    compiling to `format` style first.
  id: totrans-5310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`numeric` pep-249 参数风格的方法已经重写，现在得到了完全支持，包括“扩展 IN”和“insertmanyvalues”等功能。参数名称也可以在源
    SQL 结构中重复，这将在数字格式中使用单个参数正确表示。引入了一个额外的数字参数风格称为 `numeric_dollar`，这是 asyncpg 方言专门使用的；该参数风格等同于
    `numeric`，只是数值指示符使用美元符号而不是冒号。asyncpg 方言现在直接使用 `numeric_dollar` 参数风格，而不是首先编译为 `format`
    风格。'
- en: The `numeric` and `numeric_dollar` paramstyles assume that the target backend
    is capable of receiving the numeric parameters in any order, and will match the
    given parameter values to the statement based on matching their position (1-based)
    to the numeric indicator. This is the normal behavior of “numeric” paramstyles,
    although it was observed that the SQLite DBAPI implements a not-used “numeric”
    style that does not honor parameter ordering.
  id: totrans-5311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`numeric` 和 `numeric_dollar` 参数风格假定目标后端能够以任意顺序接收数字参数，并将给定的参数值与语句匹配，基于匹配它们的位置（从
    1 开始）到数字指示符。这是“numeric”参数风格的正常行为，尽管观察到 SQLite DBAPI 实现了一个未使用的“numeric”风格，不遵循参数顺序。'
- en: 'References: [#8849](https://www.sqlalchemy.org/trac/ticket/8849)'
  id: totrans-5312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8849](https://www.sqlalchemy.org/trac/ticket/8849)
- en: '**[sql] [bug]**'
  id: totrans-5313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Adjusted the rendering of `RETURNING`, in particular when using [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"), such that it now renders columns using the
    same logic as that of the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct to generate labels, which will include
    disambiguating labels, as well as that a SQL function surrounding a named column
    will be labeled using the column name itself. This establishes better cross-compatibility
    when selecting rows from either [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") constructs or from DML statements that use
    [`UpdateBase.returning()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning"). A narrower scale change was
    also made for the 1.4 series that adjusted the function label issue only.
  id: totrans-5314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了`RETURNING`的渲染，特别是在使用[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")时，现在它会像[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造一样使用相同的逻辑生成标签，这将包括消除歧义的标签，以及将围绕命名列的SQL函数标记为列名本身。这在从[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造或使用[`UpdateBase.returning()`](../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning")的DML语句中选择行时建立了更好的交叉兼容性。1.4系列还对函数标签问题进行了较小的调整。
- en: 'References: [#8770](https://www.sqlalchemy.org/trac/ticket/8770)'
  id: totrans-5315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8770](https://www.sqlalchemy.org/trac/ticket/8770)
- en: schema
  id: totrans-5316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema] [bug]**'
  id: totrans-5317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [bug]**'
- en: Stricter rules are in place for appending of [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects, both moving some previous deprecation warnings
    to exceptions, and preventing some previous scenarios that would cause duplicate
    columns to appear in tables, when [`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table") were set to `True`, for both programmatic [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") construction as well as during reflection operations.
  id: totrans-5318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在对将[`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象附加到[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的规则更严格，将一些先前的弃用警告转换为异常，并阻止一些先前可能导致表中出现重复列的情况，当[`Table.extend_existing`](../core/metadata.html#sqlalchemy.schema.Table.params.extend_existing
    "sqlalchemy.schema.Table")设置为`True`时，无论是在编程[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")构造还是在反射操作期间。
- en: See [Stricter rules for replacement of Columns in Table objects with same-names,
    keys](whatsnew_20.html#change-8925) for a rundown of these changes.
  id: totrans-5319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅[表对象中具有相同名称、键的列替换规则更严格](whatsnew_20.html#change-8925)以了解这些更改的概述。
- en: See also
  id: totrans-5320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Stricter rules for replacement of Columns in Table objects with same-names,
    keys](whatsnew_20.html#change-8925)'
  id: totrans-5321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[表对象中具有相同名称、键的列替换规则更严格](whatsnew_20.html#change-8925)'
- en: 'References: [#8925](https://www.sqlalchemy.org/trac/ticket/8925)'
  id: totrans-5322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8925](https://www.sqlalchemy.org/trac/ticket/8925)
- en: typing
  id: totrans-5323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [usecase]**'
  id: totrans-5324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [usecase]**'
- en: Added a new type [`SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression") which may be indicated in user
    code to represent any SQL column oriented expression, including both those based
    on [`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") as well as on ORM [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute"). This type is a real class, not an alias,
    so can also be used as the foundation for other objects. An additional ORM-specific
    subclass [`SQLORMExpression`](../orm/internals.html#sqlalchemy.orm.SQLORMExpression
    "sqlalchemy.orm.SQLORMExpression") is also included.
  id: totrans-5325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新类型[`SQLColumnExpression`](../core/sqlelement.html#sqlalchemy.sql.expression.SQLColumnExpression
    "sqlalchemy.sql.expression.SQLColumnExpression")，用户可以在代码中指示表示任何SQL列导向表达式，包括基于[`ColumnElement`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement")和ORM [`QueryableAttribute`](../orm/internals.html#sqlalchemy.orm.QueryableAttribute
    "sqlalchemy.orm.QueryableAttribute")的表达式。这个类型是一个真正的类，而不是一个别名，因此也可以用作其他对象的基础。还包括了一个额外的ORM特定子类[`SQLORMExpression`](../orm/internals.html#sqlalchemy.orm.SQLORMExpression
    "sqlalchemy.orm.SQLORMExpression")。
- en: 'References: [#8847](https://www.sqlalchemy.org/trac/ticket/8847)'
  id: totrans-5326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8847](https://www.sqlalchemy.org/trac/ticket/8847)
- en: '**[typing] [bug]**'
  id: totrans-5327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Adjusted internal use of the Python `enum.IntFlag` class which changed its behavioral
    contract in Python 3.11\. This was not causing runtime failures however caused
    typing runs to fail under Python 3.11.
  id: totrans-5328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了Python `enum.IntFlag` 类的内部使用，该类在Python 3.11中改变了其行为契约。这并没有导致运行时失败，但在Python
    3.11下导致了类型运行失败。
- en: 'References: [#8783](https://www.sqlalchemy.org/trac/ticket/8783)'
  id: totrans-5329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8783](https://www.sqlalchemy.org/trac/ticket/8783)
- en: '**[typing] [bug]**'
  id: totrans-5330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: The `sqlalchemy.ext.mutable` extension and `sqlalchemy.ext.automap` extensions
    are now fully pep-484 typed. Huge thanks to Gleb Kisenkov for their efforts on
    this.
  id: totrans-5331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`sqlalchemy.ext.mutable`扩展和`sqlalchemy.ext.automap`扩展现在完全符合pep-484类型。非常感谢Gleb
    Kisenkov在这方面的努力。'
- en: 'References: [#6810](https://www.sqlalchemy.org/trac/ticket/6810), [#8667](https://www.sqlalchemy.org/trac/ticket/8667)'
  id: totrans-5332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6810](https://www.sqlalchemy.org/trac/ticket/6810), [#8667](https://www.sqlalchemy.org/trac/ticket/8667)
- en: '**[typing] [bug]**'
  id: totrans-5333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Corrected typing support for the [`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship") argument which may also accept a callable (lambda)
    that returns a [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause").
  id: totrans-5334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了对[`relationship.secondary`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.secondary
    "sqlalchemy.orm.relationship")参数的类型支持，该参数也可以接受返回[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")的可调用函数（lambda）。
- en: '**[typing] [bug]**'
  id: totrans-5335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Improved the typing for [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") and [`async_sessionmaker`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker"), so that the default type of their
    return value will be [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") or [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession"), without the need to type this explicitly.
    Previously, Mypy would not automaticaly infer these return types from its generic
    base.
  id: totrans-5336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")和[`async_sessionmaker`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker")的类型，使其返回值的默认类型将是[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")或[`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")，无需显式地进行类型定义。以前，Mypy无法从其通用基类自动推断这些返回类型。
- en: As part of this change, arguments for [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession"), [`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") and [`async_sessionmaker`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker") beyond the initial “bind” argument
    have been made keyword-only, which includes parameters that have always been documented
    as keyword arguments, such as [`Session.autoflush`](../orm/session_api.html#sqlalchemy.orm.Session.params.autoflush
    "sqlalchemy.orm.Session"), [`Session.class_`](../orm/session_api.html#sqlalchemy.orm.Session.params.class_
    "sqlalchemy.orm.Session"), etc.
  id: totrans-5337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变更的一部分，[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")、[`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")、[`sessionmaker`](../orm/session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")和[`async_sessionmaker`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.async_sessionmaker
    "sqlalchemy.ext.asyncio.async_sessionmaker")的参数除了初始的“bind”参数外，都已被设置为仅限关键字参数，其中包括一直被记录为关键字参数的参数，如[`Session.autoflush`](../orm/session_api.html#sqlalchemy.orm.Session.params.autoflush
    "sqlalchemy.orm.Session")、[`Session.class_`](../orm/session_api.html#sqlalchemy.orm.Session.params.class_
    "sqlalchemy.orm.Session")等。
- en: Pull request courtesy Sam Bull.
  id: totrans-5338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 感谢Sam Bull提供的拉取请求。
- en: 'References: [#8842](https://www.sqlalchemy.org/trac/ticket/8842)'
  id: totrans-5339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8842](https://www.sqlalchemy.org/trac/ticket/8842)
- en: '**[typing] [bug]**'
  id: totrans-5340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed issue where passing a callbale function returning an iterable of column
    elements to [`relationship.order_by`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.order_by
    "sqlalchemy.orm.relationship") was flagged as an error in type checkers.
  id: totrans-5341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了将返回列元素可迭代对象的可调用函数传递给[`relationship.order_by`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.order_by
    "sqlalchemy.orm.relationship")时，在类型检查器中被标记为错误的问题。
- en: 'References: [#8776](https://www.sqlalchemy.org/trac/ticket/8776)'
  id: totrans-5342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8776](https://www.sqlalchemy.org/trac/ticket/8776)
- en: postgresql
  id: totrans-5343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [usecase]**'
  id: totrans-5344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Complementing [#8690](https://www.sqlalchemy.org/trac/ticket/8690), new comparison
    methods such as [`Range.adjacent_to()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.adjacent_to
    "sqlalchemy.dialects.postgresql.Range.adjacent_to"), [`Range.difference()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.difference
    "sqlalchemy.dialects.postgresql.Range.difference"), [`Range.union()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.union
    "sqlalchemy.dialects.postgresql.Range.union"), etc., were added to the PG-specific
    range objects, bringing them in par with the standard operators implemented by
    the underlying [`AbstractRange.comparator_factory`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory").
  id: totrans-5345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 补充[#8690](https://www.sqlalchemy.org/trac/ticket/8690)，新增了诸如[`Range.adjacent_to()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.adjacent_to
    "sqlalchemy.dialects.postgresql.Range.adjacent_to")、[`Range.difference()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.difference
    "sqlalchemy.dialects.postgresql.Range.difference")、[`Range.union()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.union
    "sqlalchemy.dialects.postgresql.Range.union")等新的比较方法，被添加到了 PG 特定的范围对象中，使其与底层[`AbstractRange.comparator_factory`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory")实现的标准操作符保持一致。
- en: 'In addition, the `__bool__()` method of the class has been corrected to be
    consistent with the common Python containers behavior as well as how other popular
    PostgreSQL drivers do: it now tells whether the range instance is *not* empty,
    rather than the other way around.'
  id: totrans-5346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，类的 `__bool__()` 方法已被更正，以使其与常见的 Python 容器行为以及其他流行的 PostgreSQL 驱动程序的行为保持一致：现在它告诉范围实例是否*不*为空，而不是相反。
- en: Pull request courtesy Lele Gaifax.
  id: totrans-5347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 感谢 Lele Gaifax 提供的拉取请求。
- en: 'References: [#8765](https://www.sqlalchemy.org/trac/ticket/8765)'
  id: totrans-5348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8765](https://www.sqlalchemy.org/trac/ticket/8765)
- en: '**[postgresql] [change] [asyncpg]**'
  id: totrans-5349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [change] [asyncpg]**'
- en: Changed the paramstyle used by asyncpg from `format` to `numeric_dollar`. This
    has two main benefits since it does not require additional processing of the statement
    and allows for duplicate parameters to be present in the statements.
  id: totrans-5350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了 asyncpg 使用的 paramstyle，从 `format` 更改为 `numeric_dollar`。这有两个主要好处，因为它不需要对语句进行额外处理，并允许语句中存在重复参数。
- en: 'References: [#8926](https://www.sqlalchemy.org/trac/ticket/8926)'
  id: totrans-5351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8926](https://www.sqlalchemy.org/trac/ticket/8926)
- en: '**[postgresql] [bug] [mssql]**'
  id: totrans-5352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug] [mssql]**'
- en: For the PostgreSQL and SQL Server dialects only, adjusted the compiler so that
    when rendering column expressions in the RETURNING clause, the “non anon” label
    that’s used in SELECT statements is suggested for SQL expression elements that
    generate a label; the primary example is a SQL function that may be emitting as
    part of the column’s type, where the label name should match the column’s name
    by default. This restores a not-well defined behavior that had changed in version
    1.4.21 due to [#6718](https://www.sqlalchemy.org/trac/ticket/6718), [#6710](https://www.sqlalchemy.org/trac/ticket/6710).
    The Oracle dialect has a different RETURNING implementation and was not affected
    by this issue. Version 2.0 features an across the board change for its widely
    expanded support of RETURNING on other backends.
  id: totrans-5353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅针对 PostgreSQL 和 SQL Server 方言，调整了编译器，以便在 RETURNING 子句中渲染列表达式时，为生成标签的 SQL 表达式元素建议使用“non
    anon”标签，这是在 SELECT 语句中使用的标签；主要示例是可能作为列类型的一部分发出的 SQL 函数，在默认情况下标签名称应与列名称匹配。这恢复了一个在版本
    1.4.21 中因[#6718](https://www.sqlalchemy.org/trac/ticket/6718)、[#6710](https://www.sqlalchemy.org/trac/ticket/6710)而更改的行为，该行为并不明确。Oracle
    方言具有不同的 RETURNING 实现，不受此问题影响。版本 2.0 在其广泛扩展的对其他后端的 RETURNING 支持方面进行了全面更改。
- en: 'This change is also **backported** to: 1.4.44'
  id: totrans-5354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.44
- en: 'References: [#8770](https://www.sqlalchemy.org/trac/ticket/8770)'
  id: totrans-5355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8770](https://www.sqlalchemy.org/trac/ticket/8770)
- en: '**[postgresql] [bug]**'
  id: totrans-5356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: Added additional type-detection for the new PostgreSQL [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") type, where previous cases that allowed
    the psycopg2-native range objects to be received directly by the DBAPI without
    SQLAlchemy intercepting them stopped working, as we now have our own value object.
    The [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") object has been enhanced such that SQLAlchemy
    Core detects it in otherwise ambiguous situations (such as comparison to dates)
    and applies appropriate bind handlers. Pull request courtesy Lele Gaifax.
  id: totrans-5357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为新的PostgreSQL [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range")类型增加了额外的类型检测，以前的情况允许psycopg2原生范围对象直接由DBAPI接收而不受SQLAlchemy拦截，因为我们现在有了我们自己的值对象。
    [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range "sqlalchemy.dialects.postgresql.Range")对象已经得到增强，以便SQLAlchemy
    Core在其他模糊情况下检测到它（例如与日期进行比较），并应用适当的绑定处理程序。拉取请求由Lele Gaifax提供。
- en: 'References: [#8884](https://www.sqlalchemy.org/trac/ticket/8884)'
  id: totrans-5358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8884](https://www.sqlalchemy.org/trac/ticket/8884)
- en: mssql
  id: totrans-5359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-5360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed regression caused by the combination of [#8177](https://www.sqlalchemy.org/trac/ticket/8177),
    re-enable setinputsizes for SQL server unless fast_executemany + DBAPI executemany
    is used for a statement, along with [#6047](https://www.sqlalchemy.org/trac/ticket/6047),
    implement “insertmanyvalues”, which bypasses DBAPI executemany in place of a custom
    DBAPI execute for INSERT statements. setinputsizes would incorrectly not be used
    for a multiple parameter-set INSERT statement that used “insertmanyvalues” if
    fast_executemany were turned on, as the check would incorrectly assume this is
    a DBAPI executemany call. The “regression” would then be that the “insertmanyvalues”
    statement format is apparently slightly more sensitive to multiple rows that don’t
    use the same types for each row, so in such a case setinputsizes is especially
    needed.
  id: totrans-5361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由[#8177](https://www.sqlalchemy.org/trac/ticket/8177)的组合引起的回归，重新启用了用于SQL
    Server的setinputsizes，除非使用了fast_executemany + DBAPI executemany用于语句，以及[#6047](https://www.sqlalchemy.org/trac/ticket/6047)，实现了“insertmanyvalues”，它绕过了DBAPI
    executemany，而是为INSERT语句提供了自定义DBAPI execute。如果fast_executemany被打开，则对于使用“insertmanyvalues”的多参数集INSERT语句，setinputsizes将不会被正确使用，因为检查将错误地假设这是一个DBAPI
    executemany调用。然后，“回归”将是“insertmanyvalues”语句格式显然对于不使用相同类型的每一行的多行特别敏感，因此在这种情况下，特别需要setinputsizes。
- en: The fix repairs the fast_executemany check so that it only disables setinputsizes
    if true DBAPI executemany is to be used.
  id: totrans-5362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了fast_executemany检查，以便仅在要使用真实DBAPI executemany时禁用setinputsizes。
- en: 'References: [#8917](https://www.sqlalchemy.org/trac/ticket/8917)'
  id: totrans-5363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8917](https://www.sqlalchemy.org/trac/ticket/8917)
- en: oracle
  id: totrans-5364
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-5365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Continued fixes for Oracle fix [#8708](https://www.sqlalchemy.org/trac/ticket/8708)
    released in 1.4.43 where bound parameter names that start with underscores, which
    are disallowed by Oracle, were still not being properly escaped in all circumstances.
  id: totrans-5366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继续修复了Oracle修复[#8708](https://www.sqlalchemy.org/trac/ticket/8708)在1.4.43中发布的问题，其中以下划线开头的绑定参数名称，在所有情况下仍未正确转义。
- en: 'This change is also **backported** to: 1.4.45'
  id: totrans-5367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '这个更改也**回溯到**: 1.4.45'
- en: 'References: [#8708](https://www.sqlalchemy.org/trac/ticket/8708)'
  id: totrans-5368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8708](https://www.sqlalchemy.org/trac/ticket/8708)
- en: tests
  id: totrans-5369
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: '**[tests] [bug]**'
  id: totrans-5370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[tests] [bug]**'
- en: Fixed issue where the `--disable-asyncio` parameter to the test suite would
    fail to not actually run greenlet tests and would also not prevent the suite from
    using a “wrapping” greenlet for the whole suite. This parameter now ensures that
    no greenlet or asyncio use will occur within the entire run when set.
  id: totrans-5371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了测试套件中`--disable-asyncio`参数未能实际运行绿色测试的问题，也不会阻止套件使用“包装”绿色测试套件的问题。当设置时，此参数现在确保在整个运行期间不会发生绿色或asyncio的使用。
- en: 'This change is also **backported** to: 1.4.44'
  id: totrans-5372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '这个更改也**回溯到**: 1.4.44'
- en: 'References: [#8793](https://www.sqlalchemy.org/trac/ticket/8793)'
  id: totrans-5373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8793](https://www.sqlalchemy.org/trac/ticket/8793)
- en: 2.0.0b3
  id: totrans-5374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.0b3
- en: 'Released: November 4, 2022'
  id: totrans-5375
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2022年11月4日
- en: orm
  id: totrans-5376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-5377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in joined eager loading where an assertion fail would occur with
    a particular combination of outer/inner joined eager loads, when eager loading
    across three mappers where the middle mapper was an inherited subclass mapper.
  id: totrans-5378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在联合加载中修复了一个问题，其中当在三个映射器之间进行快速加载时，如果在外部/内部联接的快速加载的特定组合中发生断言失败，那么断言将会失败，当在三个映射器之间进行快速加载时，中间映射器是一个继承的子类映射器。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '这个更改也**回溯到**: 1.4.43'
- en: 'References: [#8738](https://www.sqlalchemy.org/trac/ticket/8738)'
  id: totrans-5380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8738](https://www.sqlalchemy.org/trac/ticket/8738)
- en: '**[orm] [bug]**'
  id: totrans-5381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") constructs, where combinations of [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") with [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join"), as well as when using [`Select.join_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from"), would cause the [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") feature as well as the IN criteria needed
    for single-table inheritance queries to not render, in cases where the columns
    clause of the query did not explicitly include the left-hand side entity of the
    JOIN. The correct entity is now transferred to the [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object that’s generated internally, so that
    the criteria against the left side entity is correctly added.
  id: totrans-5382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及 [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    构造的错误，其中 [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 与 [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") 的组合，以及使用 [`Select.join_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from") 时，当查询的列子句没有显式包含 JOIN 的左侧实体时，会导致
    [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") 功能以及单表继承查询所需的 IN 条件不渲染。现在正确的实体已传递到内部生成的
    [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join "sqlalchemy.sql.expression.Join")
    对象，以便正确添加左侧实体的条件。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**反向移植**到：1.4.43
- en: 'References: [#8721](https://www.sqlalchemy.org/trac/ticket/8721)'
  id: totrans-5384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8721](https://www.sqlalchemy.org/trac/ticket/8721)
- en: '**[orm] [bug]**'
  id: totrans-5385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An informative exception is now raised when the [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option is used as a loader option added
    to a specific “loader path”, such as when using it within [`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options"). This use is not supported as [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is only intended to be used as a top level
    loader option. Previously, an internal error would be generated.
  id: totrans-5386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将[`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项用作添加到特定“加载器路径”的加载器选项时，例如在[`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options")中使用时，现在会引发一个信息性异常。此用法不受支持，因为[`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")仅应用于顶层加载器选项。以前会生成内部错误。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**反向移植**到：1.4.43
- en: 'References: [#8711](https://www.sqlalchemy.org/trac/ticket/8711)'
  id: totrans-5388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8711](https://www.sqlalchemy.org/trac/ticket/8711)
- en: '**[orm] [bug]**'
  id: totrans-5389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved “dictionary mode” for [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") so that synonym names which refer to primary key
    attribute names may be indicated in the named dictionary.
  id: totrans-5390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")改进了“字典模式”，使得同义词名称可以指示为主键属性名称。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**反向移植**到：1.4.43
- en: 'References: [#8753](https://www.sqlalchemy.org/trac/ticket/8753)'
  id: totrans-5392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8753](https://www.sqlalchemy.org/trac/ticket/8753)
- en: '**[orm] [bug]**'
  id: totrans-5393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where “selectin_polymorphic” loading for inheritance mappers would
    not function correctly if the [`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") parameter referred to a SQL expression that was not directly
    mapped on the class.
  id: totrans-5394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了继承映射器中“selectin_polymorphic”加载无法正确工作的问题，如果[`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper")参数引用的是不直接映射到类的 SQL 表达式，则会出现此问题。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**反向移植**到：1.4.43
- en: 'References: [#8704](https://www.sqlalchemy.org/trac/ticket/8704)'
  id: totrans-5396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8704](https://www.sqlalchemy.org/trac/ticket/8704)
- en: '**[orm] [bug]**'
  id: totrans-5397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the underlying DBAPI cursor would not be closed when using
    the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object as an iterator, if a user-defined exception case were raised within the
    iteration process, thereby causing the iterator to be closed by the Python interpreter.
    When using [`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") to create server-side cursors, this would lead
    to the usual MySQL-related issues with server side cursors out of sync, and without
    direct access to the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object, end-user code could not access the cursor
    in order to close it.
  id: totrans-5398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象作为迭代器时，如果在迭代过程中出现用户定义的异常情况，底层的DBAPI游标将不会被关闭的问题，从而导致迭代器被Python解释器关闭。当使用[`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")创建服务器端游标时，这将导致通常与MySQL相关的服务器端游标不同步的问题，并且由于没有直接访问[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象，最终用户代码无法访问游标以关闭它。
- en: To resolve, a catch for `GeneratorExit` is applied within the iterator method,
    which will close the result object in those cases when the iterator were interrupted,
    and by definition will be closed by the Python interpreter.
  id: totrans-5399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了解决这个问题，在迭代器方法中应用了对`GeneratorExit`的捕获，这将在迭代器被中断时关闭结果对象，并且根据定义将被Python解释器关闭。
- en: As part of this change as implemented for the 1.4 series, ensured that `.close()`
    methods are available on all [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") implementations including [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult"), [`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult"). The 2.0 version of this change also includes
    new context manager patterns for use with [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") classes.
  id: totrans-5400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为1.4系列实施的这一变更的一部分，确保了所有[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")实现都可用`.close()`方法，包括[`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")、[`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult")。2.0版本的这一变更还包括用于与[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")类一起使用的新上下文管理器模式。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一变更也被**回溯**到：1.4.43
- en: 'References: [#8710](https://www.sqlalchemy.org/trac/ticket/8710)'
  id: totrans-5402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8710](https://www.sqlalchemy.org/trac/ticket/8710)
- en: orm declarative
  id: totrans-5403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm声明性
- en: '**[orm] [declarative] [bug]**'
  id: totrans-5404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Added support in ORM declarative annotations for class names specified for [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), as well as the name of the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") symbol itself, to be different names than their direct
    class name, to support scenarios such as where [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") is imported as `from sqlalchemy.orm import Mapped as
    M`, or where related class names are imported with an alternate name in a similar
    fashion. Additionally, a target class name given as the lead argument for [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") will always supersede the name given in the left
    hand annotation, so that otherwise un-importable names that also don’t match the
    class name can still be used in annotations.
  id: totrans-5405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ORM声明性注释中添加了对于为[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")指定的类名的支持，以及[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")符号本身的名称，可以与直接类名不同，以支持诸如将[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")导入为`from sqlalchemy.orm import Mapped as M`的情况，或者相关类名以类似方式用不同名称导入。此外，作为[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的主参数给定的目标类名将始终优先于左侧注释中给定的名称，以便仍然可以在注释中使用无法导入的名称，而且也不匹配类名的情况。
- en: 'References: [#8759](https://www.sqlalchemy.org/trac/ticket/8759)'
  id: totrans-5406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8759](https://www.sqlalchemy.org/trac/ticket/8759)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-5407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Improved support for legacy 1.4 mappings that use annotations which don’t include
    `Mapped[]`, by ensuring the `__allow_unmapped__` attribute can be used to allow
    such legacy annotations to pass through Annotated Declarative without raising
    an error and without being interpreted in an ORM runtime context. Additionally
    improved the error message generated when this condition is detected, and added
    more documentation for how this situation should be handled. Unfortunately the
    1.4 WARN_SQLALCHEMY_20 migration warning cannot detect this particular configurational
    issue at runtime with its current architecture.
  id: totrans-5408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对使用不包括`Mapped[]`的注释的遗留1.4映射的支持，通过确保`__allow_unmapped__`属性可用于允许这种遗留注释通过未引发错误且不在ORM运行时上下文中被解释的注释性声明。此外，当检测到此条件时，改进了生成的错误消息，并为应如何处理此情况添加了更多文档。不幸的是，1.4
    WARN_SQLALCHEMY_20迁移警告无法使用当前架构在运行时检测到此特定的配置问题。
- en: 'References: [#8692](https://www.sqlalchemy.org/trac/ticket/8692)'
  id: totrans-5409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8692](https://www.sqlalchemy.org/trac/ticket/8692)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-5410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Changed a fundamental configuration behavior of [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), where [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that are explicitly present in the [`Mapper.properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper") dictionary, either directly or enclosed within a mapper
    property object, will now be mapped within the order of how they appear within
    the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    (or other selectable) itself (assuming they are in fact part of that table’s list
    of columns), thereby maintaining the same order of columns in the mapped selectable
    as is instrumented on the mapped class, as well as what renders in an ORM SELECT
    statement for that mapper. Previously (where “previously” means since version
    0.0.1), [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects in the [`Mapper.properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper") dictionary would always be mapped first, ahead of when
    the other columns in the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") would be mapped, causing a discrepancy in the order
    in which the mapper would assign attributes to the mapped class as well as the
    order in which they would render in statements.
  id: totrans-5411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改变了[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")的基本配置行为，其中在[`Mapper.properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper")字典中明确存在的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象，无论是直接存在还是包含在映射属性对象中，现在都将根据它们在映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")（或其他可选择的）中出现的顺序进行映射（假设它们实际上是该表列的一部分），从而保持在映射的可选择项中的列的顺序与在映射类中被调制的顺序相同，以及在ORM
    SELECT语句中呈现的顺序。此前（“此前”指的是自版本0.0.1以来），[`Mapper.properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper")字典中的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象总是首先映射，超出了映射的其他列在映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")中的映射顺序，导致映射器分配属性给映射类的顺序与它们在语句中呈现的顺序不一致。
- en: The change most prominently takes place in the way that Declarative assigns
    declared columns to the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), specifically how [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") (or [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")) objects are handled when they have a DDL name
    that is explicitly different from the mapped attribute name, as well as when constructs
    such as [`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") etc. are used. The new behavior will see the column
    ordering within the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") being the same order in which the attributes are mapped
    onto the class, assigned within the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") itself, and rendered in ORM statements such as SELECT
    statements, independent of how the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") was configured against the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-5412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最明显的变化发生在声明式将声明的列分配给[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的方式上，具体来说，当具有DDL名称明确不同于映射属性名称的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")（或[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")）对象以及使用[`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred")等结构时。新的行为将会看到在映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")中的列顺序与属性映射到类中的顺序相同，分配在[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")本身内，并在ORM语句中（如SELECT语句）呈现，与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")配置为[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的方式无关。
- en: 'References: [#8705](https://www.sqlalchemy.org/trac/ticket/8705)'
  id: totrans-5413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8705](https://www.sqlalchemy.org/trac/ticket/8705)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-5414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed issue in new dataclass mapping feature where a column declared on the
    decalrative base / abstract base / mixin would leak into the constructor for an
    inheriting subclass under some circumstances.
  id: totrans-5415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在新的数据类映射功能中修复了问题，其中在某些情况下，在声明基类/抽象基类/混合类上声明的列会泄漏到继承子类的构造函数中。
- en: 'References: [#8718](https://www.sqlalchemy.org/trac/ticket/8718)'
  id: totrans-5416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8718](https://www.sqlalchemy.org/trac/ticket/8718)
- en: '**[bug] [orm declarative]**'
  id: totrans-5417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[bug] [orm declarative]**'
- en: Fixed issues within the declarative typing resolver (i.e. which resolves `ForwardRef`
    objects) where types that were declared for columns in one particular source file
    would raise `NameError` when the ultimate mapped class were in another source
    file. The types are now resolved in terms of the module for each class in which
    the types are used.
  id: totrans-5418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在声明性类型解析器（即解析`ForwardRef`对象的类型）中修复了问题，其中在一个特定源文件中为列声明的类型，当最终映射的类位于另一个源文件中时会引发`NameError`。现在，这些类型根据每个类所在的模块来解析。
- en: 'References: [#8742](https://www.sqlalchemy.org/trac/ticket/8742)'
  id: totrans-5419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8742](https://www.sqlalchemy.org/trac/ticket/8742)
- en: engine
  id: totrans-5420
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-5421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: To better support the use case of iterating [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") and [`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") objects where user-defined exceptions may
    interrupt the iteration, both objects as well as variants such as [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult"), [`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult"), [`AsyncScalarResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult"), [`AsyncMappingResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult") now support context manager usage,
    where the result will be closed at the end of the context manager block.
  id: totrans-5422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了更好地支持迭代[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")和[`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")对象的用例，其中用户定义的异常可能会中断迭代，现在这两个对象以及变体，如[`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")、[`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult")、[`AsyncScalarResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult")、[`AsyncMappingResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult")，现在都支持上下文管理器的使用，其中结果将在上下文管理器块的结束时关闭。
- en: In addition, ensured that all the above mentioned [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") objects include a [`Result.close()`](../core/connections.html#sqlalchemy.engine.Result.close
    "sqlalchemy.engine.Result.close") method as well as [`Result.closed`](../core/connections.html#sqlalchemy.engine.Result.closed
    "sqlalchemy.engine.Result.closed") accessors, including [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") and [`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult") which previously did not have a `.close()`
    method.
  id: totrans-5423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，确保了上述所有[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象都包括一个[`Result.close()`](../core/connections.html#sqlalchemy.engine.Result.close
    "sqlalchemy.engine.Result.close")方法以及[`Result.closed`](../core/connections.html#sqlalchemy.engine.Result.closed
    "sqlalchemy.engine.Result.closed")访问器，包括以前没有`.close()`方法的[`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")和[`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult")。
- en: See also
  id: totrans-5424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Context Manager Support for Result, AsyncResult](whatsnew_20.html#change-8710)'
  id: totrans-5425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[为 Result、AsyncResult 提供上下文管理器支持](whatsnew_20.html#change-8710)'
- en: 'References: [#8710](https://www.sqlalchemy.org/trac/ticket/8710)'
  id: totrans-5426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8710](https://www.sqlalchemy.org/trac/ticket/8710)
- en: '**[engine] [usecase]**'
  id: totrans-5427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [用例]**'
- en: Added new parameter [`PoolEvents.reset.reset_state`](../core/events.html#sqlalchemy.events.PoolEvents.reset.params.reset_state
    "sqlalchemy.events.PoolEvents.reset") parameter to the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event, with deprecation logic in place that
    will continue to accept event hooks using the previous set of arguments. This
    indicates various state information about how the reset is taking place and is
    used to allow custom reset schemes to take place with full context given.
  id: totrans-5428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`PoolEvents.reset.reset_state`](../core/events.html#sqlalchemy.events.PoolEvents.reset.params.reset_state
    "sqlalchemy.events.PoolEvents.reset")参数到[`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")事件，其中包含已经放置了将继续接受使用先前参数集的事件钩子的弃用逻辑。这表示关于重置正在进行的各种状态信息，并且用于允许具有完整上下文的自定义重置方案的执行。
- en: Within this change a fix that’s also backported to 1.4 is included which re-enables
    the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event to continue to take place under all
    circumstances, including when [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") has already “reset” the connection.
  id: totrans-5429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个变化中，包括一个也已经回溯到 1.4 的修复，该修复重新启用了[`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")事件，以便在所有情况下都发生，包括当[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")已经“重置”连接时。
- en: The two changes together allow custom reset schemes to be implemented using
    the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event, instead of the [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") event (which continues to function as
    it always has).
  id: totrans-5430
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这两个更改共同允许使用 [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件来实现自定义重置方案，而不是使用 [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") 事件（它仍然像以前一样运行）。
- en: 'References: [#8717](https://www.sqlalchemy.org/trac/ticket/8717)'
  id: totrans-5431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8717](https://www.sqlalchemy.org/trac/ticket/8717)
- en: '**[engine] [bug] [regression]**'
  id: totrans-5432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [regression]**'
- en: Fixed issue where the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event hook would not be be called in all
    cases when a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") were closed and was in the process of returning
    its DBAPI connection to the connection pool.
  id: totrans-5433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在关闭[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")并正在将其
    DBAPI 连接返回到连接池时，在某些情况下未调用 [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件钩子的问题。
- en: The scenario was when the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") had already emitted `.rollback()` on its DBAPI
    connection within the process of returning the connection to the pool, where it
    would then instruct the connection pool to forego doing its own “reset” to save
    on the additional method call. However, this prevented custom pool reset schemes
    from being used within this hook, as such hooks by definition are doing more than
    just calling `.rollback()`, and need to be invoked under all circumstances. This
    was a regression that appeared in version 1.4.
  id: totrans-5434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 场景是当[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")在将连接返回到池的过程中已经发出了`.rollback()`时，然后它将指示连接池放弃执行自己的“重置”以节省额外的方法调用。但是，这样阻止了在此钩子中使用自定义池重置方案，因为此类钩子定义上做的不仅仅是调用`.rollback()`，并且需要在所有情况下调用。这是版本
    1.4 中出现的退化。
- en: For version 1.4, the [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") remains viable as an alternate event hook
    to use for custom “reset” implementations. Version 2.0 will feature an improved
    version of [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") which is called for additional scenarios
    such as termination of asyncio connections, and is also passed contextual information
    about the reset, to allow for “custom connection reset” schemes which can respond
    to different reset scenarios in different ways.
  id: totrans-5435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于版本 1.4，[`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") 仍然可行作为用于自定义“重置”实现的备用事件钩子。版本 2.0 将提供一个改进的
    [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 版本，该版本将为其他场景调用，例如终止 asyncio 连接，并且还会传递有关重置的上下文信息，以允许对不同的重置方案做出不同的响应。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.43
- en: 'References: [#8717](https://www.sqlalchemy.org/trac/ticket/8717)'
  id: totrans-5437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8717](https://www.sqlalchemy.org/trac/ticket/8717)
- en: sql
  id: totrans-5438
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-5439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Fixed issue which prevented the [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") construct from working properly within
    the context of a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct as well as other potential places
    where “anonymized labels” might be generated, if the literal expression contained
    characters which could interfere with format strings, such as open parenthesis,
    due to an implementation detail of the “anonymous label” structure.
  id: totrans-5440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    构造上下文以及其他可能生成“匿名标签”的地方中，`literal_column()` 构造无法正常工作的问题，如果文字表达式包含可能干扰格式字符串的字符，例如括号，这是由于“匿名标签”结构的实现细节所致。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.43
- en: 'References: [#8724](https://www.sqlalchemy.org/trac/ticket/8724)'
  id: totrans-5442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8724](https://www.sqlalchemy.org/trac/ticket/8724)
- en: typing
  id: totrans-5443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-5444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Corrected various typing issues within the engine and async engine packages.
  id: totrans-5445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在引擎和异步引擎包中纠正了各种类型问题。
- en: postgresql
  id: totrans-5446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-5447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added new methods [`Range.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.contains
    "sqlalchemy.dialects.postgresql.Range.contains") and [`Range.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.contained_by
    "sqlalchemy.dialects.postgresql.Range.contained_by") to the new [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") data object, which mirror the behavior
    of the PostgreSQL `@>` and `<@` operators, as well as the [`comparator_factory.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contains
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contains") and
    [`comparator_factory.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contained_by
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contained_by")
    SQL operator methods. Pull request courtesy Lele Gaifax.
  id: totrans-5448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向新的[`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range")数据对象添加了新的方法[`Range.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.contains
    "sqlalchemy.dialects.postgresql.Range.contains")和[`Range.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.contained_by
    "sqlalchemy.dialects.postgresql.Range.contained_by")，这些方法反映了PostgreSQL的`@>`和`<@`操作符的行为，以及[`comparator_factory.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contains
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contains")和[`comparator_factory.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contained_by
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contained_by")
    SQL操作符方法。来自Lele Gaifax的拉取请求。
- en: 'References: [#8706](https://www.sqlalchemy.org/trac/ticket/8706)'
  id: totrans-5449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8706](https://www.sqlalchemy.org/trac/ticket/8706)
- en: '**[postgresql] [usecase]**'
  id: totrans-5450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Refined the new approach to range objects described at [New RANGE / MULTIRANGE
    support and changes for PostgreSQL backends](whatsnew_20.html#change-7156) to
    accommodate driver-specific range and multirange objects, to better accommodate
    both legacy code as well as when passing results from raw SQL result sets back
    into new range or multirange expressions.
  id: totrans-5451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优化了在[PostgreSQL后端的新RANGE / MULTIRANGE支持和更改](whatsnew_20.html#change-7156)中描述的新范围对象的方法，以适应特定于驱动程序的范围和多范围对象，以更好地适应传统代码以及将结果从原始SQL结果集传回新范围或多范围表达式时。
- en: 'References: [#8690](https://www.sqlalchemy.org/trac/ticket/8690)'
  id: totrans-5452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8690](https://www.sqlalchemy.org/trac/ticket/8690)
- en: mssql
  id: totrans-5453
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-5454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue with [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table"), which when used against a
    temporary table with the SQL Server dialect would fail on some Azure variants,
    due to an unnecessary information schema query that is not supported on those
    server versions. Pull request courtesy Mike Barry.
  id: totrans-5455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对带有SQL Server方言的临时表使用[`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table")的问题，在某些Azure变体上会失败，因为不支持不必要的信息模式查询。来自Mike
    Barry的拉取请求。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯到**：1.4.43
- en: 'References: [#8714](https://www.sqlalchemy.org/trac/ticket/8714)'
  id: totrans-5457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8714](https://www.sqlalchemy.org/trac/ticket/8714)
- en: '**[mssql] [bug] [reflection]**'
  id: totrans-5458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [reflection]**'
- en: 'Fixed issue with [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table"), which when used against a
    view with the SQL Server dialect would erroneously return `False`, due to a regression
    in the 1.4 series which removed support for this on SQL Server. The issue is not
    present in the 2.0 series which uses a different reflection architecture. Test
    support is added to ensure `has_table()` remains working per spec re: views.'
  id: totrans-5459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对[`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table")的问题，当针对带有SQL Server方言的视图时，由于1.4系列中删除了对SQL
    Server的支持而错误地返回`False`。该问题在使用不同反射架构的2.0系列中不存在。添加了测试支持，以确保`has_table()`按照视图的规范仍然正常工作。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯到**：1.4.43
- en: 'References: [#8700](https://www.sqlalchemy.org/trac/ticket/8700)'
  id: totrans-5461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8700](https://www.sqlalchemy.org/trac/ticket/8700)
- en: oracle
  id: totrans-5462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-5463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue where bound parameter names, including those automatically derived
    from similarly-named database columns, which contained characters that normally
    require quoting with Oracle would not be escaped when using “expanding parameters”
    with the Oracle dialect, causing execution errors. The usual “quoting” for bound
    parameters used by the Oracle dialect is not used with the “expanding parameters”
    architecture, so escaping for a large range of characters is used instead, now
    using a list of characters/escapes that are specific to Oracle.
  id: totrans-5464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了绑定参数名称的问题，包括那些从同名数据库列自动派生的参数名称，这些参数名称包含通常需要在Oracle中用引号引用的字符，在使用Oracle方言的“扩展参数”时不会被转义，导致执行错误。
    Oracle方言使用的绑定参数的通常“引用”不适用于“扩展参数”架构，因此现在使用一系列特定于Oracle的字符/转义列表来进行转义。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.43
- en: 'References: [#8708](https://www.sqlalchemy.org/trac/ticket/8708)'
  id: totrans-5466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8708](https://www.sqlalchemy.org/trac/ticket/8708)
- en: '**[oracle] [bug]**'
  id: totrans-5467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue where the `nls_session_parameters` view queried on first connect
    in order to get the default decimal point character may not be available depending
    on Oracle connection modes, and would therefore raise an error. The approach to
    detecting decimal char has been simplified to test a decimal value directly, instead
    of reading system views, which works on any backend / driver.
  id: totrans-5468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在首次连接时查询`nls_session_parameters`视图以获取默认小数点字符可能不可用的问题，具体取决于Oracle连接模式，并且因此会引发错误的问题。检测小数点字符的方法已简化为直接测试小数值，而不是读取系统视图，这适用于任何后端/驱动程序。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.43
- en: 'References: [#8744](https://www.sqlalchemy.org/trac/ticket/8744)'
  id: totrans-5470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8744](https://www.sqlalchemy.org/trac/ticket/8744)
- en: orm
  id: totrans-5471
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-5472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in joined eager loading where an assertion fail would occur with
    a particular combination of outer/inner joined eager loads, when eager loading
    across three mappers where the middle mapper was an inherited subclass mapper.
  id: totrans-5473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在连接的急切加载中出现断言失败的问题，在跨三个映射器进行急切加载时，其中中间映射器是继承的子类映射器时，会发生特定外/内连接急切加载组合的断言失败。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.43
- en: 'References: [#8738](https://www.sqlalchemy.org/trac/ticket/8738)'
  id: totrans-5475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8738](https://www.sqlalchemy.org/trac/ticket/8738)
- en: '**[orm] [bug]**'
  id: totrans-5476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug involving [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") constructs, where combinations of [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") with [`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join"), as well as when using [`Select.join_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from"), would cause the [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") feature as well as the IN criteria needed
    for single-table inheritance queries to not render, in cases where the columns
    clause of the query did not explicitly include the left-hand side entity of the
    JOIN. The correct entity is now transferred to the [`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") object that’s generated internally, so that
    the criteria against the left side entity is correctly added.
  id: totrans-5477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了涉及[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")构造的bug，其中[`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from")与[`Select.join()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join")的组合，以及使用[`Select.join_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from")时，会导致[`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")功能以及单表继承查询所需的IN条件在查询的列子句没有明确包含JOIN左侧实体时不会呈现的bug。现在正确的实体已经传递给内部生成的[`Join`](../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象，以便正确添加对左侧实体的条件。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.43
- en: 'References: [#8721](https://www.sqlalchemy.org/trac/ticket/8721)'
  id: totrans-5479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8721](https://www.sqlalchemy.org/trac/ticket/8721)
- en: '**[orm] [bug]**'
  id: totrans-5480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: An informative exception is now raised when the [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option is used as a loader option added
    to a specific “loader path”, such as when using it within [`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options"). This use is not supported as [`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is only intended to be used as a top level
    loader option. Previously, an internal error would be generated.
  id: totrans-5481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将[`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项作为添加到特定“加载器路径”的加载器选项时，例如在[`Load.options()`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load.options
    "sqlalchemy.orm.Load.options")中使用时，现在会引发一个信息性异常。这种用法不受支持，因为[`with_loader_criteria()`](../orm/queryguide/api.html#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")只打算作为顶级加载器选项使用。以前会生成内部错误。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.4.43
- en: 'References: [#8711](https://www.sqlalchemy.org/trac/ticket/8711)'
  id: totrans-5483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8711](https://www.sqlalchemy.org/trac/ticket/8711)
- en: '**[orm] [bug]**'
  id: totrans-5484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Improved “dictionary mode” for [`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") so that synonym names which refer to primary key
    attribute names may be indicated in the named dictionary.
  id: totrans-5485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`Session.get()`](../orm/session_api.html#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")改进了“字典模式”，以便可以在命名字典中指示引用主键属性名称的同义词名称。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.4.43
- en: 'References: [#8753](https://www.sqlalchemy.org/trac/ticket/8753)'
  id: totrans-5487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8753](https://www.sqlalchemy.org/trac/ticket/8753)
- en: '**[orm] [bug]**'
  id: totrans-5488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where “selectin_polymorphic” loading for inheritance mappers would
    not function correctly if the [`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper") parameter referred to a SQL expression that was not directly
    mapped on the class.
  id: totrans-5489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了继承映射器的“selectin_polymorphic”加载在[`Mapper.polymorphic_on`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.polymorphic_on
    "sqlalchemy.orm.Mapper")参数引用的SQL表达式不直接映射到类时无法正确工作的问题。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个更改也被**回溯**到：1.4.43
- en: 'References: [#8704](https://www.sqlalchemy.org/trac/ticket/8704)'
  id: totrans-5491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8704](https://www.sqlalchemy.org/trac/ticket/8704)
- en: '**[orm] [bug]**'
  id: totrans-5492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the underlying DBAPI cursor would not be closed when using
    the [`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object as an iterator, if a user-defined exception case were raised within the
    iteration process, thereby causing the iterator to be closed by the Python interpreter.
    When using [`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") to create server-side cursors, this would lead
    to the usual MySQL-related issues with server side cursors out of sync, and without
    direct access to the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object, end-user code could not access the cursor
    in order to close it.
  id: totrans-5493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用[`Query`](../orm/queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象作为迭代器时，如果在迭代过程中引发了用户定义的异常情况，底层的DBAPI游标将不会被关闭的问题，从而导致迭代器被Python解释器关闭。当使用[`Query.yield_per()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")创建服务器端游标时，这将导致通常与MySQL相关的服务器端游标不同步的问题，并且由于无法直接访问[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象，最终用户代码无法访问游标以关闭它。
- en: To resolve, a catch for `GeneratorExit` is applied within the iterator method,
    which will close the result object in those cases when the iterator were interrupted,
    and by definition will be closed by the Python interpreter.
  id: totrans-5494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了解决这个问题，在迭代器方法中应用了对`GeneratorExit`的捕获，这将在迭代器被中断时关闭结果对象，并且根据定义将被Python解释器关闭。
- en: As part of this change as implemented for the 1.4 series, ensured that `.close()`
    methods are available on all [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") implementations including [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult"), [`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult"). The 2.0 version of this change also includes
    new context manager patterns for use with [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") classes.
  id: totrans-5495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为实施给1.4系列的这一变更的一部分，确保了所有[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")实现包括[`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")、[`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult")上都有`.close()`方法可用。此变更的2.0版本还包括用于与[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")类一起使用的新上下文管理器模式。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.43
- en: 'References: [#8710](https://www.sqlalchemy.org/trac/ticket/8710)'
  id: totrans-5497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8710](https://www.sqlalchemy.org/trac/ticket/8710)
- en: orm declarative
  id: totrans-5498
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [bug]**'
  id: totrans-5499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Added support in ORM declarative annotations for class names specified for [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"), as well as the name of the [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") symbol itself, to be different names than their direct
    class name, to support scenarios such as where [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped") is imported as `from sqlalchemy.orm import Mapped as
    M`, or where related class names are imported with an alternate name in a similar
    fashion. Additionally, a target class name given as the lead argument for [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") will always supersede the name given in the left
    hand annotation, so that otherwise un-importable names that also don’t match the
    class name can still be used in annotations.
  id: totrans-5500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ORM声明性注释中添加了对为[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")指定的类名的支持，以及[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")符号本身的名称，可以与其直接类名不同，以支持诸如[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped")被导入为`from sqlalchemy.orm import Mapped as M`的情况，或者相关类名以类似方式用替代名称导入的情况。此外，作为[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的主参数给定的目标类名将始终优先于左侧注释中给定的名称，以便仍然可以在注释中使用无法导入的名称，这些名称也不匹配类名。
- en: 'References: [#8759](https://www.sqlalchemy.org/trac/ticket/8759)'
  id: totrans-5501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8759](https://www.sqlalchemy.org/trac/ticket/8759)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-5502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Improved support for legacy 1.4 mappings that use annotations which don’t include
    `Mapped[]`, by ensuring the `__allow_unmapped__` attribute can be used to allow
    such legacy annotations to pass through Annotated Declarative without raising
    an error and without being interpreted in an ORM runtime context. Additionally
    improved the error message generated when this condition is detected, and added
    more documentation for how this situation should be handled. Unfortunately the
    1.4 WARN_SQLALCHEMY_20 migration warning cannot detect this particular configurational
    issue at runtime with its current architecture.
  id: totrans-5503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对使用注释的传统1.4映射的支持，这些注释不包括`Mapped[]`，通过确保`__allow_unmapped__`属性可以用于允许这些传统注释通过Annotated
    Declarative而不会引发错误，并且不会在ORM运行时上下文中被解释。此外，改进了在检测到此条件时生成的错误消息，并为应该如何处理这种情况添加了更多文档。不幸的是，1.4
    WARN_SQLALCHEMY_20迁移警告不能检测到当前架构下的这种特定配置问题。
- en: 'References: [#8692](https://www.sqlalchemy.org/trac/ticket/8692)'
  id: totrans-5504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8692](https://www.sqlalchemy.org/trac/ticket/8692)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-5505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Changed a fundamental configuration behavior of [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), where [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that are explicitly present in the [`Mapper.properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper") dictionary, either directly or enclosed within a mapper
    property object, will now be mapped within the order of how they appear within
    the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    (or other selectable) itself (assuming they are in fact part of that table’s list
    of columns), thereby maintaining the same order of columns in the mapped selectable
    as is instrumented on the mapped class, as well as what renders in an ORM SELECT
    statement for that mapper. Previously (where “previously” means since version
    0.0.1), [`Column`](../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects in the [`Mapper.properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper") dictionary would always be mapped first, ahead of when
    the other columns in the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") would be mapped, causing a discrepancy in the order
    in which the mapper would assign attributes to the mapped class as well as the
    order in which they would render in statements.
  id: totrans-5506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改变了[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")的一个基本配置行为，其中[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象，无论是直接存在于[`Mapper.properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper")字典中，还是包含在映射属性对象中，现在将按照它们在映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")（或其他可选择的对象）中出现的顺序进行映射（假设它们实际上是该表的列列表的一部分），从而保持在映射的可选择对象中列的顺序与在映射类中被实现的顺序相同，以及在ORM
    SELECT语句中呈现的顺序。以前（“以前”指的是自版本0.0.1以来），[`Mapper.properties`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.properties
    "sqlalchemy.orm.Mapper")字典中的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象总是首先被映射，超过映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")中的其他列被映射的顺序，导致映射器分配属性给映射类的顺序与它们在语句中呈现的顺序不一致。
- en: The change most prominently takes place in the way that Declarative assigns
    declared columns to the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), specifically how [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") (or [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")) objects are handled when they have a DDL name
    that is explicitly different from the mapped attribute name, as well as when constructs
    such as [`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred") etc. are used. The new behavior will see the column
    ordering within the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") being the same order in which the attributes are mapped
    onto the class, assigned within the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") itself, and rendered in ORM statements such as SELECT
    statements, independent of how the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") was configured against the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-5507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最显著的变化发生在Declarative分配声明列给[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的方式上，特别是当[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")（或[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")）对象具有与映射属性名称明确不同的DDL名称时，以及当使用[`deferred()`](../orm/queryguide/columns.html#sqlalchemy.orm.deferred
    "sqlalchemy.orm.deferred")等构造时。新行为将使映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")中的列顺序与属性映射到类中的顺序相同，在[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")本身内分配，并在ORM语句中呈现，独立于[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")针对[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")的配置方式。
- en: 'References: [#8705](https://www.sqlalchemy.org/trac/ticket/8705)'
  id: totrans-5508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8705](https://www.sqlalchemy.org/trac/ticket/8705)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-5509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed issue in new dataclass mapping feature where a column declared on the
    decalrative base / abstract base / mixin would leak into the constructor for an
    inheriting subclass under some circumstances.
  id: totrans-5510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在新的 dataclass 映射功能中修复了一个问题，其中在某些情况下，在声明性基类/抽象基类/混合类上声明的列会泄漏到继承子类的构造函数中。
- en: 'References: [#8718](https://www.sqlalchemy.org/trac/ticket/8718)'
  id: totrans-5511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8718](https://www.sqlalchemy.org/trac/ticket/8718)
- en: '**[bug] [orm declarative]**'
  id: totrans-5512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[错误] [ORM声明性]**'
- en: Fixed issues within the declarative typing resolver (i.e. which resolves `ForwardRef`
    objects) where types that were declared for columns in one particular source file
    would raise `NameError` when the ultimate mapped class were in another source
    file. The types are now resolved in terms of the module for each class in which
    the types are used.
  id: totrans-5513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了声明性类型解析器（即解析`ForwardRef`对象的解析器）中的问题，在一个特定源文件中声明的列类型，在最终映射的类位于另一个源文件时会引发`NameError`。现在，这些类型将根据每个类所在的模块进行解析。
- en: 'References: [#8742](https://www.sqlalchemy.org/trac/ticket/8742)'
  id: totrans-5514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8742](https://www.sqlalchemy.org/trac/ticket/8742)
- en: engine
  id: totrans-5515
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-5516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: To better support the use case of iterating [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") and [`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult") objects where user-defined exceptions may
    interrupt the iteration, both objects as well as variants such as [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult"), [`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult"), [`AsyncScalarResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult"), [`AsyncMappingResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult") now support context manager usage,
    where the result will be closed at the end of the context manager block.
  id: totrans-5517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了更好地支持迭代[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")和[`AsyncResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncResult
    "sqlalchemy.ext.asyncio.AsyncResult")对象的用例，用户定义的异常可能会中断迭代，现在这两个对象以及诸如[`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")、[`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult")、[`AsyncScalarResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncScalarResult
    "sqlalchemy.ext.asyncio.AsyncScalarResult")、[`AsyncMappingResult`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncMappingResult
    "sqlalchemy.ext.asyncio.AsyncMappingResult")等变体现在都支持上下文管理器用法，在上下文管理器块结束时将关闭结果。
- en: In addition, ensured that all the above mentioned [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") objects include a [`Result.close()`](../core/connections.html#sqlalchemy.engine.Result.close
    "sqlalchemy.engine.Result.close") method as well as [`Result.closed`](../core/connections.html#sqlalchemy.engine.Result.closed
    "sqlalchemy.engine.Result.closed") accessors, including [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") and [`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult") which previously did not have a `.close()`
    method.
  id: totrans-5518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，确保了所有上述提到的[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象都包括一个[`Result.close()`](../core/connections.html#sqlalchemy.engine.Result.close
    "sqlalchemy.engine.Result.close")方法以及[`Result.closed`](../core/connections.html#sqlalchemy.engine.Result.closed
    "sqlalchemy.engine.Result.closed")访问器，包括之前没有`.close()`方法的[`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")和[`MappingResult`](../core/connections.html#sqlalchemy.engine.MappingResult
    "sqlalchemy.engine.MappingResult")。
- en: See also
  id: totrans-5519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Context Manager Support for Result, AsyncResult](whatsnew_20.html#change-8710)'
  id: totrans-5520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[结果，AsyncResult 的上下文管理器支持](whatsnew_20.html#change-8710)'
- en: 'References: [#8710](https://www.sqlalchemy.org/trac/ticket/8710)'
  id: totrans-5521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8710](https://www.sqlalchemy.org/trac/ticket/8710)
- en: '**[engine] [usecase]**'
  id: totrans-5522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [用例]**'
- en: Added new parameter [`PoolEvents.reset.reset_state`](../core/events.html#sqlalchemy.events.PoolEvents.reset.params.reset_state
    "sqlalchemy.events.PoolEvents.reset") parameter to the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event, with deprecation logic in place that
    will continue to accept event hooks using the previous set of arguments. This
    indicates various state information about how the reset is taking place and is
    used to allow custom reset schemes to take place with full context given.
  id: totrans-5523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 [`PoolEvents.reset.reset_state`](../core/events.html#sqlalchemy.events.PoolEvents.reset.params.reset_state
    "sqlalchemy.events.PoolEvents.reset") 参数到 [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件，同时放置了一套逐渐废弃的逻辑，将继续接受使用先前参数集的事件钩子。这些参数指示了关于重置过程如何进行的各种状态信息，并且用于允许以给定的完整上下文进行自定义重置方案。
- en: Within this change a fix that’s also backported to 1.4 is included which re-enables
    the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event to continue to take place under all
    circumstances, including when [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") has already “reset” the connection.
  id: totrans-5524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个变化中，还包括了一个也被后移至 1.4 版本的修复，该修复重新启用了 [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件，以便在所有情况下都继续发生，包括当 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 已经“重置”连接时。
- en: The two changes together allow custom reset schemes to be implemented using
    the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event, instead of the [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") event (which continues to function as
    it always has).
  id: totrans-5525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这两个变化共同允许使用 [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件来实现自定义重置方案，而不是使用 [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") 事件（其功能保持不变）。
- en: 'References: [#8717](https://www.sqlalchemy.org/trac/ticket/8717)'
  id: totrans-5526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8717](https://www.sqlalchemy.org/trac/ticket/8717)
- en: '**[engine] [bug] [regression]**'
  id: totrans-5527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug] [regression]**'
- en: Fixed issue where the [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") event hook would not be be called in all
    cases when a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") were closed and was in the process of returning
    its DBAPI connection to the connection pool.
  id: totrans-5528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    关闭并正在将其 DBAPI 连接返回到连接池时，[`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") 事件钩子在所有情况下都不会被调用的问题。
- en: The scenario was when the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") had already emitted `.rollback()` on its DBAPI
    connection within the process of returning the connection to the pool, where it
    would then instruct the connection pool to forego doing its own “reset” to save
    on the additional method call. However, this prevented custom pool reset schemes
    from being used within this hook, as such hooks by definition are doing more than
    just calling `.rollback()`, and need to be invoked under all circumstances. This
    was a regression that appeared in version 1.4.
  id: totrans-5529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 场景是当 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    在返回连接到连接池的过程中已经发出了 `.rollback()` 时，它将指示连接池放弃执行其自己的“重置”以节省额外的方法调用。然而，这阻止了在此钩子中使用自定义连接池重置方案，因为这样的钩子定义上做的不仅仅是调用
    `.rollback()`，并且需要在所有情况下调用。这是在版本 1.4 中出现的一个回归。
- en: For version 1.4, the [`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin") remains viable as an alternate event hook
    to use for custom “reset” implementations. Version 2.0 will feature an improved
    version of [`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset") which is called for additional scenarios
    such as termination of asyncio connections, and is also passed contextual information
    about the reset, to allow for “custom connection reset” schemes which can respond
    to different reset scenarios in different ways.
  id: totrans-5530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于版本1.4，[`PoolEvents.checkin()`](../core/events.html#sqlalchemy.events.PoolEvents.checkin
    "sqlalchemy.events.PoolEvents.checkin")仍然可作为用于自定义“重置”实现的备用事件钩子。版本2.0将提供一个改进版本的[`PoolEvents.reset()`](../core/events.html#sqlalchemy.events.PoolEvents.reset
    "sqlalchemy.events.PoolEvents.reset")，用于额外的场景，例如终止asyncio连接，并且还传递有关重置的上下文信息，以允许“自定义连接重置”方案，可以根据不同的重置场景以不同方式响应。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.43
- en: 'References: [#8717](https://www.sqlalchemy.org/trac/ticket/8717)'
  id: totrans-5532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8717](https://www.sqlalchemy.org/trac/ticket/8717)
- en: sql
  id: totrans-5533
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug]**'
  id: totrans-5534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: Fixed issue which prevented the [`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column") construct from working properly within
    the context of a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct as well as other potential places
    where “anonymized labels” might be generated, if the literal expression contained
    characters which could interfere with format strings, such as open parenthesis,
    due to an implementation detail of the “anonymous label” structure.
  id: totrans-5535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，该问题阻止[`literal_column()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal_column
    "sqlalchemy.sql.expression.literal_column")构造在[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造的上下文中正常工作，以及其他可能生成“匿名标签”的地方，如果文字表达式包含可能干扰格式字符串的字符，例如开括号，由于“匿名标签”结构的实现细节。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5536
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.43
- en: 'References: [#8724](https://www.sqlalchemy.org/trac/ticket/8724)'
  id: totrans-5537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8724](https://www.sqlalchemy.org/trac/ticket/8724)
- en: typing
  id: totrans-5538
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打字
- en: '**[typing] [bug]**'
  id: totrans-5539
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[打字] [错误]**'
- en: Corrected various typing issues within the engine and async engine packages.
  id: totrans-5540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 纠正了引擎和异步引擎包中的各种打字问题。
- en: postgresql
  id: totrans-5541
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-5542
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [特性]**'
- en: Added new methods [`Range.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.contains
    "sqlalchemy.dialects.postgresql.Range.contains") and [`Range.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.contained_by
    "sqlalchemy.dialects.postgresql.Range.contained_by") to the new [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") data object, which mirror the behavior
    of the PostgreSQL `@>` and `<@` operators, as well as the [`comparator_factory.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contains
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contains") and
    [`comparator_factory.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contained_by
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contained_by")
    SQL operator methods. Pull request courtesy Lele Gaifax.
  id: totrans-5543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新的方法[`Range.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.contains
    "sqlalchemy.dialects.postgresql.Range.contains")和[`Range.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range.contained_by
    "sqlalchemy.dialects.postgresql.Range.contained_by")到新的[`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range")数据对象中，这些方法反映了PostgreSQL `@>` 和 `<@` 运算符的行为，以及[`comparator_factory.contains()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contains
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contains")和[`comparator_factory.contained_by()`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contained_by
    "sqlalchemy.dialects.postgresql.AbstractRange.comparator_factory.contained_by")
    SQL 运算符方法。感谢Lele Gaifax的拉取请求。
- en: 'References: [#8706](https://www.sqlalchemy.org/trac/ticket/8706)'
  id: totrans-5544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8706](https://www.sqlalchemy.org/trac/ticket/8706)
- en: '**[postgresql] [usecase]**'
  id: totrans-5545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Refined the new approach to range objects described at [New RANGE / MULTIRANGE
    support and changes for PostgreSQL backends](whatsnew_20.html#change-7156) to
    accommodate driver-specific range and multirange objects, to better accommodate
    both legacy code as well as when passing results from raw SQL result sets back
    into new range or multirange expressions.
  id: totrans-5546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 优化了对于[PostgreSQL后端的新 RANGE / MULTIRANGE支持和更改](whatsnew_20.html#change-7156)中描述的范围对象新方法，以适应特定于驱动程序的范围和多范围对象，更好地适应遗留代码以及在将原始
    SQL 结果集返回到新的范围或多范围表达式时的情况。
- en: 'References: [#8690](https://www.sqlalchemy.org/trac/ticket/8690)'
  id: totrans-5547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8690](https://www.sqlalchemy.org/trac/ticket/8690)
- en: mssql
  id: totrans-5548
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-5549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed issue with [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table"), which when used against a
    temporary table with the SQL Server dialect would fail on some Azure variants,
    due to an unnecessary information schema query that is not supported on those
    server versions. Pull request courtesy Mike Barry.
  id: totrans-5550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对具有 SQL Server 方言的临时表使用 [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") 时，在某些 Azure 变体上失败的问题，原因是不支持这些服务器版本上的不必要的信息模式查询。感谢
    Mike Barry 提供的拉取请求。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.43
- en: 'References: [#8714](https://www.sqlalchemy.org/trac/ticket/8714)'
  id: totrans-5552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8714](https://www.sqlalchemy.org/trac/ticket/8714)
- en: '**[mssql] [bug] [reflection]**'
  id: totrans-5553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug] [reflection]**'
- en: 'Fixed issue with [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table"), which when used against a
    view with the SQL Server dialect would erroneously return `False`, due to a regression
    in the 1.4 series which removed support for this on SQL Server. The issue is not
    present in the 2.0 series which uses a different reflection architecture. Test
    support is added to ensure `has_table()` remains working per spec re: views.'
  id: totrans-5554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对具有 SQL Server 方言的视图使用 [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") 时错误地返回`False`的问题，原因是 1.4 系列中的回归删除了对此的支持。在使用不同反射架构的
    2.0 系列中不存在此问题。添加了测试支持，以确保 `has_table()` 在视图方面的工作符合规范。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.43
- en: 'References: [#8700](https://www.sqlalchemy.org/trac/ticket/8700)'
  id: totrans-5556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8700](https://www.sqlalchemy.org/trac/ticket/8700)
- en: oracle
  id: totrans-5557
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [bug]**'
  id: totrans-5558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue where bound parameter names, including those automatically derived
    from similarly-named database columns, which contained characters that normally
    require quoting with Oracle would not be escaped when using “expanding parameters”
    with the Oracle dialect, causing execution errors. The usual “quoting” for bound
    parameters used by the Oracle dialect is not used with the “expanding parameters”
    architecture, so escaping for a large range of characters is used instead, now
    using a list of characters/escapes that are specific to Oracle.
  id: totrans-5559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了绑定参数名称（包括自动从同名数据库列派生的参数名称）中包含通常需要在 Oracle 中用引号引起的字符的问题，在使用 Oracle 方言的“扩展参数”时，这些字符将不会被转义，导致执行错误。Oracle
    方言用于绑定参数的通常“引用”不适用于“扩展参数”架构，因此改为使用一系列特定于 Oracle 的字符/转义进行转义。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.43
- en: 'References: [#8708](https://www.sqlalchemy.org/trac/ticket/8708)'
  id: totrans-5561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8708](https://www.sqlalchemy.org/trac/ticket/8708)
- en: '**[oracle] [bug]**'
  id: totrans-5562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Fixed issue where the `nls_session_parameters` view queried on first connect
    in order to get the default decimal point character may not be available depending
    on Oracle connection modes, and would therefore raise an error. The approach to
    detecting decimal char has been simplified to test a decimal value directly, instead
    of reading system views, which works on any backend / driver.
  id: totrans-5563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在第一次连接时查询`nls_session_parameters`视图以获取默认小数点字符可能不可用的问题，具体取决于 Oracle 连接模式，并因此引发错误的问题。检测小数点字符的方法已经简化为直接测试小数值，而不是读取系统视图，在任何后端
    / 驱动程序上都有效。
- en: 'This change is also **backported** to: 1.4.43'
  id: totrans-5564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.43
- en: 'References: [#8744](https://www.sqlalchemy.org/trac/ticket/8744)'
  id: totrans-5565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8744](https://www.sqlalchemy.org/trac/ticket/8744)
- en: 2.0.0b2
  id: totrans-5566
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.0b2
- en: 'Released: October 20, 2022'
  id: totrans-5567
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2022年10月20日
- en: orm
  id: totrans-5568
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-5569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed the warning that emits when using ORM-enabled update/delete regarding
    evaluation of columns by name, first added in [#4073](https://www.sqlalchemy.org/trac/ticket/4073);
    this warning actually covers up a scenario that otherwise could populate the wrong
    Python value for an ORM mapped attribute depending on what the actual column is,
    so this deprecated case is removed. In 2.0, ORM enabled update/delete uses “auto”
    for “synchronize_session”, which should do the right thing automatically for any
    given UPDATE expression.
  id: totrans-5570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在使用 ORM 启用的 update/delete 时发出的关于按名称评估列的警告，最初在[#4073](https://www.sqlalchemy.org/trac/ticket/4073)中添加；这个警告实际上掩盖了一个场景，否则可能会根据实际列的内容为
    ORM 映射属性填充错误的 Python 值，因此移除了这个已弃用的情况。在 2.0 版本中，ORM 启用的 update/delete 使用“auto”作为“synchronize_session”，这应该自动为任何给定的
    UPDATE 表达式执行正确的操作。
- en: 'References: [#8656](https://www.sqlalchemy.org/trac/ticket/8656)'
  id: totrans-5571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8656](https://www.sqlalchemy.org/trac/ticket/8656)
- en: orm declarative
  id: totrans-5572
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm declarative
- en: '**[orm] [declarative] [usecase]**'
  id: totrans-5573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [usecase]**'
- en: Added support for mapped classes that are also `Generic` subclasses, to be specified
    as a `GenericAlias` object (e.g. `MyClass[str]`) within statements and calls to
    [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect").
  id: totrans-5574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对作为`Generic`子类的映射类的支持，可以在语句和调用[`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect")时指定为`GenericAlias`对象（例如`MyClass[str]`）。
- en: 'References: [#8665](https://www.sqlalchemy.org/trac/ticket/8665)'
  id: totrans-5575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8665](https://www.sqlalchemy.org/trac/ticket/8665)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-5576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Improved the [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") class so that when combined with other mixins
    like [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass"), the order of the classes may be in either
    order.
  id: totrans-5577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了[`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase")类，使其与其他混入类（如[`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")）结合时，类的顺序可以是任意的。
- en: 'References: [#8665](https://www.sqlalchemy.org/trac/ticket/8665)'
  id: totrans-5578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8665](https://www.sqlalchemy.org/trac/ticket/8665)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-5579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug in new ORM typed declarative mappings where the ability to use `Optional[MyClass]`
    or similar forms such as `MyClass | None` in the type annotation for a many-to-one
    relationship was not implemented, leading to errors. Documentation has also been
    added for this use case to the relationship configuration documentation.
  id: totrans-5580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的 ORM 类型化声明映射中的 bug，其中在一对多关系的类型注释中使用`Optional[MyClass]`或类似形式（如`MyClass |
    None`）未实现，导致错误。还向关系配置文档添加了此用例的文档。
- en: 'References: [#8668](https://www.sqlalchemy.org/trac/ticket/8668)'
  id: totrans-5581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8668](https://www.sqlalchemy.org/trac/ticket/8668)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-5582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed issue with new dataclass mapping feature where arguments passed to the
    dataclasses API could sometimes be mis-ordered when dealing with mixins that override
    [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    declarations, leading to initializer problems.
  id: totrans-5583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新数据类映射功能中的问题，当处理覆盖[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")声明的混入类时，传递给数据类 API 的参数有时可能被错误排序，导致初始化问题。
- en: 'References: [#8688](https://www.sqlalchemy.org/trac/ticket/8688)'
  id: totrans-5584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8688](https://www.sqlalchemy.org/trac/ticket/8688)
- en: sql
  id: totrans-5585
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [regression]**'
  id: totrans-5586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [regression]**'
- en: Fixed bug in new “insertmanyvalues” feature where INSERT that included a subquery
    with [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") inside of it would fail to render correctly
    in “insertmanyvalues” format. This affected psycopg2 most directly as “insertmanyvalues”
    is used unconditionally with this driver.
  id: totrans-5587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新“insertmanyvalues”功能中的 bug，其中包含使用[`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam")的子查询的 INSERT 在“insertmanyvalues”格式中无法正确呈现的问题。这主要影响
    psycopg2，因为“insertmanyvalues”在此驱动程序中无条件地使用。
- en: 'References: [#8639](https://www.sqlalchemy.org/trac/ticket/8639)'
  id: totrans-5588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8639](https://www.sqlalchemy.org/trac/ticket/8639)
- en: typing
  id: totrans-5589
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-5590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue where pylance strict mode would report “instance variable
    overrides class variable” when using a method to define `__tablename__`, `__mapper_args__`
    or `__table_args__`.
  id: totrans-5591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pylance 严格模式下报告“实例变量覆盖类变量”的类型问题，当使用方法定义`__tablename__`、`__mapper_args__`或`__table_args__`时。
- en: 'References: [#8645](https://www.sqlalchemy.org/trac/ticket/8645)'
  id: totrans-5592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8645](https://www.sqlalchemy.org/trac/ticket/8645)
- en: '**[typing] [bug]**'
  id: totrans-5593
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue where pylance strict mode would report “partially unknown”
    datatype for the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct.
  id: totrans-5594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pylance 严格模式报告的数据类型“部分未知”的打字问题，对于[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")构造。
- en: 'References: [#8644](https://www.sqlalchemy.org/trac/ticket/8644)'
  id: totrans-5595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8644](https://www.sqlalchemy.org/trac/ticket/8644)
- en: mssql
  id: totrans-5596
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-5597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed regression caused by SQL Server pyodbc change [#8177](https://www.sqlalchemy.org/trac/ticket/8177)
    where we now use `setinputsizes()` by default; for VARCHAR, this fails if the
    character size is greater than 4000 (or 2000, depending on data) characters as
    the incoming datatype is NVARCHAR, which has a limit of 4000 characters, despite
    the fact that VARCHAR can handle unlimited characters. Additional pyodbc-specific
    typing information is now passed to `setinputsizes()` when the datatype’s size
    is > 2000 characters. The change is also applied to the [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") type which was also impacted by this issue for large
    JSON serializations.
  id: totrans-5598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由 SQL Server pyodbc 改变引起的回归问题 [#8177](https://www.sqlalchemy.org/trac/ticket/8177)，我们现在默认使用
    `setinputsizes()`；对于 VARCHAR，如果字符大小大于 4000（或 2000，取决于数据），则会失败，因为传入的数据类型是 NVARCHAR，它的字符限制为
    4000 个字符，尽管 VARCHAR 可以处理无限字符。当数据类型的大小>2000个字符时，现在会将额外的 pyodbc 特定的类型信息传递给`setinputsizes()`。此更改也适用于
    [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON "sqlalchemy.types.JSON")
    类型，对于大型 JSON 序列化也受到此问题的影响。
- en: 'References: [#8661](https://www.sqlalchemy.org/trac/ticket/8661)'
  id: totrans-5599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8661](https://www.sqlalchemy.org/trac/ticket/8661)
- en: '**[mssql] [bug]**'
  id: totrans-5600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: The [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    construct restores itself to the DDL behavior it had prior to the 1.4 series,
    where creating a [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") with no additional arguments will emit a simple
    `CREATE SEQUENCE` instruction **without** any additional parameters for “start
    value”. For most backends, this is how things worked previously in any case; **however**,
    for MS SQL Server, the default value on this database is `-2**63`; to prevent
    this generally impractical default from taking effect on SQL Server, the [`Sequence.start`](../core/defaults.html#sqlalchemy.schema.Sequence.params.start
    "sqlalchemy.schema.Sequence") parameter should be provided. As usage of [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") is unusual for SQL Server which for many years has
    standardized on `IDENTITY`, it is hoped that this change has minimal impact.
  id: totrans-5601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    构造将自身恢复到 1.4 系列之前的 DDL 行为，其中创建没有其他参数的 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 将发出一个简单的 `CREATE SEQUENCE` 指令 **而不带有** 任何额外的“开始值”参数。对于大多数后端，这是以前的工作方式；**然而**，对于
    MS SQL Server，默认值是 `-2**63`；为了防止此通常不切实际的默认值在 SQL Server 上生效，应该提供 [`Sequence.start`](../core/defaults.html#sqlalchemy.schema.Sequence.params.start
    "sqlalchemy.schema.Sequence") 参数。由于多年来对 SQL Server 的标准化采用了`IDENTITY`，因此希望这种更改影响较小。'
- en: See also
  id: totrans-5602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[The Sequence construct reverts to not having any explicit default “start”
    value; impacts MS SQL Server](whatsnew_20.html#change-7211)'
  id: totrans-5603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[序列构造不再具有任何显式默认的“开始”值；影响 MS SQL Server](whatsnew_20.html#change-7211)'
- en: 'References: [#7211](https://www.sqlalchemy.org/trac/ticket/7211)'
  id: totrans-5604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7211](https://www.sqlalchemy.org/trac/ticket/7211)
- en: orm
  id: totrans-5605
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bug]**'
  id: totrans-5606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Removed the warning that emits when using ORM-enabled update/delete regarding
    evaluation of columns by name, first added in [#4073](https://www.sqlalchemy.org/trac/ticket/4073);
    this warning actually covers up a scenario that otherwise could populate the wrong
    Python value for an ORM mapped attribute depending on what the actual column is,
    so this deprecated case is removed. In 2.0, ORM enabled update/delete uses “auto”
    for “synchronize_session”, which should do the right thing automatically for any
    given UPDATE expression.
  id: totrans-5607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了使用ORM启用的更新/删除时发出的警告，该警告最初在[#4073](https://www.sqlalchemy.org/trac/ticket/4073)中添加；这个警告实际上掩盖了一个场景，否则可能会根据实际列而为ORM映射的属性填充错误的Python值，因此此弃用的情况已被移除。在2.0中，ORM启用的更新/删除使用“auto”作为“synchronize_session”，这应该自动处理任何给定的更新表达式。
- en: 'References: [#8656](https://www.sqlalchemy.org/trac/ticket/8656)'
  id: totrans-5608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8656](https://www.sqlalchemy.org/trac/ticket/8656)
- en: orm declarative
  id: totrans-5609
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm 声明
- en: '**[orm] [declarative] [usecase]**'
  id: totrans-5610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [usecase]**'
- en: Added support for mapped classes that are also `Generic` subclasses, to be specified
    as a `GenericAlias` object (e.g. `MyClass[str]`) within statements and calls to
    [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect").
  id: totrans-5611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对作为`Generic`子类的映射类的支持，可以在语句和对 [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") 的调用中指定为`GenericAlias`对象（例如 `MyClass[str]`）。
- en: 'References: [#8665](https://www.sqlalchemy.org/trac/ticket/8665)'
  id: totrans-5612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8665](https://www.sqlalchemy.org/trac/ticket/8665)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-5613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Improved the [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") class so that when combined with other mixins
    like [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass"), the order of the classes may be in either
    order.
  id: totrans-5614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 [`DeclarativeBase`](../orm/mapping_api.html#sqlalchemy.orm.DeclarativeBase
    "sqlalchemy.orm.DeclarativeBase") 类，使其与其他混合类（如 [`MappedAsDataclass`](../orm/mapping_api.html#sqlalchemy.orm.MappedAsDataclass
    "sqlalchemy.orm.MappedAsDataclass")）结合时，类的顺序可以是任意的。
- en: 'References: [#8665](https://www.sqlalchemy.org/trac/ticket/8665)'
  id: totrans-5615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8665](https://www.sqlalchemy.org/trac/ticket/8665)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-5616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed bug in new ORM typed declarative mappings where the ability to use `Optional[MyClass]`
    or similar forms such as `MyClass | None` in the type annotation for a many-to-one
    relationship was not implemented, leading to errors. Documentation has also been
    added for this use case to the relationship configuration documentation.
  id: totrans-5617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的 ORM 类型化声明映射中使用 `Optional[MyClass]` 或类似形式（如 `MyClass | None`）的类型注释来定义多对一关系时未实现的问题，导致错误。文档还为此用例添加了关系配置文档。
- en: 'References: [#8668](https://www.sqlalchemy.org/trac/ticket/8668)'
  id: totrans-5618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8668](https://www.sqlalchemy.org/trac/ticket/8668)
- en: '**[orm] [declarative] [bug]**'
  id: totrans-5619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [declarative] [bug]**'
- en: Fixed issue with new dataclass mapping feature where arguments passed to the
    dataclasses API could sometimes be mis-ordered when dealing with mixins that override
    [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column "sqlalchemy.orm.mapped_column")
    declarations, leading to initializer problems.
  id: totrans-5620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新数据类映射功能的问题，当处理覆盖[`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column")声明的混合类时，有时会出现参数被错误排序的情况，导致初始化问题。
- en: 'References: [#8688](https://www.sqlalchemy.org/trac/ticket/8688)'
  id: totrans-5621
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8688](https://www.sqlalchemy.org/trac/ticket/8688)
- en: sql
  id: totrans-5622
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [bug] [regression]**'
  id: totrans-5623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug] [regression]**'
- en: Fixed bug in new “insertmanyvalues” feature where INSERT that included a subquery
    with [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") inside of it would fail to render correctly
    in “insertmanyvalues” format. This affected psycopg2 most directly as “insertmanyvalues”
    is used unconditionally with this driver.
  id: totrans-5624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了新的“insertmanyvalues”功能中的 bug，在包含 [`bindparam()`](../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 的子查询的 INSERT 中，以“insertmanyvalues”格式正确呈现时会失败。这主要直接影响到
    psycopg2，因为“insertmanyvalues”在此驱动程序中无条件使用。
- en: 'References: [#8639](https://www.sqlalchemy.org/trac/ticket/8639)'
  id: totrans-5625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8639](https://www.sqlalchemy.org/trac/ticket/8639)
- en: typing
  id: totrans-5626
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [bug]**'
  id: totrans-5627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue where pylance strict mode would report “instance variable
    overrides class variable” when using a method to define `__tablename__`, `__mapper_args__`
    or `__table_args__`.
  id: totrans-5628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pylance 严格模式报告“实例变量覆盖类变量”时的类型问题，该问题出现在使用方法定义`__tablename__`、`__mapper_args__`或`__table_args__`时。
- en: 'References: [#8645](https://www.sqlalchemy.org/trac/ticket/8645)'
  id: totrans-5629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8645](https://www.sqlalchemy.org/trac/ticket/8645)
- en: '**[typing] [bug]**'
  id: totrans-5630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [bug]**'
- en: Fixed typing issue where pylance strict mode would report “partially unknown”
    datatype for the [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") construct.
  id: totrans-5631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pylance 严格模式报告 [`mapped_column()`](../orm/mapping_api.html#sqlalchemy.orm.mapped_column
    "sqlalchemy.orm.mapped_column") 构造的“部分未知”数据类型的类型问题。
- en: 'References: [#8644](https://www.sqlalchemy.org/trac/ticket/8644)'
  id: totrans-5632
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8644](https://www.sqlalchemy.org/trac/ticket/8644)
- en: mssql
  id: totrans-5633
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [bug]**'
  id: totrans-5634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: Fixed regression caused by SQL Server pyodbc change [#8177](https://www.sqlalchemy.org/trac/ticket/8177)
    where we now use `setinputsizes()` by default; for VARCHAR, this fails if the
    character size is greater than 4000 (or 2000, depending on data) characters as
    the incoming datatype is NVARCHAR, which has a limit of 4000 characters, despite
    the fact that VARCHAR can handle unlimited characters. Additional pyodbc-specific
    typing information is now passed to `setinputsizes()` when the datatype’s size
    is > 2000 characters. The change is also applied to the [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") type which was also impacted by this issue for large
    JSON serializations.
  id: totrans-5635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由 SQL Server pyodbc 更改引起的回归已修复 [#8177](https://www.sqlalchemy.org/trac/ticket/8177)
    现在默认使用 `setinputsizes()`；对于 VARCHAR，如果字符大小大于 4000（或 2000，取决于数据），则会失败，因为传入的数据类型是
    NVARCHAR，其限制为 4000 个字符，尽管 VARCHAR 可以处理无限字符。当数据类型的大小 > 2000 个字符时，现在还会将额外的 pyodbc
    特定的类型信息传递给 `setinputsizes()`。这一变化也适用于受此问题影响的大型 JSON 序列化的 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") ���型。
- en: 'References: [#8661](https://www.sqlalchemy.org/trac/ticket/8661)'
  id: totrans-5636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8661](https://www.sqlalchemy.org/trac/ticket/8661)
- en: '**[mssql] [bug]**'
  id: totrans-5637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [bug]**'
- en: The [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    construct restores itself to the DDL behavior it had prior to the 1.4 series,
    where creating a [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") with no additional arguments will emit a simple
    `CREATE SEQUENCE` instruction **without** any additional parameters for “start
    value”. For most backends, this is how things worked previously in any case; **however**,
    for MS SQL Server, the default value on this database is `-2**63`; to prevent
    this generally impractical default from taking effect on SQL Server, the [`Sequence.start`](../core/defaults.html#sqlalchemy.schema.Sequence.params.start
    "sqlalchemy.schema.Sequence") parameter should be provided. As usage of [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") is unusual for SQL Server which for many years has
    standardized on `IDENTITY`, it is hoped that this change has minimal impact.
  id: totrans-5638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence")
    构造在 1.4 系列之前恢复了其 DDL 行为，其中创建一个没有额外参数的 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 将发出一个简单的 `CREATE SEQUENCE` 指令，**没有** 任何额外的“起始值”参数。对于大多数后端，无论如何，这就是以前的工作方式；**然而**，对于
    MS SQL Server，该数据库上的默认值是 `-2**63`；为了防止这个通常不切实际的默认值在 SQL Server 上生效，应提供 [`Sequence.start`](../core/defaults.html#sqlalchemy.schema.Sequence.params.start
    "sqlalchemy.schema.Sequence") 参数。由于在 SQL Server 中使用 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") 是不寻常的，多年来一直在 `IDENTITY` 上标准化，希望这一变化影响最小。'
- en: See also
  id: totrans-5639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[The Sequence construct reverts to not having any explicit default “start”
    value; impacts MS SQL Server](whatsnew_20.html#change-7211)'
  id: totrans-5640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Sequence 构造恢复为没有任何显式默认的“起始”值；影响 MS SQL Server](whatsnew_20.html#change-7211)'
- en: 'References: [#7211](https://www.sqlalchemy.org/trac/ticket/7211)'
  id: totrans-5641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7211](https://www.sqlalchemy.org/trac/ticket/7211)
- en: 2.0.0b1
  id: totrans-5642
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0.0b1
- en: 'Released: October 13, 2022'
  id: totrans-5643
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2022 年 10 月 13 日
- en: general
  id: totrans-5644
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general] [changed]**'
  id: totrans-5645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general] [changed]**'
- en: 'Migrated the codebase to remove all pre-2.0 behaviors and architectures that
    were previously noted as deprecated for removal in 2.0, including, but not limited
    to:'
  id: totrans-5646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 迁移代码库以删除所有在 2.0 版本中被标记为弃用并将被移除的预 2.0 行为和架构，包括但不限于：
- en: removal of all Python 2 code, minimum version is now Python 3.7
  id: totrans-5647
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除所有 Python 2 代码，最低版本现在是 Python 3.7
- en: '[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    now use the new 2.0 style of working, which includes “autobegin”, library level
    autocommit removed, subtransactions and “branched” connections removed'
  id: totrans-5648
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    和 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    现在使用新的 2.0 风格工作，其中包括 “autobegin”，库级别的 autocommit 已移除，子事务和 “branched” 连接已移除'
- en: Result objects use 2.0-style behaviors; [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") is fully a named tuple without “mapping” behavior, use
    [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    for “mapping” behavior
  id: totrans-5649
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果对象使用 2.0 风格行为；[`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    完全是一个命名元组，没有“映射”行为，使用 [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") 用于“映射”行为
- en: All Unicode encoding/decoding architecture has been removed from SQLAlchemy.
    All modern DBAPI implementations support Unicode transparently thanks to Python
    3, so the `convert_unicode` feature as well as related mechanisms to look for
    bytestrings in DBAPI `cursor.description` etc. have been removed.
  id: totrans-5650
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLAlchemy中的所有Unicode编码/解码架构已被移除。所有现代DBAPI实现都通过Python 3透明地支持Unicode，因此已移除了`convert_unicode`功能以及在DBAPI`cursor.description`中查找字节串等相关机制。
- en: The `.bind` attribute and parameter from [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), and from all DDL/DML/DQL elements that previously
    could refer to a “bound engine”
  id: totrans-5651
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")、[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")以及以前可能引用“绑定引擎”的所有DDL/DML/DQL元素中删除了`.bind`属性和参数。
- en: The standalone `sqlalchemy.orm.mapper()` function is removed; all classical
    mapping should be done through the [`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method of [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry").
  id: totrans-5652
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立的`sqlalchemy.orm.mapper()`函数已移除；所有经典映射应通过[`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")的`registry.map_imperatively()`方法完成。
- en: The [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method no longer accepts strings for relationship
    names; the long-documented approach of using `Class.attrname` for join targets
    is now standard.
  id: totrans-5653
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")方法不再接受关系名称的字符串；使用`Class.attrname`作为连接目标的长期记录的方法现在已成为标准。'
- en: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    no longer accepts the “aliased” and “from_joinpoint” arguments'
  id: totrans-5654
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")不再接受“aliased”和“from_joinpoint”参数。'
- en: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    no longer accepts chains of multiple join targets in one method call.'
  id: totrans-5655
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")不再接受一次方法调用中的多个连接目标链。'
- en: '`Query.from_self()`, `Query.select_entity_from()` and `Query.with_polymorphic()`
    are removed.'
  id: totrans-5656
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了`Query.from_self()`，`Query.select_entity_from()`和`Query.with_polymorphic()`。
- en: The [`relationship.cascade_backrefs`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.cascade_backrefs
    "sqlalchemy.orm.relationship") parameter must now remain at its new default of
    `False`; the `save-update` cascade no longer cascades along a backref.
  id: totrans-5657
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`relationship.cascade_backrefs`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.cascade_backrefs
    "sqlalchemy.orm.relationship")参数现在必须保持其新默认值为`False`；`save-update`级联不再沿着反向引用进行级联。'
- en: the [`Session.future`](../orm/session_api.html#sqlalchemy.orm.Session.params.future
    "sqlalchemy.orm.Session") parameter must always be set to `True`. 2.0-style transactional
    patterns for [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    are now always in effect.
  id: totrans-5658
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数[`Session.future`](../orm/session_api.html#sqlalchemy.orm.Session.params.future
    "sqlalchemy.orm.Session")必须始终设置为`True`。 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的事务模式现在始终是2.0风格。
- en: Loader options no longer accept strings for attribute names. The long-documented
    approach of using `Class.attrname` for loader option targets is now standard.
  id: totrans-5659
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载器选项不再接受属性名称的字符串。使用`Class.attrname`作为加载器选项目标的长期记录的方法现在已经成为标准。
- en: Legacy forms of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") removed, including `select([cols])`, the “whereclause”
    and keyword parameters of `some_table.select()`.
  id: totrans-5660
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了`select()`的旧形式，包括`select([cols])`，`some_table.select()`的“whereclause”和关键字参数。
- en: Legacy “in-place mutator” methods on [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") such as `append_whereclause()`, `append_order_by()`
    etc are removed.
  id: totrans-5661
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")上的旧“就地变更器”方法，如`append_whereclause()`、`append_order_by()`等。
- en: Removed the very old “dbapi_proxy” module, which in very early SQLAlchemy releases
    was used to provide a transparent connection pool over a raw DBAPI connection.
  id: totrans-5662
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除了非常古老的“dbapi_proxy”模块，这个模块在早期的SQLAlchemy版本中用于在原始DBAPI连接上提供透明的连接池。
- en: 'References: [#7257](https://www.sqlalchemy.org/trac/ticket/7257)'
  id: totrans-5663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7257](https://www.sqlalchemy.org/trac/ticket/7257)
- en: '**[general] [changed]**'
  id: totrans-5664
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用] [更改]**'
- en: The [`Query.instances()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.instances
    "sqlalchemy.orm.Query.instances") method is deprecated. The behavioral contract
    of this method, which is that it can iterate objects through arbitrary result
    sets, is long obsolete and no longer tested. Arbitrary statements can return objects
    by using constructs such as :meth`.Select.from_statement` or [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased").
  id: totrans-5665
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.instances()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.instances
    "sqlalchemy.orm.Query.instances") 方法已弃用。该方法的行为约定，即它可以通过任意结果集迭代对象，早已过时且不再受测试。可以通过使用诸如
    :meth`.Select.from_statement` 或 [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 等构造来使任意语句返回对象。'
- en: platform
  id: totrans-5666
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 平台
- en: '**[platform] [feature]**'
  id: totrans-5667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[平台] [功能]**'
- en: The SQLAlchemy C extensions have been replaced with all new implementations
    written in Cython. Like the C extensions before, pre-built wheel files for a wide
    range of platforms are available on pypi so that building is not an issue for
    common platforms. For custom builds, `python setup.py build_ext` works as before,
    needing only the additional Cython install. `pyproject.toml` is also part of the
    source now which will establish the proper build dependencies when using pip.
  id: totrans-5668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy 的 C 扩展现已全部替换为用 Cython 编写的全新实现。与之前的 C 扩展一样，在 pypi 上提供了广泛平台的预构建 wheel
    文件，因此对于常见平台来说构建不是问题。对于自定义构建，`python setup.py build_ext` 与以前一样工作，只需要额外的 Cython
    安装。`pyproject.toml` 现在也是源码的一部分，当使用 pip 时将建立正确的构建依赖关系。
- en: See also
  id: totrans-5669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[C Extensions now ported to Cython](whatsnew_20.html#change-7256)'
  id: totrans-5670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[C 扩展现已迁移到 Cython](whatsnew_20.html#change-7256)'
- en: 'References: [#7256](https://www.sqlalchemy.org/trac/ticket/7256)'
  id: totrans-5671
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7256](https://www.sqlalchemy.org/trac/ticket/7256)
- en: '**[platform] [change]**'
  id: totrans-5672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[平台] [变更]**'
- en: SQLAlchemy’s source build and installation now includes a `pyproject.toml` file
    for full [**PEP 517**](https://peps.python.org/pep-0517/) support.
  id: totrans-5673
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy 的源码构建和安装现在包括一个 `pyproject.toml` 文件，以完全支持 [**PEP 517**](https://peps.python.org/pep-0517/)。
- en: See also
  id: totrans-5674
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Installation is now fully pep-517 enabled](whatsnew_20.html#change-7311)'
  id: totrans-5675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[安装现在完全支持 pep-517](whatsnew_20.html#change-7311)'
- en: 'References: [#7311](https://www.sqlalchemy.org/trac/ticket/7311)'
  id: totrans-5676
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7311](https://www.sqlalchemy.org/trac/ticket/7311)
- en: orm
  id: totrans-5677
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature] [sql]**'
  id: totrans-5678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能] [sql]**'
- en: Added new feature to all included dialects that support RETURNING called “insertmanyvalues”.
    This is a generalization of the “fast executemany” feature first introduced for
    the psycopg2 driver in 1.4 at [ORM Batch inserts with psycopg2 now batch statements
    with RETURNING in most cases](migration_14.html#change-5263), which allows the
    ORM to batch INSERT statements into a much more efficient SQL structure while
    still being able to fetch newly generated primary key and SQL default values using
    RETURNING.
  id: totrans-5679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为所有支持 RETURNING 的包含方言添加了一个名为“insertmanyvalues”的新功能。这是对首次在 1.4 版本中为 psycopg2
    驱动程序引入的“fast executemany”功能的泛化，详情请参见 [ORM Batch inserts with psycopg2 now batch
    statements with RETURNING in most cases](migration_14.html#change-5263)，它允许 ORM
    将 INSERT 语句批量处理为更高效的 SQL 结构，同时仍能够使用 RETURNING 获取新生成的主键和 SQL 默认值。
- en: The feature now applies to the many dialects that support RETURNING along with
    multiple VALUES constructs for INSERT, including all PostgreSQL drivers, SQLite,
    MariaDB, MS SQL Server. Separately, the Oracle dialect also gains the same capability
    using native cx_Oracle or OracleDB features.
  id: totrans-5680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在该功能适用于许多支持 RETURNING 和多个 VALUES 构造用于 INSERT 的方言，包括所有 PostgreSQL 驱动程序、SQLite、MariaDB、MS
    SQL Server。另外，Oracle 方言也通过使用本机 cx_Oracle 或 OracleDB 功能获得了相同的能力。
- en: 'References: [#6047](https://www.sqlalchemy.org/trac/ticket/6047)'
  id: totrans-5681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6047](https://www.sqlalchemy.org/trac/ticket/6047)
- en: '**[orm] [feature]**'
  id: totrans-5682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new parameter [`AttributeEvents.include_key`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents"), which will include the dictionary or list key
    for operations such as `__setitem__()` (e.g. `obj[key] = value`) and `__delitem__()`
    (e.g. `del obj[key]`), using a new keyword parameter “key” or “keys”, depending
    on event, e.g. [`AttributeEvents.append.key`](../orm/events.html#sqlalchemy.orm.AttributeEvents.append.params.key
    "sqlalchemy.orm.AttributeEvents.append"), [`AttributeEvents.bulk_replace.keys`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace.params.keys
    "sqlalchemy.orm.AttributeEvents.bulk_replace"). This allows event handlers to
    take into account the key that was passed to the operation and is of particular
    importance for dictionary operations working with [`MappedCollection`](../orm/collection_api.html#sqlalchemy.orm.MappedCollection
    "sqlalchemy.orm.MappedCollection").
  id: totrans-5683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增了新参数[`AttributeEvents.include_key`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents")，将包括字典或列表操作的键，例如`__setitem__()`（例如`obj[key] =
    value`）和`__delitem__()`（例如`del obj[key]`），使用一个新的关键字参数“key”或“keys”，取决于事件，例如[`AttributeEvents.append.key`](../orm/events.html#sqlalchemy.orm.AttributeEvents.append.params.key
    "sqlalchemy.orm.AttributeEvents.append")，[`AttributeEvents.bulk_replace.keys`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace.params.keys
    "sqlalchemy.orm.AttributeEvents.bulk_replace")。这允许事件处理程序考虑传递给操作的键，对于与[`MappedCollection`](../orm/collection_api.html#sqlalchemy.orm.MappedCollection
    "sqlalchemy.orm.MappedCollection")一起工作的字典操作特别重要。
- en: 'References: [#8375](https://www.sqlalchemy.org/trac/ticket/8375)'
  id: totrans-5684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8375](https://www.sqlalchemy.org/trac/ticket/8375)
- en: '**[orm] [feature]**'
  id: totrans-5685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new parameter [`Operators.op.python_impl`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.python_impl
    "sqlalchemy.sql.expression.Operators.op"), available from [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and also when using the `custom_op`
    constructor directly, which allows an in-Python evaluation function to be provided
    along with the custom SQL operator. This evaluation function becomes the implementation
    used when the operator object is used given plain Python objects as operands on
    both sides, and in particular is compatible with the `synchronize_session='evaluate'`
    option used with [ORM-Enabled INSERT, UPDATE, and DELETE statements](../orm/queryguide/dml.html#orm-expression-update-delete).
  id: totrans-5686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增了新参数[`Operators.op.python_impl`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.python_impl
    "sqlalchemy.sql.expression.Operators.op")，可在[`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")以及直接使用`custom_op`构造函数时使用，允许提供一个在Python中进行评估的函数，以及自定义SQL操作符。当操作符对象在两侧使用普通Python对象作为操作数时，此评估函数将成为使用的实现，并且特别兼容与[ORM启用的INSERT、UPDATE和DELETE语句](../orm/queryguide/dml.html#orm-expression-update-delete)一起使用的`synchronize_session='evaluate'`选项。
- en: 'References: [#3162](https://www.sqlalchemy.org/trac/ticket/3162)'
  id: totrans-5687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3162](https://www.sqlalchemy.org/trac/ticket/3162)
- en: '**[orm] [feature]**'
  id: totrans-5688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    (and by extension [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")) now has new state-tracking functionality
    that will proactively trap any unexpected state changes which occur as a particular
    transactional method proceeds. This is to allow situations where the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is being used in a thread-unsafe manner, where event
    hooks or similar may be calling unexpected methods within operations, as well
    as potentially under other concurrency situations such as asyncio or gevent to
    raise an informative message when the illegal access first occurs, rather than
    passing silently leading to secondary failures due to the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") being in an invalid state.
  id: totrans-5689
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")（以及扩展的[`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")）现在具有新的状态跟踪功能，将主动捕获在特定事务方法进行时发生的任何意外状态更改。这是为了允许[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")在线程不安全的方式中使用时，事件钩子或类似的可能在操作中调用意外方法，以及在其他并发情况下（如asyncio或gevent）在非法访问首次发生时引发信息性消息，而不是悄悄地传递导致由于[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")处于无效状态而导致次要故障。'
- en: See also
  id: totrans-5690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Session raises proactively when illegal concurrent or reentrant access is
    detected](whatsnew_20.html#change-7433)'
  id: totrans-5691
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[当检测到非法并发或可重入访问时，会主动引发会话错误](whatsnew_20.html#change-7433)'
- en: 'References: [#7433](https://www.sqlalchemy.org/trac/ticket/7433)'
  id: totrans-5692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7433](https://www.sqlalchemy.org/trac/ticket/7433)
- en: '**[orm] [feature]**'
  id: totrans-5693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: The [`composite()`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")
    mapping construct now supports automatic resolution of values when used with a
    Python `dataclass`; the `__composite_values__()` method no longer needs to be
    implemented as this method is derived from inspection of the dataclass.
  id: totrans-5694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`composite()`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")
    映射构造现在支持与 Python `dataclass` 结合使用时的值自动解析；不再需要实现 `__composite_values__()` 方法，因为该方法是从数据类的检查中派生出来的。'
- en: Additionally, classes mapped by [`composite`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") now support ordering comparison operations, e.g. `<`,
    `>=`, etc.
  id: totrans-5695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，由 [`composite`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")
    映射的类现在支持排序比较操作，例如 `<`、`>=` 等。
- en: See the new documentation at [Composite Column Types](../orm/composites.html#mapper-composite)
    for examples.
  id: totrans-5696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅 [复合列类型](../orm/composites.html#mapper-composite) 的新文档以获取示例。
- en: '**[orm] [feature]**'
  id: totrans-5697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added very experimental feature to the [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") and [`immediateload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload
    "sqlalchemy.orm.immediateload") loader options called [`selectinload.recursion_depth`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload.params.recursion_depth
    "sqlalchemy.orm.selectinload") / [`immediateload.recursion_depth`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload.params.recursion_depth
    "sqlalchemy.orm.immediateload") , which allows a single loader option to automatically
    recurse into self-referential relationships. Is set to an integer indicating depth,
    and may also be set to -1 to indicate to continue loading until no more levels
    deep are found. Major internal changes to [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") and [`immediateload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload
    "sqlalchemy.orm.immediateload") allow this feature to work while continuing to
    make correct use of the compilation cache, as well as not using arbitrary recursion,
    so any level of depth is supported (though would emit that many queries). This
    may be useful for self-referential structures that must be loaded fully eagerly,
    such as when using asyncio.
  id: totrans-5698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了非常实验性的功能到 [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") 和 [`immediateload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload
    "sqlalchemy.orm.immediateload") 加载器选项中，称为 [`selectinload.recursion_depth`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload.params.recursion_depth
    "sqlalchemy.orm.selectinload") / [`immediateload.recursion_depth`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload.params.recursion_depth
    "sqlalchemy.orm.immediateload")，它允许单个加载器选项自动递归到自引用关系。设置为指示深度的整数，并且也可以设置为 -1 以指示继续加载直到不再找到更深的级别为止。
    [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") 和 [`immediateload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload
    "sqlalchemy.orm.immediateload") 的重大内部更改使此功能能够继续正确使用编译缓存，并且不使用任意递归，因此支持任何级别的深度（尽管会发出相应数量的查询）。对于必须完全急切加载的自引用结构，这可能很有用，例如在使用
    asyncio 时。
- en: A warning is also emitted when loader options are connected together with arbitrary
    lengths (that is, without using the new `recursion_depth` option) when excessive
    recursion depth is detected in related object loading. This operation continues
    to use huge amounts of memory and performs extremely poorly; the cache is disabled
    when this condition is detected to protect the cache from being flooded with arbitrary
    statements.
  id: totrans-5699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当在相关对象加载中检测到过度递归深度时（即，未使用新的 `recursion_depth` 选项连接加载器选项的任意长度），还会发出警告。此操作继续使用大量内存，并且性能极差；当检测到此条件时，将禁用缓存以防止缓存被任意语句淹没。
- en: 'References: [#8126](https://www.sqlalchemy.org/trac/ticket/8126)'
  id: totrans-5700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8126](https://www.sqlalchemy.org/trac/ticket/8126)
- en: '**[orm] [feature]**'
  id: totrans-5701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new parameter [`Session.autobegin`](../orm/session_api.html#sqlalchemy.orm.Session.params.autobegin
    "sqlalchemy.orm.Session"), which when set to `False` will prevent the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") from beginning a transaction implicitly. The [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") method must be called explicitly first in order
    to proceed with operations, otherwise an error is raised whenever any operation
    would otherwise have begun automatically. This option can be used to create a
    “safe” [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    that won’t implicitly start new transactions.
  id: totrans-5702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`Session.autobegin`](../orm/session_api.html#sqlalchemy.orm.Session.params.autobegin
    "sqlalchemy.orm.Session")，当设置为`False`时，将阻止[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")隐式开始事务。必须首先显式调用[`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")方法才能继续操作，否则在任何操作本应自动开始事务时都会引发错误。此选项可用于创建一个“安全”的[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，不会隐式启动新事务。
- en: As part of this change, also added a new status variable [`origin`](../orm/session_api.html#sqlalchemy.orm.SessionTransaction.origin
    "sqlalchemy.orm.SessionTransaction.origin") which may be useful for event handling
    code to be aware of the origin of a particular [`SessionTransaction`](../orm/session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  id: totrans-5703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变化的一部分，还添加了一个新的状态变量[`origin`](../orm/session_api.html#sqlalchemy.orm.SessionTransaction.origin
    "sqlalchemy.orm.SessionTransaction.origin")，这对于事件处理代码了解特定[`SessionTransaction`](../orm/session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")的来源可能很有用。
- en: 'References: [#6928](https://www.sqlalchemy.org/trac/ticket/6928)'
  id: totrans-5704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6928](https://www.sqlalchemy.org/trac/ticket/6928)
- en: '**[orm] [feature]**'
  id: totrans-5705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Declarative mixins which use [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that contain [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") references no longer need to use [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") to achieve this mapping; the [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object is copied along with the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") itself when the column is applied to the declared
    mapping.
  id: totrans-5706
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不再需要使用[`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")来实现此映射的声明性混合，其中使用包含[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")引用的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象；当将列应用于声明的映射时，[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")对象将与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")本身一起复制。
- en: '**[orm] [usecase]**'
  id: totrans-5707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Added [`load_only.raiseload`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only.params.raiseload
    "sqlalchemy.orm.load_only") parameter to the [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") loader option, so that the unloaded attributes may
    have “raise” behavior rather than lazy loading. Previously there wasn’t really
    a way to do this with the [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") option directly.
  id: totrans-5708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了[`load_only.raiseload`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only.params.raiseload
    "sqlalchemy.orm.load_only")参数到[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only")加载器选项中，以便未加载的属性可能具有“raise”行为而不是惰性加载。以前，使用[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only")选项没有直接的方法来实现这一点。
- en: '**[orm] [change]**'
  id: totrans-5709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [更改]**'
- en: 'To better accommodate explicit typing, the names of some ORM constructs that
    are typically constructed internally, but nonetheless are sometimes visible in
    messaging as well as typing, have been changed to more succinct names which also
    match the name of their constructing function (with different casing), in all
    cases maintaining aliases to the old names for the forseeable future:'
  id: totrans-5710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了更好地适应显式类型化，一些通常在内部构造但有时也可见于消息传递和类型化的ORM构造的名称已更改为更简洁的名称，这些名称也与构造函数的名称（大小写不同）匹配，在所有情况下都保留了旧名称的别名以备将来使用：
- en: '[`RelationshipProperty`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty") becomes an alias for the primary name [`Relationship`](../orm/internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship"), which is constructed as always from the [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") function'
  id: totrans-5711
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`RelationshipProperty`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty")现在成为主要名称[`Relationship`](../orm/internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship")的别名，始终使用[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")函数构建'
- en: '[`SynonymProperty`](../orm/internals.html#sqlalchemy.orm.SynonymProperty "sqlalchemy.orm.SynonymProperty")
    becomes an alias for the primary name [`Synonym`](../orm/internals.html#sqlalchemy.orm.Synonym
    "sqlalchemy.orm.Synonym"), constructed as always from the [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") function'
  id: totrans-5712
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SynonymProperty`](../orm/internals.html#sqlalchemy.orm.SynonymProperty "sqlalchemy.orm.SynonymProperty")现在成为主要名称[`Synonym`](../orm/internals.html#sqlalchemy.orm.Synonym
    "sqlalchemy.orm.Synonym")的别名，始终使用[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")函数构建'
- en: '[`CompositeProperty`](../orm/internals.html#sqlalchemy.orm.CompositeProperty
    "sqlalchemy.orm.CompositeProperty") becomes an alias for the primary name [`Composite`](../orm/internals.html#sqlalchemy.orm.Composite
    "sqlalchemy.orm.Composite"), constructed as always from the [`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") function'
  id: totrans-5713
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CompositeProperty`](../orm/internals.html#sqlalchemy.orm.CompositeProperty
    "sqlalchemy.orm.CompositeProperty")现在成为主要名称[`Composite`](../orm/internals.html#sqlalchemy.orm.Composite
    "sqlalchemy.orm.Composite")的别名，始终使用[`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")函数构建'
- en: '**[orm] [change]**'
  id: totrans-5714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [change]**'
- en: For consistency with the prominent ORM concept [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped"), the names of the dictionary-oriented collections, [`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection"), [`column_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.column_mapped_collection
    "sqlalchemy.orm.column_mapped_collection"), and [`MappedCollection`](../orm/collection_api.html#sqlalchemy.orm.MappedCollection
    "sqlalchemy.orm.MappedCollection"), are changed to [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict"), [`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict") and [`KeyFuncDict`](../orm/collection_api.html#sqlalchemy.orm.KeyFuncDict
    "sqlalchemy.orm.KeyFuncDict"), using the phrase “dict” to minimize any confusion
    against the term “mapped”. The old names will remain indefinitely with no schedule
    for removal.
  id: totrans-5715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了与突出的ORM概念[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")保持一致，字典导向的集合名称，[`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection")、[`column_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.column_mapped_collection
    "sqlalchemy.orm.column_mapped_collection")和[`MappedCollection`](../orm/collection_api.html#sqlalchemy.orm.MappedCollection
    "sqlalchemy.orm.MappedCollection")的名称被更改为[`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")、[`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict")和[`KeyFuncDict`](../orm/collection_api.html#sqlalchemy.orm.KeyFuncDict
    "sqlalchemy.orm.KeyFuncDict")，使用短语“dict”以减少与术语“mapped”造成的任何混淆。旧名称将无限期保留，没有移除计划。
- en: 'References: [#8608](https://www.sqlalchemy.org/trac/ticket/8608)'
  id: totrans-5716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8608](https://www.sqlalchemy.org/trac/ticket/8608)
- en: '**[orm] [bug]**'
  id: totrans-5717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: All [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    objects will now consistently raise [`ResourceClosedError`](../core/exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError") if they are used after a hard close, which
    includes the “hard close” that occurs after calling “single row or value” methods
    like [`Result.first()`](../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first") and [`Result.scalar()`](../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar"). This was already the behavior of the most
    common class of result objects returned for Core statement executions, i.e. those
    based on [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult"), so this behavior is not new. However, the change
    has been extended to properly accommodate for the ORM “filtering” result objects
    returned when using 2.0 style ORM queries, which would previously behave in “soft
    closed” style of returning empty results, or wouldn’t actually “soft close” at
    all and would continue yielding from the underlying cursor.
  id: totrans-5718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象现在在强制关闭后，无论是在调用“单行或值”方法（如[`Result.first()`](../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first")和[`Result.scalar()`](../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar")）后的“硬关闭”还是其他情况下，都将一致地引发[`ResourceClosedError`](../core/exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError")。这已经是针对核心语句执行返回的最常见类别的结果对象的行为，即基于[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")的对象，因此这种行为并不新鲜。但是，该更改已经扩展到适当地适应使用2.0样式ORM查询时返回的ORM“过滤”结果对象，以前这些对象可能会以返回空结果的“软关闭”方式运行，或者根本不会“软关闭”，并会继续从基础游标中产生结果。
- en: As part of this change, also added [`Result.close()`](../core/connections.html#sqlalchemy.engine.Result.close
    "sqlalchemy.engine.Result.close") to the base [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") class and implemented it for the filtered result implementations
    that are used by the ORM, so that it is possible to call the [`CursorResult.close()`](../core/connections.html#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close") method on the underlying [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") when the `yield_per` execution option is in
    use to close a server side cursor before remaining ORM results have been fetched.
    This was again already available for Core result sets but the change makes it
    available for 2.0 style ORM results as well.
  id: totrans-5719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变化的一部分，还在基本的[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")类中添加了[`Result.close()`](../core/connections.html#sqlalchemy.engine.Result.close
    "sqlalchemy.engine.Result.close")，并且对ORM使用的过滤结果实现进行了实现，这样就可以在使用`yield_per`执行选项关闭服务器端游标之前关闭基础的[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")并获取到剩余的ORM结果。这已经在核心结果集中可用，但是此更改还使得在2.0样式ORM结果中也可用。
- en: 'This change is also **backported** to: 1.4.27'
  id: totrans-5720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.27
- en: 'References: [#7274](https://www.sqlalchemy.org/trac/ticket/7274)'
  id: totrans-5721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7274](https://www.sqlalchemy.org/trac/ticket/7274)
- en: '**[orm] [bug]**'
  id: totrans-5722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`registry.map_declaratively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_declaratively
    "sqlalchemy.orm.registry.map_declaratively") method would return an internal “mapper
    config” object and not the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object as stated in the API documentation.
  id: totrans-5723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`registry.map_declaratively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_declaratively
    "sqlalchemy.orm.registry.map_declaratively")方法返回内部“映射器配置”对象而不是API文档中所述的[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象的问题。
- en: '**[orm] [bug]**'
  id: totrans-5724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed performance regression which appeared at least in version 1.3 if not earlier
    (sometime after 1.0) where the loading of deferred columns, those explicitly mapped
    with [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer "sqlalchemy.orm.defer")
    as opposed to non-deferred columns that were expired, from a joined inheritance
    subclass would not use the “optimized” query which only queried the immediate
    table that contains the unloaded columns, instead running a full ORM query which
    would emit a JOIN for all base tables, which is not necessary when only loading
    columns from the subclass.
  id: totrans-5725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了至少在 1.3 版本中出现的性能回归（如果不是更早，在 1.0 版本之后的某个时候），在加载延迟列时出现，这些列明确地使用 [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") 进行映射，而不是已过期的未延迟列，从联合继承的子类。此时不会使用“优化”的查询，该查询仅查询包含未加载列的直接表，而是运行一个完整的
    ORM 查询，该查询会为所有基本表发出 JOIN，当只从子类加载列时，这是不必要的。
- en: 'References: [#7463](https://www.sqlalchemy.org/trac/ticket/7463)'
  id: totrans-5726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7463](https://www.sqlalchemy.org/trac/ticket/7463)
- en: '**[orm] [bug]**'
  id: totrans-5727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The internals for the [`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load") object and related loader strategy patterns have been mostly
    rewritten, to take advantage of the fact that only attribute-bound paths, not
    strings, are now supported. The rewrite hopes to make it more straightforward
    to address new use cases and subtle issues within the loader strategy system going
    forward.
  id: totrans-5728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load "sqlalchemy.orm.Load")
    对象及相关加载器策略模式的内部大部分被重写，以利用现在仅支持属性绑定路径而不支持字符串的事实。这次重写希望更容易解决加载器策略系统中的新用例和细微问题。'
- en: 'References: [#6986](https://www.sqlalchemy.org/trac/ticket/6986)'
  id: totrans-5729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6986](https://www.sqlalchemy.org/trac/ticket/6986)
- en: '**[orm] [bug]**'
  id: totrans-5730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Made an improvement to the “deferred” / “load_only” set of strategy options
    where if a certain object is loaded from two different logical paths within one
    query, attributes that have been configured by at least one of the options to
    be populated will be populated in all cases, even if other load paths for that
    same object did not set this option. previously, it was based on randomness as
    to which “path” addressed the object first.
  id: totrans-5731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“deferred”/“load_only”一组策略选项进行了改进，在一个查询中从两个不同的逻辑路径加载某个对象时，至少有一个选项配置了要填充的属性将在所有情况下填充，即使该对象的其他加载路径没有设置此选项。之前，基于随机性决定哪个“路径”先处理该对象。
- en: 'References: [#8166](https://www.sqlalchemy.org/trac/ticket/8166)'
  id: totrans-5732
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8166](https://www.sqlalchemy.org/trac/ticket/8166)
- en: '**[orm] [bug]**'
  id: totrans-5733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in ORM enabled UPDATE when the statement is created against a joined-inheritance
    subclass, updating only local table columns, where the “fetch” synchronization
    strategy would not render the correct RETURNING clause for databases that use
    RETURNING for fetch synchronization. Also adjusts the strategy used for RETURNING
    in UPDATE FROM and DELETE FROM statements.
  id: totrans-5734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ORM 启用的 UPDATE 中的问题，当语句针对一个联合继承的子类创建时，只更新本地表列时，“fetch” 同步策略将不会为使用 RETURNING
    进行抓取同步的数据库呈现正确的 RETURNING 子句。还调整了在 UPDATE FROM 和 DELETE FROM 语句中使用的 RETURNING
    策略。
- en: 'References: [#8344](https://www.sqlalchemy.org/trac/ticket/8344)'
  id: totrans-5735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8344](https://www.sqlalchemy.org/trac/ticket/8344)
- en: '**[orm] [bug] [asyncio]**'
  id: totrans-5736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [asyncio]**'
- en: Removed the unused `**kw` arguments from [`begin`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin") and [`begin_nested`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.begin_nested
    "sqlalchemy.ext.asyncio.AsyncSession.begin_nested"). These kw aren’t used and
    appear to have been added to the API in error.
  id: totrans-5737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 [`begin`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin") 和 [`begin_nested`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.begin_nested
    "sqlalchemy.ext.asyncio.AsyncSession.begin_nested") 中删除了未使用的 `**kw` 参数。这些 kw 没有被使用，看起来是错误地添加到
    API 中的。
- en: 'References: [#7703](https://www.sqlalchemy.org/trac/ticket/7703)'
  id: totrans-5738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7703](https://www.sqlalchemy.org/trac/ticket/7703)
- en: '**[orm] [bug]**'
  id: totrans-5739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Changed the attribute access method used by [`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection") and [`column_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.column_mapped_collection
    "sqlalchemy.orm.column_mapped_collection") (now called [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict") and [`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict")) , used when populating the dictionary, to
    assert that the data value on the object to be used as the dictionary key is actually
    present, and is not instead using “None” due to the attribute never being actually
    assigned. This is used to prevent a mis-population of None for a key when assigning
    via a backref where the “key” attribute on the object is not yet assigned.
  id: totrans-5740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了由[`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection")和[`column_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.column_mapped_collection
    "sqlalchemy.orm.column_mapped_collection")使用的属性访问方法（现在称为[`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")和[`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict"))，在填充字典时，会断言对象上的数据值实际上存在，而不是由于属性从未被实际分配而使用“None”。这用于在对象的“键”属性尚未分配时，通过反向引用进行分配时，防止将“None”错误地赋值为键。
- en: As the failure mode here is a transitory condition that is not typically persisted
    to the database, and is easy to produce via the constructor of the class based
    on the order in which parameters are assigned, it is very possible that many applications
    include this behavior already which is silently passed over. To accommodate for
    applications where this error is now raised, a new parameter [`attribute_keyed_dict.ignore_unpopulated_attribute`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict.params.ignore_unpopulated_attribute
    "sqlalchemy.orm.attribute_keyed_dict") is also added to both [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict") and [`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict") that instead causes the erroneous backref
    assignment to be skipped.
  id: totrans-5741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于此处的故障模式是一个通常不会持久到数据库的暂时条件，并且很容易通过类的构造函数根据参数分配的顺序产生，因此很可能许多应用程序已经包含了这种行为，而这种行为是悄悄地被忽略的。为了适应现在引发此错误的应用程序，还添加了一个新参数[`attribute_keyed_dict.ignore_unpopulated_attribute`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict.params.ignore_unpopulated_attribute
    "sqlalchemy.orm.attribute_keyed_dict")到[`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")和[`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict")中，它会导致错误的反向引用赋值被跳过。
- en: 'References: [#8372](https://www.sqlalchemy.org/trac/ticket/8372)'
  id: totrans-5742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8372](https://www.sqlalchemy.org/trac/ticket/8372)
- en: '**[orm] [bug]**'
  id: totrans-5743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added new parameter [`AbstractConcreteBase.strict_attrs`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase.params.strict_attrs
    "sqlalchemy.ext.declarative.AbstractConcreteBase") to the [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") declarative mixin class. The
    effect of this parameter is that the scope of attributes on subclasses is correctly
    limited to the subclass in which each attribute is declared, rather than the previous
    behavior where all attributes of the entire hierarchy are applied to the base
    “abstract” class. This produces a cleaner, more correct mapping where subclasses
    no longer have non-useful attributes on them which are only relevant to sibling
    classes. The default for this parameter is False, which leaves the previous behavior
    unchanged; this is to support existing code that makes explicit use of these attributes
    in queries. To migrate to the newer approach, apply explicit attributes to the
    abstract base class as needed.
  id: totrans-5744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`AbstractConcreteBase.strict_attrs`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase.params.strict_attrs
    "sqlalchemy.ext.declarative.AbstractConcreteBase")到[`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase")声明混合类。此参数的影响是，子类上的属性范围正确地限制在声明每个属性的子类中，而不是之前的行为，其中整个层次结构的所有属性都应用于基本“抽象”类。这产生了一个更干净、更正确的映射，其中子类不再具有仅与兄弟类相关的非有用属性。此参数的默认值为False，这保持了以前的行为不变；这是为了支持使用这些属性进行查询的现有代码。要迁移到更新的方法，根据需要将显式属性应用于抽象基类。
- en: 'References: [#8403](https://www.sqlalchemy.org/trac/ticket/8403)'
  id: totrans-5745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8403](https://www.sqlalchemy.org/trac/ticket/8403)
- en: '**[orm] [bug]**'
  id: totrans-5746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The behavior of [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") regarding primary key and “polymorphic discriminator”
    columns is revised such that these columns are no longer deferrable, either explicitly
    or when using a wildcard such as `defer('*')`. Previously, a wildcard deferral
    would not load PK/polymorphic columns which led to errors in all cases, as the
    ORM relies upon these columns to produce object identities. The behavior of explicit
    deferral of primary key columns is unchanged as these deferrals already were implicitly
    ignored.
  id: totrans-5747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer "sqlalchemy.orm.defer")关于主键和“多态识别器”列的行为已修订，使得这些列不再可延迟，无论是明确还是使用通配符如`defer(''*'')`。以前，通配符延迟不会加载PK/多态列，这导致在所有情况下都会出错，因为ORM依赖于这些列来生成对象标识。主键列的显式延迟的行为不变，因为这些延迟已经被隐式忽略。'
- en: 'References: [#7495](https://www.sqlalchemy.org/trac/ticket/7495)'
  id: totrans-5748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7495](https://www.sqlalchemy.org/trac/ticket/7495)
- en: '**[orm] [bug]**'
  id: totrans-5749
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in the behavior of the [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") parameter such that client-side SQL default or onupdate
    expressions in the table definition alone will trigger a fetch operation using
    RETURNING or SELECT when the ORM emits an INSERT or UPDATE for the row. Previously,
    only server side defaults established as part of table DDL and/or server-side
    onupdate expressions would trigger this fetch, even though client-side SQL expressions
    would be included when the fetch was rendered.
  id: totrans-5750
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper")参数行为中的错误，以便在仅使用表定义中的客户端端SQL默认值或onupdate表达式时，当ORM为行发出INSERT或UPDATE时触发RETURNING或SELECT的抓取操作。以前，只有作为表DDL的一部分或服务器端onupdate表达式建立的服务器端默认值会触发此抓取，即使在呈现抓取时也会包含客户端端SQL表达式。
- en: 'References: [#7438](https://www.sqlalchemy.org/trac/ticket/7438)'
  id: totrans-5751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7438](https://www.sqlalchemy.org/trac/ticket/7438)
- en: engine
  id: totrans-5752
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine] [feature]**'
  id: totrans-5753
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: The [`DialectEvents.handle_error()`](../core/events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event is now moved to the [`DialectEvents`](../core/events.html#sqlalchemy.events.DialectEvents
    "sqlalchemy.events.DialectEvents") suite from the `EngineEvents` suite, and now
    participates in the connection pool “pre ping” event for those dialects that make
    use of disconnect codes in order to detect if the database is live. This allows
    end-user code to alter the state of “pre ping”. Note that this does not include
    dialects which contain a native “ping” method such as that of psycopg2 or most
    MySQL dialects.
  id: totrans-5754
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DialectEvents.handle_error()`](../core/events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") 事件现已从 `EngineEvents` 套件移至 [`DialectEvents`](../core/events.html#sqlalchemy.events.DialectEvents
    "sqlalchemy.events.DialectEvents") 套件，并且现在参与连接池的“预 ping”事件，用于使用断开代码来检测数据库是否活动的方言。这允许最终用户代码更改“预
    ping”的状态。请注意，这不包括包含原生“ping”方法的方言，如 psycopg2 或大多数 MySQL 方言。'
- en: 'References: [#5648](https://www.sqlalchemy.org/trac/ticket/5648)'
  id: totrans-5755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5648](https://www.sqlalchemy.org/trac/ticket/5648)
- en: '**[engine] [feature]**'
  id: totrans-5756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [feature]**'
- en: The [`ConnectionEvents.set_connection_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options") and [`ConnectionEvents.set_engine_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options") event hooks
    now allow the given options dictionary to be modified in-place, where the new
    contents will be received as the ultimate execution options to be acted upon.
    Previously, in-place modifications to the dictionary were not supported.
  id: totrans-5757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.set_connection_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options") 和 [`ConnectionEvents.set_engine_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options") 事件挂钩现在允许就地修改给定的选项字典，新内容将作为最终执行选项接收。以前，不支持对字典进行就地修改。'
- en: '**[engine] [usecase]**'
  id: totrans-5758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [usecase]**'
- en: Generalized the [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter to the base dialect so that it is no longer
    dependent on individual dialects to be present. This parameter sets up the “isolation
    level” setting to occur for all new database connections as soon as they are created
    by the connection pool, where the value then stays set without being reset on
    every checkin.
  id: totrans-5759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") 参数泛化到基本方言，因此不再依赖于个别方言的存在。该参数设置“隔离级别”设置以在连接池创建新数据库连接时立即发生，然后值保持设置而不在每次检查时重置。
- en: The [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter is essentially equivalent in functionality
    to using the [`Engine.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Engine.execution_options.params.isolation_level
    "sqlalchemy.engine.Engine.execution_options") parameter via [`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") for an engine-wide setting. The
    difference is in that the former setting assigns the isolation level just once
    when a connection is created, the latter sets and resets the given level on each
    connection checkout.
  id: totrans-5760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") 参数在功能上基本等同于通过 [`Engine.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Engine.execution_options.params.isolation_level
    "sqlalchemy.engine.Engine.execution_options") 参数使用 [`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") 进行引擎范围设置。区别在于前者设置在创建连接时只分配一次隔离级别，而后者在每次连接检出时设置和重置给定级别。'
- en: 'References: [#6342](https://www.sqlalchemy.org/trac/ticket/6342)'
  id: totrans-5761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6342](https://www.sqlalchemy.org/trac/ticket/6342)
- en: '**[engine] [change]**'
  id: totrans-5762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [change]**'
- en: 'Some small API changes regarding engines and dialects:'
  id: totrans-5763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关引擎和方言的一些小型 API 更改：
- en: 'The [`Dialect.set_isolation_level()`](../core/internals.html#sqlalchemy.engine.Dialect.set_isolation_level
    "sqlalchemy.engine.Dialect.set_isolation_level"), [`Dialect.get_isolation_level()`](../core/internals.html#sqlalchemy.engine.Dialect.get_isolation_level
    "sqlalchemy.engine.Dialect.get_isolation_level"), :meth: dialect methods will
    always be passed the raw DBAPI connection'
  id: totrans-5764
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Dialect.set_isolation_level()`](../core/internals.html#sqlalchemy.engine.Dialect.set_isolation_level
    "sqlalchemy.engine.Dialect.set_isolation_level")，[`Dialect.get_isolation_level()`](../core/internals.html#sqlalchemy.engine.Dialect.get_isolation_level
    "sqlalchemy.engine.Dialect.get_isolation_level")，:meth: 方言方法将始终传递原始的DBAPI连接'
- en: The [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    classes no longer share a base `Connectable` superclass, which has been removed.
  id: totrans-5765
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")和[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")类不再共享基础的`Connectable`超类，该超类已被移除。'
- en: Added a new interface class [`PoolProxiedConnection`](../core/pooling.html#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") - this is the public facing interface
    for the familiar [`_ConnectionFairy`](../core/pooling.html#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") class which is nonetheless a private class.
  id: totrans-5766
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个新的接口类[`PoolProxiedConnection`](../core/pooling.html#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") - 这是熟悉的[`_ConnectionFairy`](../core/pooling.html#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy")类的公共接口，尽管它是一个私有类。
- en: 'References: [#7122](https://www.sqlalchemy.org/trac/ticket/7122)'
  id: totrans-5767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7122](https://www.sqlalchemy.org/trac/ticket/7122)
- en: '**[engine] [bug] [regression]**'
  id: totrans-5768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误] [回归]**'
- en: Fixed regression where the [`CursorResult.fetchmany()`](../core/connections.html#sqlalchemy.engine.CursorResult.fetchmany
    "sqlalchemy.engine.CursorResult.fetchmany") method would fail to autoclose a server-side
    cursor (i.e. when `stream_results` or `yield_per` is in use, either Core or ORM
    oriented results) when the results were fully exhausted.
  id: totrans-5769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`CursorResult.fetchmany()`](../core/connections.html#sqlalchemy.engine.CursorResult.fetchmany
    "sqlalchemy.engine.CursorResult.fetchmany")方法的回归，当结果完全耗尽时，服务器端游标（即在使用`stream_results`或`yield_per`时，无论是Core还是ORM导向的结果）将无法自动关闭。
- en: 'This change is also **backported** to: 1.4.27'
  id: totrans-5770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.4.27
- en: 'References: [#7274](https://www.sqlalchemy.org/trac/ticket/7274)'
  id: totrans-5771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7274](https://www.sqlalchemy.org/trac/ticket/7274)
- en: '**[engine] [bug]**'
  id: totrans-5772
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed issue in future [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") where calling upon [`Engine.begin()`](../core/connections.html#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin") and entering the context manager would not close
    the connection if the actual BEGIN operation failed for some reason, such as an
    event handler raising an exception; this use case failed to be tested for the
    future version of the engine. Note that the “future” context managers which handle
    `begin()` blocks in Core and ORM don’t actually run the “BEGIN” operation until
    the context managers are actually entered. This is different from the legacy version
    which runs the “BEGIN” operation up front.
  id: totrans-5773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了未来[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")中的问题，即调用[`Engine.begin()`](../core/connections.html#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin")并进入上下文管理器，如果实际的BEGIN操作由于某种原因失败，例如事件处理程序引发异常，则连接不会关闭；这种用例未能为未来版本的引擎进行测试。请注意，“未来”上下文管理器处理Core和ORM中的`begin()`块，直到实际进入上下文管理器时才运行“BEGIN”操作。这与立即运行“BEGIN”操作的传统版本不同。
- en: 'This change is also **backported** to: 1.4.27'
  id: totrans-5774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.4.27
- en: 'References: [#7272](https://www.sqlalchemy.org/trac/ticket/7272)'
  id: totrans-5775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7272](https://www.sqlalchemy.org/trac/ticket/7272)
- en: '**[engine] [bug]**'
  id: totrans-5776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: The [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    now ignores `max_overflow` when `pool_size=0`, properly making the pool unlimited
    in all cases.
  id: totrans-5777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")现在在`pool_size=0`时忽略`max_overflow`，在所有情况下正确地使池无限制。'
- en: 'References: [#8523](https://www.sqlalchemy.org/trac/ticket/8523)'
  id: totrans-5778
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8523](https://www.sqlalchemy.org/trac/ticket/8523)
- en: '**[engine] [bug]**'
  id: totrans-5779
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: For improved security, the [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object will now use password obfuscation by default when
    `str(url)` is called. To stringify a URL with cleartext password, the [`URL.render_as_string()`](../core/engines.html#sqlalchemy.engine.URL.render_as_string
    "sqlalchemy.engine.URL.render_as_string") may be used, passing the [`URL.render_as_string.hide_password`](../core/engines.html#sqlalchemy.engine.URL.render_as_string.params.hide_password
    "sqlalchemy.engine.URL.render_as_string") parameter as `False`. Thanks to our
    contributors for this pull request.
  id: totrans-5780
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了提高安全性，当调用 `str(url)` 时，[`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") 对象现在默认使用密码混淆。要以明文密码字符串化 URL，可以使用 [`URL.render_as_string()`](../core/engines.html#sqlalchemy.engine.URL.render_as_string
    "sqlalchemy.engine.URL.render_as_string")，传递 [`URL.render_as_string.hide_password`](../core/engines.html#sqlalchemy.engine.URL.render_as_string.params.hide_password
    "sqlalchemy.engine.URL.render_as_string") 参数为 `False`。感谢我们的贡献者提供此拉取请求。
- en: See also
  id: totrans-5781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[str(engine.url) will obfuscate the password by default](whatsnew_20.html#change-8567)'
  id: totrans-5782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[str(engine.url) 默认情况下将混淆密码](whatsnew_20.html#change-8567)'
- en: 'References: [#8567](https://www.sqlalchemy.org/trac/ticket/8567)'
  id: totrans-5783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8567](https://www.sqlalchemy.org/trac/ticket/8567)
- en: '**[engine] [bug]**'
  id: totrans-5784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: The `Inspector.has_table()` method will now consistently check for views of
    the given name as well as tables. Previously this behavior was dialect dependent,
    with PostgreSQL, MySQL/MariaDB and SQLite supporting it, and Oracle and SQL Server
    not supporting it. Third party dialects should also seek to ensure their `Inspector.has_table()`
    method searches for views as well as tables for the given name.
  id: totrans-5785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Inspector.has_table()` 方法现在将一致性地检查给定名称的视图以及表。先前，这种行为取决于方言，PostgreSQL、MySQL/MariaDB
    和 SQLite 支持它，而 Oracle 和 SQL Server 不支持它。第三方方言也应确保他们的 `Inspector.has_table()` 方法搜索给定名称的视图和表。'
- en: 'References: [#7161](https://www.sqlalchemy.org/trac/ticket/7161)'
  id: totrans-5786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7161](https://www.sqlalchemy.org/trac/ticket/7161)
- en: '**[engine] [bug]**'
  id: totrans-5787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed issue in [`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") method where calling upon [`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") with a single index could in some cases, particularly
    ORM result object cases, cause the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") to yield scalar objects rather than [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, as though the [`Result.scalars()`](../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") method had been called. In SQLAlchemy 1.4,
    this scenario emits a warning that the behavior will change in SQLAlchemy 2.0.
  id: totrans-5788
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") 方法中的问题，在某些情况下，特别是 ORM 结果对象的情况下，调用带有单个索引的 [`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") 可能导致 [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 产生标量对象而不是 [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 对象，就像调用了 [`Result.scalars()`](../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") 方法一样。在 SQLAlchemy 1.4 中，这种情况会发出警告，指出行为将在 SQLAlchemy
    2.0 中更改。
- en: 'References: [#7953](https://www.sqlalchemy.org/trac/ticket/7953)'
  id: totrans-5789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7953](https://www.sqlalchemy.org/trac/ticket/7953)
- en: '**[engine] [bug]**'
  id: totrans-5790
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Passing a [`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator") object such as a [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") to the [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method is deprecated, as this method is
    typed as returning a [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") object, and not a plain scalar value. The [`Connection.scalar()`](../core/connections.html#sqlalchemy.engine.Connection.scalar
    "sqlalchemy.engine.Connection.scalar") method should be used instead, which has
    been reworked with new internal codepaths to suit invoking a SELECT for default
    generation objects without going through the [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method.
  id: totrans-5791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator")对象（如[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")）传递给[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法已弃用，因为该方法被定义为返回[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")对象，而不是普通标量值。应改用[`Connection.scalar()`](../core/connections.html#sqlalchemy.engine.Connection.scalar
    "sqlalchemy.engine.Connection.scalar")方法，该方法已重新设计为通过新的内部代码路径适用于调用 SELECT 以获取默认生成对象，而无需通过[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")方法。
- en: '**[engine] [removed]**'
  id: totrans-5792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [已移除]**'
- en: Removed the previously deprecated `case_sensitive` parameter from [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"), which would impact only the lookup of string column
    names in Core-only result set rows; it had no effect on the behavior of the ORM.
    The effective behavior of what `case_sensitive` refers towards remains at its
    default value of `True`, meaning that string names looked up in `row._mapping`
    will match case-sensitively, just like any other Python mapping.
  id: totrans-5793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已从[`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")中移除先前已弃用的`case_sensitive`参数，该参数仅影响
    Core-only 结果集行中字符串列名的查找；它对 ORM 的行为没有影响。`case_sensitive`所指向的有效行为保持其默认值`True`，意味着在`row._mapping`中查找的字符串名称将区分大小写，就像任何其他
    Python 映射一样。
- en: Note that the `case_sensitive` parameter was not in any way related to the general
    subject of case sensitivity control, quoting, and “name normalization” (i.e. converting
    for databases that consider all uppercase words to be case insensitive) for DDL
    identifier names, which remains a normal core feature of SQLAlchemy.
  id: totrans-5794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，`case_sensitive`参数与一般的大小写敏感性控制、引用和 DDL 标识符名称的“名称规范化”（即转换为将所有大写单词视为不区分大小写的数据库）并无任何关系，后者仍然是
    SQLAlchemy 的常规核心功能。
- en: '**[engine] [removed]**'
  id: totrans-5795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [已移除]**'
- en: Removed legacy and deprecated package `sqlalchemy.databases`. Please use `sqlalchemy.dialects`
    instead.
  id: totrans-5796
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已移除旧版和已弃用的包`sqlalchemy.databases`。请改用`sqlalchemy.dialects`。
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-5797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
- en: '**[engine] [deprecations]**'
  id: totrans-5798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [弃用]**'
- en: The [`create_engine.implicit_returning`](../core/engines.html#sqlalchemy.create_engine.params.implicit_returning
    "sqlalchemy.create_engine") parameter is deprecated on the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function only; the parameter remains available on
    the [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object. This parameter was originally intended to enable the “implicit returning”
    feature of SQLAlchemy when it was first developed and was not enabled by default.
    Under modern use, there’s no reason this parameter should be disabled, and it
    has been observed to cause confusion as it degrades performance and makes it more
    difficult for the ORM to retrieve recently inserted server defaults. The parameter
    remains available on [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    to specifically suit database-level edge cases which make RETURNING infeasible,
    the sole example currently being SQL Server’s limitation that INSERT RETURNING
    may not be used on a table that has INSERT triggers on it.
  id: totrans-5799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.implicit_returning`](../core/engines.html#sqlalchemy.create_engine.params.implicit_returning
    "sqlalchemy.create_engine") 参数仅在 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 函数中已弃用；该参数仍然可用于 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象。该参数最初旨在在SQLAlchemy首次开发时启用“隐式返回”功能，并且不是默认启用的。在现代用法中，没有理由禁用此参数，并且已观察到它会引起混乱，因为它会降低性能，并使ORM更难以检索最近插入的服务器默认值。该参数仍然可用于[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，以特别适应使RETURNING不可行的数据库级边缘情况，目前唯一的示例是SQL Server的限制，即不能在具有INSERT触发器的表上使用INSERT
    RETURNING。'
- en: 'References: [#6962](https://www.sqlalchemy.org/trac/ticket/6962)'
  id: totrans-5800
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6962](https://www.sqlalchemy.org/trac/ticket/6962)
- en: sql
  id: totrans-5801
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-5802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added long-requested case-insensitive string operators [`ColumnOperators.icontains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains"), [`ColumnOperators.istartswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"), [`ColumnOperators.iendswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"), which produce case-insensitive
    LIKE compositions (using ILIKE on PostgreSQL, and the LOWER() function on all
    other backends) to complement the existing LIKE composition operators [`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains"), [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith"), etc. Huge thanks to Matias
    Martinez Rebori for their meticulous and complete efforts in implementing these
    new methods.
  id: totrans-5803
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 添加了长期请求的不区分大小写的字符串操作符 [`ColumnOperators.icontains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains"), [`ColumnOperators.istartswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"), [`ColumnOperators.iendswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")，它们生成不区分大小写的LIKE组合（在PostgreSQL上使用ILIKE，在所有其他后端上使用LOWER()函数），以补充现有的LIKE组合操作符
    [`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains"), [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith") 等。特别感谢Matias Martinez
    Rebori对实现这些新方法的细致和完整的努力。
- en: 'References: [#3482](https://www.sqlalchemy.org/trac/ticket/3482)'
  id: totrans-5804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3482](https://www.sqlalchemy.org/trac/ticket/3482)
- en: '**[sql] [feature]**'
  id: totrans-5805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new syntax to the [`FromClause.c`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection on all [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects allowing tuples of keys to be
    passed to `__getitem__()`, along with support for the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct to handle the resulting tuple-like
    collection directly, allowing the syntax `select(table.c['a', 'b', 'c'])` to be
    possible. The sub-collection returned is itself a [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") which is also directly consumable
    by [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    and similar now.
  id: totrans-5806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在所有[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象的[`FromClause.c`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c")集合上添加了新的语法，允许将键的元组传递给`__getitem()`，以及支持[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造来直接处理结果类似元组的集合，从而使得`select(table.c['a', 'b',
    'c'])`这样的语法成为可能。返回的子集合本身是一个[`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，现在也可以直接被[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")和类似的函数使用。
- en: See also
  id: totrans-5807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting the COLUMNS and FROM clause](../tutorial/data_select.html#tutorial-selecting-columns)'
  id: totrans-5808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置COLUMNS和FROM子句](../tutorial/data_select.html#tutorial-selecting-columns)'
- en: 'References: [#8285](https://www.sqlalchemy.org/trac/ticket/8285)'
  id: totrans-5809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8285](https://www.sqlalchemy.org/trac/ticket/8285)
- en: '**[sql] [feature]**'
  id: totrans-5810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Added new backend-agnostic [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype generalized from the PostgreSQL dialects to
    now be a core type, as well as migrated [`UUID`](../core/type_basics.html#sqlalchemy.types.UUID
    "sqlalchemy.types.UUID") from the PostgreSQL dialect. The SQL Server [`UNIQUEIDENTIFIER`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") datatype also becomes a UUID-handling
    datatype. Thanks to Trevor Gross for the help on this.
  id: totrans-5811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从PostgreSQL方言泛化的新的与后端无关的[`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid")数据类型现在成为核心类型，同时将[`UUID`](../core/type_basics.html#sqlalchemy.types.UUID
    "sqlalchemy.types.UUID")从PostgreSQL方言迁移过来。SQL Server的[`UNIQUEIDENTIFIER`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER")数据类型也成为了一个处理UUID的数据类型。感谢Trevor Gross的帮助。
- en: 'References: [#7212](https://www.sqlalchemy.org/trac/ticket/7212)'
  id: totrans-5812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7212](https://www.sqlalchemy.org/trac/ticket/7212)
- en: '**[sql] [feature]**'
  id: totrans-5813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [特性]**'
- en: Added [`Double`](../core/type_basics.html#sqlalchemy.types.Double "sqlalchemy.types.Double"),
    [`DOUBLE`](../core/type_basics.html#sqlalchemy.types.DOUBLE "sqlalchemy.types.DOUBLE"),
    [`DOUBLE_PRECISION`](../core/type_basics.html#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION") datatypes to the base `sqlalchemy.` module
    namespace, for explicit use of double/double precision as well as generic “double”
    datatypes. Use [`Double`](../core/type_basics.html#sqlalchemy.types.Double "sqlalchemy.types.Double")
    for generic support that will resolve to DOUBLE/DOUBLE PRECISION/FLOAT as needed
    for different backends.
  id: totrans-5814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在基本的`sqlalchemy.`模块命名空间中添加了[`Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double")、[`DOUBLE`](../core/type_basics.html#sqlalchemy.types.DOUBLE
    "sqlalchemy.types.DOUBLE")、[`DOUBLE_PRECISION`](../core/type_basics.html#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION")数据类型，用于明确使用双精度/双精度以及通用的“double”数据类型。使用[`Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double")来获得根据不同后端需要解析为DOUBLE/DOUBLE PRECISION/FLOAT的通用支持。
- en: 'References: [#5465](https://www.sqlalchemy.org/trac/ticket/5465)'
  id: totrans-5815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5465](https://www.sqlalchemy.org/trac/ticket/5465)
- en: '**[sql] [usecase]**'
  id: totrans-5816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Altered the compilation mechanics of the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct such that the “autoincrement primary
    key” column value will be fetched via `cursor.lastrowid` or RETURNING even if
    present in the parameter set or within the [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method as a plain bound value, for
    single-row INSERT statements on specific backends that are known to generate autoincrementing
    values even when explicit NULL is passed. This restores a behavior that was in
    the 1.3 series for both the use case of separate parameter set as well as [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values"). In 1.4, the parameter set behavior
    unintentionally changed to no longer do this, but the [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method would still fetch autoincrement
    values up until 1.4.21 where [#6770](https://www.sqlalchemy.org/trac/ticket/6770)
    changed the behavior yet again again unintentionally as this use case was never
    covered.
  id: totrans-5817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")构造的编译机制，以便在特定后端的单行INSERT语句上获取“自增主键”列值，即使该值存在于参数集或[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")方法中作为普通绑定值。这恢复了1.3系列中的行为，适用于单独参数集以及[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")的用例。在1.4中，参数集行为无意中更改为不再执行此操作，但[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")方法仍会获取自增值，直到1.4.21，其中[#6770](https://www.sqlalchemy.org/trac/ticket/6770)再次无意中更改了行为，因为此用例从未被覆盖。
- en: The behavior is now defined as “working” to suit the case where databases such
    as SQLite, MySQL and MariaDB will ignore an explicit NULL primary key value and
    nonetheless invoke an autoincrement generator.
  id: totrans-5818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在定义的行为为“有效”，以适应SQLite、MySQL和MariaDB等数据库忽略显式NULL主键值并仍调用自增生成器的情况。
- en: 'References: [#7998](https://www.sqlalchemy.org/trac/ticket/7998)'
  id: totrans-5819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7998](https://www.sqlalchemy.org/trac/ticket/7998)
- en: '**[sql] [usecase]**'
  id: totrans-5820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Added modified ISO-8601 rendering (i.e. ISO-8601 with the T converted to a space)
    when using `literal_binds` with the SQL compilers provided by the PostgreSQL,
    MySQL, MariaDB, MSSQL, Oracle dialects. For Oracle, the ISO format is wrapped
    inside of an appropriate TO_DATE() function call. Previously this rendering was
    not implemented for dialect-specific compilation.
  id: totrans-5821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用`literal_binds`与由PostgreSQL、MySQL、MariaDB、MSSQL、Oracle方言提供的SQL编译器时，添加了修改后的ISO-8601渲染（即将T转换为空格的ISO-8601）。对于Oracle，ISO格式被包装在适当的TO_DATE()函数调用中。以前，此渲染未针对特定方言的编译实现。
- en: See also
  id: totrans-5822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[DATE, TIME, DATETIME datatypes now support literal rendering on all backends](whatsnew_20.html#change-5052)'
  id: totrans-5823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[DATE、TIME、DATETIME数据类型现在在所有后端上支持文字渲染](whatsnew_20.html#change-5052)'
- en: 'References: [#5052](https://www.sqlalchemy.org/trac/ticket/5052)'
  id: totrans-5824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5052](https://www.sqlalchemy.org/trac/ticket/5052)
- en: '**[sql] [usecase]**'
  id: totrans-5825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Added new parameter [`HasCTE.add_cte.nest_here`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") to [`HasCTE.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") which will “nest” a given [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") at the level of the parent statement. This parameter
    is equivalent to using the [`HasCTE.cte.nesting`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte") parameter, but may be more intuitive in
    some scenarios as it allows the nesting attribute to be set simultaneously along
    with the explicit level of the CTE.
  id: totrans-5826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`HasCTE.add_cte.nest_here`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte")到[`HasCTE.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte")，该参数将在父语句级别“嵌套”给定的[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")。该参数等同于使用[`HasCTE.cte.nesting`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")参数，但在某些情况下可能更直观，因为它允许同时设置嵌套属性和CTE的显式级别。
- en: The [`HasCTE.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method also accepts multiple CTE objects.
  id: totrans-5827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") 方法也接受多个 CTE 对象。'
- en: 'References: [#7759](https://www.sqlalchemy.org/trac/ticket/7759)'
  id: totrans-5828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#7759](https://www.sqlalchemy.org/trac/ticket/7759)
- en: '**[sql] [bug]**'
  id: totrans-5829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The FROM clauses that are established on a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct when using the [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method will now render first in
    the FROM clause of the rendered SELECT, which serves to maintain the ordering
    of clauses as was passed to the [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method itself without being affected
    by the presence of those clauses also being mentioned in other parts of the query.
    If other elements of the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") also generate FROM clauses, such as the columns
    clause or WHERE clause, these will render after the clauses delivered by [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") assuming they were not explictly
    passed to [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") also. This improvement is useful
    in those cases where a particular database generates a desirable query plan based
    on a particular ordering of FROM clauses and allows full control over the ordering
    of FROM clauses.
  id: totrans-5830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用 [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 方法在一个 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造上建立 FROM 子句时，现在这些子句将首先在所渲染的 SELECT 的 FROM
    子句中呈现，这有助于保持子句的顺序与传递给 [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 方法本身时一致，而不受这些子句也被提及在查询的其他部分中的影响。如果
    [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    的其他元素也生成 FROM 子句，比如 columns 子句或 WHERE 子句，那么这些子句将在由 [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 提供的子句之后呈现，假设它们没有显式地传递给 [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from")。这种改进在某些情况下很有用，其中特定的数据库基于 FROM
    子句的特定顺序生成一个理想的查询计划，并允许完全控制 FROM 子句的顺序。
- en: 'References: [#7888](https://www.sqlalchemy.org/trac/ticket/7888)'
  id: totrans-5831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#7888](https://www.sqlalchemy.org/trac/ticket/7888)
- en: '**[sql] [bug]**'
  id: totrans-5832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Enum.length`](../core/type_basics.html#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum") parameter, which sets the length of the `VARCHAR` column
    for non-native enumeration types, is now used unconditionally when emitting DDL
    for the `VARCHAR` datatype, including when the [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") parameter is set to `True` for target backends that continue
    to use `VARCHAR`. Previously the parameter would be erroneously ignored in this
    case. The warning previously emitted for this case is now removed.
  id: totrans-5833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Enum.length`](../core/type_basics.html#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum") 参数，用于为非本机枚举类型的 `VARCHAR` 列设置长度，现在无条件地在发出 `VARCHAR` 数据类型的
    DDL 时使用，包括当目标后端继续使用 `VARCHAR` 时设置 [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") 参数为 `True` 的情况。在这种情况下，以前会错误地忽略该参数。先前针对这种情况发出的警告现在已删除。'
- en: 'References: [#7791](https://www.sqlalchemy.org/trac/ticket/7791)'
  id: totrans-5834
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#7791](https://www.sqlalchemy.org/trac/ticket/7791)
- en: '**[sql] [bug]**'
  id: totrans-5835
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The in-place type detection for Python integers, as occurs with an expression
    such as `literal(25)`, will now apply value-based adaption as well to accommodate
    Python large integers, where the datatype determined will be [`BigInteger`](../core/type_basics.html#sqlalchemy.types.BigInteger
    "sqlalchemy.types.BigInteger") rather than [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer"). This accommodates for dialects such as that of asyncpg
    which both sends implicit typing information to the driver as well as is sensitive
    to numeric scale.
  id: totrans-5836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Python 整数的就地类型检测，如`literal(25)`所示，现在还将应用基于值的适配以适应 Python 大整数，其中确定的数据类型将是[`BigInteger`](../core/type_basics.html#sqlalchemy.types.BigInteger
    "sqlalchemy.types.BigInteger")而不是[`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")。这适用于像 asyncpg 这样的方言，它既向驱动程序发送隐式类型信息，又对数字规模敏感。
- en: 'References: [#7909](https://www.sqlalchemy.org/trac/ticket/7909)'
  id: totrans-5837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7909](https://www.sqlalchemy.org/trac/ticket/7909)
- en: '**[sql] [bug]**'
  id: totrans-5838
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added `if_exists` and `if_not_exists` parameters for all “Create” / “Drop” constructs
    including [`CreateSequence`](../core/ddl.html#sqlalchemy.schema.CreateSequence
    "sqlalchemy.schema.CreateSequence"), [`DropSequence`](../core/ddl.html#sqlalchemy.schema.DropSequence
    "sqlalchemy.schema.DropSequence"), [`CreateIndex`](../core/ddl.html#sqlalchemy.schema.CreateIndex
    "sqlalchemy.schema.CreateIndex"), [`DropIndex`](../core/ddl.html#sqlalchemy.schema.DropIndex
    "sqlalchemy.schema.DropIndex"), etc. allowing generic “IF EXISTS” / “IF NOT EXISTS”
    phrases to be rendered within DDL. Pull request courtesy Jesse Bakker.
  id: totrans-5839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为所有“创建”/“删除”构造添加了`if_exists`和`if_not_exists`参数，包括[`CreateSequence`](../core/ddl.html#sqlalchemy.schema.CreateSequence
    "sqlalchemy.schema.CreateSequence")、[`DropSequence`](../core/ddl.html#sqlalchemy.schema.DropSequence
    "sqlalchemy.schema.DropSequence")、[`CreateIndex`](../core/ddl.html#sqlalchemy.schema.CreateIndex
    "sqlalchemy.schema.CreateIndex")、[`DropIndex`](../core/ddl.html#sqlalchemy.schema.DropIndex
    "sqlalchemy.schema.DropIndex")等，允许在 DDL 中呈现通用的“IF EXISTS”/“IF NOT EXISTS”短语。感谢
    Jesse Bakker 的拉取请求。
- en: 'References: [#7354](https://www.sqlalchemy.org/trac/ticket/7354)'
  id: totrans-5840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7354](https://www.sqlalchemy.org/trac/ticket/7354)
- en: '**[sql] [bug]**'
  id: totrans-5841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Improved the construction of SQL binary expressions to allow for very long expressions
    against the same associative operator without special steps needed in order to
    avoid high memory use and excess recursion depth. A particular binary operation
    `A op B` can now be joined against another element `op C` and the resulting structure
    will be “flattened” so that the representation as well as SQL compilation does
    not require recursion.
  id: totrans-5842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 SQL 二进制表达式的构造，以允许针对同一关联操作符的非常长的表达式进行处理，而无需特殊步骤以避免高内存使用和过度递归深度。现在，特定的二进制操作`A
    op B`可以与另一个元素`op C`连接，并且结果结构将被“扁平化”，以便表示以及 SQL 编译不需要递归。
- en: One effect of this change is that string concatenation expressions which use
    SQL functions come out as “flat”, e.g. MySQL will now render `concat('x', 'y',
    'z', ...)`` rather than nesting together two-element functions like `concat(concat('x',
    'y'), 'z')`. Third-party dialects which override the string concatenation operator
    will need to implement a new method `def visit_concat_op_expression_clauselist()`
    to accompany the existing `def visit_concat_op_binary()` method.
  id: totrans-5843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改的一个效果是使用 SQL 函数的字符串连接表达式变得“扁平”，例如 MySQL 现在将呈现`concat('x', 'y', 'z', ...)`而不是将两个元素函数嵌套在一起，如`concat(concat('x',
    'y'), 'z')`。覆盖字符串连接运算符的第三方方言将需要实现一个新方法`def visit_concat_op_expression_clauselist()`来配合现有的`def
    visit_concat_op_binary()`方法。
- en: 'References: [#7744](https://www.sqlalchemy.org/trac/ticket/7744)'
  id: totrans-5844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7744](https://www.sqlalchemy.org/trac/ticket/7744)
- en: '**[sql] [bug]**'
  id: totrans-5845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Implemented full support for “truediv” and “floordiv” using the “/” and “//”
    operators. A “truediv” operation between two expressions using [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") now considers the result to be [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), and the dialect-level compilation will cast the right
    operand to a numeric type on a dialect-specific basis to ensure truediv is achieved.
    For floordiv, conversion is also added for those databases that don’t already
    do floordiv by default (MySQL, Oracle) and the `FLOOR()` function is rendered
    in this case, as well as for cases where the right operand is not an integer (needed
    for PostgreSQL, others).
  id: totrans-5846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用“/”和“//”运算符完全支持“truediv”和“floordiv”。两个表达式之间的“truediv”操作现在被认为是[`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")类型的结果，并且方言级别的编译将在方言特定基础上将右操作数转换为数值类型，以确保实现truediv。对于floordiv，还添加了转换，以解决那些不默认执行floordiv的数据库（MySQL、Oracle）以及在这种情况下呈现`FLOOR()`函数的情况，以及右操作数不是整数的情况（对于PostgreSQL等需要的情况）。
- en: The change resolves issues both with inconsistent behavior of the division operator
    on different backends and also fixes an issue where integer division on Oracle
    would fail to be able to fetch a result due to inappropriate outputtypehandlers.
  id: totrans-5847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改解决了不同后端上除法运算符的不一致行为以及修复了一个问题，即在Oracle上的整数除法无法获取结果，因为输出类型处理程序不合适。
- en: See also
  id: totrans-5848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Python division operator performs true division for all backends; added floor
    division](whatsnew_20.html#change-4926)'
  id: totrans-5849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Python除法运算符对所有后端执行真除法；增加了地板除法](whatsnew_20.html#change-4926)'
- en: 'References: [#4926](https://www.sqlalchemy.org/trac/ticket/4926)'
  id: totrans-5850
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#4926](https://www.sqlalchemy.org/trac/ticket/4926)
- en: '**[sql] [bug]**'
  id: totrans-5851
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added an additional lookup step to the compiler which will track all FROM clauses
    which are tables, that may have the same name shared in multiple schemas where
    one of the schemas is the implicit “default” schema; in this case, the table name
    when referring to that name without a schema qualification will be rendered with
    an anonymous alias name at the compiler level in order to disambiguate the two
    (or more) names. The approach of schema-qualifying the normally unqualified name
    with the server-detected “default schema name” value was also considered, however
    this approach doesn’t apply to Oracle nor is it accepted by SQL Server, nor would
    it work with multiple entries in the PostgreSQL search path. The name collision
    issue resolved here has been identified as affecting at least Oracle, PostgreSQL,
    SQL Server, MySQL and MariaDB.
  id: totrans-5852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在编译器中添加了一个额外的查找步骤，将跟踪所有FROM子句，这些子句是表，可能在其中一个模式中共享相同的名称，其中一个模式是隐式的“默认”模式；在这种情况下，对该名称进行引用时不带模式限定符时，表名称将在编译器级别上使用匿名别名来渲染，以消除两个（或多个）名称的歧义。还考虑了使用服务器检测到的“默认模式名称”值对通常不带模式限定符的名称进行模式限定的方法，但是这种方法不适用于Oracle，SQL
    Server也不接受，也不适用于PostgreSQL搜索路径中的多个条目。此处解决的名称冲突问题已被确认至少影响到了Oracle、PostgreSQL、SQL
    Server、MySQL和MariaDB。
- en: 'References: [#7471](https://www.sqlalchemy.org/trac/ticket/7471)'
  id: totrans-5853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#7471](https://www.sqlalchemy.org/trac/ticket/7471)
- en: '**[sql] [bug]**'
  id: totrans-5854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Python string values for which a SQL type is determined from the type of the
    value, mainly when using [`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal"), will now apply the [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") type, rather than the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") datatype, for Python string values that test as “ascii
    only” using Python `str.isascii()`. If the string is not `isascii()`, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") datatype will be bound instead, which was used in
    all string detection previously. This behavior **only applies to in-place detection
    of datatypes when using ``literal()`` or other contexts that have no existing
    datatype**, which is not usually the case under normal [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") comparison operations, where the type of the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") being compared always takes precedence.
  id: totrans-5855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal "sqlalchemy.sql.expression.literal")时，从值的类型确定SQL类型的Python字符串值，现在将应用[`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")类型，而不是[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode")数据类型，对于使用Python `str.isascii()`测试为“仅ascii”的Python字符串值。如果字符串不是`isascii()`，则将绑定[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode")数据类型，而以前所有字符串检测中都使用了它。此行为**仅适用于使用``literal()``或其他没有现有数据类型的上下文中的数据类型的就地检测**，这在正常[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")比较操作下通常不是情况，在这种情况下，被比较的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的类型始终优先。
- en: Use of the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    datatype can determine literal string formatting on backends such as SQL Server,
    where a literal value (i.e. using `literal_binds`) will be rendered as `N'<value>'`
    instead of `'value'`. For normal bound value handling, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") datatype also may have implications for passing values
    to the DBAPI, again in the case of SQL Server, the pyodbc driver supports the
    use of [setinputsizes mode](../dialects/mssql.html#mssql-pyodbc-setinputsizes)
    which will handle [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") versus [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") differently.
  id: totrans-5856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在后端如SQL Server上，使用[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode")数据类型可以确定文字字符串格式，其中文字值（即使用`literal_binds`）将呈现为`N'<value>'`而不是`'value'`。对于正常的绑定值处理，[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode")数据类型还可能对将值传递给DBAPI产生影响，再次以SQL Server为例，pyodbc驱动程序支持使用[setinputsizes模式](../dialects/mssql.html#mssql-pyodbc-setinputsizes)，它将以不同方式处理[`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")与[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode")。
- en: 'References: [#7551](https://www.sqlalchemy.org/trac/ticket/7551)'
  id: totrans-5857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7551](https://www.sqlalchemy.org/trac/ticket/7551)
- en: '**[sql] [bug]**'
  id: totrans-5858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [错误]**'
- en: The [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") will now set the array dimensions to 1.
    Improved [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    processing to accept `None` values as value of a multi-array.
  id: totrans-5859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg "sqlalchemy.sql.functions.array_agg")现在将设置数组维度为1。改进了对`None`值作为多维数组的值的[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")处理。'
- en: 'References: [#7083](https://www.sqlalchemy.org/trac/ticket/7083)'
  id: totrans-5860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7083](https://www.sqlalchemy.org/trac/ticket/7083)
- en: schema
  id: totrans-5861
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [feature]**'
  id: totrans-5862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [特性]**'
- en: Expanded on the “conditional DDL” system implemented by the [`ExecutableDDLElement`](../core/ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") class (renamed from `DDLElement`) to
    be directly available on [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") constructs such as [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), etc. such that the conditional logic
    for generating these elements is included within the default DDL emitting process.
    This system can also be accommodated by a future release of Alembic to support
    conditional DDL elements within all schema-management systems.
  id: totrans-5863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 扩展了由 [`ExecutableDDLElement`](../core/ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") 类实现的“条件DDL”系统（从 `DDLElement` 改名而来），使其直接可用于
    [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    构造，例如 [`Index`](../core/constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")、[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 等，以便在默认的 DDL 发出过程中包含生成这些元素的条件逻辑。此系统也可以在将来的
    Alembic 版本中进行调整，以支持在所有模式管理系统中支持条件 DDL 元素。
- en: See also
  id: totrans-5864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New Conditional DDL for Constraints and Indexes](whatsnew_20.html#ticket-7631)'
  id: totrans-5865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的约束和索引条件 DDL](whatsnew_20.html#ticket-7631)'
- en: 'References: [#7631](https://www.sqlalchemy.org/trac/ticket/7631)'
  id: totrans-5866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7631](https://www.sqlalchemy.org/trac/ticket/7631)
- en: '**[schema] [usecase]**'
  id: totrans-5867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [usecase]**'
- en: Added parameter [`DropConstraint.if_exists`](../core/ddl.html#sqlalchemy.schema.DropConstraint.params.if_exists
    "sqlalchemy.schema.DropConstraint") to the [`DropConstraint`](../core/ddl.html#sqlalchemy.schema.DropConstraint
    "sqlalchemy.schema.DropConstraint") construct which result in “IF EXISTS” DDL
    being added to the DROP statement. This phrase is not accepted by all databases
    and the operation will fail on a database that does not support it as there is
    no similarly compatible fallback within the scope of a single DDL statement. Pull
    request courtesy Mike Fiedler.
  id: totrans-5868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`DropConstraint`](../core/ddl.html#sqlalchemy.schema.DropConstraint "sqlalchemy.schema.DropConstraint")
    构造添加了参数 [`DropConstraint.if_exists`](../core/ddl.html#sqlalchemy.schema.DropConstraint.params.if_exists
    "sqlalchemy.schema.DropConstraint")，该参数导致“IF EXISTS” DDL 被添加到 DROP 语句中。这个短语并不被所有数据库接受，如果一个数据库不支持它，那么该操作将失败，因为在单个
    DDL 语句的范围内没有类似兼容的回退。拉取请求由 Mike Fiedler 提供。
- en: 'References: [#8141](https://www.sqlalchemy.org/trac/ticket/8141)'
  id: totrans-5869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8141](https://www.sqlalchemy.org/trac/ticket/8141)
- en: '**[schema] [usecase]**'
  id: totrans-5870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [usecase]**'
- en: Implemented the DDL event hooks [`DDLEvents.before_create()`](../core/events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create"), [`DDLEvents.after_create()`](../core/events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create"), [`DDLEvents.before_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop"), [`DDLEvents.after_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop") for all [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects that include a distinct CREATE or DROP
    step, when that step is invoked as a distinct SQL statement, including for [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), and PostgreSQL’s [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM").
  id: totrans-5871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了对所有包含单独 CREATE 或 DROP 步骤的 [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") 对象的 DDL 事件钩子 [`DDLEvents.before_create()`](../core/events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create")、[`DDLEvents.after_create()`](../core/events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create")、[`DDLEvents.before_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop")、[`DDLEvents.after_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop")，当该步骤被作为单独的 SQL 语句调用时，包括对 [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")、[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")、[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 和 PostgreSQL 的 [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 的支持。
- en: 'References: [#8394](https://www.sqlalchemy.org/trac/ticket/8394)'
  id: totrans-5872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8394](https://www.sqlalchemy.org/trac/ticket/8394)
- en: '**[schema] [performance]**'
  id: totrans-5873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [性能]**'
- en: Rearchitected the schema reflection API to allow participating dialects to make
    use of high performing batch queries to reflect the schemas of many tables at
    once using fewer queries by an order of magnitude. The new performance features
    are targeted first at the PostgreSQL and Oracle backends, and may be applied to
    any dialect that makes use of SELECT queries against system catalog tables to
    reflect tables. The change also includes new API features and behavioral improvements
    to the [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") object, including consistent, cached
    behavior of methods like [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table"), [`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names") and new methods [`Inspector.has_schema()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_schema
    "sqlalchemy.engine.reflection.Inspector.has_schema") and [`Inspector.has_index()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_index
    "sqlalchemy.engine.reflection.Inspector.has_index").
  id: totrans-5874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重构了模式反射 API，以允许参与的方言使用高性能的批量查询来一次反映多个表的模式，通过数量级减少查询。新的性能特性首先针对 PostgreSQL 和
    Oracle 后端，可以应用于任何使用对系统目录表进行 SELECT 查询以反映表的方言。该更改还包括对[`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")对象的新 API 特性和行为改进，包括一致的、缓存的方法行为，如[`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table")，[`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")以及新方法[`Inspector.has_schema()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_schema
    "sqlalchemy.engine.reflection.Inspector.has_schema")和[`Inspector.has_index()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_index
    "sqlalchemy.engine.reflection.Inspector.has_index")。
- en: See also
  id: totrans-5875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Major Architectural, Performance and API Enhancements for Database Reflection](whatsnew_20.html#change-4379)
    - full background'
  id: totrans-5876
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[数据库反射的主要架构、性能和 API 增强](whatsnew_20.html#change-4379) - 完整背景'
- en: 'References: [#4379](https://www.sqlalchemy.org/trac/ticket/4379)'
  id: totrans-5877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4379](https://www.sqlalchemy.org/trac/ticket/4379)
- en: '**[schema] [bug]**'
  id: totrans-5878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: The warnings that are emitted regarding reflection of indexes or unique constraints,
    when the [`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table") parameter is used to exclude columns that are then
    found to be part of those constraints, have been removed. When the [`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table") parameter is used it should be expected that the resulting
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    construct will not include constraints that rely upon omitted columns. This change
    was made in response to [#8100](https://www.sqlalchemy.org/trac/ticket/8100) which
    repaired [`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table") in conjunction with foreign key constraints that rely
    upon omitted columns, where the use case became clear that omitting such constraints
    should be expected.
  id: totrans-5879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table")参数排除然后发现属于这些约束的列而发出的索引或唯一约束的反射警告已被删除。使用[`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table")参数时，应该预期生成的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")构造不包括依赖于被省略列的约束。此更改是响应于[#8100](https://www.sqlalchemy.org/trac/ticket/8100)，该修复与依赖于省略列的外键约束一起使用[`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table")的用例变得清晰，省略此类约束应该是可以预期的。
- en: 'References: [#8102](https://www.sqlalchemy.org/trac/ticket/8102)'
  id: totrans-5880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8102](https://www.sqlalchemy.org/trac/ticket/8102)
- en: '**[schema] [postgresql]**'
  id: totrans-5881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [postgresql]**'
- en: Added support for comments on [`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") objects, including DDL and reflection; the field
    is added to the base [`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") class and corresponding constructors, however
    PostgreSQL is the only included backend to support the feature right now. See
    parameters such as [`ForeignKeyConstraint.comment`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.comment
    "sqlalchemy.schema.ForeignKeyConstraint"), [`UniqueConstraint.comment`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint.params.comment
    "sqlalchemy.schema.UniqueConstraint") or [`CheckConstraint.comment`](../core/constraints.html#sqlalchemy.schema.CheckConstraint.params.comment
    "sqlalchemy.schema.CheckConstraint").
  id: totrans-5882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加对[`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")对象的注释支持，包括DDL和反射；字段添加到基本[`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")类和相应的构造函数中，但是目前只有PostgreSQL包含的后端支持此功能。请参阅参数，例如[`ForeignKeyConstraint.comment`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.comment
    "sqlalchemy.schema.ForeignKeyConstraint")、[`UniqueConstraint.comment`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint.params.comment
    "sqlalchemy.schema.UniqueConstraint")或[`CheckConstraint.comment`](../core/constraints.html#sqlalchemy.schema.CheckConstraint.params.comment
    "sqlalchemy.schema.CheckConstraint")。
- en: 'References: [#5677](https://www.sqlalchemy.org/trac/ticket/5677)'
  id: totrans-5883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5677](https://www.sqlalchemy.org/trac/ticket/5677)
- en: '**[schema] [mariadb] [mysql]**'
  id: totrans-5884
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [mariadb] [mysql]**'
- en: 'Add support for Partitioning and Sample pages on MySQL and MariaDB reflected
    options. The options are stored in the table dialect options dictionary, so the
    following keyword need to be prefixed with `mysql_` or `mariadb_` depending on
    the backend. Supported options are:'
  id: totrans-5885
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在MySQL和MariaDB中反映选项的支持分区和示例页面。选项存储在表方言选项字典中，因此以下关键字需要根据后端前缀为`mysql_`或`mariadb_`。支持的选项有：
- en: '`stats_sample_pages`'
  id: totrans-5886
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stats_sample_pages`'
- en: '`partition_by`'
  id: totrans-5887
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`partition_by`'
- en: '`partitions`'
  id: totrans-5888
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`partitions`'
- en: '`subpartition_by`'
  id: totrans-5889
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subpartition_by`'
- en: These options are also reflected when loading a table from database, and will
    populate the table [`Table.dialect_options`](../core/metadata.html#sqlalchemy.schema.Table.dialect_options
    "sqlalchemy.schema.Table.dialect_options"). Pull request courtesy of Ramon Will.
  id: totrans-5890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从数据库加载表时也反映了这些选项，并将填充表[`Table.dialect_options`](../core/metadata.html#sqlalchemy.schema.Table.dialect_options
    "sqlalchemy.schema.Table.dialect_options")。感谢Ramon Will的拉取请求。
- en: 'References: [#4038](https://www.sqlalchemy.org/trac/ticket/4038)'
  id: totrans-5891
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4038](https://www.sqlalchemy.org/trac/ticket/4038)
- en: typing
  id: totrans-5892
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打字
- en: '**[typing] [improvement]**'
  id: totrans-5893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[打字] [改进]**'
- en: The [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method now returns a copy of the original
    [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    object, rather than wrapping it inside the `Variant` class, which is effectively
    removed (the import symbol remains for backwards compatibility with code that
    may be testing for this symbol). While the previous approach maintained in-Python
    behaviors, maintaining the original type allows for clearer type checking and
    debugging.
  id: totrans-5894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")方法现在返回原始[`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")对象的副本，而不是将其包装在`Variant`类中，这实际上被移除了（导入符号仍保留，以便与可能正在测试此符号的代码向后兼容）。虽然以前的方法维护了Python中的行为，但维护原始类型可以实现更清晰的类型检查和调试。'
- en: '[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") also accepts multiple dialect names
    per call as well, in particular this is helpful for related backend names such
    as `"mysql", "mariadb"`.'
  id: totrans-5895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")还接受每次调用多个方言名称，特别是这对于相关后端名称如`"mysql",
    "mariadb"`是有帮助的。'
- en: See also
  id: totrans-5896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“with_variant()” clones the original TypeEngine rather than changing the type](whatsnew_20.html#change-6980)'
  id: totrans-5897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`with_variant()`克隆原始TypeEngine而不是更改类型](whatsnew_20.html#change-6980)'
- en: 'References: [#6980](https://www.sqlalchemy.org/trac/ticket/6980)'
  id: totrans-5898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6980](https://www.sqlalchemy.org/trac/ticket/6980)
- en: postgresql
  id: totrans-5899
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-5900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [特性]**'
- en: Added a new PostgreSQL [`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN") datatype, which follows the same CREATE
    TYPE / DROP TYPE behaviors as that of PostgreSQL [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM"). Much thanks to David Baumgold for the
    efforts on this.
  id: totrans-5901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的PostgreSQL [`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN") 数据类型，其遵循与PostgreSQL [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 相同的CREATE TYPE / DROP TYPE行为。非常感谢David
    Baumgold为此所做的努力。
- en: See also
  id: totrans-5902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN")'
  id: totrans-5903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN")'
- en: 'References: [#7316](https://www.sqlalchemy.org/trac/ticket/7316)'
  id: totrans-5904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7316](https://www.sqlalchemy.org/trac/ticket/7316)
- en: '**[postgresql] [usecase] [asyncpg]**'
  id: totrans-5905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例] [asyncpg]**'
- en: Added overridable methods `PGDialect_asyncpg.setup_asyncpg_json_codec` and `PGDialect_asyncpg.setup_asyncpg_jsonb_codec`
    codec, which handle the required task of registering JSON/JSONB codecs for these
    datatypes when using asyncpg. The change is that methods are broken out as individual,
    overridable methods to support third party dialects that need to alter or disable
    how these particular codecs are set up.
  id: totrans-5906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了可重写方法`PGDialect_asyncpg.setup_asyncpg_json_codec`和`PGDialect_asyncpg.setup_asyncpg_jsonb_codec`编解码器，用于处理在使用asyncpg时为这些数据类型注册JSON/JSONB编解码器的必要任务。变化在于这些方法被拆分为单独的、可重写的方法，以支持需要修改或禁用这些特定编解码器设置方式的第三方方言。
- en: 'This change is also **backported** to: 1.4.27'
  id: totrans-5907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.4.27
- en: 'References: [#7284](https://www.sqlalchemy.org/trac/ticket/7284)'
  id: totrans-5908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7284](https://www.sqlalchemy.org/trac/ticket/7284)
- en: '**[postgresql] [usecase]**'
  id: totrans-5909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Added literal type rendering for the [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") and [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") datatypes. The generic stringify will
    render using brackets, e.g. `[1, 2, 3]` and the PostgreSQL specific will use the
    ARRAY literal e.g. `ARRAY[1, 2, 3]`. Multiple dimensions and quoting are also
    taken into account.
  id: totrans-5910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为[`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")和[`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY")数据类型添加了字面类型渲染。通用的字符串化将使用方括号呈现，例如`[1, 2,
    3]`，而特定于PostgreSQL的将使用ARRAY字面值，例如`ARRAY[1, 2, 3]`。还考虑了多维和引号。
- en: 'References: [#8138](https://www.sqlalchemy.org/trac/ticket/8138)'
  id: totrans-5911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8138](https://www.sqlalchemy.org/trac/ticket/8138)
- en: '**[postgresql] [usecase]**'
  id: totrans-5912
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: Adds support for PostgreSQL multirange types, introduced in PostgreSQL 14. Support
    for PostgreSQL ranges and multiranges has now been generalized to the psycopg3,
    psycopg2 and asyncpg backends, with room for further dialect support, using a
    backend-agnostic [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") data object that’s constructor-compatible
    with the previously used psycopg2 object. See the new documentation for usage
    patterns.
  id: totrans-5913
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对PostgreSQL多范围类型的支持，引入于PostgreSQL 14中。现在已将对PostgreSQL范围和多范围的支持泛化到了psycopg3、psycopg2和asyncpg后端，还有进一步方言支持的空间，使用与先前使用的psycopg2对象兼容的后端不可知[`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range")数据对象构造函数。查看新文档以获取使用模式。
- en: In addition, range type handling has been enhanced so that it automatically
    renders type casts, so that in-place round trips for statements that don’t provide
    the database with any context don’t require the [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") construct to be explicit for the database to
    know the desired type (discussed at [#8540](https://www.sqlalchemy.org/trac/ticket/8540)).
  id: totrans-5914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，增强了范围类型处理，使其自动呈现类型转换，因此对于不提供数据库任何上下文的语句的原地往返，不需要使用[`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast")构造明确告知数据库所需的类型（在[#8540](https://www.sqlalchemy.org/trac/ticket/8540)讨论）。
- en: Thanks very much to @zeeeeeb for the pull request implementing and testing the
    new datatypes and psycopg support.
  id: totrans-5915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非常感谢@zeeeeeb为实现和测试新数据类型和psycopg支持��拉取请求。
- en: See also
  id: totrans-5916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New RANGE / MULTIRANGE support and changes for PostgreSQL backends](whatsnew_20.html#change-7156)'
  id: totrans-5917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL后端的新RANGE / MULTIRANGE支持和更改](whatsnew_20.html#change-7156)'
- en: '[Range and Multirange Types](../dialects/postgresql.html#postgresql-ranges)'
  id: totrans-5918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[范围和多范围类型](../dialects/postgresql.html#postgresql-ranges)'
- en: 'References: [#7156](https://www.sqlalchemy.org/trac/ticket/7156), [#8540](https://www.sqlalchemy.org/trac/ticket/8540)'
  id: totrans-5919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7156](https://www.sqlalchemy.org/trac/ticket/7156)，[#8540](https://www.sqlalchemy.org/trac/ticket/8540)
- en: '**[postgresql] [usecase]**'
  id: totrans-5920
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: The “ping” query emitted when configuring [`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") for psycopg, asyncpg and pg8000, but not for psycopg2,
    has been changed to be an empty query (`;`) instead of `SELECT 1`; additionally,
    for the asyncpg driver, the unnecessary use of a prepared statement for this query
    has been fixed. Rationale is to eliminate the need for PostgreSQL to produce a
    query plan when the ping is emitted. The operation is not currently supported
    by the `psycopg2` driver which continues to use `SELECT 1`.
  id: totrans-5921
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 针对 psycopg、asyncpg 和 pg8000 配置 [`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") 时发出的“ping”查询，但不适用于 psycopg2，已更改为一个空查询 (`;`)，而不是 `SELECT
    1`；此外，对于 asyncpg 驱动程序，已修复了此查询的不必要使用预处理语句。理由是消除 PostgreSQL 在发出 ping 时产生查询计划的需求。当前不支持此操作的
    `psycopg2` 驱动程序仍然使用 `SELECT 1`。
- en: 'References: [#8491](https://www.sqlalchemy.org/trac/ticket/8491)'
  id: totrans-5922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8491](https://www.sqlalchemy.org/trac/ticket/8491)
- en: '**[postgresql] [change]**'
  id: totrans-5923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [change]**'
- en: SQLAlchemy now requires PostgreSQL version 9 or greater. Older versions may
    still work in some limited use cases.
  id: totrans-5924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 SQLAlchemy 需要 PostgreSQL 版本为 9 或更高版本。在某些有限的用例中，旧版本可能仍然可用。
- en: '**[postgresql] [change] [mssql]**'
  id: totrans-5925
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [change] [mssql]**'
- en: The parameter [`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID") of [`UUID`](../core/type_basics.html#sqlalchemy.types.UUID
    "sqlalchemy.types.UUID"), previously specific to the PostgreSQL dialect but now
    generalized for Core (along with a new backend-agnostic [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype) now defaults to `True`, indicating that Python
    `UUID` objects are accepted by this datatype by default. Additionally, the SQL
    Server [`UNIQUEIDENTIFIER`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") datatype has been converted to be
    a UUID-receiving type; for legacy code that makes use of [`UNIQUEIDENTIFIER`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") using string values, set the [`UNIQUEIDENTIFIER.as_uuid`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER.params.as_uuid
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") parameter to `False`.
  id: totrans-5926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`UUID`](../core/type_basics.html#sqlalchemy.types.UUID "sqlalchemy.types.UUID")
    的参数 [`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID")，以前专门针对 PostgreSQL 方言，但现在已经为 Core 通用化（以及一个新的与后端无关的 [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") 数据类型），现在默认为 `True`，表示此数据类型默认接受 Python `UUID` 对象。此外，SQL
    Server 的 [`UNIQUEIDENTIFIER`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") 数据类型已转换为接收 UUID 类型；对于使用字符串值的旧代码中使用
    [`UNIQUEIDENTIFIER`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") 的情况，请将 [`UNIQUEIDENTIFIER.as_uuid`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER.params.as_uuid
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") 参数设置为 `False`。'
- en: 'References: [#7225](https://www.sqlalchemy.org/trac/ticket/7225)'
  id: totrans-5927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7225](https://www.sqlalchemy.org/trac/ticket/7225)
- en: '**[postgresql] [change]**'
  id: totrans-5928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [change]**'
- en: The [`ENUM.name`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.name
    "sqlalchemy.dialects.postgresql.ENUM") parameter for the PostgreSQL-specific [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") datatype is now a required keyword argument.
    The “name” is necessary in any case in order for the [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") to be usable as an error would be raised
    at SQL/DDL render time if “name” were not present.
  id: totrans-5929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'PostgreSQL 特定的 [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 数据类型的参数 [`ENUM.name`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.name
    "sqlalchemy.dialects.postgresql.ENUM") 现在是一个必需的关键字参数。无论如何，“name”在任何情况下都是必需的，因为如果“name”不存在，那么在
    SQL/DDL 渲染时会引发错误。 '
- en: '**[postgresql] [change]**'
  id: totrans-5930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [change]**'
- en: In support of new PostgreSQL features including the psycopg3 dialect as well
    as extended “fast insertmany” support, the system by which typing information
    for bound parameters is passed to the PostgreSQL database has been redesigned
    to use inline casts emitted by the SQL compiler, and is now applied to all PostgreSQL
    dialects. This is in contrast to the previous approach which would rely upon the
    DBAPI in use to render these casts itself, which in cases such as that of pg8000
    and the adapted asyncpg driver, would use the pep-249 `setinputsizes()` method,
    or with the psycopg2 driver would rely on the driver itself in most cases, with
    some special exceptions made for ARRAY.
  id: totrans-5931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了支持新的 PostgreSQL 功能，包括 psycopg3 方言以及扩展的“快速插入多个”支持，已重新设计了为绑定参数传递类型信息到 PostgreSQL
    数据库的系统，使用 SQL 编译器发出的内联转换，并且现在应用于所有 PostgreSQL 方言。这与以前的方法相反，以前的方法依赖于正在使用的 DBAPI
    自行呈现这些转换，例如 pg8000 和适应的 asyncpg 驱动程序，会使用 pep-249 的 `setinputsizes()` 方法，或者在大多数情况下会依赖于驱动程序本身，特殊情况除外，如
    ARRAY。
- en: The new approach now has all PostgreSQL dialects rendering these casts as needed
    using PostgreSQL double-colon style within the compiler, and the use of `setinputsizes()`
    is removed for PostgreSQL dialects, as this was not generally part of these DBAPIs
    in any case (pg8000 being the only exception, which added the method at the request
    of SQLAlchemy developers).
  id: totrans-5932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新方法现在通过编译器在所有 PostgreSQL 方言中呈现这些转换，使用 PostgreSQL 的双冒号样式，并且删除了对于 PostgreSQL 方言的
    `setinputsizes()` 的使用，因为这在任何情况下通常不是这些 DBAPI 的一部分（pg8000 是唯一的例外，在 SQLAlchemy 开发人员的请求下添加了该方法）。
- en: Advantages to this approach include per-statement performance, as no second
    pass over the compiled statement is required at execution time, better support
    for all DBAPIs, as there is now one consistent system of applying typing information,
    and improved transparency, as the SQL logging output, as well as the string output
    of a compiled statement, will show these casts present in the statement directly,
    whereas previously these casts were not visible in logging output as they would
    occur after the statement were logged.
  id: totrans-5933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种方法的优点包括每个语句的性能，因为在执行时不需要对编译后的语句进行第二次遍历，对所有 DBAPI 的更好支持，因为现在有一个一致的应用类型信息的系统，以及改进的透明度，因为
    SQL 记录输出，以及编译语句的字符串输出，将直接显示这些转换存在于语句中，而以前这些转换在记录输出中是不可见的，因为它们会在记录语句之后发生。
- en: '**[postgresql] [bug]**'
  id: totrans-5934
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [bug]**'
- en: The `Operators.match()` operator now uses `plainto_tsquery()` for PostgreSQL
    full text search, rather than `to_tsquery()`. The rationale for this change is
    to provide better cross-compatibility with match on other database backends. Full
    support for all PostgreSQL full text functions remains available through the use
    of [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    in conjunction with [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") (an improved version of [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") for boolean operators).
  id: totrans-5935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Operators.match()` 操作现在在 PostgreSQL 全文搜索中使用 `plainto_tsquery()`，而不是 `to_tsquery()`。更改的原因是为了提供与其他数据库后端匹配的更好的交叉兼容性。通过与
    [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") 结合使用 [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")（布尔运算符的改进版本）来获得所有 PostgreSQL 全文函数的完全支持（与 [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") 相比）。'
- en: See also
  id: totrans-5936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[match() operator on PostgreSQL uses plainto_tsquery() rather than to_tsquery()](whatsnew_20.html#change-7086)'
  id: totrans-5937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL 上的 match() 操作现在使用 plainto_tsquery()，而不是 to_tsquery()](whatsnew_20.html#change-7086)'
- en: 'References: [#7086](https://www.sqlalchemy.org/trac/ticket/7086)'
  id: totrans-5938
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7086](https://www.sqlalchemy.org/trac/ticket/7086)
- en: '**[postgresql] [removed]**'
  id: totrans-5939
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [已删除]**'
- en: 'Removed support for multiple deprecated drivers:'
  id: totrans-5940
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除对多个不推荐使用的驱动程序的支持：
- en: pypostgresql for PostgreSQL. This is available as an external driver at [https://github.com/PyGreSQL](https://github.com/PyGreSQL)
  id: totrans-5941
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL 的 pypostgresql 驱动。可在 [https://github.com/PyGreSQL](https://github.com/PyGreSQL)
    找到此外部驱动。
- en: ''
  id: totrans-5942
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-5943
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: pygresql for PostgreSQL.
  id: totrans-5944
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL 的 pygresql 驱动。
- en: Please switch to one of the supported drivers or to the external version of
    the same driver.
  id: totrans-5945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请切换到受支持的驱动程序之一，或者切换到相同驱动程序的外部版本。
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-5946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
- en: '**[postgresql] [dialect]**'
  id: totrans-5947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [方言]**'
- en: Added support for `psycopg` dialect supporting both sync and async execution.
    This dialect is available under the `postgresql+psycopg` name for both the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") engine-creation functions.
  id: totrans-5948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加对`psycopg`方言的支持，支持同步和异步执行。该方言可在[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")和[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")引擎创建函数中使用`postgresql+psycopg`名称。
- en: See also
  id: totrans-5949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Dialect support for psycopg 3 (a.k.a. “psycopg”)](whatsnew_20.html#ticket-6842)'
  id: totrans-5950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[对 psycopg 3（又名“psycopg”）的方言支持](whatsnew_20.html#ticket-6842)'
- en: '[psycopg](../dialects/postgresql.html#postgresql-psycopg)'
  id: totrans-5951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[psycopg](../dialects/postgresql.html#postgresql-psycopg)'
- en: 'References: [#6842](https://www.sqlalchemy.org/trac/ticket/6842)'
  id: totrans-5952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6842](https://www.sqlalchemy.org/trac/ticket/6842)
- en: '**[postgresql] [psycopg2]**'
  id: totrans-5953
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [psycopg2]**'
- en: Update psycopg2 dialect to use the DBAPI interface to execute two phase transactions.
    Previously SQL commands were execute to handle this kind of transactions.
  id: totrans-5954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新 psycopg2 方言以使用 DBAPI 接口执行两阶段事务。以前，SQL 命令用于处理此类事务。
- en: 'References: [#7238](https://www.sqlalchemy.org/trac/ticket/7238)'
  id: totrans-5955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7238](https://www.sqlalchemy.org/trac/ticket/7238)
- en: '**[postgresql] [schema]**'
  id: totrans-5956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [schema]**'
- en: Introduced the type [`JSONPATH`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONPATH
    "sqlalchemy.dialects.postgresql.JSONPATH") that can be used in cast expressions.
    This is required by some PostgreSQL dialects when using functions such as `jsonb_path_exists`
    or `jsonb_path_match` that accept a `jsonpath` as input.
  id: totrans-5957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入了类型[`JSONPATH`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONPATH
    "sqlalchemy.dialects.postgresql.JSONPATH")，可用于转换表达式。在使用 `jsonb_path_exists` 或
    `jsonb_path_match` 等接受 `jsonpath` 作为输入的函数时，某些 PostgreSQL 方言需要此类型。
- en: See also
  id: totrans-5958
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[JSON Types](../dialects/postgresql.html#postgresql-json-types) - PostgreSQL
    JSON types.'
  id: totrans-5959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[JSON 类型](../dialects/postgresql.html#postgresql-json-types) - PostgreSQL JSON
    类型。'
- en: 'References: [#8216](https://www.sqlalchemy.org/trac/ticket/8216)'
  id: totrans-5960
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8216](https://www.sqlalchemy.org/trac/ticket/8216)
- en: '**[postgresql] [reflection]**'
  id: totrans-5961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [reflection]**'
- en: The PostgreSQL dialect now supports reflection of expression based indexes.
    The reflection is supported both when using `Inspector.get_indexes()` and when
    reflecting a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    using [`Table.autoload_with`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table"). Thanks to immerrr and Aidan Kane for the help on this
    ticket.
  id: totrans-5962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL 方言现在支持基于表达式的索引的反射。无论是使用 `Inspector.get_indexes()` 还是使用 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 的 [`Table.autoload_with`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table") 反射表时，都支持反射。感谢 immerrr 和 Aidan Kane 在此票证上的帮助。
- en: 'References: [#7442](https://www.sqlalchemy.org/trac/ticket/7442)'
  id: totrans-5963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7442](https://www.sqlalchemy.org/trac/ticket/7442)
- en: mysql
  id: totrans-5964
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase] [mariadb]**'
  id: totrans-5965
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [usecase] [mariadb]**'
- en: The `ROLLUP` function will now correctly render `WITH ROLLUP` on MySql and MariaDB,
    allowing the use of group by rollup with these backend.
  id: totrans-5966
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ROLLUP` 函数现在将在 MySql 和 MariaDB 上正确呈现 `WITH ROLLUP`，允许在这些后端使用 group by rollup。'
- en: 'References: [#8503](https://www.sqlalchemy.org/trac/ticket/8503)'
  id: totrans-5967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8503](https://www.sqlalchemy.org/trac/ticket/8503)
- en: '**[mysql] [bug]**'
  id: totrans-5968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue in MySQL [`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") which would render
    the wrong column name when an expression were used in a VALUES expression. Pull
    request courtesy Cristian Sabaila.
  id: totrans-5969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MySQL [`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") 中的问题，当在 VALUES 表达式中使用表达式时，会导致错误的列名。感谢
    Cristian Sabaila 提供的拉取请求。
- en: 'This change is also **backported** to: 1.4.27'
  id: totrans-5970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**到：1.4.27
- en: 'References: [#7281](https://www.sqlalchemy.org/trac/ticket/7281)'
  id: totrans-5971
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7281](https://www.sqlalchemy.org/trac/ticket/7281)
- en: '**[mysql] [removed]**'
  id: totrans-5972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [removed]**'
- en: Removed support for the OurSQL driver for MySQL and MariaDB, as this driver
    does not seem to be maintained.
  id: totrans-5973
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除对 MySQL 和 MariaDB 的 OurSQL 驱动程序的支持，因为该驱动程序似乎没有得到维护。
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-5974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
- en: mariadb
  id: totrans-5975
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mariadb
- en: '**[mariadb] [usecase]**'
  id: totrans-5976
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [usecase]**'
- en: Added a new execution option `is_delete_using=True`, which is consumed by the
    ORM when using an ORM-enabled DELETE statement in conjunction with the “fetch”
    synchronization strategy; this option indicates that the DELETE statement is expected
    to use multiple tables, which on MariaDB is the DELETE..USING syntax. The option
    then indicates that RETURNING (newly implemented in SQLAlchemy 2.0 for MariaDB
    for [#7011](https://www.sqlalchemy.org/trac/ticket/7011)) should not be used for
    databases that are known to not support “DELETE..USING..RETURNING” syntax, even
    though they support “DELETE..USING”, which is MariaDB’s current capability.
  id: totrans-5977
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的执行选项 `is_delete_using=True`，当使用 ORM 启用的 DELETE 语句与“fetch”同步策略一起使用时，ORM
    会消耗此选项；此选项指示预期 DELETE 语句将使用多个表，在 MariaDB 上是 DELETE..USING 语法。然后，该选项指示不应该使用 RETURNING（在
    SQLAlchemy 2.0 中为 MariaDB 新实现的选项）用于已知不支持“DELETE..USING..RETURNING”语法的数据库，即使它们支持“DELETE..USING”，这是
    MariaDB 的当前功能。
- en: 'The rationale for this option is that the current workings of ORM-enabled DELETE
    doesn’t know up front if a DELETE statement is against multiple tables or not
    until compilation occurs, which is cached in any case, yet it needs to be known
    so that a SELECT for the to-be-deleted row can be emitted up front. Instead of
    applying an across-the-board performance penalty for all DELETE statements by
    proactively checking them all for this relatively unusual SQL pattern, the `is_delete_using=True`
    execution option is requested via a new exception message that is raised within
    the compilation step. This exception message is specifically (and only) raised
    when: the statement is an ORM-enabled DELETE where the “fetch” synchronization
    strategy has been requested; the backend is MariaDB or other backend with this
    specific limitation; the statement has been detected within the initial compilation
    that it would otherwise emit “DELETE..USING..RETURNING”. By applying the execution
    option, the ORM knows to run a SELECT upfront instead. A similar option is implemented
    for ORM-enabled UPDATE but there is not currently a backend where it is needed.'
  id: totrans-5978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该选项的理由是，ORM 启用的 DELETE 在编译之前不知道是否针对多个表，直到编译发生，而编译在任何情况下都会被缓存，但是需要知道是否要事先发出 SELECT
    来删除的行。为了避免为所有 DELETE 语句施加全面性能惩罚，因为需要预先检查它们是否都有这种相对不寻常的 SQL 模式，通过一个新的在编译步骤中引发的异常消息请求
    `is_delete_using=True` 执行选项。该异常消息仅在以下情况下（并且仅在以下情况下）引发：语句是启用了 ORM 的 DELETE，其中请求了“fetch”同步策略；后端是
    MariaDB 或其他具有此特定限制的后端；语句已在初始编译中检测到，否则它会发出“DELETE..USING..RETURNING”。通过应用执行选项，ORM
    知道要先运行 SELECT。针对启用了 ORM 的 UPDATE 实现了类似的选项，但目前没有需要此选项的后端。
- en: 'References: [#8344](https://www.sqlalchemy.org/trac/ticket/8344)'
  id: totrans-5979
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8344](https://www.sqlalchemy.org/trac/ticket/8344)
- en: '**[mariadb] [usecase]**'
  id: totrans-5980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [用例]**'
- en: Added INSERT..RETURNING and DELETE..RETURNING support for the MariaDB dialect.
    UPDATE..RETURNING is not yet supported by MariaDB. MariaDB supports INSERT..RETURNING
    as of 10.5.0 and DELETE..RETURNING as of 10.0.5.
  id: totrans-5981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 MariaDB 方言添加了 INSERT..RETURNING 和 DELETE..RETURNING 支持。UPDATE..RETURNING 目前还不被
    MariaDB 支持。MariaDB 从 10.5.0 版本开始支持 INSERT..RETURNING，从 10.0.5 版本开始支持 DELETE..RETURNING。
- en: 'References: [#7011](https://www.sqlalchemy.org/trac/ticket/7011)'
  id: totrans-5982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7011](https://www.sqlalchemy.org/trac/ticket/7011)
- en: sqlite
  id: totrans-5983
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-5984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [用例]**'
- en: Added new parameter to SQLite for reflection methods called `sqlite_include_internal=True`;
    when omitted, local tables that start with the prefix `sqlite_`, which per SQLite
    documentation are noted as “internal schema” tables such as the `sqlite_sequence`
    table generated to support “AUTOINCREMENT” columns, will not be included in reflection
    methods that return lists of local objects. This prevents issues for example when
    using Alembic autogenerate, which previously would consider these SQLite-generated
    tables as being remove from the model.
  id: totrans-5985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SQLite 添加了反射方法的新参数 `sqlite_include_internal=True`；当省略时，不会包含以 `sqlite_` 前缀开头的本地表，这些表根据
    SQLite 文档被标记为“内部模式”表，如为支持“AUTOINCREMENT”列而生成的 `sqlite_sequence` 表，在返回本地对象列表的反射方法中不会包含这些表。这可以避免例如在使用
    Alembic autogenerate 时出现问题，之前会将这些由 SQLite 生成的表视为要从模型中删除的表。
- en: See also
  id: totrans-5986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reflecting internal schema tables](../dialects/sqlite.html#sqlite-include-internal)'
  id: totrans-5987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[反映内部模式表](../dialects/sqlite.html#sqlite-include-internal)'
- en: 'References: [#8234](https://www.sqlalchemy.org/trac/ticket/8234)'
  id: totrans-5988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8234](https://www.sqlalchemy.org/trac/ticket/8234)
- en: '**[sqlite] [usecase]**'
  id: totrans-5989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [用例]**'
- en: Added RETURNING support for the SQLite dialect. SQLite supports RETURNING since
    version 3.35.
  id: totrans-5990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQLite方言添加了RETURNING支持。自SQLite版本3.35起支持RETURNING。
- en: 'References: [#6195](https://www.sqlalchemy.org/trac/ticket/6195)'
  id: totrans-5991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6195](https://www.sqlalchemy.org/trac/ticket/6195)
- en: '**[sqlite] [usecase]**'
  id: totrans-5992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [usecase]**'
- en: The SQLite dialect now supports UPDATE..FROM syntax, for UPDATE statements that
    may refer to additional tables within the WHERE criteria of the statement without
    the need to use subqueries. This syntax is invoked automatically when using the
    [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct when more than one table or other entity or selectable is used.
  id: totrans-5993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite方言现在支持UPDATE..FROM语法，用于UPDATE语句可能在语句的WHERE条件中引用其他表而无需使用子查询。当使用[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造时，如果使用了多个表或其他实体或可选择项，则会自动调用此语法。
- en: 'References: [#7185](https://www.sqlalchemy.org/trac/ticket/7185)'
  id: totrans-5994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7185](https://www.sqlalchemy.org/trac/ticket/7185)
- en: '**[sqlite] [performance] [bug]**'
  id: totrans-5995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [performance] [bug]**'
- en: The SQLite dialect now defaults to [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") when a file based database is used. This is set along
    with setting the `check_same_thread` parameter to `False`. It has been observed
    that the previous approach of defaulting to [`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool"), which does not hold onto database connections after
    they are released, did in fact have a measurable negative performance impact.
    As always, the pool class is customizable via the [`create_engine.poolclass`](../core/engines.html#sqlalchemy.create_engine.params.poolclass
    "sqlalchemy.create_engine") parameter.
  id: totrans-5996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite方言现在在使用基于文件的数据库时默认使用[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool")。这是与将`check_same_thread`参数设置为`False`一起设置的。已经观察到，默认使用[`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool")的先前方法，在释放数据库连接后不会保留连接，实际上会对性能产生可衡量的负面影响。如常，通过[`create_engine.poolclass`](../core/engines.html#sqlalchemy.create_engine.params.poolclass
    "sqlalchemy.create_engine")参数可以自定义池类。
- en: See also
  id: totrans-5997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[The SQLite dialect uses QueuePool for file-based databases](whatsnew_20.html#change-7490)'
  id: totrans-5998
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQLite方言为基于文件的数据库使用QueuePool](whatsnew_20.html#change-7490)'
- en: 'References: [#7490](https://www.sqlalchemy.org/trac/ticket/7490)'
  id: totrans-5999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7490](https://www.sqlalchemy.org/trac/ticket/7490)
- en: '**[sqlite] [performance] [usecase]**'
  id: totrans-6000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [performance] [usecase]**'
- en: SQLite datetime, date, and time datatypes now use Python standard lib `fromisoformat()`
    methods in order to parse incoming datetime, date, and time string values. This
    improves performance vs. the previous regular expression-based approach, and also
    automatically accommodates for datetime and time formats that contain either a
    six-digit “microseconds” format or a three-digit “milliseconds” format.
  id: totrans-6001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite的datetime、date和time数据类型现在使用Python标准库的`fromisoformat()`方法来解析传入的datetime、date和time字符串值。这比以前基于正则表达式的方法提高了性能，还自动适应包含六位“微秒”格式或三位“毫秒”格式的datetime和time格式。
- en: 'References: [#7029](https://www.sqlalchemy.org/trac/ticket/7029)'
  id: totrans-6002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7029](https://www.sqlalchemy.org/trac/ticket/7029)
- en: '**[sqlite] [bug]**'
  id: totrans-6003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Removed the warning that emits from the [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") type about DBAPIs not supporting Decimal values natively.
    This warning was oriented towards SQLite, which does not have any real way without
    additional extensions or workarounds of handling precision numeric values more
    than 15 significant digits as it only uses floating point math to represent numbers.
    As this is a known and documented limitation in SQLite itself, and not a quirk
    of the pysqlite driver, there’s no need for SQLAlchemy to warn for this. The change
    does not otherwise modify how precision numerics are handled. Values can continue
    to be handled as `Decimal()` or `float()` as configured with the [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") , and related datatypes, just without the ability to
    maintain precision beyond 15 significant digits when using SQLite, unless alternate
    representations such as strings are used.
  id: totrans-6004
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了关于 [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    类型发出的警告，该警告指出 DBAPI 不原生支持 Decimal 值。这个警告是针对 SQLite 的，因为 SQLite 没有任何真正的方法来处理超过
    15 个有效数字的精度数值，除非使用额外的扩展或解决方法，因为它只使用浮点数学来表示数字。由于这是 SQLite 本身已知且有文档记录的限制，并不是 pysqlite
    驱动程序的怪癖，因此 SQLAlchemy 不需要为此发出警告。这个更改不会改变精度数值的处理方式。在使用 SQLite 时，值可以继续按照配置使用 `Decimal()`
    或 `float()` 处理，只是无法保持超过 15 个有效数字的精度，除非使用字符串等其他表示形式。
- en: 'References: [#7299](https://www.sqlalchemy.org/trac/ticket/7299)'
  id: totrans-6005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7299](https://www.sqlalchemy.org/trac/ticket/7299)
- en: mssql
  id: totrans-6006
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [usecase]**'
  id: totrans-6007
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [用例]**'
- en: Implemented reflection of the “clustered index” flag `mssql_clustered` for the
    SQL Server dialect. Pull request courtesy John Lennox.
  id: totrans-6008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了 SQL Server 方言的“聚集索引”标志 `mssql_clustered` 的反射。感谢 John Lennox 提交的拉取请求。
- en: 'References: [#8288](https://www.sqlalchemy.org/trac/ticket/8288)'
  id: totrans-6009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8288](https://www.sqlalchemy.org/trac/ticket/8288)
- en: '**[mssql] [usecase]**'
  id: totrans-6010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [用例]**'
- en: Added support table and column comments on MSSQL when creating a table. Added
    support for reflecting table comments. Thanks to Daniel Hall for the help in this
    pull request.
  id: totrans-6011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在创建表时，为 MSSQL 添加了支持表和列注释。增加了在反射表时支持表注释的功能。感谢 Daniel Hall 在这个拉取请求中的帮助。
- en: 'References: [#7844](https://www.sqlalchemy.org/trac/ticket/7844)'
  id: totrans-6012
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7844](https://www.sqlalchemy.org/trac/ticket/7844)
- en: '**[mssql] [bug]**'
  id: totrans-6013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: The `use_setinputsizes` parameter for the `mssql+pyodbc` dialect now defaults
    to `True`; this is so that non-unicode string comparisons are bound by pyodbc
    to pyodbc.SQL_VARCHAR rather than pyodbc.SQL_WVARCHAR, allowing indexes against
    VARCHAR columns to take effect. In order for the `fast_executemany=True` parameter
    to continue functioning, the `use_setinputsizes` mode now skips the `cursor.setinputsizes()`
    call specifically when `fast_executemany` is True and the specific method in use
    is `cursor.executemany()`, which doesn’t support setinputsizes. The change also
    adds appropriate pyodbc DBAPI typing to values that are typed as [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText"), as well as altered the base [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") datatype to consider JSON string values as [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") rather than [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String").
  id: totrans-6014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mssql+pyodbc` 方言的 `use_setinputsizes` 参数现在默认为 `True`；这样，非 Unicode 字符串比较将由
    pyodbc 绑定到 pyodbc.SQL_VARCHAR 而不是 pyodbc.SQL_WVARCHAR，从而使得对 VARCHAR 列的索引生效。为了使
    `fast_executemany=True` 参数继续正常工作，`use_setinputsizes` 模式现在在 `fast_executemany`
    为 True 且使用的具体方法是 `cursor.executemany()` 时跳过 `cursor.setinputsizes()` 调用，因为该方法不支持
    setinputsizes。该更改还为被标记为 [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") 或 [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") 的值添加了适当的 pyodbc DBAPI 类型，同时还修改了基本的 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") 数据类型，将 JSON 字符串值视为 [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") 而不是 [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")。'
- en: 'References: [#8177](https://www.sqlalchemy.org/trac/ticket/8177)'
  id: totrans-6015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8177](https://www.sqlalchemy.org/trac/ticket/8177)
- en: '**[mssql] [removed]**'
  id: totrans-6016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [已移除]**'
- en: Removed support for the mxodbc driver due to lack of testing support. ODBC users
    may use the pyodbc dialect which is fully supported.
  id: totrans-6017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于缺乏测试支持，删除了对 mxodbc 驱动程序的支持。ODBC 用户可以使用完全受支持的 pyodbc 方言。
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-6018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
- en: oracle
  id: totrans-6019
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-6020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Add support for the new oracle driver `oracledb`.
  id: totrans-6021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加对新的 oracle 驱动程序 `oracledb` 的支持。
- en: See also
  id: totrans-6022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Dialect support for oracledb](whatsnew_20.html#ticket-8054)'
  id: totrans-6023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[oracledb 的方言支持](whatsnew_20.html#ticket-8054)'
- en: '[python-oracledb](../dialects/oracle.html#oracledb)'
  id: totrans-6024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[python-oracledb](../dialects/oracle.html#oracledb)'
- en: 'References: [#8054](https://www.sqlalchemy.org/trac/ticket/8054)'
  id: totrans-6025
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8054](https://www.sqlalchemy.org/trac/ticket/8054)
- en: '**[oracle] [feature]**'
  id: totrans-6026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Implemented DDL and reflection support for `FLOAT` datatypes which include an
    explicit “binary_precision” value. Using the Oracle-specific [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") datatype, the new parameter [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") may be specified which will render Oracle’s
    precision for floating point types directly. This value is interpreted during
    reflection. Upon reflecting back a `FLOAT` datatype, the datatype returned is
    one of [`DOUBLE_PRECISION`](../core/type_basics.html#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION") for a `FLOAT` for a precision of 126 (this
    is also Oracle’s default precision for `FLOAT`), [`REAL`](../core/type_basics.html#sqlalchemy.types.REAL
    "sqlalchemy.types.REAL") for a precision of 63, and [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") for a custom precision, as per Oracle documentation.
  id: totrans-6027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为包括显式“binary_precision”值的 `FLOAT` 数据类型实现了 DDL 和反射支持。使用 Oracle 特定的 [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") 数据类型，可以指定新参数 [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT")，它将直接呈现浮点类型的 Oracle 精度。此值在反射期间解释。在反射回一个 `FLOAT`
    数据类型时，返回的数据类型是 [`DOUBLE_PRECISION`](../core/type_basics.html#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION")（对于精度为 126 的 `FLOAT` 来说，这也是 Oracle 的默认精度），对于精度为
    63 的 [`REAL`](../core/type_basics.html#sqlalchemy.types.REAL "sqlalchemy.types.REAL")，以及对于自定义精度的
    [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT "sqlalchemy.dialects.oracle.FLOAT")，根据
    Oracle 文档。
- en: As part of this change, the generic [`Float.precision`](../core/type_basics.html#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") value is explicitly rejected when generating DDL for
    Oracle, as this precision cannot be accurately converted to “binary precision”;
    instead, an error message encourages the use of [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") so that Oracle’s specific form of
    precision may be chosen exactly. This is a backwards-incompatible change in behavior,
    as the previous “precision” value was silently ignored for Oracle.
  id: totrans-6028
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变更的一部分，当为 Oracle 生成 DDL 时，明确拒绝使用通用的 [`Float.precision`](../core/type_basics.html#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") 值，因为这种精度无法准确转换为“二进制精度”；相反，错误消息鼓励使用 [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")，以便精确选择 Oracle 的特定精度形式。这是一项与以前行为不兼容的更改，因为以前的“精度”值对于
    Oracle 是被静默忽略的。
- en: See also
  id: totrans-6029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[New Oracle FLOAT type with binary precision; decimal precision not accepted
    directly](whatsnew_20.html#change-5465-oracle)'
  id: totrans-6030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[具有二进制精度的新 Oracle FLOAT 类型；直接不接受十进制精度](whatsnew_20.html#change-5465-oracle)'
- en: 'References: [#5465](https://www.sqlalchemy.org/trac/ticket/5465)'
  id: totrans-6031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5465](https://www.sqlalchemy.org/trac/ticket/5465)
- en: '**[oracle] [feature]**'
  id: totrans-6032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: 'Full “RETURNING” support is implemented for the cx_Oracle dialect, covering
    two individual types of functionality:'
  id: totrans-6033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 cx_Oracle 方言实现了完整的“RETURNING”支持，涵盖了两种单独的功能类型：
- en: multi-row RETURNING is implemented, meaning multiple RETURNING rows are now
    received for DML statements that produce more than one row for RETURNING.
  id: totrans-6034
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现了多行 RETURNING，意味着现在针对产生多于一行 RETURNING 的 DML 语句会接收到多个 RETURNING 行。
- en: ”executemany RETURNING” is also implemented - this allows RETURNING to yield
    row-per statement when `cursor.executemany()` is used. The implementation of this
    part of the feature delivers dramatic performance improvements to ORM inserts,
    in the same way as was added for psycopg2 in the SQLAlchemy 1.4 change [ORM Batch
    inserts with psycopg2 now batch statements with RETURNING in most cases](migration_14.html#change-5263).
  id: totrans-6035
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用 `cursor.executemany()` 时，“executemany RETURNING” 也已实现 - 这允许 RETURNING 在每个语句中产生一行。这一功能的实现为
    ORM 插入带来了显著的性能改进，就像 SQLAlchemy 1.4 中为 psycopg2 添加的 [ORM Batch inserts with psycopg2
    now batch statements with RETURNING in most cases](migration_14.html#change-5263)
    一样。
- en: 'References: [#6245](https://www.sqlalchemy.org/trac/ticket/6245)'
  id: totrans-6036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6245](https://www.sqlalchemy.org/trac/ticket/6245)
- en: '**[oracle] [usecase]**'
  id: totrans-6037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [用例]**'
- en: Oracle will now use FETCH FIRST N ROWS / OFFSET syntax for limit/offset support
    by default for Oracle 12c and above. This syntax was already available when [`Select.fetch()`](../core/selectable.html#sqlalchemy.sql.expression.Select.fetch
    "sqlalchemy.sql.expression.Select.fetch") were used directly, it’s now implied
    for [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") and [`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset") as well.
  id: totrans-6038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 现在默认情况下将使用 FETCH FIRST N ROWS / OFFSET 语法来支持 Oracle 12c 及以上的 limit/offset。当直接使用
    [`Select.fetch()`](../core/selectable.html#sqlalchemy.sql.expression.Select.fetch
    "sqlalchemy.sql.expression.Select.fetch") 时，此语法已经可用，现在对于 [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") 和 [`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset") 也是如此。
- en: 'References: [#8221](https://www.sqlalchemy.org/trac/ticket/8221)'
  id: totrans-6039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8221](https://www.sqlalchemy.org/trac/ticket/8221)
- en: '**[oracle] [change]**'
  id: totrans-6040
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [更改]**'
- en: Materialized views on oracle are now reflected as views. On previous versions
    of SQLAlchemy the views were returned among the table names, not among the view
    names. As a side effect of this change they are not reflected by default by `MetaData.reflect()`,
    unless `views=True` is set. To get a list of materialized views, use the new inspection
    method [`Inspector.get_materialized_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names").
  id: totrans-6041
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 上的物化视图现在被反映为视图。在之前的 SQLAlchemy 版本中，视图会在表名中返回，而不是在视图名中返回。作为这一变化的副作用，除非设置
    `views=True`，否则默认情况下 `MetaData.reflect()` 不会反映它们。要获取物化视图列表，请使用新的检查方法 [`Inspector.get_materialized_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names")。
- en: '**[oracle] [bug]**'
  id: totrans-6042
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Adjustments made to the BLOB / CLOB / NCLOB datatypes in the cx_Oracle and oracledb
    dialects, to improve performance based on recommendations from Oracle developers.
  id: totrans-6043
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 cx_Oracle 和 oracledb 方言中的 BLOB / CLOB / NCLOB 数据类型进行了调整，以改善性能，根据 Oracle 开发人员的建议。
- en: 'References: [#7494](https://www.sqlalchemy.org/trac/ticket/7494)'
  id: totrans-6044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7494](https://www.sqlalchemy.org/trac/ticket/7494)
- en: '**[oracle] [bug]**'
  id: totrans-6045
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [错误]**'
- en: Related to the deprecation for [`create_engine.implicit_returning`](../core/engines.html#sqlalchemy.create_engine.params.implicit_returning
    "sqlalchemy.create_engine"), the “implicit_returning” feature is now enabled for
    the Oracle dialect in all cases; previously, the feature would be turned off when
    an Oracle 8/8i version were detected, however online documentation indicates both
    versions support the same RETURNING syntax as modern versions.
  id: totrans-6046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于 [`create_engine.implicit_returning`](../core/engines.html#sqlalchemy.create_engine.params.implicit_returning
    "sqlalchemy.create_engine") 的弃用，现在“implicit_returning” 功能在所有情况下都已为 Oracle 方言启用；以前，当检测到
    Oracle 8/8i 版本时，该功能会被关闭，但在线文档显示这两个版本都支持与现代版本相同的 RETURNING 语法。
- en: 'References: [#6962](https://www.sqlalchemy.org/trac/ticket/6962)'
  id: totrans-6047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6962](https://www.sqlalchemy.org/trac/ticket/6962)
- en: '**[oracle]**'
  id: totrans-6048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: cx_Oracle 7 is now the minimum version for cx_Oracle.
  id: totrans-6049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_Oracle 7 现在是 cx_Oracle 的最低版本要求。
- en: misc
  id: totrans-6050
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[removed] [sybase]**'
  id: totrans-6051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[已移除] [sybase]**'
- en: Removed the “sybase” internal dialect that was deprecated in previous SQLAlchemy
    versions. Third party dialect support is available.
  id: totrans-6052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在之前的 SQLAlchemy 版本中已弃用的“sybase”内部方言。第三方方言支持可用。
- en: See also
  id: totrans-6053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[External Dialects](../dialects/index.html)'
  id: totrans-6054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[外部方言](../dialects/index.html)'
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-6055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
- en: '**[removed] [firebird]**'
  id: totrans-6056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[已移除] [firebird]**'
- en: Removed the “firebird” internal dialect that was deprecated in previous SQLAlchemy
    versions. Third party dialect support is available.
  id: totrans-6057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在之前的 SQLAlchemy 版本中已弃用的“firebird”内部方言。第三方方言支持可用。
- en: See also
  id: totrans-6058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[External Dialects](../dialects/index.html)'
  id: totrans-6059
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[外部方言](../dialects/index.html)'
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-6060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
- en: general
  id: totrans-6061
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常规
- en: '**[general] [changed]**'
  id: totrans-6062
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[常规] [更改]**'
- en: 'Migrated the codebase to remove all pre-2.0 behaviors and architectures that
    were previously noted as deprecated for removal in 2.0, including, but not limited
    to:'
  id: totrans-6063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将代码库迁移以删除所有之前在 2.0 版本中被标记为弃用并拟于删除的预 2.0 行为和架构，包括但不限于：
- en: removal of all Python 2 code, minimum version is now Python 3.7
  id: totrans-6064
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了所有 Python 2 代码，最低版本现在是 Python 3.7
- en: '[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    and [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    now use the new 2.0 style of working, which includes “autobegin”, library level
    autocommit removed, subtransactions and “branched” connections removed'
  id: totrans-6065
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    和 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    现在使用新的 2.0 版本的工作方式，其中包括“autobegin”，移除了库级别的自动提交，移除了子事务和“分支”连接'
- en: Result objects use 2.0-style behaviors; [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") is fully a named tuple without “mapping” behavior, use
    [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping "sqlalchemy.engine.RowMapping")
    for “mapping” behavior
  id: totrans-6066
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果对象使用 2.0 版本的行为；[`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    完全是一个具有命名元组特性的命名元组，不具有“映射”行为，使用 [`RowMapping`](../core/connections.html#sqlalchemy.engine.RowMapping
    "sqlalchemy.engine.RowMapping") 来实现“映射”行为。
- en: All Unicode encoding/decoding architecture has been removed from SQLAlchemy.
    All modern DBAPI implementations support Unicode transparently thanks to Python
    3, so the `convert_unicode` feature as well as related mechanisms to look for
    bytestrings in DBAPI `cursor.description` etc. have been removed.
  id: totrans-6067
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLAlchemy 中所有 Unicode 编码/解码架构已被移除。由于现代 DBAPI 实现支持 Python 3，因此已删除`convert_unicode`功能以及在
    DBAPI `cursor.description` 等中查找字节字符串的相关机制。
- en: The `.bind` attribute and parameter from [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData"), [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), and from all DDL/DML/DQL elements that previously
    could refer to a “bound engine”
  id: totrans-6068
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")、[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 和所有之前可能引用“绑定引擎”的 DDL/DML/DQL 元素中移除了`.bind` 属性和参数
- en: The standalone `sqlalchemy.orm.mapper()` function is removed; all classical
    mapping should be done through the [`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") method of [`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry").
  id: totrans-6069
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立的 `sqlalchemy.orm.mapper()` 函数已被移除；所有的经典映射应该通过 [`registry.map_imperatively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_imperatively
    "sqlalchemy.orm.registry.map_imperatively") 方法来完成，[`registry`](../orm/mapping_api.html#sqlalchemy.orm.registry
    "sqlalchemy.orm.registry")。
- en: The [`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") method no longer accepts strings for relationship
    names; the long-documented approach of using `Class.attrname` for join targets
    is now standard.
  id: totrans-6070
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    方法不再接受关系名称的字符串；使用 `Class.attrname` 作为联接目标的长期记录的方法现在是标准的。'
- en: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    no longer accepts the “aliased” and “from_joinpoint” arguments'
  id: totrans-6071
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    不再接受“别名”和“from_joinpoint”参数'
- en: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    no longer accepts chains of multiple join targets in one method call.'
  id: totrans-6072
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Query.join()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.join "sqlalchemy.orm.Query.join")
    不再在一次方法调用中接受多个联接目标的链式调用。'
- en: '`Query.from_self()`, `Query.select_entity_from()` and `Query.with_polymorphic()`
    are removed.'
  id: totrans-6073
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了 `Query.from_self()`、`Query.select_entity_from()` 和 `Query.with_polymorphic()`。
- en: The [`relationship.cascade_backrefs`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.cascade_backrefs
    "sqlalchemy.orm.relationship") parameter must now remain at its new default of
    `False`; the `save-update` cascade no longer cascades along a backref.
  id: totrans-6074
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`relationship.cascade_backrefs`](../orm/relationship_api.html#sqlalchemy.orm.relationship.params.cascade_backrefs
    "sqlalchemy.orm.relationship") 参数现在必须保持为其新默认值 `False`；`save-update` 级联不再沿着反向引用级联。'
- en: the [`Session.future`](../orm/session_api.html#sqlalchemy.orm.Session.params.future
    "sqlalchemy.orm.Session") parameter must always be set to `True`. 2.0-style transactional
    patterns for [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    are now always in effect.
  id: totrans-6075
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Session.future`](../orm/session_api.html#sqlalchemy.orm.Session.params.future
    "sqlalchemy.orm.Session") 参数现在必须始终设置为 `True`。对于 [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 的 2.0 风格事务模式现在始终生效。'
- en: Loader options no longer accept strings for attribute names. The long-documented
    approach of using `Class.attrname` for loader option targets is now standard.
  id: totrans-6076
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在加载器选项不再接受属性名称的字符串。长期以来一直使用的以 `Class.attrname` 形式为加载器选项目标的方法现在已经成为标准做法。
- en: Legacy forms of [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") removed, including `select([cols])`, the “whereclause”
    and keyword parameters of `some_table.select()`.
  id: totrans-6077
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了旧形式的 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")，包括 `select([cols])`，`some_table.select()`
    的“whereclause”和关键字参数。
- en: Legacy “in-place mutator” methods on [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") such as `append_whereclause()`, `append_order_by()`
    etc are removed.
  id: totrans-6078
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了 [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    上的旧式“原地变异器”方法，如 `append_whereclause()`，`append_order_by()` 等。
- en: Removed the very old “dbapi_proxy” module, which in very early SQLAlchemy releases
    was used to provide a transparent connection pool over a raw DBAPI connection.
  id: totrans-6079
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除了非常古老的“dbapi_proxy”模块，该模块在早期的 SQLAlchemy 发布版中用于在原始 DBAPI 连接上提供透明的连接池。
- en: 'References: [#7257](https://www.sqlalchemy.org/trac/ticket/7257)'
  id: totrans-6080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7257](https://www.sqlalchemy.org/trac/ticket/7257)
- en: '**[general] [changed]**'
  id: totrans-6081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general] [changed]**'
- en: The [`Query.instances()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.instances
    "sqlalchemy.orm.Query.instances") method is deprecated. The behavioral contract
    of this method, which is that it can iterate objects through arbitrary result
    sets, is long obsolete and no longer tested. Arbitrary statements can return objects
    by using constructs such as :meth`.Select.from_statement` or [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased").
  id: totrans-6082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Query.instances()`](../orm/queryguide/query.html#sqlalchemy.orm.Query.instances
    "sqlalchemy.orm.Query.instances") 方法已弃用。此方法的行为契约已经过时且不再受测试。可以通过诸如 :meth`.Select.from_statement`
    或 [`aliased()`](../orm/queryguide/api.html#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    等构造来使任意语句返回对象。'
- en: platform
  id: totrans-6083
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: platform
- en: '**[platform] [feature]**'
  id: totrans-6084
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[platform] [feature]**'
- en: The SQLAlchemy C extensions have been replaced with all new implementations
    written in Cython. Like the C extensions before, pre-built wheel files for a wide
    range of platforms are available on pypi so that building is not an issue for
    common platforms. For custom builds, `python setup.py build_ext` works as before,
    needing only the additional Cython install. `pyproject.toml` is also part of the
    source now which will establish the proper build dependencies when using pip.
  id: totrans-6085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy C 扩展现已替换为全部新的 Cython 实现。与之前的 C 扩展一样，pypi 上提供了各种平台的预构建 wheel 文件，因此在常见平台上构建不是问题。对于自定义构建，`python
    setup.py build_ext` 仍然与以前一样工作，只需要额外的 Cython 安装。`pyproject.toml` 现在也是源码的一部分，使用
    pip 时将建立正确的构建依赖关系。
- en: See also
  id: totrans-6086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[C Extensions now ported to Cython](whatsnew_20.html#change-7256)'
  id: totrans-6087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[C 扩展现在改为使用 Cython](whatsnew_20.html#change-7256)'
- en: 'References: [#7256](https://www.sqlalchemy.org/trac/ticket/7256)'
  id: totrans-6088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7256](https://www.sqlalchemy.org/trac/ticket/7256)
- en: '**[platform] [change]**'
  id: totrans-6089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[platform] [change]**'
- en: SQLAlchemy’s source build and installation now includes a `pyproject.toml` file
    for full [**PEP 517**](https://peps.python.org/pep-0517/) support.
  id: totrans-6090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy 的源码构建和安装现在包括了完整的 [**PEP 517**](https://peps.python.org/pep-0517/)
    支持。
- en: See also
  id: totrans-6091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Installation is now fully pep-517 enabled](whatsnew_20.html#change-7311)'
  id: totrans-6092
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[安装现在完全支持 pep-517](whatsnew_20.html#change-7311)'
- en: 'References: [#7311](https://www.sqlalchemy.org/trac/ticket/7311)'
  id: totrans-6093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7311](https://www.sqlalchemy.org/trac/ticket/7311)
- en: orm
  id: totrans-6094
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [feature] [sql]**'
  id: totrans-6095
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature] [sql]**'
- en: Added new feature to all included dialects that support RETURNING called “insertmanyvalues”.
    This is a generalization of the “fast executemany” feature first introduced for
    the psycopg2 driver in 1.4 at [ORM Batch inserts with psycopg2 now batch statements
    with RETURNING in most cases](migration_14.html#change-5263), which allows the
    ORM to batch INSERT statements into a much more efficient SQL structure while
    still being able to fetch newly generated primary key and SQL default values using
    RETURNING.
  id: totrans-6096
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对所有支持 RETURNING 的包含方言添加了名为“insertmanyvalues”的新功能。这是对“快速执行多次”功能的泛化，该功能首次在 1.4
    版本中为 psycopg2 驱动程序引入，详见[使用 RETURNING 的 ORM 批量插入现在在大多数情况下批量返回语句](migration_14.html#change-5263)，它允许
    ORM 将 INSERT 语句批量处理为更高效的 SQL 结构，同时仍然能够使用 RETURNING 检索新生成的主键和 SQL 默认值。
- en: The feature now applies to the many dialects that support RETURNING along with
    multiple VALUES constructs for INSERT, including all PostgreSQL drivers, SQLite,
    MariaDB, MS SQL Server. Separately, the Oracle dialect also gains the same capability
    using native cx_Oracle or OracleDB features.
  id: totrans-6097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此功能现在适用于支持 RETURNING 的多个方言以及用于 INSERT 的多个 VALUES 构造，包括所有 PostgreSQL 驱动程序、SQLite、MariaDB、MS
    SQL Server。另外，Oracle 方言也使用本地 cx_Oracle 或 OracleDB 功能获得了相同的功能。
- en: 'References: [#6047](https://www.sqlalchemy.org/trac/ticket/6047)'
  id: totrans-6098
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6047](https://www.sqlalchemy.org/trac/ticket/6047)
- en: '**[orm] [feature]**'
  id: totrans-6099
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new parameter [`AttributeEvents.include_key`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents"), which will include the dictionary or list key
    for operations such as `__setitem__()` (e.g. `obj[key] = value`) and `__delitem__()`
    (e.g. `del obj[key]`), using a new keyword parameter “key” or “keys”, depending
    on event, e.g. [`AttributeEvents.append.key`](../orm/events.html#sqlalchemy.orm.AttributeEvents.append.params.key
    "sqlalchemy.orm.AttributeEvents.append"), [`AttributeEvents.bulk_replace.keys`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace.params.keys
    "sqlalchemy.orm.AttributeEvents.bulk_replace"). This allows event handlers to
    take into account the key that was passed to the operation and is of particular
    importance for dictionary operations working with [`MappedCollection`](../orm/collection_api.html#sqlalchemy.orm.MappedCollection
    "sqlalchemy.orm.MappedCollection").
  id: totrans-6100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`AttributeEvents.include_key`](../orm/events.html#sqlalchemy.orm.AttributeEvents.params.include_key
    "sqlalchemy.orm.AttributeEvents")，它将包括字典或列表操作的键，例如`__setitem__()`（例如`obj[key]
    = value`）和`__delitem__()`（例如`del obj[key]`），使用一个新的关键字参数“key”或“keys”，取决于事件，例如[`AttributeEvents.append.key`](../orm/events.html#sqlalchemy.orm.AttributeEvents.append.params.key
    "sqlalchemy.orm.AttributeEvents.append")，[`AttributeEvents.bulk_replace.keys`](../orm/events.html#sqlalchemy.orm.AttributeEvents.bulk_replace.params.keys
    "sqlalchemy.orm.AttributeEvents.bulk_replace")。这允许事件处理程序考虑传递给操作的键，并且对于使用[`MappedCollection`](../orm/collection_api.html#sqlalchemy.orm.MappedCollection
    "sqlalchemy.orm.MappedCollection")的字典操作非常重要。
- en: 'References: [#8375](https://www.sqlalchemy.org/trac/ticket/8375)'
  id: totrans-6101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8375](https://www.sqlalchemy.org/trac/ticket/8375)
- en: '**[orm] [feature]**'
  id: totrans-6102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added new parameter [`Operators.op.python_impl`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.python_impl
    "sqlalchemy.sql.expression.Operators.op"), available from [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") and also when using the `custom_op`
    constructor directly, which allows an in-Python evaluation function to be provided
    along with the custom SQL operator. This evaluation function becomes the implementation
    used when the operator object is used given plain Python objects as operands on
    both sides, and in particular is compatible with the `synchronize_session='evaluate'`
    option used with [ORM-Enabled INSERT, UPDATE, and DELETE statements](../orm/queryguide/dml.html#orm-expression-update-delete).
  id: totrans-6103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`Operators.op.python_impl`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op.params.python_impl
    "sqlalchemy.sql.expression.Operators.op")，可从[`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")和直接使用`custom_op`构造函数时使用，它允许提供一个在 Python
    中的评估函数以及自定义 SQL 运算符。当操作符对象在两侧都使用普通 Python 对象作为操作数时，此评估函数成为使用的实现，并且特别兼容于 [启用 ORM
    的 INSERT、UPDATE 和 DELETE 语句](../orm/queryguide/dml.html#orm-expression-update-delete)中使用的`synchronize_session='evaluate'`选项。
- en: 'References: [#3162](https://www.sqlalchemy.org/trac/ticket/3162)'
  id: totrans-6104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#3162](https://www.sqlalchemy.org/trac/ticket/3162)
- en: '**[orm] [feature]**'
  id: totrans-6105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    (and by extension [`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession")) now has new state-tracking functionality
    that will proactively trap any unexpected state changes which occur as a particular
    transactional method proceeds. This is to allow situations where the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is being used in a thread-unsafe manner, where event
    hooks or similar may be calling unexpected methods within operations, as well
    as potentially under other concurrency situations such as asyncio or gevent to
    raise an informative message when the illegal access first occurs, rather than
    passing silently leading to secondary failures due to the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") being in an invalid state.
  id: totrans-6106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在[`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")（以及间接地[`AsyncSession`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession
    "sqlalchemy.ext.asyncio.AsyncSession"））具有新的状态跟踪功能，将积极捕获任何在特定事务方法执行过程中发生的意外状态更改。这是为了允许在[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")以线程不安全的方式使用的情况下，其中事件钩子或类似物可能在操作中调用意外的方法，以及潜在地在其他并发情况下，例如asyncio或gevent在首次发生非法访问时引发信息性消息，而不是无声地传递，从而导致由于[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")处于无效状态而导致的次要故障。
- en: See also
  id: totrans-6107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅
- en: '[Session raises proactively when illegal concurrent or reentrant access is
    detected](whatsnew_20.html#change-7433)'
  id: totrans-6108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[当检测到非法并发或重入访问时，会主动引发会话](whatsnew_20.html#change-7433)'
- en: 'References: [#7433](https://www.sqlalchemy.org/trac/ticket/7433)'
  id: totrans-6109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7433](https://www.sqlalchemy.org/trac/ticket/7433)
- en: '**[orm] [feature]**'
  id: totrans-6110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: The [`composite()`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")
    mapping construct now supports automatic resolution of values when used with a
    Python `dataclass`; the `__composite_values__()` method no longer needs to be
    implemented as this method is derived from inspection of the dataclass.
  id: totrans-6111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当与Python `dataclass`一起使用时，[`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")映射构造现在支持值的自动解析；不再需要实现`__composite_values__()`方法，因为此方法是从数据类的检查中派生的。
- en: Additionally, classes mapped by [`composite`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") now support ordering comparison operations, e.g. `<`,
    `>=`, etc.
  id: totrans-6112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，由[`composite`](../orm/composites.html#sqlalchemy.orm.composite "sqlalchemy.orm.composite")映射的类现在支持排序比较操作，例如
    `<`，`>=`等。
- en: See the new documentation at [Composite Column Types](../orm/composites.html#mapper-composite)
    for examples.
  id: totrans-6113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参阅[Composite Column Types](../orm/composites.html#mapper-composite)的新文档以获取示例。
- en: '**[orm] [feature]**'
  id: totrans-6114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [feature]**'
- en: Added very experimental feature to the [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") and [`immediateload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload
    "sqlalchemy.orm.immediateload") loader options called [`selectinload.recursion_depth`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload.params.recursion_depth
    "sqlalchemy.orm.selectinload") / [`immediateload.recursion_depth`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload.params.recursion_depth
    "sqlalchemy.orm.immediateload") , which allows a single loader option to automatically
    recurse into self-referential relationships. Is set to an integer indicating depth,
    and may also be set to -1 to indicate to continue loading until no more levels
    deep are found. Major internal changes to [`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload") and [`immediateload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload
    "sqlalchemy.orm.immediateload") allow this feature to work while continuing to
    make correct use of the compilation cache, as well as not using arbitrary recursion,
    so any level of depth is supported (though would emit that many queries). This
    may be useful for self-referential structures that must be loaded fully eagerly,
    such as when using asyncio.
  id: totrans-6115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")和[`immediateload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload
    "sqlalchemy.orm.immediateload")加载器选项中添加了非常实验性的功能，称为[`selectinload.recursion_depth`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload.params.recursion_depth
    "sqlalchemy.orm.selectinload") / [`immediateload.recursion_depth`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload.params.recursion_depth
    "sqlalchemy.orm.immediateload")，允许单个加载器选项自动递归到自引用关系中。设置为表示深度的整数，也可以设置为-1，表示继续加载直到不再找到更深层级。对[`selectinload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.selectinload
    "sqlalchemy.orm.selectinload")和[`immediateload()`](../orm/queryguide/relationships.html#sqlalchemy.orm.immediateload
    "sqlalchemy.orm.immediateload")进行了重大内部更改，使此功能能够继续正确使用编译缓存，并且不使用任意递归，因此支持任何深度级别（尽管会发出相应数量的查询）。这对于必须完全急切加载的自引用结构可能很有用，例如在使用asyncio时。
- en: A warning is also emitted when loader options are connected together with arbitrary
    lengths (that is, without using the new `recursion_depth` option) when excessive
    recursion depth is detected in related object loading. This operation continues
    to use huge amounts of memory and performs extremely poorly; the cache is disabled
    when this condition is detected to protect the cache from being flooded with arbitrary
    statements.
  id: totrans-6116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当检测到相关对象加载中存在过多递归深度时，连接在一起的加载器选项（即，未使用新的`recursion_depth`选项）时也会发出警告。此操作继续使用大量内存并性能极差；当检测到此条件时，缓存将被禁用，以防止缓存被任意语句淹没。
- en: 'References: [#8126](https://www.sqlalchemy.org/trac/ticket/8126)'
  id: totrans-6117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8126](https://www.sqlalchemy.org/trac/ticket/8126)
- en: '**[orm] [feature]**'
  id: totrans-6118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [功能]**'
- en: Added new parameter [`Session.autobegin`](../orm/session_api.html#sqlalchemy.orm.Session.params.autobegin
    "sqlalchemy.orm.Session"), which when set to `False` will prevent the [`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") from beginning a transaction implicitly. The [`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") method must be called explicitly first in order
    to proceed with operations, otherwise an error is raised whenever any operation
    would otherwise have begun automatically. This option can be used to create a
    “safe” [`Session`](../orm/session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    that won’t implicitly start new transactions.
  id: totrans-6119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了新参数[`Session.autobegin`](../orm/session_api.html#sqlalchemy.orm.Session.params.autobegin
    "sqlalchemy.orm.Session")，当设置为`False`时，将阻止[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")隐式开始事务。必须首先显式调用[`Session.begin()`](../orm/session_api.html#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")方法才能继续操作，否则在任何操作本应自动开始时都会引发错误。此选项可用于创建一个“安全”的[`Session`](../orm/session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，不会隐式启动新事务。
- en: As part of this change, also added a new status variable [`origin`](../orm/session_api.html#sqlalchemy.orm.SessionTransaction.origin
    "sqlalchemy.orm.SessionTransaction.origin") which may be useful for event handling
    code to be aware of the origin of a particular [`SessionTransaction`](../orm/session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  id: totrans-6120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为此更改的一部分，还添加了一个新的状态变量[`origin`](../orm/session_api.html#sqlalchemy.orm.SessionTransaction.origin
    "sqlalchemy.orm.SessionTransaction.origin")，这可能对事件处理代码有用，以便了解特定[`SessionTransaction`](../orm/session_api.html#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")的起源。
- en: 'References: [#6928](https://www.sqlalchemy.org/trac/ticket/6928)'
  id: totrans-6121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#6928](https://www.sqlalchemy.org/trac/ticket/6928)
- en: '**[orm] [feature]**'
  id: totrans-6122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [特性]**'
- en: Declarative mixins which use [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that contain [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") references no longer need to use [`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr") to achieve this mapping; the [`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") object is copied along with the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") itself when the column is applied to the declared
    mapping.
  id: totrans-6123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不再需要使用[`declared_attr()`](../orm/mapping_api.html#sqlalchemy.orm.declared_attr
    "sqlalchemy.orm.declared_attr")来实现此映射的使用[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的声明性混合对象，该对象包含[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")引用；当列应用于声明的映射时，[`ForeignKey`](../core/constraints.html#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")对象与[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")本身一起被复制。
- en: '**[orm] [usecase]**'
  id: totrans-6124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [用例]**'
- en: Added [`load_only.raiseload`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only.params.raiseload
    "sqlalchemy.orm.load_only") parameter to the [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") loader option, so that the unloaded attributes may
    have “raise” behavior rather than lazy loading. Previously there wasn’t really
    a way to do this with the [`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only") option directly.
  id: totrans-6125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only "sqlalchemy.orm.load_only")加载器选项中添加了[`load_only.raiseload`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only.params.raiseload
    "sqlalchemy.orm.load_only")参数，使得未加载的属性可以具有“raise”行为而不是惰性加载。以前使用[`load_only()`](../orm/queryguide/columns.html#sqlalchemy.orm.load_only
    "sqlalchemy.orm.load_only")选项直接实现这一点的方法实际上并不存在。
- en: '**[orm] [change]**'
  id: totrans-6126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [更改]**'
- en: 'To better accommodate explicit typing, the names of some ORM constructs that
    are typically constructed internally, but nonetheless are sometimes visible in
    messaging as well as typing, have been changed to more succinct names which also
    match the name of their constructing function (with different casing), in all
    cases maintaining aliases to the old names for the forseeable future:'
  id: totrans-6127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了更好地适应显式类型，一些通常在内部构建但有时也可见于消息以及类型化的ORM构造的名称已更改为更简洁的名称，这些名称还与其构造函数的名称（使用不同的大小写）匹配，所有情况下都保留了旧名称的别名以供可预见的未来使用：
- en: '[`RelationshipProperty`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty") becomes an alias for the primary name [`Relationship`](../orm/internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship"), which is constructed as always from the [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") function'
  id: totrans-6128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`RelationshipProperty`](../orm/internals.html#sqlalchemy.orm.RelationshipProperty
    "sqlalchemy.orm.RelationshipProperty")成为主要名称[`Relationship`](../orm/internals.html#sqlalchemy.orm.Relationship
    "sqlalchemy.orm.Relationship")的别名，始终从[`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")函数构造'
- en: '[`SynonymProperty`](../orm/internals.html#sqlalchemy.orm.SynonymProperty "sqlalchemy.orm.SynonymProperty")
    becomes an alias for the primary name [`Synonym`](../orm/internals.html#sqlalchemy.orm.Synonym
    "sqlalchemy.orm.Synonym"), constructed as always from the [`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym") function'
  id: totrans-6129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`SynonymProperty`](../orm/internals.html#sqlalchemy.orm.SynonymProperty "sqlalchemy.orm.SynonymProperty")成为主要名称[`Synonym`](../orm/internals.html#sqlalchemy.orm.Synonym
    "sqlalchemy.orm.Synonym")的别名，始终从[`synonym()`](../orm/mapped_attributes.html#sqlalchemy.orm.synonym
    "sqlalchemy.orm.synonym")函数构造'
- en: '[`CompositeProperty`](../orm/internals.html#sqlalchemy.orm.CompositeProperty
    "sqlalchemy.orm.CompositeProperty") becomes an alias for the primary name [`Composite`](../orm/internals.html#sqlalchemy.orm.Composite
    "sqlalchemy.orm.Composite"), constructed as always from the [`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite") function'
  id: totrans-6130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`CompositeProperty`](../orm/internals.html#sqlalchemy.orm.CompositeProperty
    "sqlalchemy.orm.CompositeProperty")现在成为主要名称[`Composite`](../orm/internals.html#sqlalchemy.orm.Composite
    "sqlalchemy.orm.Composite")的别名，始终由[`composite()`](../orm/composites.html#sqlalchemy.orm.composite
    "sqlalchemy.orm.composite")函数构造'
- en: '**[orm] [change]**'
  id: totrans-6131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [change]**'
- en: For consistency with the prominent ORM concept [`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped
    "sqlalchemy.orm.Mapped"), the names of the dictionary-oriented collections, [`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection"), [`column_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.column_mapped_collection
    "sqlalchemy.orm.column_mapped_collection"), and [`MappedCollection`](../orm/collection_api.html#sqlalchemy.orm.MappedCollection
    "sqlalchemy.orm.MappedCollection"), are changed to [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict"), [`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict") and [`KeyFuncDict`](../orm/collection_api.html#sqlalchemy.orm.KeyFuncDict
    "sqlalchemy.orm.KeyFuncDict"), using the phrase “dict” to minimize any confusion
    against the term “mapped”. The old names will remain indefinitely with no schedule
    for removal.
  id: totrans-6132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了与突出的ORM概念[`Mapped`](../orm/internals.html#sqlalchemy.orm.Mapped "sqlalchemy.orm.Mapped")保持一致，字典导向的集合的名称，[`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection")，[`column_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.column_mapped_collection
    "sqlalchemy.orm.column_mapped_collection")和[`MappedCollection`](../orm/collection_api.html#sqlalchemy.orm.MappedCollection
    "sqlalchemy.orm.MappedCollection")，被更改为[`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")，[`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict")和[`KeyFuncDict`](../orm/collection_api.html#sqlalchemy.orm.KeyFuncDict
    "sqlalchemy.orm.KeyFuncDict")，使用短语“dict”来最小化与术语“mapped”的任何混淆。旧名称将无限期保留，没有删除计划。
- en: 'References: [#8608](https://www.sqlalchemy.org/trac/ticket/8608)'
  id: totrans-6133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8608](https://www.sqlalchemy.org/trac/ticket/8608)
- en: '**[orm] [bug]**'
  id: totrans-6134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: All [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    objects will now consistently raise [`ResourceClosedError`](../core/exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError") if they are used after a hard close, which
    includes the “hard close” that occurs after calling “single row or value” methods
    like [`Result.first()`](../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first") and [`Result.scalar()`](../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar"). This was already the behavior of the most
    common class of result objects returned for Core statement executions, i.e. those
    based on [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult"), so this behavior is not new. However, the change
    has been extended to properly accommodate for the ORM “filtering” result objects
    returned when using 2.0 style ORM queries, which would previously behave in “soft
    closed” style of returning empty results, or wouldn’t actually “soft close” at
    all and would continue yielding from the underlying cursor.
  id: totrans-6135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象现在在硬关闭后使用时将一致引发[`ResourceClosedError`](../core/exceptions.html#sqlalchemy.exc.ResourceClosedError
    "sqlalchemy.exc.ResourceClosedError")，包括在调用“单行或值”方法后发生的“硬关闭”，例如[`Result.first()`](../core/connections.html#sqlalchemy.engine.Result.first
    "sqlalchemy.engine.Result.first")和[`Result.scalar()`](../core/connections.html#sqlalchemy.engine.Result.scalar
    "sqlalchemy.engine.Result.scalar")。这已经是基于[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")的最常见的Core语句执行返回的结果对象的行为，因此这种行为并非新鲜事。然而，这一变化已经扩展到适当地适应使用2.0风格ORM查询时返回的ORM“过滤”结果对象，以前这些对象会以“软关闭”方式返回空结果，或者根本不会“软关闭”，而会继续从底层游标中产生。
- en: As part of this change, also added [`Result.close()`](../core/connections.html#sqlalchemy.engine.Result.close
    "sqlalchemy.engine.Result.close") to the base [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") class and implemented it for the filtered result implementations
    that are used by the ORM, so that it is possible to call the [`CursorResult.close()`](../core/connections.html#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close") method on the underlying [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") when the `yield_per` execution option is in
    use to close a server side cursor before remaining ORM results have been fetched.
    This was again already available for Core result sets but the change makes it
    available for 2.0 style ORM results as well.
  id: totrans-6136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为这一变更的一部分，还向基本[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")类添加了[`Result.close()`](../core/connections.html#sqlalchemy.engine.Result.close
    "sqlalchemy.engine.Result.close")，并为ORM使用的过滤结果实现实现了它，因此在使用`yield_per`执行选项关闭服务器端游标之前，可以调用基础[`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult")上的[`CursorResult.close()`](../core/connections.html#sqlalchemy.engine.CursorResult.close
    "sqlalchemy.engine.CursorResult.close")方法，以关闭尚未获取的ORM结果。这对于Core结果集已经可用，但此更改也使其适用于2.0风格的ORM结果。
- en: 'This change is also **backported** to: 1.4.27'
  id: totrans-6137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.27
- en: 'References: [#7274](https://www.sqlalchemy.org/trac/ticket/7274)'
  id: totrans-6138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7274](https://www.sqlalchemy.org/trac/ticket/7274)
- en: '**[orm] [bug]**'
  id: totrans-6139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue where the [`registry.map_declaratively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_declaratively
    "sqlalchemy.orm.registry.map_declaratively") method would return an internal “mapper
    config” object and not the [`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object as stated in the API documentation.
  id: totrans-6140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`registry.map_declaratively()`](../orm/mapping_api.html#sqlalchemy.orm.registry.map_declaratively
    "sqlalchemy.orm.registry.map_declaratively")方法返回内部“映射器配置”对象而不是API文档中所述的[`Mapper`](../orm/mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象的问题。
- en: '**[orm] [bug]**'
  id: totrans-6141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed performance regression which appeared at least in version 1.3 if not earlier
    (sometime after 1.0) where the loading of deferred columns, those explicitly mapped
    with [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer "sqlalchemy.orm.defer")
    as opposed to non-deferred columns that were expired, from a joined inheritance
    subclass would not use the “optimized” query which only queried the immediate
    table that contains the unloaded columns, instead running a full ORM query which
    would emit a JOIN for all base tables, which is not necessary when only loading
    columns from the subclass.
  id: totrans-6142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了性能回退问题，该问题至少在1.3版本中出现，如果不是更早（在1.0之后的某个时候），在联接继承子类中加载延迟列时，那些明确映射为[`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer")的列，而不是已过期的非延迟列，不会使用“优化”查询，该查询仅查询包含未加载列的直接表，而是运行完整的ORM查询，该查询会为所有基本表发出JOIN，当仅从子类加载列时，这是不必要的。
- en: 'References: [#7463](https://www.sqlalchemy.org/trac/ticket/7463)'
  id: totrans-6143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7463](https://www.sqlalchemy.org/trac/ticket/7463)
- en: '**[orm] [bug]**'
  id: totrans-6144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The internals for the [`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load") object and related loader strategy patterns have been mostly
    rewritten, to take advantage of the fact that only attribute-bound paths, not
    strings, are now supported. The rewrite hopes to make it more straightforward
    to address new use cases and subtle issues within the loader strategy system going
    forward.
  id: totrans-6145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Load`](../orm/queryguide/relationships.html#sqlalchemy.orm.Load "sqlalchemy.orm.Load")对象及相关加载器策略模式的内部大部分已经重写，以利用现在仅支持属性绑定路径而不是字符串的事实。重写希望更容易解决加载器策略系统中的新用例和微妙问题。'
- en: 'References: [#6986](https://www.sqlalchemy.org/trac/ticket/6986)'
  id: totrans-6146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6986](https://www.sqlalchemy.org/trac/ticket/6986)
- en: '**[orm] [bug]**'
  id: totrans-6147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Made an improvement to the “deferred” / “load_only” set of strategy options
    where if a certain object is loaded from two different logical paths within one
    query, attributes that have been configured by at least one of the options to
    be populated will be populated in all cases, even if other load paths for that
    same object did not set this option. previously, it was based on randomness as
    to which “path” addressed the object first.
  id: totrans-6148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“deferred”/“load_only”一组策略选项进行了改进，其中如果一个对象从一个查询中的两个不同的逻辑路径加载，则已由至少一个选项配置为填充的属性将在所有情况下填充，即使对于该对象的其他加载路径没有设置此选项。以前，基于随机性来确定哪个“路径”首先处理对象。
- en: 'References: [#8166](https://www.sqlalchemy.org/trac/ticket/8166)'
  id: totrans-6149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8166](https://www.sqlalchemy.org/trac/ticket/8166)
- en: '**[orm] [bug]**'
  id: totrans-6150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed issue in ORM enabled UPDATE when the statement is created against a joined-inheritance
    subclass, updating only local table columns, where the “fetch” synchronization
    strategy would not render the correct RETURNING clause for databases that use
    RETURNING for fetch synchronization. Also adjusts the strategy used for RETURNING
    in UPDATE FROM and DELETE FROM statements.
  id: totrans-6151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在启用 ORM 的情况下，修复了针对联合继承子类创建的 UPDATE 语句中的问题，仅更新本地表列的情况，在使用 RETURNING 进行获取同步的数据库中，如果使用“fetch”同步策略，则不会生成正确的
    RETURNING 子句。还调整了 UPDATE FROM 和 DELETE FROM 语句中使用的 RETURNING 策略。
- en: 'References: [#8344](https://www.sqlalchemy.org/trac/ticket/8344)'
  id: totrans-6152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8344](https://www.sqlalchemy.org/trac/ticket/8344)
- en: '**[orm] [bug] [asyncio]**'
  id: totrans-6153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug] [asyncio]**'
- en: Removed the unused `**kw` arguments from [`begin`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin") and [`begin_nested`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.begin_nested
    "sqlalchemy.ext.asyncio.AsyncSession.begin_nested"). These kw aren’t used and
    appear to have been added to the API in error.
  id: totrans-6154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从[`begin`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.begin
    "sqlalchemy.ext.asyncio.AsyncSession.begin")和[`begin_nested`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.AsyncSession.begin_nested
    "sqlalchemy.ext.asyncio.AsyncSession.begin_nested")中移除了未使用的 `**kw` 参数。这些参数未被使用，似乎是错误地添加到
    API 中的。
- en: 'References: [#7703](https://www.sqlalchemy.org/trac/ticket/7703)'
  id: totrans-6155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#7703](https://www.sqlalchemy.org/trac/ticket/7703)
- en: '**[orm] [bug]**'
  id: totrans-6156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Changed the attribute access method used by [`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection") and [`column_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.column_mapped_collection
    "sqlalchemy.orm.column_mapped_collection") (now called [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict") and [`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict")) , used when populating the dictionary, to
    assert that the data value on the object to be used as the dictionary key is actually
    present, and is not instead using “None” due to the attribute never being actually
    assigned. This is used to prevent a mis-population of None for a key when assigning
    via a backref where the “key” attribute on the object is not yet assigned.
  id: totrans-6157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了[`attribute_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.attribute_mapped_collection
    "sqlalchemy.orm.attribute_mapped_collection")和[`column_mapped_collection()`](../orm/collection_api.html#sqlalchemy.orm.column_mapped_collection
    "sqlalchemy.orm.column_mapped_collection")的属性访问方法（现在称为[`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict")和[`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict")) ，用于断言要用作字典键的对象上的数据值实际上存在，并且不是由于属性从未实际分配而使用“None”。这用于防止在通过反向引用进行赋值时，对象上的“key”属性尚未被分配时，为键错误地赋予“None”。
- en: As the failure mode here is a transitory condition that is not typically persisted
    to the database, and is easy to produce via the constructor of the class based
    on the order in which parameters are assigned, it is very possible that many applications
    include this behavior already which is silently passed over. To accommodate for
    applications where this error is now raised, a new parameter [`attribute_keyed_dict.ignore_unpopulated_attribute`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict.params.ignore_unpopulated_attribute
    "sqlalchemy.orm.attribute_keyed_dict") is also added to both [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict") and [`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict") that instead causes the erroneous backref
    assignment to be skipped.
  id: totrans-6158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于此处的故障模式是一个通常不会持久到数据库的瞬态条件，并且很容易通过类的构造函数根据分配参数的顺序产生，很可能许多应用程序已经包含了这种行为，这种行为是被默默地忽略的。为了适应这种现在引发错误的应用程序，还向
    [`attribute_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict
    "sqlalchemy.orm.attribute_keyed_dict") 和 [`column_keyed_dict()`](../orm/collection_api.html#sqlalchemy.orm.column_keyed_dict
    "sqlalchemy.orm.column_keyed_dict") 添加了一个新参数 [`attribute_keyed_dict.ignore_unpopulated_attribute`](../orm/collection_api.html#sqlalchemy.orm.attribute_keyed_dict.params.ignore_unpopulated_attribute
    "sqlalchemy.orm.attribute_keyed_dict")，该参数使得错误的反向引用赋值被跳过。
- en: 'References: [#8372](https://www.sqlalchemy.org/trac/ticket/8372)'
  id: totrans-6159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#8372](https://www.sqlalchemy.org/trac/ticket/8372)
- en: '**[orm] [bug]**'
  id: totrans-6160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Added new parameter [`AbstractConcreteBase.strict_attrs`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase.params.strict_attrs
    "sqlalchemy.ext.declarative.AbstractConcreteBase") to the [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") declarative mixin class. The
    effect of this parameter is that the scope of attributes on subclasses is correctly
    limited to the subclass in which each attribute is declared, rather than the previous
    behavior where all attributes of the entire hierarchy are applied to the base
    “abstract” class. This produces a cleaner, more correct mapping where subclasses
    no longer have non-useful attributes on them which are only relevant to sibling
    classes. The default for this parameter is False, which leaves the previous behavior
    unchanged; this is to support existing code that makes explicit use of these attributes
    in queries. To migrate to the newer approach, apply explicit attributes to the
    abstract base class as needed.
  id: totrans-6161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 [`AbstractConcreteBase`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase
    "sqlalchemy.ext.declarative.AbstractConcreteBase") 声明混合类添加了新的参数 [`AbstractConcreteBase.strict_attrs`](../orm/extensions/declarative/index.html#sqlalchemy.ext.declarative.AbstractConcreteBase.params.strict_attrs
    "sqlalchemy.ext.declarative.AbstractConcreteBase")。该参数的效果是，子类上属性的范围正确限制为在每个属性声明的子类中，而不是以前的行为，在整个层次结构上应用于基本“抽象”类的所有属性。这产生了一个更干净、更正确的映射，其中子类不再具有仅与同级类相关的非有用属性。该参数的默认值为
    False，这保留了先前的行为不变；这是为了支持在查询中显式使用这些属性的现有代码。要迁移到新方法，请根据需要将显式属性应用于抽象基类。
- en: 'References: [#8403](https://www.sqlalchemy.org/trac/ticket/8403)'
  id: totrans-6162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#8403](https://www.sqlalchemy.org/trac/ticket/8403)
- en: '**[orm] [bug]**'
  id: totrans-6163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: The behavior of [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") regarding primary key and “polymorphic discriminator”
    columns is revised such that these columns are no longer deferrable, either explicitly
    or when using a wildcard such as `defer('*')`. Previously, a wildcard deferral
    would not load PK/polymorphic columns which led to errors in all cases, as the
    ORM relies upon these columns to produce object identities. The behavior of explicit
    deferral of primary key columns is unchanged as these deferrals already were implicitly
    ignored.
  id: totrans-6164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于 [`defer()`](../orm/queryguide/columns.html#sqlalchemy.orm.defer "sqlalchemy.orm.defer")
    的行为已经修订，以处理主键和“多态鉴别器”列，使得这些列不再是可延迟加载的，无论是显式地还是使用诸如 `defer('*')` 的通配符。以前，通配符延迟加载将不会加载主键/多态列，这导致在所有情况下都出现错误，因为
    ORM 依赖于这些列来生成对象标识。对主键列的显式延迟加载的行为未更改，因为这些延迟加载已经被隐式忽略。
- en: 'References: [#7495](https://www.sqlalchemy.org/trac/ticket/7495)'
  id: totrans-6165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考文献：[#7495](https://www.sqlalchemy.org/trac/ticket/7495)
- en: '**[orm] [bug]**'
  id: totrans-6166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bug]**'
- en: Fixed bug in the behavior of the [`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper") parameter such that client-side SQL default or onupdate
    expressions in the table definition alone will trigger a fetch operation using
    RETURNING or SELECT when the ORM emits an INSERT or UPDATE for the row. Previously,
    only server side defaults established as part of table DDL and/or server-side
    onupdate expressions would trigger this fetch, even though client-side SQL expressions
    would be included when the fetch was rendered.
  id: totrans-6167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了[`Mapper.eager_defaults`](../orm/mapping_api.html#sqlalchemy.orm.Mapper.params.eager_defaults
    "sqlalchemy.orm.Mapper")参数行为中的错误，以前只有表定义中的客户端端 SQL 默认值或 onupdate 表达式会在 ORM 为行执行
    INSERT 或 UPDATE 时触发使用 RETURNING 或 SELECT 的提取操作。以前，只有作为表 DDL 的一部分和/或服务器端 onupdate
    表达式建立的服务器端默认值会触发这个提取，尽管客户端端 SQL 表达式会在提取时被包括。
- en: 'References: [#7438](https://www.sqlalchemy.org/trac/ticket/7438)'
  id: totrans-6168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#7438](https://www.sqlalchemy.org/trac/ticket/7438)
- en: engine
  id: totrans-6169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引擎
- en: '**[engine] [feature]**'
  id: totrans-6170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: The [`DialectEvents.handle_error()`](../core/events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error") event is now moved to the [`DialectEvents`](../core/events.html#sqlalchemy.events.DialectEvents
    "sqlalchemy.events.DialectEvents") suite from the `EngineEvents` suite, and now
    participates in the connection pool “pre ping” event for those dialects that make
    use of disconnect codes in order to detect if the database is live. This allows
    end-user code to alter the state of “pre ping”. Note that this does not include
    dialects which contain a native “ping” method such as that of psycopg2 or most
    MySQL dialects.
  id: totrans-6171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DialectEvents.handle_error()`](../core/events.html#sqlalchemy.events.DialectEvents.handle_error
    "sqlalchemy.events.DialectEvents.handle_error")事件现在已从 `EngineEvents` 套件移动到 [`DialectEvents`](../core/events.html#sqlalchemy.events.DialectEvents
    "sqlalchemy.events.DialectEvents") 套件，并且现在参与连接池的“pre ping”事件，对于那些使用断开代码来检测数据库是否在线的方言。这允许最终用户代码修改“pre
    ping”的状态。请注意，这不包括包含本地“ping”方法的方言，例如 psycopg2 或大多数 MySQL 方言。'
- en: 'References: [#5648](https://www.sqlalchemy.org/trac/ticket/5648)'
  id: totrans-6172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#5648](https://www.sqlalchemy.org/trac/ticket/5648)
- en: '**[engine] [feature]**'
  id: totrans-6173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [特性]**'
- en: The [`ConnectionEvents.set_connection_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options") and [`ConnectionEvents.set_engine_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options") event hooks
    now allow the given options dictionary to be modified in-place, where the new
    contents will be received as the ultimate execution options to be acted upon.
    Previously, in-place modifications to the dictionary were not supported.
  id: totrans-6174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ConnectionEvents.set_connection_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_connection_execution_options
    "sqlalchemy.events.ConnectionEvents.set_connection_execution_options") 和 [`ConnectionEvents.set_engine_execution_options()`](../core/events.html#sqlalchemy.events.ConnectionEvents.set_engine_execution_options
    "sqlalchemy.events.ConnectionEvents.set_engine_execution_options") 事件挂钩现在允许对给定的选项字典进行就地修改，新内容将作为最终执行选项接收。以前，不支持对字典进行就地修改。'
- en: '**[engine] [usecase]**'
  id: totrans-6175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [用例]**'
- en: Generalized the [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter to the base dialect so that it is no longer
    dependent on individual dialects to be present. This parameter sets up the “isolation
    level” setting to occur for all new database connections as soon as they are created
    by the connection pool, where the value then stays set without being reset on
    every checkin.
  id: totrans-6176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")参数泛化到基础方言，以便它不再依赖于各个方言的存在。此参数设置“隔离级别”设置为一旦由连接池创建新的数据库连接，该值就保持设置而不会在每次签入时重置。
- en: The [`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") parameter is essentially equivalent in functionality
    to using the [`Engine.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Engine.execution_options.params.isolation_level
    "sqlalchemy.engine.Engine.execution_options") parameter via [`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") for an engine-wide setting. The
    difference is in that the former setting assigns the isolation level just once
    when a connection is created, the latter sets and resets the given level on each
    connection checkout.
  id: totrans-6177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.isolation_level`](../core/engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine")参数在功能上基本等同于通过[`Engine.execution_options.isolation_level`](../core/connections.html#sqlalchemy.engine.Engine.execution_options.params.isolation_level
    "sqlalchemy.engine.Engine.execution_options")参数使用[`Engine.execution_options()`](../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")进行引擎范围设置。区别在于前者设置隔离级别仅在创建连接时执行一次，后者在每次连接检出时设置和重置给定级别。'
- en: 'References: [#6342](https://www.sqlalchemy.org/trac/ticket/6342)'
  id: totrans-6178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6342](https://www.sqlalchemy.org/trac/ticket/6342)
- en: '**[engine] [change]**'
  id: totrans-6179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [更改]**'
- en: 'Some small API changes regarding engines and dialects:'
  id: totrans-6180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于引擎和方言的一些小的API更改：
- en: 'The [`Dialect.set_isolation_level()`](../core/internals.html#sqlalchemy.engine.Dialect.set_isolation_level
    "sqlalchemy.engine.Dialect.set_isolation_level"), [`Dialect.get_isolation_level()`](../core/internals.html#sqlalchemy.engine.Dialect.get_isolation_level
    "sqlalchemy.engine.Dialect.get_isolation_level"), :meth: dialect methods will
    always be passed the raw DBAPI connection'
  id: totrans-6181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Dialect.set_isolation_level()`](../core/internals.html#sqlalchemy.engine.Dialect.set_isolation_level
    "sqlalchemy.engine.Dialect.set_isolation_level")，[`Dialect.get_isolation_level()`](../core/internals.html#sqlalchemy.engine.Dialect.get_isolation_level
    "sqlalchemy.engine.Dialect.get_isolation_level")，:meth: 方言方法将始终传递原始的DBAPI连接'
- en: The [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    classes no longer share a base `Connectable` superclass, which has been removed.
  id: totrans-6182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")和[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")类不再共享基础的`Connectable`超类，该超类已被移除。'
- en: Added a new interface class [`PoolProxiedConnection`](../core/pooling.html#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") - this is the public facing interface
    for the familiar [`_ConnectionFairy`](../core/pooling.html#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy") class which is nonetheless a private class.
  id: totrans-6183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加了一个新的接口类[`PoolProxiedConnection`](../core/pooling.html#sqlalchemy.pool.PoolProxiedConnection
    "sqlalchemy.pool.PoolProxiedConnection") - 这是熟悉的[`_ConnectionFairy`](../core/pooling.html#sqlalchemy.pool._ConnectionFairy
    "sqlalchemy.pool._ConnectionFairy")类的公共接口，尽管它是一个私有类。
- en: 'References: [#7122](https://www.sqlalchemy.org/trac/ticket/7122)'
  id: totrans-6184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7122](https://www.sqlalchemy.org/trac/ticket/7122)
- en: '**[engine] [bug] [regression]**'
  id: totrans-6185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误] [回归]**'
- en: Fixed regression where the [`CursorResult.fetchmany()`](../core/connections.html#sqlalchemy.engine.CursorResult.fetchmany
    "sqlalchemy.engine.CursorResult.fetchmany") method would fail to autoclose a server-side
    cursor (i.e. when `stream_results` or `yield_per` is in use, either Core or ORM
    oriented results) when the results were fully exhausted.
  id: totrans-6186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个问题，即[`CursorResult.fetchmany()`](../core/connections.html#sqlalchemy.engine.CursorResult.fetchmany
    "sqlalchemy.engine.CursorResult.fetchmany")方法在结果完全耗尽时无法自动关闭服务器端游标（即在使用`stream_results`或`yield_per`时，无论是核心还是ORM导向的结果）。
- en: 'This change is also **backported** to: 1.4.27'
  id: totrans-6187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**反向移植**到：1.4.27
- en: 'References: [#7274](https://www.sqlalchemy.org/trac/ticket/7274)'
  id: totrans-6188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7274](https://www.sqlalchemy.org/trac/ticket/7274)
- en: '**[engine] [bug]**'
  id: totrans-6189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎] [错误]**'
- en: Fixed issue in future [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") where calling upon [`Engine.begin()`](../core/connections.html#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin") and entering the context manager would not close
    the connection if the actual BEGIN operation failed for some reason, such as an
    event handler raising an exception; this use case failed to be tested for the
    future version of the engine. Note that the “future” context managers which handle
    `begin()` blocks in Core and ORM don’t actually run the “BEGIN” operation until
    the context managers are actually entered. This is different from the legacy version
    which runs the “BEGIN” operation up front.
  id: totrans-6190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了未来版本的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")中的问题，即在调用[`Engine.begin()`](../core/connections.html#sqlalchemy.engine.Engine.begin
    "sqlalchemy.engine.Engine.begin")并进入上下文管理器时，如果实际的BEGIN操作因某些原因失败，例如事件处理程序引发异常，则不会关闭连接；这种情况未对引擎的未来版本进行测试。请注意，“未来”上下文管理器处理Core和ORM中的`begin()`块，直到实际进入上下文管理器时才运行“BEGIN”操作。这与立即运行“BEGIN”操作的旧版本不同。
- en: 'This change is also **backported** to: 1.4.27'
  id: totrans-6191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也已**回溯**至：1.4.27
- en: 'References: [#7272](https://www.sqlalchemy.org/trac/ticket/7272)'
  id: totrans-6192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7272](https://www.sqlalchemy.org/trac/ticket/7272)
- en: '**[engine] [bug]**'
  id: totrans-6193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool "sqlalchemy.pool.QueuePool")
    now ignores `max_overflow` when `pool_size=0`, properly making the pool unlimited
    in all cases.
  id: totrans-6194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当`pool_size=0`时，[`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool")现在会忽略`max_overflow`，在所有情况下正确地使池无限制。
- en: 'References: [#8523](https://www.sqlalchemy.org/trac/ticket/8523)'
  id: totrans-6195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8523](https://www.sqlalchemy.org/trac/ticket/8523)
- en: '**[engine] [bug]**'
  id: totrans-6196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: For improved security, the [`URL`](../core/engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object will now use password obfuscation by default when
    `str(url)` is called. To stringify a URL with cleartext password, the [`URL.render_as_string()`](../core/engines.html#sqlalchemy.engine.URL.render_as_string
    "sqlalchemy.engine.URL.render_as_string") may be used, passing the [`URL.render_as_string.hide_password`](../core/engines.html#sqlalchemy.engine.URL.render_as_string.params.hide_password
    "sqlalchemy.engine.URL.render_as_string") parameter as `False`. Thanks to our
    contributors for this pull request.
  id: totrans-6197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了提高安全性，当调用`str(url)`时，[`URL`](../core/engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")对象现在默认使用密码混淆。若要以明文密码字符串化URL，则可以使用[`URL.render_as_string()`](../core/engines.html#sqlalchemy.engine.URL.render_as_string
    "sqlalchemy.engine.URL.render_as_string")，并将[`URL.render_as_string.hide_password`](../core/engines.html#sqlalchemy.engine.URL.render_as_string.params.hide_password
    "sqlalchemy.engine.URL.render_as_string")参数设为`False`。感谢我们的贡献者提供此拉取请求。
- en: See also
  id: totrans-6198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[str(engine.url) will obfuscate the password by default](whatsnew_20.html#change-8567)'
  id: totrans-6199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[默认情况下，`str(engine.url)`将混淆密码](whatsnew_20.html#change-8567)'
- en: 'References: [#8567](https://www.sqlalchemy.org/trac/ticket/8567)'
  id: totrans-6200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8567](https://www.sqlalchemy.org/trac/ticket/8567)
- en: '**[engine] [bug]**'
  id: totrans-6201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: The `Inspector.has_table()` method will now consistently check for views of
    the given name as well as tables. Previously this behavior was dialect dependent,
    with PostgreSQL, MySQL/MariaDB and SQLite supporting it, and Oracle and SQL Server
    not supporting it. Third party dialects should also seek to ensure their `Inspector.has_table()`
    method searches for views as well as tables for the given name.
  id: totrans-6202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Inspector.has_table()`方法现在将一致性地检查给定名称的视图以及表。以前，此行为取决于方言，其中PostgreSQL、MySQL/MariaDB和SQLite支持它，而Oracle和SQL
    Server不支持它。第三方方言还应努力确保它们的`Inspector.has_table()`方法搜索给定名称的视图和表。'
- en: 'References: [#7161](https://www.sqlalchemy.org/trac/ticket/7161)'
  id: totrans-6203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7161](https://www.sqlalchemy.org/trac/ticket/7161)
- en: '**[engine] [bug]**'
  id: totrans-6204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [bug]**'
- en: Fixed issue in [`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") method where calling upon [`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") with a single index could in some cases, particularly
    ORM result object cases, cause the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") to yield scalar objects rather than [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") objects, as though the [`Result.scalars()`](../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") method had been called. In SQLAlchemy 1.4,
    this scenario emits a warning that the behavior will change in SQLAlchemy 2.0.
  id: totrans-6205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 [`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") 方法中的问题，当使用单个索引调用 [`Result.columns()`](../core/connections.html#sqlalchemy.engine.Result.columns
    "sqlalchemy.engine.Result.columns") 时，在某些情况下，特别是 ORM 结果对象的情况下，可能导致 [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 产生标量对象，而不是 [`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 对象，就好像已调用了 [`Result.scalars()`](../core/connections.html#sqlalchemy.engine.Result.scalars
    "sqlalchemy.engine.Result.scalars") 方法一样。在 SQLAlchemy 1.4 中，此场景会发出警告，指出行为将在 SQLAlchemy
    2.0 中发生更改。
- en: 'References: [#7953](https://www.sqlalchemy.org/trac/ticket/7953)'
  id: totrans-6206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7953](https://www.sqlalchemy.org/trac/ticket/7953)
- en: '**[engine] [bug]**'
  id: totrans-6207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [错误]**'
- en: Passing a [`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator") object such as a [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") to the [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method is deprecated, as this method is
    typed as returning a [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") object, and not a plain scalar value. The [`Connection.scalar()`](../core/connections.html#sqlalchemy.engine.Connection.scalar
    "sqlalchemy.engine.Connection.scalar") method should be used instead, which has
    been reworked with new internal codepaths to suit invoking a SELECT for default
    generation objects without going through the [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") method.
  id: totrans-6208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不推荐将 [`DefaultGenerator`](../core/defaults.html#sqlalchemy.schema.DefaultGenerator
    "sqlalchemy.schema.DefaultGenerator") 对象（如 [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")）传递给 [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 方法，因为此方法被类型化为返回 [`CursorResult`](../core/connections.html#sqlalchemy.engine.CursorResult
    "sqlalchemy.engine.CursorResult") 对象，而不是普通的标量值。应改用 [`Connection.scalar()`](../core/connections.html#sqlalchemy.engine.Connection.scalar
    "sqlalchemy.engine.Connection.scalar") 方法，已重新设计此方法，具有新的内部代码路径，以适合调用不经过 [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute") 方法即可进行选择默认生成对象。
- en: '**[engine] [removed]**'
  id: totrans-6209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [已移除]**'
- en: Removed the previously deprecated `case_sensitive` parameter from [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine"), which would impact only the lookup of string column
    names in Core-only result set rows; it had no effect on the behavior of the ORM.
    The effective behavior of what `case_sensitive` refers towards remains at its
    default value of `True`, meaning that string names looked up in `row._mapping`
    will match case-sensitively, just like any other Python mapping.
  id: totrans-6210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine "sqlalchemy.create_engine")
    中移除了以前已弃用的 `case_sensitive` 参数，这只会影响仅在 Core 结果集行中查找字符串列名称；它对 ORM 的行为没有影响。`case_sensitive`
    所指向的有效行为仍保持其默认值为 `True`，这意味着在 `row._mapping` 中查找的字符串名称将以区分大小写的方式匹配，就像任何其他 Python
    映射一样。
- en: Note that the `case_sensitive` parameter was not in any way related to the general
    subject of case sensitivity control, quoting, and “name normalization” (i.e. converting
    for databases that consider all uppercase words to be case insensitive) for DDL
    identifier names, which remains a normal core feature of SQLAlchemy.
  id: totrans-6211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意 `case_sensitive` 参数与控制大小写敏感性、引用和“名称规范化”（即转换为将所有大写单词视为大小写不敏感的数据库）DDL 标识符名称的一般主题无关，后者仍然是
    SQLAlchemy 的一个正常核心功能。
- en: '**[engine] [removed]**'
  id: totrans-6212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [已移除]**'
- en: Removed legacy and deprecated package `sqlalchemy.databases`. Please use `sqlalchemy.dialects`
    instead.
  id: totrans-6213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了传统的已弃用包 `sqlalchemy.databases`。请改用 `sqlalchemy.dialects`。
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-6214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
- en: '**[engine] [deprecations]**'
  id: totrans-6215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine] [已弃用]**'
- en: The [`create_engine.implicit_returning`](../core/engines.html#sqlalchemy.create_engine.params.implicit_returning
    "sqlalchemy.create_engine") parameter is deprecated on the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") function only; the parameter remains available on
    the [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object. This parameter was originally intended to enable the “implicit returning”
    feature of SQLAlchemy when it was first developed and was not enabled by default.
    Under modern use, there’s no reason this parameter should be disabled, and it
    has been observed to cause confusion as it degrades performance and makes it more
    difficult for the ORM to retrieve recently inserted server defaults. The parameter
    remains available on [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    to specifically suit database-level edge cases which make RETURNING infeasible,
    the sole example currently being SQL Server’s limitation that INSERT RETURNING
    may not be used on a table that has INSERT triggers on it.
  id: totrans-6216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`create_engine.implicit_returning`](../core/engines.html#sqlalchemy.create_engine.params.implicit_returning
    "sqlalchemy.create_engine") 参数仅在 [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") 函数上已废弃；该参数仍然在 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象上可用。当 SQLAlchemy 最初开发时，此参数最初用于启用“隐式返回”功能，并且默认情况下未启用。在现代用法中，没有理由禁用此参数，因为已经观察到它会导致混淆，因为它会降低性能，并使
    ORM 更难以检索最近插入的服务器默认值。此参数仍然在 [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 上可用于特定的数据库级别边缘情况，其中使 RETURNING 不可行，目前唯一的示例是 SQL Server
    的限制，即不得在具有 INSERT 触发器的表上使用 INSERT RETURNING。'
- en: 'References: [#6962](https://www.sqlalchemy.org/trac/ticket/6962)'
  id: totrans-6217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#6962](https://www.sqlalchemy.org/trac/ticket/6962)'
- en: sql
  id: totrans-6218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [feature]**'
  id: totrans-6219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added long-requested case-insensitive string operators [`ColumnOperators.icontains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains"), [`ColumnOperators.istartswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"), [`ColumnOperators.iendswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith"), which produce case-insensitive
    LIKE compositions (using ILIKE on PostgreSQL, and the LOWER() function on all
    other backends) to complement the existing LIKE composition operators [`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains"), [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith"), etc. Huge thanks to Matias
    Martinez Rebori for their meticulous and complete efforts in implementing these
    new methods.
  id: totrans-6220
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 添加了长期要求的不区分大小写的字符串操作符 [`ColumnOperators.icontains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.icontains
    "sqlalchemy.sql.expression.ColumnOperators.icontains"), [`ColumnOperators.istartswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.istartswith
    "sqlalchemy.sql.expression.ColumnOperators.istartswith"), [`ColumnOperators.iendswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.iendswith
    "sqlalchemy.sql.expression.ColumnOperators.iendswith")，这些操作符生成不区分大小写的 LIKE 组合（在
    PostgreSQL 上使用 ILIKE，在其他所有后端上使用 LOWER() 函数），以补充现有的 LIKE 组合操作符 [`ColumnOperators.contains()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.contains
    "sqlalchemy.sql.expression.ColumnOperators.contains"), [`ColumnOperators.startswith()`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.startswith
    "sqlalchemy.sql.expression.ColumnOperators.startswith")，等等。特别感谢 Matias Martinez
    Rebori 在实现这些新方法时的细致和完整的努力。
- en: 'References: [#3482](https://www.sqlalchemy.org/trac/ticket/3482)'
  id: totrans-6221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#3482](https://www.sqlalchemy.org/trac/ticket/3482)'
- en: '**[sql] [feature]**'
  id: totrans-6222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [功能]**'
- en: Added new syntax to the [`FromClause.c`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c") collection on all [`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects allowing tuples of keys to be
    passed to `__getitem__()`, along with support for the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct to handle the resulting tuple-like
    collection directly, allowing the syntax `select(table.c['a', 'b', 'c'])` to be
    possible. The sub-collection returned is itself a [`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") which is also directly consumable
    by [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    and similar now.
  id: totrans-6223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在所有[`FromClause`](../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")对象的[`FromClause.c`](../core/selectable.html#sqlalchemy.sql.expression.FromClause.c
    "sqlalchemy.sql.expression.FromClause.c")集合上添加了新的语法，允许将键的元组传递给`__getitem__()`，以及支持[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造处理直接处理结果类似元组的集合，允许使用`select(table.c['a',
    'b', 'c'])`这样的语法。返回的子集本身是一个[`ColumnCollection`](../core/sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，现在也可以直接被[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")和类似的函数消耗。
- en: See also
  id: totrans-6224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting the COLUMNS and FROM clause](../tutorial/data_select.html#tutorial-selecting-columns)'
  id: totrans-6225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置COLUMNS和FROM子句](../tutorial/data_select.html#tutorial-selecting-columns)'
- en: 'References: [#8285](https://www.sqlalchemy.org/trac/ticket/8285)'
  id: totrans-6226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8285](https://www.sqlalchemy.org/trac/ticket/8285)
- en: '**[sql] [feature]**'
  id: totrans-6227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added new backend-agnostic [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype generalized from the PostgreSQL dialects to
    now be a core type, as well as migrated [`UUID`](../core/type_basics.html#sqlalchemy.types.UUID
    "sqlalchemy.types.UUID") from the PostgreSQL dialect. The SQL Server [`UNIQUEIDENTIFIER`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") datatype also becomes a UUID-handling
    datatype. Thanks to Trevor Gross for the help on this.
  id: totrans-6228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新增了与后端无关的[`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid "sqlalchemy.types.Uuid")数据类型，从PostgreSQL方言泛化为核心类型，同时将[`UUID`](../core/type_basics.html#sqlalchemy.types.UUID
    "sqlalchemy.types.UUID")从PostgreSQL方言迁移过来。SQL Server的[`UNIQUEIDENTIFIER`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER")数据类型也变成了一个处理UUID的数据类型。感谢Trevor Gross的帮助。
- en: 'References: [#7212](https://www.sqlalchemy.org/trac/ticket/7212)'
  id: totrans-6229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7212](https://www.sqlalchemy.org/trac/ticket/7212)
- en: '**[sql] [feature]**'
  id: totrans-6230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [feature]**'
- en: Added [`Double`](../core/type_basics.html#sqlalchemy.types.Double "sqlalchemy.types.Double"),
    [`DOUBLE`](../core/type_basics.html#sqlalchemy.types.DOUBLE "sqlalchemy.types.DOUBLE"),
    [`DOUBLE_PRECISION`](../core/type_basics.html#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION") datatypes to the base `sqlalchemy.` module
    namespace, for explicit use of double/double precision as well as generic “double”
    datatypes. Use [`Double`](../core/type_basics.html#sqlalchemy.types.Double "sqlalchemy.types.Double")
    for generic support that will resolve to DOUBLE/DOUBLE PRECISION/FLOAT as needed
    for different backends.
  id: totrans-6231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将[`Double`](../core/type_basics.html#sqlalchemy.types.Double "sqlalchemy.types.Double")、[`DOUBLE`](../core/type_basics.html#sqlalchemy.types.DOUBLE
    "sqlalchemy.types.DOUBLE")、[`DOUBLE_PRECISION`](../core/type_basics.html#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION")数据类型添加到基本的`sqlalchemy.`模块命名空间，用于明确使用双精度/双精度以及通用“双精度”数据类型。使用[`Double`](../core/type_basics.html#sqlalchemy.types.Double
    "sqlalchemy.types.Double")进行通用支持，根据不同的后端需要解析为DOUBLE/DOUBLE PRECISION/FLOAT。
- en: 'References: [#5465](https://www.sqlalchemy.org/trac/ticket/5465)'
  id: totrans-6232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5465](https://www.sqlalchemy.org/trac/ticket/5465)
- en: '**[sql] [usecase]**'
  id: totrans-6233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [usecase]**'
- en: Altered the compilation mechanics of the [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") construct such that the “autoincrement primary
    key” column value will be fetched via `cursor.lastrowid` or RETURNING even if
    present in the parameter set or within the [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method as a plain bound value, for
    single-row INSERT statements on specific backends that are known to generate autoincrementing
    values even when explicit NULL is passed. This restores a behavior that was in
    the 1.3 series for both the use case of separate parameter set as well as [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values"). In 1.4, the parameter set behavior
    unintentionally changed to no longer do this, but the [`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method would still fetch autoincrement
    values up until 1.4.21 where [#6770](https://www.sqlalchemy.org/trac/ticket/6770)
    changed the behavior yet again again unintentionally as this use case was never
    covered.
  id: totrans-6234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更改了[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")构造的编译机制，以便在已知会生成自动增量值的特定后端上，即使在参数集或[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")方法中作为普通绑定值存在时，也将通过`cursor.lastrowid`或RETURNING获取“自动增量主键”列值，用于单行INSERT语句。这恢复了1.3系列中的行为，适用于单独参数集以及[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")的用例。在1.4中，参数集行为无意中更改为不再执行此操作，但[`Insert.values()`](../core/dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values")方法仍会获取自动增量值，直到1.4.21，其中[#6770](https://www.sqlalchemy.org/trac/ticket/6770)再次无意中更改了行为，因为此用例从未被覆盖。
- en: The behavior is now defined as “working” to suit the case where databases such
    as SQLite, MySQL and MariaDB will ignore an explicit NULL primary key value and
    nonetheless invoke an autoincrement generator.
  id: totrans-6235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在定义的行为为“工作”，以适应SQLite、MySQL和MariaDB等数据库忽略显式NULL主键值并仍调用自动增量生成器的情况。
- en: 'References: [#7998](https://www.sqlalchemy.org/trac/ticket/7998)'
  id: totrans-6236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7998](https://www.sqlalchemy.org/trac/ticket/7998)
- en: '**[sql] [usecase]**'
  id: totrans-6237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Added modified ISO-8601 rendering (i.e. ISO-8601 with the T converted to a space)
    when using `literal_binds` with the SQL compilers provided by the PostgreSQL,
    MySQL, MariaDB, MSSQL, Oracle dialects. For Oracle, the ISO format is wrapped
    inside of an appropriate TO_DATE() function call. Previously this rendering was
    not implemented for dialect-specific compilation.
  id: totrans-6238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用SQL编译器提供的`literal_binds`与PostgreSQL、MySQL、MariaDB、MSSQL、Oracle方言时，添加了修改后的ISO-8601呈现（即将T转换为空格的ISO-8601）。对于Oracle，ISO格式被包装在适当的TO_DATE()函数调用内。以前，此呈现未针对特定方言的编译实现。
- en: See also
  id: totrans-6239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[DATE, TIME, DATETIME datatypes now support literal rendering on all backends](whatsnew_20.html#change-5052)'
  id: totrans-6240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[日期，时间，日期时间数据类型现在在所有后端上支持文字呈现](whatsnew_20.html#change-5052)'
- en: 'References: [#5052](https://www.sqlalchemy.org/trac/ticket/5052)'
  id: totrans-6241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5052](https://www.sqlalchemy.org/trac/ticket/5052)
- en: '**[sql] [usecase]**'
  id: totrans-6242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [用例]**'
- en: Added new parameter [`HasCTE.add_cte.nest_here`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte") to [`HasCTE.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") which will “nest” a given [`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE") at the level of the parent statement. This parameter
    is equivalent to using the [`HasCTE.cte.nesting`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte") parameter, but may be more intuitive in
    some scenarios as it allows the nesting attribute to be set simultaneously along
    with the explicit level of the CTE.
  id: totrans-6243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`HasCTE.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte")添加了新参数[`HasCTE.add_cte.nest_here`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte.params.nest_here
    "sqlalchemy.sql.expression.HasCTE.add_cte")，该参数将在父语句级别“嵌套”给定的[`CTE`](../core/selectable.html#sqlalchemy.sql.expression.CTE
    "sqlalchemy.sql.expression.CTE")。该参数等效于使用[`HasCTE.cte.nesting`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.cte.params.nesting
    "sqlalchemy.sql.expression.HasCTE.cte")参数，但在某些情况下可能更直观，因为它允许同时设置嵌套属性以及CTE的显式级别。
- en: The [`HasCTE.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") method also accepts multiple CTE objects.
  id: totrans-6244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`HasCTE.add_cte()`](../core/selectable.html#sqlalchemy.sql.expression.HasCTE.add_cte
    "sqlalchemy.sql.expression.HasCTE.add_cte") 方法还接受多个 CTE 对象。'
- en: 'References: [#7759](https://www.sqlalchemy.org/trac/ticket/7759)'
  id: totrans-6245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7759](https://www.sqlalchemy.org/trac/ticket/7759)
- en: '**[sql] [bug]**'
  id: totrans-6246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The FROM clauses that are established on a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct when using the [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method will now render first in
    the FROM clause of the rendered SELECT, which serves to maintain the ordering
    of clauses as was passed to the [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method itself without being affected
    by the presence of those clauses also being mentioned in other parts of the query.
    If other elements of the [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") also generate FROM clauses, such as the columns
    clause or WHERE clause, these will render after the clauses delivered by [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") assuming they were not explictly
    passed to [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") also. This improvement is useful
    in those cases where a particular database generates a desirable query plan based
    on a particular ordering of FROM clauses and allows full control over the ordering
    of FROM clauses.
  id: totrans-6247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 方法时，对于 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造的 FROM 子句现在将首先在呈现的 SELECT 的 FROM 子句中呈现，这有助于保持子句的顺序，就像它们传递给
    [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 方法本身一样，而不受这些子句也在查询的其他部分提及的影响。如果
    [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    的其他元素也生成 FROM 子句，比如列子句或 WHERE 子句，这些将在 [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 传递的子句之后呈现，假设它们未明确传递给 [`Select.select_from()`](../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from")。这种改进在某些情况下非常有用，特定数据库根据 FROM 子句的特定顺序生成理想的查询计划，并允许完全控制
    FROM 子句的顺序。
- en: 'References: [#7888](https://www.sqlalchemy.org/trac/ticket/7888)'
  id: totrans-6248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7888](https://www.sqlalchemy.org/trac/ticket/7888)
- en: '**[sql] [bug]**'
  id: totrans-6249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`Enum.length`](../core/type_basics.html#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum") parameter, which sets the length of the `VARCHAR` column
    for non-native enumeration types, is now used unconditionally when emitting DDL
    for the `VARCHAR` datatype, including when the [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") parameter is set to `True` for target backends that continue
    to use `VARCHAR`. Previously the parameter would be erroneously ignored in this
    case. The warning previously emitted for this case is now removed.
  id: totrans-6250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Enum.length`](../core/type_basics.html#sqlalchemy.types.Enum.params.length
    "sqlalchemy.types.Enum") 参数用于非本地枚举类型的 `VARCHAR` 列的长度设置，在为 `VARCHAR` 数据类型发出 DDL
    时无条件使用，包括当目标后端继续使用 `VARCHAR` 时设置 [`Enum.native_enum`](../core/type_basics.html#sqlalchemy.types.Enum.params.native_enum
    "sqlalchemy.types.Enum") 参数为 `True` 的情况。在这种情况下，先前将会错误地忽略该参数。现在移除了此情况下先前发出的警告。'
- en: 'References: [#7791](https://www.sqlalchemy.org/trac/ticket/7791)'
  id: totrans-6251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7791](https://www.sqlalchemy.org/trac/ticket/7791)
- en: '**[sql] [bug]**'
  id: totrans-6252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The in-place type detection for Python integers, as occurs with an expression
    such as `literal(25)`, will now apply value-based adaption as well to accommodate
    Python large integers, where the datatype determined will be [`BigInteger`](../core/type_basics.html#sqlalchemy.types.BigInteger
    "sqlalchemy.types.BigInteger") rather than [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer"). This accommodates for dialects such as that of asyncpg
    which both sends implicit typing information to the driver as well as is sensitive
    to numeric scale.
  id: totrans-6253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Python 整数的就地类型检测，如表达式`literal(25)`，现在也将应用基于值的适应性，以适应 Python 大整数，其中确定的数据类型将是[`BigInteger`](../core/type_basics.html#sqlalchemy.types.BigInteger
    "sqlalchemy.types.BigInteger")而不是[`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer")。这适用于像 asyncpg 这样的方言，它既向驱动程序发送隐式类型信息，又对数字规模敏感。
- en: 'References: [#7909](https://www.sqlalchemy.org/trac/ticket/7909)'
  id: totrans-6254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7909](https://www.sqlalchemy.org/trac/ticket/7909)
- en: '**[sql] [bug]**'
  id: totrans-6255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added `if_exists` and `if_not_exists` parameters for all “Create” / “Drop” constructs
    including [`CreateSequence`](../core/ddl.html#sqlalchemy.schema.CreateSequence
    "sqlalchemy.schema.CreateSequence"), [`DropSequence`](../core/ddl.html#sqlalchemy.schema.DropSequence
    "sqlalchemy.schema.DropSequence"), [`CreateIndex`](../core/ddl.html#sqlalchemy.schema.CreateIndex
    "sqlalchemy.schema.CreateIndex"), [`DropIndex`](../core/ddl.html#sqlalchemy.schema.DropIndex
    "sqlalchemy.schema.DropIndex"), etc. allowing generic “IF EXISTS” / “IF NOT EXISTS”
    phrases to be rendered within DDL. Pull request courtesy Jesse Bakker.
  id: totrans-6256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为所有“Create”/“Drop”构造添加了`if_exists`和`if_not_exists`参数，包括[`CreateSequence`](../core/ddl.html#sqlalchemy.schema.CreateSequence
    "sqlalchemy.schema.CreateSequence")、[`DropSequence`](../core/ddl.html#sqlalchemy.schema.DropSequence
    "sqlalchemy.schema.DropSequence")、[`CreateIndex`](../core/ddl.html#sqlalchemy.schema.CreateIndex
    "sqlalchemy.schema.CreateIndex")、[`DropIndex`](../core/ddl.html#sqlalchemy.schema.DropIndex
    "sqlalchemy.schema.DropIndex")等，允许在 DDL 中呈现通用的“IF EXISTS”/“IF NOT EXISTS”短语。拉取请求由Jesse
    Bakker提供。
- en: 'References: [#7354](https://www.sqlalchemy.org/trac/ticket/7354)'
  id: totrans-6257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7354](https://www.sqlalchemy.org/trac/ticket/7354)
- en: '**[sql] [bug]**'
  id: totrans-6258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Improved the construction of SQL binary expressions to allow for very long expressions
    against the same associative operator without special steps needed in order to
    avoid high memory use and excess recursion depth. A particular binary operation
    `A op B` can now be joined against another element `op C` and the resulting structure
    will be “flattened” so that the representation as well as SQL compilation does
    not require recursion.
  id: totrans-6259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 SQL 二进制表达式的构建，以允许非常长的相同关联运算符的表达式，而不需要特殊步骤来避免高内存使用和过多的递归深度。现在，特定的二元操作`A op
    B`可以与另一个元素`op C`连接，结果结构将被“展平”，以使表示以及 SQL 编译不需要递归。
- en: One effect of this change is that string concatenation expressions which use
    SQL functions come out as “flat”, e.g. MySQL will now render `concat('x', 'y',
    'z', ...)`` rather than nesting together two-element functions like `concat(concat('x',
    'y'), 'z')`. Third-party dialects which override the string concatenation operator
    will need to implement a new method `def visit_concat_op_expression_clauselist()`
    to accompany the existing `def visit_concat_op_binary()` method.
  id: totrans-6260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这一变化的一个影响是，使用 SQL 函数的字符串连接表达式会“展平”，例如，MySQL 现在会渲染`concat('x', 'y', 'z', ...)`而不是将两个元素函数像`concat(concat('x',
    'y'), 'z')`一样嵌套在一起。覆盖字符串连接运算符的第三方方言将需要实现一个新方法`def visit_concat_op_expression_clauselist()`来配合现有的`def
    visit_concat_op_binary()`方法。
- en: 'References: [#7744](https://www.sqlalchemy.org/trac/ticket/7744)'
  id: totrans-6261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7744](https://www.sqlalchemy.org/trac/ticket/7744)
- en: '**[sql] [bug]**'
  id: totrans-6262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Implemented full support for “truediv” and “floordiv” using the “/” and “//”
    operators. A “truediv” operation between two expressions using [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") now considers the result to be [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), and the dialect-level compilation will cast the right
    operand to a numeric type on a dialect-specific basis to ensure truediv is achieved.
    For floordiv, conversion is also added for those databases that don’t already
    do floordiv by default (MySQL, Oracle) and the `FLOOR()` function is rendered
    in this case, as well as for cases where the right operand is not an integer (needed
    for PostgreSQL, others).
  id: totrans-6263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了对“truediv”和“floordiv”的全面支持，使用“/”和“//”运算符。现在，使用 [`Integer`](../core/type_basics.html#sqlalchemy.types.Integer
    "sqlalchemy.types.Integer") 的两个表达式之间的“truediv”操作将考虑结果为 [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")，并且方言级编译将根据方言特定的基础将右操作数转换为数字类型以确保实现 truediv。对于 floordiv，还添加了转换，以用于那些默认情况下不执行
    floordiv 的数据库（MySQL、Oracle），并且在这种情况下会呈现 `FLOOR()` 函数，以及对于右操作数不是整数的情况（需要用于 PostgreSQL
    和其他数据库）。
- en: The change resolves issues both with inconsistent behavior of the division operator
    on different backends and also fixes an issue where integer division on Oracle
    would fail to be able to fetch a result due to inappropriate outputtypehandlers.
  id: totrans-6264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改解决了不同后端上除法运算符行为不一致的问题，还修复了在 Oracle 上的整数除法无法获取结果的问题，因为输出类型处理程序不当。
- en: See also
  id: totrans-6265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另见
- en: '[Python division operator performs true division for all backends; added floor
    division](whatsnew_20.html#change-4926)'
  id: totrans-6266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Python 除法运算符对所有后端执行真除法；增加了地板除法](whatsnew_20.html#change-4926)'
- en: 'References: [#4926](https://www.sqlalchemy.org/trac/ticket/4926)'
  id: totrans-6267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4926](https://www.sqlalchemy.org/trac/ticket/4926)
- en: '**[sql] [bug]**'
  id: totrans-6268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Added an additional lookup step to the compiler which will track all FROM clauses
    which are tables, that may have the same name shared in multiple schemas where
    one of the schemas is the implicit “default” schema; in this case, the table name
    when referring to that name without a schema qualification will be rendered with
    an anonymous alias name at the compiler level in order to disambiguate the two
    (or more) names. The approach of schema-qualifying the normally unqualified name
    with the server-detected “default schema name” value was also considered, however
    this approach doesn’t apply to Oracle nor is it accepted by SQL Server, nor would
    it work with multiple entries in the PostgreSQL search path. The name collision
    issue resolved here has been identified as affecting at least Oracle, PostgreSQL,
    SQL Server, MySQL and MariaDB.
  id: totrans-6269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对编译器添加了额外的查找步骤，将跟踪所有 FROM 子句，这些子句是表，可能在多个模式中共享具有相同名称的模式之一，在这种情况下，在编译器级别引用该名称时不带模式限定符将以匿名别名名称呈现该表名，以澄清两者（或更多）的名称。还考虑了使用服务器检测到的“默认模式名称”值对通常未限定名称进行模式限定的方法，但此方法不适用于
    Oracle，SQL Server 也不被接受，也不适用于 PostgreSQL 搜索路径中的多个条目。此处解决的名称冲突问题已确定至少影响 Oracle、PostgreSQL、SQL
    Server、MySQL 和 MariaDB。
- en: 'References: [#7471](https://www.sqlalchemy.org/trac/ticket/7471)'
  id: totrans-6270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7471](https://www.sqlalchemy.org/trac/ticket/7471)
- en: '**[sql] [bug]**'
  id: totrans-6271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: Python string values for which a SQL type is determined from the type of the
    value, mainly when using [`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal"), will now apply the [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") type, rather than the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") datatype, for Python string values that test as “ascii
    only” using Python `str.isascii()`. If the string is not `isascii()`, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") datatype will be bound instead, which was used in
    all string detection previously. This behavior **only applies to in-place detection
    of datatypes when using ``literal()`` or other contexts that have no existing
    datatype**, which is not usually the case under normal [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") comparison operations, where the type of the [`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") being compared always takes precedence.
  id: totrans-6272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从值的类型确定SQL类型的Python字符串值，主要是在使用[`literal()`](../core/sqlelement.html#sqlalchemy.sql.expression.literal
    "sqlalchemy.sql.expression.literal")时，现在将应用[`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")类型，而不是[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode")数据类型，对于使用Python `str.isascii()`测试为“仅ascii”的Python字符串值。如果字符串不是`isascii()`，则将绑定[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode")数据类型，而以前所有字符串检测中都使用了它。此行为**仅适用于使用``literal()``或其他没有现有数据类型的上下文中的数据类型的就地检测**，这在正常的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")比较操作下通常不是情况，在这种情况下，被比较的[`Column`](../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的类型始终优先。
- en: Use of the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")
    datatype can determine literal string formatting on backends such as SQL Server,
    where a literal value (i.e. using `literal_binds`) will be rendered as `N'<value>'`
    instead of `'value'`. For normal bound value handling, the [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") datatype also may have implications for passing values
    to the DBAPI, again in the case of SQL Server, the pyodbc driver supports the
    use of [setinputsizes mode](../dialects/mssql.html#mssql-pyodbc-setinputsizes)
    which will handle [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String") versus [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") differently.
  id: totrans-6273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode "sqlalchemy.types.Unicode")数据类型可以确定在诸如SQL
    Server之类的后端上的文字字符串格式，其中文字值（即使用`literal_binds`）将呈现为`N'<value>'`而不是`'value'`。对于正常的绑定值处理，[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode")数据类型在将值传递给DBAPI时也可能对其产生影响，同样在SQL Server的情况下，pyodbc驱动程序支持使用[setinputsizes模式](../dialects/mssql.html#mssql-pyodbc-setinputsizes)，它将以不同的方式处理[`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")与[`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode")。
- en: 'References: [#7551](https://www.sqlalchemy.org/trac/ticket/7551)'
  id: totrans-6274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7551](https://www.sqlalchemy.org/trac/ticket/7551)
- en: '**[sql] [bug]**'
  id: totrans-6275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [bug]**'
- en: The [`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg
    "sqlalchemy.sql.functions.array_agg") will now set the array dimensions to 1.
    Improved [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    processing to accept `None` values as value of a multi-array.
  id: totrans-6276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`array_agg`](../core/functions.html#sqlalchemy.sql.functions.array_agg "sqlalchemy.sql.functions.array_agg")现在将数组维度设置为1。改进了对`None`值作为多维数组值的处理。'
- en: 'References: [#7083](https://www.sqlalchemy.org/trac/ticket/7083)'
  id: totrans-6277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7083](https://www.sqlalchemy.org/trac/ticket/7083)
- en: schema
  id: totrans-6278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema] [feature]**'
  id: totrans-6279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [功能]**'
- en: Expanded on the “conditional DDL” system implemented by the [`ExecutableDDLElement`](../core/ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement") class (renamed from `DDLElement`) to
    be directly available on [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") constructs such as [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), etc. such that the conditional logic
    for generating these elements is included within the default DDL emitting process.
    This system can also be accommodated by a future release of Alembic to support
    conditional DDL elements within all schema-management systems.
  id: totrans-6280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对由[`ExecutableDDLElement`](../core/ddl.html#sqlalchemy.schema.ExecutableDDLElement
    "sqlalchemy.schema.ExecutableDDLElement")类（从`DDLElement`更名而来）实现的“条件DDL”系统进行了扩展，以直接在[`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")构造上可用，例如[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")，[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")等，使得用于生成这些元素的条件逻辑包含在默认的DDL发射过程中。这个系统也可以通过将来的Alembic版本来支持条件DDL元素，以支持所有模式管理系统中的条件DDL元素。
- en: See also
  id: totrans-6281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 亦参见
- en: '[New Conditional DDL for Constraints and Indexes](whatsnew_20.html#ticket-7631)'
  id: totrans-6282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[约束和索引的新条件DDL](whatsnew_20.html#ticket-7631)'
- en: 'References: [#7631](https://www.sqlalchemy.org/trac/ticket/7631)'
  id: totrans-6283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#7631](https://www.sqlalchemy.org/trac/ticket/7631)
- en: '**[schema] [usecase]**'
  id: totrans-6284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [usecase]**'
- en: Added parameter [`DropConstraint.if_exists`](../core/ddl.html#sqlalchemy.schema.DropConstraint.params.if_exists
    "sqlalchemy.schema.DropConstraint") to the [`DropConstraint`](../core/ddl.html#sqlalchemy.schema.DropConstraint
    "sqlalchemy.schema.DropConstraint") construct which result in “IF EXISTS” DDL
    being added to the DROP statement. This phrase is not accepted by all databases
    and the operation will fail on a database that does not support it as there is
    no similarly compatible fallback within the scope of a single DDL statement. Pull
    request courtesy Mike Fiedler.
  id: totrans-6285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向[`DropConstraint`](../core/ddl.html#sqlalchemy.schema.DropConstraint "sqlalchemy.schema.DropConstraint")构造添加了参数[`DropConstraint.if_exists`](../core/ddl.html#sqlalchemy.schema.DropConstraint.params.if_exists
    "sqlalchemy.schema.DropConstraint")，这将导致“IF EXISTS”DDL被添加到DROP语句中。这个短语并不被所有数据库接受，如果数据库不支持这个短语，操作将失败，因为在单个DDL语句的范围内没有类似的兼容后备方案。感谢Mike
    Fiedler提供的拉取请求。
- en: 'References: [#8141](https://www.sqlalchemy.org/trac/ticket/8141)'
  id: totrans-6286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8141](https://www.sqlalchemy.org/trac/ticket/8141)
- en: '**[schema] [usecase]**'
  id: totrans-6287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [usecase]**'
- en: Implemented the DDL event hooks [`DDLEvents.before_create()`](../core/events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create"), [`DDLEvents.after_create()`](../core/events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create"), [`DDLEvents.before_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop"), [`DDLEvents.after_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop") for all [`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") objects that include a distinct CREATE or DROP
    step, when that step is invoked as a distinct SQL statement, including for [`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), [`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence"), [`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index"), and PostgreSQL’s [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM").
  id: totrans-6288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了DDL事件钩子[`DDLEvents.before_create()`](../core/events.html#sqlalchemy.events.DDLEvents.before_create
    "sqlalchemy.events.DDLEvents.before_create")，[`DDLEvents.after_create()`](../core/events.html#sqlalchemy.events.DDLEvents.after_create
    "sqlalchemy.events.DDLEvents.after_create")，[`DDLEvents.before_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.before_drop
    "sqlalchemy.events.DDLEvents.before_drop")，[`DDLEvents.after_drop()`](../core/events.html#sqlalchemy.events.DDLEvents.after_drop
    "sqlalchemy.events.DDLEvents.after_drop")，适用于包含不同的CREATE或DROP步骤的所有[`SchemaItem`](../core/metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")对象，当该步骤被作为单独的SQL语句调用时，包括[`ForeignKeyConstraint`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")，[`Sequence`](../core/defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence")，[`Index`](../core/constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")，以及PostgreSQL的[`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM")。
- en: 'References: [#8394](https://www.sqlalchemy.org/trac/ticket/8394)'
  id: totrans-6289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8394](https://www.sqlalchemy.org/trac/ticket/8394)
- en: '**[schema] [performance]**'
  id: totrans-6290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [性能]**'
- en: Rearchitected the schema reflection API to allow participating dialects to make
    use of high performing batch queries to reflect the schemas of many tables at
    once using fewer queries by an order of magnitude. The new performance features
    are targeted first at the PostgreSQL and Oracle backends, and may be applied to
    any dialect that makes use of SELECT queries against system catalog tables to
    reflect tables. The change also includes new API features and behavioral improvements
    to the [`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector") object, including consistent, cached
    behavior of methods like [`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table"), [`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names") and new methods [`Inspector.has_schema()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_schema
    "sqlalchemy.engine.reflection.Inspector.has_schema") and [`Inspector.has_index()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_index
    "sqlalchemy.engine.reflection.Inspector.has_index").
  id: totrans-6291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了模式反射 API，允许参与的方言利用高性能的批量查询来一次性反映许多表的模式，查询次数减少了一个数量级。新的性能特性首先针对 PostgreSQL
    和 Oracle 后端，可以应用于任何利用 SELECT 查询系统目录表反映表的方言。此更改还包括对[`Inspector`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector
    "sqlalchemy.engine.reflection.Inspector")对象的新 API 特性和行为改进，包括方法如[`Inspector.has_table()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table")的一致、缓存行为，[`Inspector.get_table_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_names
    "sqlalchemy.engine.reflection.Inspector.get_table_names")以及新方法[`Inspector.has_schema()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_schema
    "sqlalchemy.engine.reflection.Inspector.has_schema")和[`Inspector.has_index()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.has_index
    "sqlalchemy.engine.reflection.Inspector.has_index")。
- en: See also
  id: totrans-6292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Major Architectural, Performance and API Enhancements for Database Reflection](whatsnew_20.html#change-4379)
    - full background'
  id: totrans-6293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[数据库反射的重大架构、性能和 API 增强](whatsnew_20.html#change-4379) - 完整背景'
- en: 'References: [#4379](https://www.sqlalchemy.org/trac/ticket/4379)'
  id: totrans-6294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4379](https://www.sqlalchemy.org/trac/ticket/4379)
- en: '**[schema] [bug]**'
  id: totrans-6295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [错误]**'
- en: The warnings that are emitted regarding reflection of indexes or unique constraints,
    when the [`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table") parameter is used to exclude columns that are then
    found to be part of those constraints, have been removed. When the [`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table") parameter is used it should be expected that the resulting
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    construct will not include constraints that rely upon omitted columns. This change
    was made in response to [#8100](https://www.sqlalchemy.org/trac/ticket/8100) which
    repaired [`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table") in conjunction with foreign key constraints that rely
    upon omitted columns, where the use case became clear that omitting such constraints
    should be expected.
  id: totrans-6296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用[`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table")参数排除后发现是这些约束的一部分的列时，关于反射索引或唯一约束的警告已被移除。当使用[`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table")参数时，应该预期生成的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")构造将不包括依赖于被省略列的约束。这一更改是针对[#8100](https://www.sqlalchemy.org/trac/ticket/8100)做出的，该修复了[`Table.include_columns`](../core/metadata.html#sqlalchemy.schema.Table.params.include_columns
    "sqlalchemy.schema.Table")与依赖于被省略列的外键约束一起使用时，使用案例明确表明应该预期省略这些约束。
- en: 'References: [#8102](https://www.sqlalchemy.org/trac/ticket/8102)'
  id: totrans-6297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8102](https://www.sqlalchemy.org/trac/ticket/8102)
- en: '**[schema] [postgresql]**'
  id: totrans-6298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式] [postgresql]**'
- en: Added support for comments on [`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") objects, including DDL and reflection; the field
    is added to the base [`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") class and corresponding constructors, however
    PostgreSQL is the only included backend to support the feature right now. See
    parameters such as [`ForeignKeyConstraint.comment`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.comment
    "sqlalchemy.schema.ForeignKeyConstraint"), [`UniqueConstraint.comment`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint.params.comment
    "sqlalchemy.schema.UniqueConstraint") or [`CheckConstraint.comment`](../core/constraints.html#sqlalchemy.schema.CheckConstraint.params.comment
    "sqlalchemy.schema.CheckConstraint").
  id: totrans-6299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对[`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")对象的注释支持已添加，包括DDL和反射；该字段已添加到基本的[`Constraint`](../core/constraints.html#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")类和相应的构造函数中，但目前只有PostgreSQL支持该功能。请参阅诸如[`ForeignKeyConstraint.comment`](../core/constraints.html#sqlalchemy.schema.ForeignKeyConstraint.params.comment
    "sqlalchemy.schema.ForeignKeyConstraint")、[`UniqueConstraint.comment`](../core/constraints.html#sqlalchemy.schema.UniqueConstraint.params.comment
    "sqlalchemy.schema.UniqueConstraint")或[`CheckConstraint.comment`](../core/constraints.html#sqlalchemy.schema.CheckConstraint.params.comment
    "sqlalchemy.schema.CheckConstraint")之类的参数。
- en: 'References: [#5677](https://www.sqlalchemy.org/trac/ticket/5677)'
  id: totrans-6300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5677](https://www.sqlalchemy.org/trac/ticket/5677)
- en: '**[schema] [mariadb] [mysql]**'
  id: totrans-6301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema] [mariadb] [mysql]**'
- en: 'Add support for Partitioning and Sample pages on MySQL and MariaDB reflected
    options. The options are stored in the table dialect options dictionary, so the
    following keyword need to be prefixed with `mysql_` or `mariadb_` depending on
    the backend. Supported options are:'
  id: totrans-6302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加对MySQL和MariaDB反映选项的分区和示例页面的支持。选项存储在表方言选项字典中，因此以下关键字需要根据后端添加前缀`mysql_`或`mariadb_`。支持的选项包括：
- en: '`stats_sample_pages`'
  id: totrans-6303
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stats_sample_pages`'
- en: '`partition_by`'
  id: totrans-6304
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`partition_by`'
- en: '`partitions`'
  id: totrans-6305
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`partitions`'
- en: '`subpartition_by`'
  id: totrans-6306
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subpartition_by`'
- en: These options are also reflected when loading a table from database, and will
    populate the table [`Table.dialect_options`](../core/metadata.html#sqlalchemy.schema.Table.dialect_options
    "sqlalchemy.schema.Table.dialect_options"). Pull request courtesy of Ramon Will.
  id: totrans-6307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些选项在从数据库加载表时也会反映出来，并将填充表[`Table.dialect_options`](../core/metadata.html#sqlalchemy.schema.Table.dialect_options
    "sqlalchemy.schema.Table.dialect_options")。感谢Ramon Will的拉取请求。
- en: 'References: [#4038](https://www.sqlalchemy.org/trac/ticket/4038)'
  id: totrans-6308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#4038](https://www.sqlalchemy.org/trac/ticket/4038)
- en: typing
  id: totrans-6309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: typing
- en: '**[typing] [improvement]**'
  id: totrans-6310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[typing] [improvement]**'
- en: The [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") method now returns a copy of the original
    [`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    object, rather than wrapping it inside the `Variant` class, which is effectively
    removed (the import symbol remains for backwards compatibility with code that
    may be testing for this symbol). While the previous approach maintained in-Python
    behaviors, maintaining the original type allows for clearer type checking and
    debugging.
  id: totrans-6311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")方法现在返回原始[`TypeEngine`](../core/type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine")对象的副本，而不是将其包装在`Variant`类中，该类已被实际删除（导入符号仍保留用于与可能正在测试此符号的代码向后兼容）。虽然先前的方法维护了Python中的行为，但保持原始类型可以更清晰地进行类型检查和调试。'
- en: '[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") also accepts multiple dialect names
    per call as well, in particular this is helpful for related backend names such
    as `"mysql", "mariadb"`.'
  id: totrans-6312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")方法现在每次调用也接受多个方言名称，特别是对于相关的后端名称如`"mysql",
    "mariadb"`，这对于提高效率非常有帮助。'
- en: See also
  id: totrans-6313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 亦可参考
- en: '[“with_variant()” clones the original TypeEngine rather than changing the type](whatsnew_20.html#change-6980)'
  id: totrans-6314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[“with_variant()” clones the original TypeEngine rather than changing the type](whatsnew_20.html#change-6980)'
- en: 'References: [#6980](https://www.sqlalchemy.org/trac/ticket/6980)'
  id: totrans-6315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6980](https://www.sqlalchemy.org/trac/ticket/6980)
- en: postgresql
  id: totrans-6316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: postgresql
- en: '**[postgresql] [feature]**'
  id: totrans-6317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [feature]**'
- en: Added a new PostgreSQL [`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN") datatype, which follows the same CREATE
    TYPE / DROP TYPE behaviors as that of PostgreSQL [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM"). Much thanks to David Baumgold for the
    efforts on this.
  id: totrans-6318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的 PostgreSQL [`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN") 数据类型，其遵循与 PostgreSQL [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 相同的 CREATE TYPE / DROP TYPE 行为。非常感谢 David
    Baumgold 对此的努力。
- en: See also
  id: totrans-6319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN")'
  id: totrans-6320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`DOMAIN`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.DOMAIN
    "sqlalchemy.dialects.postgresql.DOMAIN")'
- en: 'References: [#7316](https://www.sqlalchemy.org/trac/ticket/7316)'
  id: totrans-6321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7316](https://www.sqlalchemy.org/trac/ticket/7316)
- en: '**[postgresql] [usecase] [asyncpg]**'
  id: totrans-6322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase] [asyncpg]**'
- en: Added overridable methods `PGDialect_asyncpg.setup_asyncpg_json_codec` and `PGDialect_asyncpg.setup_asyncpg_jsonb_codec`
    codec, which handle the required task of registering JSON/JSONB codecs for these
    datatypes when using asyncpg. The change is that methods are broken out as individual,
    overridable methods to support third party dialects that need to alter or disable
    how these particular codecs are set up.
  id: totrans-6323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了可覆盖的方法 `PGDialect_asyncpg.setup_asyncpg_json_codec` 和 `PGDialect_asyncpg.setup_asyncpg_jsonb_codec`
    编解码器，当使用 asyncpg 时，它们处理注册 JSON/JSONB 编解码器的必要任务。该更改是将方法拆分为独立的、可覆盖的方法，以支持需要修改或禁用这些特定编解码器设置的第三方方言。
- en: 'This change is also **backported** to: 1.4.27'
  id: totrans-6324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也被**回溯**至：1.4.27
- en: 'References: [#7284](https://www.sqlalchemy.org/trac/ticket/7284)'
  id: totrans-6325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7284](https://www.sqlalchemy.org/trac/ticket/7284)
- en: '**[postgresql] [usecase]**'
  id: totrans-6326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Added literal type rendering for the [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY") and [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY
    "sqlalchemy.dialects.postgresql.ARRAY") datatypes. The generic stringify will
    render using brackets, e.g. `[1, 2, 3]` and the PostgreSQL specific will use the
    ARRAY literal e.g. `ARRAY[1, 2, 3]`. Multiple dimensions and quoting are also
    taken into account.
  id: totrans-6327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 [`ARRAY`](../core/type_basics.html#sqlalchemy.types.ARRAY "sqlalchemy.types.ARRAY")
    和 [`ARRAY`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ARRAY "sqlalchemy.dialects.postgresql.ARRAY")
    数据类型添加了字面类型渲染。通用字符串化将使用方括号进行渲染，例如 `[1, 2, 3]`，而 PostgreSQL 特定将使用 ARRAY 字面值，例如
    `ARRAY[1, 2, 3]`。还考虑了多个维度和引号。
- en: 'References: [#8138](https://www.sqlalchemy.org/trac/ticket/8138)'
  id: totrans-6328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8138](https://www.sqlalchemy.org/trac/ticket/8138)
- en: '**[postgresql] [usecase]**'
  id: totrans-6329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [usecase]**'
- en: Adds support for PostgreSQL multirange types, introduced in PostgreSQL 14. Support
    for PostgreSQL ranges and multiranges has now been generalized to the psycopg3,
    psycopg2 and asyncpg backends, with room for further dialect support, using a
    backend-agnostic [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") data object that’s constructor-compatible
    with the previously used psycopg2 object. See the new documentation for usage
    patterns.
  id: totrans-6330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 PostgreSQL 多范围类型添加支持，引入自 PostgreSQL 14。现在，psycopg3、psycopg2 和 asyncpg 后端都已经通用化支持
    PostgreSQL 范围和多范围，可以进一步支持不同的方言，使用与之前使用的 psycopg2 对象构造兼容的后端无关的 [`Range`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.Range
    "sqlalchemy.dialects.postgresql.Range") 数据对象。请参阅新的文档以了解使用模式。
- en: In addition, range type handling has been enhanced so that it automatically
    renders type casts, so that in-place round trips for statements that don’t provide
    the database with any context don’t require the [`cast()`](../core/sqlelement.html#sqlalchemy.sql.expression.cast
    "sqlalchemy.sql.expression.cast") construct to be explicit for the database to
    know the desired type (discussed at [#8540](https://www.sqlalchemy.org/trac/ticket/8540)).
  id: totrans-6331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，范围类型处理已经增强，以便自动渲染类型转换，以便在不提供任何上下文给数据库的语句的情况下，无需对数据库明确指定所需的类型即可进行原地往返（讨论在
    [#8540](https://www.sqlalchemy.org/trac/ticket/8540) 中）。
- en: Thanks very much to @zeeeeeb for the pull request implementing and testing the
    new datatypes and psycopg support.
  id: totrans-6332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非常感谢 @zeeeeeb 实施和测试新数据类型和 psycopg 支持的拉取请求。
- en: See also
  id: totrans-6333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[New RANGE / MULTIRANGE support and changes for PostgreSQL backends](whatsnew_20.html#change-7156)'
  id: totrans-6334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL 后端的新 RANGE / MULTIRANGE 支持和更改](whatsnew_20.html#change-7156)'
- en: '[Range and Multirange Types](../dialects/postgresql.html#postgresql-ranges)'
  id: totrans-6335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[范围和多范围类型](../dialects/postgresql.html#postgresql-ranges)'
- en: 'References: [#7156](https://www.sqlalchemy.org/trac/ticket/7156), [#8540](https://www.sqlalchemy.org/trac/ticket/8540)'
  id: totrans-6336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#7156](https://www.sqlalchemy.org/trac/ticket/7156), [#8540](https://www.sqlalchemy.org/trac/ticket/8540)
- en: '**[postgresql] [usecase]**'
  id: totrans-6337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [用例]**'
- en: The “ping” query emitted when configuring [`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine") for psycopg, asyncpg and pg8000, but not for psycopg2,
    has been changed to be an empty query (`;`) instead of `SELECT 1`; additionally,
    for the asyncpg driver, the unnecessary use of a prepared statement for this query
    has been fixed. Rationale is to eliminate the need for PostgreSQL to produce a
    query plan when the ping is emitted. The operation is not currently supported
    by the `psycopg2` driver which continues to use `SELECT 1`.
  id: totrans-6338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 配置[`create_engine.pool_pre_ping`](../core/engines.html#sqlalchemy.create_engine.params.pool_pre_ping
    "sqlalchemy.create_engine")以对 psycopg、asyncpg 和 pg8000 进行预检时，发出的“ping”查询已更改为一个空查询
    (`;`)，而不是 `SELECT 1`；此外，对于 asyncpg 驱动程序，已修复了此查询不必要地使用预准备语句的问题。理由是消除 PostgreSQL
    在发出 ping 时产生查询计划的需要。当前不支持此操作的 `psycopg2` 驱动程序仍然使用 `SELECT 1`。
- en: 'References: [#8491](https://www.sqlalchemy.org/trac/ticket/8491)'
  id: totrans-6339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8491](https://www.sqlalchemy.org/trac/ticket/8491)
- en: '**[postgresql] [change]**'
  id: totrans-6340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [变更]**'
- en: SQLAlchemy now requires PostgreSQL version 9 or greater. Older versions may
    still work in some limited use cases.
  id: totrans-6341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLAlchemy 现在需要 PostgreSQL 版本 9 或更高版本。在某些有限的使用情况下，旧版本可能仍然可用。
- en: '**[postgresql] [change] [mssql]**'
  id: totrans-6342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [变更] [mssql]**'
- en: The parameter [`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID") of [`UUID`](../core/type_basics.html#sqlalchemy.types.UUID
    "sqlalchemy.types.UUID"), previously specific to the PostgreSQL dialect but now
    generalized for Core (along with a new backend-agnostic [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") datatype) now defaults to `True`, indicating that Python
    `UUID` objects are accepted by this datatype by default. Additionally, the SQL
    Server [`UNIQUEIDENTIFIER`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") datatype has been converted to be
    a UUID-receiving type; for legacy code that makes use of [`UNIQUEIDENTIFIER`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") using string values, set the [`UNIQUEIDENTIFIER.as_uuid`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER.params.as_uuid
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") parameter to `False`.
  id: totrans-6343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`UUID`](../core/type_basics.html#sqlalchemy.types.UUID "sqlalchemy.types.UUID")的参数
    [`UUID.as_uuid`](../core/type_basics.html#sqlalchemy.types.UUID.params.as_uuid
    "sqlalchemy.types.UUID")，以前仅适用于 PostgreSQL 方言，现在已泛化为 Core（以及一个新的与后端无关的 [`Uuid`](../core/type_basics.html#sqlalchemy.types.Uuid
    "sqlalchemy.types.Uuid") 数据类型），现在默认值为 `True`，表示此数据类型默认接受 Python `UUID` 对象。此外，SQL
    Server 的 [`UNIQUEIDENTIFIER`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") 数据类型已转换为接收 UUID 的类型；对于使用字符串值使用 [`UNIQUEIDENTIFIER`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") 的旧代码，请将 [`UNIQUEIDENTIFIER.as_uuid`](../dialects/mssql.html#sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER.params.as_uuid
    "sqlalchemy.dialects.mssql.UNIQUEIDENTIFIER") 参数设置为 `False`。 '
- en: 'References: [#7225](https://www.sqlalchemy.org/trac/ticket/7225)'
  id: totrans-6344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#7225](https://www.sqlalchemy.org/trac/ticket/7225)
- en: '**[postgresql] [change]**'
  id: totrans-6345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [变更]**'
- en: The [`ENUM.name`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.name
    "sqlalchemy.dialects.postgresql.ENUM") parameter for the PostgreSQL-specific [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") datatype is now a required keyword argument.
    The “name” is necessary in any case in order for the [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") to be usable as an error would be raised
    at SQL/DDL render time if “name” were not present.
  id: totrans-6346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL 特有的 [`ENUM`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM
    "sqlalchemy.dialects.postgresql.ENUM") 数据类型的 [`ENUM.name`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.ENUM.params.name
    "sqlalchemy.dialects.postgresql.ENUM") 参数现在是一个必需的关键字参数。在任何情况下，“name”都是必需的，以便在
    SQL/DDL 渲染时如果缺少“name”则会引发错误。
- en: '**[postgresql] [change]**'
  id: totrans-6347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [变更]**'
- en: In support of new PostgreSQL features including the psycopg3 dialect as well
    as extended “fast insertmany” support, the system by which typing information
    for bound parameters is passed to the PostgreSQL database has been redesigned
    to use inline casts emitted by the SQL compiler, and is now applied to all PostgreSQL
    dialects. This is in contrast to the previous approach which would rely upon the
    DBAPI in use to render these casts itself, which in cases such as that of pg8000
    and the adapted asyncpg driver, would use the pep-249 `setinputsizes()` method,
    or with the psycopg2 driver would rely on the driver itself in most cases, with
    some special exceptions made for ARRAY.
  id: totrans-6348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了支持新的PostgreSQL功能，包括psycopg3方言以及扩展的“快速插入多个”支持，已重新设计了将绑定参数的类型信息传递给PostgreSQL数据库的系统，以使用SQL编译器发出的内联转换，并且现在适用于所有PostgreSQL方言。这与以前的方法形成对比，以前的方法依赖于使用的DBAPI自己呈现这些转换，例如在pg8000和改进的asyncpg驱动程序的情况下，会使用pep-249的`setinputsizes()`方法，或者使用psycopg2驱动程序在大多数情况下依赖于驱动程序本身，对于一些特殊的情况，例如ARRAY。
- en: The new approach now has all PostgreSQL dialects rendering these casts as needed
    using PostgreSQL double-colon style within the compiler, and the use of `setinputsizes()`
    is removed for PostgreSQL dialects, as this was not generally part of these DBAPIs
    in any case (pg8000 being the only exception, which added the method at the request
    of SQLAlchemy developers).
  id: totrans-6349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新方法现在通过编译器在需要时呈现所有PostgreSQL方言的这些转换，而对于PostgreSQL方言，已删除了`setinputsizes()`的使用，因为这在任何情况下通常不是这些DBAPI的一部分（pg8000是唯一的例外，它在SQLAlchemy开发人员的要求下添加了该方法）。
- en: Advantages to this approach include per-statement performance, as no second
    pass over the compiled statement is required at execution time, better support
    for all DBAPIs, as there is now one consistent system of applying typing information,
    and improved transparency, as the SQL logging output, as well as the string output
    of a compiled statement, will show these casts present in the statement directly,
    whereas previously these casts were not visible in logging output as they would
    occur after the statement were logged.
  id: totrans-6350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种方法的优点包括每个语句的性能，因为在执行时不需要对编译后的语句进行第二次遍历，更好地支持所有DBAPI，因为现在有一个一致的应用类型信息的系统，以及改进的透明度，因为SQL日志输出以及编译语句的字符串输出将直接显示语句中存在的这些转换，而以前这些转换在日志输出中是不可见的，因为它们会在语句记录后发生。
- en: '**[postgresql] [bug]**'
  id: totrans-6351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [错误]**'
- en: The `Operators.match()` operator now uses `plainto_tsquery()` for PostgreSQL
    full text search, rather than `to_tsquery()`. The rationale for this change is
    to provide better cross-compatibility with match on other database backends. Full
    support for all PostgreSQL full text functions remains available through the use
    of [`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    in conjunction with [`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op") (an improved version of [`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op") for boolean operators).
  id: totrans-6352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Operators.match()`运算符现在使用`plainto_tsquery()`进行PostgreSQL全文搜索，而不是`to_tsquery()`。进行此更改的原因是提供与其他数据库后端上的match更好的跨兼容性。通过与[`Operators.bool_op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.bool_op
    "sqlalchemy.sql.expression.Operators.bool_op")（布尔运算符的改进版本[`Operators.op()`](../core/sqlelement.html#sqlalchemy.sql.expression.Operators.op
    "sqlalchemy.sql.expression.Operators.op")）结合使用[`func`](../core/sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")可以获得所有PostgreSQL全文函数的全面支持。'
- en: See also
  id: totrans-6353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[match() operator on PostgreSQL uses plainto_tsquery() rather than to_tsquery()](whatsnew_20.html#change-7086)'
  id: totrans-6354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PostgreSQL上的match()运算符使用plainto_tsquery()而不是to_tsquery()](whatsnew_20.html#change-7086)'
- en: 'References: [#7086](https://www.sqlalchemy.org/trac/ticket/7086)'
  id: totrans-6355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7086](https://www.sqlalchemy.org/trac/ticket/7086)
- en: '**[postgresql] [removed]**'
  id: totrans-6356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [已移除]**'
- en: 'Removed support for multiple deprecated drivers:'
  id: totrans-6357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除对多个已弃用驱动程序的支持：
- en: pypostgresql for PostgreSQL. This is available as an external driver at [https://github.com/PyGreSQL](https://github.com/PyGreSQL)
  id: totrans-6358
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于PostgreSQL的pypostgresql。这可作为外部驱动程序在[https://github.com/PyGreSQL](https://github.com/PyGreSQL)上获得
- en: ''
  id: totrans-6359
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-6360
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: pygresql for PostgreSQL.
  id: totrans-6361
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于PostgreSQL的pygresql。
- en: Please switch to one of the supported drivers or to the external version of
    the same driver.
  id: totrans-6362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请切换到支持的驱动程序之一或同一驱动程序的外部版本。
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-6363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
- en: '**[postgresql] [dialect]**'
  id: totrans-6364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [方言]**'
- en: Added support for `psycopg` dialect supporting both sync and async execution.
    This dialect is available under the `postgresql+psycopg` name for both the [`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") and [`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine") engine-creation functions.
  id: totrans-6365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对`psycopg`方言的支持，支持同步和异步执行。该方言在[`create_engine()`](../core/engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine")和[`create_async_engine()`](../orm/extensions/asyncio.html#sqlalchemy.ext.asyncio.create_async_engine
    "sqlalchemy.ext.asyncio.create_async_engine")引擎创建函数下可用，名称为`postgresql+psycopg`。
- en: See also
  id: totrans-6366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Dialect support for psycopg 3 (a.k.a. “psycopg”)](whatsnew_20.html#ticket-6842)'
  id: totrans-6367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Dialect support for psycopg 3 (a.k.a. “psycopg”)](whatsnew_20.html#ticket-6842)'
- en: '[psycopg](../dialects/postgresql.html#postgresql-psycopg)'
  id: totrans-6368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[psycopg](../dialects/postgresql.html#postgresql-psycopg)'
- en: 'References: [#6842](https://www.sqlalchemy.org/trac/ticket/6842)'
  id: totrans-6369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6842](https://www.sqlalchemy.org/trac/ticket/6842)
- en: '**[postgresql] [psycopg2]**'
  id: totrans-6370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [psycopg2]**'
- en: Update psycopg2 dialect to use the DBAPI interface to execute two phase transactions.
    Previously SQL commands were execute to handle this kind of transactions.
  id: totrans-6371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新 psycopg2 方言以使用 DBAPI 接口执行两阶段事务。以前是执行 SQL 命令来处理此类事务。
- en: 'References: [#7238](https://www.sqlalchemy.org/trac/ticket/7238)'
  id: totrans-6372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7238](https://www.sqlalchemy.org/trac/ticket/7238)
- en: '**[postgresql] [schema]**'
  id: totrans-6373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [schema]**'
- en: Introduced the type [`JSONPATH`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONPATH
    "sqlalchemy.dialects.postgresql.JSONPATH") that can be used in cast expressions.
    This is required by some PostgreSQL dialects when using functions such as `jsonb_path_exists`
    or `jsonb_path_match` that accept a `jsonpath` as input.
  id: totrans-6374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入了类型[`JSONPATH`](../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSONPATH
    "sqlalchemy.dialects.postgresql.JSONPATH")，可用于转换表达式中。在使用诸如`jsonb_path_exists`或`jsonb_path_match`等接受`jsonpath`作为输入的函数时，某些
    PostgreSQL 方言需要此类型。
- en: See also
  id: totrans-6375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[JSON Types](../dialects/postgresql.html#postgresql-json-types) - PostgreSQL
    JSON types.'
  id: totrans-6376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[JSON 类型](../dialects/postgresql.html#postgresql-json-types) - PostgreSQL JSON
    类型。'
- en: 'References: [#8216](https://www.sqlalchemy.org/trac/ticket/8216)'
  id: totrans-6377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8216](https://www.sqlalchemy.org/trac/ticket/8216)
- en: '**[postgresql] [reflection]**'
  id: totrans-6378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgresql] [reflection]**'
- en: The PostgreSQL dialect now supports reflection of expression based indexes.
    The reflection is supported both when using `Inspector.get_indexes()` and when
    reflecting a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    using [`Table.autoload_with`](../core/metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table"). Thanks to immerrr and Aidan Kane for the help on this
    ticket.
  id: totrans-6379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PostgreSQL 方言现在支持基于表达式的索引的反射。当使用`Inspector.get_indexes()`或使用[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")的`Table.autoload_with`(../core/metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table")反射表时，支持反射。感谢 immerrr 和 Aidan Kane 在此票上的帮助。
- en: 'References: [#7442](https://www.sqlalchemy.org/trac/ticket/7442)'
  id: totrans-6380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7442](https://www.sqlalchemy.org/trac/ticket/7442)
- en: mysql
  id: totrans-6381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql] [usecase] [mariadb]**'
  id: totrans-6382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [usecase] [mariadb]**'
- en: The `ROLLUP` function will now correctly render `WITH ROLLUP` on MySql and MariaDB,
    allowing the use of group by rollup with these backend.
  id: totrans-6383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ROLLUP`函数现在将在 MySql 和 MariaDB 上正确呈现`WITH ROLLUP`，允许在这些后端使用 group by rollup。'
- en: 'References: [#8503](https://www.sqlalchemy.org/trac/ticket/8503)'
  id: totrans-6384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8503](https://www.sqlalchemy.org/trac/ticket/8503)
- en: '**[mysql] [bug]**'
  id: totrans-6385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [bug]**'
- en: Fixed issue in MySQL [`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update") which would render
    the wrong column name when an expression were used in a VALUES expression. Pull
    request courtesy Cristian Sabaila.
  id: totrans-6386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MySQL 中[`Insert.on_duplicate_key_update()`](../dialects/mysql.html#sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update
    "sqlalchemy.dialects.mysql.Insert.on_duplicate_key_update")中的问题，当在 VALUES 表达式中使用表达式时，会呈现错误的列名。感谢
    Cristian Sabaila 的拉取请求。
- en: 'This change is also **backported** to: 1.4.27'
  id: totrans-6387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此更改也**回溯**到：1.4.27
- en: 'References: [#7281](https://www.sqlalchemy.org/trac/ticket/7281)'
  id: totrans-6388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7281](https://www.sqlalchemy.org/trac/ticket/7281)
- en: '**[mysql] [removed]**'
  id: totrans-6389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [removed]**'
- en: Removed support for the OurSQL driver for MySQL and MariaDB, as this driver
    does not seem to be maintained.
  id: totrans-6390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了对 MySQL 和 MariaDB 的 OurSQL 驱动程序的支持，因为该驱动程序似乎没有得到维护。
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-6391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
- en: mariadb
  id: totrans-6392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mariadb
- en: '**[mariadb] [usecase]**'
  id: totrans-6393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [usecase]**'
- en: Added a new execution option `is_delete_using=True`, which is consumed by the
    ORM when using an ORM-enabled DELETE statement in conjunction with the “fetch”
    synchronization strategy; this option indicates that the DELETE statement is expected
    to use multiple tables, which on MariaDB is the DELETE..USING syntax. The option
    then indicates that RETURNING (newly implemented in SQLAlchemy 2.0 for MariaDB
    for [#7011](https://www.sqlalchemy.org/trac/ticket/7011)) should not be used for
    databases that are known to not support “DELETE..USING..RETURNING” syntax, even
    though they support “DELETE..USING”, which is MariaDB’s current capability.
  id: totrans-6394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个新的执行选项 `is_delete_using=True`，当使用支持ORM的DELETE语句与“fetch”同步策略配合使用时，ORM会消耗这个选项；此选项表示预计DELETE语句将使用多个表，在MariaDB上是DELETE..USING语法。然后，该选项指示对于已知不支持“DELETE..USING..RETURNING”语法但支持“DELETE..USING”语法的数据库，不应该使用在SQLAlchemy
    2.0中新实现的用于MariaDB的RETURNING（对于[#7011](https://www.sqlalchemy.org/trac/ticket/7011)）。
- en: 'The rationale for this option is that the current workings of ORM-enabled DELETE
    doesn’t know up front if a DELETE statement is against multiple tables or not
    until compilation occurs, which is cached in any case, yet it needs to be known
    so that a SELECT for the to-be-deleted row can be emitted up front. Instead of
    applying an across-the-board performance penalty for all DELETE statements by
    proactively checking them all for this relatively unusual SQL pattern, the `is_delete_using=True`
    execution option is requested via a new exception message that is raised within
    the compilation step. This exception message is specifically (and only) raised
    when: the statement is an ORM-enabled DELETE where the “fetch” synchronization
    strategy has been requested; the backend is MariaDB or other backend with this
    specific limitation; the statement has been detected within the initial compilation
    that it would otherwise emit “DELETE..USING..RETURNING”. By applying the execution
    option, the ORM knows to run a SELECT upfront instead. A similar option is implemented
    for ORM-enabled UPDATE but there is not currently a backend where it is needed.'
  id: totrans-6395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个选项的理由是，ORM启用的DELETE当前不知道是否要删除多个表，直到编译发生，而无论如何，这都会被缓存，但需要知道这一点，以便提前发出用于将要删除的行的SELECT。不是对所有DELETE语句都应用跨越式性能惩罚，以便针对这个相对不常见的SQL模式主动检查它们，而是通过在编译步骤中引发一个新的异常消息来请求
    `is_delete_using=True` 执行选项。当满足以下条件时，这个异常消息特别（且仅仅）被引发：语句是启用ORM的DELETE，请求了“fetch”同步策略；后端是MariaDB或其他具有这种特定限制的后端；在初始编译中检测到该语句否则将发出“DELETE..USING..RETURNING”。通过应用执行选项，ORM知道要预先运行SELECT。类似的选项也适用于启用ORM的UPDATE，但目前还没有需要该选项的后端。
- en: 'References: [#8344](https://www.sqlalchemy.org/trac/ticket/8344)'
  id: totrans-6396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8344](https://www.sqlalchemy.org/trac/ticket/8344)
- en: '**[mariadb] [usecase]**'
  id: totrans-6397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mariadb] [用例]**'
- en: Added INSERT..RETURNING and DELETE..RETURNING support for the MariaDB dialect.
    UPDATE..RETURNING is not yet supported by MariaDB. MariaDB supports INSERT..RETURNING
    as of 10.5.0 and DELETE..RETURNING as of 10.0.5.
  id: totrans-6398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为MariaDB方言添加了INSERT..RETURNING和DELETE..RETURNING支持。MariaDB尚不支持UPDATE..RETURNING。MariaDB从10.5.0开始支持INSERT..RETURNING，从10.0.5开始支持DELETE..RETURNING。
- en: 'References: [#7011](https://www.sqlalchemy.org/trac/ticket/7011)'
  id: totrans-6399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#7011](https://www.sqlalchemy.org/trac/ticket/7011)
- en: sqlite
  id: totrans-6400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite] [usecase]**'
  id: totrans-6401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [用例]**'
- en: Added new parameter to SQLite for reflection methods called `sqlite_include_internal=True`;
    when omitted, local tables that start with the prefix `sqlite_`, which per SQLite
    documentation are noted as “internal schema” tables such as the `sqlite_sequence`
    table generated to support “AUTOINCREMENT” columns, will not be included in reflection
    methods that return lists of local objects. This prevents issues for example when
    using Alembic autogenerate, which previously would consider these SQLite-generated
    tables as being remove from the model.
  id: totrans-6402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为SQLite的反射方法添加了一个新的参数 `sqlite_include_internal=True`；当省略时，以 `sqlite_` 为前缀的本地表（根据SQLite文档标记为“内部模式”表，例如为支持“AUTOINCREMENT”列而生成的`sqlite_sequence`表）将不会包括在返回本地对象列表的反射方法中。这样做可以防止在使用Alembic自动生成时出现问题，之前，Alembic会将这些SQLite生成的表视为从模型中移除。
- en: See also
  id: totrans-6403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Reflecting internal schema tables](../dialects/sqlite.html#sqlite-include-internal)'
  id: totrans-6404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[反映内部模式表](../dialects/sqlite.html#sqlite-include-internal)'
- en: 'References: [#8234](https://www.sqlalchemy.org/trac/ticket/8234)'
  id: totrans-6405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#8234](https://www.sqlalchemy.org/trac/ticket/8234)
- en: '**[sqlite] [usecase]**'
  id: totrans-6406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [用例]**'
- en: Added RETURNING support for the SQLite dialect. SQLite supports RETURNING since
    version 3.35.
  id: totrans-6407
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SQLite 方言添加了对 RETURNING 的支持。SQLite 自版本 3.35 起支持 RETURNING。
- en: 'References: [#6195](https://www.sqlalchemy.org/trac/ticket/6195)'
  id: totrans-6408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#6195](https://www.sqlalchemy.org/trac/ticket/6195)
- en: '**[sqlite] [usecase]**'
  id: totrans-6409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [usecase]**'
- en: The SQLite dialect now supports UPDATE..FROM syntax, for UPDATE statements that
    may refer to additional tables within the WHERE criteria of the statement without
    the need to use subqueries. This syntax is invoked automatically when using the
    [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct when more than one table or other entity or selectable is used.
  id: totrans-6410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 方言现在支持 UPDATE..FROM 语法，用于 UPDATE 语句可能在语句的 WHERE 条件中引用其他表而无需使用子查询的情况。当使用多个表或其他实体或可选择项时，使用
    [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    构造时会自动调用此语法。
- en: 'References: [#7185](https://www.sqlalchemy.org/trac/ticket/7185)'
  id: totrans-6411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7185](https://www.sqlalchemy.org/trac/ticket/7185)
- en: '**[sqlite] [performance] [bug]**'
  id: totrans-6412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [performance] [bug]**'
- en: The SQLite dialect now defaults to [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool") when a file based database is used. This is set along
    with setting the `check_same_thread` parameter to `False`. It has been observed
    that the previous approach of defaulting to [`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool
    "sqlalchemy.pool.NullPool"), which does not hold onto database connections after
    they are released, did in fact have a measurable negative performance impact.
    As always, the pool class is customizable via the [`create_engine.poolclass`](../core/engines.html#sqlalchemy.create_engine.params.poolclass
    "sqlalchemy.create_engine") parameter.
  id: totrans-6413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用基于文件的数据库时，SQLite 方言现在默认使用 [`QueuePool`](../core/pooling.html#sqlalchemy.pool.QueuePool
    "sqlalchemy.pool.QueuePool")。这是通过将 `check_same_thread` 参数设置为 `False` 来完成的。观察到，之前默认使用
    [`NullPool`](../core/pooling.html#sqlalchemy.pool.NullPool "sqlalchemy.pool.NullPool")
    的方法，该方法在释放连接后不会保留数据库连接，实际上会产生可测量的负面性能影响。与往常一样，可以通过 [`create_engine.poolclass`](../core/engines.html#sqlalchemy.create_engine.params.poolclass
    "sqlalchemy.create_engine") 参数来自定义池类。
- en: See also
  id: totrans-6414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[The SQLite dialect uses QueuePool for file-based databases](whatsnew_20.html#change-7490)'
  id: totrans-6415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQLite 方言为基于文件的数据库使用 QueuePool](whatsnew_20.html#change-7490)'
- en: 'References: [#7490](https://www.sqlalchemy.org/trac/ticket/7490)'
  id: totrans-6416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7490](https://www.sqlalchemy.org/trac/ticket/7490)
- en: '**[sqlite] [performance] [usecase]**'
  id: totrans-6417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [performance] [usecase]**'
- en: SQLite datetime, date, and time datatypes now use Python standard lib `fromisoformat()`
    methods in order to parse incoming datetime, date, and time string values. This
    improves performance vs. the previous regular expression-based approach, and also
    automatically accommodates for datetime and time formats that contain either a
    six-digit “microseconds” format or a three-digit “milliseconds” format.
  id: totrans-6418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SQLite 的 datetime、date 和 time 数据类型现在使用 Python 标准库的 `fromisoformat()` 方法来解析传入的
    datetime、date 和 time 字符串值。这种方法相比之前基于正则表达式的方法提高了性能，并且自动适应包含六位数字“微秒”格式或三位数字“毫秒”格式的
    datetime 和 time 格式。
- en: 'References: [#7029](https://www.sqlalchemy.org/trac/ticket/7029)'
  id: totrans-6419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7029](https://www.sqlalchemy.org/trac/ticket/7029)
- en: '**[sqlite] [bug]**'
  id: totrans-6420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite] [bug]**'
- en: Removed the warning that emits from the [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric") type about DBAPIs not supporting Decimal values natively.
    This warning was oriented towards SQLite, which does not have any real way without
    additional extensions or workarounds of handling precision numeric values more
    than 15 significant digits as it only uses floating point math to represent numbers.
    As this is a known and documented limitation in SQLite itself, and not a quirk
    of the pysqlite driver, there’s no need for SQLAlchemy to warn for this. The change
    does not otherwise modify how precision numerics are handled. Values can continue
    to be handled as `Decimal()` or `float()` as configured with the [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric"), [`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") , and related datatypes, just without the ability to
    maintain precision beyond 15 significant digits when using SQLite, unless alternate
    representations such as strings are used.
  id: totrans-6421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了关于 [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric "sqlalchemy.types.Numeric")
    类型在 DBAPI 中不原生支持 Decimal 值的警告。该警告是针对 SQLite 的，因为 SQLite 没有任何真正的方法（除非使用额外的扩展或变通方法）来处理超过
    15 个有效数字的精度数字值，因为它只使用浮点数学来表示数字。由于这是 SQLite 本身已知和记录的限制，而不是 pysqlite 驱动程序的怪癖，因此
    SQLAlchemy 不需要为此发出警告。此更改不会修改精度数字的处理方式。在使用 SQLite 时，值可以继续按照配置的 [`Numeric`](../core/type_basics.html#sqlalchemy.types.Numeric
    "sqlalchemy.types.Numeric")、[`Float`](../core/type_basics.html#sqlalchemy.types.Float
    "sqlalchemy.types.Float") 和相关数据类型处理为 `Decimal()` 或 `float()`，只是不能在使用 SQLite 时保持超过
    15 个有效数字的精度，除非使用其他表示形式，如字符串。
- en: 'References: [#7299](https://www.sqlalchemy.org/trac/ticket/7299)'
  id: totrans-6422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7299](https://www.sqlalchemy.org/trac/ticket/7299)
- en: mssql
  id: totrans-6423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql] [usecase]**'
  id: totrans-6424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [用例]**'
- en: Implemented reflection of the “clustered index” flag `mssql_clustered` for the
    SQL Server dialect. Pull request courtesy John Lennox.
  id: totrans-6425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 SQL Server 方言实现了“聚集索引”标志 `mssql_clustered` 的反映。拉取请求由 John Lennox 提供。
- en: 'References: [#8288](https://www.sqlalchemy.org/trac/ticket/8288)'
  id: totrans-6426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8288](https://www.sqlalchemy.org/trac/ticket/8288)
- en: '**[mssql] [usecase]**'
  id: totrans-6427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [用例]**'
- en: Added support table and column comments on MSSQL when creating a table. Added
    support for reflecting table comments. Thanks to Daniel Hall for the help in this
    pull request.
  id: totrans-6428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当创建表时，添加了对 MSSQL 上表和列注释的支持。增加了对反映表注释的支持。感谢 Daniel Hall 在此拉取请求中的帮助。
- en: 'References: [#7844](https://www.sqlalchemy.org/trac/ticket/7844)'
  id: totrans-6429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7844](https://www.sqlalchemy.org/trac/ticket/7844)
- en: '**[mssql] [bug]**'
  id: totrans-6430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [错误]**'
- en: The `use_setinputsizes` parameter for the `mssql+pyodbc` dialect now defaults
    to `True`; this is so that non-unicode string comparisons are bound by pyodbc
    to pyodbc.SQL_VARCHAR rather than pyodbc.SQL_WVARCHAR, allowing indexes against
    VARCHAR columns to take effect. In order for the `fast_executemany=True` parameter
    to continue functioning, the `use_setinputsizes` mode now skips the `cursor.setinputsizes()`
    call specifically when `fast_executemany` is True and the specific method in use
    is `cursor.executemany()`, which doesn’t support setinputsizes. The change also
    adds appropriate pyodbc DBAPI typing to values that are typed as [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") or [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText"), as well as altered the base [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") datatype to consider JSON string values as [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") rather than [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String").
  id: totrans-6431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mssql+pyodbc` 方言的 `use_setinputsizes` 参数现在默认为 `True`；这是为了使非 Unicode 字符串比较绑定到
    pyodbc.SQL_VARCHAR 而不是 pyodbc.SQL_WVARCHAR，从而允许针对 VARCHAR 列的索引生效。为了使 `fast_executemany=True`
    参数继续发挥作用，`use_setinputsizes` 模式现在在 `fast_executemany` 为 True 且正在使用的具体方法是 `cursor.executemany()`
    时跳过了 `cursor.setinputsizes()` 调用，因为该方法不支持 setinputsizes。该更改还为被标记为 [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") 或 [`UnicodeText`](../core/type_basics.html#sqlalchemy.types.UnicodeText
    "sqlalchemy.types.UnicodeText") 的值添加了适当的 pyodbc DBAPI 类型，以及将基本 [`JSON`](../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") 数据类型更改为将 JSON 字符串值视为 [`Unicode`](../core/type_basics.html#sqlalchemy.types.Unicode
    "sqlalchemy.types.Unicode") 而不是 [`String`](../core/type_basics.html#sqlalchemy.types.String
    "sqlalchemy.types.String")。  '
- en: 'References: [#8177](https://www.sqlalchemy.org/trac/ticket/8177)'
  id: totrans-6432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8177](https://www.sqlalchemy.org/trac/ticket/8177)
- en: '**[mssql] [removed]**'
  id: totrans-6433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [已移除]**'
- en: Removed support for the mxodbc driver due to lack of testing support. ODBC users
    may use the pyodbc dialect which is fully supported.
  id: totrans-6434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于缺乏测试支持，移除了对 mxodbc 驱动程序的支持。ODBC 用户可以使用完全支持的 pyodbc 方言。
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-6435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
- en: oracle
  id: totrans-6436
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle] [feature]**'
  id: totrans-6437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Add support for the new oracle driver `oracledb`.
  id: totrans-6438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为新的 oracle 驱动程序 `oracledb` 添加支持。
- en: See also
  id: totrans-6439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[Dialect support for oracledb](whatsnew_20.html#ticket-8054)'
  id: totrans-6440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[oracledb 的方言支持](whatsnew_20.html#ticket-8054)'
- en: '[python-oracledb](../dialects/oracle.html#oracledb)'
  id: totrans-6441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[python-oracledb](../dialects/oracle.html#oracledb)'
- en: 'References: [#8054](https://www.sqlalchemy.org/trac/ticket/8054)'
  id: totrans-6442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#8054](https://www.sqlalchemy.org/trac/ticket/8054)
- en: '**[oracle] [feature]**'
  id: totrans-6443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: Implemented DDL and reflection support for `FLOAT` datatypes which include an
    explicit “binary_precision” value. Using the Oracle-specific [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") datatype, the new parameter [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT") may be specified which will render Oracle’s
    precision for floating point types directly. This value is interpreted during
    reflection. Upon reflecting back a `FLOAT` datatype, the datatype returned is
    one of [`DOUBLE_PRECISION`](../core/type_basics.html#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION") for a `FLOAT` for a precision of 126 (this
    is also Oracle’s default precision for `FLOAT`), [`REAL`](../core/type_basics.html#sqlalchemy.types.REAL
    "sqlalchemy.types.REAL") for a precision of 63, and [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") for a custom precision, as per Oracle documentation.
  id: totrans-6444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对包含显式“binary_precision”值的`FLOAT`数据类型实现了 DDL 和反射支持。使用 Oracle 特定的 [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT
    "sqlalchemy.dialects.oracle.FLOAT") 数据类型，可以指定新参数 [`FLOAT.binary_precision`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT.params.binary_precision
    "sqlalchemy.dialects.oracle.FLOAT")，它将直接呈现 Oracle 的浮点类型的精度。此值在反射过程中解释。反射回 `FLOAT`
    数据类型时，返回的数据类型之一是 [`DOUBLE_PRECISION`](../core/type_basics.html#sqlalchemy.types.DOUBLE_PRECISION
    "sqlalchemy.types.DOUBLE_PRECISION") 用于 126 的 `FLOAT` 的精度（这也是 Oracle 的 `FLOAT`
    的默认精度），用于 63 的 [`REAL`](../core/type_basics.html#sqlalchemy.types.REAL "sqlalchemy.types.REAL")，以及用于自定义精度的
    [`FLOAT`](../dialects/oracle.html#sqlalchemy.dialects.oracle.FLOAT "sqlalchemy.dialects.oracle.FLOAT")，根据
    Oracle 文档。
- en: As part of this change, the generic [`Float.precision`](../core/type_basics.html#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float") value is explicitly rejected when generating DDL for
    Oracle, as this precision cannot be accurately converted to “binary precision”;
    instead, an error message encourages the use of [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant") so that Oracle’s specific form of
    precision may be chosen exactly. This is a backwards-incompatible change in behavior,
    as the previous “precision” value was silently ignored for Oracle.
  id: totrans-6445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为此更改的一部分，当为 Oracle 生成 DDL 时，显式拒绝了通用 [`Float.precision`](../core/type_basics.html#sqlalchemy.types.Float.params.precision
    "sqlalchemy.types.Float.params.precision") 值，因为此精度无法准确转换为“二进制精度”；相反，错误消息鼓励使用 [`TypeEngine.with_variant()`](../core/type_api.html#sqlalchemy.types.TypeEngine.with_variant
    "sqlalchemy.types.TypeEngine.with_variant")，以便可以精确选择 Oracle 的特定精度形式。这是一种不兼容的行为更改，因为以前的“精度”值对于
    Oracle 是静默忽略的。
- en: See also
  id: totrans-6446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[New Oracle FLOAT type with binary precision; decimal precision not accepted
    directly](whatsnew_20.html#change-5465-oracle)'
  id: totrans-6447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[新的 Oracle FLOAT 类型，具有二进制精度；不直接接受小数精度](whatsnew_20.html#change-5465-oracle)'
- en: 'References: [#5465](https://www.sqlalchemy.org/trac/ticket/5465)'
  id: totrans-6448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#5465](https://www.sqlalchemy.org/trac/ticket/5465)
- en: '**[oracle] [feature]**'
  id: totrans-6449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [feature]**'
- en: 'Full “RETURNING” support is implemented for the cx_Oracle dialect, covering
    two individual types of functionality:'
  id: totrans-6450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_Oracle 方言完全实现了“RETURNING”支持，涵盖了两种单独的功能类型：
- en: multi-row RETURNING is implemented, meaning multiple RETURNING rows are now
    received for DML statements that produce more than one row for RETURNING.
  id: totrans-6451
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现了多行 RETURNING，意味着现在对于生成多于一个 RETURNING 行的 DML 语句，将接收到多个 RETURNING 行。
- en: ”executemany RETURNING” is also implemented - this allows RETURNING to yield
    row-per statement when `cursor.executemany()` is used. The implementation of this
    part of the feature delivers dramatic performance improvements to ORM inserts,
    in the same way as was added for psycopg2 in the SQLAlchemy 1.4 change [ORM Batch
    inserts with psycopg2 now batch statements with RETURNING in most cases](migration_14.html#change-5263).
  id: totrans-6452
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: “executemany RETURNING” 也已实现 - 当使用 `cursor.executemany()` 时，这允许 RETURNING 在每个语句中产生一行。
    此功能的实现为 ORM 插入带来了显著的性能改进，方式与 SQLAlchemy 1.4 更改 [ORM 批量插入与 psycopg2 现在在大多数情况下批处理具有
    RETURNING 的语句](migration_14.html#change-5263) 中添加的方式相同。
- en: 'References: [#6245](https://www.sqlalchemy.org/trac/ticket/6245)'
  id: totrans-6453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#6245](https://www.sqlalchemy.org/trac/ticket/6245)
- en: '**[oracle] [usecase]**'
  id: totrans-6454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [usecase]**'
- en: Oracle will now use FETCH FIRST N ROWS / OFFSET syntax for limit/offset support
    by default for Oracle 12c and above. This syntax was already available when [`Select.fetch()`](../core/selectable.html#sqlalchemy.sql.expression.Select.fetch
    "sqlalchemy.sql.expression.Select.fetch") were used directly, it’s now implied
    for [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") and [`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset") as well.
  id: totrans-6455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 现在默认情况下将使用 FETCH FIRST N ROWS / OFFSET 语法来支持 Oracle 12c 及以上版本的 limit/offset。
    当直接使用 [`Select.fetch()`](../core/selectable.html#sqlalchemy.sql.expression.Select.fetch
    "sqlalchemy.sql.expression.Select.fetch") 时，此语法已经可用，现在也适用于 [`Select.limit()`](../core/selectable.html#sqlalchemy.sql.expression.Select.limit
    "sqlalchemy.sql.expression.Select.limit") 和 [`Select.offset()`](../core/selectable.html#sqlalchemy.sql.expression.Select.offset
    "sqlalchemy.sql.expression.Select.offset")。
- en: 'References: [#8221](https://www.sqlalchemy.org/trac/ticket/8221)'
  id: totrans-6456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#8221](https://www.sqlalchemy.org/trac/ticket/8221)
- en: '**[oracle] [change]**'
  id: totrans-6457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [change]**'
- en: Materialized views on oracle are now reflected as views. On previous versions
    of SQLAlchemy the views were returned among the table names, not among the view
    names. As a side effect of this change they are not reflected by default by `MetaData.reflect()`,
    unless `views=True` is set. To get a list of materialized views, use the new inspection
    method [`Inspector.get_materialized_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names").
  id: totrans-6458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Oracle 上的物化视图现在被反映为视图。 在 SQLAlchemy 的早期版本中，视图会在表名中返回，而不是在视图名中返回。 作为此更改的副作用，除非设置了
    `views=True`，否则默认情况下它们不会被 `MetaData.reflect()` 反映。 要获取物化视图列表，请使用新的检查方法 [`Inspector.get_materialized_view_names()`](../core/reflection.html#sqlalchemy.engine.reflection.Inspector.get_materialized_view_names
    "sqlalchemy.engine.reflection.Inspector.get_materialized_view_names")。
- en: '**[oracle] [bug]**'
  id: totrans-6459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Adjustments made to the BLOB / CLOB / NCLOB datatypes in the cx_Oracle and oracledb
    dialects, to improve performance based on recommendations from Oracle developers.
  id: totrans-6460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 cx_Oracle 和 oracledb 方言中的 BLOB / CLOB / NCLOB 数据类型，以根据 Oracle 开发人员的建议提高性能。
- en: 'References: [#7494](https://www.sqlalchemy.org/trac/ticket/7494)'
  id: totrans-6461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#7494](https://www.sqlalchemy.org/trac/ticket/7494)
- en: '**[oracle] [bug]**'
  id: totrans-6462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle] [bug]**'
- en: Related to the deprecation for [`create_engine.implicit_returning`](../core/engines.html#sqlalchemy.create_engine.params.implicit_returning
    "sqlalchemy.create_engine"), the “implicit_returning” feature is now enabled for
    the Oracle dialect in all cases; previously, the feature would be turned off when
    an Oracle 8/8i version were detected, however online documentation indicates both
    versions support the same RETURNING syntax as modern versions.
  id: totrans-6463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于 [`create_engine.implicit_returning`](../core/engines.html#sqlalchemy.create_engine.params.implicit_returning
    "sqlalchemy.create_engine") 弃用的相关内容，现在“implicit_returning”功能在所有情况下都为 Oracle 方言启用；
    以前，当检测到 Oracle 8/8i 版本时，该功能将被关闭，但在线文档表明这两个版本支持与现代版本相同的 RETURNING 语法。
- en: 'References: [#6962](https://www.sqlalchemy.org/trac/ticket/6962)'
  id: totrans-6464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#6962](https://www.sqlalchemy.org/trac/ticket/6962)
- en: '**[oracle]**'
  id: totrans-6465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: cx_Oracle 7 is now the minimum version for cx_Oracle.
  id: totrans-6466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: cx_Oracle 7 现在是 cx_Oracle 的最低版本。
- en: misc
  id: totrans-6467
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[removed] [sybase]**'
  id: totrans-6468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[removed] [sybase]**'
- en: Removed the “sybase” internal dialect that was deprecated in previous SQLAlchemy
    versions. Third party dialect support is available.
  id: totrans-6469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了在以前的 SQLAlchemy 版本中已弃用的“sybase”内部方言。 第三方方言支持可用。
- en: See also
  id: totrans-6470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参见
- en: '[External Dialects](../dialects/index.html)'
  id: totrans-6471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[外部方言](../dialects/index.html)'
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-6472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
- en: '**[removed] [firebird]**'
  id: totrans-6473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[removed] [firebird]**'
- en: Removed the “firebird” internal dialect that was deprecated in previous SQLAlchemy
    versions. Third party dialect support is available.
  id: totrans-6474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在之前的SQLAlchemy版本中已弃用的“firebird”内部方言。第三方方言支持可用。
- en: See also
  id: totrans-6475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[External Dialects](../dialects/index.html)'
  id: totrans-6476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[外部方言](../dialects/index.html)'
- en: 'References: [#7258](https://www.sqlalchemy.org/trac/ticket/7258)'
  id: totrans-6477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#7258](https://www.sqlalchemy.org/trac/ticket/7258)
