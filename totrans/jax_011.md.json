["```py\nimport jax\nimport jax.numpy as jnp\n\n@jax.jit\ndef f(x):\n  print(\"print(x) ->\", x)\n  y = jnp.sin(x)\n  print(\"print(y) ->\", y)\n  return y\n\nresult = f(2.) \n```", "```py\nprint(x) -> Traced<ShapedArray(float32[], weak_type=True)>with<DynamicJaxprTrace(level=1/0)>\nprint(y) -> Traced<ShapedArray(float32[], weak_type=True)>with<DynamicJaxprTrace(level=1/0)> \n```", "```py\n@jax.jit\ndef f(x):\n  jax.debug.print(\"jax.debug.print(x) -> {x}\", x=x)\n  y = jnp.sin(x)\n  jax.debug.print(\"jax.debug.print(y) -> {y}\", y=y)\n  return y\n\nresult = f(2.) \n```", "```py\njax.debug.print(x) -> 2.0\njax.debug.print(y) -> 0.9092974066734314 \n```", "```py\ndef f(x):\n  jax.debug.print(\"jax.debug.print(x) -> {}\", x)\n  y = jnp.sin(x)\n  jax.debug.print(\"jax.debug.print(y) -> {}\", y)\n  return y\n\nxs = jnp.arange(3.)\n\nresult = jax.vmap(f)(xs) \n```", "```py\njax.debug.print(x) -> 0.0\njax.debug.print(x) -> 1.0\njax.debug.print(x) -> 2.0\njax.debug.print(y) -> 0.0\njax.debug.print(y) -> 0.8414709568023682\njax.debug.print(y) -> 0.9092974066734314 \n```", "```py\nresult = jax.lax.map(f, xs) \n```", "```py\njax.debug.print(x) -> 0.0\njax.debug.print(y) -> 0.0\njax.debug.print(x) -> 1.0\njax.debug.print(y) -> 0.8414709568023682\njax.debug.print(x) -> 2.0\njax.debug.print(y) -> 0.9092974066734314 \n```", "```py\ndef f(x):\n  jax.debug.print(\"jax.debug.print(x) -> {}\", x)\n  return x ** 2\n\nresult = jax.grad(f)(1.) \n```", "```py\njax.debug.print(x) -> 1.0 \n```", "```py\n@jax.jit\ndef f(x, y):\n  jax.debug.print(\"jax.debug.print(x) -> {}\", x, ordered=True)\n  jax.debug.print(\"jax.debug.print(y) -> {}\", y, ordered=True)\n  return x + y\n\nf(1, 2) \n```", "```py\njax.debug.print(x) -> 1\njax.debug.print(y) -> 2 \n```", "```py\nArray(3, dtype=int32, weak_type=True) \n```", "```py\n@jax.jit\ndef f(x):\n  y, z = jnp.sin(x), jnp.cos(x)\n  jax.debug.breakpoint()\n  return y * z\nf(2.) # ==> Pauses during execution \n```", "```py\ndef breakpoint_if_nonfinite(x):\n  is_finite = jnp.isfinite(x).all()\n  def true_fn(x):\n    pass\n  def false_fn(x):\n    jax.debug.breakpoint()\n  jax.lax.cond(is_finite, true_fn, false_fn, x)\n\n@jax.jit\ndef f(x, y):\n  z = x / y\n  breakpoint_if_nonfinite(z)\n  return z\n\nf(2., 1.) # ==> No breakpoint \n```", "```py\nArray(2., dtype=float32, weak_type=True) \n```", "```py\nf(2., 0.) # ==> Pauses during execution \n```", "```py\nimport logging\n\ndef log_value(x):\n  logging.warning(f'Logged value: {x}')\n\n@jax.jit\ndef f(x):\n  jax.debug.callback(log_value, x)\n  return x\n\nf(1.0); \n```", "```py\nWARNING:root:Logged value: 1.0 \n```", "```py\nx = jnp.arange(5.0)\njax.vmap(f)(x); \n```", "```py\nWARNING:root:Logged value: 0.0\nWARNING:root:Logged value: 1.0\nWARNING:root:Logged value: 2.0\nWARNING:root:Logged value: 3.0\nWARNING:root:Logged value: 4.0 \n```", "```py\njax.grad(f)(1.0); \n```", "```py\nWARNING:root:Logged value: 1.0 \n```"]