- en: jax.example_libraries.optimizers module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/jax.example_libraries.optimizers.html`](https://jax.readthedocs.io/en/latest/jax.example_libraries.optimizers.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Examples of how to write optimizers with JAX.
  prefs: []
  type: TYPE_NORMAL
- en: You likely do not mean to import this module! The optimizers in this library
    are intended as examples only. If you are looking for a fully featured optimizer
    library, two good options are [JAXopt](https://github.com/google/jaxopt) and [Optax](https://github.com/deepmind/optax).
  prefs: []
  type: TYPE_NORMAL
- en: This module contains some convenient optimizer definitions, specifically initialization
    and update functions, which can be used with ndarrays or arbitrarily-nested tuple/list/dicts
    of ndarrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'An optimizer is modeled as an `(init_fun, update_fun, get_params)` triple of
    functions, where the component functions have these signatures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that an optimizer implementation has a lot of flexibility in the form
    of opt_state: it just has to be a pytree of JaxTypes (so that it can be passed
    to the JAX transforms defined in api.py) and it has to be consumable by update_fun
    and get_params.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example Usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Bases: [`object`](https://docs.python.org/3/library/functions.html#object "(in
    Python v3.12)")'
  prefs: []
  type: TYPE_NORMAL
- en: Marks the boundary between two joined (nested) pytrees.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Bases: [`NamedTuple`](https://docs.python.org/3/library/typing.html#typing.NamedTuple
    "(in Python v3.12)")'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**init_fn** ([*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(in Python v3.12)")*[**[*[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")*]**,* *OptimizerState**]*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**update_fn** ([*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(in Python v3.12)")*[**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* [*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")*,* *OptimizerState**]**,* *OptimizerState**]*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**params_fn** ([*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(in Python v3.12)")***[*[*OptimizerState**]**,* [*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")*]*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Alias for field number 0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Alias for field number 2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Alias for field number 1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Bases: [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "(in
    Python v3.12)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Alias for field number 0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Alias for field number 2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Alias for field number 1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Construct optimizer triple for Adagrad.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adaptive Subgradient Methods for Online Learning and Stochastic Optimization:
    [`www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf`](http://www.jmlr.org/papers/volume12/duchi11a/duchi11a.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**step_size** – positive scalar, or a callable representing a step size schedule
    that maps the iteration index to a positive scalar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**momentum** – optional, a positive scalar value for momentum'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: An (init_fun, update_fun, get_params) triple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Construct optimizer triple for Adam.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**step_size** – positive scalar, or a callable representing a step size schedule
    that maps the iteration index to a positive scalar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**b1** – optional, a positive scalar value for beta_1, the exponential decay
    rate for the first moment estimates (default 0.9).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**b2** – optional, a positive scalar value for beta_2, the exponential decay
    rate for the second moment estimates (default 0.999).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eps** – optional, a positive scalar value for epsilon, a small constant for
    numerical stability (default 1e-8).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: An (init_fun, update_fun, get_params) triple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Construct optimizer triple for AdaMax (a variant of Adam based on infinity norm).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**step_size** – positive scalar, or a callable representing a step size schedule
    that maps the iteration index to a positive scalar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**b1** – optional, a positive scalar value for beta_1, the exponential decay
    rate for the first moment estimates (default 0.9).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**b2** – optional, a positive scalar value for beta_2, the exponential decay
    rate for the second moment estimates (default 0.999).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eps** – optional, a positive scalar value for epsilon, a small constant for
    numerical stability (default 1e-8).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: An (init_fun, update_fun, get_params) triple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Clip gradients stored as a pytree of arrays to maximum norm max_norm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(in Python v3.12)")[[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")], [float](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Compute the l2 norm of a pytree of arrays. Useful for weight decay.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**scalar_or_schedule** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)") *|* [*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(in Python v3.12)")*[**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*]**,* [*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)")*]*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(in Python v3.12)")[[[int](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")], [float](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)")]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Construct optimizer triple for SGD with momentum.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**step_size** ([*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(in Python v3.12)")*[**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*]**,* [*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)")*]*) – positive scalar, or a callable representing a step
    size schedule that maps the iteration index to a positive scalar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mass** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)")) – positive scalar representing the momentum coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: An (init_fun, update_fun, get_params) triple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Construct optimizer triple for SGD with Nesterov momentum.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**step_size** ([*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(in Python v3.12)")*[**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*]**,* [*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)")*]*) – positive scalar, or a callable representing a step
    size schedule that maps the iteration index to a positive scalar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mass** ([*float*](https://docs.python.org/3/library/functions.html#float
    "(in Python v3.12)")) – positive scalar representing the momentum coefficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: An (init_fun, update_fun, get_params) triple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Decorator to make an optimizer defined for arrays generalize to containers.
  prefs: []
  type: TYPE_NORMAL
- en: With this decorator, you can write init, update, and get_params functions that
    each operate only on single arrays, and convert them to corresponding functions
    that operate on pytrees of parameters. See the optimizers defined in optimizers.py
    for examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**opt_maker** ([*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(in Python v3.12)")*[**[**...**]**,* [*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(in Python v3.12)")*[**[*[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")*]**,* [*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")*]**,* [*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(in Python v3.12)")*[**[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* [*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")*,* [*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")*]**,* [*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")*]**,* [*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(in Python v3.12)")*[**[*[*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")*]**,* [*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)")*]**]**]*) –'
  prefs: []
  type: TYPE_NORMAL
- en: a function that returns an `(init_fun, update_fun, get_params)` triple of functions
    that might only work with ndarrays, as per
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: An `(init_fun, update_fun, get_params)` triple of functions that work on arbitrary
    pytrees, as per
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The OptimizerState pytree type used by the returned functions is isomorphic
    to `ParameterPytree (OptStatePytree ndarray)`, but may store the state instead
    as e.g. a partially-flattened data structure for performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Callable*](https://docs.python.org/3/library/typing.html#typing.Callable
    "(in Python v3.12)")[[…], *Optimizer*]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Converts a marked pytree to an OptimizerState.
  prefs: []
  type: TYPE_NORMAL
- en: The inverse of unpack_optimizer_state. Converts a marked pytree with the leaves
    of the outer pytree represented as JoinPoints back into an OptimizerState. This
    function is intended to be useful when deserializing optimizer states.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**marked_pytree** – A pytree containing JoinPoint leaves that hold more pytrees.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: An equivalent OptimizerState to the input argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**boundaries** ([*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)"))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**values** ([*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)"))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Construct optimizer triple for RMSProp.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**step_size** – positive scalar, or a callable representing a step size schedule
    that maps the iteration index to a positive scalar. gamma: Decay parameter. eps:
    Epsilon parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: An (init_fun, update_fun, get_params) triple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Construct optimizer triple for RMSProp with momentum.
  prefs: []
  type: TYPE_NORMAL
- en: This optimizer is separate from the rmsprop optimizer because it needs to keep
    track of additional parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**step_size** – positive scalar, or a callable representing a step size schedule
    that maps the iteration index to a positive scalar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**gamma** – Decay parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eps** – Epsilon parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**momentum** – Momentum parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: An (init_fun, update_fun, get_params) triple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Construct optimizer triple for stochastic gradient descent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**step_size** – positive scalar, or a callable representing a step size schedule
    that maps the iteration index to a positive scalar.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: An (init_fun, update_fun, get_params) triple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Construct optimizer triple for SM3.
  prefs: []
  type: TYPE_NORMAL
- en: Memory-Efficient Adaptive Optimization for Large-Scale Learning. [`arxiv.org/abs/1901.11150`](https://arxiv.org/abs/1901.11150)
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**step_size** – positive scalar, or a callable representing a step size schedule
    that maps the iteration index to a positive scalar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**momentum** – optional, a positive scalar value for momentum'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: An (init_fun, update_fun, get_params) triple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Converts an OptimizerState to a marked pytree.
  prefs: []
  type: TYPE_NORMAL
- en: Converts an OptimizerState to a marked pytree with the leaves of the outer pytree
    represented as JoinPoints to avoid losing information. This function is intended
    to be useful when serializing optimizer states.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**opt_state** – An OptimizerState'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A pytree with JoinPoint leaves that contain a second level of pytrees.
  prefs: []
  type: TYPE_NORMAL
