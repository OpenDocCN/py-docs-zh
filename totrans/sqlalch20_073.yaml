- en: Indexable
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Indexable
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/indexable.html](https://docs.sqlalchemy.org/en/20/orm/extensions/indexable.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/indexable.html](https://docs.sqlalchemy.org/en/20/orm/extensions/indexable.html)
- en: Define attributes on ORM-mapped classes that have “index” attributes for columns
    with [`Indexable`](../../core/type_api.html#sqlalchemy.types.Indexable "sqlalchemy.types.Indexable")
    types.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在ORM映射类上定义具有“index”属性的列的[`Indexable`](../../core/type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable")类型。
- en: “index” means the attribute is associated with an element of an [`Indexable`](../../core/type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable") column with the predefined index to access it. The
    [`Indexable`](../../core/type_api.html#sqlalchemy.types.Indexable "sqlalchemy.types.Indexable")
    types include types such as [`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY"), [`JSON`](../../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON") and [`HSTORE`](../../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE").
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “index”表示属性与具有预定义索引以访问它的[`Indexable`](../../core/type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable")列的元素相关联。[`Indexable`](../../core/type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable")类型包括[`ARRAY`](../../core/type_basics.html#sqlalchemy.types.ARRAY
    "sqlalchemy.types.ARRAY")、[`JSON`](../../core/type_basics.html#sqlalchemy.types.JSON
    "sqlalchemy.types.JSON")和[`HSTORE`](../../dialects/postgresql.html#sqlalchemy.dialects.postgresql.HSTORE
    "sqlalchemy.dialects.postgresql.HSTORE")等类型。
- en: The [`indexable`](#module-sqlalchemy.ext.indexable "sqlalchemy.ext.indexable")
    extension provides [`Column`](../../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")-like interface for any element of an [`Indexable`](../../core/type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable") typed column. In simple cases, it can be treated
    as a [`Column`](../../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    - mapped attribute.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[`indexable`](#module-sqlalchemy.ext.indexable "sqlalchemy.ext.indexable")扩展为任何[`Indexable`](../../core/type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable")类型的列的元素提供了类似于[`Column`](../../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的接口。在简单情况下，它可以被视为一个[`Column`](../../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") - 映射属性。'
- en: Synopsis
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概要
- en: 'Given `Person` as a model with a primary key and JSON data field. While this
    field may have any number of elements encoded within it, we would like to refer
    to the element called `name` individually as a dedicated attribute which behaves
    like a standalone column:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`Person`是一个具有主键和JSON数据字段的模型。虽然该字段可以包含任意数量的元素，但我们希望单独引用名为`name`的元素作为行为类似独立列的专用属性：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Above, the `name` attribute now behaves like a mapped column. We can compose
    a new `Person` and set the value of `name`:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，`name`属性现在的行为类似于映射列。我们可以组合一个新的`Person`并设置`name`的值：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The value is now accessible:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在值是可访问的：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Behind the scenes, the JSON field was initialized to a new blank dictionary
    and the field was set:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，JSON字段被初始化为一个新的空字典，并设置了字段：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The field is mutable in place:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段是可变的：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When using [`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property"),
    the change that we make to the indexable structure is also automatically tracked
    as history; we no longer need to use [`MutableDict`](mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") in order to track this change for the unit
    of work.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")时，我们对可索引结构所做的更改也会自动跟踪为历史记录；我们不再需要使用[`MutableDict`](mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict")来跟踪此更改以进行工作单元。
- en: 'Deletions work normally as well:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 删除也可以正常工作：
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Above, deletion of `person.name` deletes the value from the dictionary, but
    not the dictionary itself.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，删除`person.name`会删除字典中的值，但不会删除字典本身。
- en: 'A missing key will produce `AttributeError`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 缺少键将产生`AttributeError`：
- en: '[PRE6]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Unless you set a default value:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除非设置默认值：
- en: '[PRE7]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The attributes are also accessible at the class level. Below, we illustrate
    `Person.name` used to generate an indexed SQL criteria:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性也可以在类级别访问。下面，我们演示了`Person.name`用于生成带有索引的SQL条件：
- en: '[PRE8]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The above query is equivalent to:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询等效于：
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Multiple [`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")
    objects can be chained to produce multiple levels of indexing:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可以链接多个[`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")对象以生成多层索引：
- en: '[PRE10]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Above, a query such as:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，一个查询如下：
- en: '[PRE11]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'On a PostgreSQL backend, the above query will render as:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在PostgreSQL后端上，上述查询将呈现为：
- en: '[PRE12]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Default Values
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认值
- en: '[`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")
    includes special behaviors for when the indexed data structure does not exist,
    and a set operation is called:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")在索引的数据结构不存在时包含特殊行为，并且调用了一个设置操作：'
- en: For an [`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")
    that is given an integer index value, the default data structure will be a Python
    list of `None` values, at least as long as the index value; the value is then
    set at its place in the list. This means for an index value of zero, the list
    will be initialized to `[None]` before setting the given value, and for an index
    value of five, the list will be initialized to `[None, None, None, None, None]`
    before setting the fifth element to the given value. Note that an existing list
    is **not** extended in place to receive a value.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于给定整数索引值的[`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")，默认的数据结构将是一个Python列表，其中包含至少与索引值一样多的`None`值；然后将该值设置到列表中的相应位置。这意味着对于索引值为零的情况，在设置给定值之前，列表将初始化为`[None]`，对于索引值为五的情况，在设置第五个元素之前，列表将初始化为`[None,
    None, None, None, None]`。请注意，现有的列表**不会**直接扩展以接收一个值。
- en: for an [`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")
    that is given any other kind of index value (e.g. strings usually), a Python dictionary
    is used as the default data structure.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于给定任何其他类型的索引值（例如通常是字符串）的[`index_property`](#sqlalchemy.ext.indexable.index_property
    "sqlalchemy.ext.indexable.index_property")，将使用Python字典作为默认数据结构。
- en: The default data structure can be set to any Python callable using the [`index_property.datatype`](#sqlalchemy.ext.indexable.index_property.params.datatype
    "sqlalchemy.ext.indexable.index_property") parameter, overriding the previous
    rules.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用[`index_property.datatype`](#sqlalchemy.ext.indexable.index_property.params.datatype
    "sqlalchemy.ext.indexable.index_property")参数将默认数据结构设置为任何Python可调用对象，覆盖以前的规则。
- en: Subclassing
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子类化
- en: '[`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")
    can be subclassed, in particular for the common use case of providing coercion
    of values or SQL expressions as they are accessed. Below is a common recipe for
    use with a PostgreSQL JSON type, where we want to also include automatic casting
    plus `astext()`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")可以被子类化，特别是针对常见的提供值或SQL表达式强制转换的用例。以下是在使用PostgreSQL
    JSON类型时的常见用法，其中我们还希望包括自动转换加`astext()`：'
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The above subclass can be used with the PostgreSQL-specific version of [`JSON`](../../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON"):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上述子类可以与PostgreSQL特定版本的[`JSON`](../../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON")一起使用：
- en: '[PRE14]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `age` attribute at the instance level works as before; however when rendering
    SQL, PostgreSQL’s `->>` operator will be used for indexed access, instead of the
    usual index operator of `->`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 实例级别的`age`属性与以前的工作方式相同；但是在渲染SQL时，将使用PostgreSQL的`->>`运算符进行索引访问，而不是通常的索引运算符`->`：
- en: '[PRE15]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The above query will render:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将呈现为：
- en: '[PRE16]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: API Reference
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API参考
- en: '| Object Name | Description |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [index_property](#sqlalchemy.ext.indexable.index_property) | A property generator.
    The generated property describes an object attribute that corresponds to an [`Indexable`](../../core/type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable") column. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [index_property](#sqlalchemy.ext.indexable.index_property) | 属性生成器。生成的属性描述了一个与[`Indexable`](../../core/type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable")列相对应的对象属性。 |'
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: A property generator. The generated property describes an object attribute that
    corresponds to an [`Indexable`](../../core/type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable") column.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 属性生成器。生成的属性描述了一个与[`Indexable`](../../core/type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable")列相对应的对象属性。
- en: See also
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sqlalchemy.ext.indexable`](#module-sqlalchemy.ext.indexable "sqlalchemy.ext.indexable")'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.ext.indexable`](#module-sqlalchemy.ext.indexable "sqlalchemy.ext.indexable")'
- en: '**Members**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.ext.indexable.index_property.__init__)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.ext.indexable.index_property.__init__)'
- en: '**Class signature**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.indexable.index_property`](#sqlalchemy.ext.indexable.index_property
    "sqlalchemy.ext.indexable.index_property") ([`sqlalchemy.ext.hybrid.hybrid_property`](hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property"))
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.ext.indexable.index_property`](#sqlalchemy.ext.indexable.index_property
    "sqlalchemy.ext.indexable.index_property")（[`sqlalchemy.ext.hybrid.hybrid_property`](hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")）
- en: '[PRE18]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Create a new [`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property").
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 [`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")。
- en: 'Parameters:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`attr_name` – An attribute name of an Indexable typed column, or other attribute
    that returns an indexable structure.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attr_name` – Indexable 类型列的属性名，或者返回可索引结构的其他属性。'
- en: '`index` – The index to be used for getting and setting this value. This should
    be the Python-side index value for integers.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index` – 用于获取和设置此值的索引。这应该是整数的 Python 端索引值。'
- en: '`default` – A value which will be returned instead of AttributeError when there
    is not a value at given index.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 当给定索引处没有值时，将返回的值。'
- en: '`datatype` – default datatype to use when the field is empty. By default, this
    is derived from the type of index used; a Python list for an integer index, or
    a Python dictionary for any other style of index. For a list, the list will be
    initialized to a list of None values that is at least `index` elements long.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`datatype` – 当字段为空时使用的默认数据类型。默认情况下，这是从使用的索引类型派生的；对于整数索引，是 Python 列表，对于任何其他类型的索引，是
    Python 字典。对于列表，列表将初始化为长度至少为 `index` 的 None 值列表。'
- en: '`mutable` – if False, writes and deletes to the attribute will be disallowed.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mutable` – 如果为 False，则不允许对属性进行写入和删除。'
- en: '`onebased` – assume the SQL representation of this value is one-based; that
    is, the first index in SQL is 1, not zero.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onebased` – 假设此值的 SQL 表示是基于一的；也就是说，SQL 中的第一个索引是 1，而不是零。'
- en: Synopsis
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概要
- en: 'Given `Person` as a model with a primary key and JSON data field. While this
    field may have any number of elements encoded within it, we would like to refer
    to the element called `name` individually as a dedicated attribute which behaves
    like a standalone column:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 `Person` 是一个带有主键和 JSON 数据字段的模型。虽然此字段可以包含任意数量的元素，但我们希望单独引用称为 `name` 的元素，作为一个独立的属性，其行为类似于独立的列：
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Above, the `name` attribute now behaves like a mapped column. We can compose
    a new `Person` and set the value of `name`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，`name` 属性现在的行为类似于映射列。我们可以组合一个新的 `Person` 并设置 `name` 的值：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The value is now accessible:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以访问该值了：
- en: '[PRE21]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Behind the scenes, the JSON field was initialized to a new blank dictionary
    and the field was set:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，JSON 字段被初始化为一个新的空字典，并设置了字段：
- en: '[PRE22]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The field is mutable in place:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段是可变的：
- en: '[PRE23]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When using [`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property"),
    the change that we make to the indexable structure is also automatically tracked
    as history; we no longer need to use [`MutableDict`](mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") in order to track this change for the unit
    of work.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 [`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")
    时，对可索引结构所做的更改也会自动跟踪为历史记录；我们不再需要使用 [`MutableDict`](mutable.html#sqlalchemy.ext.mutable.MutableDict
    "sqlalchemy.ext.mutable.MutableDict") 来跟踪此更改的工作单元。
- en: 'Deletions work normally as well:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 删除操作也正常工作：
- en: '[PRE24]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Above, deletion of `person.name` deletes the value from the dictionary, but
    not the dictionary itself.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，对 `person.name` 的删除会删除字典中的值，但不会删除字典本身。
- en: 'A missing key will produce `AttributeError`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 缺少的键会产生 `AttributeError`：
- en: '[PRE25]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Unless you set a default value:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 除非设置了默认值：
- en: '[PRE26]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The attributes are also accessible at the class level. Below, we illustrate
    `Person.name` used to generate an indexed SQL criteria:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性也可以在类级别访问。下面，我们说明了 `Person.name` 用于生成带索引的 SQL 条件：
- en: '[PRE27]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The above query is equivalent to:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的查询等效于：
- en: '[PRE28]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Multiple [`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")
    objects can be chained to produce multiple levels of indexing:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 可以链式连接多个 [`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")
    对象以产生多级索引：
- en: '[PRE29]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Above, a query such as:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，诸如以下查询：
- en: '[PRE30]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'On a PostgreSQL backend, the above query will render as:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 后端上，上述查询将呈现为：
- en: '[PRE31]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Default Values
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认值
- en: '[`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")
    includes special behaviors for when the indexed data structure does not exist,
    and a set operation is called:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")
    包含了当索引数据结构不存在时的特殊行为，以及调用了设置操作时：'
- en: For an [`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")
    that is given an integer index value, the default data structure will be a Python
    list of `None` values, at least as long as the index value; the value is then
    set at its place in the list. This means for an index value of zero, the list
    will be initialized to `[None]` before setting the given value, and for an index
    value of five, the list will be initialized to `[None, None, None, None, None]`
    before setting the fifth element to the given value. Note that an existing list
    is **not** extended in place to receive a value.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于给定整数索引值的 [`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")，默认数据结构将是包含
    `None` 值的 Python 列表，至少与索引值一样长；然后将值设置在列表中的位置。这意味着对于索引值为零的索引值，列表将在设置给定值之前初始化为 `[None]`，而对于索引值为五的索引值，列表将在将第五个元素设置为给定值之前初始化为
    `[None, None, None, None, None]`。请注意，现有列表 **不会** 在原地扩展以接收值。
- en: for an [`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")
    that is given any other kind of index value (e.g. strings usually), a Python dictionary
    is used as the default data structure.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于给定任何其他类型的索引值（例如通常是字符串）的 [`index_property`](#sqlalchemy.ext.indexable.index_property
    "sqlalchemy.ext.indexable.index_property")，将使用 Python 字典作为默认数据结构。
- en: The default data structure can be set to any Python callable using the [`index_property.datatype`](#sqlalchemy.ext.indexable.index_property.params.datatype
    "sqlalchemy.ext.indexable.index_property") parameter, overriding the previous
    rules.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用 [`index_property.datatype`](#sqlalchemy.ext.indexable.index_property.params.datatype
    "sqlalchemy.ext.indexable.index_property") 参数将默认数据结构设置为任何 Python 可调用对象，从而覆盖之前的规则。
- en: Subclassing
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子类化
- en: '[`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")
    can be subclassed, in particular for the common use case of providing coercion
    of values or SQL expressions as they are accessed. Below is a common recipe for
    use with a PostgreSQL JSON type, where we want to also include automatic casting
    plus `astext()`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")
    可以进行子类化，特别是用于提供在访问时进行值或 SQL 表达式强制转换的常见用例。下面是一个常见的配方，用于与 PostgreSQL JSON 类型一起使用，其中我们还希望包括自动转换以及
    `astext()`：'
- en: '[PRE32]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The above subclass can be used with the PostgreSQL-specific version of [`JSON`](../../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON"):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 上述子类可与 PostgreSQL 特定版本的 [`JSON`](../../dialects/postgresql.html#sqlalchemy.dialects.postgresql.JSON
    "sqlalchemy.dialects.postgresql.JSON") 一起使用：
- en: '[PRE33]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `age` attribute at the instance level works as before; however when rendering
    SQL, PostgreSQL’s `->>` operator will be used for indexed access, instead of the
    usual index operator of `->`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例级别的 `age` 属性仍然可以正常工作；但是，在渲染 SQL 时，将使用 PostgreSQL 的 `->>` 运算符进行索引访问，而不是通常的索引运算符
    `->`：
- en: '[PRE34]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The above query will render:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询将呈现为：
- en: '[PRE35]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: API Reference
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 参考
- en: '| Object Name | Description |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [index_property](#sqlalchemy.ext.indexable.index_property) | A property generator.
    The generated property describes an object attribute that corresponds to an [`Indexable`](../../core/type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable") column. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| [index_property](#sqlalchemy.ext.indexable.index_property) | 一个属性生成器。生成的属性描述了一个与
    [`Indexable`](../../core/type_api.html#sqlalchemy.types.Indexable "sqlalchemy.types.Indexable")
    列对应的对象属性。 |'
- en: '[PRE36]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: A property generator. The generated property describes an object attribute that
    corresponds to an [`Indexable`](../../core/type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable") column.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一个属性生成器。生成的属性描述了一个与 [`Indexable`](../../core/type_api.html#sqlalchemy.types.Indexable
    "sqlalchemy.types.Indexable") 列对应的对象属性。
- en: See also
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`sqlalchemy.ext.indexable`](#module-sqlalchemy.ext.indexable "sqlalchemy.ext.indexable")'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.ext.indexable`](#module-sqlalchemy.ext.indexable "sqlalchemy.ext.indexable")'
- en: '**Members**'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.ext.indexable.index_property.__init__)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.ext.indexable.index_property.__init__)'
- en: '**Class signature**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.ext.indexable.index_property`](#sqlalchemy.ext.indexable.index_property
    "sqlalchemy.ext.indexable.index_property") ([`sqlalchemy.ext.hybrid.hybrid_property`](hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property"))
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.ext.indexable.index_property`](#sqlalchemy.ext.indexable.index_property
    "sqlalchemy.ext.indexable.index_property")（[`sqlalchemy.ext.hybrid.hybrid_property`](hybrid.html#sqlalchemy.ext.hybrid.hybrid_property
    "sqlalchemy.ext.hybrid.hybrid_property")）
- en: '[PRE37]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Create a new [`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property").
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 [`index_property`](#sqlalchemy.ext.indexable.index_property "sqlalchemy.ext.indexable.index_property")。
- en: 'Parameters:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`attr_name` – An attribute name of an Indexable typed column, or other attribute
    that returns an indexable structure.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attr_name` – 一个可索引类型列的属性名称，或者返回可索引结构的其他属性。'
- en: '`index` – The index to be used for getting and setting this value. This should
    be the Python-side index value for integers.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index` – 用于获取和设置此值的索引。这应该是整数的Python端索引值。'
- en: '`default` – A value which will be returned instead of AttributeError when there
    is not a value at given index.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 在给定索引处没有值时返回的值。'
- en: '`datatype` – default datatype to use when the field is empty. By default, this
    is derived from the type of index used; a Python list for an integer index, or
    a Python dictionary for any other style of index. For a list, the list will be
    initialized to a list of None values that is at least `index` elements long.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`datatype` – 当字段为空时使用的默认数据类型。默认情况下，这是从使用的索引类型派生的；对于整数索引，是一个Python列表，对于任何其他类型的索引，是一个Python字典。对于列表，列表将被初始化为至少`index`元素长的None值列表。'
- en: '`mutable` – if False, writes and deletes to the attribute will be disallowed.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mutable` – 如果为False，则将禁止对属性的写入和删除。'
- en: '`onebased` – assume the SQL representation of this value is one-based; that
    is, the first index in SQL is 1, not zero.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onebased` – 假设此值的SQL表示是基于一的；也就是说，在SQL中，第一个索引是1，而不是零。'
