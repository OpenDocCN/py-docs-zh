["```py\nfrom sqlalchemy import Column, JSON, Integer\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.ext.indexable import index_property\n\nBase = declarative_base()\n\nclass Person(Base):\n    __tablename__ = 'person'\n\n    id = Column(Integer, primary_key=True)\n    data = Column(JSON)\n\n    name = index_property('data', 'name')\n```", "```py\n>>> person = Person(name='Alchemist')\n```", "```py\n>>> person.name\n'Alchemist'\n```", "```py\n>>> person.data\n{\"name\": \"Alchemist'}\n```", "```py\n>>> person.name = 'Renamed'\n>>> person.name\n'Renamed'\n>>> person.data\n{'name': 'Renamed'}\n```", "```py\n>>> del person.name\n>>> person.data\n{}\n```", "```py\n>>> person = Person()\n>>> person.name\n...\nAttributeError: 'name'\n```", "```py\n>>> class Person(Base):\n>>>     __tablename__ = 'person'\n>>>\n>>>     id = Column(Integer, primary_key=True)\n>>>     data = Column(JSON)\n>>>\n>>>     name = index_property('data', 'name', default=None)  # See default\n\n>>> person = Person()\n>>> print(person.name)\nNone\n```", "```py\n>>> from sqlalchemy.orm import Session\n>>> session = Session()\n>>> query = session.query(Person).filter(Person.name == 'Alchemist')\n```", "```py\n>>> query = session.query(Person).filter(Person.data['name'] == 'Alchemist')\n```", "```py\nfrom sqlalchemy import Column, JSON, Integer\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.ext.indexable import index_property\n\nBase = declarative_base()\n\nclass Person(Base):\n    __tablename__ = 'person'\n\n    id = Column(Integer, primary_key=True)\n    data = Column(JSON)\n\n    birthday = index_property('data', 'birthday')\n    year = index_property('birthday', 'year')\n    month = index_property('birthday', 'month')\n    day = index_property('birthday', 'day')\n```", "```py\nq = session.query(Person).filter(Person.year == '1980')\n```", "```py\nSELECT person.id, person.data\nFROM person\nWHERE person.data -> %(data_1)s -> %(param_1)s = %(param_2)s\n```", "```py\nclass pg_json_property(index_property):\n    def __init__(self, attr_name, index, cast_type):\n        super(pg_json_property, self).__init__(attr_name, index)\n        self.cast_type = cast_type\n\n    def expr(self, model):\n        expr = super(pg_json_property, self).expr(model)\n        return expr.astext.cast(self.cast_type)\n```", "```py\nfrom sqlalchemy import Column, Integer\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.dialects.postgresql import JSON\n\nBase = declarative_base()\n\nclass Person(Base):\n    __tablename__ = 'person'\n\n    id = Column(Integer, primary_key=True)\n    data = Column(JSON)\n\n    age = pg_json_property('data', 'age', Integer)\n```", "```py\n>>> query = session.query(Person).filter(Person.age < 20)\n```", "```py\nSELECT person.id, person.data\nFROM person\nWHERE CAST(person.data ->> %(data_1)s AS INTEGER) < %(param_1)s\n```", "```py\nclass sqlalchemy.ext.indexable.index_property\n```", "```py\nmethod __init__(attr_name, index, default=<object object>, datatype=None, mutable=True, onebased=True)\n```", "```py\nfrom sqlalchemy import Column, JSON, Integer\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.ext.indexable import index_property\n\nBase = declarative_base()\n\nclass Person(Base):\n    __tablename__ = 'person'\n\n    id = Column(Integer, primary_key=True)\n    data = Column(JSON)\n\n    name = index_property('data', 'name')\n```", "```py\n>>> person = Person(name='Alchemist')\n```", "```py\n>>> person.name\n'Alchemist'\n```", "```py\n>>> person.data\n{\"name\": \"Alchemist'}\n```", "```py\n>>> person.name = 'Renamed'\n>>> person.name\n'Renamed'\n>>> person.data\n{'name': 'Renamed'}\n```", "```py\n>>> del person.name\n>>> person.data\n{}\n```", "```py\n>>> person = Person()\n>>> person.name\n...\nAttributeError: 'name'\n```", "```py\n>>> class Person(Base):\n>>>     __tablename__ = 'person'\n>>>\n>>>     id = Column(Integer, primary_key=True)\n>>>     data = Column(JSON)\n>>>\n>>>     name = index_property('data', 'name', default=None)  # See default\n\n>>> person = Person()\n>>> print(person.name)\nNone\n```", "```py\n>>> from sqlalchemy.orm import Session\n>>> session = Session()\n>>> query = session.query(Person).filter(Person.name == 'Alchemist')\n```", "```py\n>>> query = session.query(Person).filter(Person.data['name'] == 'Alchemist')\n```", "```py\nfrom sqlalchemy import Column, JSON, Integer\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.ext.indexable import index_property\n\nBase = declarative_base()\n\nclass Person(Base):\n    __tablename__ = 'person'\n\n    id = Column(Integer, primary_key=True)\n    data = Column(JSON)\n\n    birthday = index_property('data', 'birthday')\n    year = index_property('birthday', 'year')\n    month = index_property('birthday', 'month')\n    day = index_property('birthday', 'day')\n```", "```py\nq = session.query(Person).filter(Person.year == '1980')\n```", "```py\nSELECT person.id, person.data\nFROM person\nWHERE person.data -> %(data_1)s -> %(param_1)s = %(param_2)s\n```", "```py\nclass pg_json_property(index_property):\n    def __init__(self, attr_name, index, cast_type):\n        super(pg_json_property, self).__init__(attr_name, index)\n        self.cast_type = cast_type\n\n    def expr(self, model):\n        expr = super(pg_json_property, self).expr(model)\n        return expr.astext.cast(self.cast_type)\n```", "```py\nfrom sqlalchemy import Column, Integer\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.dialects.postgresql import JSON\n\nBase = declarative_base()\n\nclass Person(Base):\n    __tablename__ = 'person'\n\n    id = Column(Integer, primary_key=True)\n    data = Column(JSON)\n\n    age = pg_json_property('data', 'age', Integer)\n```", "```py\n>>> query = session.query(Person).filter(Person.age < 20)\n```", "```py\nSELECT person.id, person.data\nFROM person\nWHERE CAST(person.data ->> %(data_1)s AS INTEGER) < %(param_1)s\n```", "```py\nclass sqlalchemy.ext.indexable.index_property\n```", "```py\nmethod __init__(attr_name, index, default=<object object>, datatype=None, mutable=True, onebased=True)\n```"]