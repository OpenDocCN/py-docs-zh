["```py\nt = Table('mytable', metadata,\n    Column('id', Integer, Identity(start=3), primary_key=True),\n    Column(...), ...\n)\n```", "```py\nCREATE  TABLE  mytable  (\n  id  INTEGER  GENERATED  BY  DEFAULT  AS  IDENTITY  (START  WITH  3),\n  ...,\n  PRIMARY  KEY  (id)\n)\n```", "```py\nt = Table('mytable', metadata,\n      Column('id', Integer, Sequence('id_seq', start=1), primary_key=True),\n      Column(...), ...\n)\n```", "```py\nt = Table('mytable', metadata,\n      Column('id', Integer, Sequence('id_seq', start=1), primary_key=True),\n      autoload_with=engine\n)\n```", "```py\nconnection = engine.connect()\nconnection = connection.execution_options(\n    isolation_level=\"AUTOCOMMIT\"\n)\n```", "```py\nengine = create_engine(\n    \"oracle+cx_oracle://scott:tiger@oracle122\",\n    max_identifier_length=30)\n```", "```py\nfrom sqlalchemy import Column\nfrom sqlalchemy import Index\nfrom sqlalchemy import Integer\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import Table\nfrom sqlalchemy.dialects import oracle\nfrom sqlalchemy.schema import CreateIndex\n\nm = MetaData(naming_convention={\"ix\": \"ix_%(column_0N_name)s\"})\n\nt = Table(\n    \"t\",\n    m,\n    Column(\"some_column_name_1\", Integer),\n    Column(\"some_column_name_2\", Integer),\n    Column(\"some_column_name_3\", Integer),\n)\n\nix = Index(\n    None,\n    t.c.some_column_name_1,\n    t.c.some_column_name_2,\n    t.c.some_column_name_3,\n)\n\noracle_dialect = oracle.dialect(max_identifier_length=30)\nprint(CreateIndex(ix).compile(dialect=oracle_dialect))\n```", "```py\nCREATE INDEX ix_some_column_name_1s_70cd ON t\n(some_column_name_1, some_column_name_2, some_column_name_3)\n```", "```py\nCREATE INDEX ix_some_column_name_1some_column_name_2some_column_name_3 ON t\n(some_column_name_1, some_column_name_2, some_column_name_3)\n```", "```py\nsome_table = Table('some_table', autoload_with=some_engine,\n                            oracle_resolve_synonyms=True)\n```", "```py\n    from sqlalchemy import create_engine, inspect\n\n    engine = create_engine(\"oracle+cx_oracle://s:t@dsn\")\n    inspector = inspect(engine)\n    all_check_constraints = inspector.get_check_constraints(\n        \"some_table\", include_all=True)\n    ```", "```py\n# exclude SYSAUX and SOME_TABLESPACE, but not SYSTEM\ne = create_engine(\n  \"oracle+cx_oracle://scott:tiger@xe\",\n  exclude_tablespaces=[\"SYSAUX\", \"SOME_TABLESPACE\"])\n```", "```py\n    Table(\n        \"some_table\", metadata, ...,\n        prefixes=['GLOBAL TEMPORARY'], oracle_on_commit='PRESERVE ROWS')\n    ```", "```py\n     Table('mytable', metadata, Column('data', String(32)),\n         oracle_compress=True)\n\n     Table('mytable', metadata, Column('data', String(32)),\n         oracle_compress=6)\n\n    The ``oracle_compress`` parameter accepts either an integer compression\n    level, or ``True`` to use the default compression level.\n    ```", "```py\nIndex('my_index', my_table.c.data, oracle_bitmap=True)\n```", "```py\nIndex('my_index', my_table.c.data, oracle_compress=True)\n\nIndex('my_index', my_table.c.data1, my_table.c.data2, unique=True,\n       oracle_compress=1)\n```", "```py\nfrom sqlalchemy.dialects.oracle import (\n    BFILE,\n    BLOB,\n    CHAR,\n    CLOB,\n    DATE,\n    DOUBLE_PRECISION,\n    FLOAT,\n    INTERVAL,\n    LONG,\n    NCLOB,\n    NCHAR,\n    NUMBER,\n    NVARCHAR,\n    NVARCHAR2,\n    RAW,\n    TIMESTAMP,\n    VARCHAR,\n    VARCHAR2,\n)\n```", "```py\nclass sqlalchemy.dialects.oracle.BFILE\n```", "```py\nmethod __init__(length: int | None = None)\n```", "```py\nclass sqlalchemy.dialects.oracle.BINARY_DOUBLE\n```", "```py\nmethod __init__(precision: int | None = None, asdecimal: bool = False, decimal_return_scale: int | None = None)\n```", "```py\n    from sqlalchemy import Column\n    from sqlalchemy import Float\n    from sqlalchemy.dialects import oracle\n\n    Column(\n        \"float_data\",\n        Float(5).with_variant(oracle.FLOAT(binary_precision=16), \"oracle\")\n    )\n    ```", "```py\nclass sqlalchemy.dialects.oracle.BINARY_FLOAT\n```", "```py\nmethod __init__(precision: int | None = None, asdecimal: bool = False, decimal_return_scale: int | None = None)\n```", "```py\n    from sqlalchemy import Column\n    from sqlalchemy import Float\n    from sqlalchemy.dialects import oracle\n\n    Column(\n        \"float_data\",\n        Float(5).with_variant(oracle.FLOAT(binary_precision=16), \"oracle\")\n    )\n    ```", "```py\nclass sqlalchemy.dialects.oracle.DATE\n```", "```py\nmethod __init__(timezone: bool = False)\n```", "```py\nclass sqlalchemy.dialects.oracle.FLOAT\n```", "```py\nmethod __init__(binary_precision=None, asdecimal=False, decimal_return_scale=None)\n```", "```py\nclass sqlalchemy.dialects.oracle.INTERVAL\n```", "```py\nmethod __init__(day_precision=None, second_precision=None)\n```", "```py\nclass sqlalchemy.dialects.oracle.NCLOB\n```", "```py\nmethod __init__(length: int | None = None, collation: str | None = None)\n```", "```py\n    >>> from sqlalchemy import cast, select, String\n    >>> print(select(cast('some string', String(collation='utf8'))))\n    SELECT  CAST(:param_1  AS  VARCHAR  COLLATE  utf8)  AS  anon_1 \n    ```", "```py\nattribute sqlalchemy.dialects.oracle.NVARCHAR2\n```", "```py\nclass sqlalchemy.dialects.oracle.NUMBER\n```", "```py\nclass sqlalchemy.dialects.oracle.LONG\n```", "```py\nmethod __init__(length: int | None = None, collation: str | None = None)\n```", "```py\n    >>> from sqlalchemy import cast, select, String\n    >>> print(select(cast('some string', String(collation='utf8'))))\n    SELECT  CAST(:param_1  AS  VARCHAR  COLLATE  utf8)  AS  anon_1 \n    ```", "```py\nclass sqlalchemy.dialects.oracle.RAW\n```", "```py\nclass sqlalchemy.dialects.oracle.ROWID\n```", "```py\nclass sqlalchemy.dialects.oracle.TIMESTAMP\n```", "```py\nmethod __init__(timezone: bool = False, local_timezone: bool = False)\n```", "```py\noracle+cx_oracle://user:pass@hostname:port[/dbname][?service_name=<service>[&key=value&key=value...]]\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@hostname:port/?service_name=myservice&encoding=UTF-8&nencoding=UTF-8\")\n```", "```py\nmyalias =\n  (DESCRIPTION =\n    (ADDRESS = (PROTOCOL = TCP)(HOST = mymachine.example.com)(PORT = 1521))\n    (CONNECT_DATA =\n      (SERVER = DEDICATED)\n      (SERVICE_NAME = orclpdb1)\n    )\n  )\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@myalias/?encoding=UTF-8&nencoding=UTF-8\")\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@hostname:1521/dbname?encoding=UTF-8&nencoding=UTF-8\")\n```", "```py\n>>> import cx_Oracle\n>>> cx_Oracle.makedsn(\"hostname\", 1521, sid=\"dbname\")\n'(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=hostname)(PORT=1521))(CONNECT_DATA=(SID=dbname)))'\n```", "```py\ne = create_engine(\n    \"oracle+cx_oracle://user:pass@dsn?encoding=UTF-8&nencoding=UTF-8&mode=SYSDBA&events=true\")\n```", "```py\nimport cx_Oracle\ne = create_engine(\n    \"oracle+cx_oracle://user:pass@dsn\",\n    connect_args={\n        \"encoding\": \"UTF-8\",\n        \"nencoding\": \"UTF-8\",\n        \"mode\": cx_Oracle.SYSDBA,\n        \"events\": True\n    }\n)\n```", "```py\ne = create_engine(\n    \"oracle+cx_oracle://user:pass@dsn\", coerce_to_decimal=False)\n```", "```py\nimport cx_Oracle\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.pool import NullPool\n\npool = cx_Oracle.SessionPool(\n    user=\"scott\", password=\"tiger\", dsn=\"orclpdb\",\n    min=2, max=5, increment=1, threaded=True,\n    encoding=\"UTF-8\", nencoding=\"UTF-8\"\n)\n\nengine = create_engine(\"oracle+cx_oracle://\", creator=pool.acquire, poolclass=NullPool)\n```", "```py\nwith engine.connect() as conn:\n    print(conn.scalar(\"select 1 FROM dual\"))\n```", "```py\nimport cx_Oracle\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.pool import NullPool\n\npool = cx_Oracle.SessionPool(\n    user=\"scott\", password=\"tiger\", dsn=\"orclpdb\",\n    min=2, max=5, increment=1, threaded=True,\n    encoding=\"UTF-8\", nencoding=\"UTF-8\"\n)\n\ndef creator():\n    return pool.acquire(cclass=\"MYCLASS\", purity=cx_Oracle.ATTR_PURITY_SELF)\n\nengine = create_engine(\"oracle+cx_oracle://\", creator=creator, poolclass=NullPool)\n```", "```py\nwith engine.connect() as conn:\n    print(conn.scalar(\"select 1 FROM dual\"))\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@orclpdb/?encoding=UTF-8&nencoding=UTF-8\")\n```", "```py\nfrom sqlalchemy import create_engine, event\n\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@host/xe\")\n\n@event.listens_for(engine, \"do_setinputsizes\")\ndef _log_setinputsizes(inputsizes, cursor, statement, parameters, context):\n    for bindparam, dbapitype in inputsizes.items():\n            log.info(\n                \"Bound parameter name: %s SQLAlchemy type: %r \"\n                \"DBAPI object: %s\",\n                bindparam.key, bindparam.type, dbapitype)\n```", "```py\nfrom sqlalchemy import create_engine, event\nfrom cx_Oracle import CLOB\n\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@host/xe\")\n\n@event.listens_for(engine, \"do_setinputsizes\")\ndef _remove_clob(inputsizes, cursor, statement, parameters, context):\n    for bindparam, dbapitype in list(inputsizes.items()):\n        if dbapitype is CLOB:\n            del inputsizes[bindparam]\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://dsn\", coerce_to_decimal=False)\n```", "```py\noracle+oracledb://user:pass@hostname:port[/dbname][?service_name=<service>[&key=value&key=value...]]\n```", "```py\n    from sqlalchemy import create_engine\n    sync_engine = create_engine(\"oracle+oracledb://scott:tiger@localhost/?service_name=XEPDB1\")\n    ```", "```py\n    from sqlalchemy.ext.asyncio import create_async_engine\n    asyncio_engine = create_async_engine(\"oracle+oracledb://scott:tiger@localhost/?service_name=XEPDB1\")\n    ```", "```py\nfrom sqlalchemy.ext.asyncio import create_async_engine\nasyncio_engine = create_async_engine(\"oracle+oracledb_async://scott:tiger@localhost/?service_name=XEPDB1\")\n```", "```py\nengine = sa.create_engine(\"oracle+oracledb://...\", thick_mode={\n    \"lib_dir\": \"/path/to/oracle/client/lib\", \"driver_name\": \"my-app\"\n})\n```", "```py\nt = Table('mytable', metadata,\n    Column('id', Integer, Identity(start=3), primary_key=True),\n    Column(...), ...\n)\n```", "```py\nCREATE  TABLE  mytable  (\n  id  INTEGER  GENERATED  BY  DEFAULT  AS  IDENTITY  (START  WITH  3),\n  ...,\n  PRIMARY  KEY  (id)\n)\n```", "```py\nt = Table('mytable', metadata,\n      Column('id', Integer, Sequence('id_seq', start=1), primary_key=True),\n      Column(...), ...\n)\n```", "```py\nt = Table('mytable', metadata,\n      Column('id', Integer, Sequence('id_seq', start=1), primary_key=True),\n      autoload_with=engine\n)\n```", "```py\nt = Table('mytable', metadata,\n    Column('id', Integer, Identity(start=3), primary_key=True),\n    Column(...), ...\n)\n```", "```py\nCREATE  TABLE  mytable  (\n  id  INTEGER  GENERATED  BY  DEFAULT  AS  IDENTITY  (START  WITH  3),\n  ...,\n  PRIMARY  KEY  (id)\n)\n```", "```py\nt = Table('mytable', metadata,\n      Column('id', Integer, Sequence('id_seq', start=1), primary_key=True),\n      Column(...), ...\n)\n```", "```py\nt = Table('mytable', metadata,\n      Column('id', Integer, Sequence('id_seq', start=1), primary_key=True),\n      autoload_with=engine\n)\n```", "```py\nconnection = engine.connect()\nconnection = connection.execution_options(\n    isolation_level=\"AUTOCOMMIT\"\n)\n```", "```py\nengine = create_engine(\n    \"oracle+cx_oracle://scott:tiger@oracle122\",\n    max_identifier_length=30)\n```", "```py\nfrom sqlalchemy import Column\nfrom sqlalchemy import Index\nfrom sqlalchemy import Integer\nfrom sqlalchemy import MetaData\nfrom sqlalchemy import Table\nfrom sqlalchemy.dialects import oracle\nfrom sqlalchemy.schema import CreateIndex\n\nm = MetaData(naming_convention={\"ix\": \"ix_%(column_0N_name)s\"})\n\nt = Table(\n    \"t\",\n    m,\n    Column(\"some_column_name_1\", Integer),\n    Column(\"some_column_name_2\", Integer),\n    Column(\"some_column_name_3\", Integer),\n)\n\nix = Index(\n    None,\n    t.c.some_column_name_1,\n    t.c.some_column_name_2,\n    t.c.some_column_name_3,\n)\n\noracle_dialect = oracle.dialect(max_identifier_length=30)\nprint(CreateIndex(ix).compile(dialect=oracle_dialect))\n```", "```py\nCREATE INDEX ix_some_column_name_1s_70cd ON t\n(some_column_name_1, some_column_name_2, some_column_name_3)\n```", "```py\nCREATE INDEX ix_some_column_name_1some_column_name_2some_column_name_3 ON t\n(some_column_name_1, some_column_name_2, some_column_name_3)\n```", "```py\nsome_table = Table('some_table', autoload_with=some_engine,\n                            oracle_resolve_synonyms=True)\n```", "```py\n    from sqlalchemy import create_engine, inspect\n\n    engine = create_engine(\"oracle+cx_oracle://s:t@dsn\")\n    inspector = inspect(engine)\n    all_check_constraints = inspector.get_check_constraints(\n        \"some_table\", include_all=True)\n    ```", "```py\n# exclude SYSAUX and SOME_TABLESPACE, but not SYSTEM\ne = create_engine(\n  \"oracle+cx_oracle://scott:tiger@xe\",\n  exclude_tablespaces=[\"SYSAUX\", \"SOME_TABLESPACE\"])\n```", "```py\n    Table(\n        \"some_table\", metadata, ...,\n        prefixes=['GLOBAL TEMPORARY'], oracle_on_commit='PRESERVE ROWS')\n    ```", "```py\n     Table('mytable', metadata, Column('data', String(32)),\n         oracle_compress=True)\n\n     Table('mytable', metadata, Column('data', String(32)),\n         oracle_compress=6)\n\n    The ``oracle_compress`` parameter accepts either an integer compression\n    level, or ``True`` to use the default compression level.\n    ```", "```py\nIndex('my_index', my_table.c.data, oracle_bitmap=True)\n```", "```py\nIndex('my_index', my_table.c.data, oracle_compress=True)\n\nIndex('my_index', my_table.c.data1, my_table.c.data2, unique=True,\n       oracle_compress=1)\n```", "```py\nIndex('my_index', my_table.c.data, oracle_bitmap=True)\n```", "```py\nIndex('my_index', my_table.c.data, oracle_compress=True)\n\nIndex('my_index', my_table.c.data1, my_table.c.data2, unique=True,\n       oracle_compress=1)\n```", "```py\nfrom sqlalchemy.dialects.oracle import (\n    BFILE,\n    BLOB,\n    CHAR,\n    CLOB,\n    DATE,\n    DOUBLE_PRECISION,\n    FLOAT,\n    INTERVAL,\n    LONG,\n    NCLOB,\n    NCHAR,\n    NUMBER,\n    NVARCHAR,\n    NVARCHAR2,\n    RAW,\n    TIMESTAMP,\n    VARCHAR,\n    VARCHAR2,\n)\n```", "```py\nclass sqlalchemy.dialects.oracle.BFILE\n```", "```py\nmethod __init__(length: int | None = None)\n```", "```py\nclass sqlalchemy.dialects.oracle.BINARY_DOUBLE\n```", "```py\nmethod __init__(precision: int | None = None, asdecimal: bool = False, decimal_return_scale: int | None = None)\n```", "```py\n    from sqlalchemy import Column\n    from sqlalchemy import Float\n    from sqlalchemy.dialects import oracle\n\n    Column(\n        \"float_data\",\n        Float(5).with_variant(oracle.FLOAT(binary_precision=16), \"oracle\")\n    )\n    ```", "```py\nclass sqlalchemy.dialects.oracle.BINARY_FLOAT\n```", "```py\nmethod __init__(precision: int | None = None, asdecimal: bool = False, decimal_return_scale: int | None = None)\n```", "```py\n    from sqlalchemy import Column\n    from sqlalchemy import Float\n    from sqlalchemy.dialects import oracle\n\n    Column(\n        \"float_data\",\n        Float(5).with_variant(oracle.FLOAT(binary_precision=16), \"oracle\")\n    )\n    ```", "```py\nclass sqlalchemy.dialects.oracle.DATE\n```", "```py\nmethod __init__(timezone: bool = False)\n```", "```py\nclass sqlalchemy.dialects.oracle.FLOAT\n```", "```py\nmethod __init__(binary_precision=None, asdecimal=False, decimal_return_scale=None)\n```", "```py\nclass sqlalchemy.dialects.oracle.INTERVAL\n```", "```py\nmethod __init__(day_precision=None, second_precision=None)\n```", "```py\nclass sqlalchemy.dialects.oracle.NCLOB\n```", "```py\nmethod __init__(length: int | None = None, collation: str | None = None)\n```", "```py\n    >>> from sqlalchemy import cast, select, String\n    >>> print(select(cast('some string', String(collation='utf8'))))\n    SELECT  CAST(:param_1  AS  VARCHAR  COLLATE  utf8)  AS  anon_1 \n    ```", "```py\nattribute sqlalchemy.dialects.oracle.NVARCHAR2\n```", "```py\nclass sqlalchemy.dialects.oracle.NUMBER\n```", "```py\nclass sqlalchemy.dialects.oracle.LONG\n```", "```py\nmethod __init__(length: int | None = None, collation: str | None = None)\n```", "```py\n    >>> from sqlalchemy import cast, select, String\n    >>> print(select(cast('some string', String(collation='utf8'))))\n    SELECT  CAST(:param_1  AS  VARCHAR  COLLATE  utf8)  AS  anon_1 \n    ```", "```py\nclass sqlalchemy.dialects.oracle.RAW\n```", "```py\nclass sqlalchemy.dialects.oracle.ROWID\n```", "```py\nclass sqlalchemy.dialects.oracle.TIMESTAMP\n```", "```py\nmethod __init__(timezone: bool = False, local_timezone: bool = False)\n```", "```py\noracle+cx_oracle://user:pass@hostname:port[/dbname][?service_name=<service>[&key=value&key=value...]]\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@hostname:port/?service_name=myservice&encoding=UTF-8&nencoding=UTF-8\")\n```", "```py\nmyalias =\n  (DESCRIPTION =\n    (ADDRESS = (PROTOCOL = TCP)(HOST = mymachine.example.com)(PORT = 1521))\n    (CONNECT_DATA =\n      (SERVER = DEDICATED)\n      (SERVICE_NAME = orclpdb1)\n    )\n  )\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@myalias/?encoding=UTF-8&nencoding=UTF-8\")\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@hostname:1521/dbname?encoding=UTF-8&nencoding=UTF-8\")\n```", "```py\n>>> import cx_Oracle\n>>> cx_Oracle.makedsn(\"hostname\", 1521, sid=\"dbname\")\n'(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=hostname)(PORT=1521))(CONNECT_DATA=(SID=dbname)))'\n```", "```py\ne = create_engine(\n    \"oracle+cx_oracle://user:pass@dsn?encoding=UTF-8&nencoding=UTF-8&mode=SYSDBA&events=true\")\n```", "```py\nimport cx_Oracle\ne = create_engine(\n    \"oracle+cx_oracle://user:pass@dsn\",\n    connect_args={\n        \"encoding\": \"UTF-8\",\n        \"nencoding\": \"UTF-8\",\n        \"mode\": cx_Oracle.SYSDBA,\n        \"events\": True\n    }\n)\n```", "```py\ne = create_engine(\n    \"oracle+cx_oracle://user:pass@dsn\", coerce_to_decimal=False)\n```", "```py\nimport cx_Oracle\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.pool import NullPool\n\npool = cx_Oracle.SessionPool(\n    user=\"scott\", password=\"tiger\", dsn=\"orclpdb\",\n    min=2, max=5, increment=1, threaded=True,\n    encoding=\"UTF-8\", nencoding=\"UTF-8\"\n)\n\nengine = create_engine(\"oracle+cx_oracle://\", creator=pool.acquire, poolclass=NullPool)\n```", "```py\nwith engine.connect() as conn:\n    print(conn.scalar(\"select 1 FROM dual\"))\n```", "```py\nimport cx_Oracle\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.pool import NullPool\n\npool = cx_Oracle.SessionPool(\n    user=\"scott\", password=\"tiger\", dsn=\"orclpdb\",\n    min=2, max=5, increment=1, threaded=True,\n    encoding=\"UTF-8\", nencoding=\"UTF-8\"\n)\n\ndef creator():\n    return pool.acquire(cclass=\"MYCLASS\", purity=cx_Oracle.ATTR_PURITY_SELF)\n\nengine = create_engine(\"oracle+cx_oracle://\", creator=creator, poolclass=NullPool)\n```", "```py\nwith engine.connect() as conn:\n    print(conn.scalar(\"select 1 FROM dual\"))\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@orclpdb/?encoding=UTF-8&nencoding=UTF-8\")\n```", "```py\nfrom sqlalchemy import create_engine, event\n\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@host/xe\")\n\n@event.listens_for(engine, \"do_setinputsizes\")\ndef _log_setinputsizes(inputsizes, cursor, statement, parameters, context):\n    for bindparam, dbapitype in inputsizes.items():\n            log.info(\n                \"Bound parameter name: %s SQLAlchemy type: %r \"\n                \"DBAPI object: %s\",\n                bindparam.key, bindparam.type, dbapitype)\n```", "```py\nfrom sqlalchemy import create_engine, event\nfrom cx_Oracle import CLOB\n\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@host/xe\")\n\n@event.listens_for(engine, \"do_setinputsizes\")\ndef _remove_clob(inputsizes, cursor, statement, parameters, context):\n    for bindparam, dbapitype in list(inputsizes.items()):\n        if dbapitype is CLOB:\n            del inputsizes[bindparam]\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://dsn\", coerce_to_decimal=False)\n```", "```py\noracle+cx_oracle://user:pass@hostname:port[/dbname][?service_name=<service>[&key=value&key=value...]]\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@hostname:port/?service_name=myservice&encoding=UTF-8&nencoding=UTF-8\")\n```", "```py\nmyalias =\n  (DESCRIPTION =\n    (ADDRESS = (PROTOCOL = TCP)(HOST = mymachine.example.com)(PORT = 1521))\n    (CONNECT_DATA =\n      (SERVER = DEDICATED)\n      (SERVICE_NAME = orclpdb1)\n    )\n  )\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@myalias/?encoding=UTF-8&nencoding=UTF-8\")\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@hostname:1521/dbname?encoding=UTF-8&nencoding=UTF-8\")\n```", "```py\n>>> import cx_Oracle\n>>> cx_Oracle.makedsn(\"hostname\", 1521, sid=\"dbname\")\n'(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=hostname)(PORT=1521))(CONNECT_DATA=(SID=dbname)))'\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@hostname:port/?service_name=myservice&encoding=UTF-8&nencoding=UTF-8\")\n```", "```py\nmyalias =\n  (DESCRIPTION =\n    (ADDRESS = (PROTOCOL = TCP)(HOST = mymachine.example.com)(PORT = 1521))\n    (CONNECT_DATA =\n      (SERVER = DEDICATED)\n      (SERVICE_NAME = orclpdb1)\n    )\n  )\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@myalias/?encoding=UTF-8&nencoding=UTF-8\")\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@hostname:1521/dbname?encoding=UTF-8&nencoding=UTF-8\")\n```", "```py\n>>> import cx_Oracle\n>>> cx_Oracle.makedsn(\"hostname\", 1521, sid=\"dbname\")\n'(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=hostname)(PORT=1521))(CONNECT_DATA=(SID=dbname)))'\n```", "```py\ne = create_engine(\n    \"oracle+cx_oracle://user:pass@dsn?encoding=UTF-8&nencoding=UTF-8&mode=SYSDBA&events=true\")\n```", "```py\nimport cx_Oracle\ne = create_engine(\n    \"oracle+cx_oracle://user:pass@dsn\",\n    connect_args={\n        \"encoding\": \"UTF-8\",\n        \"nencoding\": \"UTF-8\",\n        \"mode\": cx_Oracle.SYSDBA,\n        \"events\": True\n    }\n)\n```", "```py\ne = create_engine(\n    \"oracle+cx_oracle://user:pass@dsn\", coerce_to_decimal=False)\n```", "```py\nimport cx_Oracle\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.pool import NullPool\n\npool = cx_Oracle.SessionPool(\n    user=\"scott\", password=\"tiger\", dsn=\"orclpdb\",\n    min=2, max=5, increment=1, threaded=True,\n    encoding=\"UTF-8\", nencoding=\"UTF-8\"\n)\n\nengine = create_engine(\"oracle+cx_oracle://\", creator=pool.acquire, poolclass=NullPool)\n```", "```py\nwith engine.connect() as conn:\n    print(conn.scalar(\"select 1 FROM dual\"))\n```", "```py\nimport cx_Oracle\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.pool import NullPool\n\npool = cx_Oracle.SessionPool(\n    user=\"scott\", password=\"tiger\", dsn=\"orclpdb\",\n    min=2, max=5, increment=1, threaded=True,\n    encoding=\"UTF-8\", nencoding=\"UTF-8\"\n)\n\ndef creator():\n    return pool.acquire(cclass=\"MYCLASS\", purity=cx_Oracle.ATTR_PURITY_SELF)\n\nengine = create_engine(\"oracle+cx_oracle://\", creator=creator, poolclass=NullPool)\n```", "```py\nwith engine.connect() as conn:\n    print(conn.scalar(\"select 1 FROM dual\"))\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@orclpdb/?encoding=UTF-8&nencoding=UTF-8\")\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@orclpdb/?encoding=UTF-8&nencoding=UTF-8\")\n```", "```py\nfrom sqlalchemy import create_engine, event\n\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@host/xe\")\n\n@event.listens_for(engine, \"do_setinputsizes\")\ndef _log_setinputsizes(inputsizes, cursor, statement, parameters, context):\n    for bindparam, dbapitype in inputsizes.items():\n            log.info(\n                \"Bound parameter name: %s SQLAlchemy type: %r \"\n                \"DBAPI object: %s\",\n                bindparam.key, bindparam.type, dbapitype)\n```", "```py\nfrom sqlalchemy import create_engine, event\nfrom cx_Oracle import CLOB\n\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@host/xe\")\n\n@event.listens_for(engine, \"do_setinputsizes\")\ndef _remove_clob(inputsizes, cursor, statement, parameters, context):\n    for bindparam, dbapitype in list(inputsizes.items()):\n        if dbapitype is CLOB:\n            del inputsizes[bindparam]\n```", "```py\nfrom sqlalchemy import create_engine, event\n\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@host/xe\")\n\n@event.listens_for(engine, \"do_setinputsizes\")\ndef _log_setinputsizes(inputsizes, cursor, statement, parameters, context):\n    for bindparam, dbapitype in inputsizes.items():\n            log.info(\n                \"Bound parameter name: %s SQLAlchemy type: %r \"\n                \"DBAPI object: %s\",\n                bindparam.key, bindparam.type, dbapitype)\n```", "```py\nfrom sqlalchemy import create_engine, event\nfrom cx_Oracle import CLOB\n\nengine = create_engine(\"oracle+cx_oracle://scott:tiger@host/xe\")\n\n@event.listens_for(engine, \"do_setinputsizes\")\ndef _remove_clob(inputsizes, cursor, statement, parameters, context):\n    for bindparam, dbapitype in list(inputsizes.items()):\n        if dbapitype is CLOB:\n            del inputsizes[bindparam]\n```", "```py\nengine = create_engine(\"oracle+cx_oracle://dsn\", coerce_to_decimal=False)\n```", "```py\noracle+oracledb://user:pass@hostname:port[/dbname][?service_name=<service>[&key=value&key=value...]]\n```", "```py\n    from sqlalchemy import create_engine\n    sync_engine = create_engine(\"oracle+oracledb://scott:tiger@localhost/?service_name=XEPDB1\")\n    ```", "```py\n    from sqlalchemy.ext.asyncio import create_async_engine\n    asyncio_engine = create_async_engine(\"oracle+oracledb://scott:tiger@localhost/?service_name=XEPDB1\")\n    ```", "```py\nfrom sqlalchemy.ext.asyncio import create_async_engine\nasyncio_engine = create_async_engine(\"oracle+oracledb_async://scott:tiger@localhost/?service_name=XEPDB1\")\n```", "```py\nengine = sa.create_engine(\"oracle+oracledb://...\", thick_mode={\n    \"lib_dir\": \"/path/to/oracle/client/lib\", \"driver_name\": \"my-app\"\n})\n```", "```py\noracle+oracledb://user:pass@hostname:port[/dbname][?service_name=<service>[&key=value&key=value...]]\n```", "```py\nengine = sa.create_engine(\"oracle+oracledb://...\", thick_mode={\n    \"lib_dir\": \"/path/to/oracle/client/lib\", \"driver_name\": \"my-app\"\n})\n```"]