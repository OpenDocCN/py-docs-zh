["```py\nfrom typing import List\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(lazy=\"selectin\")\n\nclass Child(Base):\n    __tablename__ = \"child\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent.id\"))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\n\n# set children to load lazily\nstmt = select(Parent).options(lazyload(Parent.children))\n\nfrom sqlalchemy.orm import joinedload\n\n# set children to load eagerly with a join\nstmt = select(Parent).options(joinedload(Parent.children))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import joinedload\n\nstmt = select(Parent).options(\n    joinedload(Parent.children).subqueryload(Child.subelements)\n)\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\n\nstmt = select(Parent).options(lazyload(Parent.children).subqueryload(Child.subelements))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\n\nstmt = select(A).options(lazyload(A.bs.and_(B.id > 5)))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\n\nstmt = (\n    select(A)\n    .options(lazyload(A.bs.and_(B.id > 5)))\n    .execution_options(populate_existing=True)\n)\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import defaultload\n\nstmt = select(A).options(defaultload(A.atob).joinedload(B.btoc))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import defaultload\nfrom sqlalchemy.orm import joinedload\n\nstmt = select(A).options(\n    defaultload(A.atob).options(joinedload(B.btoc), joinedload(B.btod))\n)\n```", "```py\nstmt = select(Parent).options(lazyload(Parent.children).subqueryload(Child.subelements))\n```", "```py\n# change the options on Parent objects that were already loaded\nstmt = (\n    select(Parent)\n    .execution_options(populate_existing=True)\n    .options(lazyload(Parent.children).lazyload(Child.subelements))\n    .all()\n)\n```", "```py\n>>> spongebob.addresses\nSELECT\n  addresses.id  AS  addresses_id,\n  addresses.email_address  AS  addresses_email_address,\n  addresses.user_id  AS  addresses_user_id\nFROM  addresses\nWHERE  ?  =  addresses.user_id\n[5]\n[<Address(u'spongebob@google.com')>, <Address(u'j25@yahoo.com')>]\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\n\n# force lazy loading for an attribute that is set to\n# load some other way normally\nstmt = select(User).options(lazyload(User.addresses))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import raiseload\n\nstmt = select(User).options(raiseload(User.addresses))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import joinedload\nfrom sqlalchemy.orm import raiseload\n\nstmt = select(Order).options(joinedload(Order.items), raiseload(\"*\"))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import joinedload\nfrom sqlalchemy.orm import Load\n\nstmt = select(Order).options(joinedload(Order.items), Load(Order).raiseload(\"*\"))\n```", "```py\nstmt = select(Order).options(joinedload(Order.items).raiseload(\"*\"))\n```", "```py\nclass Address(Base):\n    # ...\n\n    user: Mapped[User] = relationship(lazy=\"joined\")\n```", "```py\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import joinedload\n>>> stmt = select(User).options(joinedload(User.addresses)).filter_by(name=\"spongebob\")\n>>> spongebob = session.scalars(stmt).unique().all()\nSELECT\n  addresses_1.id  AS  addresses_1_id,\n  addresses_1.email_address  AS  addresses_1_email_address,\n  addresses_1.user_id  AS  addresses_1_user_id,\n  users.id  AS  users_id,  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nLEFT  OUTER  JOIN  addresses  AS  addresses_1\n  ON  users.id  =  addresses_1.user_id\nWHERE  users.name  =  ?\n['spongebob'] \n```", "```py\nclass Address(Base):\n    # ...\n\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"users.id\"))\n    user: Mapped[User] = relationship(lazy=\"joined\", innerjoin=True)\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import joinedload\n\nstmt = select(Address).options(joinedload(Address.user, innerjoin=True))\n```", "```py\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import joinedload\n>>> stmt = select(User).options(\n...     joinedload(User.addresses).joinedload(Address.widgets, innerjoin=True)\n... )\n>>> results = session.scalars(stmt).unique().all()\nSELECT\n  widgets_1.id  AS  widgets_1_id,\n  widgets_1.name  AS  widgets_1_name,\n  addresses_1.id  AS  addresses_1_id,\n  addresses_1.email_address  AS  addresses_1_email_address,\n  addresses_1.user_id  AS  addresses_1_user_id,\n  users.id  AS  users_id,  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nLEFT  OUTER  JOIN  (\n  addresses  AS  addresses_1  JOIN  widgets  AS  widgets_1  ON\n  addresses_1.widget_id  =  widgets_1.id\n)  ON  users.id  =  addresses_1.user_id \n```", "```py\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import joinedload\n>>> stmt = (\n...     select(User)\n...     .options(joinedload(User.addresses))\n...     .filter(User.name == \"spongebob\")\n...     .order_by(Address.email_address)\n... )\n>>> result = session.scalars(stmt).unique().all()\nSELECT\n  addresses_1.id  AS  addresses_1_id,\n  addresses_1.email_address  AS  addresses_1_email_address,\n  addresses_1.user_id  AS  addresses_1_user_id,\n  users.id  AS  users_id,\n  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nLEFT  OUTER  JOIN  addresses  AS  addresses_1\n  ON  users.id  =  addresses_1.user_id\nWHERE  users.name  =  ?\nORDER  BY  addresses.email_address  <-- this part is wrong !\n['spongebob'] \n```", "```py\n>>> from sqlalchemy import select\n>>> stmt = (\n...     select(User)\n...     .join(User.addresses)\n...     .filter(User.name == \"spongebob\")\n...     .order_by(Address.email_address)\n... )\n>>> result = session.scalars(stmt).unique().all()\nSELECT\n  users.id  AS  users_id,\n  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nJOIN  addresses  ON  users.id  =  addresses.user_id\nWHERE  users.name  =  ?\nORDER  BY  addresses.email_address\n['spongebob'] \n```", "```py\n>>> stmt = (\n...     select(User)\n...     .join(User.addresses)\n...     .options(joinedload(User.addresses))\n...     .filter(User.name == \"spongebob\")\n...     .order_by(Address.email_address)\n... )\n>>> result = session.scalars(stmt).unique().all()\nSELECT\n  addresses_1.id  AS  addresses_1_id,\n  addresses_1.email_address  AS  addresses_1_email_address,\n  addresses_1.user_id  AS  addresses_1_user_id,\n  users.id  AS  users_id,  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users  JOIN  addresses\n  ON  users.id  =  addresses.user_id\nLEFT  OUTER  JOIN  addresses  AS  addresses_1\n  ON  users.id  =  addresses_1.user_id\nWHERE  users.name  =  ?\nORDER  BY  addresses.email_address\n['spongebob'] \n```", "```py\n>>> stmt = (\n...     select(User)\n...     .join(User.addresses)\n...     .options(joinedload(User.addresses))\n...     .filter(User.name == \"spongebob\")\n...     .filter(Address.email_address == \"someaddress@foo.com\")\n... )\n>>> result = session.scalars(stmt).unique().all()\nSELECT\n  addresses_1.id  AS  addresses_1_id,\n  addresses_1.email_address  AS  addresses_1_email_address,\n  addresses_1.user_id  AS  addresses_1_user_id,\n  users.id  AS  users_id,  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users  JOIN  addresses\n  ON  users.id  =  addresses.user_id\nLEFT  OUTER  JOIN  addresses  AS  addresses_1\n  ON  users.id  =  addresses_1.user_id\nWHERE  users.name  =  ?  AND  addresses.email_address  =  ?\n['spongebob',  'someaddress@foo.com'] \n```", "```py\n>>> stmt = (\n...     select(User)\n...     .join(User.addresses)\n...     .options(selectinload(User.addresses))\n...     .filter(User.name == \"spongebob\")\n...     .filter(Address.email_address == \"someaddress@foo.com\")\n... )\n>>> result = session.scalars(stmt).all()\nSELECT\n  users.id  AS  users_id,\n  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nJOIN  addresses  ON  users.id  =  addresses.user_id\nWHERE\n  users.name  =  ?\n  AND  addresses.email_address  =  ?\n['spongebob',  'someaddress@foo.com']\n#  ...  selectinload()  emits  a  SELECT  in  order\n#  to  load  all  address  records  ... \n```", "```py\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = (\n...     select(User)\n...     .options(selectinload(User.addresses))\n...     .filter(or_(User.name == \"spongebob\", User.name == \"ed\"))\n... )\n>>> result = session.scalars(stmt).all()\nSELECT\n  users.id  AS  users_id,\n  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nWHERE  users.name  =  ?  OR  users.name  =  ?\n('spongebob',  'ed')\nSELECT\n  addresses.id  AS  addresses_id,\n  addresses.email_address  AS  addresses_email_address,\n  addresses.user_id  AS  addresses_user_id\nFROM  addresses\nWHERE  addresses.user_id  IN  (?,  ?)\n(5,  7) \n```", "```py\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(Address).options(selectinload(Address.user))\n>>> result = session.scalars(stmt).all()\nSELECT\n  addresses.id  AS  addresses_id,\n  addresses.email_address  AS  addresses_email_address,\n  addresses.user_id  AS  addresses_user_id\n  FROM  addresses\nSELECT\n  users.id  AS  users_id,\n  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nWHERE  users.id  IN  (?,  ?)\n(1,  2) \n```", "```py\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import subqueryload\n>>> stmt = select(User).options(subqueryload(User.addresses)).filter_by(name=\"spongebob\")\n>>> results = session.scalars(stmt).all()\nSELECT\n  users.id  AS  users_id,\n  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nWHERE  users.name  =  ?\n('spongebob',)\nSELECT\n  addresses.id  AS  addresses_id,\n  addresses.email_address  AS  addresses_email_address,\n  addresses.user_id  AS  addresses_user_id,\n  anon_1.users_id  AS  anon_1_users_id\nFROM  (\n  SELECT  users.id  AS  users_id\n  FROM  users\n  WHERE  users.name  =  ?)  AS  anon_1\nJOIN  addresses  ON  anon_1.users_id  =  addresses.user_id\nORDER  BY  anon_1.users_id,  addresses.id\n('spongebob',) \n```", "```py\n    # incorrect, no ORDER BY\n    stmt = select(User).options(subqueryload(User.addresses).limit(1))\n\n    # incorrect if User.name is not unique\n    stmt = select(User).options(subqueryload(User.addresses)).order_by(User.name).limit(1)\n\n    # correct\n    stmt = (\n        select(User)\n        .options(subqueryload(User.addresses))\n        .order_by(User.name, User.id)\n        .limit(1)\n    )\n    ```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\n\nstmt = select(MyClass).options(lazyload(\"*\"))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\nfrom sqlalchemy.orm import joinedload\n\nstmt = select(MyClass).options(lazyload(\"*\"), joinedload(MyClass.widget))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import Load\n\nstmt = select(User, Address).options(Load(Address).lazyload(\"*\"))\n```", "```py\nfrom sqlalchemy.orm import contains_eager\n\nstmt = select(User).join(User.addresses).options(contains_eager(User.addresses))\n```", "```py\n# use an alias of the Address entity\nadalias = aliased(Address)\n\n# construct a statement which expects the \"addresses\" results\n\nstmt = (\n    select(User)\n    .outerjoin(User.addresses.of_type(adalias))\n    .options(contains_eager(User.addresses.of_type(adalias)))\n)\n\n# get results normally\nr = session.scalars(stmt).unique().all()\nSELECT\n  users.user_id  AS  users_user_id,\n  users.user_name  AS  users_user_name,\n  adalias.address_id  AS  adalias_address_id,\n  adalias.user_id  AS  adalias_user_id,\n  adalias.email_address  AS  adalias_email_address,\n  (...other  columns...)\nFROM  users\nLEFT  OUTER  JOIN  email_addresses  AS  email_addresses_1\nON  users.user_id  =  email_addresses_1.user_id \n```", "```py\nstmt = select(User).options(contains_eager(User.orders).contains_eager(Order.items))\n```", "```py\nstmt = (\n    select(User)\n    .join(User.addresses)\n    .filter(Address.email_address.like(\"%@aol.com\"))\n    .options(contains_eager(User.addresses))\n    .execution_options(populate_existing=True)\n)\n```", "```py\nfunction sqlalchemy.orm.contains_eager(*keys: Literal['*'] | QueryableAttribute[Any], **kw: Any) \u2192 _AbstractLoad\n```", "```py\nsess.query(Order).join(Order.user).options(\n    contains_eager(Order.user)\n)\n```", "```py\nsess.query(User).join(User.addresses).filter(\n    Address.email_address.like(\"%@aol.com\")\n).options(contains_eager(User.addresses)).populate_existing()\n```", "```py\nfunction sqlalchemy.orm.defaultload(*keys: Literal['*'] | QueryableAttribute[Any]) \u2192 _AbstractLoad\n```", "```py\nsession.query(MyClass).options(\n    defaultload(MyClass.someattribute).joinedload(\n        MyOtherClass.someotherattribute\n    )\n)\n```", "```py\nsession.scalars(\n    select(MyClass).options(\n        defaultload(MyClass.someattribute)\n        .defer(\"some_column\")\n        .undefer(\"some_other_column\")\n    )\n)\n```", "```py\nfunction sqlalchemy.orm.immediateload(*keys: Literal['*'] | QueryableAttribute[Any], recursion_depth: int | None = None) \u2192 _AbstractLoad\n```", "```py\nfunction sqlalchemy.orm.joinedload(*keys: Literal['*'] | QueryableAttribute[Any], **kw: Any) \u2192 _AbstractLoad\n```", "```py\n# joined-load the \"orders\" collection on \"User\"\nselect(User).options(joinedload(User.orders))\n\n# joined-load Order.items and then Item.keywords\nselect(Order).options(\n    joinedload(Order.items).joinedload(Item.keywords)\n)\n\n# lazily load Order.items, but when Items are loaded,\n# joined-load the keywords collection\nselect(Order).options(\n    lazyload(Order.items).joinedload(Item.keywords)\n)\n```", "```py\nselect(Order).options(joinedload(Order.user, innerjoin=True))\n```", "```py\nselect(A).options(\n    joinedload(A.bs, innerjoin=False).joinedload(\n        B.cs, innerjoin=True\n    )\n)\n```", "```py\nselect(A).options(\n    joinedload(A.bs).joinedload(B.cs, innerjoin=\"unnested\")\n)\n```", "```py\nfunction sqlalchemy.orm.lazyload(*keys: Literal['*'] | QueryableAttribute[Any]) \u2192 _AbstractLoad\n```", "```py\nclass sqlalchemy.orm.Load\n```", "```py\nmethod contains_eager(attr: _AttrType, alias: _FromClauseArgument | None = None, _is_chain: bool = False) \u2192 Self\n```", "```py\nmethod defaultload(attr: Literal['*'] | QueryableAttribute[Any]) \u2192 Self\n```", "```py\nmethod defer(key: Literal['*'] | QueryableAttribute[Any], raiseload: bool = False) \u2192 Self\n```", "```py\nmethod get_children(*, omit_attrs: Tuple[str, ...] = (), **kw: Any) \u2192 Iterable[HasTraverseInternals]\n```", "```py\nmethod immediateload(attr: Literal['*'] | QueryableAttribute[Any], recursion_depth: int | None = None) \u2192 Self\n```", "```py\nattribute inherit_cache: bool | None = None\n```", "```py\nmethod joinedload(attr: Literal['*'] | QueryableAttribute[Any], innerjoin: bool | None = None) \u2192 Self\n```", "```py\nmethod lazyload(attr: Literal['*'] | QueryableAttribute[Any]) \u2192 Self\n```", "```py\nmethod load_only(*attrs: Literal['*'] | QueryableAttribute[Any], raiseload: bool = False) \u2192 Self\n```", "```py\nmethod noload(attr: Literal['*'] | QueryableAttribute[Any]) \u2192 Self\n```", "```py\nmethod options(*opts: _AbstractLoad) \u2192 Self\n```", "```py\nquery = session.query(Author)\nquery = query.options(\n            joinedload(Author.book).options(\n                load_only(Book.summary, Book.excerpt),\n                joinedload(Book.citations).options(\n                    joinedload(Citation.author)\n                )\n            )\n        )\n```", "```py\nmethod process_compile_state(compile_state: ORMCompileState) \u2192 None\n```", "```py\nmethod process_compile_state_replaced_entities(compile_state: ORMCompileState, mapper_entities: Sequence[_MapperEntity]) \u2192 None\n```", "```py\nattribute propagate_to_loaders: bool\n```", "```py\nmethod raiseload(attr: Literal['*'] | QueryableAttribute[Any], sql_only: bool = False) \u2192 Self\n```", "```py\nmethod selectin_polymorphic(classes: Iterable[Type[Any]]) \u2192 Self\n```", "```py\nmethod selectinload(attr: Literal['*'] | QueryableAttribute[Any], recursion_depth: int | None = None) \u2192 Self\n```", "```py\nmethod subqueryload(attr: Literal['*'] | QueryableAttribute[Any]) \u2192 Self\n```", "```py\nmethod undefer(key: Literal['*'] | QueryableAttribute[Any]) \u2192 Self\n```", "```py\nmethod undefer_group(name: str) \u2192 Self\n```", "```py\nmethod with_expression(key: _AttrType, expression: _ColumnExpressionArgument[Any]) \u2192 Self\n```", "```py\nfunction sqlalchemy.orm.noload(*keys: Literal['*'] | QueryableAttribute[Any]) \u2192 _AbstractLoad\n```", "```py\nfunction sqlalchemy.orm.raiseload(*keys: Literal['*'] | QueryableAttribute[Any], **kw: Any) \u2192 _AbstractLoad\n```", "```py\nfunction sqlalchemy.orm.selectinload(*keys: Literal['*'] | QueryableAttribute[Any], recursion_depth: int | None = None) \u2192 _AbstractLoad\n```", "```py\n# selectin-load the \"orders\" collection on \"User\"\nselect(User).options(selectinload(User.orders))\n\n# selectin-load Order.items and then Item.keywords\nselect(Order).options(\n    selectinload(Order.items).selectinload(Item.keywords)\n)\n\n# lazily load Order.items, but when Items are loaded,\n# selectin-load the keywords collection\nselect(Order).options(\n    lazyload(Order.items).selectinload(Item.keywords)\n)\n```", "```py\nfunction sqlalchemy.orm.subqueryload(*keys: Literal['*'] | QueryableAttribute[Any]) \u2192 _AbstractLoad\n```", "```py\n# subquery-load the \"orders\" collection on \"User\"\nselect(User).options(subqueryload(User.orders))\n\n# subquery-load Order.items and then Item.keywords\nselect(Order).options(\n    subqueryload(Order.items).subqueryload(Item.keywords)\n)\n\n# lazily load Order.items, but when Items are loaded,\n# subquery-load the keywords collection\nselect(Order).options(\n    lazyload(Order.items).subqueryload(Item.keywords)\n)\n```", "```py\nfrom typing import List\n\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import DeclarativeBase\nfrom sqlalchemy.orm import Mapped\nfrom sqlalchemy.orm import mapped_column\nfrom sqlalchemy.orm import relationship\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Parent(Base):\n    __tablename__ = \"parent\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    children: Mapped[List[\"Child\"]] = relationship(lazy=\"selectin\")\n\nclass Child(Base):\n    __tablename__ = \"child\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    parent_id: Mapped[int] = mapped_column(ForeignKey(\"parent.id\"))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\n\n# set children to load lazily\nstmt = select(Parent).options(lazyload(Parent.children))\n\nfrom sqlalchemy.orm import joinedload\n\n# set children to load eagerly with a join\nstmt = select(Parent).options(joinedload(Parent.children))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import joinedload\n\nstmt = select(Parent).options(\n    joinedload(Parent.children).subqueryload(Child.subelements)\n)\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\n\nstmt = select(Parent).options(lazyload(Parent.children).subqueryload(Child.subelements))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\n\nstmt = select(A).options(lazyload(A.bs.and_(B.id > 5)))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\n\nstmt = (\n    select(A)\n    .options(lazyload(A.bs.and_(B.id > 5)))\n    .execution_options(populate_existing=True)\n)\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import defaultload\n\nstmt = select(A).options(defaultload(A.atob).joinedload(B.btoc))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import defaultload\nfrom sqlalchemy.orm import joinedload\n\nstmt = select(A).options(\n    defaultload(A.atob).options(joinedload(B.btoc), joinedload(B.btod))\n)\n```", "```py\nstmt = select(Parent).options(lazyload(Parent.children).subqueryload(Child.subelements))\n```", "```py\n# change the options on Parent objects that were already loaded\nstmt = (\n    select(Parent)\n    .execution_options(populate_existing=True)\n    .options(lazyload(Parent.children).lazyload(Child.subelements))\n    .all()\n)\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\n\nstmt = select(A).options(lazyload(A.bs.and_(B.id > 5)))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\n\nstmt = (\n    select(A)\n    .options(lazyload(A.bs.and_(B.id > 5)))\n    .execution_options(populate_existing=True)\n)\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import defaultload\n\nstmt = select(A).options(defaultload(A.atob).joinedload(B.btoc))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import defaultload\nfrom sqlalchemy.orm import joinedload\n\nstmt = select(A).options(\n    defaultload(A.atob).options(joinedload(B.btoc), joinedload(B.btod))\n)\n```", "```py\nstmt = select(Parent).options(lazyload(Parent.children).subqueryload(Child.subelements))\n```", "```py\n# change the options on Parent objects that were already loaded\nstmt = (\n    select(Parent)\n    .execution_options(populate_existing=True)\n    .options(lazyload(Parent.children).lazyload(Child.subelements))\n    .all()\n)\n```", "```py\n>>> spongebob.addresses\nSELECT\n  addresses.id  AS  addresses_id,\n  addresses.email_address  AS  addresses_email_address,\n  addresses.user_id  AS  addresses_user_id\nFROM  addresses\nWHERE  ?  =  addresses.user_id\n[5]\n[<Address(u'spongebob@google.com')>, <Address(u'j25@yahoo.com')>]\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\n\n# force lazy loading for an attribute that is set to\n# load some other way normally\nstmt = select(User).options(lazyload(User.addresses))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import raiseload\n\nstmt = select(User).options(raiseload(User.addresses))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import joinedload\nfrom sqlalchemy.orm import raiseload\n\nstmt = select(Order).options(joinedload(Order.items), raiseload(\"*\"))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import joinedload\nfrom sqlalchemy.orm import Load\n\nstmt = select(Order).options(joinedload(Order.items), Load(Order).raiseload(\"*\"))\n```", "```py\nstmt = select(Order).options(joinedload(Order.items).raiseload(\"*\"))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import raiseload\n\nstmt = select(User).options(raiseload(User.addresses))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import joinedload\nfrom sqlalchemy.orm import raiseload\n\nstmt = select(Order).options(joinedload(Order.items), raiseload(\"*\"))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import joinedload\nfrom sqlalchemy.orm import Load\n\nstmt = select(Order).options(joinedload(Order.items), Load(Order).raiseload(\"*\"))\n```", "```py\nstmt = select(Order).options(joinedload(Order.items).raiseload(\"*\"))\n```", "```py\nclass Address(Base):\n    # ...\n\n    user: Mapped[User] = relationship(lazy=\"joined\")\n```", "```py\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import joinedload\n>>> stmt = select(User).options(joinedload(User.addresses)).filter_by(name=\"spongebob\")\n>>> spongebob = session.scalars(stmt).unique().all()\nSELECT\n  addresses_1.id  AS  addresses_1_id,\n  addresses_1.email_address  AS  addresses_1_email_address,\n  addresses_1.user_id  AS  addresses_1_user_id,\n  users.id  AS  users_id,  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nLEFT  OUTER  JOIN  addresses  AS  addresses_1\n  ON  users.id  =  addresses_1.user_id\nWHERE  users.name  =  ?\n['spongebob'] \n```", "```py\nclass Address(Base):\n    # ...\n\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"users.id\"))\n    user: Mapped[User] = relationship(lazy=\"joined\", innerjoin=True)\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import joinedload\n\nstmt = select(Address).options(joinedload(Address.user, innerjoin=True))\n```", "```py\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import joinedload\n>>> stmt = select(User).options(\n...     joinedload(User.addresses).joinedload(Address.widgets, innerjoin=True)\n... )\n>>> results = session.scalars(stmt).unique().all()\nSELECT\n  widgets_1.id  AS  widgets_1_id,\n  widgets_1.name  AS  widgets_1_name,\n  addresses_1.id  AS  addresses_1_id,\n  addresses_1.email_address  AS  addresses_1_email_address,\n  addresses_1.user_id  AS  addresses_1_user_id,\n  users.id  AS  users_id,  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nLEFT  OUTER  JOIN  (\n  addresses  AS  addresses_1  JOIN  widgets  AS  widgets_1  ON\n  addresses_1.widget_id  =  widgets_1.id\n)  ON  users.id  =  addresses_1.user_id \n```", "```py\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import joinedload\n>>> stmt = (\n...     select(User)\n...     .options(joinedload(User.addresses))\n...     .filter(User.name == \"spongebob\")\n...     .order_by(Address.email_address)\n... )\n>>> result = session.scalars(stmt).unique().all()\nSELECT\n  addresses_1.id  AS  addresses_1_id,\n  addresses_1.email_address  AS  addresses_1_email_address,\n  addresses_1.user_id  AS  addresses_1_user_id,\n  users.id  AS  users_id,\n  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nLEFT  OUTER  JOIN  addresses  AS  addresses_1\n  ON  users.id  =  addresses_1.user_id\nWHERE  users.name  =  ?\nORDER  BY  addresses.email_address  <-- this part is wrong !\n['spongebob'] \n```", "```py\n>>> from sqlalchemy import select\n>>> stmt = (\n...     select(User)\n...     .join(User.addresses)\n...     .filter(User.name == \"spongebob\")\n...     .order_by(Address.email_address)\n... )\n>>> result = session.scalars(stmt).unique().all()\nSELECT\n  users.id  AS  users_id,\n  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nJOIN  addresses  ON  users.id  =  addresses.user_id\nWHERE  users.name  =  ?\nORDER  BY  addresses.email_address\n['spongebob'] \n```", "```py\n>>> stmt = (\n...     select(User)\n...     .join(User.addresses)\n...     .options(joinedload(User.addresses))\n...     .filter(User.name == \"spongebob\")\n...     .order_by(Address.email_address)\n... )\n>>> result = session.scalars(stmt).unique().all()\nSELECT\n  addresses_1.id  AS  addresses_1_id,\n  addresses_1.email_address  AS  addresses_1_email_address,\n  addresses_1.user_id  AS  addresses_1_user_id,\n  users.id  AS  users_id,  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users  JOIN  addresses\n  ON  users.id  =  addresses.user_id\nLEFT  OUTER  JOIN  addresses  AS  addresses_1\n  ON  users.id  =  addresses_1.user_id\nWHERE  users.name  =  ?\nORDER  BY  addresses.email_address\n['spongebob'] \n```", "```py\n>>> stmt = (\n...     select(User)\n...     .join(User.addresses)\n...     .options(joinedload(User.addresses))\n...     .filter(User.name == \"spongebob\")\n...     .filter(Address.email_address == \"someaddress@foo.com\")\n... )\n>>> result = session.scalars(stmt).unique().all()\nSELECT\n  addresses_1.id  AS  addresses_1_id,\n  addresses_1.email_address  AS  addresses_1_email_address,\n  addresses_1.user_id  AS  addresses_1_user_id,\n  users.id  AS  users_id,  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users  JOIN  addresses\n  ON  users.id  =  addresses.user_id\nLEFT  OUTER  JOIN  addresses  AS  addresses_1\n  ON  users.id  =  addresses_1.user_id\nWHERE  users.name  =  ?  AND  addresses.email_address  =  ?\n['spongebob',  'someaddress@foo.com'] \n```", "```py\n>>> stmt = (\n...     select(User)\n...     .join(User.addresses)\n...     .options(selectinload(User.addresses))\n...     .filter(User.name == \"spongebob\")\n...     .filter(Address.email_address == \"someaddress@foo.com\")\n... )\n>>> result = session.scalars(stmt).all()\nSELECT\n  users.id  AS  users_id,\n  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nJOIN  addresses  ON  users.id  =  addresses.user_id\nWHERE\n  users.name  =  ?\n  AND  addresses.email_address  =  ?\n['spongebob',  'someaddress@foo.com']\n#  ...  selectinload()  emits  a  SELECT  in  order\n#  to  load  all  address  records  ... \n```", "```py\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import joinedload\n>>> stmt = (\n...     select(User)\n...     .options(joinedload(User.addresses))\n...     .filter(User.name == \"spongebob\")\n...     .order_by(Address.email_address)\n... )\n>>> result = session.scalars(stmt).unique().all()\nSELECT\n  addresses_1.id  AS  addresses_1_id,\n  addresses_1.email_address  AS  addresses_1_email_address,\n  addresses_1.user_id  AS  addresses_1_user_id,\n  users.id  AS  users_id,\n  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nLEFT  OUTER  JOIN  addresses  AS  addresses_1\n  ON  users.id  =  addresses_1.user_id\nWHERE  users.name  =  ?\nORDER  BY  addresses.email_address  <-- this part is wrong !\n['spongebob'] \n```", "```py\n>>> from sqlalchemy import select\n>>> stmt = (\n...     select(User)\n...     .join(User.addresses)\n...     .filter(User.name == \"spongebob\")\n...     .order_by(Address.email_address)\n... )\n>>> result = session.scalars(stmt).unique().all()\nSELECT\n  users.id  AS  users_id,\n  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nJOIN  addresses  ON  users.id  =  addresses.user_id\nWHERE  users.name  =  ?\nORDER  BY  addresses.email_address\n['spongebob'] \n```", "```py\n>>> stmt = (\n...     select(User)\n...     .join(User.addresses)\n...     .options(joinedload(User.addresses))\n...     .filter(User.name == \"spongebob\")\n...     .order_by(Address.email_address)\n... )\n>>> result = session.scalars(stmt).unique().all()\nSELECT\n  addresses_1.id  AS  addresses_1_id,\n  addresses_1.email_address  AS  addresses_1_email_address,\n  addresses_1.user_id  AS  addresses_1_user_id,\n  users.id  AS  users_id,  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users  JOIN  addresses\n  ON  users.id  =  addresses.user_id\nLEFT  OUTER  JOIN  addresses  AS  addresses_1\n  ON  users.id  =  addresses_1.user_id\nWHERE  users.name  =  ?\nORDER  BY  addresses.email_address\n['spongebob'] \n```", "```py\n>>> stmt = (\n...     select(User)\n...     .join(User.addresses)\n...     .options(joinedload(User.addresses))\n...     .filter(User.name == \"spongebob\")\n...     .filter(Address.email_address == \"someaddress@foo.com\")\n... )\n>>> result = session.scalars(stmt).unique().all()\nSELECT\n  addresses_1.id  AS  addresses_1_id,\n  addresses_1.email_address  AS  addresses_1_email_address,\n  addresses_1.user_id  AS  addresses_1_user_id,\n  users.id  AS  users_id,  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users  JOIN  addresses\n  ON  users.id  =  addresses.user_id\nLEFT  OUTER  JOIN  addresses  AS  addresses_1\n  ON  users.id  =  addresses_1.user_id\nWHERE  users.name  =  ?  AND  addresses.email_address  =  ?\n['spongebob',  'someaddress@foo.com'] \n```", "```py\n>>> stmt = (\n...     select(User)\n...     .join(User.addresses)\n...     .options(selectinload(User.addresses))\n...     .filter(User.name == \"spongebob\")\n...     .filter(Address.email_address == \"someaddress@foo.com\")\n... )\n>>> result = session.scalars(stmt).all()\nSELECT\n  users.id  AS  users_id,\n  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nJOIN  addresses  ON  users.id  =  addresses.user_id\nWHERE\n  users.name  =  ?\n  AND  addresses.email_address  =  ?\n['spongebob',  'someaddress@foo.com']\n#  ...  selectinload()  emits  a  SELECT  in  order\n#  to  load  all  address  records  ... \n```", "```py\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = (\n...     select(User)\n...     .options(selectinload(User.addresses))\n...     .filter(or_(User.name == \"spongebob\", User.name == \"ed\"))\n... )\n>>> result = session.scalars(stmt).all()\nSELECT\n  users.id  AS  users_id,\n  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nWHERE  users.name  =  ?  OR  users.name  =  ?\n('spongebob',  'ed')\nSELECT\n  addresses.id  AS  addresses_id,\n  addresses.email_address  AS  addresses_email_address,\n  addresses.user_id  AS  addresses_user_id\nFROM  addresses\nWHERE  addresses.user_id  IN  (?,  ?)\n(5,  7) \n```", "```py\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import selectinload\n>>> stmt = select(Address).options(selectinload(Address.user))\n>>> result = session.scalars(stmt).all()\nSELECT\n  addresses.id  AS  addresses_id,\n  addresses.email_address  AS  addresses_email_address,\n  addresses.user_id  AS  addresses_user_id\n  FROM  addresses\nSELECT\n  users.id  AS  users_id,\n  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nWHERE  users.id  IN  (?,  ?)\n(1,  2) \n```", "```py\n>>> from sqlalchemy import select\n>>> from sqlalchemy.orm import subqueryload\n>>> stmt = select(User).options(subqueryload(User.addresses)).filter_by(name=\"spongebob\")\n>>> results = session.scalars(stmt).all()\nSELECT\n  users.id  AS  users_id,\n  users.name  AS  users_name,\n  users.fullname  AS  users_fullname,\n  users.nickname  AS  users_nickname\nFROM  users\nWHERE  users.name  =  ?\n('spongebob',)\nSELECT\n  addresses.id  AS  addresses_id,\n  addresses.email_address  AS  addresses_email_address,\n  addresses.user_id  AS  addresses_user_id,\n  anon_1.users_id  AS  anon_1_users_id\nFROM  (\n  SELECT  users.id  AS  users_id\n  FROM  users\n  WHERE  users.name  =  ?)  AS  anon_1\nJOIN  addresses  ON  anon_1.users_id  =  addresses.user_id\nORDER  BY  anon_1.users_id,  addresses.id\n('spongebob',) \n```", "```py\n    # incorrect, no ORDER BY\n    stmt = select(User).options(subqueryload(User.addresses).limit(1))\n\n    # incorrect if User.name is not unique\n    stmt = select(User).options(subqueryload(User.addresses)).order_by(User.name).limit(1)\n\n    # correct\n    stmt = (\n        select(User)\n        .options(subqueryload(User.addresses))\n        .order_by(User.name, User.id)\n        .limit(1)\n    )\n    ```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\n\nstmt = select(MyClass).options(lazyload(\"*\"))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import lazyload\nfrom sqlalchemy.orm import joinedload\n\nstmt = select(MyClass).options(lazyload(\"*\"), joinedload(MyClass.widget))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import Load\n\nstmt = select(User, Address).options(Load(Address).lazyload(\"*\"))\n```", "```py\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import Load\n\nstmt = select(User, Address).options(Load(Address).lazyload(\"*\"))\n```", "```py\nfrom sqlalchemy.orm import contains_eager\n\nstmt = select(User).join(User.addresses).options(contains_eager(User.addresses))\n```", "```py\n# use an alias of the Address entity\nadalias = aliased(Address)\n\n# construct a statement which expects the \"addresses\" results\n\nstmt = (\n    select(User)\n    .outerjoin(User.addresses.of_type(adalias))\n    .options(contains_eager(User.addresses.of_type(adalias)))\n)\n\n# get results normally\nr = session.scalars(stmt).unique().all()\nSELECT\n  users.user_id  AS  users_user_id,\n  users.user_name  AS  users_user_name,\n  adalias.address_id  AS  adalias_address_id,\n  adalias.user_id  AS  adalias_user_id,\n  adalias.email_address  AS  adalias_email_address,\n  (...other  columns...)\nFROM  users\nLEFT  OUTER  JOIN  email_addresses  AS  email_addresses_1\nON  users.user_id  =  email_addresses_1.user_id \n```", "```py\nstmt = select(User).options(contains_eager(User.orders).contains_eager(Order.items))\n```", "```py\nstmt = (\n    select(User)\n    .join(User.addresses)\n    .filter(Address.email_address.like(\"%@aol.com\"))\n    .options(contains_eager(User.addresses))\n    .execution_options(populate_existing=True)\n)\n```", "```py\nstmt = (\n    select(User)\n    .join(User.addresses)\n    .filter(Address.email_address.like(\"%@aol.com\"))\n    .options(contains_eager(User.addresses))\n    .execution_options(populate_existing=True)\n)\n```", "```py\nfunction sqlalchemy.orm.contains_eager(*keys: Literal['*'] | QueryableAttribute[Any], **kw: Any) \u2192 _AbstractLoad\n```", "```py\nsess.query(Order).join(Order.user).options(\n    contains_eager(Order.user)\n)\n```", "```py\nsess.query(User).join(User.addresses).filter(\n    Address.email_address.like(\"%@aol.com\")\n).options(contains_eager(User.addresses)).populate_existing()\n```", "```py\nfunction sqlalchemy.orm.defaultload(*keys: Literal['*'] | QueryableAttribute[Any]) \u2192 _AbstractLoad\n```", "```py\nsession.query(MyClass).options(\n    defaultload(MyClass.someattribute).joinedload(\n        MyOtherClass.someotherattribute\n    )\n)\n```", "```py\nsession.scalars(\n    select(MyClass).options(\n        defaultload(MyClass.someattribute)\n        .defer(\"some_column\")\n        .undefer(\"some_other_column\")\n    )\n)\n```", "```py\nfunction sqlalchemy.orm.immediateload(*keys: Literal['*'] | QueryableAttribute[Any], recursion_depth: int | None = None) \u2192 _AbstractLoad\n```", "```py\nfunction sqlalchemy.orm.joinedload(*keys: Literal['*'] | QueryableAttribute[Any], **kw: Any) \u2192 _AbstractLoad\n```", "```py\n# joined-load the \"orders\" collection on \"User\"\nselect(User).options(joinedload(User.orders))\n\n# joined-load Order.items and then Item.keywords\nselect(Order).options(\n    joinedload(Order.items).joinedload(Item.keywords)\n)\n\n# lazily load Order.items, but when Items are loaded,\n# joined-load the keywords collection\nselect(Order).options(\n    lazyload(Order.items).joinedload(Item.keywords)\n)\n```", "```py\nselect(Order).options(joinedload(Order.user, innerjoin=True))\n```", "```py\nselect(A).options(\n    joinedload(A.bs, innerjoin=False).joinedload(\n        B.cs, innerjoin=True\n    )\n)\n```", "```py\nselect(A).options(\n    joinedload(A.bs).joinedload(B.cs, innerjoin=\"unnested\")\n)\n```", "```py\nfunction sqlalchemy.orm.lazyload(*keys: Literal['*'] | QueryableAttribute[Any]) \u2192 _AbstractLoad\n```", "```py\nclass sqlalchemy.orm.Load\n```", "```py\nmethod contains_eager(attr: _AttrType, alias: _FromClauseArgument | None = None, _is_chain: bool = False) \u2192 Self\n```", "```py\nmethod defaultload(attr: Literal['*'] | QueryableAttribute[Any]) \u2192 Self\n```", "```py\nmethod defer(key: Literal['*'] | QueryableAttribute[Any], raiseload: bool = False) \u2192 Self\n```", "```py\nmethod get_children(*, omit_attrs: Tuple[str, ...] = (), **kw: Any) \u2192 Iterable[HasTraverseInternals]\n```", "```py\nmethod immediateload(attr: Literal['*'] | QueryableAttribute[Any], recursion_depth: int | None = None) \u2192 Self\n```", "```py\nattribute inherit_cache: bool | None = None\n```", "```py\nmethod joinedload(attr: Literal['*'] | QueryableAttribute[Any], innerjoin: bool | None = None) \u2192 Self\n```", "```py\nmethod lazyload(attr: Literal['*'] | QueryableAttribute[Any]) \u2192 Self\n```", "```py\nmethod load_only(*attrs: Literal['*'] | QueryableAttribute[Any], raiseload: bool = False) \u2192 Self\n```", "```py\nmethod noload(attr: Literal['*'] | QueryableAttribute[Any]) \u2192 Self\n```", "```py\nmethod options(*opts: _AbstractLoad) \u2192 Self\n```", "```py\nquery = session.query(Author)\nquery = query.options(\n            joinedload(Author.book).options(\n                load_only(Book.summary, Book.excerpt),\n                joinedload(Book.citations).options(\n                    joinedload(Citation.author)\n                )\n            )\n        )\n```", "```py\nmethod process_compile_state(compile_state: ORMCompileState) \u2192 None\n```", "```py\nmethod process_compile_state_replaced_entities(compile_state: ORMCompileState, mapper_entities: Sequence[_MapperEntity]) \u2192 None\n```", "```py\nattribute propagate_to_loaders: bool\n```", "```py\nmethod raiseload(attr: Literal['*'] | QueryableAttribute[Any], sql_only: bool = False) \u2192 Self\n```", "```py\nmethod selectin_polymorphic(classes: Iterable[Type[Any]]) \u2192 Self\n```", "```py\nmethod selectinload(attr: Literal['*'] | QueryableAttribute[Any], recursion_depth: int | None = None) \u2192 Self\n```", "```py\nmethod subqueryload(attr: Literal['*'] | QueryableAttribute[Any]) \u2192 Self\n```", "```py\nmethod undefer(key: Literal['*'] | QueryableAttribute[Any]) \u2192 Self\n```", "```py\nmethod undefer_group(name: str) \u2192 Self\n```", "```py\nmethod with_expression(key: _AttrType, expression: _ColumnExpressionArgument[Any]) \u2192 Self\n```", "```py\nfunction sqlalchemy.orm.noload(*keys: Literal['*'] | QueryableAttribute[Any]) \u2192 _AbstractLoad\n```", "```py\nfunction sqlalchemy.orm.raiseload(*keys: Literal['*'] | QueryableAttribute[Any], **kw: Any) \u2192 _AbstractLoad\n```", "```py\nfunction sqlalchemy.orm.selectinload(*keys: Literal['*'] | QueryableAttribute[Any], recursion_depth: int | None = None) \u2192 _AbstractLoad\n```", "```py\n# selectin-load the \"orders\" collection on \"User\"\nselect(User).options(selectinload(User.orders))\n\n# selectin-load Order.items and then Item.keywords\nselect(Order).options(\n    selectinload(Order.items).selectinload(Item.keywords)\n)\n\n# lazily load Order.items, but when Items are loaded,\n# selectin-load the keywords collection\nselect(Order).options(\n    lazyload(Order.items).selectinload(Item.keywords)\n)\n```", "```py\nfunction sqlalchemy.orm.subqueryload(*keys: Literal['*'] | QueryableAttribute[Any]) \u2192 _AbstractLoad\n```", "```py\n# subquery-load the \"orders\" collection on \"User\"\nselect(User).options(subqueryload(User.orders))\n\n# subquery-load Order.items and then Item.keywords\nselect(Order).options(\n    subqueryload(Order.items).subqueryload(Item.keywords)\n)\n\n# lazily load Order.items, but when Items are loaded,\n# subquery-load the keywords collection\nselect(Order).options(\n    lazyload(Order.items).subqueryload(Item.keywords)\n)\n```"]