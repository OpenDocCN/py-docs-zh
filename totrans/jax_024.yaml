- en: JAX debugging flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/debugging/flags.html`](https://jax.readthedocs.io/en/latest/debugging/flags.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: JAX offers flags and context managers that enable catching errors more easily.
  prefs: []
  type: TYPE_NORMAL
- en: '`jax_debug_nans` configuration option and context manager'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**TL;DR** Enable the `jax_debug_nans` flag to automatically detect when NaNs
    are produced in `jax.jit`-compiled code (but not in `jax.pmap` or `jax.pjit`-compiled
    code).'
  prefs: []
  type: TYPE_NORMAL
- en: '`jax_debug_nans` is a JAX flag that when enabled, automatically raises an error
    when a NaN is detected. It has special handling for JIT-compiled – when a NaN
    output is detected from a JIT-ted function, the function is re-run eagerly (i.e.
    without compilation) and will throw an error at the specific primitive that produced
    the NaN.'
  prefs: []
  type: TYPE_NORMAL
- en: Usage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to trace where NaNs are occurring in your functions or gradients,
    you can turn on the NaN-checker by:'
  prefs: []
  type: TYPE_NORMAL
- en: setting the `JAX_DEBUG_NANS=True` environment variable;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: adding `jax.config.update("jax_debug_nans", True)` near the top of your main
    file;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: adding `jax.config.parse_flags_with_absl()` to your main file, then set the
    option using a command-line flag like `--jax_debug_nans=True`;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example(s)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Strengths and limitations of `jax_debug_nans`
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Strengths
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Easy to apply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Precisely detects where NaNs were produced
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throws a standard Python exception and is compatible with PDB postmortem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limitations
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Not compatible with `jax.pmap` or `jax.pjit`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Re-running functions eagerly can be slow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Errors on false positives (e.g. intentionally created NaNs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jax_disable_jit` configuration option and context manager'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**TL;DR** Enable the `jax_disable_jit` flag to disable JIT-compilation, enabling
    use of traditional Python debugging tools like `print` and `pdb`'
  prefs: []
  type: TYPE_NORMAL
- en: '`jax_disable_jit` is a JAX flag that when enabled, disables JIT-compilation
    throughout JAX (including in control flow functions like `jax.lax.cond` and `jax.lax.scan`).'
  prefs: []
  type: TYPE_NORMAL
- en: Usage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can disable JIT-compilation by:'
  prefs: []
  type: TYPE_NORMAL
- en: setting the `JAX_DISABLE_JIT=True` environment variable;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: adding `jax.config.update("jax_disable_jit", True)` near the top of your main
    file;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: adding `jax.config.parse_flags_with_absl()` to your main file, then set the
    option using a command-line flag like `--jax_disable_jit=True`;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Strengths and limitations of `jax_disable_jit`
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Strengths
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Easy to apply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enables use of Python’s built-in `breakpoint` and `print`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throws standard Python exceptions and is compatible with PDB postmortem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limitations
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Not compatible with `jax.pmap` or `jax.pjit`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running functions without JIT-compilation can be slow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
