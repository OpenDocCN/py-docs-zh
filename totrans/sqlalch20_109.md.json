["```py\nengine = create_engine(\"mysql+pymysql://user:pass@some_mariadb/dbname?charset=utf8mb4\")\n```", "```py\nengine = create_engine(\"mariadb+pymysql://user:pass@some_mariadb/dbname?charset=utf8mb4\")\n```", "```py\nmy_table = Table(\n    \"mytable\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"textdata\", String(50)),\n    mariadb_engine=\"InnoDB\",\n    mysql_engine=\"InnoDB\",\n)\n\nIndex(\n    \"textdata_ix\",\n    my_table.c.textdata,\n    mysql_prefix=\"FULLTEXT\",\n    mariadb_prefix=\"FULLTEXT\",\n)\n```", "```py\nengine = create_engine('mysql+mysqldb://...', pool_recycle=3600)\n```", "```py\nTable('mytable', metadata,\n      Column('data', String(32)),\n      mysql_engine='InnoDB',\n      mysql_charset='utf8mb4',\n      mysql_key_block_size=\"1024\"\n     )\n```", "```py\n# support both \"mysql\" and \"mariadb-only\" engine URLs\n\nTable('mytable', metadata,\n      Column('data', String(32)),\n\n      mysql_engine='InnoDB',\n      mariadb_engine='InnoDB',\n\n      mysql_charset='utf8mb4',\n      mariadb_charset='utf8',\n\n      mysql_key_block_size=\"1024\"\n      mariadb_key_block_size=\"1024\"\n\n     )\n```", "```py\nengine = create_engine(\n                \"mysql+mysqldb://scott:tiger@localhost/test\",\n                isolation_level=\"READ UNCOMMITTED\"\n            )\n```", "```py\nconnection = engine.connect()\nconnection = connection.execution_options(\n    isolation_level=\"READ COMMITTED\"\n)\n```", "```py\n>>> t = Table('mytable', metadata,\n...   Column('mytable_id', Integer, primary_key=True)\n... )\n>>> t.create()\nCREATE TABLE mytable (\n id INTEGER NOT NULL AUTO_INCREMENT,\n PRIMARY KEY (id)\n)\n```", "```py\nTable('mytable', metadata,\n      Column('gid', Integer, primary_key=True, autoincrement=False),\n      Column('id', Integer, primary_key=True)\n     )\n```", "```py\nwith engine.connect() as conn:\n    result = conn.execution_options(stream_results=True).execute(text(\"select * from table\"))\n```", "```py\ne = create_engine(\n    \"mysql+pymysql://scott:tiger@localhost/test?charset=utf8mb4\")\n```", "```py\ne = create_engine(\n    \"mysql+pymysql://scott:tiger@localhost/test?charset=utf8mb4\")\n```", "```py\ndefault.py:509: Warning: (1300, \"Invalid utf8mb4 character string:\n'F9876A'\")\n  cursor.execute(statement, parameters)\n```", "```py\nINSERT INTO table (data) VALUES (_binary %s)\n```", "```py\n# mysqlclient\nengine = create_engine(\n    \"mysql+mysqldb://scott:tiger@localhost/test?charset=utf8mb4&binary_prefix=true\")\n\n# PyMySQL\nengine = create_engine(\n    \"mysql+pymysql://scott:tiger@localhost/test?charset=utf8mb4&binary_prefix=true\")\n```", "```py\nfrom sqlalchemy import create_engine, event\n\neng = create_engine(\"mysql+mysqldb://scott:tiger@localhost/test\", echo='debug')\n\n# `insert=True` will ensure this is the very first listener to run\n@event.listens_for(eng, \"connect\", insert=True)\ndef connect(dbapi_connection, connection_record):\n    cursor = dbapi_connection.cursor()\n    cursor.execute(\"SET sql_mode = 'STRICT_ALL_TABLES'\")\n\nconn = eng.connect()\n```", "```py\ntable.select(table.c.password==func.md5('plaintext'))\ntable.select(table.c.username.op('regexp')('^[a-d]'))\n```", "```py\n    select(...).prefix_with(['HIGH_PRIORITY', 'SQL_SMALL_RESULT'])\n    ```", "```py\n    update(..., mysql_limit=10, mariadb_limit=10)\n    ```", "```py\n    select(...).prefix_with(\"/*+ NO_RANGE_OPTIMIZATION(t4 PRIMARY) */\")\n    ```", "```py\n    select(...).with_hint(some_table, \"USE INDEX xyz\")\n    ```", "```py\n    from sqlalchemy.dialects.mysql import match\n    select(...).where(match(col1, col2, against=\"some expr\").in_boolean_mode())\n\n    .. seealso::\n\n        :class:`_mysql.match`\n    ```", "```py\n# INSERT..RETURNING\nresult = connection.execute(\n    table.insert().\n    values(name='foo').\n    returning(table.c.col1, table.c.col2)\n)\nprint(result.all())\n\n# DELETE..RETURNING\nresult = connection.execute(\n    table.delete().\n    where(table.c.name=='foo').\n    returning(table.c.col1, table.c.col2)\n)\nprint(result.all())\n```", "```py\n>>> from sqlalchemy.dialects.mysql import insert\n\n>>> insert_stmt = insert(my_table).values(\n...     id='some_existing_id',\n...     data='inserted value')\n\n>>> on_duplicate_key_stmt = insert_stmt.on_duplicate_key_update(\n...     data=insert_stmt.inserted.data,\n...     status='U'\n... )\n>>> print(on_duplicate_key_stmt)\nINSERT  INTO  my_table  (id,  data)  VALUES  (%s,  %s)\nON  DUPLICATE  KEY  UPDATE  data  =  VALUES(data),  status  =  %s \n```", "```py\n>>> insert_stmt = insert(my_table).values(\n...          id='some_existing_id',\n...          data='inserted value')\n\n>>> on_duplicate_key_stmt = insert_stmt.on_duplicate_key_update(\n...     data=\"some data\",\n...     updated_at=func.current_timestamp(),\n... )\n\n>>> print(on_duplicate_key_stmt)\nINSERT  INTO  my_table  (id,  data)  VALUES  (%s,  %s)\nON  DUPLICATE  KEY  UPDATE  data  =  %s,  updated_at  =  CURRENT_TIMESTAMP \n```", "```py\n>>> on_duplicate_key_stmt = insert_stmt.on_duplicate_key_update(\n...     {\"data\": \"some data\", \"updated_at\": func.current_timestamp()},\n... )\n```", "```py\n>>> on_duplicate_key_stmt = insert_stmt.on_duplicate_key_update(\n...     [\n...         (\"data\", \"some data\"),\n...         (\"updated_at\", func.current_timestamp()),\n...     ]\n... )\n\n>>> print(on_duplicate_key_stmt)\nINSERT  INTO  my_table  (id,  data)  VALUES  (%s,  %s)\nON  DUPLICATE  KEY  UPDATE  data  =  %s,  updated_at  =  CURRENT_TIMESTAMP \n```", "```py\n>>> stmt = insert(my_table).values(\n...     id='some_id',\n...     data='inserted value',\n...     author='jlh')\n\n>>> do_update_stmt = stmt.on_duplicate_key_update(\n...     data=\"updated value\",\n...     author=stmt.inserted.author\n... )\n\n>>> print(do_update_stmt)\nINSERT  INTO  my_table  (id,  data,  author)  VALUES  (%s,  %s,  %s)\nON  DUPLICATE  KEY  UPDATE  data  =  %s,  author  =  VALUES(author) \n```", "```py\nIndex('my_index', my_table.c.data, mysql_length=10, mariadb_length=10)\n\nIndex('a_b_idx', my_table.c.a, my_table.c.b, mysql_length={'a': 4,\n                                                           'b': 9})\n\nIndex('a_b_idx', my_table.c.a, my_table.c.b, mariadb_length={'a': 4,\n                                                           'b': 9})\n```", "```py\nIndex('my_index', my_table.c.data, mysql_prefix='FULLTEXT')\n```", "```py\nIndex('my_index', my_table.c.data, mysql_using='hash', mariadb_using='hash')\n```", "```py\nPrimaryKeyConstraint(\"data\", mysql_using='hash', mariadb_using='hash')\n```", "```py\nIndex(\n    'my_index', my_table.c.data,\n    mysql_prefix='FULLTEXT', mysql_with_parser=\"ngram\",\n    mariadb_prefix='FULLTEXT', mariadb_with_parser=\"ngram\",\n)\n```", "```py\nfrom sqlalchemy.ext.compiler import compiles\nfrom sqlalchemy.schema import ForeignKeyConstraint\n\n@compiles(ForeignKeyConstraint, \"mysql\", \"mariadb\")\ndef process(element, compiler, **kw):\n    element.deferrable = element.initially = None\n    return compiler.visit_foreign_key_constraint(element, **kw)\n```", "```py\nTable('mytable', metadata,\n      ForeignKeyConstraint(['other_id'], ['othertable.other_id']),\n      autoload_with=engine\n     )\n```", "```py\nfrom sqlalchemy import Table, MetaData, Column, Integer, String, TIMESTAMP\nfrom sqlalchemy import text\n\nmetadata = MetaData()\n\nmytable = Table(\n    \"mytable\",\n    metadata,\n    Column('id', Integer, primary_key=True),\n    Column('data', String(50)),\n    Column(\n        'last_updated',\n        TIMESTAMP,\n        server_default=text(\"CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\")\n    )\n)\n```", "```py\nfrom sqlalchemy import DateTime\n\nmytable = Table(\n    \"mytable\",\n    metadata,\n    Column('id', Integer, primary_key=True),\n    Column('data', String(50)),\n    Column(\n        'last_updated',\n        DateTime,\n        server_default=text(\"CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\")\n    )\n)\n```", "```py\nfrom sqlalchemy.schema import FetchedValue\n\nclass MyClass(Base):\n    __tablename__ = 'mytable'\n\n    id = Column(Integer, primary_key=True)\n    data = Column(String(50))\n    last_updated = Column(\n        TIMESTAMP,\n        server_default=text(\"CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\"),\n        server_onupdate=FetchedValue()\n    )\n```", "```py\nmysql> CREATE TABLE ts_test (\n    -> a INTEGER,\n    -> b INTEGER NOT NULL,\n    -> c TIMESTAMP,\n    -> d TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    -> e TIMESTAMP NULL);\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> SHOW CREATE TABLE ts_test;\n+---------+-----------------------------------------------------\n| Table   | Create Table\n+---------+-----------------------------------------------------\n| ts_test | CREATE TABLE `ts_test` (\n  `a` int(11) DEFAULT NULL,\n  `b` int(11) NOT NULL,\n  `c` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `d` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  `e` timestamp NULL DEFAULT NULL\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n```", "```py\nfrom sqlalchemy import MetaData, Integer, Table, Column, text\nfrom sqlalchemy.dialects.mysql import TIMESTAMP\n\nm = MetaData()\nt = Table('ts_test', m,\n        Column('a', Integer),\n        Column('b', Integer, nullable=False),\n        Column('c', TIMESTAMP),\n        Column('d', TIMESTAMP, nullable=False)\n    )\n\nfrom sqlalchemy import create_engine\ne = create_engine(\"mysql+mysqldb://scott:tiger@localhost/test\", echo=True)\nm.create_all(e)\n```", "```py\nCREATE TABLE ts_test (\n    a INTEGER,\n    b INTEGER NOT NULL,\n    c TIMESTAMP NULL,\n    d TIMESTAMP NOT NULL\n)\n```", "```py\nclass sqlalchemy.dialects.mysql.match\n```", "```py\nfrom sqlalchemy import desc\nfrom sqlalchemy.dialects.mysql import match\n\nmatch_expr = match(\n    users_table.c.firstname,\n    users_table.c.lastname,\n    against=\"Firstname Lastname\",\n)\n\nstmt = (\n    select(users_table)\n    .where(match_expr.in_boolean_mode())\n    .order_by(desc(match_expr))\n)\n```", "```py\nSELECT id, firstname, lastname\nFROM user\nWHERE MATCH(firstname, lastname) AGAINST (:param_1 IN BOOLEAN MODE)\nORDER BY MATCH(firstname, lastname) AGAINST (:param_2) DESC\n```", "```py\nmethod in_boolean_mode() \u2192 Self\n```", "```py\nmethod in_natural_language_mode() \u2192 Self\n```", "```py\nattribute inherit_cache: bool | None = True\n```", "```py\nmethod with_query_expansion() \u2192 Self\n```", "```py\nfrom sqlalchemy.dialects.mysql import (\n    BIGINT,\n    BINARY,\n    BIT,\n    BLOB,\n    BOOLEAN,\n    CHAR,\n    DATE,\n    DATETIME,\n    DECIMAL,\n    DECIMAL,\n    DOUBLE,\n    ENUM,\n    FLOAT,\n    INTEGER,\n    LONGBLOB,\n    LONGTEXT,\n    MEDIUMBLOB,\n    MEDIUMINT,\n    MEDIUMTEXT,\n    NCHAR,\n    NUMERIC,\n    NVARCHAR,\n    REAL,\n    SET,\n    SMALLINT,\n    TEXT,\n    TIME,\n    TIMESTAMP,\n    TINYBLOB,\n    TINYINT,\n    TINYTEXT,\n    VARBINARY,\n    VARCHAR,\n    YEAR,\n)\n```", "```py\nclass sqlalchemy.dialects.mysql.BIGINT\n```", "```py\nmethod __init__(display_width=None, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.BINARY\n```", "```py\nclass sqlalchemy.dialects.mysql.BIT\n```", "```py\nmethod __init__(length=None)\n```", "```py\nclass sqlalchemy.dialects.mysql.BLOB\n```", "```py\nmethod __init__(length: int | None = None)\n```", "```py\nclass sqlalchemy.dialects.mysql.BOOLEAN\n```", "```py\nmethod __init__(create_constraint: bool = False, name: str | None = None, _create_events: bool = True, _adapted_from: SchemaType | None = None)\n```", "```py\nclass sqlalchemy.dialects.mysql.CHAR\n```", "```py\nmethod __init__(length=None, **kwargs)\n```", "```py\nclass sqlalchemy.dialects.mysql.DATE\n```", "```py\nclass sqlalchemy.dialects.mysql.DATETIME\n```", "```py\nmethod __init__(timezone=False, fsp=None)\n```", "```py\nclass sqlalchemy.dialects.mysql.DECIMAL\n```", "```py\nmethod __init__(precision=None, scale=None, asdecimal=True, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.DOUBLE\n```", "```py\nmethod __init__(precision=None, scale=None, asdecimal=True, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.ENUM\n```", "```py\nmethod __init__(*enums, **kw)\n```", "```py\nColumn('myenum', ENUM(\"foo\", \"bar\", \"baz\"))\n```", "```py\nclass sqlalchemy.dialects.mysql.FLOAT\n```", "```py\nmethod __init__(precision=None, scale=None, asdecimal=False, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.INTEGER\n```", "```py\nmethod __init__(display_width=None, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.JSON\n```", "```py\nclass sqlalchemy.dialects.mysql.LONGBLOB\n```", "```py\nclass sqlalchemy.dialects.mysql.LONGTEXT\n```", "```py\nmethod __init__(**kwargs)\n```", "```py\nclass sqlalchemy.dialects.mysql.MEDIUMBLOB\n```", "```py\nclass sqlalchemy.dialects.mysql.MEDIUMINT\n```", "```py\nmethod __init__(display_width=None, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.MEDIUMTEXT\n```", "```py\nmethod __init__(**kwargs)\n```", "```py\nclass sqlalchemy.dialects.mysql.NCHAR\n```", "```py\nmethod __init__(length=None, **kwargs)\n```", "```py\nclass sqlalchemy.dialects.mysql.NUMERIC\n```", "```py\nmethod __init__(precision=None, scale=None, asdecimal=True, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.NVARCHAR\n```", "```py\nmethod __init__(length=None, **kwargs)\n```", "```py\nclass sqlalchemy.dialects.mysql.REAL\n```", "```py\nmethod __init__(precision=None, scale=None, asdecimal=True, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.SET\n```", "```py\nmethod __init__(*values, **kw)\n```", "```py\nColumn('myset', SET(\"foo\", \"bar\", \"baz\"))\n```", "```py\nclass sqlalchemy.dialects.mysql.SMALLINT\n```", "```py\nmethod __init__(display_width=None, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.TEXT\n```", "```py\nmethod __init__(length=None, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.TIME\n```", "```py\nmethod __init__(timezone=False, fsp=None)\n```", "```py\nclass sqlalchemy.dialects.mysql.TIMESTAMP\n```", "```py\nmethod __init__(timezone=False, fsp=None)\n```", "```py\nclass sqlalchemy.dialects.mysql.TINYBLOB\n```", "```py\nclass sqlalchemy.dialects.mysql.TINYINT\n```", "```py\nmethod __init__(display_width=None, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.TINYTEXT\n```", "```py\nmethod __init__(**kwargs)\n```", "```py\nclass sqlalchemy.dialects.mysql.VARBINARY\n```", "```py\nclass sqlalchemy.dialects.mysql.VARCHAR\n```", "```py\nmethod __init__(length=None, **kwargs)\n```", "```py\nclass sqlalchemy.dialects.mysql.YEAR\n```", "```py\nfunction sqlalchemy.dialects.mysql.insert(table: _DMLTableArgument) \u2192 Insert\n```", "```py\nclass sqlalchemy.dialects.mysql.Insert\n```", "```py\nattribute inherit_cache: bool | None = False\n```", "```py\nattribute inserted\n```", "```py\nmethod on_duplicate_key_update(*args: Mapping[Any, Any] | List[Tuple[str, Any]] | ColumnCollection[Any, Any], **kw: Any) \u2192 Self\n```", "```py\ninsert().on_duplicate_key_update({\"name\": \"some name\"})\n```", "```py\ninsert().on_duplicate_key_update(\n    [(\"name\", \"some name\"), (\"value\", \"some value\")])\n```", "```py\nmysql+mysqldb://<user>:<password>@<host>[:<port>]/<dbname>\n```", "```py\nengine = create_engine(\n    \"mysql+mysqldb://scott:tiger@192.168.0.134/test\",\n    connect_args={\n        \"ssl\": {\n            \"ca\": \"/home/gord/client-ssl/ca.pem\",\n            \"cert\": \"/home/gord/client-ssl/client-cert.pem\",\n            \"key\": \"/home/gord/client-ssl/client-key.pem\"\n        }\n    }\n)\n```", "```py\nconnection_uri = (\n    \"mysql+mysqldb://scott:tiger@192.168.0.134/test\"\n    \"?ssl_ca=/home/gord/client-ssl/ca.pem\"\n    \"&ssl_cert=/home/gord/client-ssl/client-cert.pem\"\n    \"&ssl_key=/home/gord/client-ssl/client-key.pem\"\n)\n```", "```py\nmysql+mysqldb://root@/<dbname>?unix_socket=/cloudsql/<projectid>:<instancename>\n```", "```py\nmysql+pymysql://<username>:<password>@<host>/<dbname>[?<options>]\n```", "```py\nconnection_uri = (\n    \"mysql+pymysql://scott:tiger@192.168.0.134/test\"\n    \"?ssl_ca=/home/gord/client-ssl/ca.pem\"\n    \"&ssl_cert=/home/gord/client-ssl/client-cert.pem\"\n    \"&ssl_key=/home/gord/client-ssl/client-key.pem\"\n    \"&ssl_check_hostname=false\"\n)\n```", "```py\nmariadb+mariadbconnector://<user>:<password>@<host>[:<port>]/<dbname>\n```", "```py\nmysql+mysqlconnector://<user>:<password>@<host>[:<port>]/<dbname>\n```", "```py\nmysql+asyncmy://user:password@host:port/dbname[?key=value&key=value...]\n```", "```py\nfrom sqlalchemy.ext.asyncio import create_async_engine\nengine = create_async_engine(\"mysql+asyncmy://user:pass@hostname/dbname?charset=utf8mb4\")\n```", "```py\nmysql+aiomysql://user:password@host:port/dbname[?key=value&key=value...]\n```", "```py\nfrom sqlalchemy.ext.asyncio import create_async_engine\nengine = create_async_engine(\"mysql+aiomysql://user:pass@hostname/dbname?charset=utf8mb4\")\n```", "```py\nmysql+cymysql://<username>:<password>@<host>/<dbname>[?<options>]\n```", "```py\nmysql+pyodbc://<username>:<password>@<dsnname>\n```", "```py\nimport urllib\nconnection_string = (\n    'DRIVER=MySQL ODBC 8.0 ANSI Driver;'\n    'SERVER=localhost;'\n    'PORT=3307;'\n    'DATABASE=mydb;'\n    'UID=root;'\n    'PWD=(whatever);'\n    'charset=utf8mb4;'\n)\nparams = urllib.parse.quote_plus(connection_string)\nconnection_uri = \"mysql+pyodbc:///?odbc_connect=%s\" % params\n```", "```py\nengine = create_engine(\"mysql+pymysql://user:pass@some_mariadb/dbname?charset=utf8mb4\")\n```", "```py\nengine = create_engine(\"mariadb+pymysql://user:pass@some_mariadb/dbname?charset=utf8mb4\")\n```", "```py\nmy_table = Table(\n    \"mytable\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"textdata\", String(50)),\n    mariadb_engine=\"InnoDB\",\n    mysql_engine=\"InnoDB\",\n)\n\nIndex(\n    \"textdata_ix\",\n    my_table.c.textdata,\n    mysql_prefix=\"FULLTEXT\",\n    mariadb_prefix=\"FULLTEXT\",\n)\n```", "```py\nengine = create_engine(\"mysql+pymysql://user:pass@some_mariadb/dbname?charset=utf8mb4\")\n```", "```py\nengine = create_engine(\"mariadb+pymysql://user:pass@some_mariadb/dbname?charset=utf8mb4\")\n```", "```py\nmy_table = Table(\n    \"mytable\",\n    metadata,\n    Column(\"id\", Integer, primary_key=True),\n    Column(\"textdata\", String(50)),\n    mariadb_engine=\"InnoDB\",\n    mysql_engine=\"InnoDB\",\n)\n\nIndex(\n    \"textdata_ix\",\n    my_table.c.textdata,\n    mysql_prefix=\"FULLTEXT\",\n    mariadb_prefix=\"FULLTEXT\",\n)\n```", "```py\nengine = create_engine('mysql+mysqldb://...', pool_recycle=3600)\n```", "```py\nTable('mytable', metadata,\n      Column('data', String(32)),\n      mysql_engine='InnoDB',\n      mysql_charset='utf8mb4',\n      mysql_key_block_size=\"1024\"\n     )\n```", "```py\n# support both \"mysql\" and \"mariadb-only\" engine URLs\n\nTable('mytable', metadata,\n      Column('data', String(32)),\n\n      mysql_engine='InnoDB',\n      mariadb_engine='InnoDB',\n\n      mysql_charset='utf8mb4',\n      mariadb_charset='utf8',\n\n      mysql_key_block_size=\"1024\"\n      mariadb_key_block_size=\"1024\"\n\n     )\n```", "```py\nengine = create_engine(\n                \"mysql+mysqldb://scott:tiger@localhost/test\",\n                isolation_level=\"READ UNCOMMITTED\"\n            )\n```", "```py\nconnection = engine.connect()\nconnection = connection.execution_options(\n    isolation_level=\"READ COMMITTED\"\n)\n```", "```py\n>>> t = Table('mytable', metadata,\n...   Column('mytable_id', Integer, primary_key=True)\n... )\n>>> t.create()\nCREATE TABLE mytable (\n id INTEGER NOT NULL AUTO_INCREMENT,\n PRIMARY KEY (id)\n)\n```", "```py\nTable('mytable', metadata,\n      Column('gid', Integer, primary_key=True, autoincrement=False),\n      Column('id', Integer, primary_key=True)\n     )\n```", "```py\nwith engine.connect() as conn:\n    result = conn.execution_options(stream_results=True).execute(text(\"select * from table\"))\n```", "```py\ne = create_engine(\n    \"mysql+pymysql://scott:tiger@localhost/test?charset=utf8mb4\")\n```", "```py\ne = create_engine(\n    \"mysql+pymysql://scott:tiger@localhost/test?charset=utf8mb4\")\n```", "```py\ndefault.py:509: Warning: (1300, \"Invalid utf8mb4 character string:\n'F9876A'\")\n  cursor.execute(statement, parameters)\n```", "```py\nINSERT INTO table (data) VALUES (_binary %s)\n```", "```py\n# mysqlclient\nengine = create_engine(\n    \"mysql+mysqldb://scott:tiger@localhost/test?charset=utf8mb4&binary_prefix=true\")\n\n# PyMySQL\nengine = create_engine(\n    \"mysql+pymysql://scott:tiger@localhost/test?charset=utf8mb4&binary_prefix=true\")\n```", "```py\ne = create_engine(\n    \"mysql+pymysql://scott:tiger@localhost/test?charset=utf8mb4\")\n```", "```py\ne = create_engine(\n    \"mysql+pymysql://scott:tiger@localhost/test?charset=utf8mb4\")\n```", "```py\ndefault.py:509: Warning: (1300, \"Invalid utf8mb4 character string:\n'F9876A'\")\n  cursor.execute(statement, parameters)\n```", "```py\nINSERT INTO table (data) VALUES (_binary %s)\n```", "```py\n# mysqlclient\nengine = create_engine(\n    \"mysql+mysqldb://scott:tiger@localhost/test?charset=utf8mb4&binary_prefix=true\")\n\n# PyMySQL\nengine = create_engine(\n    \"mysql+pymysql://scott:tiger@localhost/test?charset=utf8mb4&binary_prefix=true\")\n```", "```py\nfrom sqlalchemy import create_engine, event\n\neng = create_engine(\"mysql+mysqldb://scott:tiger@localhost/test\", echo='debug')\n\n# `insert=True` will ensure this is the very first listener to run\n@event.listens_for(eng, \"connect\", insert=True)\ndef connect(dbapi_connection, connection_record):\n    cursor = dbapi_connection.cursor()\n    cursor.execute(\"SET sql_mode = 'STRICT_ALL_TABLES'\")\n\nconn = eng.connect()\n```", "```py\ntable.select(table.c.password==func.md5('plaintext'))\ntable.select(table.c.username.op('regexp')('^[a-d]'))\n```", "```py\n    select(...).prefix_with(['HIGH_PRIORITY', 'SQL_SMALL_RESULT'])\n    ```", "```py\n    update(..., mysql_limit=10, mariadb_limit=10)\n    ```", "```py\n    select(...).prefix_with(\"/*+ NO_RANGE_OPTIMIZATION(t4 PRIMARY) */\")\n    ```", "```py\n    select(...).with_hint(some_table, \"USE INDEX xyz\")\n    ```", "```py\n    from sqlalchemy.dialects.mysql import match\n    select(...).where(match(col1, col2, against=\"some expr\").in_boolean_mode())\n\n    .. seealso::\n\n        :class:`_mysql.match`\n    ```", "```py\n# INSERT..RETURNING\nresult = connection.execute(\n    table.insert().\n    values(name='foo').\n    returning(table.c.col1, table.c.col2)\n)\nprint(result.all())\n\n# DELETE..RETURNING\nresult = connection.execute(\n    table.delete().\n    where(table.c.name=='foo').\n    returning(table.c.col1, table.c.col2)\n)\nprint(result.all())\n```", "```py\n>>> from sqlalchemy.dialects.mysql import insert\n\n>>> insert_stmt = insert(my_table).values(\n...     id='some_existing_id',\n...     data='inserted value')\n\n>>> on_duplicate_key_stmt = insert_stmt.on_duplicate_key_update(\n...     data=insert_stmt.inserted.data,\n...     status='U'\n... )\n>>> print(on_duplicate_key_stmt)\nINSERT  INTO  my_table  (id,  data)  VALUES  (%s,  %s)\nON  DUPLICATE  KEY  UPDATE  data  =  VALUES(data),  status  =  %s \n```", "```py\n>>> insert_stmt = insert(my_table).values(\n...          id='some_existing_id',\n...          data='inserted value')\n\n>>> on_duplicate_key_stmt = insert_stmt.on_duplicate_key_update(\n...     data=\"some data\",\n...     updated_at=func.current_timestamp(),\n... )\n\n>>> print(on_duplicate_key_stmt)\nINSERT  INTO  my_table  (id,  data)  VALUES  (%s,  %s)\nON  DUPLICATE  KEY  UPDATE  data  =  %s,  updated_at  =  CURRENT_TIMESTAMP \n```", "```py\n>>> on_duplicate_key_stmt = insert_stmt.on_duplicate_key_update(\n...     {\"data\": \"some data\", \"updated_at\": func.current_timestamp()},\n... )\n```", "```py\n>>> on_duplicate_key_stmt = insert_stmt.on_duplicate_key_update(\n...     [\n...         (\"data\", \"some data\"),\n...         (\"updated_at\", func.current_timestamp()),\n...     ]\n... )\n\n>>> print(on_duplicate_key_stmt)\nINSERT  INTO  my_table  (id,  data)  VALUES  (%s,  %s)\nON  DUPLICATE  KEY  UPDATE  data  =  %s,  updated_at  =  CURRENT_TIMESTAMP \n```", "```py\n>>> stmt = insert(my_table).values(\n...     id='some_id',\n...     data='inserted value',\n...     author='jlh')\n\n>>> do_update_stmt = stmt.on_duplicate_key_update(\n...     data=\"updated value\",\n...     author=stmt.inserted.author\n... )\n\n>>> print(do_update_stmt)\nINSERT  INTO  my_table  (id,  data,  author)  VALUES  (%s,  %s,  %s)\nON  DUPLICATE  KEY  UPDATE  data  =  %s,  author  =  VALUES(author) \n```", "```py\nIndex('my_index', my_table.c.data, mysql_length=10, mariadb_length=10)\n\nIndex('a_b_idx', my_table.c.a, my_table.c.b, mysql_length={'a': 4,\n                                                           'b': 9})\n\nIndex('a_b_idx', my_table.c.a, my_table.c.b, mariadb_length={'a': 4,\n                                                           'b': 9})\n```", "```py\nIndex('my_index', my_table.c.data, mysql_prefix='FULLTEXT')\n```", "```py\nIndex('my_index', my_table.c.data, mysql_using='hash', mariadb_using='hash')\n```", "```py\nPrimaryKeyConstraint(\"data\", mysql_using='hash', mariadb_using='hash')\n```", "```py\nIndex(\n    'my_index', my_table.c.data,\n    mysql_prefix='FULLTEXT', mysql_with_parser=\"ngram\",\n    mariadb_prefix='FULLTEXT', mariadb_with_parser=\"ngram\",\n)\n```", "```py\nIndex('my_index', my_table.c.data, mysql_length=10, mariadb_length=10)\n\nIndex('a_b_idx', my_table.c.a, my_table.c.b, mysql_length={'a': 4,\n                                                           'b': 9})\n\nIndex('a_b_idx', my_table.c.a, my_table.c.b, mariadb_length={'a': 4,\n                                                           'b': 9})\n```", "```py\nIndex('my_index', my_table.c.data, mysql_prefix='FULLTEXT')\n```", "```py\nIndex('my_index', my_table.c.data, mysql_using='hash', mariadb_using='hash')\n```", "```py\nPrimaryKeyConstraint(\"data\", mysql_using='hash', mariadb_using='hash')\n```", "```py\nIndex(\n    'my_index', my_table.c.data,\n    mysql_prefix='FULLTEXT', mysql_with_parser=\"ngram\",\n    mariadb_prefix='FULLTEXT', mariadb_with_parser=\"ngram\",\n)\n```", "```py\nfrom sqlalchemy.ext.compiler import compiles\nfrom sqlalchemy.schema import ForeignKeyConstraint\n\n@compiles(ForeignKeyConstraint, \"mysql\", \"mariadb\")\ndef process(element, compiler, **kw):\n    element.deferrable = element.initially = None\n    return compiler.visit_foreign_key_constraint(element, **kw)\n```", "```py\nTable('mytable', metadata,\n      ForeignKeyConstraint(['other_id'], ['othertable.other_id']),\n      autoload_with=engine\n     )\n```", "```py\nfrom sqlalchemy.ext.compiler import compiles\nfrom sqlalchemy.schema import ForeignKeyConstraint\n\n@compiles(ForeignKeyConstraint, \"mysql\", \"mariadb\")\ndef process(element, compiler, **kw):\n    element.deferrable = element.initially = None\n    return compiler.visit_foreign_key_constraint(element, **kw)\n```", "```py\nTable('mytable', metadata,\n      ForeignKeyConstraint(['other_id'], ['othertable.other_id']),\n      autoload_with=engine\n     )\n```", "```py\nfrom sqlalchemy import Table, MetaData, Column, Integer, String, TIMESTAMP\nfrom sqlalchemy import text\n\nmetadata = MetaData()\n\nmytable = Table(\n    \"mytable\",\n    metadata,\n    Column('id', Integer, primary_key=True),\n    Column('data', String(50)),\n    Column(\n        'last_updated',\n        TIMESTAMP,\n        server_default=text(\"CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\")\n    )\n)\n```", "```py\nfrom sqlalchemy import DateTime\n\nmytable = Table(\n    \"mytable\",\n    metadata,\n    Column('id', Integer, primary_key=True),\n    Column('data', String(50)),\n    Column(\n        'last_updated',\n        DateTime,\n        server_default=text(\"CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\")\n    )\n)\n```", "```py\nfrom sqlalchemy.schema import FetchedValue\n\nclass MyClass(Base):\n    __tablename__ = 'mytable'\n\n    id = Column(Integer, primary_key=True)\n    data = Column(String(50))\n    last_updated = Column(\n        TIMESTAMP,\n        server_default=text(\"CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\"),\n        server_onupdate=FetchedValue()\n    )\n```", "```py\nmysql> CREATE TABLE ts_test (\n    -> a INTEGER,\n    -> b INTEGER NOT NULL,\n    -> c TIMESTAMP,\n    -> d TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    -> e TIMESTAMP NULL);\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> SHOW CREATE TABLE ts_test;\n+---------+-----------------------------------------------------\n| Table   | Create Table\n+---------+-----------------------------------------------------\n| ts_test | CREATE TABLE `ts_test` (\n  `a` int(11) DEFAULT NULL,\n  `b` int(11) NOT NULL,\n  `c` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `d` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  `e` timestamp NULL DEFAULT NULL\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n```", "```py\nfrom sqlalchemy import MetaData, Integer, Table, Column, text\nfrom sqlalchemy.dialects.mysql import TIMESTAMP\n\nm = MetaData()\nt = Table('ts_test', m,\n        Column('a', Integer),\n        Column('b', Integer, nullable=False),\n        Column('c', TIMESTAMP),\n        Column('d', TIMESTAMP, nullable=False)\n    )\n\nfrom sqlalchemy import create_engine\ne = create_engine(\"mysql+mysqldb://scott:tiger@localhost/test\", echo=True)\nm.create_all(e)\n```", "```py\nCREATE TABLE ts_test (\n    a INTEGER,\n    b INTEGER NOT NULL,\n    c TIMESTAMP NULL,\n    d TIMESTAMP NOT NULL\n)\n```", "```py\nfrom sqlalchemy import Table, MetaData, Column, Integer, String, TIMESTAMP\nfrom sqlalchemy import text\n\nmetadata = MetaData()\n\nmytable = Table(\n    \"mytable\",\n    metadata,\n    Column('id', Integer, primary_key=True),\n    Column('data', String(50)),\n    Column(\n        'last_updated',\n        TIMESTAMP,\n        server_default=text(\"CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\")\n    )\n)\n```", "```py\nfrom sqlalchemy import DateTime\n\nmytable = Table(\n    \"mytable\",\n    metadata,\n    Column('id', Integer, primary_key=True),\n    Column('data', String(50)),\n    Column(\n        'last_updated',\n        DateTime,\n        server_default=text(\"CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\")\n    )\n)\n```", "```py\nfrom sqlalchemy.schema import FetchedValue\n\nclass MyClass(Base):\n    __tablename__ = 'mytable'\n\n    id = Column(Integer, primary_key=True)\n    data = Column(String(50))\n    last_updated = Column(\n        TIMESTAMP,\n        server_default=text(\"CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\"),\n        server_onupdate=FetchedValue()\n    )\n```", "```py\nmysql> CREATE TABLE ts_test (\n    -> a INTEGER,\n    -> b INTEGER NOT NULL,\n    -> c TIMESTAMP,\n    -> d TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    -> e TIMESTAMP NULL);\nQuery OK, 0 rows affected (0.03 sec)\n\nmysql> SHOW CREATE TABLE ts_test;\n+---------+-----------------------------------------------------\n| Table   | Create Table\n+---------+-----------------------------------------------------\n| ts_test | CREATE TABLE `ts_test` (\n  `a` int(11) DEFAULT NULL,\n  `b` int(11) NOT NULL,\n  `c` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  `d` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  `e` timestamp NULL DEFAULT NULL\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\n```", "```py\nfrom sqlalchemy import MetaData, Integer, Table, Column, text\nfrom sqlalchemy.dialects.mysql import TIMESTAMP\n\nm = MetaData()\nt = Table('ts_test', m,\n        Column('a', Integer),\n        Column('b', Integer, nullable=False),\n        Column('c', TIMESTAMP),\n        Column('d', TIMESTAMP, nullable=False)\n    )\n\nfrom sqlalchemy import create_engine\ne = create_engine(\"mysql+mysqldb://scott:tiger@localhost/test\", echo=True)\nm.create_all(e)\n```", "```py\nCREATE TABLE ts_test (\n    a INTEGER,\n    b INTEGER NOT NULL,\n    c TIMESTAMP NULL,\n    d TIMESTAMP NOT NULL\n)\n```", "```py\nclass sqlalchemy.dialects.mysql.match\n```", "```py\nfrom sqlalchemy import desc\nfrom sqlalchemy.dialects.mysql import match\n\nmatch_expr = match(\n    users_table.c.firstname,\n    users_table.c.lastname,\n    against=\"Firstname Lastname\",\n)\n\nstmt = (\n    select(users_table)\n    .where(match_expr.in_boolean_mode())\n    .order_by(desc(match_expr))\n)\n```", "```py\nSELECT id, firstname, lastname\nFROM user\nWHERE MATCH(firstname, lastname) AGAINST (:param_1 IN BOOLEAN MODE)\nORDER BY MATCH(firstname, lastname) AGAINST (:param_2) DESC\n```", "```py\nmethod in_boolean_mode() \u2192 Self\n```", "```py\nmethod in_natural_language_mode() \u2192 Self\n```", "```py\nattribute inherit_cache: bool | None = True\n```", "```py\nmethod with_query_expansion() \u2192 Self\n```", "```py\nfrom sqlalchemy.dialects.mysql import (\n    BIGINT,\n    BINARY,\n    BIT,\n    BLOB,\n    BOOLEAN,\n    CHAR,\n    DATE,\n    DATETIME,\n    DECIMAL,\n    DECIMAL,\n    DOUBLE,\n    ENUM,\n    FLOAT,\n    INTEGER,\n    LONGBLOB,\n    LONGTEXT,\n    MEDIUMBLOB,\n    MEDIUMINT,\n    MEDIUMTEXT,\n    NCHAR,\n    NUMERIC,\n    NVARCHAR,\n    REAL,\n    SET,\n    SMALLINT,\n    TEXT,\n    TIME,\n    TIMESTAMP,\n    TINYBLOB,\n    TINYINT,\n    TINYTEXT,\n    VARBINARY,\n    VARCHAR,\n    YEAR,\n)\n```", "```py\nclass sqlalchemy.dialects.mysql.BIGINT\n```", "```py\nmethod __init__(display_width=None, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.BINARY\n```", "```py\nclass sqlalchemy.dialects.mysql.BIT\n```", "```py\nmethod __init__(length=None)\n```", "```py\nclass sqlalchemy.dialects.mysql.BLOB\n```", "```py\nmethod __init__(length: int | None = None)\n```", "```py\nclass sqlalchemy.dialects.mysql.BOOLEAN\n```", "```py\nmethod __init__(create_constraint: bool = False, name: str | None = None, _create_events: bool = True, _adapted_from: SchemaType | None = None)\n```", "```py\nclass sqlalchemy.dialects.mysql.CHAR\n```", "```py\nmethod __init__(length=None, **kwargs)\n```", "```py\nclass sqlalchemy.dialects.mysql.DATE\n```", "```py\nclass sqlalchemy.dialects.mysql.DATETIME\n```", "```py\nmethod __init__(timezone=False, fsp=None)\n```", "```py\nclass sqlalchemy.dialects.mysql.DECIMAL\n```", "```py\nmethod __init__(precision=None, scale=None, asdecimal=True, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.DOUBLE\n```", "```py\nmethod __init__(precision=None, scale=None, asdecimal=True, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.ENUM\n```", "```py\nmethod __init__(*enums, **kw)\n```", "```py\nColumn('myenum', ENUM(\"foo\", \"bar\", \"baz\"))\n```", "```py\nclass sqlalchemy.dialects.mysql.FLOAT\n```", "```py\nmethod __init__(precision=None, scale=None, asdecimal=False, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.INTEGER\n```", "```py\nmethod __init__(display_width=None, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.JSON\n```", "```py\nclass sqlalchemy.dialects.mysql.LONGBLOB\n```", "```py\nclass sqlalchemy.dialects.mysql.LONGTEXT\n```", "```py\nmethod __init__(**kwargs)\n```", "```py\nclass sqlalchemy.dialects.mysql.MEDIUMBLOB\n```", "```py\nclass sqlalchemy.dialects.mysql.MEDIUMINT\n```", "```py\nmethod __init__(display_width=None, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.MEDIUMTEXT\n```", "```py\nmethod __init__(**kwargs)\n```", "```py\nclass sqlalchemy.dialects.mysql.NCHAR\n```", "```py\nmethod __init__(length=None, **kwargs)\n```", "```py\nclass sqlalchemy.dialects.mysql.NUMERIC\n```", "```py\nmethod __init__(precision=None, scale=None, asdecimal=True, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.NVARCHAR\n```", "```py\nmethod __init__(length=None, **kwargs)\n```", "```py\nclass sqlalchemy.dialects.mysql.REAL\n```", "```py\nmethod __init__(precision=None, scale=None, asdecimal=True, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.SET\n```", "```py\nmethod __init__(*values, **kw)\n```", "```py\nColumn('myset', SET(\"foo\", \"bar\", \"baz\"))\n```", "```py\nclass sqlalchemy.dialects.mysql.SMALLINT\n```", "```py\nmethod __init__(display_width=None, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.TEXT\n```", "```py\nmethod __init__(length=None, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.TIME\n```", "```py\nmethod __init__(timezone=False, fsp=None)\n```", "```py\nclass sqlalchemy.dialects.mysql.TIMESTAMP\n```", "```py\nmethod __init__(timezone=False, fsp=None)\n```", "```py\nclass sqlalchemy.dialects.mysql.TINYBLOB\n```", "```py\nclass sqlalchemy.dialects.mysql.TINYINT\n```", "```py\nmethod __init__(display_width=None, **kw)\n```", "```py\nclass sqlalchemy.dialects.mysql.TINYTEXT\n```", "```py\nmethod __init__(**kwargs)\n```", "```py\nclass sqlalchemy.dialects.mysql.VARBINARY\n```", "```py\nclass sqlalchemy.dialects.mysql.VARCHAR\n```", "```py\nmethod __init__(length=None, **kwargs)\n```", "```py\nclass sqlalchemy.dialects.mysql.YEAR\n```", "```py\nfunction sqlalchemy.dialects.mysql.insert(table: _DMLTableArgument) \u2192 Insert\n```", "```py\nclass sqlalchemy.dialects.mysql.Insert\n```", "```py\nattribute inherit_cache: bool | None = False\n```", "```py\nattribute inserted\n```", "```py\nmethod on_duplicate_key_update(*args: Mapping[Any, Any] | List[Tuple[str, Any]] | ColumnCollection[Any, Any], **kw: Any) \u2192 Self\n```", "```py\ninsert().on_duplicate_key_update({\"name\": \"some name\"})\n```", "```py\ninsert().on_duplicate_key_update(\n    [(\"name\", \"some name\"), (\"value\", \"some value\")])\n```", "```py\nmysql+mysqldb://<user>:<password>@<host>[:<port>]/<dbname>\n```", "```py\nengine = create_engine(\n    \"mysql+mysqldb://scott:tiger@192.168.0.134/test\",\n    connect_args={\n        \"ssl\": {\n            \"ca\": \"/home/gord/client-ssl/ca.pem\",\n            \"cert\": \"/home/gord/client-ssl/client-cert.pem\",\n            \"key\": \"/home/gord/client-ssl/client-key.pem\"\n        }\n    }\n)\n```", "```py\nconnection_uri = (\n    \"mysql+mysqldb://scott:tiger@192.168.0.134/test\"\n    \"?ssl_ca=/home/gord/client-ssl/ca.pem\"\n    \"&ssl_cert=/home/gord/client-ssl/client-cert.pem\"\n    \"&ssl_key=/home/gord/client-ssl/client-key.pem\"\n)\n```", "```py\nmysql+mysqldb://root@/<dbname>?unix_socket=/cloudsql/<projectid>:<instancename>\n```", "```py\nmysql+mysqldb://<user>:<password>@<host>[:<port>]/<dbname>\n```", "```py\nengine = create_engine(\n    \"mysql+mysqldb://scott:tiger@192.168.0.134/test\",\n    connect_args={\n        \"ssl\": {\n            \"ca\": \"/home/gord/client-ssl/ca.pem\",\n            \"cert\": \"/home/gord/client-ssl/client-cert.pem\",\n            \"key\": \"/home/gord/client-ssl/client-key.pem\"\n        }\n    }\n)\n```", "```py\nconnection_uri = (\n    \"mysql+mysqldb://scott:tiger@192.168.0.134/test\"\n    \"?ssl_ca=/home/gord/client-ssl/ca.pem\"\n    \"&ssl_cert=/home/gord/client-ssl/client-cert.pem\"\n    \"&ssl_key=/home/gord/client-ssl/client-key.pem\"\n)\n```", "```py\nmysql+mysqldb://root@/<dbname>?unix_socket=/cloudsql/<projectid>:<instancename>\n```", "```py\nmysql+pymysql://<username>:<password>@<host>/<dbname>[?<options>]\n```", "```py\nconnection_uri = (\n    \"mysql+pymysql://scott:tiger@192.168.0.134/test\"\n    \"?ssl_ca=/home/gord/client-ssl/ca.pem\"\n    \"&ssl_cert=/home/gord/client-ssl/client-cert.pem\"\n    \"&ssl_key=/home/gord/client-ssl/client-key.pem\"\n    \"&ssl_check_hostname=false\"\n)\n```", "```py\nmysql+pymysql://<username>:<password>@<host>/<dbname>[?<options>]\n```", "```py\nconnection_uri = (\n    \"mysql+pymysql://scott:tiger@192.168.0.134/test\"\n    \"?ssl_ca=/home/gord/client-ssl/ca.pem\"\n    \"&ssl_cert=/home/gord/client-ssl/client-cert.pem\"\n    \"&ssl_key=/home/gord/client-ssl/client-key.pem\"\n    \"&ssl_check_hostname=false\"\n)\n```", "```py\nmariadb+mariadbconnector://<user>:<password>@<host>[:<port>]/<dbname>\n```", "```py\nmariadb+mariadbconnector://<user>:<password>@<host>[:<port>]/<dbname>\n```", "```py\nmysql+mysqlconnector://<user>:<password>@<host>[:<port>]/<dbname>\n```", "```py\nmysql+mysqlconnector://<user>:<password>@<host>[:<port>]/<dbname>\n```", "```py\nmysql+asyncmy://user:password@host:port/dbname[?key=value&key=value...]\n```", "```py\nfrom sqlalchemy.ext.asyncio import create_async_engine\nengine = create_async_engine(\"mysql+asyncmy://user:pass@hostname/dbname?charset=utf8mb4\")\n```", "```py\nmysql+asyncmy://user:password@host:port/dbname[?key=value&key=value...]\n```", "```py\nmysql+aiomysql://user:password@host:port/dbname[?key=value&key=value...]\n```", "```py\nfrom sqlalchemy.ext.asyncio import create_async_engine\nengine = create_async_engine(\"mysql+aiomysql://user:pass@hostname/dbname?charset=utf8mb4\")\n```", "```py\nmysql+aiomysql://user:password@host:port/dbname[?key=value&key=value...]\n```", "```py\nmysql+cymysql://<username>:<password>@<host>/<dbname>[?<options>]\n```", "```py\nmysql+cymysql://<username>:<password>@<host>/<dbname>[?<options>]\n```", "```py\nmysql+pyodbc://<username>:<password>@<dsnname>\n```", "```py\nimport urllib\nconnection_string = (\n    'DRIVER=MySQL ODBC 8.0 ANSI Driver;'\n    'SERVER=localhost;'\n    'PORT=3307;'\n    'DATABASE=mydb;'\n    'UID=root;'\n    'PWD=(whatever);'\n    'charset=utf8mb4;'\n)\nparams = urllib.parse.quote_plus(connection_string)\nconnection_uri = \"mysql+pyodbc:///?odbc_connect=%s\" % params\n```", "```py\nmysql+pyodbc://<username>:<password>@<dsnname>\n```"]