- en: jax.stages module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/jax.stages.html`](https://jax.readthedocs.io/en/latest/jax.stages.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Interfaces to stages of the compiled execution process.
  prefs: []
  type: TYPE_NORMAL
- en: JAX transformations that compile just in time for execution, such as `jax.jit`
    and `jax.pmap`, also support a common means of explicit lowering and compilation
    *ahead of time*. This module defines types that represent the stages of this process.
  prefs: []
  type: TYPE_NORMAL
- en: For more, see the [AOT walkthrough](https://jax.readthedocs.io/en/latest/aot.html).
  prefs: []
  type: TYPE_NORMAL
- en: Classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A function ready to be traced, lowered, and compiled.
  prefs: []
  type: TYPE_NORMAL
- en: This protocol reflects the output of functions such as `jax.jit`. Calling it
    results in JIT (just-in-time) lowering, compilation, and execution. It can also
    be explicitly lowered prior to compilation, and the result compiled prior to execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Executes the wrapped function, lowering and compiling as needed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Lower this function explicitly for the given arguments.
  prefs: []
  type: TYPE_NORMAL
- en: A lowered function is staged out of Python and translated to a compiler’s input
    language, possibly in a backend-dependent manner. It is ready for compilation
    but not yet compiled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A `Lowered` instance representing the lowering.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Lowered*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Trace this function explicitly for the given arguments.
  prefs: []
  type: TYPE_NORMAL
- en: A traced function is staged out of Python and translated to a jaxpr. It is ready
    for lowering but not yet lowered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: A `Traced` instance representing the tracing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Traced*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Lowering of a function specialized to argument types and values.
  prefs: []
  type: TYPE_NORMAL
- en: A lowering is a computation ready for compilation. This class carries a lowering
    together with the remaining information needed to later compile and execute it.
    It also provides a common API for querying properties of lowered computations
    across JAX’s various lowering paths (`jit()`, `pmap()`, etc.).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**lowering** (*XlaLowering*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**args_info** ([*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)"))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**out_tree** (*PyTreeDef*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**no_kwargs** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)"))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: A human-readable text representation of this lowering.
  prefs: []
  type: TYPE_NORMAL
- en: Intended for visualization and debugging purposes. This need not be a valid
    nor reliable serialization. It is relayed directly to external callers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dialect** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)") *|* *None*) – Optional string specifying a lowering dialect (e.g.
    “stablehlo”)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Compile, returning a corresponding `Compiled` instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**compiler_options** ([*dict*](https://docs.python.org/3/library/stdtypes.html#dict
    "(in Python v3.12)")*[*[*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")*,* [*str*](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)") *|* [*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)")*]* *|* *None*)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Compiled*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: An arbitrary object representation of this lowering.
  prefs: []
  type: TYPE_NORMAL
- en: Intended for debugging purposes. This is not a valid nor reliable serialization.
    The output has no guarantee of consistency across invocations.
  prefs: []
  type: TYPE_NORMAL
- en: Returns `None` if unavailable, e.g. based on backend, compiler, or runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dialect** ([*str*](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)") *|* *None*) – Optional string specifying a lowering dialect (e.g.
    “stablehlo”)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(in Python
    v3.12)") | None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: A summary of execution cost estimates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Intended for visualization and debugging purposes. The object output by this
    is some simple data structure that can easily be printed or serialized (e.g. nested
    dicts, lists, and tuples with numeric leaves). However, its structure can be arbitrary:
    it may be inconsistent across versions of JAX and jaxlib, or even across invocations.'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `None` if unavailable, e.g. based on backend, compiler, or runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(in Python
    v3.12)") | None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Tree structure of the pair (positional arguments, keyword arguments).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Compiled representation of a function specialized to types/values.
  prefs: []
  type: TYPE_NORMAL
- en: A compiled computation is associated with an executable and the remaining information
    needed to execute it. It also provides a common API for querying properties of
    compiled computations across JAX’s various compilation paths and backends.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args_info** ([*Any*](https://docs.python.org/3/library/typing.html#typing.Any
    "(in Python v3.12)"))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**out_tree** (*PyTreeDef*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Call self as a function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: A human-readable text representation of this executable.
  prefs: []
  type: TYPE_NORMAL
- en: Intended for visualization and debugging purposes. This is not a valid nor reliable
    serialization.
  prefs: []
  type: TYPE_NORMAL
- en: Returns `None` if unavailable, e.g. based on backend, compiler, or runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.12)")
    | None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: A summary of execution cost estimates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Intended for visualization and debugging purposes. The object output by this
    is some simple data structure that can easily be printed or serialized (e.g. nested
    dicts, lists, and tuples with numeric leaves). However, its structure can be arbitrary:
    it may be inconsistent across versions of JAX and jaxlib, or even across invocations.'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `None` if unavailable, e.g. based on backend, compiler, or runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(in Python
    v3.12)") | None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Tree structure of the pair (positional arguments, keyword arguments).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: A summary of estimated memory requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Intended for visualization and debugging purposes. The object output by this
    is some simple data structure that can easily be printed or serialized (e.g. nested
    dicts, lists, and tuples with numeric leaves). However, its structure can be arbitrary:
    it may be inconsistent across versions of JAX and jaxlib, or even across invocations.'
  prefs: []
  type: TYPE_NORMAL
- en: Returns `None` if unavailable, e.g. based on backend, compiler, or runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(in Python
    v3.12)") | None'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: An arbitrary object representation of this executable.
  prefs: []
  type: TYPE_NORMAL
- en: Intended for debugging purposes. This is not valid nor reliable serialization.
    The output has no guarantee of consistency across invocations.
  prefs: []
  type: TYPE_NORMAL
- en: Returns `None` if unavailable, e.g. based on backend, compiler, or runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Any*](https://docs.python.org/3/library/typing.html#typing.Any "(in Python
    v3.12)") | None'
  prefs: []
  type: TYPE_NORMAL
