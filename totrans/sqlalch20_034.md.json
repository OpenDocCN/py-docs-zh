["```py\nclass Node(Base):\n    __tablename__ = \"node\"\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(Integer, ForeignKey(\"node.id\"))\n    data = mapped_column(String(50))\n    children = relationship(\"Node\")\n```", "```py\nroot --+---> child1\n       +---> child2 --+--> subchild1\n       |              +--> subchild2\n       +---> child3\n```", "```py\nid       parent_id     data\n---      -------       ----\n1        NULL          root\n2        1             child1\n3        1             child2\n4        3             subchild1\n5        3             subchild2\n6        1             child3\n```", "```py\nclass Node(Base):\n    __tablename__ = \"node\"\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(Integer, ForeignKey(\"node.id\"))\n    data = mapped_column(String(50))\n    parent = relationship(\"Node\", remote_side=[id])\n```", "```py\nclass Node(Base):\n    __tablename__ = \"node\"\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(Integer, ForeignKey(\"node.id\"))\n    data = mapped_column(String(50))\n    children = relationship(\"Node\", back_populates=\"parent\")\n    parent = relationship(\"Node\", back_populates=\"children\", remote_side=[id])\n```", "```py\nclass Folder(Base):\n    __tablename__ = \"folder\"\n    __table_args__ = (\n        ForeignKeyConstraint(\n            [\"account_id\", \"parent_id\"], [\"folder.account_id\", \"folder.folder_id\"]\n        ),\n    )\n\n    account_id = mapped_column(Integer, primary_key=True)\n    folder_id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(Integer)\n    name = mapped_column(String)\n\n    parent_folder = relationship(\n        \"Folder\", back_populates=\"child_folders\", remote_side=[account_id, folder_id]\n    )\n\n    child_folders = relationship(\"Folder\", back_populates=\"parent_folder\")\n```", "```py\n# get all nodes named 'child2'\nsession.scalars(select(Node).where(Node.data == \"child2\"))\n```", "```py\nfrom sqlalchemy.orm import aliased\n\nnodealias = aliased(Node)\nsession.scalars(\n    select(Node)\n    .where(Node.data == \"subchild1\")\n    .join(Node.parent.of_type(nodealias))\n    .where(nodealias.data == \"child2\")\n).all()\nSELECT  node.id  AS  node_id,\n  node.parent_id  AS  node_parent_id,\n  node.data  AS  node_data\nFROM  node  JOIN  node  AS  node_1\n  ON  node.parent_id  =  node_1.id\nWHERE  node.data  =  ?\n  AND  node_1.data  =  ?\n['subchild1',  'child2'] \n```", "```py\nclass Node(Base):\n    __tablename__ = \"node\"\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(Integer, ForeignKey(\"node.id\"))\n    data = mapped_column(String(50))\n    children = relationship(\"Node\", lazy=\"joined\", join_depth=2)\n\nsession.scalars(select(Node)).all()\nSELECT  node_1.id  AS  node_1_id,\n  node_1.parent_id  AS  node_1_parent_id,\n  node_1.data  AS  node_1_data,\n  node_2.id  AS  node_2_id,\n  node_2.parent_id  AS  node_2_parent_id,\n  node_2.data  AS  node_2_data,\n  node.id  AS  node_id,\n  node.parent_id  AS  node_parent_id,\n  node.data  AS  node_data\nFROM  node\n  LEFT  OUTER  JOIN  node  AS  node_2\n  ON  node.id  =  node_2.parent_id\n  LEFT  OUTER  JOIN  node  AS  node_1\n  ON  node_2.id  =  node_1.parent_id\n[] \n```", "```py\nclass Folder(Base):\n    __tablename__ = \"folder\"\n    __table_args__ = (\n        ForeignKeyConstraint(\n            [\"account_id\", \"parent_id\"], [\"folder.account_id\", \"folder.folder_id\"]\n        ),\n    )\n\n    account_id = mapped_column(Integer, primary_key=True)\n    folder_id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(Integer)\n    name = mapped_column(String)\n\n    parent_folder = relationship(\n        \"Folder\", back_populates=\"child_folders\", remote_side=[account_id, folder_id]\n    )\n\n    child_folders = relationship(\"Folder\", back_populates=\"parent_folder\")\n```", "```py\n# get all nodes named 'child2'\nsession.scalars(select(Node).where(Node.data == \"child2\"))\n```", "```py\nfrom sqlalchemy.orm import aliased\n\nnodealias = aliased(Node)\nsession.scalars(\n    select(Node)\n    .where(Node.data == \"subchild1\")\n    .join(Node.parent.of_type(nodealias))\n    .where(nodealias.data == \"child2\")\n).all()\nSELECT  node.id  AS  node_id,\n  node.parent_id  AS  node_parent_id,\n  node.data  AS  node_data\nFROM  node  JOIN  node  AS  node_1\n  ON  node.parent_id  =  node_1.id\nWHERE  node.data  =  ?\n  AND  node_1.data  =  ?\n['subchild1',  'child2'] \n```", "```py\nclass Node(Base):\n    __tablename__ = \"node\"\n    id = mapped_column(Integer, primary_key=True)\n    parent_id = mapped_column(Integer, ForeignKey(\"node.id\"))\n    data = mapped_column(String(50))\n    children = relationship(\"Node\", lazy=\"joined\", join_depth=2)\n\nsession.scalars(select(Node)).all()\nSELECT  node_1.id  AS  node_1_id,\n  node_1.parent_id  AS  node_1_parent_id,\n  node_1.data  AS  node_1_data,\n  node_2.id  AS  node_2_id,\n  node_2.parent_id  AS  node_2_parent_id,\n  node_2.data  AS  node_2_data,\n  node.id  AS  node_id,\n  node.parent_id  AS  node_parent_id,\n  node.data  AS  node_data\nFROM  node\n  LEFT  OUTER  JOIN  node  AS  node_2\n  ON  node.id  =  node_2.parent_id\n  LEFT  OUTER  JOIN  node  AS  node_1\n  ON  node_2.id  =  node_1.parent_id\n[] \n```"]