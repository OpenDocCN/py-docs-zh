["```py\nimport numpy as np\nnp.dtype(np.int32(1) + np.float32(1)) \n```", "```py\ndtype('float64') \n```", "```py\nimport pandas as pd\ntypes = [int, float, complex]\nname = lambda t: t.__name__\npd.DataFrame([[name(type(t1(1) + t2(1))) for t1 in types] for t2 in types],\n             index=[name(t) for t in types], columns=[name(t) for t in types]) \n```", "```py\n#@title\nimport networkx as nx\nimport matplotlib.pyplot as plt\nlattice = {'int': ['float'], 'float': ['complex']}\ngraph = nx.from_dict_of_lists(lattice, create_using=nx.DiGraph)\npos = {'int': [0, 0], 'float': [1, 0], 'complex': [2, 0]}\nfig, ax = plt.subplots(figsize=(8, 2))\nnx.draw(graph, with_labels=True, node_size=4000, node_color='lightgray', pos=pos, ax=ax, arrowsize=20) \n```", "```py\n#@title\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(1, 2, figsize=(10, 2))\n\nlattice = {'A': ['B', 'C']}\ngraph = nx.from_dict_of_lists(lattice, create_using=nx.DiGraph)\npos = {'A': [0, 0], 'B': [1, 0.5], 'C': [1, -0.5]}\nnx.draw(graph, with_labels=True, node_size=2000, node_color='lightgray', pos=pos, ax=ax[0], arrowsize=20)\nax[0].set(xlim=[-0.5, 1.5], ylim=[-1, 1])\n\nlattice = {'A': ['C', 'D'], 'B': ['C', 'D']}\ngraph = nx.from_dict_of_lists(lattice, create_using=nx.DiGraph)\npos = {'A': [0, 0.5], 'B': [0, -0.5], 'C': [1, 0.5], 'D': [1, -0.5]}\nnx.draw(graph, with_labels=True, node_size=2000, node_color='lightgray', pos=pos, ax=ax[1], arrowsize=20)\nax[1].set(xlim=[-0.5, 1.5], ylim=[-1, 1]); \n```", "```py\nimport numpy as np\na, b, c = np.int8(1), np.uint8(1), np.float16(1)\nprint(np.dtype((a + b) + c))\nprint(np.dtype(a + (b + c))) \n```", "```py\nfloat32\nfloat16 \n```", "```py\n#@title\nimport networkx as nx\nimport matplotlib.pyplot as plt\nlattice = {\n  'u8': ['u16'], 'u16': ['u32'], 'u32': ['u64'],\n  'i8': ['i16'], 'i16': ['i32'], 'i32': ['i64'],\n  'f16': ['f32'], 'f32': ['f64'],\n  'c64': ['c128']\n}\ngraph = nx.from_dict_of_lists(lattice, create_using=nx.DiGraph)\npos = {\n  'u8': [0, 0], 'u16': [1, 0], 'u32': [2, 0], 'u64': [3, 0],\n  'i8': [0, 1], 'i16': [1, 1], 'i32': [2, 1], 'i64': [3, 1],\n  'f16': [1, 2], 'f32': [2, 2], 'f64': [3, 2],\n  'c64': [2, 3], 'c128': [3, 3],\n}\nfig, ax = plt.subplots(figsize=(6, 4))\nnx.draw(graph, with_labels=True, node_size=1500, node_color='lightgray', pos=pos, ax=ax) \n```", "```py\nx = np.int8(0)  # int8 scalar\ny = 1  # Python int = int64 scalar\n(x + y).dtype \n```", "```py\ndtype('int64') \n```", "```py\nx = np.zeros(1, dtype='int8')  # int8 array\ny = 1  # Python int = int64 scalar\n(x + y).dtype \n```", "```py\ndtype('int8') \n```", "```py\nx = np.zeros(1, dtype='int8')  # int8 array\ny = 1000  # int64 scalar\n(x + y).dtype \n```", "```py\ndtype('int16') \n```", "```py\n#@title\nimport networkx as nx\nimport matplotlib.pyplot as plt\nlattice = {\n  'i8*': ['i16*'], 'i16*': ['i32*'], 'i32*': ['i64*'], 'i64*': ['i8'],\n  'i8': ['i16'], 'i16': ['i32'], 'i32': ['i64']\n}\ngraph = nx.from_dict_of_lists(lattice, create_using=nx.DiGraph)\npos = {\n  'i8*': [0, 1], 'i16*': [2, 1], 'i32*': [4, 1], 'i64*': [6, 1],\n  'i8': [9, 1], 'i16': [11, 1], 'i32': [13, 1], 'i64': [15, 1],\n}\nfig, ax = plt.subplots(figsize=(12, 4))\nnx.draw(graph, with_labels=True, node_size=1500, node_color='lightgray', pos=pos, ax=ax)\nax.text(3, 1.6, \"Scalar Types\", ha='center', fontsize=14)\nax.text(12, 1.6, \"Array Types\", ha='center', fontsize=14)\nax.set_ylim(-1, 3); \n```", "```py\n#@title\nimport networkx as nx\nimport matplotlib.pyplot as plt\nlattice = {\n  'u*': ['u8'], 'u8': ['u16'], 'u16': ['u32'], 'u32': ['u64'],\n  'i*': ['i8'], 'i8': ['i16'], 'i16': ['i32'], 'i32': ['i64'],\n  'f*': ['f16'], 'f16': ['f32'], 'f32': ['f64'],\n  'c*': ['c64'], 'c64': ['c128']\n}\ngraph = nx.from_dict_of_lists(lattice, create_using=nx.DiGraph)\npos = {\n  'u*': [0, 0], 'u8': [3, 0], 'u16': [5, 0], 'u32': [7, 0], 'u64': [9, 0],\n  'i*': [0, 1], 'i8': [3, 1], 'i16': [5, 1], 'i32': [7, 1], 'i64': [9, 1],\n  'f*': [0, 2], 'f16': [5, 2], 'f32': [7, 2], 'f64': [9, 2],\n  'c*': [0, 3], 'c64': [7, 3], 'c128': [9, 3],\n}\nfig, ax = plt.subplots(figsize=(6, 4))\nnx.draw(graph, with_labels=True, node_size=1500, node_color='lightgray', pos=pos, ax=ax) \n```", "```py\nfor dtype in [np.int8, np.int16, np.int32, np.int64]:\n  x = np.arange(10, dtype=dtype)\n  assert (x + 2).dtype == dtype \n```", "```py\n3 * (x + 1) ** 2 \n```", "```py\nnp.int32(3) * (x + np.int32(1)) ** np.int32(2) \n```", "```py\n#@title\nimport networkx as nx\nimport matplotlib.pyplot as plt\nlattice = {\n  'i*': ['f*', 'u8', 'i8'], 'f*': ['c*', 'f16'], 'c*': ['c64'],\n  'u8': ['u16'], 'u16': ['u32'], 'u32': ['u64'],\n  'i8': ['i16'], 'i16': ['i32'], 'i32': ['i64'],\n  'f16': ['f32'], 'f32': ['f64'],\n  'c64': ['c128']\n}\ngraph = nx.from_dict_of_lists(lattice, create_using=nx.DiGraph)\npos = {\n  'i*': [-1.25, 0.5], 'f*': [-0.5, 2], 'c*': [0, 3],\n  'u8': [0.5, 0], 'u16': [1.5, 0], 'u32': [2.5, 0], 'u64': [3.5, 0],\n  'i8': [0, 1], 'i16': [1, 1], 'i32': [2, 1], 'i64': [3, 1],\n  'f16': [0.5, 2], 'f32': [1.5, 2], 'f64': [2.5, 2],\n  'c64': [2, 3], 'c128': [3, 3],\n}\nfig, ax = plt.subplots(figsize=(6, 5))\nnx.draw(graph, with_labels=True, node_size=1500, node_color='lightgray', pos=pos, ax=ax) \n```", "```py\n#@title\nimport networkx as nx\nimport matplotlib.pyplot as plt\nlattice = {\n  'i*': ['f*', 'u8', 'i8'], 'f*': ['c*', 'f16'], 'c*': ['c64'],\n  'u8': ['u16'], 'u16': ['u32'], 'u32': ['u64'],\n  'i8': ['i16'], 'i16': ['i32'], 'i32': ['i64'],\n  'f16': ['f32'], 'f32': ['f64', 'c64'], 'f64': ['c128'],\n  'c64': ['c128']\n}\ngraph = nx.from_dict_of_lists(lattice, create_using=nx.DiGraph)\npos = {\n  'i*': [-1.25, 0.5], 'f*': [-0.5, 2], 'c*': [0, 3],\n  'u8': [0.5, 0], 'u16': [1.5, 0], 'u32': [2.5, 0], 'u64': [3.5, 0],\n  'i8': [0, 1], 'i16': [1, 1], 'i32': [2, 1], 'i64': [3, 1],\n  'f16': [0.5, 2], 'f32': [1.5, 2], 'f64': [2.5, 2],\n  'c64': [2, 3], 'c128': [3, 3],\n}\nfig, ax = plt.subplots(figsize=(6, 5))\nnx.draw(graph, with_labels=True, node_size=1500, node_color='lightgray', pos=pos, ax=ax) \n```", "```py\n#@title\nimport networkx as nx\nimport matplotlib.pyplot as plt\nlattice = {\n  'i*': ['f*', 'u8', 'i8'], 'f*': ['c*', 'f16'], 'c*': ['c64'],\n  'u8': ['u16', 'i16'], 'u16': ['u32', 'i32'], 'u32': ['u64', 'i64'],\n  'i8': ['i16'], 'i16': ['i32'], 'i32': ['i64'],\n  'f16': ['f32'], 'f32': ['f64', 'c64'], 'f64': ['c128'],\n  'c64': ['c128']\n}\ngraph = nx.from_dict_of_lists(lattice, create_using=nx.DiGraph)\npos = {\n  'i*': [-1.25, 0.5], 'f*': [-0.5, 2], 'c*': [0, 3],\n  'u8': [0.5, 0], 'u16': [1.5, 0], 'u32': [2.5, 0], 'u64': [3.5, 0],\n  'i8': [0, 1], 'i16': [1, 1], 'i32': [2, 1], 'i64': [3, 1],\n  'f16': [0.5, 2], 'f32': [1.5, 2], 'f64': [2.5, 2],\n  'c64': [2, 3], 'c128': [3, 3],\n}\nfig, ax = plt.subplots(figsize=(6, 5))\nnx.draw(graph, with_labels=True, node_size=1500, node_color='lightgray', pos=pos, ax=ax) \n```", "```py\n(np.uint64(1) + np.int64(1)).dtype \n```", "```py\ndtype('float64') \n```", "```py\n#@title\nimport networkx as nx\nimport matplotlib.pyplot as plt\nlattice = {\n  'i*': ['f*', 'u8', 'i8'], 'f*': ['c*', 'f16'], 'c*': ['c64'],\n  'u8': ['u16', 'i16', 'f16'], 'u16': ['u32', 'i32', 'f32'], 'u32': ['u64', 'i64', 'f64'],\n  'i8': ['i16', 'f16'], 'i16': ['i32', 'f32'], 'i32': ['i64', 'f64'],\n  'f16': ['f32'], 'f32': ['f64', 'c64'], 'f64': ['c128'],\n  'c64': ['c128']\n}\ngraph = nx.from_dict_of_lists(lattice, create_using=nx.DiGraph)\npos = {\n  'i*': [-1.25, 0.5], 'f*': [-0.5, 2], 'c*': [0, 3],\n  'u8': [0.5, 0], 'u16': [1.5, 0], 'u32': [2.5, 0], 'u64': [3.5, 0],\n  'i8': [0, 1], 'i16': [1, 1], 'i32': [2, 1], 'i64': [3, 1],\n  'f16': [0.5, 2], 'f32': [1.5, 2], 'f64': [2.5, 2],\n  'c64': [2, 3], 'c128': [3, 3],\n}\nfig, ax = plt.subplots(figsize=(6, 5))\nnx.draw(graph, with_labels=True, node_size=1500, node_color='lightgray', pos=pos, ax=ax) \n```", "```py\n#@title\nimport networkx as nx\nimport matplotlib.pyplot as plt\nlattice = {\n  'i*': ['f*', 'u8', 'i8'], 'f*': ['c*', 'f16'], 'c*': ['c64'],\n  'u8': ['u16', 'i16'], 'u16': ['u32', 'i32'], 'u32': ['u64', 'i64'],\n  'i8': ['i16', 'f16'], 'i16': ['i32', 'f32'], 'i32': ['i64', 'f64'],\n  'f16': ['f32'], 'f32': ['f64', 'c64'], 'f64': ['c128'],\n  'c64': ['c128']\n}\ngraph = nx.from_dict_of_lists(lattice, create_using=nx.DiGraph)\npos = {\n  'i*': [-1.25, 0.5], 'f*': [-0.5, 2], 'c*': [0, 3],\n  'u8': [0.5, 0], 'u16': [1.5, 0], 'u32': [2.5, 0], 'u64': [3.5, 0],\n  'i8': [0, 1], 'i16': [1, 1], 'i32': [2, 1], 'i64': [3, 1],\n  'f16': [0.5, 2], 'f32': [1.5, 2], 'f64': [2.5, 2],\n  'c64': [2, 3], 'c128': [3, 3],\n}\nfig, ax = plt.subplots(figsize=(6, 5))\nnx.draw(graph, with_labels=True, node_size=1500, node_color='lightgray', pos=pos, ax=ax) \n```", "```py\n#@title\nimport networkx as nx\nimport matplotlib.pyplot as plt\nlattice = {\n  'i*': ['f*', 'u8', 'i8'], 'f*': ['c*', 'f16'], 'c*': ['c64'],\n  'u8': ['u16', 'i16'], 'u16': ['u32', 'i32'], 'u32': ['u64', 'i64'],\n  'i8': ['i16'], 'i16': ['f16', 'i32'], 'i32': ['f32', 'i64'], 'i64': ['f64'],\n  'f16': ['f32'], 'f32': ['f64', 'c64'], 'f64': ['c128'],\n  'c64': ['c128']\n}\ngraph = nx.from_dict_of_lists(lattice, create_using=nx.DiGraph)\npos = {\n  'i*': [-1.25, 0.5], 'f*': [-0.5, 2], 'c*': [0, 3],\n  'u8': [0.5, 0], 'u16': [1.5, 0], 'u32': [2.5, 0], 'u64': [3.5, 0],\n  'i8': [0, 1], 'i16': [1, 1], 'i32': [2, 1], 'i64': [3, 1],\n  'f16': [1.5, 2], 'f32': [2.5, 2], 'f64': [3.5, 2],\n  'c64': [3, 3], 'c128': [4, 3],\n}\nfig, ax = plt.subplots(figsize=(6, 5))\nnx.draw(graph, with_labels=True, node_size=1500, node_color='lightgray', pos=pos, ax=ax) \n```", "```py\n#@title\nimport networkx as nx\nimport matplotlib.pyplot as plt\nlattice = {\n  'i*': ['u8', 'i8'], 'f*': ['c*', 'f16'], 'c*': ['c64'],\n  'u8': ['u16', 'i16'], 'u16': ['u32', 'i32'], 'u32': ['u64', 'i64'],\n  'i8': ['i16'], 'i16': ['i32'], 'i32': ['i64'], 'i64': ['f*'],\n  'f16': ['f32'], 'f32': ['f64', 'c64'], 'f64': ['c128'],\n  'c64': ['c128']\n}\ngraph = nx.from_dict_of_lists(lattice, create_using=nx.DiGraph)\npos = {\n  'i*': [-1.25, 0.5], 'f*': [-0.5, 2], 'c*': [0, 3],\n  'u8': [0.5, 0], 'u16': [1.5, 0], 'u32': [2.5, 0], 'u64': [3.5, 0],\n  'i8': [0, 1], 'i16': [1, 1], 'i32': [2, 1], 'i64': [3, 1],\n  'f16': [1.5, 2], 'f32': [2.5, 2], 'f64': [3.5, 2],\n  'c64': [3, 3], 'c128': [4, 3],\n}\nfig, ax = plt.subplots(figsize=(6, 5))\nnx.draw(graph, with_labels=True, node_size=1500, node_color='lightgray', pos=pos, ax=ax) \n```", "```py\n#@title\nimport networkx as nx\nimport matplotlib.pyplot as plt\nlattice = {\n  'i*': ['u8', 'i8'], 'f*': ['c*', 'f16', 'bf16'], 'c*': ['c64'],\n  'u8': ['u16', 'i16'], 'u16': ['u32', 'i32'], 'u32': ['u64', 'i64'],\n  'i8': ['i16'], 'i16': ['i32'], 'i32': ['i64'], 'i64': ['f*'],\n  'f16': ['f32'], 'bf16': ['f32'], 'f32': ['f64', 'c64'], 'f64': ['c128'],\n  'c64': ['c128']\n}\ngraph = nx.from_dict_of_lists(lattice, create_using=nx.DiGraph)\npos = {\n  'i*': [-1.25, 0.5], 'f*': [-0.5, 2], 'c*': [0, 3],\n  'u8': [0.5, 0], 'u16': [1.5, 0], 'u32': [2.5, 0], 'u64': [3.5, 0],\n  'i8': [0, 1], 'i16': [1, 1], 'i32': [2, 1], 'i64': [3, 1],\n  'f16': [1.8, 1.7], 'bf16': [1.8, 2.3], 'f32': [3.0, 2], 'f64': [4.0, 2],\n  'c64': [3.5, 3], 'c128': [4.5, 3],\n}\nfig, ax = plt.subplots(figsize=(6, 5))\nnx.draw(graph, with_labels=True, node_size=1500, node_color='lightgray', pos=pos, ax=ax) \n```", "```py\n#@title\nimport networkx as nx\nimport matplotlib.pyplot as plt\nlattice = {\n  'i*': ['u8', 'i8'], 'f*': ['c*', 'f16', 'bf16'], 'c*': ['c64'],\n  'u8': ['u16', 'i16'], 'u16': ['u32', 'i32'], 'u32': ['u64', 'i64'], 'u64': ['f*'],\n  'i8': ['i16'], 'i16': ['i32'], 'i32': ['i64'], 'i64': ['f*'],\n  'f16': ['f32'], 'bf16': ['f32'], 'f32': ['f64', 'c64'], 'f64': ['c128'],\n  'c64': ['c128']\n}\ngraph = nx.from_dict_of_lists(lattice, create_using=nx.DiGraph)\npos = {\n  'i*': [-1.25, 0.5], 'f*': [4.5, 0.5], 'c*': [5, 1.5],\n  'u8': [0.5, 0], 'u16': [1.5, 0], 'u32': [2.5, 0], 'u64': [3.5, 0],\n  'i8': [0, 1], 'i16': [1, 1], 'i32': [2, 1], 'i64': [3, 1],\n  'f16': [5.75, 0.8], 'bf16': [5.75, 0.2], 'f32': [7, 0.5], 'f64': [8, 0.5],\n  'c64': [7.5, 1.5], 'c128': [8.5, 1.5],\n}\nfig, ax = plt.subplots(figsize=(10, 4))\nax.set_ylim(-0.5, 2)\nnx.draw(graph, with_labels=True, node_size=1500, node_color='lightgray', pos=pos, ax=ax)\n# ax.patches[12].set_linestyle((0, (2, 4))) \n```", "```py\n# @title\n\nimport numpy as np\nimport pandas as pd\nfrom IPython import display\n\nnp_dtypes = {\n  'b': np.bool_,\n  'u8': np.uint8, 'u16': np.uint16, 'u32': np.uint32, 'u64': np.uint64,\n  'i8': np.int8, 'i16': np.int16, 'i32': np.int32, 'i64': np.int64,\n  'bf16': 'invalid', 'f16': np.float16, 'f32': np.float32, 'f64': np.float64,\n  'c64': np.complex64, 'c128': np.complex128,\n  'i*': int, 'f*': float, 'c*': complex}\n\nnp_dtype_to_code = {val: key for key, val in np_dtypes.items()}\n\ndef make_np_zero(dtype):\n  if dtype in {int, float, complex}:\n    return dtype(0)\n  else:\n    return np.zeros(1, dtype=dtype)\n\ndef np_result_code(dtype1, dtype2):\n  try:\n    out = np.add(make_np_zero(dtype1), make_np_zero(dtype2))\n  except TypeError:\n    return '-'\n  else:\n    if type(out) in {int, float, complex}:\n      return np_dtype_to_code[type(out)]\n    else:\n      return np_dtype_to_code[out.dtype.type]\n\ngrid = [[np_result_code(dtype1, dtype2)\n         for dtype2 in np_dtypes.values()]\n        for dtype1 in np_dtypes.values()]\ntable = pd.DataFrame(grid, index=np_dtypes.keys(), columns=np_dtypes.keys())\ndisplay.HTML(table.to_html()) \n```", "```py\n# @title\n\nimport tensorflow as tf\nimport pandas as pd\nfrom IPython import display\n\ntf_dtypes = {\n  'b': tf.bool,\n  'u8': tf.uint8, 'u16': tf.uint16, 'u32': tf.uint32, 'u64': tf.uint64,\n  'i8': tf.int8, 'i16': tf.int16, 'i32': tf.int32, 'i64': tf.int64,\n  'bf16': tf.bfloat16, 'f16': tf.float16, 'f32': tf.float32, 'f64': tf.float64,\n  'c64': tf.complex64, 'c128': tf.complex128,\n  'i*': int, 'f*': float, 'c*': complex}\n\ntf_dtype_to_code = {val: key for key, val in tf_dtypes.items()}\n\ndef make_tf_zero(dtype):\n  if dtype in {int, float, complex}:\n    return dtype(0)\n  else:\n    return tf.zeros(1, dtype=dtype)\n\ndef result_code(dtype1, dtype2):\n  try:\n    out = tf.add(make_tf_zero(dtype1), make_tf_zero(dtype2))\n  except (TypeError, tf.errors.InvalidArgumentError):\n    return '-'\n  else:\n    if type(out) in {int, float, complex}:\n      return tf_dtype_to_code[type(out)]\n    else:\n      return tf_dtype_to_code[out.dtype]\n\ngrid = [[result_code(dtype1, dtype2)\n         for dtype2 in tf_dtypes.values()]\n        for dtype1 in tf_dtypes.values()]\ntable = pd.DataFrame(grid, index=tf_dtypes.keys(), columns=tf_dtypes.keys())\ndisplay.HTML(table.to_html()) \n```", "```py\n# @title\nimport torch\nimport pandas as pd\nfrom IPython import display\n\ntorch_dtypes = {\n  'b': torch.bool,\n  'u8': torch.uint8, 'u16': 'invalid', 'u32': 'invalid', 'u64': 'invalid',\n  'i8': torch.int8, 'i16': torch.int16, 'i32': torch.int32, 'i64': torch.int64,\n  'bf16': torch.bfloat16, 'f16': torch.float16, 'f32': torch.float32, 'f64': torch.float64,\n  'c64': torch.complex64, 'c128': torch.complex128,\n  'i*': int, 'f*': float, 'c*': complex}\n\ntorch_dtype_to_code = {val: key for key, val in torch_dtypes.items()}\n\ndef make_torch_zero(dtype):\n  if dtype in {int, float, complex}:\n    return dtype(0)\n  else:\n    return torch.zeros(1, dtype=dtype)\n\ndef torch_result_code(dtype1, dtype2):\n  try:\n    out = torch.add(make_torch_zero(dtype1), make_torch_zero(dtype2))\n  except TypeError:\n    return '-'\n  else:\n    if type(out) in {int, float, complex}:\n      return torch_dtype_to_code[type(out)]\n    else:\n      return torch_dtype_to_code[out.dtype]\n\ngrid = [[torch_result_code(dtype1, dtype2)\n         for dtype2 in torch_dtypes.values()]\n        for dtype1 in torch_dtypes.values()]\ntable = pd.DataFrame(grid, index=torch_dtypes.keys(), columns=torch_dtypes.keys())\ndisplay.HTML(table.to_html()) \n```", "```py\n# @title\nfrom jax import dtypes\nimport jax\nimport jax.numpy as jnp\nimport pandas as pd\nfrom IPython import display\njax.config.update('jax_enable_x64', True)\n\njnp_dtypes = {\n  'b': jnp.bool_.dtype,\n  'u8': jnp.uint8.dtype, 'u16': jnp.uint16.dtype, 'u32': jnp.uint32.dtype, 'u64': jnp.uint64.dtype,\n  'i8': jnp.int8.dtype, 'i16': jnp.int16.dtype, 'i32': jnp.int32.dtype, 'i64': jnp.int64.dtype,\n  'bf16': jnp.bfloat16.dtype, 'f16': jnp.float16.dtype, 'f32': jnp.float32.dtype, 'f64': jnp.float64.dtype,\n  'c64': jnp.complex64.dtype, 'c128': jnp.complex128.dtype,\n  'i*': int, 'f*': float, 'c*': complex}\n\njnp_dtype_to_code = {val: key for key, val in jnp_dtypes.items()}\n\ndef make_jnp_zero(dtype):\n  if dtype in {int, float, complex}:\n    return dtype(0)\n  else:\n    return jnp.zeros((), dtype=dtype)\n\ndef jnp_result_code(dtype1, dtype2):\n  try:\n    out = jnp.add(make_jnp_zero(dtype1), make_jnp_zero(dtype2))\n  except TypeError:\n    return '-'\n  else:\n    if hasattr(out, 'aval') and out.aval.weak_type:\n      return out.dtype.kind + '*'\n    elif type(out) in {int, float, complex}:\n      return jnp_dtype_to_code[type(out)]\n    else:\n      return jnp_dtype_to_code[out.dtype]\n\ngrid = [[jnp_result_code(dtype1, dtype2)\n         for dtype2 in jnp_dtypes.values()]\n        for dtype1 in jnp_dtypes.values()]\ntable = pd.DataFrame(grid, index=jnp_dtypes.keys(), columns=jnp_dtypes.keys())\ndisplay.HTML(table.to_html()) \n```", "```py\n# @title\nfrom jax import dtypes\nimport jax\nimport jax.numpy as jnp\nimport pandas as pd\nfrom IPython import display\njax.config.update('jax_enable_x64', True)\n\njnp_dtypes = {\n  'b': jnp.bool_.dtype,\n  'u8': jnp.uint8.dtype, 'u16': jnp.uint16.dtype, 'u32': jnp.uint32.dtype, 'u64': jnp.uint64.dtype,\n  'i8': jnp.int8.dtype, 'i16': jnp.int16.dtype, 'i32': jnp.int32.dtype, 'i64': jnp.int64.dtype,\n  'bf16': jnp.bfloat16.dtype, 'f16': jnp.float16.dtype, 'f32': jnp.float32.dtype, 'f64': jnp.float64.dtype,\n  'c64': jnp.complex64.dtype, 'c128': jnp.complex128.dtype,\n  'i*': int, 'f*': float, 'c*': complex}\n\njnp_dtype_to_code = {val: key for key, val in jnp_dtypes.items()}\n\ndef make_jnp_zero(dtype):\n  if dtype in {int, float, complex}:\n    return dtype(0)\n  else:\n    return jnp.zeros((), dtype=dtype)\n\ndef jnp_result_code(dtype1, dtype2):\n  try:\n    out = jax.lax.add(make_jnp_zero(dtype1), make_jnp_zero(dtype2))\n  except TypeError:\n    return '-'\n  else:\n    if hasattr(out, 'aval') and out.aval.weak_type:\n      return out.dtype.kind + '*'\n    elif type(out) in {int, float, complex}:\n      return jnp_dtype_to_code[type(out)]\n    else:\n      return jnp_dtype_to_code[out.dtype]\n\ngrid = [[jnp_result_code(dtype1, dtype2)\n         for dtype2 in jnp_dtypes.values()]\n        for dtype1 in jnp_dtypes.values()]\ntable = pd.DataFrame(grid, index=jnp_dtypes.keys(), columns=jnp_dtypes.keys())\ndisplay.HTML(table.to_html()) \n```"]