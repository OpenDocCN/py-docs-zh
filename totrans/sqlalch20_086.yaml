- en: Visitor and Traversal Utilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/visitors.html](https://docs.sqlalchemy.org/en/20/core/visitors.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The [`sqlalchemy.sql.visitors`](#module-sqlalchemy.sql.visitors "sqlalchemy.sql.visitors")
    module consists of classes and functions that serve the purpose of generically
    **traversing** a Core SQL expression structure. This is not unlike the Python
    `ast` module in that is presents a system by which a program can operate upon
    each component of a SQL expression. Common purposes this serves are locating various
    kinds of elements such as [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter "sqlalchemy.sql.expression.BindParameter")
    objects, as well as altering the state of the structure such as replacing certain
    FROM clauses with others.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: the [`sqlalchemy.sql.visitors`](#module-sqlalchemy.sql.visitors "sqlalchemy.sql.visitors")
    module is an internal API and is not fully public. It is subject to change and
    may additionally not function as expected for use patterns that aren’t considered
    within SQLAlchemy’s own internals.
  prefs: []
  type: TYPE_NORMAL
- en: The [`sqlalchemy.sql.visitors`](#module-sqlalchemy.sql.visitors "sqlalchemy.sql.visitors")
    module is part of the **internals** of SQLAlchemy and it is not usually used by
    calling application code. It is however used in certain edge cases such as when
    constructing caching routines as well as when building out custom SQL expressions
    using the [Custom SQL Constructs and Compilation Extension](compiler.html).
  prefs: []
  type: TYPE_NORMAL
- en: Visitor/traversal interface and library functions.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [anon_map](#sqlalchemy.sql.visitors.anon_map) | alias of `cache_anon_map`
    |'
  prefs: []
  type: TYPE_TB
- en: '| [cloned_traverse](#sqlalchemy.sql.visitors.cloned_traverse)(obj, opts, visitors)
    | Clone the given expression structure, allowing modifications by visitors for
    mutable objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [ExternalTraversal](#sqlalchemy.sql.visitors.ExternalTraversal) | Base class
    for visitor objects which can traverse externally using the [`traverse()`](#sqlalchemy.sql.visitors.traverse
    "sqlalchemy.sql.visitors.traverse") function. |'
  prefs: []
  type: TYPE_TB
- en: '| [InternalTraversal](#sqlalchemy.sql.visitors.InternalTraversal) | Defines
    visitor symbols used for internal traversal. |'
  prefs: []
  type: TYPE_TB
- en: '| [iterate](#sqlalchemy.sql.visitors.iterate)(obj[, opts]) | Traverse the given
    expression structure, returning an iterator. |'
  prefs: []
  type: TYPE_TB
- en: '| [replacement_traverse](#sqlalchemy.sql.visitors.replacement_traverse)(obj,
    opts, replace) | Clone the given expression structure, allowing element replacement
    by a given replacement function. |'
  prefs: []
  type: TYPE_TB
- en: '| [traverse](#sqlalchemy.sql.visitors.traverse)(obj, opts, visitors) | Traverse
    and visit the given expression structure using the default iterator. |'
  prefs: []
  type: TYPE_TB
- en: '| [traverse_using](#sqlalchemy.sql.visitors.traverse_using)(iterator, obj,
    visitors) | Visit the given expression structure using the given iterator of objects.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Visitable](#sqlalchemy.sql.visitors.Visitable) | Base class for visitable
    objects. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Base class for visitor objects which can traverse externally using the [`traverse()`](#sqlalchemy.sql.visitors.traverse
    "sqlalchemy.sql.visitors.traverse") function.
  prefs: []
  type: TYPE_NORMAL
- en: Direct usage of the [`traverse()`](#sqlalchemy.sql.visitors.traverse "sqlalchemy.sql.visitors.traverse")
    function is usually preferred.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[chain()](#sqlalchemy.sql.visitors.ExternalTraversal.chain), [iterate()](#sqlalchemy.sql.visitors.ExternalTraversal.iterate),
    [traverse()](#sqlalchemy.sql.visitors.ExternalTraversal.traverse), [visitor_iterator](#sqlalchemy.sql.visitors.ExternalTraversal.visitor_iterator)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.visitors.ExternalTraversal`](#sqlalchemy.sql.visitors.ExternalTraversal
    "sqlalchemy.sql.visitors.ExternalTraversal") (`sqlalchemy.util.langhelpers.MemoizedSlots`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: ‘Chain’ an additional ExternalTraversal onto this ExternalTraversal
  prefs: []
  type: TYPE_NORMAL
- en: The chained visitor will receive all visit events after this one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Traverse the given expression structure, returning an iterator of all elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Traverse and visit the given expression structure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Iterate through this visitor and each ‘chained’ visitor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Defines visitor symbols used for internal traversal.
  prefs: []
  type: TYPE_NORMAL
- en: The [`InternalTraversal`](#sqlalchemy.sql.visitors.InternalTraversal "sqlalchemy.sql.visitors.InternalTraversal")
    class is used in two ways. One is that it can serve as the superclass for an object
    that implements the various visit methods of the class. The other is that the
    symbols themselves of [`InternalTraversal`](#sqlalchemy.sql.visitors.InternalTraversal
    "sqlalchemy.sql.visitors.InternalTraversal") are used within the `_traverse_internals`
    collection. Such as, the [`Case`](sqlelement.html#sqlalchemy.sql.expression.Case
    "sqlalchemy.sql.expression.Case") object defines `_traverse_internals` as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Above, the [`Case`](sqlelement.html#sqlalchemy.sql.expression.Case "sqlalchemy.sql.expression.Case")
    class indicates its internal state as the attributes named `value`, `whens`, and
    `else_`. They each link to an [`InternalTraversal`](#sqlalchemy.sql.visitors.InternalTraversal
    "sqlalchemy.sql.visitors.InternalTraversal") method which indicates the type of
    datastructure to which each attribute refers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `_traverse_internals` structure, objects of type `InternalTraversible`
    will have the following methods automatically implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: '`HasTraverseInternals.get_children()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HasTraverseInternals._copy_internals()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HasCacheKey._gen_cache_key()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subclasses can also implement these methods directly, particularly for the `HasTraverseInternals._copy_internals()`
    method, when special steps are needed.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[dp_annotations_key](#sqlalchemy.sql.visitors.InternalTraversal.dp_annotations_key),
    [dp_anon_name](#sqlalchemy.sql.visitors.InternalTraversal.dp_anon_name), [dp_boolean](#sqlalchemy.sql.visitors.InternalTraversal.dp_boolean),
    [dp_clauseelement](#sqlalchemy.sql.visitors.InternalTraversal.dp_clauseelement),
    [dp_clauseelement_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_clauseelement_list),
    [dp_clauseelement_tuple](#sqlalchemy.sql.visitors.InternalTraversal.dp_clauseelement_tuple),
    [dp_clauseelement_tuples](#sqlalchemy.sql.visitors.InternalTraversal.dp_clauseelement_tuples),
    [dp_dialect_options](#sqlalchemy.sql.visitors.InternalTraversal.dp_dialect_options),
    [dp_dml_multi_values](#sqlalchemy.sql.visitors.InternalTraversal.dp_dml_multi_values),
    [dp_dml_ordered_values](#sqlalchemy.sql.visitors.InternalTraversal.dp_dml_ordered_values),
    [dp_dml_values](#sqlalchemy.sql.visitors.InternalTraversal.dp_dml_values), [dp_fromclause_canonical_column_collection](#sqlalchemy.sql.visitors.InternalTraversal.dp_fromclause_canonical_column_collection),
    [dp_fromclause_ordered_set](#sqlalchemy.sql.visitors.InternalTraversal.dp_fromclause_ordered_set),
    [dp_has_cache_key](#sqlalchemy.sql.visitors.InternalTraversal.dp_has_cache_key),
    [dp_has_cache_key_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_has_cache_key_list),
    [dp_has_cache_key_tuples](#sqlalchemy.sql.visitors.InternalTraversal.dp_has_cache_key_tuples),
    [dp_ignore](#sqlalchemy.sql.visitors.InternalTraversal.dp_ignore), [dp_inspectable](#sqlalchemy.sql.visitors.InternalTraversal.dp_inspectable),
    [dp_inspectable_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_inspectable_list),
    [dp_multi](#sqlalchemy.sql.visitors.InternalTraversal.dp_multi), [dp_multi_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_multi_list),
    [dp_named_ddl_element](#sqlalchemy.sql.visitors.InternalTraversal.dp_named_ddl_element),
    [dp_operator](#sqlalchemy.sql.visitors.InternalTraversal.dp_operator), [dp_plain_dict](#sqlalchemy.sql.visitors.InternalTraversal.dp_plain_dict),
    [dp_plain_obj](#sqlalchemy.sql.visitors.InternalTraversal.dp_plain_obj), [dp_prefix_sequence](#sqlalchemy.sql.visitors.InternalTraversal.dp_prefix_sequence),
    [dp_propagate_attrs](#sqlalchemy.sql.visitors.InternalTraversal.dp_propagate_attrs),
    [dp_statement_hint_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_statement_hint_list),
    [dp_string](#sqlalchemy.sql.visitors.InternalTraversal.dp_string), [dp_string_clauseelement_dict](#sqlalchemy.sql.visitors.InternalTraversal.dp_string_clauseelement_dict),
    [dp_string_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_string_list), [dp_string_multi_dict](#sqlalchemy.sql.visitors.InternalTraversal.dp_string_multi_dict),
    [dp_table_hint_list](#sqlalchemy.sql.visitors.InternalTraversal.dp_table_hint_list),
    [dp_type](#sqlalchemy.sql.visitors.InternalTraversal.dp_type), [dp_unknown_structure](#sqlalchemy.sql.visitors.InternalTraversal.dp_unknown_structure)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.visitors.InternalTraversal`](#sqlalchemy.sql.visitors.InternalTraversal
    "sqlalchemy.sql.visitors.InternalTraversal") (`enum.Enum`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Visit the _annotations_cache_key element.
  prefs: []
  type: TYPE_NORMAL
- en: This is a dictionary of additional information about a ClauseElement that modifies
    its role. It should be included when comparing or caching objects, however generating
    this key is relatively expensive. Visitors should check the “_annotations” dict
    for non-None first before creating this key.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Visit a potentially “anonymized” string value.
  prefs: []
  type: TYPE_NORMAL
- en: The string value is considered to be significant for cache key generation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Visit a boolean value.
  prefs: []
  type: TYPE_NORMAL
- en: The boolean value is considered to be significant for cache key generation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Visit a [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Visit a list of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Visit a tuple of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Visit a list of tuples which contain [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Visit a dialect options structure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Visit the values() multi-valued list of dictionaries of an [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Visit the values() ordered tuple list of an [`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Visit the values() dictionary of a [`ValuesBase`](dml.html#sqlalchemy.sql.expression.ValuesBase
    "sqlalchemy.sql.expression.ValuesBase") (e.g. Insert or Update) object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Visit a [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") object in the context of the `columns`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: The column collection is “canonical”, meaning it is the originally defined location
    of the [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") objects. Right now this means that the
    object being visited is a [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") or [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object only.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Visit an ordered set of [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Visit a [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Visit a list of [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Visit a list of tuples which contain [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Specify an object that should be ignored entirely.
  prefs: []
  type: TYPE_NORMAL
- en: This currently applies function call argument caching where some arguments should
    not be considered to be part of a cache key.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Visit an inspectable object where the return value is a [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Visit a list of inspectable objects which upon inspection are HasCacheKey objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Visit an object that may be a [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") or may be a plain hashable object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Visit a tuple containing elements that may be [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.traversals.HasCacheKey") or may be a plain hashable object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Visit a simple named DDL element.
  prefs: []
  type: TYPE_NORMAL
- en: The current object used by this method is the [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence").
  prefs: []
  type: TYPE_NORMAL
- en: The object is only considered to be important for cache key generation as far
    as its name, but not any other aspects of it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Visit an operator.
  prefs: []
  type: TYPE_NORMAL
- en: The operator is a function from the `sqlalchemy.sql.operators` module.
  prefs: []
  type: TYPE_NORMAL
- en: The operator value is considered to be significant for cache key generation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Visit a dictionary with string keys.
  prefs: []
  type: TYPE_NORMAL
- en: The keys of the dictionary should be strings, the values should be immutable
    and hashable. The dictionary is considered to be significant for cache key generation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Visit a plain python object.
  prefs: []
  type: TYPE_NORMAL
- en: The value should be immutable and hashable, such as an integer. The value is
    considered to be significant for cache key generation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Visit the sequence represented by [`HasPrefixes`](selectable.html#sqlalchemy.sql.expression.HasPrefixes
    "sqlalchemy.sql.expression.HasPrefixes") or [`HasSuffixes`](selectable.html#sqlalchemy.sql.expression.HasSuffixes
    "sqlalchemy.sql.expression.HasSuffixes").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Visit the propagate attrs dict. This hardcodes to the particular elements we
    care about right now.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Visit the `_statement_hints` collection of a [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Visit a plain string value.
  prefs: []
  type: TYPE_NORMAL
- en: Examples include table and column names, bound parameter keys, special keywords
    such as “UNION”, “UNION ALL”.
  prefs: []
  type: TYPE_NORMAL
- en: The string value is considered to be significant for cache key generation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Visit a dictionary of string keys to [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Visit a list of strings.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Visit a dictionary of string keys to values which may either be plain immutable/hashable
    or [`HasCacheKey`](foundation.html#sqlalchemy.sql.traversals.HasCacheKey "sqlalchemy.sql.traversals.HasCacheKey")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Visit the `_hints` collection of a [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Visit a [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine "sqlalchemy.types.TypeEngine")
    object
  prefs: []
  type: TYPE_NORMAL
- en: The type object is considered to be significant for cache key generation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Visit an unknown structure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Base class for visitable objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Visitable`](#sqlalchemy.sql.visitors.Visitable "sqlalchemy.sql.visitors.Visitable")
    is used to implement the SQL compiler dispatch functions. Other forms of traversal
    such as for cache key generation are implemented separately using the `HasTraverseInternals`
    interface.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: The [`Visitable`](#sqlalchemy.sql.visitors.Visitable
    "sqlalchemy.sql.visitors.Visitable") class was named `Traversible` in the 1.4
    series; the name is changed back to [`Visitable`](#sqlalchemy.sql.visitors.Visitable
    "sqlalchemy.sql.visitors.Visitable") in 2.0 which is what it was prior to 1.4.'
  prefs: []
  type: TYPE_NORMAL
- en: Both names remain importable in both 1.4 and 2.0 versions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: alias of `cache_anon_map`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Clone the given expression structure, allowing modifications by visitors for
    mutable objects.
  prefs: []
  type: TYPE_NORMAL
- en: Traversal usage is the same as that of [`traverse()`](#sqlalchemy.sql.visitors.traverse
    "sqlalchemy.sql.visitors.traverse"). The visitor functions present in the `visitors`
    dictionary may also modify the internals of the given structure as the traversal
    proceeds.
  prefs: []
  type: TYPE_NORMAL
- en: The [`cloned_traverse()`](#sqlalchemy.sql.visitors.cloned_traverse "sqlalchemy.sql.visitors.cloned_traverse")
    function does **not** provide objects that are part of the `Immutable` interface
    to the visit methods (this primarily includes [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause"), [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), [`TableClause`](selectable.html#sqlalchemy.sql.expression.TableClause
    "sqlalchemy.sql.expression.TableClause") and [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects). As this traversal is only intended to allow
    in-place mutation of objects, `Immutable` objects are skipped. The `Immutable._clone()`
    method is still called on each object to allow for objects to replace themselves
    with a different object based on a clone of their sub-internals (e.g. a [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause
    "sqlalchemy.sql.expression.ColumnClause") that clones its subquery to return a
    new [`ColumnClause`](sqlelement.html#sqlalchemy.sql.expression.ColumnClause "sqlalchemy.sql.expression.ColumnClause")).
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: The [`cloned_traverse()`](#sqlalchemy.sql.visitors.cloned_traverse
    "sqlalchemy.sql.visitors.cloned_traverse") function omits objects that are part
    of the `Immutable` interface.'
  prefs: []
  type: TYPE_NORMAL
- en: The central API feature used by the [`cloned_traverse()`](#sqlalchemy.sql.visitors.cloned_traverse
    "sqlalchemy.sql.visitors.cloned_traverse") and [`replacement_traverse()`](#sqlalchemy.sql.visitors.replacement_traverse
    "sqlalchemy.sql.visitors.replacement_traverse") functions, in addition to the
    [`ClauseElement.get_children()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.get_children
    "sqlalchemy.sql.expression.ClauseElement.get_children") function that is used
    to achieve the iteration, is the `ClauseElement._copy_internals()` method. For
    a [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement "sqlalchemy.sql.expression.ClauseElement")
    structure to support cloning and replacement traversals correctly, it needs to
    be able to pass a cloning function into its internal members in order to make
    copies of them.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`traverse()`](#sqlalchemy.sql.visitors.traverse "sqlalchemy.sql.visitors.traverse")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`replacement_traverse()`](#sqlalchemy.sql.visitors.replacement_traverse "sqlalchemy.sql.visitors.replacement_traverse")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Traverse the given expression structure, returning an iterator.
  prefs: []
  type: TYPE_NORMAL
- en: Traversal is configured to be breadth-first.
  prefs: []
  type: TYPE_NORMAL
- en: The central API feature used by the [`iterate()`](#sqlalchemy.sql.visitors.iterate
    "sqlalchemy.sql.visitors.iterate") function is the [`ClauseElement.get_children()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.get_children
    "sqlalchemy.sql.expression.ClauseElement.get_children") method of [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") objects. This method should return
    all the [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") objects which are associated with a
    particular [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") object. For example, a [`Case`](sqlelement.html#sqlalchemy.sql.expression.Case
    "sqlalchemy.sql.expression.Case") structure will refer to a series of [`ColumnElement`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement
    "sqlalchemy.sql.expression.ColumnElement") objects within its “whens” and “else_”
    member variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`obj` – [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") structure to be traversed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opts` – dictionary of iteration options. This dictionary is usually empty
    in modern usage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Clone the given expression structure, allowing element replacement by a given
    replacement function.
  prefs: []
  type: TYPE_NORMAL
- en: This function is very similar to the [`cloned_traverse()`](#sqlalchemy.sql.visitors.cloned_traverse
    "sqlalchemy.sql.visitors.cloned_traverse") function, except instead of being passed
    a dictionary of visitors, all elements are unconditionally passed into the given
    replace function. The replace function then has the option to return an entirely
    new object which will replace the one given. If it returns `None`, then the object
    is kept in place.
  prefs: []
  type: TYPE_NORMAL
- en: The difference in usage between [`cloned_traverse()`](#sqlalchemy.sql.visitors.cloned_traverse
    "sqlalchemy.sql.visitors.cloned_traverse") and [`replacement_traverse()`](#sqlalchemy.sql.visitors.replacement_traverse
    "sqlalchemy.sql.visitors.replacement_traverse") is that in the former case, an
    already-cloned object is passed to the visitor function, and the visitor function
    can then manipulate the internal state of the object. In the case of the latter,
    the visitor function should only return an entirely different object, or do nothing.
  prefs: []
  type: TYPE_NORMAL
- en: The use case for [`replacement_traverse()`](#sqlalchemy.sql.visitors.replacement_traverse
    "sqlalchemy.sql.visitors.replacement_traverse") is that of replacing a FROM clause
    inside of a SQL structure with a different one, as is a common use case within
    the ORM.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Traverse and visit the given expression structure using the default iterator.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: The iteration of objects uses the [`iterate()`](#sqlalchemy.sql.visitors.iterate
    "sqlalchemy.sql.visitors.iterate") function, which does a breadth-first traversal
    using a stack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`obj` – [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") structure to be traversed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opts` – dictionary of iteration options. This dictionary is usually empty
    in modern usage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`visitors` – dictionary of visit functions. The dictionary should have strings
    as keys, each of which would correspond to the `__visit_name__` of a particular
    kind of SQL expression object, and callable functions as values, each of which
    represents a visitor function for that kind of object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Visit the given expression structure using the given iterator of objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[`traverse_using()`](#sqlalchemy.sql.visitors.traverse_using "sqlalchemy.sql.visitors.traverse_using")
    is usually called internally as the result of the [`traverse()`](#sqlalchemy.sql.visitors.traverse
    "sqlalchemy.sql.visitors.traverse") function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`iterator` – an iterable or sequence which will yield [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") structures; the iterator is assumed
    to be the product of the [`iterate()`](#sqlalchemy.sql.visitors.iterate "sqlalchemy.sql.visitors.iterate")
    function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`obj` – the [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") that was used as the target of the
    [`iterate()`](#sqlalchemy.sql.visitors.iterate "sqlalchemy.sql.visitors.iterate")
    function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`visitors` – dictionary of visit functions. See [`traverse()`](#sqlalchemy.sql.visitors.traverse
    "sqlalchemy.sql.visitors.traverse") for details on this dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`traverse()`](#sqlalchemy.sql.visitors.traverse "sqlalchemy.sql.visitors.traverse")'
  prefs: []
  type: TYPE_NORMAL
