["```py\nfrom functools import partial\nimport jax\n\ndef apply_layer(W, x):\n  return jnp.sin(jnp.dot(W, x))\n\n@partial(jax.checkpoint, policy=jax.checkpoint_policies.checkpoint_dots)\ndef predict(params, x):\n  for W in params[:-1]:\n    x = apply_layer(W, x)\n  return jnp.dot(params[-1], x) \n```", "```py\n@jax.checkpoint\ndef f(x):\n  a = some_function(jnp.arange(10_000_000))  # `a` does not depend on `x`\n  return a * x \n```", "```py\n@partial(jax.checkpoint, concrete=True)  # OLD jax.checkpoint API\ndef foo(x, is_training):\n  if is_training:\n    return g(x)\n  else:\n    return h(x) \n```", "```py\n@partial(jax.checkpoint, static_argnums=(1,))  # NEW jax.checkpoint API\ndef foo(x, is_training):\n  if is_training:\n    ... \n```"]