["```py\nnode = TreeNode('rootnode')\nnode.append('node1')\nnode.append('node3')\nsession.add(node)\nsession.commit()\n\ndump_tree(node)\n```", "```py\nn2 = Node(2)\nn5 = Node(5)\nn2.add_neighbor(n5)\nprint(n2.higher_neighbors())\n```", "```py\n$ python -m examples.performance --help\nusage: python -m examples.performance [-h] [--test TEST] [--dburl DBURL]\n                                      [--num NUM] [--profile] [--dump]\n                                      [--echo]\n\n                                      {bulk_inserts,large_resultsets,single_inserts}\n\npositional arguments:\n  {bulk_inserts,large_resultsets,single_inserts}\n                        suite to run\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --test TEST           run specific test name\n  --dburl DBURL         database URL, default sqlite:///profile.db\n  --num NUM             Number of iterations/items/etc for tests;\n                        default is module-specific\n  --profile             run profiling and dump call counts\n  --dump                dump full call profile (implies --profile)\n  --echo                Echo SQL output\n```", "```py\n$ python -m examples.performance bulk_inserts\n```", "```py\n$ python -m examples.performance bulk_inserts \\\n    --dburl mysql+mysqldb://scott:tiger@localhost/test \\\n    --profile --num 1000\n```", "```py\n$ python -m examples.performance single_inserts\nTests to run: test_orm_commit, test_bulk_save,\n              test_bulk_insert_dictionaries, test_core,\n              test_core_query_caching, test_dbapi_raw_w_connect,\n              test_dbapi_raw_w_pool\n\ntest_orm_commit : Individual INSERT/COMMIT pairs via the\n    ORM (10000 iterations); total time 13.690218 sec\ntest_bulk_save : Individual INSERT/COMMIT pairs using\n    the \"bulk\" API  (10000 iterations); total time 11.290371 sec\ntest_bulk_insert_dictionaries : Individual INSERT/COMMIT pairs using\n    the \"bulk\" API with dictionaries (10000 iterations);\n    total time 10.814626 sec\ntest_core : Individual INSERT/COMMIT pairs using Core.\n    (10000 iterations); total time 9.665620 sec\ntest_core_query_caching : Individual INSERT/COMMIT pairs using Core\n    with query caching (10000 iterations); total time 9.209010 sec\ntest_dbapi_raw_w_connect : Individual INSERT/COMMIT pairs w/ DBAPI +\n    connection each time (10000 iterations); total time 9.551103 sec\ntest_dbapi_raw_w_pool : Individual INSERT/COMMIT pairs w/ DBAPI +\n    connection pool (10000 iterations); total time 8.001813 sec\n```", "```py\n$ python -m examples.performance single_inserts --test test_core --num 1000 --dump\nTests to run: test_core\ntest_core : Individual INSERT/COMMIT pairs using Core. (1000 iterations); total fn calls 186109\n         186109 function calls (186102 primitive calls) in 1.089 seconds\n\n   Ordered by: internal time, call count\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n     1000    0.634    0.001    0.634    0.001 {method 'commit' of 'sqlite3.Connection' objects}\n     1000    0.154    0.000    0.154    0.000 {method 'execute' of 'sqlite3.Cursor' objects}\n     1000    0.021    0.000    0.074    0.000 /Users/classic/dev/sqlalchemy/lib/sqlalchemy/sql/compiler.py:1950(_get_colparams)\n     1000    0.015    0.000    0.034    0.000 /Users/classic/dev/sqlalchemy/lib/sqlalchemy/engine/default.py:503(_init_compiled)\n        1    0.012    0.012    1.091    1.091 examples/performance/single_inserts.py:79(test_core)\n\n    ...\n```", "```py\nfrom examples.performance import Profiler\nfrom sqlalchemy import Integer, Column, create_engine, ForeignKey\nfrom sqlalchemy.orm import relationship, joinedload, subqueryload, Session\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\nengine = None\nsession = None\n\nclass Parent(Base):\n    __tablename__ = 'parent'\n    id = Column(Integer, primary_key=True)\n    children = relationship(\"Child\")\n\nclass Child(Base):\n    __tablename__ = 'child'\n    id = Column(Integer, primary_key=True)\n    parent_id = Column(Integer, ForeignKey('parent.id'))\n\n# Init with name of file, default number of items\nProfiler.init(\"test_loads\", 1000)\n\n@Profiler.setup_once\ndef setup_once(dburl, echo, num):\n    \"setup once.  create an engine, insert fixture data\"\n    global engine\n    engine = create_engine(dburl, echo=echo)\n    Base.metadata.drop_all(engine)\n    Base.metadata.create_all(engine)\n    sess = Session(engine)\n    sess.add_all([\n        Parent(children=[Child() for j in range(100)])\n        for i in range(num)\n    ])\n    sess.commit()\n\n@Profiler.setup\ndef setup(dburl, echo, num):\n    \"setup per test.  create a new Session.\"\n    global session\n    session = Session(engine)\n    # pre-connect so this part isn't profiled (if we choose)\n    session.connection()\n\n@Profiler.profile\ndef test_lazyload(n):\n    \"load everything, no eager loading.\"\n\n    for parent in session.query(Parent):\n        parent.children\n\n@Profiler.profile\ndef test_joinedload(n):\n    \"load everything, joined eager loading.\"\n\n    for parent in session.query(Parent).options(joinedload(\"children\")):\n        parent.children\n\n@Profiler.profile\ndef test_subqueryload(n):\n    \"load everything, subquery eager loading.\"\n\n    for parent in session.query(Parent).options(subqueryload(\"children\")):\n        parent.children\n\nif __name__ == '__main__':\n    Profiler.main()\n```", "```py\n$ python test_loads.py  --dburl postgresql+psycopg2://scott:tiger@localhost/test\nRunning setup once...\nTests to run: test_lazyload, test_joinedload, test_subqueryload\ntest_lazyload : load everything, no eager loading. (1000 iterations); total time 11.971159 sec\ntest_joinedload : load everything, joined eager loading. (1000 iterations); total time 2.754592 sec\ntest_subqueryload : load everything, subquery eager loading. (1000 iterations); total time 2.977696 sec\n```", "```py\npython -m examples.space_invaders.space_invaders\n```", "```py\ntail -f space_invaders.log\n```", "```py\npython -m examples.versioned_history.test_versioning\n```", "```py\nfrom history_meta import Versioned, versioned_session\n\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(Versioned, Base):\n    __tablename__ = 'sometable'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n\n    def __eq__(self, other):\n        assert type(other) is SomeClass and other.id == self.id\n\nSession = sessionmaker(bind=engine)\nversioned_session(Session)\n\nsess = Session()\nsc = SomeClass(name='sc1')\nsess.add(sc)\nsess.commit()\n\nsc.name = 'sc1modified'\nsess.commit()\n\nassert sc.version == 2\n\nSomeClassHistory = SomeClass.__history_mapper__.class_\n\nassert sess.query(SomeClassHistory).\\\n            filter(SomeClassHistory.version == 1).\\\n            all() \\\n            == [SomeClassHistory(version=1, name='sc1')]\n```", "```py\nfrom history_meta import _history_mapper\n\nm = mapper(SomeClass, sometable)\n_history_mapper(m)\n\nSomeHistoryClass = SomeClass.__history_mapper__.class_\n```", "```py\nclass SomeClass(Versioned, Base):\n    __tablename__ = 'sometable'\n\n    use_mapper_versioning = True\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n\n    def __eq__(self, other):\n        assert type(other) is SomeClass and other.id == self.id\n```", "```py\nshrew = Animal(u'shrew')\nshrew[u'cuteness'] = 5\nshrew[u'weasel-like'] = False\nshrew[u'poisonous'] = True\n\nsession.add(shrew)\nsession.flush()\n\nq = (session.query(Animal).\n     filter(Animal.facts.any(\n       and_(AnimalFact.key == u'weasel-like',\n            AnimalFact.value == True))))\nprint('weasel-like animals', q.all())\n```", "```py\n# query for Person objects, specifying cache\nstmt = select(Person).options(FromCache(\"default\"))\n\n# specify that each Person's \"addresses\" collection comes from\n# cache too\nstmt = stmt.options(RelationshipCache(Person.addresses, \"default\"))\n\n# execute and results\nresult = session.execute(stmt)\n\nprint(result.scalars().all())\n```", "```py\npython -m examples.dogpile_caching.helloworld\n\npython -m examples.dogpile_caching.relationship_caching\n\npython -m examples.dogpile_caching.advanced\n\npython -m examples.dogpile_caching.local_session_caching\n```", "```py\nnode = TreeNode('rootnode')\nnode.append('node1')\nnode.append('node3')\nsession.add(node)\nsession.commit()\n\ndump_tree(node)\n```", "```py\nn2 = Node(2)\nn5 = Node(5)\nn2.add_neighbor(n5)\nprint(n2.higher_neighbors())\n```", "```py\n$ python -m examples.performance --help\nusage: python -m examples.performance [-h] [--test TEST] [--dburl DBURL]\n                                      [--num NUM] [--profile] [--dump]\n                                      [--echo]\n\n                                      {bulk_inserts,large_resultsets,single_inserts}\n\npositional arguments:\n  {bulk_inserts,large_resultsets,single_inserts}\n                        suite to run\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --test TEST           run specific test name\n  --dburl DBURL         database URL, default sqlite:///profile.db\n  --num NUM             Number of iterations/items/etc for tests;\n                        default is module-specific\n  --profile             run profiling and dump call counts\n  --dump                dump full call profile (implies --profile)\n  --echo                Echo SQL output\n```", "```py\n$ python -m examples.performance bulk_inserts\n```", "```py\n$ python -m examples.performance bulk_inserts \\\n    --dburl mysql+mysqldb://scott:tiger@localhost/test \\\n    --profile --num 1000\n```", "```py\n$ python -m examples.performance single_inserts\nTests to run: test_orm_commit, test_bulk_save,\n              test_bulk_insert_dictionaries, test_core,\n              test_core_query_caching, test_dbapi_raw_w_connect,\n              test_dbapi_raw_w_pool\n\ntest_orm_commit : Individual INSERT/COMMIT pairs via the\n    ORM (10000 iterations); total time 13.690218 sec\ntest_bulk_save : Individual INSERT/COMMIT pairs using\n    the \"bulk\" API  (10000 iterations); total time 11.290371 sec\ntest_bulk_insert_dictionaries : Individual INSERT/COMMIT pairs using\n    the \"bulk\" API with dictionaries (10000 iterations);\n    total time 10.814626 sec\ntest_core : Individual INSERT/COMMIT pairs using Core.\n    (10000 iterations); total time 9.665620 sec\ntest_core_query_caching : Individual INSERT/COMMIT pairs using Core\n    with query caching (10000 iterations); total time 9.209010 sec\ntest_dbapi_raw_w_connect : Individual INSERT/COMMIT pairs w/ DBAPI +\n    connection each time (10000 iterations); total time 9.551103 sec\ntest_dbapi_raw_w_pool : Individual INSERT/COMMIT pairs w/ DBAPI +\n    connection pool (10000 iterations); total time 8.001813 sec\n```", "```py\n$ python -m examples.performance single_inserts --test test_core --num 1000 --dump\nTests to run: test_core\ntest_core : Individual INSERT/COMMIT pairs using Core. (1000 iterations); total fn calls 186109\n         186109 function calls (186102 primitive calls) in 1.089 seconds\n\n   Ordered by: internal time, call count\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n     1000    0.634    0.001    0.634    0.001 {method 'commit' of 'sqlite3.Connection' objects}\n     1000    0.154    0.000    0.154    0.000 {method 'execute' of 'sqlite3.Cursor' objects}\n     1000    0.021    0.000    0.074    0.000 /Users/classic/dev/sqlalchemy/lib/sqlalchemy/sql/compiler.py:1950(_get_colparams)\n     1000    0.015    0.000    0.034    0.000 /Users/classic/dev/sqlalchemy/lib/sqlalchemy/engine/default.py:503(_init_compiled)\n        1    0.012    0.012    1.091    1.091 examples/performance/single_inserts.py:79(test_core)\n\n    ...\n```", "```py\nfrom examples.performance import Profiler\nfrom sqlalchemy import Integer, Column, create_engine, ForeignKey\nfrom sqlalchemy.orm import relationship, joinedload, subqueryload, Session\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\nengine = None\nsession = None\n\nclass Parent(Base):\n    __tablename__ = 'parent'\n    id = Column(Integer, primary_key=True)\n    children = relationship(\"Child\")\n\nclass Child(Base):\n    __tablename__ = 'child'\n    id = Column(Integer, primary_key=True)\n    parent_id = Column(Integer, ForeignKey('parent.id'))\n\n# Init with name of file, default number of items\nProfiler.init(\"test_loads\", 1000)\n\n@Profiler.setup_once\ndef setup_once(dburl, echo, num):\n    \"setup once.  create an engine, insert fixture data\"\n    global engine\n    engine = create_engine(dburl, echo=echo)\n    Base.metadata.drop_all(engine)\n    Base.metadata.create_all(engine)\n    sess = Session(engine)\n    sess.add_all([\n        Parent(children=[Child() for j in range(100)])\n        for i in range(num)\n    ])\n    sess.commit()\n\n@Profiler.setup\ndef setup(dburl, echo, num):\n    \"setup per test.  create a new Session.\"\n    global session\n    session = Session(engine)\n    # pre-connect so this part isn't profiled (if we choose)\n    session.connection()\n\n@Profiler.profile\ndef test_lazyload(n):\n    \"load everything, no eager loading.\"\n\n    for parent in session.query(Parent):\n        parent.children\n\n@Profiler.profile\ndef test_joinedload(n):\n    \"load everything, joined eager loading.\"\n\n    for parent in session.query(Parent).options(joinedload(\"children\")):\n        parent.children\n\n@Profiler.profile\ndef test_subqueryload(n):\n    \"load everything, subquery eager loading.\"\n\n    for parent in session.query(Parent).options(subqueryload(\"children\")):\n        parent.children\n\nif __name__ == '__main__':\n    Profiler.main()\n```", "```py\n$ python test_loads.py  --dburl postgresql+psycopg2://scott:tiger@localhost/test\nRunning setup once...\nTests to run: test_lazyload, test_joinedload, test_subqueryload\ntest_lazyload : load everything, no eager loading. (1000 iterations); total time 11.971159 sec\ntest_joinedload : load everything, joined eager loading. (1000 iterations); total time 2.754592 sec\ntest_subqueryload : load everything, subquery eager loading. (1000 iterations); total time 2.977696 sec\n```", "```py\npython -m examples.space_invaders.space_invaders\n```", "```py\ntail -f space_invaders.log\n```", "```py\npython -m examples.versioned_history.test_versioning\n```", "```py\nfrom history_meta import Versioned, versioned_session\n\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(Versioned, Base):\n    __tablename__ = 'sometable'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n\n    def __eq__(self, other):\n        assert type(other) is SomeClass and other.id == self.id\n\nSession = sessionmaker(bind=engine)\nversioned_session(Session)\n\nsess = Session()\nsc = SomeClass(name='sc1')\nsess.add(sc)\nsess.commit()\n\nsc.name = 'sc1modified'\nsess.commit()\n\nassert sc.version == 2\n\nSomeClassHistory = SomeClass.__history_mapper__.class_\n\nassert sess.query(SomeClassHistory).\\\n            filter(SomeClassHistory.version == 1).\\\n            all() \\\n            == [SomeClassHistory(version=1, name='sc1')]\n```", "```py\nfrom history_meta import _history_mapper\n\nm = mapper(SomeClass, sometable)\n_history_mapper(m)\n\nSomeHistoryClass = SomeClass.__history_mapper__.class_\n```", "```py\nclass SomeClass(Versioned, Base):\n    __tablename__ = 'sometable'\n\n    use_mapper_versioning = True\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n\n    def __eq__(self, other):\n        assert type(other) is SomeClass and other.id == self.id\n```", "```py\nshrew = Animal(u'shrew')\nshrew[u'cuteness'] = 5\nshrew[u'weasel-like'] = False\nshrew[u'poisonous'] = True\n\nsession.add(shrew)\nsession.flush()\n\nq = (session.query(Animal).\n     filter(Animal.facts.any(\n       and_(AnimalFact.key == u'weasel-like',\n            AnimalFact.value == True))))\nprint('weasel-like animals', q.all())\n```", "```py\nnode = TreeNode('rootnode')\nnode.append('node1')\nnode.append('node3')\nsession.add(node)\nsession.commit()\n\ndump_tree(node)\n```", "```py\nn2 = Node(2)\nn5 = Node(5)\nn2.add_neighbor(n5)\nprint(n2.higher_neighbors())\n```", "```py\n$ python -m examples.performance --help\nusage: python -m examples.performance [-h] [--test TEST] [--dburl DBURL]\n                                      [--num NUM] [--profile] [--dump]\n                                      [--echo]\n\n                                      {bulk_inserts,large_resultsets,single_inserts}\n\npositional arguments:\n  {bulk_inserts,large_resultsets,single_inserts}\n                        suite to run\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --test TEST           run specific test name\n  --dburl DBURL         database URL, default sqlite:///profile.db\n  --num NUM             Number of iterations/items/etc for tests;\n                        default is module-specific\n  --profile             run profiling and dump call counts\n  --dump                dump full call profile (implies --profile)\n  --echo                Echo SQL output\n```", "```py\n$ python -m examples.performance bulk_inserts\n```", "```py\n$ python -m examples.performance bulk_inserts \\\n    --dburl mysql+mysqldb://scott:tiger@localhost/test \\\n    --profile --num 1000\n```", "```py\n$ python -m examples.performance single_inserts\nTests to run: test_orm_commit, test_bulk_save,\n              test_bulk_insert_dictionaries, test_core,\n              test_core_query_caching, test_dbapi_raw_w_connect,\n              test_dbapi_raw_w_pool\n\ntest_orm_commit : Individual INSERT/COMMIT pairs via the\n    ORM (10000 iterations); total time 13.690218 sec\ntest_bulk_save : Individual INSERT/COMMIT pairs using\n    the \"bulk\" API  (10000 iterations); total time 11.290371 sec\ntest_bulk_insert_dictionaries : Individual INSERT/COMMIT pairs using\n    the \"bulk\" API with dictionaries (10000 iterations);\n    total time 10.814626 sec\ntest_core : Individual INSERT/COMMIT pairs using Core.\n    (10000 iterations); total time 9.665620 sec\ntest_core_query_caching : Individual INSERT/COMMIT pairs using Core\n    with query caching (10000 iterations); total time 9.209010 sec\ntest_dbapi_raw_w_connect : Individual INSERT/COMMIT pairs w/ DBAPI +\n    connection each time (10000 iterations); total time 9.551103 sec\ntest_dbapi_raw_w_pool : Individual INSERT/COMMIT pairs w/ DBAPI +\n    connection pool (10000 iterations); total time 8.001813 sec\n```", "```py\n$ python -m examples.performance single_inserts --test test_core --num 1000 --dump\nTests to run: test_core\ntest_core : Individual INSERT/COMMIT pairs using Core. (1000 iterations); total fn calls 186109\n         186109 function calls (186102 primitive calls) in 1.089 seconds\n\n   Ordered by: internal time, call count\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n     1000    0.634    0.001    0.634    0.001 {method 'commit' of 'sqlite3.Connection' objects}\n     1000    0.154    0.000    0.154    0.000 {method 'execute' of 'sqlite3.Cursor' objects}\n     1000    0.021    0.000    0.074    0.000 /Users/classic/dev/sqlalchemy/lib/sqlalchemy/sql/compiler.py:1950(_get_colparams)\n     1000    0.015    0.000    0.034    0.000 /Users/classic/dev/sqlalchemy/lib/sqlalchemy/engine/default.py:503(_init_compiled)\n        1    0.012    0.012    1.091    1.091 examples/performance/single_inserts.py:79(test_core)\n\n    ...\n```", "```py\nfrom examples.performance import Profiler\nfrom sqlalchemy import Integer, Column, create_engine, ForeignKey\nfrom sqlalchemy.orm import relationship, joinedload, subqueryload, Session\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\nengine = None\nsession = None\n\nclass Parent(Base):\n    __tablename__ = 'parent'\n    id = Column(Integer, primary_key=True)\n    children = relationship(\"Child\")\n\nclass Child(Base):\n    __tablename__ = 'child'\n    id = Column(Integer, primary_key=True)\n    parent_id = Column(Integer, ForeignKey('parent.id'))\n\n# Init with name of file, default number of items\nProfiler.init(\"test_loads\", 1000)\n\n@Profiler.setup_once\ndef setup_once(dburl, echo, num):\n    \"setup once.  create an engine, insert fixture data\"\n    global engine\n    engine = create_engine(dburl, echo=echo)\n    Base.metadata.drop_all(engine)\n    Base.metadata.create_all(engine)\n    sess = Session(engine)\n    sess.add_all([\n        Parent(children=[Child() for j in range(100)])\n        for i in range(num)\n    ])\n    sess.commit()\n\n@Profiler.setup\ndef setup(dburl, echo, num):\n    \"setup per test.  create a new Session.\"\n    global session\n    session = Session(engine)\n    # pre-connect so this part isn't profiled (if we choose)\n    session.connection()\n\n@Profiler.profile\ndef test_lazyload(n):\n    \"load everything, no eager loading.\"\n\n    for parent in session.query(Parent):\n        parent.children\n\n@Profiler.profile\ndef test_joinedload(n):\n    \"load everything, joined eager loading.\"\n\n    for parent in session.query(Parent).options(joinedload(\"children\")):\n        parent.children\n\n@Profiler.profile\ndef test_subqueryload(n):\n    \"load everything, subquery eager loading.\"\n\n    for parent in session.query(Parent).options(subqueryload(\"children\")):\n        parent.children\n\nif __name__ == '__main__':\n    Profiler.main()\n```", "```py\n$ python test_loads.py  --dburl postgresql+psycopg2://scott:tiger@localhost/test\nRunning setup once...\nTests to run: test_lazyload, test_joinedload, test_subqueryload\ntest_lazyload : load everything, no eager loading. (1000 iterations); total time 11.971159 sec\ntest_joinedload : load everything, joined eager loading. (1000 iterations); total time 2.754592 sec\ntest_subqueryload : load everything, subquery eager loading. (1000 iterations); total time 2.977696 sec\n```", "```py\n$ python -m examples.performance single_inserts\nTests to run: test_orm_commit, test_bulk_save,\n              test_bulk_insert_dictionaries, test_core,\n              test_core_query_caching, test_dbapi_raw_w_connect,\n              test_dbapi_raw_w_pool\n\ntest_orm_commit : Individual INSERT/COMMIT pairs via the\n    ORM (10000 iterations); total time 13.690218 sec\ntest_bulk_save : Individual INSERT/COMMIT pairs using\n    the \"bulk\" API  (10000 iterations); total time 11.290371 sec\ntest_bulk_insert_dictionaries : Individual INSERT/COMMIT pairs using\n    the \"bulk\" API with dictionaries (10000 iterations);\n    total time 10.814626 sec\ntest_core : Individual INSERT/COMMIT pairs using Core.\n    (10000 iterations); total time 9.665620 sec\ntest_core_query_caching : Individual INSERT/COMMIT pairs using Core\n    with query caching (10000 iterations); total time 9.209010 sec\ntest_dbapi_raw_w_connect : Individual INSERT/COMMIT pairs w/ DBAPI +\n    connection each time (10000 iterations); total time 9.551103 sec\ntest_dbapi_raw_w_pool : Individual INSERT/COMMIT pairs w/ DBAPI +\n    connection pool (10000 iterations); total time 8.001813 sec\n```", "```py\n$ python -m examples.performance single_inserts --test test_core --num 1000 --dump\nTests to run: test_core\ntest_core : Individual INSERT/COMMIT pairs using Core. (1000 iterations); total fn calls 186109\n         186109 function calls (186102 primitive calls) in 1.089 seconds\n\n   Ordered by: internal time, call count\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n     1000    0.634    0.001    0.634    0.001 {method 'commit' of 'sqlite3.Connection' objects}\n     1000    0.154    0.000    0.154    0.000 {method 'execute' of 'sqlite3.Cursor' objects}\n     1000    0.021    0.000    0.074    0.000 /Users/classic/dev/sqlalchemy/lib/sqlalchemy/sql/compiler.py:1950(_get_colparams)\n     1000    0.015    0.000    0.034    0.000 /Users/classic/dev/sqlalchemy/lib/sqlalchemy/engine/default.py:503(_init_compiled)\n        1    0.012    0.012    1.091    1.091 examples/performance/single_inserts.py:79(test_core)\n\n    ...\n```", "```py\nfrom examples.performance import Profiler\nfrom sqlalchemy import Integer, Column, create_engine, ForeignKey\nfrom sqlalchemy.orm import relationship, joinedload, subqueryload, Session\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\nengine = None\nsession = None\n\nclass Parent(Base):\n    __tablename__ = 'parent'\n    id = Column(Integer, primary_key=True)\n    children = relationship(\"Child\")\n\nclass Child(Base):\n    __tablename__ = 'child'\n    id = Column(Integer, primary_key=True)\n    parent_id = Column(Integer, ForeignKey('parent.id'))\n\n# Init with name of file, default number of items\nProfiler.init(\"test_loads\", 1000)\n\n@Profiler.setup_once\ndef setup_once(dburl, echo, num):\n    \"setup once.  create an engine, insert fixture data\"\n    global engine\n    engine = create_engine(dburl, echo=echo)\n    Base.metadata.drop_all(engine)\n    Base.metadata.create_all(engine)\n    sess = Session(engine)\n    sess.add_all([\n        Parent(children=[Child() for j in range(100)])\n        for i in range(num)\n    ])\n    sess.commit()\n\n@Profiler.setup\ndef setup(dburl, echo, num):\n    \"setup per test.  create a new Session.\"\n    global session\n    session = Session(engine)\n    # pre-connect so this part isn't profiled (if we choose)\n    session.connection()\n\n@Profiler.profile\ndef test_lazyload(n):\n    \"load everything, no eager loading.\"\n\n    for parent in session.query(Parent):\n        parent.children\n\n@Profiler.profile\ndef test_joinedload(n):\n    \"load everything, joined eager loading.\"\n\n    for parent in session.query(Parent).options(joinedload(\"children\")):\n        parent.children\n\n@Profiler.profile\ndef test_subqueryload(n):\n    \"load everything, subquery eager loading.\"\n\n    for parent in session.query(Parent).options(subqueryload(\"children\")):\n        parent.children\n\nif __name__ == '__main__':\n    Profiler.main()\n```", "```py\n$ python test_loads.py  --dburl postgresql+psycopg2://scott:tiger@localhost/test\nRunning setup once...\nTests to run: test_lazyload, test_joinedload, test_subqueryload\ntest_lazyload : load everything, no eager loading. (1000 iterations); total time 11.971159 sec\ntest_joinedload : load everything, joined eager loading. (1000 iterations); total time 2.754592 sec\ntest_subqueryload : load everything, subquery eager loading. (1000 iterations); total time 2.977696 sec\n```", "```py\npython -m examples.space_invaders.space_invaders\n```", "```py\ntail -f space_invaders.log\n```", "```py\npython -m examples.versioned_history.test_versioning\n```", "```py\nfrom history_meta import Versioned, versioned_session\n\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(Versioned, Base):\n    __tablename__ = 'sometable'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n\n    def __eq__(self, other):\n        assert type(other) is SomeClass and other.id == self.id\n\nSession = sessionmaker(bind=engine)\nversioned_session(Session)\n\nsess = Session()\nsc = SomeClass(name='sc1')\nsess.add(sc)\nsess.commit()\n\nsc.name = 'sc1modified'\nsess.commit()\n\nassert sc.version == 2\n\nSomeClassHistory = SomeClass.__history_mapper__.class_\n\nassert sess.query(SomeClassHistory).\\\n            filter(SomeClassHistory.version == 1).\\\n            all() \\\n            == [SomeClassHistory(version=1, name='sc1')]\n```", "```py\nfrom history_meta import _history_mapper\n\nm = mapper(SomeClass, sometable)\n_history_mapper(m)\n\nSomeHistoryClass = SomeClass.__history_mapper__.class_\n```", "```py\nclass SomeClass(Versioned, Base):\n    __tablename__ = 'sometable'\n\n    use_mapper_versioning = True\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n\n    def __eq__(self, other):\n        assert type(other) is SomeClass and other.id == self.id\n```", "```py\npython -m examples.versioned_history.test_versioning\n```", "```py\nfrom history_meta import Versioned, versioned_session\n\nclass Base(DeclarativeBase):\n    pass\n\nclass SomeClass(Versioned, Base):\n    __tablename__ = 'sometable'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n\n    def __eq__(self, other):\n        assert type(other) is SomeClass and other.id == self.id\n\nSession = sessionmaker(bind=engine)\nversioned_session(Session)\n\nsess = Session()\nsc = SomeClass(name='sc1')\nsess.add(sc)\nsess.commit()\n\nsc.name = 'sc1modified'\nsess.commit()\n\nassert sc.version == 2\n\nSomeClassHistory = SomeClass.__history_mapper__.class_\n\nassert sess.query(SomeClassHistory).\\\n            filter(SomeClassHistory.version == 1).\\\n            all() \\\n            == [SomeClassHistory(version=1, name='sc1')]\n```", "```py\nfrom history_meta import _history_mapper\n\nm = mapper(SomeClass, sometable)\n_history_mapper(m)\n\nSomeHistoryClass = SomeClass.__history_mapper__.class_\n```", "```py\nclass SomeClass(Versioned, Base):\n    __tablename__ = 'sometable'\n\n    use_mapper_versioning = True\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50))\n\n    def __eq__(self, other):\n        assert type(other) is SomeClass and other.id == self.id\n```", "```py\nshrew = Animal(u'shrew')\nshrew[u'cuteness'] = 5\nshrew[u'weasel-like'] = False\nshrew[u'poisonous'] = True\n\nsession.add(shrew)\nsession.flush()\n\nq = (session.query(Animal).\n     filter(Animal.facts.any(\n       and_(AnimalFact.key == u'weasel-like',\n            AnimalFact.value == True))))\nprint('weasel-like animals', q.all())\n```", "```py\n# query for Person objects, specifying cache\nstmt = select(Person).options(FromCache(\"default\"))\n\n# specify that each Person's \"addresses\" collection comes from\n# cache too\nstmt = stmt.options(RelationshipCache(Person.addresses, \"default\"))\n\n# execute and results\nresult = session.execute(stmt)\n\nprint(result.scalars().all())\n```", "```py\npython -m examples.dogpile_caching.helloworld\n\npython -m examples.dogpile_caching.relationship_caching\n\npython -m examples.dogpile_caching.advanced\n\npython -m examples.dogpile_caching.local_session_caching\n```", "```py\n# query for Person objects, specifying cache\nstmt = select(Person).options(FromCache(\"default\"))\n\n# specify that each Person's \"addresses\" collection comes from\n# cache too\nstmt = stmt.options(RelationshipCache(Person.addresses, \"default\"))\n\n# execute and results\nresult = session.execute(stmt)\n\nprint(result.scalars().all())\n```", "```py\npython -m examples.dogpile_caching.helloworld\n\npython -m examples.dogpile_caching.relationship_caching\n\npython -m examples.dogpile_caching.advanced\n\npython -m examples.dogpile_caching.local_session_caching\n```"]