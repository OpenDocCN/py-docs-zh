["```py\n> paper_size(s)\n> ```", "```py\n> paper_rect(s)\n> ```", "```py\n> >>> import pymupdf\n> >>> pymupdf.paper_rect(\"letter-l\")\n> pymupdf.Rect(0.0, 0.0, 792.0, 612.0)\n> >>> \n> ```", "```py\n> sRGB_to_pdf(srgb)\n> ```", "```py\n> sRGB_to_rgb(srgb)\n> ```", "```py\n> glyph_name_to_unicode(name)\n> ```", "```py\n> unicode_to_glyph_name(ch)\n> ```", "```py\n> adobe_glyph_names()\n> ```", "```py\n> adobe_glyph_unicodes()\n> ```", "```py\n> css_for_pymupdf_font(fontcode, *, CSS=None, archive=None, name=None)\n> ```", "```py\n> arch = pymupdf.Archive()\n> CSS = pymupdf.css_for_pymupdf_font(\"notos\", name=\"sans-serif\", archive=arch)\n> story = pymupdf.Story(user_css=CSS, archive=arch) \n> ```", "```py\n> make_table(rect, cols=1, rows=1)\n> ```", "```py\n> planish_line(p1, p2)\n> ```", "```py\n> >>> p1 = pymupdf.Point(1, 1)\n> >>> p2 = pymupdf.Point(4, 5)\n> >>> abs(p2 - p1)  # distance of points\n> 5.0\n> >>> m = pymupdf.planish_line(p1, p2)\n> >>> p1 * m\n> Point(0.0, 0.0)\n> >>> p2 * m\n> Point(5.0, -5.960464477539063e-08)\n> >>> # distance of the resulting points\n> >>> abs(p2 * m - p1 * m)\n> 5.0 \n> ```", "```py\n> paper_sizes()\n> ```", "```py\n> fitz_fontdescriptors\n> ```", "```py\n> In [2]: pymupdf.fitz_fontdescriptors.keys()\n> Out[2]: dict_keys(['figbo', 'figo', 'figbi', 'figit', 'fimbo', 'fimo',\n> 'spacembo', 'spacembi', 'spacemit', 'spacemo', 'math', 'music', 'symbol1',\n> 'symbol2'])\n> In [3]: pymupdf.fitz_fontdescriptors[\"fimo\"]\n> Out[3]:\n> {'name': 'Fira Mono Regular',\n> 'size': 125712,\n> 'mono': True,\n> 'bold': False,\n> 'italic': False,\n> 'serif': True,\n> 'glyphs': 1485} \n> ```", "```py\n> TESSDATA_PREFIX\n> ```", "```py\n> pdfcolor\n> ```", "```py\n> get_pdf_now()\n> ```", "```py\n> get_text_length(text, fontname='helv', fontsize=11, encoding=TEXT_ENCODING_LATIN)\n> ```", "```py\n> get_pdf_str(text)\n> ```", "```py\n> image_profile(stream)\n> ```", "```py\n> In [2]: pymupdf.image_profile(open(\"nur-ruhig.jpg\", \"rb\").read())\n> Out[2]:\n> {'width': 439,\n> 'height': 501,\n> 'orientation': 0,  # natural orientation (from EXIF)\n> 'transform': (1.0, 0.0, 0.0, 1.0, 0.0, 0.0),  # orientation matrix\n> 'xres': 96,\n> 'yres': 96,\n> 'colorspace': 3,\n> 'bpc': 8,\n> 'ext': 'jpeg',\n> 'cs-name': 'DeviceRGB'} \n> ```", "```py\n> ConversionHeader(\"text\", filename=\"UNKNOWN\")\n> ```", "```py\n> ConversionTrailer(output)\n> ```", "```py\n> Document.del_xml_metadata()\n> ```", "```py\n> Document.xml_metadata_xref()\n> ```", "```py\n> Page.run(dev, transform)\n> ```", "```py\n> Page.get_bboxlog(layers=False)\n> ```", "```py\n> Page.get_texttrace()\n> ```", "```py\n> {\n>    'ascender': 0.83251953125,          # font ascender (1)\n>    'bbox': (458.14019775390625,        # span bbox x0 (7)\n>             749.4671630859375,         # span bbox y0\n>             467.76458740234375,        # span bbox x1\n>             757.5071411132812),        # span bbox y1\n>    'bidi': 0,                          # bidirectional level (1)\n>    'chars': (                          # char information, tuple[tuple]\n>                (45,                    # unicode (4)\n>                16,                     # glyph id (font dependent)\n>                (458.14019775390625,    # origin.x (1)\n>                755.3758544921875),     # origin.y (1)\n>                (458.14019775390625,    # char bbox x0 (6)\n>                749.4671630859375,      # char bbox y0\n>                462.9649963378906,      # char bbox x1\n>                757.5071411132812)),    # char bbox y1\n>                ( ... ),                # more characters\n>             ),\n>    'color': (0.0,),                    # text color, tuple[float] (1)\n>    'colorspace': 1,                    # number of colorspace components (1)\n>    'descender': -0.30029296875,        # font descender (1)\n>    'dir': (1.0, 0.0),                  # writing direction (1)\n>    'flags': 12,                        # font flags (1)\n>    'font': 'CourierNewPSMT',           # font name (1)\n>    'linewidth': 0.4019999980926514,    # current line width value (3)\n>    'opacity': 1.0,                     # alpha value of the text (5)\n>    'layer': None,                      # name of Optional Content Group (9)\n>    'seqno': 246,                       # sequence number (8)\n>    'size': 8.039999961853027,          # font size (1)\n>    'spacewidth': 4.824785133358091,    # width of space char\n>    'type': 0,                          # span type (2)\n>    'wmode': 0                          # writing mode (1)\n> } \n> ```", "```py\n>         (102, glyph, (x, y), (x0, y0, x1, y1))  # 102 = ord(\"f\")\n>         (105, -1, (x, y), (x0, y0, x0, y1))     # 105 = ord(\"i\"), empty bbox! \n>         ```", "```py\n> Page.wrap_contents()\n> ```", "```py\n> Page.is_wrapped\n> ```", "```py\n> Page.get_text_blocks(flags=None)\n> ```", "```py\n> Page.get_text_words(flags=None, delimiters=None)\n> ```", "```py\n> Page.get_displaylist()\n> ```", "```py\n> Page.get_contents()\n> ```", "```py\n> Page.set_contents(xref)\n> ```", "```py\n> Page.clean_contents(sanitize=True)\n> ```", "```py\n> Page.read_contents()\n> ```", "```py\n> Annot.clean_contents(sanitize=True)\n> ```", "```py\n> Document.get_char_widths(xref=0, limit=256)\n> ```", "```py\n> def pixlen(text, widthlist, fontsize):\n>     try:\n>         return sum([widthlist[ord(c)] for c in text]) * fontsize\n>     except IndexError:\n>         raise ValueError:(\"max. code point found: %i, increase limit\" % ord(max(text))) \n> ```", "```py\n> Document.is_stream(xref)\n> ```", "```py\n> Document.get_new_xref()\n> ```", "```py\n> Document.xref_length()\n> ```", "```py\n> recover_quad(line_dir, span)\n> ```", "```py\n> recover_char_quad(line_dir, span, char)\n> ```", "```py\n> recover_span_quad(line_dir, span, chars=None)\n> ```", "```py\n> recover_line_quad(line, spans=None)\n> ```", "```py\n> get_tessdata()\n> ```", "```py\n> INFINITE_QUAD()\n> ```", "```py\n> INFINITE_RECT()\n> ```", "```py\n> INFINITE_IRECT()\n> ```", "```py\n> EMPTY_QUAD()\n> ```", "```py\n> EMPTY_RECT()\n> ```", "```py\n> EMPTY_IRECT()\n> ```"]