- en: jax.nn.initializers module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/jax.nn.initializers.html`](https://jax.readthedocs.io/en/latest/jax.nn.initializers.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Common neural network layer initializers, consistent with definitions used in
    Keras and Sonnet.
  prefs: []
  type: TYPE_NORMAL
- en: Initializers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This module provides common neural network layer initializers, consistent with
    definitions used in Keras and Sonnet.
  prefs: []
  type: TYPE_NORMAL
- en: 'An initializer is a function that takes three arguments: `(key, shape, dtype)`
    and returns an array with dimensions `shape` and data type `dtype`. Argument `key`
    is a PRNG key (e.g. from `jax.random.key()`), used to generate random numbers
    to initialize the array.'
  prefs: []
  type: TYPE_NORMAL
- en: '| `constant`(value[, dtype]) | Builds an initializer that returns arrays full
    of a constant `value`. |'
  prefs: []
  type: TYPE_TB
- en: '| `delta_orthogonal`([scale, column_axis, dtype]) | Builds an initializer for
    delta orthogonal kernels. |'
  prefs: []
  type: TYPE_TB
- en: '| `glorot_normal`([in_axis, out_axis, ...]) | Builds a Glorot normal initializer
    (aka Xavier normal initializer). |'
  prefs: []
  type: TYPE_TB
- en: '| `glorot_uniform`([in_axis, out_axis, ...]) | Builds a Glorot uniform initializer
    (aka Xavier uniform initializer). |'
  prefs: []
  type: TYPE_TB
- en: '| `he_normal`([in_axis, out_axis, batch_axis, dtype]) | Builds a He normal
    initializer (aka Kaiming normal initializer). |'
  prefs: []
  type: TYPE_TB
- en: '| `he_uniform`([in_axis, out_axis, batch_axis, ...]) | Builds a He uniform
    initializer (aka Kaiming uniform initializer). |'
  prefs: []
  type: TYPE_TB
- en: '| `lecun_normal`([in_axis, out_axis, ...]) | Builds a Lecun normal initializer.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `lecun_uniform`([in_axis, out_axis, ...]) | Builds a Lecun uniform initializer.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `normal`([stddev, dtype]) | Builds an initializer that returns real normally-distributed
    random arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `ones`(key, shape[, dtype]) | An initializer that returns a constant array
    full of ones. |'
  prefs: []
  type: TYPE_TB
- en: '| `orthogonal`([scale, column_axis, dtype]) | Builds an initializer that returns
    uniformly distributed orthogonal matrices. |'
  prefs: []
  type: TYPE_TB
- en: '| `truncated_normal`([stddev, dtype, lower, upper]) | Builds an initializer
    that returns truncated-normal random arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `uniform`([scale, dtype]) | Builds an initializer that returns real uniformly-distributed
    random arrays. |'
  prefs: []
  type: TYPE_TB
- en: '| `variance_scaling`(scale, mode, distribution) | Initializer that adapts its
    scale to the shape of the weights tensor. |'
  prefs: []
  type: TYPE_TB
- en: '| `zeros`(key, shape[, dtype]) | An initializer that returns a constant array
    full of zeros. |'
  prefs: []
  type: TYPE_TB
