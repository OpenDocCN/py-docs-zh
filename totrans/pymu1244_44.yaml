- en: Story
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/story-class.html](https://pymupdf.readthedocs.io/en/latest/story-class.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*   New in v1.21.0'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method / Attribute** | **Short Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [`Story.reset()`](#Story.reset "Story.reset") | “rewind” story output to
    its beginning |'
  prefs: []
  type: TYPE_TB
- en: '| [`Story.place()`](#Story.place "Story.place") | compute story content to
    fit in provided rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`Story.draw()`](#Story.draw "Story.draw") | write the computed content to
    current page |'
  prefs: []
  type: TYPE_TB
- en: '| [`Story.element_positions()`](#Story.element_positions "Story.element_positions")
    | callback function logging currently processed story content |'
  prefs: []
  type: TYPE_TB
- en: '| [`Story.body`](#Story.body "Story.body") | the story’s underlying *body*
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`Story.write()`](#Story.write "Story.write") | places and draws Story to
    a DocumentWriter |'
  prefs: []
  type: TYPE_TB
- en: '| [`Story.write_stabilized()`](#Story.write_stabilized "Story.write_stabilized")
    | iterative layout of html content to a DocumentWriter |'
  prefs: []
  type: TYPE_TB
- en: '| [`Story.write_with_links()`](#Story.write_with_links "Story.write_with_links")
    | like [`write()`](#Story.write "Story.write") but also creates PDF links |'
  prefs: []
  type: TYPE_TB
- en: '| [`Story.write_stabilized_with_links()`](#Story.write_stabilized_with_links
    "Story.write_stabilized_with_links") | like [`write_stabilized()`](#Story.write_stabilized
    "Story.write_stabilized") but also creates PDF links |'
  prefs: []
  type: TYPE_TB
- en: '| [`Story.fit()`](#Story.fit "Story.fit") | Finds optimal rect that contains
    the story `self`. |'
  prefs: []
  type: TYPE_TB
- en: '| [`Story.fit_scale()`](#Story.fit_scale "Story.fit_scale") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Story.fit_height()`](#Story.fit_height "Story.fit_height") |  |'
  prefs: []
  type: TYPE_TB
- en: '| [`Story.fit_width()`](#Story.fit_width "Story.fit_width") |  |'
  prefs: []
  type: TYPE_TB
- en: '**Class API**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Create a **story**, optionally providing HTML and CSS source. The HTML is parsed,
    and held within the Story as a DOM (Document Object Model).
  prefs: []
  type: TYPE_NORMAL
- en: 'This structure may be modified: content (text, images) may be added, copied,
    modified or removed by using methods of the [Xml](xml-class.html#xml) class.'
  prefs: []
  type: TYPE_NORMAL
- en: When finished, the **story** can be written to any device; in typical usage
    the device may be provided by a [DocumentWriter](document-writer-class.html#documentwriter)
    to make new pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some general remarks:'
  prefs: []
  type: TYPE_NORMAL
- en: The [Story](#story) constructor parses and validates the provided HTML to create
    the DOM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyMuPDF provides a number of ways to manipulate the HTML source by providing
    access to the *nodes* of the underlying DOM. Documents can be completely built
    from ground up programmatically, or the existing DOM can be modified pretty arbitrarily.
    For details of this interface, please see the [Xml](xml-class.html#xml) class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no (or no more) changes to the DOM are required, the story is ready to be
    laid out and to be fed to a series of devices (typically devices provided by a
    [DocumentWriter](document-writer-class.html#documentwriter) to produce new pages).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next step is to place the story and write it out. This can either be done
    directly, by looping around calling [`place()`](#Story.place "Story.place") and
    [`draw()`](#Story.draw "Story.draw"), or alternatively, the looping can handled
    for you using the [`write()`](#Story.write "Story.write") or `write_stabilised()`
    methods. Which method you choose is largely a matter of taste.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To work in the first of these styles, the following loop should be used:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtain a suitable device to write to; typically by requesting a new, empty page
    from a [DocumentWriter](document-writer-class.html#documentwriter).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine one or more rectangles on the page, that should receive **story**
    data. Note that not every page needs to have the same set of rectangles.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Pass each rectangle to the **story** to place it, learning what part of that
    rectangle has been filled, and whether there is more story data that did not fit.
    This step can be repeated several times with adjusted rectangles until the caller
    is happy with the results.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, at this point, we can request details of where interesting items
    have been placed, by calling the [`element_positions()`](#Story.element_positions
    "Story.element_positions") method. Items are deemed to be interesting if their
    integer `heading` attribute is a non-zero (corresponding to HTML tags *h1* - *h6*),
    if their `id` attribute is not `None` (corresponding to HTML tag *id*), or if
    their `href` attribute is not `None` (responding to HTML tag *href*). This can
    conveniently be used for automatic generation of a Table of Contents, an index
    of images or the like.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, draw that rectangle out to the device with the [`draw()`](#Story.draw
    "Story.draw") method.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If the most recent call to [`place()`](#Story.place "Story.place") indicated
    that all the story data had fitted, stop now.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Otherwise, we can loop back. If there are more rectangles to be placed on the
    current device (page), we jump back to step 3 - if not, we jump back to step 1
    to get a new device.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternatively, in the case where you are using a [DocumentWriter](document-writer-class.html#documentwriter),
    the [`write()`](#Story.write "Story.write") or [`write_stabilized()`](#Story.write_stabilized
    "Story.write_stabilized") methods can be used. These handle all the looping for
    you, in exchange for being provided with callbacks that control the behaviour
    (notably a callback that enumerates the rectangles/pages to use).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Which part of the **story** will land on which rectangle / which page, is fully
    under control of the [Story](#story) object and cannot be predicted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images may be part of a **story**. They will be placed together with any surrounding
    text.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple stories may - independently from each other - write to the same page.
    For example, one may have separate stories for page header, page footer, regular
    text, comment boxes, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**html** (*str*) – HTML source code. If omitted, a basic minimum is generated
    (see below). If provided, not a complete HTML document is needed. The in-built
    source parser will forgive (many / most) HTML syntax errors and also accepts HTML
    fragments like `"<b>Hello, <i>World!</i></b>"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**user_css** (*str*) – CSS source code. If provided, must contain valid CSS
    specifications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**em** (*float*) – the default text font size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**archive** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an [Archive](archive-class.html#archive) from which to load resources for rendering.
    Currently supported resource types are images and text fonts. If omitted, the
    story will not try to look up any such data and may thus produce incomplete output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Instead of an actual archive, valid arguments for **creating** an [Archive](archive-class.html#archive)
    can also be provided – in which case an archive will temporarily be constructed.
    So, instead of `story = pymupdf.Story(archive=pymupdf.Archive("myfolder"))`, one
    can also shorter write `story = pymupdf.Story(archive="myfolder")`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Calculate that part of the story’s content, that will fit in the provided rectangle.
    The method maintains a pointer which part of the story’s content has already been
    written and upon the next invocation resumes from that pointer’s position.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**where** (*rect_like*) – layout the current part of the content to fit into
    this rectangle. This must be a sub-rectangle of the page’s [MediaBox](glossary.html#glossary-mediabox).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: tuple[bool, rect_like]
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a bool (int) `more` and a rectangle `filled`. If `more == 0`, all content of
    the story has been written, otherwise more is waiting to be written to subsequent
    rectangles / pages. Rectangle `filled` is the part of `where` that has actually
    been filled.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Write the content part prepared by [`Story.place()`](#Story.place "Story.place")
    to the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dev** – the [Device](device.html#device) created by `dev = writer.begin_page(mediabox)`.
    The device knows how to call all MuPDF functions needed to write the content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**matrix** (*matrix_like*) – a matrix for transforming content when writing
    to the page. An example may be writing rotated text. The default means no transformation
    (i.e. the [Identity](identity.html#identity) matrix).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Let the Story provide positioning information about certain HTML elements once
    their place on the current page has been computed - i.e. invoke this method **directly
    after** [`Story.place()`](#Story.place "Story.place").
  prefs: []
  type: TYPE_NORMAL
- en: '*Story* will pass position information to *function*. This information can
    for example be used to generate a Table of Contents.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**function** (*callable*) – a Python function accepting an `ElementPosition`
    object. It will be invoked by the Story object to process positioning information.
    The function **must** be a callable accepting exactly one argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**args** (*dict*) – an optional dictionary with any **additional** information
    that should be added to the `ElementPosition` instance passed to `function`. Like
    for example the current output page number. Every key in this dictionary must
    be a string that conforms to the rules for a valid Python identifier. The complete
    set of information is explained below.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Rewind the story’s document to the beginning for starting over its output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The *body* part of the story’s DOM. This attribute contains the [Xml](xml-class.html#xml)
    node of *body*. All relevant content for PDF production is contained between “<body>”
    and “</body>”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Places and draws Story to a [DocumentWriter](document-writer-class.html#documentwriter).
    Avoids the need for calling code to implement a loop that calls [`Story.place()`](#Story.place
    "Story.place") and [`Story.draw()`](#Story.draw "Story.draw") etc, at the expense
    of having to provide at least the `rectfn()` callback.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**writer** – a [DocumentWriter](document-writer-class.html#documentwriter)
    or None.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rectfn** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a callable taking `(rect_num: int, filled: Rect)` and returning `(mediabox,
    rect, ctm)`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'mediabox: None or rect for new page.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'rect: The next rect into which content should be placed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ctm: None or a [Matrix](matrix.html#matrix).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**positionfn** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'None, or a callable taking `(position: ElementPosition)`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'position:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: An `ElementPosition` with an extra `.page_num` member.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Typically called multiple times as we generate elements that are headings or
    have an id.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**pagefn** – None, or a callable taking `(page_num, mediabox, dev, after)`;
    called at start (`after=0`) and end (`after=1`) of each page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Static method that does iterative layout of html content to a [DocumentWriter](document-writer-class.html#documentwriter).
  prefs: []
  type: TYPE_NORMAL
- en: For example this allows one to add a table of contents section while ensuring
    that page numbers are patched up until stable.
  prefs: []
  type: TYPE_NORMAL
- en: Repeatedly creates a new [Story](#story) from `(contentfn(), user_css, em, archive)`
    and lays it out with internal call to [`Story.write()`](#Story.write "Story.write");
    uses a None writer and extracts the list of `ElementPosition`’s which is passed
    to the next call of `contentfn()`.
  prefs: []
  type: TYPE_NORMAL
- en: When the html from `contentfn()` becomes unchanged, we do a final iteration
    using `writer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**writer** – A [DocumentWriter](document-writer-class.html#documentwriter).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**contentfn** – A function taking a list of `ElementPositions` and returning
    a string containing html. The returned html can depend on the list of positions,
    for example with a table of contents near the start.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rectfn** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A callable taking `(rect_num: int, filled: Rect)` and returning `(mediabox,
    rect, ctm)`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'mediabox: None or rect for new page.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'rect: The next rect into which content should be placed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ctm: A [Matrix](matrix.html#matrix).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pagefn** – None, or a callable taking `(page_num, medibox, dev, after)`;
    called at start (`after=0`) and end (`after=1`) of each page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**archive** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**add_header_ids** – If true, we add unique ids to all header tags that don’t
    already have an id. This can help automatic generation of tables of contents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: None.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Similar to [`write()`](#Story.write "Story.write") except that we don’t have
    a `writer` arg and we return a PDF [Document](document.html#document) in which
    links have been created for each internal html link.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Similar to [`write_stabilized()`](#Story.write_stabilized "Story.write_stabilized")
    except that we don’t have a `writer` arg and instead return a PDF [Document](document.html#document)
    in which links have been created for each internal html link.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The result from a `Story.fit*()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Members:'
  prefs: []
  type: TYPE_NORMAL
- en: '`big_enough`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`True` if the fit succeeded.'
  prefs: []
  type: TYPE_NORMAL
- en: '`filled`:'
  prefs: []
  type: TYPE_NORMAL
- en: From the last call to [`Story.place()`](#Story.place "Story.place").
  prefs: []
  type: TYPE_NORMAL
- en: '`more`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`False` if the fit succeeded.'
  prefs: []
  type: TYPE_NORMAL
- en: '`numcalls`:'
  prefs: []
  type: TYPE_NORMAL
- en: Number of calls made to `self.place()`.
  prefs: []
  type: TYPE_NORMAL
- en: '`parameter`:'
  prefs: []
  type: TYPE_NORMAL
- en: The successful parameter value, or the largest failing value.
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html):'
  prefs: []
  type: TYPE_NORMAL
- en: The rect created from `parameter`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Finds optimal rect that contains the story `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a [`Story.FitResult`](#Story.FitResult "Story.FitResult") instance.
  prefs: []
  type: TYPE_NORMAL
- en: On success, the last call to `self.place()` will have been with the returned
    rectangle, so `self.draw()` can be used directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fn** –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A callable taking a floating point `parameter` and returning a `pymupdf.Rect()`.
    If the rect is empty, we assume the story will not fit and do not call `self.place()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Must guarantee that `self.place()` behaves monotonically when given rect `fn(parameter`)
    as `parameter` increases. This usually means that both width and height increase
    or stay unchanged as `parameter` increases.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**pmin** – Minimum parameter to consider; `None` for -infinity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pmax** – Maximum parameter to consider; `None` for +infinity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**delta** – Maximum error in returned `parameter`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**verbose** – If true we output diagnostics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Finds smallest value `scale` in range `scale_min..scale_max` where `scale *
    rect` is large enough to contain the story `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a [`Story.FitResult`](#Story.FitResult "Story.FitResult") instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**width** – width of rect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**height** – height of rect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**scale_min** – Minimum scale to consider; must be >= 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**scale_max** – Maximum scale to consider, must be >= scale_min or `None` for
    infinite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**delta** – Maximum error in returned scale.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**verbose** – If true we output diagnostics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Finds smallest height in range `height_min..height_max` where a rect with size
    `(width, height)` is large enough to contain the story `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a [`Story.FitResult`](#Story.FitResult "Story.FitResult") instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**width** – width of rect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**height_min** – Minimum height to consider; must be >= 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**height_max** – Maximum height to consider, must be >= height_min or `None`
    for infinite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**origin** – `(x0, y0)` of rect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**delta** – Maximum error in returned height.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**verbose** – If true we output diagnostics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Finds smallest width in range `width_min..width_max` where a rect with size
    `(width, height)` is large enough to contain the story `self`.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a [`Story.FitResult`](#Story.FitResult "Story.FitResult") instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**height** – height of rect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**width_min** – Minimum width to consider; must be >= 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**width_max** – Maximum width to consider, must be >= width_min or `None` for
    infinite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**origin** – `(x0, y0)` of rect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**delta** – Maximum error in returned width.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**verbose** – If true we output diagnostics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Element Positioning CallBack function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The callback function can be used to log information about story output. The
    function’s access to the information is read-only: it has no way to influence
    the story’s output.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical loop for executing a story with using this method would look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Attributes of the ElementPosition class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Exactly one parameter must be passed to the function provided by [`Story.element_positions()`](#Story.element_positions
    "Story.element_positions"). It is an object with the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The parameter passed to the `recorder` function is an object with the following
    attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`elpos.depth` (int) – depth of this element in the box structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.heading` (int) – the header level, 0 if no header, 1-6 for *h1* - *h6*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.href` (str) – value of the `href` attribute, or None if not defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.id` (str) – value of the `id` attribute, or None if not defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.rect` (tuple) – element position on page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.text` (str) – immediate text of the element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.open_close` (int bit field) – bit 0 set: opens element, bit 1 set: closes
    element. Relevant for elements that may contain other elements and thus may not
    immediately be closed after being created / opened.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.rect_num` (int) – count of rectangles filled by the story so far.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.page_num` (int) – page number; only present when using `pymupdf.Story.write*()`
    functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
- en: Element Positioning CallBack function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The callback function can be used to log information about story output. The
    function’s access to the information is read-only: it has no way to influence
    the story’s output.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical loop for executing a story with using this method would look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Attributes of the ElementPosition class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Exactly one parameter must be passed to the function provided by [`Story.element_positions()`](#Story.element_positions
    "Story.element_positions"). It is an object with the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The parameter passed to the `recorder` function is an object with the following
    attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`elpos.depth` (int) – depth of this element in the box structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.heading` (int) – the header level, 0 if no header, 1-6 for *h1* - *h6*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.href` (str) – value of the `href` attribute, or None if not defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.id` (str) – value of the `id` attribute, or None if not defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.rect` (tuple) – element position on page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.text` (str) – immediate text of the element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.open_close` (int bit field) – bit 0 set: opens element, bit 1 set: closes
    element. Relevant for elements that may contain other elements and thus may not
    immediately be closed after being created / opened.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.rect_num` (int) – count of rectangles filled by the story so far.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.page_num` (int) – page number; only present when using `pymupdf.Story.write*()`
    functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
- en: Attributes of the ElementPosition class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Exactly one parameter must be passed to the function provided by [`Story.element_positions()`](#Story.element_positions
    "Story.element_positions"). It is an object with the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The parameter passed to the `recorder` function is an object with the following
    attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`elpos.depth` (int) – depth of this element in the box structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.heading` (int) – the header level, 0 if no header, 1-6 for *h1* - *h6*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.href` (str) – value of the `href` attribute, or None if not defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.id` (str) – value of the `id` attribute, or None if not defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.rect` (tuple) – element position on page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.text` (str) – immediate text of the element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.open_close` (int bit field) – bit 0 set: opens element, bit 1 set: closes
    element. Relevant for elements that may contain other elements and thus may not
    immediately be closed after being created / opened.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.rect_num` (int) – count of rectangles filled by the story so far.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elpos.page_num` (int) – page number; only present when using `pymupdf.Story.write*()`
    functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
