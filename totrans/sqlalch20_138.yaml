- en: 0.3 Changelog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 0.3变更日志
- en: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_03.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_03.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/changelog/changelog_03.html](https://docs.sqlalchemy.org/en/20/changelog/changelog_03.html)
- en: 0.3.11
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.11
- en: 'Released: Sun Oct 14 2007'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年10月14日星期日
- en: orm
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added a check for joining from A->B using join(), along two different m2m tables.
    this raises an error in 0.3 but is possible in 0.4 when aliases are used.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个检查，用join()从A->B连接时，沿着两个不同的m2m表。这在0.3中会引发错误，但在0.4中使用别名时是可能的。
- en: 'References: [#687](https://www.sqlalchemy.org/trac/ticket/687)'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#687](https://www.sqlalchemy.org/trac/ticket/687)
- en: '**[orm]**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed small exception throw bug in Session.merge()
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Session.merge()中的小异常抛出bug
- en: '**[orm]**'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug where mapper, being linked to a join where one table had no PK columns,
    would not detect that the joined table had no PK.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了映射器的bug，当链接到一个表没有主键列时，不会检测到连接的表没有主键。
- en: '**[orm]**'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bugs in determining proper sync clauses from custom inherit conditions
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从自定义继承条件确定正确同步子句的错误
- en: 'References: [#769](https://www.sqlalchemy.org/trac/ticket/769)'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#769](https://www.sqlalchemy.org/trac/ticket/769)
- en: '**[orm]**'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: backref remove object operation doesn’t fail if the other-side collection doesn’t
    contain the item, supports noload collections
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果另一侧集合不包含项目，则backref删除对象操作不会失败，支持noload集合
- en: 'References: [#813](https://www.sqlalchemy.org/trac/ticket/813)'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#813](https://www.sqlalchemy.org/trac/ticket/813)
- en: engine
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: fixed another occasional race condition which could occur when using pool with
    threadlocal setting
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用带有threadlocal设置的池时可能发生的另一个偶发竞争条件
- en: sql
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: tweak DISTINCT precedence for clauses like func.count(t.c.col.distinct())
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了像func.count(t.c.col.distinct())这样的子句的DISTINCT优先级
- en: '**[sql]**'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed detection of internal ‘$’ characters in :bind$params
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在:bind$params中检测内部‘$’字符的bug
- en: 'References: [#719](https://www.sqlalchemy.org/trac/ticket/719)'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#719](https://www.sqlalchemy.org/trac/ticket/719)
- en: '**[sql]**'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: don’t assume join criterion consists only of column objects
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要假设连接条件仅由列对象组成
- en: 'References: [#768](https://www.sqlalchemy.org/trac/ticket/768)'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#768](https://www.sqlalchemy.org/trac/ticket/768)
- en: '**[sql]**'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: adjusted operator precedence of NOT to match ‘==’ and others, so that ~(x==y)
    produces NOT (x=y), which is compatible with MySQL < 5.0 (doesn’t like “NOT x=y”)
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了NOT的运算符优先级，以匹配‘==’和其他运算符，因此~(x==y)产生NOT (x=y)，这与MySQL < 5.0兼容（不喜欢“NOT x=y”）
- en: 'References: [#764](https://www.sqlalchemy.org/trac/ticket/764)'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#764](https://www.sqlalchemy.org/trac/ticket/764)
- en: mysql
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: fixed specification of YEAR columns when generating schema
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了生成模式时YEAR列的规范
- en: sqlite
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: passthrough for stringified dates
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递字符串化日期
- en: mssql
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: added support for TIME columns (simulated using DATETIME)
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对TIME列的支持（使用DATETIME模拟）
- en: 'References: [#679](https://www.sqlalchemy.org/trac/ticket/679)'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#679](https://www.sqlalchemy.org/trac/ticket/679)
- en: '**[mssql]**'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: added support for BIGINT, MONEY, SMALLMONEY, UNIQUEIDENTIFIER and SQL_VARIANT
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加对BIGINT、MONEY、SMALLMONEY、UNIQUEIDENTIFIER和SQL_VARIANT的支持
- en: 'References: [#721](https://www.sqlalchemy.org/trac/ticket/721)'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#721](https://www.sqlalchemy.org/trac/ticket/721)
- en: '**[mssql]**'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: index names are now quoted when dropping from reflected tables
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从反射表中删除索引时现在会对索引名称进行引用
- en: 'References: [#684](https://www.sqlalchemy.org/trac/ticket/684)'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#684](https://www.sqlalchemy.org/trac/ticket/684)
- en: '**[mssql]**'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: can now specify a DSN for PyODBC, using a URI like mssql:///?dsn=bob
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以为PyODBC指定DSN，使用类似mssql:///?dsn=bob的URI
- en: oracle
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: removed LONG_STRING, LONG_BINARY from “binary” types, so type objects don’t
    try to read their values as LOB.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从“binary”类型中移除了LONG_STRING、LONG_BINARY，因此类型对象不会尝试将其值读取为LOB。
- en: 'References: [#622](https://www.sqlalchemy.org/trac/ticket/622), [#751](https://www.sqlalchemy.org/trac/ticket/751)'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#622](https://www.sqlalchemy.org/trac/ticket/622)，[#751](https://www.sqlalchemy.org/trac/ticket/751)
- en: misc
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: misc
- en: '**[postgres]**'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: when reflecting tables from alternate schemas, the “default” placed upon the
    primary key, i.e. usually a sequence name, has the “schema” name unconditionally
    quoted, so that schema names which need quoting are fine. its slightly unnecessary
    for schema names which don’t need quoting but not harmful.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从替代模式反射表时，放在主键上的“default”（通常是序列名称）的“schema”名称无条件引用，因此需要引用的模式名称是可以的。对于不需要引用的模式名称来说，这有点多余但不会有害。
- en: '**[firebird]**'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: 'supports_sane_rowcount() set to False due to ticket #370 (right way).'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于票号#370（正确方式），supports_sane_rowcount()设置为False。
- en: '**[firebird]**'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: fixed reflection of Column’s nullable property.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Column的nullable属性的反射。
- en: 0.3.10
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.10
- en: 'Released: Fri Jul 20 2007'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年7月20日
- en: general
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: a new mutex that was added in 0.3.9 causes the pool_timeout feature to fail
    during a race condition; threads would raise TimeoutError immediately with no
    delay if many threads push the pool into overflow at the same time. this issue
    has been fixed.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在0.3.9中添加的新互斥体导致在竞争条件下pool_timeout功能失败；如果许多线程同时将池推入溢出，线程将立即引发TimeoutError，没有延迟。此问题已得到解决。
- en: orm
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: cleanup to connection-bound sessions, SessionTransaction
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 清理连接绑定的会话、SessionTransaction
- en: sql
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: got connection-bound metadata to work with implicit execution
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使连接绑定的元数据与隐式执行一起工作
- en: '**[sql]**'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: foreign key specs can have any character in their identifiers
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 外键规范可以在其标识符中包含任何字符
- en: 'References: [#667](https://www.sqlalchemy.org/trac/ticket/667)'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#667](https://www.sqlalchemy.org/trac/ticket/667)
- en: '**[sql]**'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added commutativity-awareness to binary clause comparisons to each other, improves
    ORM lazy load optimization
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对二进制子句之间的可交换性进行了改进，改善了ORM的延迟加载优化
- en: 'References: [#664](https://www.sqlalchemy.org/trac/ticket/664)'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#664](https://www.sqlalchemy.org/trac/ticket/664)
- en: misc
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[postgres]**'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: fixed max identifier length (63)
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了最大标识符长度（63）
- en: 'References: [#571](https://www.sqlalchemy.org/trac/ticket/571)'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#571](https://www.sqlalchemy.org/trac/ticket/571)
- en: 0.3.9
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.9
- en: 'Released: Sun Jul 15 2007'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年7月15日
- en: general
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: better error message for NoSuchColumnError
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为NoSuchColumnError添加了更好的错误消息
- en: 'References: [#607](https://www.sqlalchemy.org/trac/ticket/607)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#607](https://www.sqlalchemy.org/trac/ticket/607)
- en: '**[general]**'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: finally figured out how to get setuptools version in, available as sqlalchemy.__version__
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终弄清楚了如何将setuptools版本引入，可作为sqlalchemy.__version__使用
- en: 'References: [#428](https://www.sqlalchemy.org/trac/ticket/428)'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#428](https://www.sqlalchemy.org/trac/ticket/428)
- en: '**[general]**'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: the various “engine” arguments, such as “engine”, “connectable”, “engine_or_url”,
    “bind_to”, etc. are all present, but deprecated. they all get replaced by the
    single term “bind”. you also set the “bind” of MetaData using metadata.bind =
    <engine or connection>
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 各种“engine”参数，如“engine”、“connectable”、“engine_or_url”、“bind_to”等都存在，但已被弃用。它们都被单个术语“bind”替代。您还可以使用metadata.bind
    = <engine or connection>来设置MetaData的“bind”。
- en: orm
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'forwards-compatibility with 0.4: added one(), first(), and all() to Query.
    almost all Query functionality from 0.4 is present in 0.3.9 for forwards-compat
    purposes.'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与0.4的向前兼容性：向Query添加了one()、first()和all()。几乎所有0.4的Query功能在0.3.9中都存在，以实现向前兼容。
- en: '**[orm]**'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'reset_joinpoint() really really works this time, promise ! lets you re-join
    from the root: query.join([‘a’, ‘b’]).filter(<crit>).reset_joinpoint().join([‘a’,
    ‘c’]).filter(<some other crit>).all() in 0.4 all join() calls start from the “root”'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: reset_joinpoint()这次真的有效了，保证！允许您从根重新加入：query.join(['a', 'b']).filter(<crit>).reset_joinpoint().join(['a',
    'c']).filter(<some other crit>).all()在0.4中，所有join()调用都从“root”开始
- en: '**[orm]**'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added synchronization to the mapper() construction step, to avoid thread collisions
    when pre-existing mappers are compiling in a different thread
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在mapper()构造步骤中添加了同步，以避免在不同线程中编译预先存在的映射器时发生线程冲突
- en: 'References: [#613](https://www.sqlalchemy.org/trac/ticket/613)'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#613](https://www.sqlalchemy.org/trac/ticket/613)
- en: '**[orm]**'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a warning is issued by Mapper when two primary key columns of the same name
    are munged into a single attribute. this happens frequently when mapping to joins
    (or inheritance).
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当Mapper将两个同名主键列混合为单个属性时，会发出警告。这在映射到连接（或继承）时经常发生。
- en: '**[orm]**'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: synonym() properties are fully supported by all Query joining/ with_parent operations
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: synonym()属性完全受到所有Query joining/ with_parent操作的支持
- en: 'References: [#598](https://www.sqlalchemy.org/trac/ticket/598)'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#598](https://www.sqlalchemy.org/trac/ticket/598)
- en: '**[orm]**'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed very stupid bug when deleting items with many-to-many uselist=False relations
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用many-to-many uselist=False关系删除项目时的非常愚蠢的错误
- en: '**[orm]**'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: remember all that stuff about polymorphic_union ? for joined table inheritance
    ? Funny thing… You sort of don’t need it for joined table inheritance, you can
    just string all the tables together via outerjoin(). The UNION still applies if
    concrete tables are involved, though (since nothing to join them on).
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还记得关于多态联合的那些东西吗？用于连接表继承？有趣的是...对于连接表继承，你实际上不需要它，你可以通过outerjoin()将所有表串在一起。但如果涉及具体表，则UNION仍然适用（因为没有东西可以将它们连接起来）。
- en: '**[orm]**'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: small fix to eager loading to better work with eager loads to polymorphic mappers
    that are using a straight “outerjoin” clause
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对急切加载进行了一些修正，以更好地与使用直接“outerjoin”子句的多态映射的急切加载配合使用
- en: sql
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: ForeignKey to a table in a schema that’s not the default schema requires the
    schema to be explicit; i.e. ForeignKey(‘alt_schema.users.id’)
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到默认模式不是默认模式的表的`ForeignKey`需要明确指定模式；即`ForeignKey('alt_schema.users.id')`。
- en: '**[sql]**'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: MetaData can now be constructed with an engine or url as the first argument,
    just like BoundMetaData
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MetaData`现在可以使用引擎或URL作为第一个参数构造，就像`BoundMetaData`一样'
- en: '**[sql]**'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: BoundMetaData is now deprecated, and MetaData is a direct substitute.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`BoundMetaData`现已弃用，`MetaData`是直接的替代品。'
- en: '**[sql]**'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: DynamicMetaData has been renamed to ThreadLocalMetaData. the DynamicMetaData
    name is deprecated and is an alias for ThreadLocalMetaData or a regular MetaData
    if threadlocal=False
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`DynamicMetaData`已更名为`ThreadLocalMetaData`。`DynamicMetaData`名称已被弃用，并且是`ThreadLocalMetaData`的别名，或者如果`threadlocal=False`，则是常规`MetaData`。'
- en: '**[sql]**'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: composite primary key is represented as a non-keyed set to allow for composite
    keys consisting of cols with the same name; occurs within a Join. helps inheritance
    scenarios formulate correct PK.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表示复合主键的非键集，以允许由相同名称的列组成的复合键；出现在Join中。有助于继承方案制定正确的PK。
- en: '**[sql]**'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: improved ability to get the “correct” and most minimal set of primary key columns
    from a join, equating foreign keys and otherwise equated columns. this is also
    mostly to help inheritance scenarios formulate the best choice of primary key
    columns.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了从联接中获取“正确”的和最小的主键列集的能力，等同于外键和其他等价列。这主要是为了帮助继承方案制定最佳选择的主键列。
- en: 'References: [#185](https://www.sqlalchemy.org/trac/ticket/185)'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#185](https://www.sqlalchemy.org/trac/ticket/185)
- en: '**[sql]**'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added ‘bind’ argument to Sequence.create()/drop(), ColumnDefault.execute()
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了‘bind’参数到`Sequence.create()/drop()`，`ColumnDefault.execute()`
- en: '**[sql]**'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: columns can be overridden in a reflected table with a “key” attribute different
    than the column’s name, including for primary key columns
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用与列名不同的“key”属性在反射表中重写列，包括主键列。
- en: 'References: [#650](https://www.sqlalchemy.org/trac/ticket/650)'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#650](https://www.sqlalchemy.org/trac/ticket/650)
- en: '**[sql]**'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed “ambiguous column” result detection, when dupe col names exist in a result
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“模糊列”结果检测，在结果中存在重复列名时
- en: 'References: [#657](https://www.sqlalchemy.org/trac/ticket/657)'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#657](https://www.sqlalchemy.org/trac/ticket/657)
- en: '**[sql]**'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: some enhancements to “column targeting”, the ability to match a column to a
    “corresponding” column in another selectable. this affects mostly ORM ability
    to map to complex joins
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“column targeting”进行了一些增强，即将列与另一个可选择的“对应”列匹配的能力。这主要影响ORM映射到复杂连接的能力。
- en: '**[sql]**'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: MetaData and all SchemaItems are safe to use with pickle. slow table reflections
    can be dumped into a pickled file to be reused later. Just reconnect the engine
    to the metadata after unpickling.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MetaData`和所有`SchemaItems`可安全使用`pickle`。可以将缓慢的表反射转储到`pickle`文件中以供以后重用。只需在`unpickling`后重新连接到元数据的引擎。'
- en: 'References: [#619](https://www.sqlalchemy.org/trac/ticket/619)'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#619](https://www.sqlalchemy.org/trac/ticket/619)
- en: '**[sql]**'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added a mutex to QueuePool’s “overflow” calculation to prevent a race condition
    that can bypass max_overflow
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向`QueuePool`的“overflow”计算添加了互斥体，以防止绕过`max_overflow`的竞争条件
- en: '**[sql]**'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed grouping of compound selects to give correct results. will break on sqlite
    in some cases, but those cases were producing incorrect results anyway, sqlite
    doesn’t support grouped compound selects
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了复合选择的分组以给出正确的结果。在某些情况下会在sqlite上中断，但是那些情况无论如何都会产生不正确的结果，sqlite不支持分组的复合选择。
- en: 'References: [#623](https://www.sqlalchemy.org/trac/ticket/623)'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#623](https://www.sqlalchemy.org/trac/ticket/623)
- en: '**[sql]**'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed precedence of operators so that parenthesis are correctly applied
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修正了运算符的优先级，以正确应用括号。
- en: 'References: [#620](https://www.sqlalchemy.org/trac/ticket/620)'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#620](https://www.sqlalchemy.org/trac/ticket/620)
- en: '**[sql]**'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: calling <column>.in_() (i.e. with no arguments) will return “CASE WHEN (<column>
    IS NULL) THEN NULL ELSE 0 END = 1)”, so that NULL or False is returned in all
    cases, rather than throwing an error
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调用`<column>.in_()`（即不带参数）将返回“CASE WHEN (<column> IS NULL) THEN NULL ELSE 0 END
    = 1)” ，以便在所有情况下返回NULL或False，而不是抛出错误。
- en: 'References: [#545](https://www.sqlalchemy.org/trac/ticket/545)'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#545](https://www.sqlalchemy.org/trac/ticket/545)
- en: '**[sql]**'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed “where”/”from” criterion of select() to accept a unicode string in addition
    to regular string - both convert to text()
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 select() 的“where”/“from”条件，除了常规字符串外还接受 Unicode 字符串 - 两者都转换为 text()
- en: '**[sql]**'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added standalone distinct() function in addition to column.distinct()
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了独立的 distinct() 函数，除了 column.distinct()
- en: 'References: [#558](https://www.sqlalchemy.org/trac/ticket/558)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#558](https://www.sqlalchemy.org/trac/ticket/558)
- en: '**[sql]**'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: result.last_inserted_ids() should return a list that is identically sized to
    the primary key constraint of the table. values that were “passively” created
    and not available via cursor.lastrowid will be None.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: result.last_inserted_ids() 应返回与表的主键约束大小相同的列表。通过“被动”创建且不通过 cursor.lastrowid 可用的值将为
    None。
- en: '**[sql]**'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: long-identifier detection fixed to use > rather than >= for max ident length
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了长标识符检测，使用 > 而不是 >= 作为最大标识符长度
- en: 'References: [#589](https://www.sqlalchemy.org/trac/ticket/589)'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#589](https://www.sqlalchemy.org/trac/ticket/589)
- en: '**[sql]**'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed bug where selectable.corresponding_column(selectable.c.col) would not
    return selectable.c.col, if the selectable is a join of a table and another join
    involving the same table. messed up ORM decision making
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 bug，当 selectable 是表和涉及相同表的另一���连接的连接时，selectable.corresponding_column(selectable.c.col)
    不会返回 selectable.c.col。搞乱了 ORM 决策
- en: 'References: [#593](https://www.sqlalchemy.org/trac/ticket/593)'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#593](https://www.sqlalchemy.org/trac/ticket/593)
- en: '**[sql]**'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added Interval type to types.py
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 types.py 中添加了 Interval 类型
- en: 'References: [#595](https://www.sqlalchemy.org/trac/ticket/595)'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#595](https://www.sqlalchemy.org/trac/ticket/595)
- en: mysql
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: fixed catching of some errors that imply a dropped connection
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一些错误的捕获，这些错误暗示连接已断开
- en: 'References: [#625](https://www.sqlalchemy.org/trac/ticket/625)'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#625](https://www.sqlalchemy.org/trac/ticket/625)
- en: '**[mysql]**'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: fixed escaping of the modulo operator
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了模运算符的转义
- en: 'References: [#624](https://www.sqlalchemy.org/trac/ticket/624)'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#624](https://www.sqlalchemy.org/trac/ticket/624)
- en: '**[mysql]**'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: added ‘fields’ to reserved words
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 'fields' 作为保留字
- en: 'References: [#590](https://www.sqlalchemy.org/trac/ticket/590)'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#590](https://www.sqlalchemy.org/trac/ticket/590)
- en: '**[mysql]**'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: various reflection enhancement/fixes
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 各种反射增强/修复
- en: sqlite
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: rearranged dialect initialization so it has time to warn about pysqlite1 being
    too old.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新排列了方言初始化，以便及时警告 pysqlite1 过于陈旧。
- en: '**[sqlite]**'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: sqlite better handles datetime/date/time objects mixed and matched with various
    Date/Time/DateTime columns
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite 更好地处理混合使用各种 Date/Time/DateTime 列的日期时间/日期/时间对象
- en: '**[sqlite]**'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: string PK column inserts don’t get overwritten with OID
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串 PK 列插入不会被 OID 覆盖
- en: 'References: [#603](https://www.sqlalchemy.org/trac/ticket/603)'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#603](https://www.sqlalchemy.org/trac/ticket/603)
- en: mssql
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix port option handling for pyodbc
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pyodbc 的端口选项处理
- en: 'References: [#634](https://www.sqlalchemy.org/trac/ticket/634)'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#634](https://www.sqlalchemy.org/trac/ticket/634)
- en: '**[mssql]**'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: now able to reflect start and increment values for identity columns
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在能够反射标识列的起始和增量值
- en: '**[mssql]**'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: preliminary support for using scope_identity() with pyodbc
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 初步支持使用 scope_identity() 与 pyodbc
- en: oracle
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: 'datetime fixes: got subsecond TIMESTAMP to work, added OracleDate which supports
    types.Date with only year/month/day'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 日期时间修复：使亚秒级 TIMESTAMP 正常工作，添加支持仅具有年/月/日的 types.Date 的 OracleDate
- en: 'References: [#604](https://www.sqlalchemy.org/trac/ticket/604)'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#604](https://www.sqlalchemy.org/trac/ticket/604)
- en: '**[oracle]**'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added dialect flag “auto_convert_lobs”, defaults to True; will cause any LOB
    objects detected in a result set to be forced into OracleBinary so that the LOB
    is read() automatically, if no typemap was present (i.e., if a textual execute()
    was issued).
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了方言标志“auto_convert_lobs”，默认为 True；将强制将结果集中检测到的任何 LOB 对象转换为 OracleBinary，以便自动读取
    LOB，如果没有 typemap 存在（即，如果发出了文本执行()）。
- en: '**[oracle]**'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: mod operator ‘%’ produces MOD
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mod 运算符‘%’ 会产生 MOD
- en: 'References: [#624](https://www.sqlalchemy.org/trac/ticket/624)'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#624](https://www.sqlalchemy.org/trac/ticket/624)
- en: '**[oracle]**'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: converts cx_oracle datetime objects to Python datetime.datetime when Python
    2.3 used
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用 Python 2.3 时，将 cx_oracle datetime 对象转换为 Python datetime.datetime
- en: 'References: [#542](https://www.sqlalchemy.org/trac/ticket/542)'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#542](https://www.sqlalchemy.org/trac/ticket/542)
- en: '**[oracle]**'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: fixed unicode conversion in Oracle TEXT type
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Oracle TEXT 类型中的 Unicode 转换
- en: misc
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[ext]**'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: iteration over dict association proxies is now dict-like, not InstrumentedList-like
    (e.g. over keys instead of values)
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在对 dict association proxies 进行迭代时类似于 dict，而不是类似于 InstrumentedList（例如，通过键而不是值）
- en: '**[ext]**'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: association proxies no longer bind tightly to source collections, and are constructed
    with a thunk instead
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关联代理不再紧密绑定到源集合，并且使用一个thunk构造
- en: 'References: [#597](https://www.sqlalchemy.org/trac/ticket/597)'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#597](https://www.sqlalchemy.org/trac/ticket/597)
- en: '**[ext]**'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: added selectone_by() to assignmapper
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了selectone_by()到assignmapper
- en: '**[postgres]**'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: fixed escaping of the modulo operator
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了百分比运算符的转义
- en: 'References: [#624](https://www.sqlalchemy.org/trac/ticket/624)'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#624](https://www.sqlalchemy.org/trac/ticket/624)
- en: '**[postgres]**'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: added support for reflection of domains
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了对域反射的支持
- en: 'References: [#570](https://www.sqlalchemy.org/trac/ticket/570)'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#570](https://www.sqlalchemy.org/trac/ticket/570)
- en: '**[postgres]**'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: types which are missing during reflection resolve to Null type instead of raising
    an error
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反射期间缺少的类型解析为Null类型而不是引发错误
- en: '**[postgres]**'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: the fix in “schema” above fixes reflection of foreign keys from an alt-schema
    table to a public schema table
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述“schema”中的修复修复了从一个alt-schema表反射到一个public schema表的外键的问题
- en: 0.3.8
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.8
- en: 'Released: Sat Jun 02 2007'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年6月2日 星期六
- en: orm
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added reset_joinpoint() method to Query, moves the “join point” back to the
    starting mapper. 0.4 will change the behavior of join() to reset the “join point”
    in all cases so this is an interim method. for forwards compatibility, ensure
    joins across multiple relations are specified using a single join(), i.e. join([‘a’,
    ‘b’, ‘c’]).
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了reset_joinpoint()方法到Query，将“连接点”移回起始映射。0.4版本将更改join()的行为以在所有情况下重置“连接点”，因此这是一个临时方法。为了向前兼容，请确保跨多个关系指定连接使用单个join()，即join([‘a’,
    ‘b’, ‘c’])。
- en: '**[orm]**'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug in query.instances() that wouldn’t handle more than on additional
    mapper or one additional column.
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了query.instances()中的bug，该bug无法处理多个额外的映射或一个额外的列。
- en: '**[orm]**'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”delete-orphan” no longer implies “delete”. ongoing effort to separate the behavior
    of these two operations.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “delete-orphan”不再暗示“delete”。持续努力分离这两个操作的行为。
- en: '**[orm]**'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: many-to-many relationships properly set the type of bind params for delete operations
    on the association table
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多对多关系正确设置了关联表上删除操作的绑定参数类型
- en: '**[orm]**'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: many-to-many relationships check that the number of rows deleted from the association
    table by a delete operation matches the expected results
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多对多关系检查通过删除操作从关联表中删除的行数是否与预期结果匹配
- en: '**[orm]**'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.get() and session.load() propagate **kwargs through to query
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.get()和session.load()将**kwargs传播到查询
- en: '**[orm]**'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to polymorphic query which allows the original polymorphic_union to be embedded
    into a correlated subquery
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了允许原始多态联合嵌入到相关子查询中的多态查询
- en: 'References: [#577](https://www.sqlalchemy.org/trac/ticket/577)'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#577](https://www.sqlalchemy.org/trac/ticket/577)
- en: '**[orm]**'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to select_by(<propname>=<object instance>) -style joins in conjunction with
    many-to-many relationships, bug introduced in r2556
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了select_by(<propname>=<object instance>)风格的连接与多对多关系结合时的bug，该bug是在r2556中引入的
- en: '**[orm]**'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “primary_key” argument to mapper() is propagated to the “polymorphic” mapper.
    primary key columns in this list get normalized to that of the mapper’s local
    table.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper()的“primary_key”参数传播到“polymorphic”映射。此列表中的主键列被规范化为映射的本地表的主键。
- en: '**[orm]**'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: restored logging of “lazy loading clause” under sa.orm.strategies logger, got
    removed in 0.3.7
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了在sa.orm.strategies记录器下记录“延迟加载子句”的日志，该日志在0.3.7中被删除
- en: '**[orm]**'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: improved support for eagerloading of properties off of mappers that are mapped
    to select() statements; i.e. eagerloader is better at locating the correct selectable
    with which to attach its LEFT OUTER JOIN.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对映射到select()语句的属性进行急加载的支持；即，急加载器更擅长定位正确的可选择项以附加其LEFT OUTER JOIN。
- en: sql
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: _Label class overrides compare_self to return its ultimate object. meaning,
    if you say someexpr.label(‘foo’) == 5, it produces the correct “someexpr == 5”.
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _Label类覆盖compare_self以返回其最终对象。也就是说，如果你说someexpr.label(‘foo’) == 5，它会产生正确的“someexpr
    == 5”。
- en: '**[sql]**'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: '_Label propagates “_hide_froms()” so that scalar selects behave more properly
    with regards to FROM clause #574'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '_Label传播“_hide_froms()”，使得标量选择在FROM子句方面表现更正常 #574'
- en: '**[sql]**'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fix to long name generation when using oid_column as an order by (oids used
    heavily in mapper queries)
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用oid_column作为排序依据时生成长名称的bug（在映射查询中大量使用oids）
- en: '**[sql]**'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: significant speed improvement to ResultProxy, pre-caches TypeEngine dialect
    implementations and saves on function calls per column
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ResultProxy的速度显著提高，预先缓存TypeEngine方言实现，并节省每列的函数调用
- en: '**[sql]**'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: parenthesis are applied to clauses via a new _Grouping construct. uses operator
    precedence to more intelligently apply parenthesis to clauses, provides cleaner
    nesting of clauses (doesn’t mutate clauses placed in other clauses, i.e. no ‘parens’
    flag)
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过新的_Grouping构造将括号应用于子句。使用运算符优先级更智能地将括号应用于子句，提供更清晰的子句嵌套（不会改变放置在其他子句中的子句，即没有“parens”标志）
- en: '**[sql]**'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added ‘modifier’ keyword, works like func.<foo> except does not add parenthesis.
    e.g. select([modifier.DISTINCT(…)]) etc.
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了‘modifier’关键字，类似于func.<foo>，但不添加括号。例如 select([modifier.DISTINCT(…)]) 等。
- en: '**[sql]**'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: removed “no group by’s in a select that’s part of a UNION” restriction
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了“在UNION的一部分的SELECT中不能有GROUP BY”的限制
- en: 'References: [#578](https://www.sqlalchemy.org/trac/ticket/578)'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#578](https://www.sqlalchemy.org/trac/ticket/578)
- en: mysql
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Nearly all MySQL column types are now supported for declaration and reflection.
    Added NCHAR, NVARCHAR, VARBINARY, TINYBLOB, LONGBLOB, YEAR
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在几乎支持所有MySQL列类型的声明和反射。添加了NCHAR、NVARCHAR、VARBINARY、TINYBLOB、LONGBLOB、YEAR
- en: '**[mysql]**'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: The sqltypes.Binary passthrough now always builds a BLOB, avoiding problems
    with very old database versions
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqltypes.Binary透传现在始终构建一个BLOB，避免与非常旧的数据库版本的问题
- en: '**[mysql]**'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: support for column-level CHARACTER SET and COLLATE declarations, as well as
    ASCII, UNICODE, NATIONAL and BINARY shorthand.
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持列级CHARACTER SET和COLLATE声明，以及ASCII、UNICODE、NATIONAL和BINARY简写。
- en: misc
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[engines]**'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: added detach() to Connection, allows underlying DBAPI connection to be detached
    from its pool, closing on dereference/close() instead of being reused by the pool.
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了detach()到Connection，允许底层的DBAPI连接从其池中分离，在取消引用/关闭()时关闭，而不是被池重用。
- en: '**[engines]**'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: added invalidate() to Connection, immediately invalidates the Connection and
    its underlying DBAPI connection.
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了invalidate()到Connection，立即使Connection及其底层的DBAPI连接无效。
- en: '**[firebird]**'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: set max identifier length to 31
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将最大标识符长度设置为31
- en: '**[firebird]**'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: 'supports_sane_rowcount() set to False due to ticket #370. versioned_id_col
    feature won’t work in FB.'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于票号#370，supports_sane_rowcount()设置为False。versioned_id_col功能在FB中不起作用。
- en: '**[firebird]**'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: some execution fixes
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些执行修复
- en: '**[firebird]**'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: new association proxy implementation, implementing complete proxies to list,
    dict and set-based relation collections
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的association proxy实现，实现对基于列表、字典和集合的关系集合的完整代理
- en: '**[firebird]**'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: added orderinglist, a custom list class that synchronizes an object attribute
    with that object’s position in the list
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了orderinglist，一个自定义列表类，将对象属性与列表中对象的位置同步。
- en: '**[firebird]**'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: small fix to SelectResultsExt to not bypass itself during select().
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对SelectResultsExt进行了小修复，以避免在select()期间绕过自身。
- en: '**[firebird]**'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: added filter(), filter_by() to assignmapper
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了filter()、filter_by()到assignmapper
- en: 0.3.7
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.7
- en: 'Released: Sun Apr 29 2007'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年4月29日
- en: orm
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed critical issue when, after options(eagerload()) is used, the mapper would
    then always apply query “wrapping” behavior for all subsequent LIMIT/OFFSET/DISTINCT
    queries, even if no eager loading was applied on those subsequent queries.
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个关键问题，即在使用options(eagerload())后，映射器将始终对所有后续LIMIT/OFFSET/DISTINCT查询应用查询“包装”行为，即使在这些后续查询中没有应用急加载。
- en: '**[orm]**'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added query.with_parent(someinstance) method. searches for target instance using
    lazy join criterion from parent instance. takes optional string “property” to
    isolate the desired relation. also adds static Query.query_from_parent(instance,
    property) version.
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了query.with_parent(someinstance)方法。使用父实例的延迟连接条件搜索目标实例。可选字符串“property”用于隔离所需关系。还添加了静态Query.query_from_parent(instance,
    property)版本。
- en: 'References: [#541](https://www.sqlalchemy.org/trac/ticket/541)'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#541](https://www.sqlalchemy.org/trac/ticket/541)
- en: '**[orm]**'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: improved query.XXX_by(someprop=someinstance) querying to use similar methodology
    to with_parent, i.e. using the “lazy” clause which prevents adding the remote
    instance’s table to the SQL, thereby making more complex conditions possible
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了query.XXX_by(someprop=someinstance)查询，使用与with_parent类似的方法，即使用“lazy”子句，防止将远程实例的表添加到SQL中，从而使更复杂的条件成为可能
- en: 'References: [#554](https://www.sqlalchemy.org/trac/ticket/554)'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#554](https://www.sqlalchemy.org/trac/ticket/554)
- en: '**[orm]**'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'added generative versions of aggregates, i.e. sum(), avg(), etc. to query.
    used via query.apply_max(), apply_sum(), etc. #552'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在查询中添加了聚合函数的生成版本，如sum()、avg()等。通过query.apply_max()、query.apply_sum()等使用。#552
- en: '**[orm]**'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to using distinct() or distinct=True in combination with join() and similar
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在join()等操作中与distinct()或distinct=True组合使用时的问题。
- en: '**[orm]**'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: corresponding to label/bindparam name generation, eager loaders generate deterministic
    names for the aliases they create using md5 hashes.
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对应于标签/bindparam名称生成，急切加载器使用md5哈希为它们创建的别名生成确定性名称。
- en: '**[orm]**'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: improved/fixed custom collection classes when giving it “set”/ “sets.Set” classes
    or subclasses (was still looking for append() methods on them during lazy loads)
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将“set”/“sets.Set”类或子类传递给自定义集合类时，改进/修复了其行为（在惰性加载期间仍在寻找append()方法）
- en: '**[orm]**'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: restored old “column_property()” ORM function (used to be called “column()”)
    to force any column expression to be added as a property on a mapper, particularly
    those that aren’t present in the mapped selectable. this allows “scalar expressions”
    of any kind to be added as relations (though they have issues with eager loads).
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了旧的“column_property()”ORM函数（曾称为“column()”），以强制将任何列表达式添加为映射器的属性，特别是那些在映射的可选择部分中不存在的列表达式。这允许将任何类型的“标量表达式”添加为关系（尽管它们在急切加载方面存在问题）。
- en: '**[orm]**'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to many-to-many relationships targeting polymorphic mappers
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对多对多关系的目标为多态映射器的问题
- en: 'References: [#533](https://www.sqlalchemy.org/trac/ticket/533)'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#533](https://www.sqlalchemy.org/trac/ticket/533)
- en: '**[orm]**'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: making progress with session.merge() as well as combining its usage with entity_name
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在session.merge()的使用以及与entity_name的结合方面取得了进展
- en: 'References: [#543](https://www.sqlalchemy.org/trac/ticket/543)'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#543](https://www.sqlalchemy.org/trac/ticket/543)
- en: '**[orm]**'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the usual adjustments to relationships between inheriting mappers, in this case
    establishing relation()s to subclass mappers where the join conditions come from
    the superclass’ table
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在继承映射器之间的关系上进行了通常的调整，本例中建立了与子类映射器的关系，其中连接条件来自超类的表
- en: sql
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: keys() of result set columns are not lowercased, come back exactly as they’re
    expressed in cursor.description. note this causes colnames to be all caps in oracle.
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果集列的keys()不会小写化，会以与它们在cursor.description中的表达方式完全相同的方式返回。请注意，这会导致在oracle中colnames全部大写。
- en: '**[sql]**'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: preliminary support for unicode table names, column names and SQL statements
    added, for databases which can support them. Works with sqlite and postgres so
    far. MySQL *mostly* works except the has_table() function does not work. Reflection
    works too.
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为支持Unicode表名、列名和SQL语句添加了初步支持，适用于可以支持它们的数据库。到目前为止，sqlite和postgres可以正常工作。MySQL
    *大部分* 可以工作，除了has_table()函数无法工作。反射也可以工作。
- en: '**[sql]**'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the Unicode type is now a direct subclass of String, which now contains all
    the “convert_unicode” logic. This helps the variety of unicode situations that
    occur in db’s such as MS-SQL to be better handled and allows subclassing of the
    Unicode datatype.
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Unicode类型现在是String的直接子类，其中包含了所有的“convert_unicode”逻辑。这有助于更好地处理像MS-SQL这样的数据库中出现的各种unicode情况，并允许对Unicode数据类型进行子类化。
- en: 'References: [#522](https://www.sqlalchemy.org/trac/ticket/522)'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#522](https://www.sqlalchemy.org/trac/ticket/522)
- en: '**[sql]**'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: 'ClauseElements can be used in in_() clauses now, such as bind parameters, etc.
    #476'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ClauseElements现在可以在in_()子句中使用，例如绑定参数等。#476
- en: '**[sql]**'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: 'reverse operators implemented for CompareMixin elements, allows expressions
    like “5 + somecolumn” etc. #474'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为CompareMixin元素实现了反向运算符，允许像“5 + somecolumn”等表达式。#474
- en: '**[sql]**'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “where” criterion of an update() and delete() now correlates embedded select()
    statements against the table being updated or deleted. this works the same as
    nested select() statement correlation, and can be disabled via the correlate=False
    flag on the embedded select().
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在update()和delete()的“where”条件中，现在将嵌套的select()语句与正在更新或删除的表进行关联。这与嵌套的select()语句关联方式相同，并且可以通过嵌套select()的correlate=False标志来禁用。
- en: '**[sql]**'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: column labels are now generated in the compilation phase, which means their
    lengths are dialect-dependent. So on oracle a label that gets truncated to 30
    chars will go out to 63 characters on postgres. Also, the true labelname is always
    attached as the accessor on the parent Selectable so there’s no need to be aware
    of the “truncated” label names.
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列标签现在在编译阶段生成，这意味着它们的长度取决于方言。因此，在oracle上被截断为30个字符的标签将在postgres上扩展为63个字符。此外，真实的标签名称始终附加为父可选择部分的访问器，因此无需关注“被截断”的标签名称。
- en: 'References: [#512](https://www.sqlalchemy.org/trac/ticket/512)'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#512](https://www.sqlalchemy.org/trac/ticket/512)
- en: '**[sql]**'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: column label and bind param “truncation” also generate deterministic names now,
    based on their ordering within the full statement being compiled. this means the
    same statement will produce the same string across application restarts and allowing
    DB query plan caching to work better.
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列标签和绑定参数“截断”现在也生成确定性名称，基于它们在编译的完整语句中的顺序。这意味着相同的语句将在应用程序重新启动时产生相同的字符串，并且允许更好地工作的
    DB 查询计划缓存。
- en: '**[sql]**'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “mini” column labels generated when using subqueries, which are to work
    around glitchy SQLite behavior that doesn’t understand “foo.id” as equivalent
    to “id”, are now only generated in the case that those named columns are selected
    from (part of)
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用子查询时生成的“mini”列标签，用于解决 SQLite 行为不佳的问题，不理解“foo.id”等同于“id”，现在只在从中选择这些命名列的情况下生成
- en: 'References: [#513](https://www.sqlalchemy.org/trac/ticket/513)'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#513](https://www.sqlalchemy.org/trac/ticket/513)
- en: '**[sql]**'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the label() method on ColumnElement will properly propagate the TypeEngine of
    the base element out to the label, including a label() created from a scalar=True
    select() statement.
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ColumnElement 上的 label() 方法将正确地将基本元素的 TypeEngine 传播到标签，包括从 scalar=True select()
    语句创建的标签。
- en: '**[sql]**'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: MS-SQL better detects when a query is a subquery and knows not to generate ORDER
    BY phrases for those
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MS-SQL 更好地检测查询是否为子查询，并知道不为这些生成 ORDER BY 语句
- en: 'References: [#513](https://www.sqlalchemy.org/trac/ticket/513)'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#513](https://www.sqlalchemy.org/trac/ticket/513)
- en: '**[sql]**'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fix for fetchmany() “size” argument being positional in most dbapis
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在大多数 dbapis 中 fetchmany() 的 “size” 参数是位置参数的问题
- en: 'References: [#505](https://www.sqlalchemy.org/trac/ticket/505)'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#505](https://www.sqlalchemy.org/trac/ticket/505)
- en: '**[sql]**'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: sending None as an argument to func.<something> will produce an argument of
    NULL
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 None 作为参数传递给 func.<something> 将产生一个 NULL 参数
- en: '**[sql]**'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: query strings in unicode URLs get keys encoded to ascii for **kwargs compat
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Unicode URL 中的查询字符串将键编码为 ascii 以进行 **kwargs 兼容
- en: '**[sql]**'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: slight tweak to raw execute() change to also support tuples for positional parameters,
    not just lists
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对原始 execute() 更改的微小调整，也支持元组作为位置参数，而不仅仅是列表
- en: 'References: [#523](https://www.sqlalchemy.org/trac/ticket/523)'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#523](https://www.sqlalchemy.org/trac/ticket/523)
- en: '**[sql]**'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fix to case() construct to propagate the type of the first WHEN condition as
    the return type of the case statement
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 case() 构造的问题，将第一个 WHEN 条件的类型作为 case 语句的返回类型传播
- en: extensions
  id: totrans-363
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions]**'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: big fix to AssociationProxy so that multiple AssociationProxy objects can be
    associated with a single association collection.
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 AssociationProxy 的问题，使得多个 AssociationProxy 对象可以与单个关联集合关联。
- en: '**[extensions]**'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: 'assign_mapper names methods according to their keys (i.e. __name__) #551'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据它们的键（即 __name__）为 assign_mapper 方法命名
- en: mysql
  id: totrans-368
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: support for SSL arguments given as inline within URL query string, prefixed
    with “ssl_”, courtesy [terjeros@gmail.com](mailto:terjeros%40gmail.com).
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持将 SSL 参数作为内联 URL 查询字符串给出，以“ssl_”为前缀，感谢 [terjeros@gmail.com](mailto:terjeros%40gmail.com)。
- en: '**[mysql] [<schemaname>]**'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [<schemaname>]**'
- en: mysql uses “DESCRIBE.<tablename>”, catching exceptions if table doesn’t exist,
    in order to determine if a table exists. this supports unicode table names as
    well as schema names. tested with MySQL5 but should work with 4.1 series as well.
    (#557)
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql 使用 “DESCRIBE.<tablename>” 来确定表是否存在，如果表不存在则捕获异常，以支持 Unicode 表名以及模式名。已在
    MySQL5 上测试，但应该也适用于 4.1 系列。(#557)
- en: sqlite
  id: totrans-373
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: removed silly behavior where sqlite would reflect UNIQUE indexes as part of
    the primary key (?!)
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了 SQLite 将唯一索引作为主键的一部分反映的愚蠢行为（？！）
- en: mssql
  id: totrans-376
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: pyodbc is now the preferred DB-API for MSSQL, and if no module is specifically
    requested, will be loaded first on a module probe.
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pyodbc 现在是 MSSQL 的首选 DB-API，如果没有明确请求模块，则将在模块探测时首先加载。
- en: '**[mssql]**'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: The @@SCOPE_IDENTITY is now used instead of @@IDENTITY. This behavior may be
    overridden with the engine_connect “use_scope_identity” keyword parameter, which
    may also be specified in the dburi.
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在使用 @@SCOPE_IDENTITY 而不是 @@IDENTITY。此行为可以通过 engine_connect “use_scope_identity”
    关键字参数覆盖，也可以在 dburi 中指定。
- en: oracle
  id: totrans-381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: small fix to allow successive compiles of the same SELECT object which features
    LIMIT/OFFSET. oracle dialect needs to modify the object to have ROW_NUMBER OVER
    and wasn’t performing the full series of steps on successive compiles.
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 允许对具有 LIMIT/OFFSET 特性的相同 SELECT 对象进行连续编译的小修复。oracle 方言需要修改对象以具有 ROW_NUMBER OVER，并且在连续编译时未执行完整系列步骤。
- en: misc
  id: totrans-384
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[engines]**'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: warnings module used for issuing warnings (instead of logging)
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于发出警告的 warnings 模块（而不是日志记录）
- en: '**[engines]**'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: cleanup of DBAPI import strategies across all engines
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 清理所有引擎中的 DBAPI 导入策略
- en: 'References: [#480](https://www.sqlalchemy.org/trac/ticket/480)'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#480](https://www.sqlalchemy.org/trac/ticket/480)
- en: '**[engines]**'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: refactoring of engine internals which reduces complexity, number of codepaths;
    places more state inside of ExecutionContext to allow more dialect control of
    cursor handling, result sets. ResultProxy totally refactored and also has two
    versions of “buffered” result sets used for different purposes.
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引擎内部的重构减少了复杂性，代码路径数量；将更多状态放在 ExecutionContext 中，以允许更多方言控制游标处理，结果集。 ResultProxy
    完全重构，还有两个用于不同目的的“缓冲”结果集版本。
- en: '**[engines]**'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: server side cursor support fully functional in postgres.
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgres 中完全支持服务器端游标
- en: 'References: [#514](https://www.sqlalchemy.org/trac/ticket/514)'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#514](https://www.sqlalchemy.org/trac/ticket/514)
- en: '**[engines]**'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: 'improved framework for auto-invalidation of connections that have lost their
    underlying database, via dialect-specific detection of exceptions corresponding
    to that database’s disconnect related error messages. Additionally, when a “connection
    no longer open” condition is detected, the entire connection pool is discarded
    and replaced with a new instance. #516'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进的框架用于自动失效连接，这些连接已丢失其底层数据库，通过特定于方言的检测异常来对应该数据库的断开相关错误消息。此外，当检测到“连接不再打开”条件时，整个连接池将被丢弃并替换为新实例。＃516
- en: '**[engines]**'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: the dialects within sqlalchemy.databases become a setuptools entry points. loading
    the built-in database dialects works the same as always, but if none found will
    fall back to trying pkg_resources to load an external module
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.databases 中的方言成为 setuptools 入口点。加载内置数据库方言的方式与以往相同，但如果找不到任何方言，则会回退尝试使用
    pkg_resources 加载外部模块
- en: 'References: [#521](https://www.sqlalchemy.org/trac/ticket/521)'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#521](https://www.sqlalchemy.org/trac/ticket/521)
- en: '**[engines]**'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Engine contains a “url” attribute referencing the url.URL object used by create_engine().
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引擎包含一个“url”属性，引用 create_engine() 使用的 url.URL 对象。
- en: '**[informix]**'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[informix]**'
- en: informix support added ! courtesy James Zhang, who put a ton of effort in.
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加 informix 支持！感谢 James Zhang，他付出了大量努力。
- en: 0.3.6
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.6
- en: 'Released: Fri Mar 23 2007'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年3月23日 星期五
- en: orm
  id: totrans-406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'the full featureset of the SelectResults extension has been merged into a new
    set of methods available off of Query. These methods all provide “generative”
    behavior, whereby the Query is copied and a new one returned with additional criterion
    added. The new methods include:'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SelectResults 扩展的全部功能集已合并到 Query 的一组新方法中。这些方法都提供“生成”行为，即复制 Query 并返回一个添加了额外标准的新
    Query。新方法包括：
- en: filter() - applies select criterion to the query
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: filter() - 将选择标准应用于查询
- en: ''
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-411
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: filter_by() - applies “by”-style criterion to the query
  id: totrans-412
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: filter_by() - 将“by”样式标准应用于查询
- en: ''
  id: totrans-413
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-414
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: avg() - return the avg() function on the given column
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: avg() - 返回给定列上的 avg() 函数
- en: ''
  id: totrans-416
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-417
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: join() - join to a property (or across a list of properties)
  id: totrans-418
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: join() - 加入到属性（或跨属性列表）
- en: ''
  id: totrans-419
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-420
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: outerjoin() - like join() but uses LEFT OUTER JOIN
  id: totrans-421
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: outerjoin() - 类似于 join() 但使用 LEFT OUTER JOIN
- en: ''
  id: totrans-422
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-423
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'limit()/offset() - apply LIMIT/OFFSET range-based access which applies limit/offset:
    session.query(Foo)[3:5]'
  id: totrans-424
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: limit()/offset() - 应用基于范围的 LIMIT/OFFSET 访问，即应用 limit/offset：session.query(Foo)[3:5]
- en: ''
  id: totrans-425
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-426
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: distinct() - apply DISTINCT
  id: totrans-427
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: distinct() - 应用 DISTINCT
- en: ''
  id: totrans-428
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-429
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: list() - evaluate the criterion and return results
  id: totrans-430
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: list() - 评估标准并返回结果
- en: no incompatible changes have been made to Query’s API and no methods have been
    deprecated. Existing methods like select(), select_by(), get(), get_by() all execute
    the query at once and return results like they always did. join_to()/join_via()
    are still there although the generative join()/outerjoin() methods are easier
    to use.
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query 的 API 没有进行不兼容的更改，也没有废弃任何方法。现有方法如 select()、select_by()、get()、get_by() 都会立即执行查询并像以前一样返回结果。join_to()/join_via()
    仍然存在，尽管生成的 join()/outerjoin() 方法更容易使用。
- en: '**[orm]**'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the return value for multiple mappers used with instances() now returns a cartesian
    product of the requested list of mappers, represented as a list of tuples. this
    corresponds to the documented behavior. So that instances match up properly, the
    “uniquing” is disabled when this feature is used.
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与instances()一起使用的多个映射器的返回值现在返回所请求的映射器列表的笛卡尔积，表示为元组的列表。这对应于文档中的行为。为了正确匹配实例，当使用此功能时，“唯一化”被禁用。
- en: '**[orm]**'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query has add_entity() and add_column() generative methods. these will add the
    given mapper/class or ColumnElement to the query at compile time, and apply them
    to the instances() method. the user is responsible for constructing reasonable
    join conditions (otherwise you can get full cartesian products). result set is
    the list of tuples, non-uniqued.
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query具有add_entity()和add_column()生成方法。这些方法将在编译时将给定的映射器/类或ColumnElement添加到查询中，并将它们应用于instances()方法。用户负责构建合理的连接条件（否则可能会得到完整的笛卡尔积）。结果集是元组的列表，不唯一。
- en: '**[orm]**'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: strings and columns can also be sent to the *args of instances() where those
    exact result columns will be part of the result tuples.
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串和列也可以发送到instances()的*args中，其中这些确切的结果列将成为结果元组的一部分。
- en: '**[orm]**'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a full select() construct can be passed to query.select() (which worked anyway),
    but also query.selectfirst(), query.selectone() which will be used as is (i.e.
    no query is compiled). works similarly to sending the results to instances().
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完整的select()构造可以传递给query.select()（无论如何都有效），还可以使用query.selectfirst()、query.selectone()，它们将被直接使用（即，不会编译查询）。与将结果发送到instances()类似。
- en: '**[orm]**'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: eager loading will not “aliasize” “order by” clauses that were placed in the
    select statement by something other than the eager loader itself, to fix possibility
    of dupe columns as illustrated in. however, this means you have to be more careful
    with the columns placed in the “order by” of Query.select(), that you have explicitly
    named them in your criterion (i.e. you can’t rely on the eager loader adding them
    in for you)
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 急切加载不会对由急切加载器之外的内容放置在选择语句中的“order by”子句进行“别名化”，以修复在中所示的重复列的可能性。然而，这意味着您必须更加小心地处理放置在Query.select()的“order
    by”中的列，您必须在您的条件中明确命名它们（即，您不能依赖于急切加载器为您添加它们）
- en: 'References: [#495](https://www.sqlalchemy.org/trac/ticket/495)'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#495](https://www.sqlalchemy.org/trac/ticket/495)
- en: '**[orm]**'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added a handy multi-use “identity_key()” method to Session, allowing the generation
    of identity keys for primary key values, instances, and rows, courtesy Daniel
    Miller
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Session中添加了一个方便的多用途“identity_key()”方法，允许为主键值、实例和行生成标识键，感谢Daniel Miller
- en: '**[orm]**'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: many-to-many table will be properly handled even for operations that occur on
    the “backref” side of the operation
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即使在操作发生在操作的“backref”侧时，也将正确处理多对多表
- en: 'References: [#249](https://www.sqlalchemy.org/trac/ticket/249)'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#249](https://www.sqlalchemy.org/trac/ticket/249)
- en: '**[orm]**'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “refresh-expire” cascade. allows refresh() and expire() calls to propagate
    along relationships.
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“refresh-expire”级联。允许刷新()和expire()调用沿关系传播。
- en: 'References: [#492](https://www.sqlalchemy.org/trac/ticket/492)'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#492](https://www.sqlalchemy.org/trac/ticket/492)
- en: '**[orm]**'
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: more fixes to polymorphic relations, involving proper lazy-clause generation
    on many-to-one relationships to polymorphic mappers. also fixes to detection of
    “direction”, more specific targeting of columns that belong to the polymorphic
    union vs. those that don’t.
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对多态关系进行了更多修复，涉及到对多对一关系到多态映射器的正确延迟子句生成。还修复了“方向”检测，更具体地针对属于多态联合的列与不属于多态联合的列。
- en: 'References: [#493](https://www.sqlalchemy.org/trac/ticket/493)'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#493](https://www.sqlalchemy.org/trac/ticket/493)
- en: '**[orm]**'
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: some fixes to relationship calcs when using “viewonly=True” to pull in other
    tables into the join condition which aren’t parent of the relationship’s parent/child
    mappings
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用“viewonly=True”从其他表中拉取到连接条件中不是关系的父/子映射的其他表时，对关系计算进行了一些修复
- en: '**[orm]**'
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: flush fixes on cyclical-referential relationships that contain references to
    other instances outside of the cyclical chain, when some of the objects in the
    cycle are not actually part of the flush
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在包含对循环链之外的其他实例的引用的循环引用关系上进行了刷新修复，当循环中的某些对象实际上不是刷新的一部分时
- en: '**[orm]**'
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: put an aggressive check for “flushing object A with a collection of B’s, but
    you put a C in the collection” error condition - **even if C is a subclass of
    B**, unless B’s mapper loads polymorphically. Otherwise, the collection will later
    load a “B” which should be a “C” (since its not polymorphic) which breaks in bi-directional
    relationships (i.e. C has its A, but A’s backref will lazyload it as a different
    instance of type “B”) This check is going to bite some of you who do this without
    issues, so the error message will also document a flag “enable_typechecks=False”
    to disable this checking. But be aware that bi-directional relationships in particular
    become fragile without this check.
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“将 A 对象与 B 集合一起刷新，但是您将 C 放入集合中”的“检查条件”进行了强制性检查 - **即使 C 是 B 的子类**，除非 B 的映射器以多态方式加载。否则，集合稍后将加载应为“C”的“B”（因为它不是多态的），这会破坏双向关系（即
    C 有其 A，但 A 的反向引用将惰性加载为类型为“B”的不同实例）。此检查将会影响一些未出现问题的人，因此错误消息还将记录一个标志“enable_typechecks=False”，以禁用此检查。但请注意，特别是在没有此检查的情况下，双向关系变得脆弱。
- en: 'References: [#500](https://www.sqlalchemy.org/trac/ticket/500)'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#500](https://www.sqlalchemy.org/trac/ticket/500)
- en: sql
  id: totrans-461
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: bindparam() names are now repeatable! specify two distinct bindparam()s with
    the same name in a single statement, and the key will be shared. proper positional/named
    args translate at compile time. for the old behavior of “aliasing” bind parameters
    with conflicting names, specify “unique=True” - this option is still used internally
    for all the auto-generated (value-based) bind parameters.
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bindparam() 名称现在是可重复的！在单个语句中指定两个不同的 bindparam()，并且名称相同，键将是共享的。适当的位置/命名参数在编译时转换。对于具有冲突名称的绑定参数的“别名”旧行为，请指定“unique=True”
    - 此选项仍然用于所有自动生成的（基于值的）绑定参数的内部使用。
- en: '**[sql]**'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: slightly better support for bind params as column clauses, either via bindparam()
    or via literal(), i.e. select([literal(‘foo’)])
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对绑定参数作为列子句的支持稍微改进，可以通过 bindparam() 或 literal() 实现，例如 select([literal('foo')])。
- en: '**[sql]**'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: MetaData can bind to an engine either via “url” or “engine” kwargs to constructor,
    or by using connect() method. BoundMetaData is identical to MetaData except engine_or_url
    param is required. DynamicMetaData is the same and provides thread-local connections
    be default.
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MetaData 可以通过构造函数的 “url” 或 “engine” kwargs，或使用 connect() 方法绑定到引擎。BoundMetaData
    与 MetaData 相同，只是 engine_or_url 参数是必需的。DynamicMetaData 与之相同，并默认提供线程本地连接。
- en: '**[sql]**'
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: exists() becomes usable as a standalone selectable, not just in a WHERE clause,
    i.e. exists([columns], criterion).select()
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: exists() 现在可以作为一个独立的可选择对象使用，而不仅仅是在 WHERE 子句中使用，即 exists([columns], criterion).select()。
- en: '**[sql]**'
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: correlated subqueries work inside of ORDER BY, GROUP BY
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相关子查询可以在 ORDER BY、GROUP BY 中使用。
- en: '**[sql]**'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed function execution with explicit connections, i.e. conn.execute(func.dosomething())
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用显式连接执行函数的功能，即 conn.execute(func.dosomething())。
- en: '**[sql]**'
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: use_labels flag on select() won’t auto-create labels for literal text column
    elements, since we can make no assumptions about the text. to create labels for
    literal columns, you can say “somecol AS somelabel”, or use literal_column(“somecol”).label(“somelabel”)
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: select() 上的 use_labels 标志不会为文字文本列元素自动创建标签，因为我们无法对文本进行任何假设。要为文字列创建标签，可以说“somecol
    AS somelabel”，或使用 literal_column(“somecol”).label(“somelabel”)。
- en: '**[sql]**'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: quoting won’t occur for literal columns when they are “proxied” into the column
    collection for their selectable (is_literal flag is propagated). literal columns
    are specified via literal_column(“somestring”).
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将文字列在其可选择的列集合中“代理”时，对于字面列，不会发生引用（is_literal 标志被传播）。通过 literal_column(“somestring”)
    指定文字列。
- en: '**[sql]**'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added “fold_equivalents” boolean argument to Join.select(), which removes ‘duplicate’
    columns from the resulting column clause that are known to be equivalent based
    on the join condition. this is of great usage when constructing subqueries of
    joins which Postgres complains about if duplicate column names are present.
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Join.select() 中添加了 “fold_equivalents” 布尔参数，它根据连接条件从结果列子句中删除已知为等效的“重复”列。当构造与
    Postgres 抱怨如果存在重复列名的连接子查询时非常有用。
- en: '**[sql]**'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed use_alter flag on ForeignKeyConstraint
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ForeignKeyConstraint 上的 use_alter 标志。
- en: 'References: [#503](https://www.sqlalchemy.org/trac/ticket/503)'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#503](https://www.sqlalchemy.org/trac/ticket/503)
- en: '**[sql]**'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed usage of 2.4-only “reversed” in topological.py
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 topological.py 中使用了 2.4-only “reversed”的修复用法。
- en: 'References: [#506](https://www.sqlalchemy.org/trac/ticket/506)'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#506](https://www.sqlalchemy.org/trac/ticket/506)
- en: '**[sql]**'
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: for hackers, refactored the “visitor” system of ClauseElement and SchemaItem
    so that the traversal of items is controlled by the ClauseVisitor itself, using
    the method visitor.traverse(item). accept_visitor() methods can still be called
    directly but will not do any traversal of child items. ClauseElement/SchemaItem
    now have a configurable get_children() method to return the collection of child
    elements for each parent object. This allows the full traversal of items to be
    clear and unambiguous (as well as loggable), with an easy method of limiting a
    traversal (just pass flags which are picked up by appropriate get_children() methods).
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于黑客，重构了 ClauseElement 和 SchemaItem 的“visitor”系统，以便项的遍历由 ClauseVisitor 本身控制，使用方法
    visitor.traverse(item)。accept_visitor() 方法仍然可以直接调用，但不会遍历子项。ClauseElement/SchemaItem
    现在有一个可配置的 get_children() 方法，用于返回每个父对象的子元素集合。这允许项的完整��历清晰和明确（以及可记录），并且有一种限制遍历的简单方法（只需传递标志，这些标志由适当的
    get_children() 方法捕获）。
- en: 'References: [#501](https://www.sqlalchemy.org/trac/ticket/501)'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#501](https://www.sqlalchemy.org/trac/ticket/501)
- en: '**[sql]**'
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “else_” parameter to the case statement now properly works when set to zero.
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 else_ 参数设置为零时，case 语句现在可以正常工作。
- en: extensions
  id: totrans-491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions]**'
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: options() method on SelectResults now implemented “generatively” like the rest
    of the SelectResults methods. But you’re going to just use Query now anyway.
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SelectResults 上的 options() 方法现在像其他 SelectResults 方法一样实现了“生成”。但无论如何，你现在只会使用 Query。
- en: 'References: [#472](https://www.sqlalchemy.org/trac/ticket/472)'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#472](https://www.sqlalchemy.org/trac/ticket/472)
- en: '**[extensions]**'
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: query() method is added by assignmapper. this helps with navigating to all the
    new generative methods on Query.
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query() 方法由 assignmapper 添加。这有助于导航到 Query 上的所有新的生成方法。
- en: mysql
  id: totrans-497
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: added a catchall **kwargs to MSString, to help reflection of obscure types (like
    “varchar() binary” in MS 4.0)
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 MSString 添加了一个通用的 **kwargs，以帮助反射模糊类型（如 MS 4.0 中的“varchar() binary”）
- en: '**[mysql]**'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: added explicit MSTimeStamp type which takes effect when using types.TIMESTAMP.
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了明确的 MSTimeStamp 类型，当使用 types.TIMESTAMP 时生效。
- en: oracle
  id: totrans-502
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: got binary working for any size input ! cx_oracle works fine, it was my fault
    as BINARY was being passed and not BLOB for setinputsizes (also unit tests weren’t
    even setting input sizes).
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使任何大小输入的二进制工作！cx_oracle 工作正常，是我的错，因为 BINARY 被传递而不是 BLOB 用于 setinputsizes（还有单元测试甚至没有设置输入大小）。
- en: '**[oracle]**'
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: also fixed CLOB read/write on a separate changeset.
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 也修复了在单独的更改集上对 CLOB 的读写。
- en: '**[oracle]**'
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: auto_setinputsizes defaults to True for Oracle, fixed cases where it improperly
    propagated bad types.
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: auto_setinputsizes 对于 Oracle 默认为 True，修复了它错误地传播错误类型的情况。
- en: misc
  id: totrans-509
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[ms-sql]**'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: removed seconds input on DATE column types (probably
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了 DATE 列类型上的秒输入（可能
- en: should remove the time altogether)
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应该完全删除时间）
- en: '**[ms-sql]**'
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: null values in float fields no longer raise errors
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 浮点字段中的空值不再引发错误
- en: '**[ms-sql]**'
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: LIMIT with OFFSET now raises an error (MS-SQL has no OFFSET support)
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: LIMIT 与 OFFSET 现在会引发错误（MS-SQL 不支持 OFFSET）
- en: '**[ms-sql]**'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: added an facility to use the MSSQL type VARCHAR(max) instead of TEXT for large
    unsized string fields. Use the new “text_as_varchar” to turn it on.
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个使用 MSSQL 类型 VARCHAR(max) 而不是 TEXT 用于大型无大小字符串字段的功能。使用新的“text_as_varchar”来启用它。
- en: 'References: [#509](https://www.sqlalchemy.org/trac/ticket/509)'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#509](https://www.sqlalchemy.org/trac/ticket/509)
- en: '**[ms-sql]**'
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: ORDER BY clauses without a LIMIT are now stripped in subqueries, as MS-SQL forbids
    this usage
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有 LIMIT 的 ORDER BY 子句现在在子查询中被剥离，因为 MS-SQL 禁止这种用法
- en: '**[ms-sql]**'
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: cleanup of module importing code; specifiable DB-API module; more explicit ordering
    of module preferences.
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 清理模块导入代码；可指定的 DB-API 模块；模块偏好的更明确排序。
- en: 'References: [#480](https://www.sqlalchemy.org/trac/ticket/480)'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#480](https://www.sqlalchemy.org/trac/ticket/480)
- en: 0.3.5
  id: totrans-525
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.5
- en: 'Released: Thu Feb 22 2007'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Thu Feb 22 2007
- en: orm
  id: totrans-527
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bugs]**'
  id: totrans-528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: another refactoring to relationship calculation. Allows more accurate ORM behavior
    with relationships from/to/between mappers, particularly polymorphic mappers,
    also their usage with Query, SelectResults. tickets include,,.
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个重构关系计算。允许更准确的 ORM 行为与来自/到/之间的映射器的关系，特别是多态映射器，还有它们与 Query、SelectResults 的使用。票据包括,,。
- en: 'References: [#439](https://www.sqlalchemy.org/trac/ticket/439), [#441](https://www.sqlalchemy.org/trac/ticket/441),
    [#448](https://www.sqlalchemy.org/trac/ticket/448)'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#439](https://www.sqlalchemy.org/trac/ticket/439), [#441](https://www.sqlalchemy.org/trac/ticket/441),
    [#448](https://www.sqlalchemy.org/trac/ticket/448)
- en: '**[orm] [bugs]**'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: removed deprecated method of specifying custom collections on classes; you must
    now use the “collection_class” option. the old way was beginning to produce conflicts
    when people used assign_mapper(), which now patches an “options” method, in conjunction
    with a relationship named “options”. (relationships take precedence over monkeypatched
    assign_mapper methods).
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了在类上指定自定义集合的已弃用方法；现在必须使用“collection_class”选项。旧方法开始在人们使用assign_mapper()时产生冲突，现在修补了一个“options”方法，与一个名为“options”的关系一起使用。
    （关系优先于monkeypatched assign_mapper方法）。
- en: '**[orm] [bugs]**'
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: extension() query option propagates to Mapper._instance() method so that all
    loading-related methods get called
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: extension()查询选项传播到Mapper._instance()方法，以便调用所有与加载相关的方法
- en: 'References: [#454](https://www.sqlalchemy.org/trac/ticket/454)'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#454](https://www.sqlalchemy.org/trac/ticket/454)
- en: '**[orm] [bugs]**'
  id: totrans-536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: eager relation to an inheriting mapper won’t fail if no rows returned for the
    relationship.
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 继承映射器的急切关系如果关系没有返回任何行也不会失败。
- en: '**[orm] [bugs]**'
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: eager relation loading bug fixed for eager relation on multiple descendant classes
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对多个后代类上的急切关系加载错误
- en: 'References: [#486](https://www.sqlalchemy.org/trac/ticket/486)'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#486](https://www.sqlalchemy.org/trac/ticket/486)
- en: '**[orm] [bugs]**'
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: fix for very large topological sorts, courtesy ants.aasma at gmail
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了非常大的拓扑排序问题，感谢 ants.aasma at gmail
- en: 'References: [#423](https://www.sqlalchemy.org/trac/ticket/423)'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#423](https://www.sqlalchemy.org/trac/ticket/423)
- en: '**[orm] [bugs]**'
  id: totrans-544
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: eager loading is slightly more strict about detecting “self-referential” relationships,
    specifically between polymorphic mappers. this results in an “eager degrade” to
    lazy loading.
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 急切加载在检测“自引用”关系时稍微更严格，特别是在多态映射器之间。这导致“急切降级”到延迟加载。
- en: '**[orm] [bugs]**'
  id: totrans-546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: improved support for complex queries embedded into “where” criterion for query.select()
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对嵌入到查询.select()的“where”条件中的复杂查询的支持
- en: 'References: [#449](https://www.sqlalchemy.org/trac/ticket/449)'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#449](https://www.sqlalchemy.org/trac/ticket/449)
- en: '**[orm] [bugs]**'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: mapper options like eagerload(), lazyload(), deferred(), will work for “synonym()”
    relationships
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射器选项如eagerload()、lazyload()、deferred()，将适用于“synonym()”关系
- en: 'References: [#485](https://www.sqlalchemy.org/trac/ticket/485)'
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#485](https://www.sqlalchemy.org/trac/ticket/485)
- en: '**[orm] [bugs]**'
  id: totrans-552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: fixed bug where cascade operations incorrectly included deleted collection items
    in the cascade
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了级联操作错误地包括已删除的集合项的错误
- en: 'References: [#445](https://www.sqlalchemy.org/trac/ticket/445)'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#445](https://www.sqlalchemy.org/trac/ticket/445)
- en: '**[orm] [bugs]**'
  id: totrans-555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: fixed relationship deletion error when one-to-many child item is moved to a
    new parent in a single unit of work
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当一个一对多子项在单个工作单元中移动到新父项时的关系删除错误
- en: 'References: [#478](https://www.sqlalchemy.org/trac/ticket/478)'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#478](https://www.sqlalchemy.org/trac/ticket/478)
- en: '**[orm] [bugs]**'
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: fixed relationship deletion error where parent/child with a single column as
    PK/FK on the child would raise a “blank out the primary key” error, if manually
    deleted or “delete” cascade without “delete-orphan” was used
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关系删除错误，其中父/子关系的子项只有一个列作为主键/外键时，如果手动删除或使用“delete”级联而没有使用“delete-orphan”，则会引发“清空主键”错误
- en: '**[orm] [bugs]**'
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [错误]**'
- en: fix to deferred so that load operation doesn’t mistakenly occur when only PK
    col attributes are set
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了延迟加载，以便在只设置PK列属性时不会错误地发生加载操作
- en: '**[orm] [enhancements]**'
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [增强]**'
- en: implemented foreign_keys argument to mapper. use in conjunction with primaryjoin/secondaryjoin
    arguments to specify/override foreign keys defined on the Table instance.
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了mapper的foreign_keys参数。与primaryjoin/secondaryjoin参数一起使用，以指定/覆盖在Table实例上定义的外键。
- en: 'References: [#385](https://www.sqlalchemy.org/trac/ticket/385)'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#385](https://www.sqlalchemy.org/trac/ticket/385)
- en: '**[orm] [enhancements]**'
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [增强]**'
- en: contains_eager(‘foo’) automatically implies eagerload(‘foo’)
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: contains_eager('foo')自动意味着eagerload('foo')
- en: '**[orm] [enhancements]**'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [增强]**'
- en: added “alias” argument to contains_eager(). use it to specify the string name
    or Alias instance of an alias used in the query for the eagerly loaded child items.
    easier to use than “decorator”
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了contains_eager()的“alias”参数。使用它来指定查询中用于急切加载的子项的别名的字符串名称或Alias实例。比“装饰器”更容易使用
- en: '**[orm] [enhancements]**'
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [增强]**'
- en: added “contains_alias()” option for result set mapping to an alias of the mapped
    table
  id: totrans-570
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“contains_alias()”选项，用于将结果集映射到映射表的别名
- en: '**[orm] [enhancements]**'
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [增强]**'
- en: added support for py2.5 “with” statement with SessionTransaction
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对`py2.5`“with”语句的支持到`SessionTransaction`
- en: 'References: [#468](https://www.sqlalchemy.org/trac/ticket/468)'
  id: totrans-573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#468](https://www.sqlalchemy.org/trac/ticket/468)
- en: sql
  id: totrans-574
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the value of “case_sensitive” defaults to True now, regardless of the casing
    of the identifier, unless specifically set to False. this is because the object
    might be label’ed as something else which does contain mixed case, and propagating
    “case_sensitive=False” breaks that. Other fixes to quoting when using labels and
    “fake” column objects
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “case_sensitive”的值现在默认为`True`，不管标识符的大小写如何，除非明确设置为`False`。这是因为对象可能被标记为其他包含混合大小写的内容，传播“case_sensitive=False”会破坏这一点。在使用标签和“fake”列对象时修复引用的其他问题
- en: '**[sql]**'
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added a “supports_execution()” method to ClauseElement, so that individual kinds
    of clauses can express if they are appropriate for executing…such as, you can
    execute a “select”, but not a “Table” or a “Join”.
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个“supports_execution()”方法到`ClauseElement`，以便各种类型的子句可以表达是否适合执行...例如，您可以执行“select”，但不能执行“Table”或“Join”。
- en: '**[sql]**'
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed argument passing to straight textual execute() on engine, connection.
    can handle *args or a list instance for positional, **kwargs or a dict instance
    for named args, or a list of list or dicts to invoke executemany()
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对引擎、连接上直接文本`execute()`的参数传递。可以处理`*args`或列表实例作为位置参数，`**kwargs`或字典实例作为命名参数，或列表的列表或字典以调用`executemany()`
- en: '**[sql]**'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: small fix to BoundMetaData to accept unicode or string URLs
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对`BoundMetaData`进行了小修复，以接受`unicode`或字符串`URLs`
- en: '**[sql]**'
  id: totrans-583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed named PrimaryKeyConstraint generation courtesy andrija at gmail
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由`andrija at gmail`提供的命名`PrimaryKeyConstraint`生成
- en: 'References: [#466](https://www.sqlalchemy.org/trac/ticket/466)'
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#466](https://www.sqlalchemy.org/trac/ticket/466)
- en: '**[sql]**'
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed generation of CHECK constraints on columns
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在列上生成`CHECK`约束的问题
- en: 'References: [#464](https://www.sqlalchemy.org/trac/ticket/464)'
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#464](https://www.sqlalchemy.org/trac/ticket/464)
- en: '**[sql]**'
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixes to tometadata() operation to propagate Constraints at column and table
    level
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`tometadata()`操作以传播列和表级别的约束
- en: extensions
  id: totrans-591
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`extensions`'
- en: '**[extensions]**'
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: added distinct() method to SelectResults. generally should only make a difference
    when using count().
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了`distinct()`方法到`SelectResults`。通常只在使用`count()`时会有所不同。
- en: '**[extensions]**'
  id: totrans-594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: added options() method to SelectResults, equivalent to query.options()
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了`options()`方法到`SelectResults`，相当于`query.options()`
- en: 'References: [#472](https://www.sqlalchemy.org/trac/ticket/472)'
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#472](https://www.sqlalchemy.org/trac/ticket/472)
- en: '**[extensions]**'
  id: totrans-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: added optional __table_opts__ dictionary to ActiveMapper, will send kw options
    to Table objects
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了可选的`__table_opts__`字典到`ActiveMapper`，将`kw`选项发送到`Table`对象
- en: 'References: [#462](https://www.sqlalchemy.org/trac/ticket/462)'
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#462](https://www.sqlalchemy.org/trac/ticket/462)
- en: '**[extensions]**'
  id: totrans-600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: added selectfirst(), selectfirst_by() to assign_mapper
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了`selectfirst()`，`selectfirst_by()`到`assign_mapper`
- en: 'References: [#467](https://www.sqlalchemy.org/trac/ticket/467)'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#467](https://www.sqlalchemy.org/trac/ticket/467)
- en: mysql
  id: totrans-603
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`mysql`'
- en: '**[mysql]**'
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: fix to reflection on older DB’s that might return array() type for “show variables
    like” statements
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在旧的数据库上反射可能返回“show variables like”语句的`array()`类型的问题
- en: mssql
  id: totrans-606
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`mssql`'
- en: '**[mssql]**'
  id: totrans-607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: preliminary support for pyodbc (Yay!)
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对`pyodbc`的初步支持（耶！）
- en: 'References: [#419](https://www.sqlalchemy.org/trac/ticket/419)'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#419](https://www.sqlalchemy.org/trac/ticket/419)
- en: '**[mssql]**'
  id: totrans-610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: better support for NVARCHAR types added
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对`NVARCHAR`类型的更好支持
- en: 'References: [#298](https://www.sqlalchemy.org/trac/ticket/298)'
  id: totrans-612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#298](https://www.sqlalchemy.org/trac/ticket/298)
- en: '**[mssql]**'
  id: totrans-613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix for commit logic on pymssql
  id: totrans-614
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了`pymssql`上的提交逻辑
- en: '**[mssql]**'
  id: totrans-615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix for query.get() with schema
  id: totrans-616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了带有模式的`query.get()`
- en: 'References: [#456](https://www.sqlalchemy.org/trac/ticket/456)'
  id: totrans-617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#456](https://www.sqlalchemy.org/trac/ticket/456)
- en: '**[mssql]**'
  id: totrans-618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix for non-integer relationships
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了非整数关系
- en: 'References: [#473](https://www.sqlalchemy.org/trac/ticket/473)'
  id: totrans-620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#473](https://www.sqlalchemy.org/trac/ticket/473)
- en: '**[mssql]**'
  id: totrans-621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: DB-API module now selectable at run-time
  id: totrans-622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在运行时选择`DB-API`模块
- en: 'References: [#419](https://www.sqlalchemy.org/trac/ticket/419)'
  id: totrans-623
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#419](https://www.sqlalchemy.org/trac/ticket/419)
- en: '**[mssql] [415] [481] [tickets:422]**'
  id: totrans-624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [415] [481] [tickets:422]**'
- en: now passes many more unit tests
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在通过了更多的单元测试
- en: '**[mssql]**'
  id: totrans-626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: better unittest compatibility with ANSI functions
  id: totrans-627
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与`ANSI`函数更好的单元测试兼容性
- en: 'References: [#479](https://www.sqlalchemy.org/trac/ticket/479)'
  id: totrans-628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#479](https://www.sqlalchemy.org/trac/ticket/479)
- en: '**[mssql]**'
  id: totrans-629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: improved support for implicit sequence PK columns with auto-insert
  id: totrans-630
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对具有自动插入的隐式序列`PK`列的支持
- en: 'References: [#415](https://www.sqlalchemy.org/trac/ticket/415)'
  id: totrans-631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#415](https://www.sqlalchemy.org/trac/ticket/415)
- en: '**[mssql]**'
  id: totrans-632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix for blank password in adodbapi
  id: totrans-633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 adodbapi 中空密码的问题
- en: 'References: [#371](https://www.sqlalchemy.org/trac/ticket/371)'
  id: totrans-634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#371](https://www.sqlalchemy.org/trac/ticket/371)
- en: '**[mssql]**'
  id: totrans-635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fixes to get unit tests working with pyodbc
  id: totrans-636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 pyodbc 时单元测试无法正常工作的问题
- en: 'References: [#481](https://www.sqlalchemy.org/trac/ticket/481)'
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#481](https://www.sqlalchemy.org/trac/ticket/481)
- en: '**[mssql]**'
  id: totrans-638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix to auto_identity_insert on db-url query
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 db-url 查询中的 auto_identity_insert
- en: '**[mssql]**'
  id: totrans-640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: added query_timeout to db-url query params. currently works only for pymssql
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 db-url 查询参数中添加了 query_timeout。目前仅适用于 pymssql
- en: '**[mssql]**'
  id: totrans-642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: tested with pymssql 0.8.0 (which is now LGPL)
  id: totrans-643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已测试通过 pymssql 0.8.0（现在是 LGPL）
- en: oracle
  id: totrans-644
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: when returning “rowid” as the ORDER BY column or in use with ROW_NUMBER OVER,
    oracle dialect checks the selectable its being applied to and will switch to table
    PK if not applicable, i.e. for a UNION. checking for DISTINCT, GROUP BY (other
    places that rowid is invalid) still a TODO. allows polymorphic mappings to function.
  id: totrans-646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将“rowid”作为 ORDER BY 列返回或在 ROW_NUMBER OVER 中使用时，oracle 方言会检查其应用的可选择项，并在不适用时切换到表
    PK，即对于 UNION。仍需检查 DISTINCT、GROUP BY（rowid 无效的其他地方）等。允许多态映射正常运行。
- en: 'References: [#436](https://www.sqlalchemy.org/trac/ticket/436)'
  id: totrans-647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#436](https://www.sqlalchemy.org/trac/ticket/436)
- en: '**[oracle]**'
  id: totrans-648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: sequences on a non-pk column will properly fire off on INSERT
  id: totrans-649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非主键列上的序列将在插入时正确触发
- en: '**[oracle]**'
  id: totrans-650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added PrefetchingResultProxy support to pre-fetch LOB columns when they are
    known to be present, fixes
  id: totrans-651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 PrefetchingResultProxy 支持，以在已知存在时预取 LOB 列，修复了
- en: 'References: [#435](https://www.sqlalchemy.org/trac/ticket/435)'
  id: totrans-652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#435](https://www.sqlalchemy.org/trac/ticket/435)
- en: '**[oracle]**'
  id: totrans-653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: implemented reflection of tables based on synonyms, including across dblinks
  id: totrans-654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了基于同义词的表反射，包括跨数据库链接
- en: 'References: [#379](https://www.sqlalchemy.org/trac/ticket/379)'
  id: totrans-655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#379](https://www.sqlalchemy.org/trac/ticket/379)
- en: '**[oracle]**'
  id: totrans-656
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: issues a log warning when a related table can’t be reflected due to certain
    permission errors
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当由于某些权限错误而无法反映相关表时，会发出日志警告
- en: 'References: [#363](https://www.sqlalchemy.org/trac/ticket/363)'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#363](https://www.sqlalchemy.org/trac/ticket/363)
- en: misc
  id: totrans-659
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[postgres]**'
  id: totrans-660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: better reflection of sequences for alternate-schema Tables
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更好地反映了备用模式表的序列
- en: 'References: [#442](https://www.sqlalchemy.org/trac/ticket/442)'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#442](https://www.sqlalchemy.org/trac/ticket/442)
- en: '**[postgres]**'
  id: totrans-663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: sequences on a non-pk column will properly fire off on INSERT
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非主键列上的序列将在插入时正确触发
- en: '**[postgres]**'
  id: totrans-665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: added PGInterval type, PGInet type
  id: totrans-666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 PGInterval 类型，PGInet 类型
- en: 'References: [#444](https://www.sqlalchemy.org/trac/ticket/444), [#460](https://www.sqlalchemy.org/trac/ticket/460)'
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#444](https://www.sqlalchemy.org/trac/ticket/444), [#460](https://www.sqlalchemy.org/trac/ticket/460)
- en: 0.3.4
  id: totrans-668
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.4
- en: 'Released: Tue Jan 23 2007'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年1月23日
- en: general
  id: totrans-670
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: global “insure”->”ensure” change. in US english “insure” is actually largely
    interchangeable with “ensure” (so says the dictionary), so I’m not completely
    illiterate, but its definitely sub-optimal to “ensure” which is non-ambiguous.
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 全局“insure”->”ensure”更改。在美式英语中，“insure”实际上与“ensure”在很大程度上是可以互换的（字典上是这么说的），所以我并不是完全文盲，但“ensure”无疑是非歧义的更佳选择。
- en: orm
  id: totrans-673
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'poked the first hole in the can of worms: saying query.select_by(somerelationname=someinstance)
    will create the join of the primary key columns represented by “somerelationname“‘s
    mapper to the actual primary key in “someinstance”.'
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个潘多拉魔盒中打开了第一个漏洞：说 query.select_by(somerelationname=someinstance) 将创建“somerelationname”映射器表示的主键列与“someinstance”实际主键的连接。
- en: '**[orm]**'
  id: totrans-676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: reworked how relations interact with “polymorphic” mappers, i.e. mappers that
    have a select_table as well as polymorphic flags. better determination of proper
    join conditions, interaction with user- defined join conditions, and support for
    self-referential polymorphic mappers.
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了关系与“多态”映射器的交互方式，即具有 select_table 和多态标志的映射器。更好地确定适当的连接条件，与用户定义的连接条件的交互，以及对自引用多态映射器的支持。
- en: '**[orm]**'
  id: totrans-678
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: related to polymorphic mapping relations, some deeper error checking when compiling
    relations, to detect an ambiguous “primaryjoin” in the case that both sides of
    the relationship have foreign key references in the primary join condition. also
    tightened down conditions used to locate “relation direction”, associating the
    “foreignkey” of the relationship with the “primaryjoin”
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于多态映射关系，当编译关系时进行了一些更深入的错误检查，以检测在关系的两侧都在主连接条件中具有外键引用的模糊“primaryjoin”的情况。还加强了用于定位“关系方向”的条件，将关系的“外键”与“主连接”关联起来
- en: '**[orm]**'
  id: totrans-680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a little bit of improvement to the concept of a “concrete” inheritance mapping,
    though that concept is not well fleshed out yet (added test case to support concrete
    mappers on top of a polymorphic base).
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“concrete”继承映射概念进行了一点改进，尽管该概念尚未完全明确（添加了支持在多态基础上创建具体映射器的测试用例）。
- en: '**[orm]**'
  id: totrans-682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to “proxy=True” behavior on synonym()
  id: totrans-683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在synonym()上“proxy=True”行为的问题
- en: '**[orm]**'
  id: totrans-684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug where delete-orphan basically didn’t work with many-to-many relationships,
    backref presence generally hid the symptom
  id: totrans-685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了删除孤儿在许多对多关系中基本上无法工作的错误，反向引用通常隐藏了症状
- en: 'References: [#427](https://www.sqlalchemy.org/trac/ticket/427)'
  id: totrans-686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#427](https://www.sqlalchemy.org/trac/ticket/427)
- en: '**[orm]**'
  id: totrans-687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added a mutex to the mapper compilation step. ive been reluctant to add any
    kind of threading anything to SA but this is one spot that its really needed since
    mappers are typically “global”, and while their state does not change during normal
    operation, the initial compilation step does modify internal state significantly,
    and this step usually occurs not at module-level initialization time (unless you
    call compile()) but at first-request time
  id: totrans-688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在映射器编译步骤中添加了互斥锁。我一直不愿意在SA中添加任何线程内容，但这是真正需要的一个地方，因为映射器通常是“全局”的，虽然它们的状态在正常操作期间不会改变，但初始编译步骤会显著修改内部状态，并且这一步通常不会发生在模块级别的初始化时间（除非调用compile()），而是在第一次请求时发生
- en: '**[orm]**'
  id: totrans-689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: basic idea of “session.merge()” actually implemented. needs more testing.
  id: totrans-690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实际上实现了“session.merge()”的基本概念。需要更多测试。
- en: '**[orm]**'
  id: totrans-691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “compile_mappers()” function as a shortcut to compiling all mappers
  id: totrans-692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“compile_mappers()”函数作为编译所有映射器的快捷方式
- en: '**[orm]**'
  id: totrans-693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to MapperExtension create_instance so that entity_name properly associated
    with new instance
  id: totrans-694
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MapperExtension创建实例的问题，使实体名称正确关联到新实例
- en: '**[orm]**'
  id: totrans-695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: speed enhancements to ORM object instantiation, eager loading of rows
  id: totrans-696
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM对象实例化的速度增强，行的急切加载
- en: '**[orm]**'
  id: totrans-697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: invalid options sent to ‘cascade’ string will raise an exception
  id: totrans-698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 发送到“cascade”字符串的无效选项将引发异常
- en: 'References: [#406](https://www.sqlalchemy.org/trac/ticket/406)'
  id: totrans-699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#406](https://www.sqlalchemy.org/trac/ticket/406)
- en: '**[orm]**'
  id: totrans-700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug in mapper refresh/expire whereby eager loaders didn’t properly re-populate
    item lists
  id: totrans-701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了映射器刷新/过期中的错误，急切加载器未正确重新填充项目列表
- en: 'References: [#407](https://www.sqlalchemy.org/trac/ticket/407)'
  id: totrans-702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#407](https://www.sqlalchemy.org/trac/ticket/407)
- en: '**[orm]**'
  id: totrans-703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to post_update to ensure rows are updated even for non insert/delete scenarios
  id: totrans-704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了post_update以确保即使在非插入/删除场景下也会更新行
- en: 'References: [#413](https://www.sqlalchemy.org/trac/ticket/413)'
  id: totrans-705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#413](https://www.sqlalchemy.org/trac/ticket/413)
- en: '**[orm]**'
  id: totrans-706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added an error message if you actually try to modify primary key values on an
    entity and then flush it
  id: totrans-707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您尝试修改实体的主键值然后刷新它，将添加错误消息
- en: 'References: [#412](https://www.sqlalchemy.org/trac/ticket/412)'
  id: totrans-708
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#412](https://www.sqlalchemy.org/trac/ticket/412)
- en: sql
  id: totrans-709
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added “fetchmany()” support to ResultProxy
  id: totrans-711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对ResultProxy的“fetchmany()”支持
- en: '**[sql]**'
  id: totrans-712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added support for column “key” attribute to be usable in row[<key>]/row.<key>
  id: totrans-713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对列“key”属性在row[<key>]/row.<key>中可用的支持
- en: '**[sql]**'
  id: totrans-714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: changed “BooleanExpression” to subclass from “BinaryExpression”, so that boolean
    expressions can also follow column-clause behaviors (i.e. label(), etc).
  id: totrans-715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“BooleanExpression”更改为从“BinaryExpression”子类化，以便布尔表达式也可以遵循列子句行为（即label()等）。
- en: '**[sql]**'
  id: totrans-716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: trailing underscores are trimmed from func.<xxx> calls, such as func.if_()
  id: totrans-717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从func.<xxx>调用中修剪尾随下划线，例如func.if_()
- en: '**[sql]**'
  id: totrans-718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fix to correlation of subqueries when the column list of the select statement
    is constructed with individual calls to append_column(); this fixes an ORM bug
    whereby nested select statements were not getting correlated with the main select
    generated by the Query object.
  id: totrans-719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用append_column()单独调用构建选择语句的列列表时子查询相关性的问题；这修复了一个ORM错误，即嵌套的选择语句未与Query对象生成的主选择相关联。
- en: '**[sql]**'
  id: totrans-720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: another fix to subquery correlation so that a subquery which has only one FROM
    element will *not* correlate that single element, since at least one FROM element
    is required in a query.
  id: totrans-721
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个修复子查询相关性的方法，以便仅具有一个FROM元素的子查询*不*相关联该单个元素，因为查询中至少需要一个FROM元素。
- en: '**[sql]**'
  id: totrans-722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: default “timezone” setting is now False. this corresponds to Python’s datetime
    behavior as well as Postgres’ timestamp/time types (which is the only timezone-sensitive
    dialect at the moment)
  id: totrans-723
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认的“timezone”设置现在为False。这对应于Python的datetime行为以及Postgres的timestamp/time类型（目前是唯一有时区敏感的方言）
- en: 'References: [#414](https://www.sqlalchemy.org/trac/ticket/414)'
  id: totrans-724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#414](https://www.sqlalchemy.org/trac/ticket/414)
- en: '**[sql]**'
  id: totrans-725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “op()” function is now treated as an “operation”, rather than a “comparison”.
    the difference is, an operation produces a BinaryExpression from which further
    operations can occur whereas comparison produces the more restrictive BooleanExpression
  id: totrans-726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “op()”函数现在被视为“操作”，而不是“比较”。区别在于，操作会产生一个BinaryExpression，从中可以进行进一步的操作，而比较会产生更严格的BooleanExpression
- en: '**[sql]**'
  id: totrans-727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: trying to redefine a reflected primary key column as non-primary key raises
    an error
  id: totrans-728
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尝试将反射的主键列重新定义为非主键会引发错误
- en: '**[sql]**'
  id: totrans-729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: type system slightly modified to support TypeDecorators that can be overridden
    by the dialect (ok, that’s not very clear, it allows the mssql tweak below to
    be possible)
  id: totrans-730
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型系统略有修改，以支持可以被方言覆盖的TypeDecorators（好吧，这不是很清楚，它允许下面的mssql调整成为可能）
- en: extensions
  id: totrans-731
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions]**'
  id: totrans-732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: added “validate=False” argument to assign_mapper, if True will ensure that only
    mapped attributes are named
  id: totrans-733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为assign_mapper添加了“validate=False”参数，如果为True，则确保只有映射的属性被命名
- en: 'References: [#426](https://www.sqlalchemy.org/trac/ticket/426)'
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#426](https://www.sqlalchemy.org/trac/ticket/426)
- en: '**[extensions]**'
  id: totrans-735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: assign_mapper gets “options”, “instances” functions added (i.e. MyClass.instances())
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: assign_mapper添加了“options”、“instances”函数（例如MyClass.instances()）
- en: mysql
  id: totrans-737
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: mysql is inconsistent with what kinds of quotes it uses in foreign keys during
    a SHOW CREATE TABLE, reflection updated to accommodate for all three styles
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql在SHOW CREATE TABLE期间使用的外键引号类型不一致，反射已更新以适应所有三种样式
- en: 'References: [#420](https://www.sqlalchemy.org/trac/ticket/420)'
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#420](https://www.sqlalchemy.org/trac/ticket/420)
- en: '**[mysql]**'
  id: totrans-741
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: mysql table create options work on a generic passthru now, i.e. Table(…, mysql_engine=’InnoDB’,
    mysql_collate=”latin1_german2_ci”, mysql_auto_increment=”5”, mysql_<somearg>…),
    helps
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql表创建选项现在可以在通用传递上工作，例如Table(…, mysql_engine=’InnoDB’, mysql_collate=”latin1_german2_ci”,
    mysql_auto_increment=”5”, mysql_<somearg>…), 有助于
- en: 'References: [#418](https://www.sqlalchemy.org/trac/ticket/418)'
  id: totrans-743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#418](https://www.sqlalchemy.org/trac/ticket/418)
- en: mssql
  id: totrans-744
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: added an NVarchar type (produces NVARCHAR), also MSUnicode which provides Unicode-translation
    for the NVarchar regardless of dialect convert_unicode setting.
  id: totrans-746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个NVarchar类型（生成NVARCHAR），还有一个提供Unicode翻译的MSUnicode，不管方言的convert_unicode设置如何。
- en: oracle
  id: totrans-747
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: '*slight* support for binary, but still need to figure out how to insert reasonably
    large values (over 4K). requires auto_setinputsizes=True sent to create_engine(),
    rows must be fully fetched individually, etc.'
  id: totrans-749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*轻微*支持二进制，但仍需弄清如何插入相当大的值（超过4K）。需要将auto_setinputsizes=True发送到create_engine()，行必须逐个完全获取，等等。'
- en: misc
  id: totrans-750
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[postgres]**'
  id: totrans-751
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: fix to the initial checkfirst for tables to take current schema into account
  id: totrans-752
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对表的初始checkfirst以考虑当前模式
- en: 'References: [#424](https://www.sqlalchemy.org/trac/ticket/424)'
  id: totrans-753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#424](https://www.sqlalchemy.org/trac/ticket/424)
- en: '**[postgres]**'
  id: totrans-754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: postgres has an optional “server_side_cursors=True” flag which will utilize
    server side cursors. these are appropriate for fetching only partial results and
    are necessary for working with very large unbounded result sets. While we’d like
    this to be the default behavior, different environments seem to have different
    results and the causes have not been isolated so we are leaving the feature off
    by default for now. Uses an apparently undocumented psycopg2 behavior recently
    discovered on the psycopg mailing list.
  id: totrans-755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgres有一个可选的“server_side_cursors=True”标志，将利用服务器端游标。这些适用于仅获取部分结果并且必须处理非常大的无界结果集。虽然我们希望这是默认行为，但不同的环境似乎有不同的结果，原因尚未确定，因此我们目前将该功能默认关闭。使用了最近在psycopg邮件列表上发现的一个显然未记录的psycopg2行为。
- en: '**[postgres]**'
  id: totrans-756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: added “BIGSERIAL” support for postgres table with PGBigInteger/autoincrement
  id: totrans-757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为具有PGBigInteger/autoincrement的postgres表添加了“BIGSERIAL”支持
- en: '**[postgres]**'
  id: totrans-758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: fixes to postgres reflection to better handle when schema names are present;
    thanks to jason (at) ncsmags.com
  id: totrans-759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Postgres反射以更好地处理存在模式名称时的情况；感谢jason (at) ncsmags.com
- en: 'References: [#402](https://www.sqlalchemy.org/trac/ticket/402)'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#402](https://www.sqlalchemy.org/trac/ticket/402)
- en: '**[firebird]**'
  id: totrans-761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[火鸟]**'
- en: order of constraint creation puts primary key first before all other constraints;
    required for firebird, not a bad idea for others
  id: totrans-762
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 约束创建顺序将主键放在所有其他约束之前；对于Firebird是必需的，对于其他数据库也是一个好主意
- en: 'References: [#408](https://www.sqlalchemy.org/trac/ticket/408)'
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#408](https://www.sqlalchemy.org/trac/ticket/408)
- en: '**[firebird]**'
  id: totrans-764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[火鸟]**'
- en: Firebird fix to autoload multifield foreign keys
  id: totrans-765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird修复以自动加载多字段外键
- en: 'References: [#409](https://www.sqlalchemy.org/trac/ticket/409)'
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#409](https://www.sqlalchemy.org/trac/ticket/409)
- en: '**[firebird]**'
  id: totrans-767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[火鸟]**'
- en: Firebird NUMERIC type properly handles a type without precision
  id: totrans-768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird NUMERIC类型正确处理没有精度的类型
- en: 'References: [#409](https://www.sqlalchemy.org/trac/ticket/409)'
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#409](https://www.sqlalchemy.org/trac/ticket/409)
- en: 0.3.3
  id: totrans-770
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.3
- en: 'Released: Fri Dec 15 2006'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2006年12月15日 星期五
- en: '**[no_tags]**'
  id: totrans-772
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: string-based FROM clauses fixed, i.e. select(…, from_obj=[“sometext”])
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了基于字符串的FROM子句，即select(…, from_obj=[“sometext”])
- en: '**[no_tags]**'
  id: totrans-774
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: fixes to passive_deletes flag, lazy=None (noload) flag
  id: totrans-775
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了passive_deletes标志，lazy=None（noload）标志
- en: '**[no_tags]**'
  id: totrans-776
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: added example/docs for dealing with large collections
  id: totrans-777
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了处理大型集合的示例/文档
- en: '**[no_tags]**'
  id: totrans-778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: added object_session() method to sqlalchemy namespace
  id: totrans-779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在sqlalchemy命名空间中添加了object_session()方法
- en: '**[no_tags]**'
  id: totrans-780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: fixed QueuePool bug whereby its better able to reconnect to a database that
    was not reachable (thanks to SÃ©bastien Lelong), also fixed dispose() method
  id: totrans-781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了QueuePool错误，使其更好地重新连接到无法访问的数据库（感谢Sébastien Lelong），还修复了dispose()方法
- en: '**[no_tags]**'
  id: totrans-782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: patch that makes MySQL rowcount work correctly!
  id: totrans-783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使MySQL rowcount正确工作的补丁！
- en: 'References: [#396](https://www.sqlalchemy.org/trac/ticket/396)'
  id: totrans-784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#396](https://www.sqlalchemy.org/trac/ticket/396)
- en: '**[no_tags]**'
  id: totrans-785
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: fix to MySQL catch of 2006/2014 errors to properly re-raise OperationalError
    exception
  id: totrans-786
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MySQL捕获2006/2014错误以正确重新引发OperationalError异常
- en: 0.3.2
  id: totrans-787
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.2
- en: 'Released: Sun Dec 10 2006'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2006年12月10日 星期日
- en: '**[no_tags]**'
  id: totrans-789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: major connection pool bug fixed. fixes MySQL out of sync errors, will also prevent
    transactions getting rolled back accidentally in all DBs
  id: totrans-790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了主要连接池错误。修复了MySQL不同步错误，还将防止事务在所有数据库中意外回滚
- en: 'References: [#387](https://www.sqlalchemy.org/trac/ticket/387)'
  id: totrans-791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#387](https://www.sqlalchemy.org/trac/ticket/387)
- en: '**[no_tags]**'
  id: totrans-792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: major speed enhancements vs. 0.3.1, to bring speed back to 0.2.8 levels
  id: totrans-793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与0.3.1相比的主要速度增强，将速度提升至0.2.8水平
- en: '**[no_tags]**'
  id: totrans-794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: made conditional dozens of debug log calls that were time-intensive to generate
    log messages
  id: totrans-795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使数十个生成日志消息的调试日志调用成为有条件的
- en: '**[no_tags]**'
  id: totrans-796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: fixed bug in cascade rules whereby the entire object graph could be unnecessarily
    cascaded on the save/update cascade
  id: totrans-797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了级联规则中的错误，从而可能在保存/更新级联时不必要地级联整个对象图
- en: '**[no_tags]**'
  id: totrans-798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: various speedups in attributes module
  id: totrans-799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 属性模块中的各种加速
- en: '**[no_tags]**'
  id: totrans-800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: identity map in Session is by default *no longer weak referencing*. to have
    it be weak referencing, use create_session(weak_identity_map=True) fixes
  id: totrans-801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话中的身份映射默认情况下*不再使用弱引用*。要使其使用弱引用，请使用create_session(weak_identity_map=True)修复
- en: 'References: [#388](https://www.sqlalchemy.org/trac/ticket/388)'
  id: totrans-802
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#388](https://www.sqlalchemy.org/trac/ticket/388)
- en: '**[no_tags]**'
  id: totrans-803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: MySQL detects errors 2006 (server has gone away) and 2014 (commands out of sync)
    and invalidates the connection on which it occurred.
  id: totrans-804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL检测到错误2006（服务器已断开连接）和2014（命令不同步）并使发生错误的连接无效。
- en: '**[no_tags]**'
  id: totrans-805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: 'MySQL bool type fix:'
  id: totrans-806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL bool类型修复：
- en: 'References: [#307](https://www.sqlalchemy.org/trac/ticket/307)'
  id: totrans-807
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#307](https://www.sqlalchemy.org/trac/ticket/307)
- en: '**[no_tags]**'
  id: totrans-808
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: 'postgres reflection fixes:'
  id: totrans-809
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Postgres反射修复：
- en: 'References: [#349](https://www.sqlalchemy.org/trac/ticket/349), [#382](https://www.sqlalchemy.org/trac/ticket/382)'
  id: totrans-810
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#349](https://www.sqlalchemy.org/trac/ticket/349)，[#382](https://www.sqlalchemy.org/trac/ticket/382)
- en: '**[no_tags]**'
  id: totrans-811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: added keywords for EXCEPT, INTERSECT, EXCEPT ALL, INTERSECT ALL
  id: totrans-812
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为EXCEPT、INTERSECT、EXCEPT ALL、INTERSECT ALL添加关键字
- en: 'References: [#247](https://www.sqlalchemy.org/trac/ticket/247)'
  id: totrans-813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#247](https://www.sqlalchemy.org/trac/ticket/247)
- en: '**[no_tags]**'
  id: totrans-814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: assign_mapper in assignmapper extension returns the created mapper
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: assignmapper扩展中的assign_mapper返回创建的映射器
- en: 'References: [#2110](https://www.sqlalchemy.org/trac/ticket/2110)'
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#2110](https://www.sqlalchemy.org/trac/ticket/2110)
- en: '**[no_tags]**'
  id: totrans-817
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[无标签]**'
- en: added label() function to Select class, when scalar=True is used to create a
    scalar subquery i.e. “select x, y, (select max(foo) from table) AS foomax from
    table”
  id: totrans-818
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Select类添加了label()函数，当使用scalar=True创建标量子查询时，例如“select x, y, (select max(foo)
    from table) AS foomax from table”
- en: '**[no_tags]**'
  id: totrans-819
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: added onupdate and ondelete keyword arguments to ForeignKey; propagate to underlying
    ForeignKeyConstraint if present. (don’t propagate in the other direction, however)
  id: totrans-820
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为ForeignKey添加了onupdate和ondelete关键字参数；如果存在，传播到底层ForeignKeyConstraint。（但是不要在另一个方向传播）
- en: '**[no_tags]**'
  id: totrans-821
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: fix to session.update() to preserve “dirty” status of incoming object
  id: totrans-822
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了session.update()以保留传入对象的“脏”状态
- en: '**[no_tags]**'
  id: totrans-823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: sending a selectable to an IN via the in_() function no longer creates a “union”
    out of multiple selects; only one selectable to a the in_() function is allowed
    now (make a union yourself if union is needed)
  id: totrans-824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过将selectable发送到IN，通过in_()函数不再创建多个select的“union”；现在只允许一个selectable传递给in_()函数（如果需要union，请自行创建union）
- en: '**[no_tags]**'
  id: totrans-825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: improved support for disabling save-update cascade via cascade=”none” etc.
  id: totrans-826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了通过cascade=”none”等禁用保存-更新级联的支持
- en: '**[no_tags]**'
  id: totrans-827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: added “remote_side” argument to relation(), used only with self-referential
    mappers to force the direction of the parent/child relationship. replaces the
    usage of the “foreignkey” parameter for “switching” the direction. “foreignkey”
    argument is deprecated for all uses and will eventually be replaced by an argument
    dedicated to ForeignKey specification on mappers.
  id: totrans-828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为relation()添加了“remote_side”参数，仅与自引用映射器一起使用，以强制父/子关系的方向。替换了用于“切换”方向的“foreignkey”参数的使用。“foreignkey”参数对于所有用途都已弃用，并最终将被一个专用于映射器上的ForeignKey规范的参数所取代。
- en: 0.3.1
  id: totrans-829
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.1
- en: 'Released: Mon Nov 13 2006'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Mon Nov 13 2006
- en: orm
  id: totrans-831
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “delete” cascade will load in all child objects, if they were not loaded
    already. this can be turned off (i.e. the old behavior) by setting passive_deletes=True
    on a relation().
  id: totrans-833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “delete”级联将加载所有子对象，如果它们尚未加载。可以通过在relation()上设置passive_deletes=True来关闭此功能（即旧行为）。
- en: '**[orm]**'
  id: totrans-834
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: adjustments to reworked eager query generation to not fail on circular eager-loaded
    relationships (like backrefs)
  id: totrans-835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计的急切查询生成调整，以避免在循环急切加载关系（如反向引用）上失败
- en: '**[orm]**'
  id: totrans-836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug where eagerload() (nor lazyload()) option didn’t properly instruct
    the Query whether or not to use “nesting” when producing a LIMIT query.
  id: totrans-837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了eagerload()（也不是lazyload()）选项未正确指示Query在生成LIMIT查询时是否使用“嵌套”的错误。
- en: '**[orm]**'
  id: totrans-838
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug in circular dependency sorting at flush time; if object A contained
    a cyclical many-to-one relationship to object B, and object B was just attached
    to object A, *but* object B itself wasn’t changed, the many-to-one synchronize
    of B’s primary key attribute to A’s foreign key attribute wouldn’t occur.
  id: totrans-839
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了刷新时循环依赖排序中的错误；如果对象A包含一个循环的多对一关系到对象B，并且对象B刚刚附加到对象A，*但*对象B本身没有更改，则不会发生B的主键属性与A的外键属性的同步。
- en: 'References: [#360](https://www.sqlalchemy.org/trac/ticket/360)'
  id: totrans-840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#360](https://www.sqlalchemy.org/trac/ticket/360)
- en: '**[orm]**'
  id: totrans-841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: implemented from_obj argument for query.count, improves count function on selectresults
  id: totrans-842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为query.count实现了from_obj参数，改进了selectresults上的count函数
- en: 'References: [#325](https://www.sqlalchemy.org/trac/ticket/325)'
  id: totrans-843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#325](https://www.sqlalchemy.org/trac/ticket/325)
- en: '**[orm]**'
  id: totrans-844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added an assertion within the “cascade” step of ORM relationships to check that
    the class of object attached to a parent object is appropriate (i.e. if A.items
    stores B objects, raise an error if a C is appended to A.items)
  id: totrans-845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ORM关系的“级联”步骤中添加了一个断言，检查附加到父对象的对象的类是否合适（即如果A.items存储B对象，则如果向A.items附加C，则引发错误）
- en: '**[orm]**'
  id: totrans-846
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: new extension sqlalchemy.ext.associationproxy, provides transparent “association
    object” mappings. new example examples/association/proxied_association.py illustrates.
  id: totrans-847
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新扩展sqlalchemy.ext.associationproxy，提供透明的“关联对象”映射。新示例examples/association/proxied_association.py进行了说明。
- en: '**[orm]**'
  id: totrans-848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: improvement to single table inheritance to load full hierarchies beneath the
    target class
  id: totrans-849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了单表继承，以加载目标类下面的完整层次结构
- en: '**[orm]**'
  id: totrans-850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to subtle condition in topological sort where a node could appear twice,
    for
  id: totrans-851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了拓扑排序中一个微妙条件的问题，其中一个节点可能出现两次
- en: 'References: [#362](https://www.sqlalchemy.org/trac/ticket/362)'
  id: totrans-852
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#362](https://www.sqlalchemy.org/trac/ticket/362)
- en: '**[orm]**'
  id: totrans-853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: additional rework to topological sort, refactoring, for
  id: totrans-854
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对拓扑排序进行了额外的重构，重构，用于
- en: 'References: [#365](https://www.sqlalchemy.org/trac/ticket/365)'
  id: totrans-855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#365](https://www.sqlalchemy.org/trac/ticket/365)
- en: '**[orm]**'
  id: totrans-856
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”delete-orphan” for a certain type can be set on more than one parent class;
    the instance is an “orphan” only if its not attached to *any* of those parents
  id: totrans-857
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于某种类型，“delete-orphan” 可以在多个���类上设置；如果实例未附加到*任何*这些父类中，则该实例是“孤立的”
- en: misc
  id: totrans-858
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[engine/pool]**'
  id: totrans-859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: some new Pool utility classes, updated docs
  id: totrans-860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些新的 Pool 实用程序类，更新了文档
- en: '**[engine/pool]**'
  id: totrans-861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: ”use_threadlocal” on Pool defaults to False (same as create_engine)
  id: totrans-862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “use_threadlocal” 在 Pool 上默认为 False（与 create_engine 相同）
- en: '**[engine/pool]**'
  id: totrans-863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: fixed direct execution of Compiled objects
  id: totrans-864
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对 Compiled 对象的直接执行
- en: '**[engine/pool]**'
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: create_engine() reworked to be strict about incoming **kwargs. all keyword arguments
    must be consumed by one of the dialect, connection pool, and engine constructors,
    else a TypeError is thrown which describes the full set of invalid kwargs in relation
    to the selected dialect/pool/engine configuration.
  id: totrans-866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计 create_engine() 以严格处理传入的 **kwargs。所有关键字参数必须由方言、连接池和引擎构造函数中的一个消耗，否则将抛出 TypeError，其中描述了与所选方言/池/引擎配置相关的无效
    kwargs 的完整集合。
- en: '**[databases/types]**'
  id: totrans-867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[databases/types]**'
- en: MySQL catches exception on “describe” and reports as NoSuchTableError
  id: totrans-868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 在“describe”时捕获异常，并报告为 NoSuchTableError
- en: '**[databases/types]**'
  id: totrans-869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[databases/types]**'
- en: further fixes to sqlite booleans, weren’t working as defaults
  id: totrans-870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步修复了 sqlite 布尔值，默认情况下不起作用
- en: '**[databases/types]**'
  id: totrans-871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[databases/types]**'
- en: fix to postgres sequence quoting when using schemas
  id: totrans-872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用模式时对 postgres 序列引用的问题
- en: 0.3.0
  id: totrans-873
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.0
- en: 'Released: Sun Oct 22 2006'
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2006 年 10 月 22 日（星期日）
- en: general
  id: totrans-875
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general]**'
  id: totrans-876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: logging is now implemented via standard python “logging” module. “echo” keyword
    parameters are still functional but set/unset log levels for their respective
    classes/instances. all logging can be controlled directly through the Python API
    by setting INFO and DEBUG levels for loggers in the “sqlalchemy” namespace. class-level
    logging is under “sqlalchemy.<module>.<classname>”, instance-level logging under
    “sqlalchemy.<module>.<classname>.0x..<00-FF>”. Test suite includes “–log-info”
    and “–log-debug” arguments which work independently of –verbose/–quiet. Logging
    added to orm to allow tracking of mapper configurations, row iteration.
  id: totrans-877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在通过标准的 Python “logging” 模块实现日志记录。“echo”关键字参数仍然可用，但为它们各自的类/实例设置/取消日志级别。所有日志记录都可以通过
    Python API 直接控制，通过为“sqlalchemy”命名空间中的记录器设置 INFO 和 DEBUG 级别。类级别的日志记录在“sqlalchemy.<module>.<classname>”下，实例级别的日志记录在“sqlalchemy.<module>.<classname>.0x..<00-FF>”下。测试套件包括“--log-info”和“--log-debug”参数，它们独立于--verbose/--quiet
    工作。在 orm 中添加了日志记录，以便跟踪映射器配置、行迭代。
- en: '**[general]**'
  id: totrans-878
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: the documentation-generation system has been overhauled to be much simpler in
    design and more integrated with Markdown
  id: totrans-879
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文档生成系统已经进行了大幅简化设计，并与 Markdown 更加集成
- en: orm
  id: totrans-880
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: attribute tracking modified to be more intelligent about detecting changes,
    particularly with mutable types. TypeEngine objects now take a greater role in
    defining how to compare two scalar instances, including the addition of a MutableType
    mixin which is implemented by PickleType. unit-of-work now tracks the “dirty”
    list as an expression of all persistent objects where the attribute manager detects
    changes. The basic issue that’s fixed is detecting changes on PickleType objects,
    but also generalizes type handling and “modified” object checking to be more complete
    and extensible.
  id: totrans-882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了属性跟踪，更智能地检测更改，特别是对可变类型。TypeEngine 对象现在在定义如何比较两个标量实例方面发挥更大作用，包括通过 PickleType
    实现的 MutableType 混合。unit-of-work 现在将“脏”列表跟踪为所有属性管理器检测到更改的所有持久对象的表达式。修复的基本问题是检测
    PickleType 对象上的更改，但也将类型处理和“修改”对象检查泛化为更完整和可扩展的形式。
- en: '**[orm]**'
  id: totrans-883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a wide refactoring to “attribute loader” and “options” architectures. ColumnProperty
    and PropertyLoader define their loading behavior via switchable “strategies”,
    and MapperOptions no longer use mapper/property copying in order to function;
    they are instead propagated via QueryContext and SelectionContext objects at query/instances
    time. All of the internal copying of mappers and properties that was used to handle
    inheritance as well as options() has been removed; the structure of mappers and
    properties is much simpler than before and is clearly laid out in the new ‘interfaces’
    module.
  id: totrans-884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“属性加载器”和“选项”架构进行了广泛的重构。ColumnProperty 和 PropertyLoader 通过可切换的“策略”定义它们的加载行为，MapperOptions
    不再使用映射器/属性复制来运行；它们通过查询/实例时间通过 QueryContext 和 SelectionContext 对象传播。所有用于处理继承以及
    options() 的内部映射器和属性的复制都已被移除；映射器和属性的结构比以前简单得多，并且在新的“interfaces”模块中清晰地列出。
- en: '**[orm]**'
  id: totrans-885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'related to the mapper/property overhaul, internal refactoring to mapper instances()
    method to use a SelectionContext object to track state during the operation. SLIGHT
    API BREAKAGE: the append_result() and populate_instances() methods on MapperExtension
    have a slightly different method signature now as a result of the change; hoping
    that these methods are not in widespread use as of yet.'
  id: totrans-886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于映射器/属性大修，内部重构到映射器 instances() 方法，使用 SelectionContext 对象来跟踪操作过程中的状态。轻微的 API
    破坏：由于更改，MapperExtension 上的 append_result() 和 populate_instances() 方法现在具有略有不同的方法签名；希望这些方法目前还没有广泛使用。
- en: '**[orm]**'
  id: totrans-887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: instances() method moved to Query now, backwards-compatible version remains
    on Mapper.
  id: totrans-888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: instances() 方法现在移至 Query，向后兼容版本仍然在 Mapper 上保留。
- en: '**[orm]**'
  id: totrans-889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added contains_eager() MapperOption, used in conjunction with instances() to
    specify properties that should be eagerly loaded from the result set, using their
    plain column names by default, or translated given an custom row-translation function.
  id: totrans-890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 contains_eager() MapperOption，与 instances() 结合使用，用于指定应该从结果集中急切加载的属性，默认情况下使用它们的普通列名，或者在给定自定义行翻译函数的情况下进行翻译。
- en: '**[orm]**'
  id: totrans-891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: more rearrangements of unit-of-work commit scheme to better allow dependencies
    within circular flushes to work properly…updated task traversal/logging implementation
  id: totrans-892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多的工作单元提交方案重新排列，以更好地允许循环刷新内的依赖关系正常工作...更新了任务遍历/日志记录实现
- en: '**[orm]**'
  id: totrans-893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: polymorphic mappers (i.e. using inheritance) now produces INSERT statements
    in order of tables across all inherited classes
  id: totrans-894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多态映射器（即使用继承）现在按照所有继承类的表的顺序生成 INSERT 语句
- en: 'References: [#321](https://www.sqlalchemy.org/trac/ticket/321)'
  id: totrans-895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#321](https://www.sqlalchemy.org/trac/ticket/321)
- en: '**[orm]**'
  id: totrans-896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added an automatic “row switch” feature to mapping, which will detect a pending
    instance/deleted instance pair with the same identity key and convert the INSERT/DELETE
    to a single UPDATE
  id: totrans-897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个自动的“行切换”功能到映射中，它将检测具有相同标识键的待处理实例/已删除实例对，并将 INSERT/DELETE 转换为单个 UPDATE
- en: '**[orm]**'
  id: totrans-898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”association” mappings simplified to take advantage of automatic “row switch”
    feature
  id: totrans-899
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “关联”映射简化以利用自动“行切换”功能
- en: '**[orm]**'
  id: totrans-900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”custom list classes” is now implemented via the “collection_class” keyword
    argument to relation(). the old way still works but is deprecated
  id: totrans-901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在通过 relation() 的 “collection_class” 关键字参数来实现“自定义列表类”，旧方式仍然有效但已弃用
- en: 'References: [#212](https://www.sqlalchemy.org/trac/ticket/212)'
  id: totrans-902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#212](https://www.sqlalchemy.org/trac/ticket/212)
- en: '**[orm]**'
  id: totrans-903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “viewonly” flag to relation(), allows construction of relations that have
    no effect on the flush() process.
  id: totrans-904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 relation() 添加了 “viewonly” 标志，允许构建对 flush() 过程没有影响的关系。
- en: '**[orm]**'
  id: totrans-905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “lockmode” argument to base Query select/get functions, including “with_lockmode”
    function to get a Query copy that has a default locking mode. Will translate “read”/”update”
    arguments into a for_update argument on the select side.
  id: totrans-906
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向基本 Query select/get 函数添加了 “lockmode” 参数，包括 “with_lockmode” 函数以获取具有默认锁定模式的 Query
    副本。将“read”/“update”参数转换为 select 方面的 for_update 参数。
- en: 'References: [#292](https://www.sqlalchemy.org/trac/ticket/292)'
  id: totrans-907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#292](https://www.sqlalchemy.org/trac/ticket/292)
- en: '**[orm]**'
  id: totrans-908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: implemented “version check” logic in Query/Mapper, used when version_id_col
    is in effect and query.with_lockmode() is used to get() an instance that’s already
    loaded
  id: totrans-909
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Query/Mapper 中实现了“版本检查”逻辑，在 version_id_col 生效并使用 query.with_lockmode() 来获取已加载实例时使用
- en: '**[orm]**'
  id: totrans-910
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: post_update behavior improved; does a better job at not updating too many rows,
    updates only required columns
  id: totrans-911
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: post_update 行为改进；在更新太多行时表现更好，仅更新必需的列
- en: 'References: [#208](https://www.sqlalchemy.org/trac/ticket/208)'
  id: totrans-912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#208](https://www.sqlalchemy.org/trac/ticket/208)
- en: '**[orm]**'
  id: totrans-913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: adjustments to eager loading so that its “eager chain” is kept separate from
    the normal mapper setup, thereby preventing conflicts with lazy loader operation,
    fixes
  id: totrans-914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整急切加载，使其“急切链”与正常映射器设置分开，从而防止与惰性加载器操作冲突，修复
- en: 'References: [#308](https://www.sqlalchemy.org/trac/ticket/308)'
  id: totrans-915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#308](https://www.sqlalchemy.org/trac/ticket/308)
- en: '**[orm]**'
  id: totrans-916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to deferred group loading
  id: totrans-917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复延迟组加载
- en: '**[orm]**'
  id: totrans-918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.flush() won’t close a connection it opened
  id: totrans-919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.flush() 不会关闭它打开的连接
- en: 'References: [#346](https://www.sqlalchemy.org/trac/ticket/346)'
  id: totrans-920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#346](https://www.sqlalchemy.org/trac/ticket/346)
- en: '**[orm]**'
  id: totrans-921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “batch=True” flag to mapper; if False, save_obj will fully save one object
    at a time including calls to before_XXXX and after_XXXX
  id: totrans-922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向映射器添加了“batch=True”标志；如果为 False，save_obj 将完全逐个保存一个对象，包括对 before_XXXX 和 after_XXXX
    的调用
- en: '**[orm]**'
  id: totrans-923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “column_prefix=None” argument to mapper; prepends the given string (typically
    ‘_’) to column-based attributes automatically set up from the mapper’s Table
  id: totrans-924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向mapper添加了“column_prefix=None”参数；自动将给定字符串（通常为‘_’）前置到从mapper的Table设置的列属性中。
- en: '**[orm]**'
  id: totrans-925
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: specifying joins in the from_obj argument of query.select() will replace the
    main table of the query, if the table is somewhere within the given from_obj.
    this makes it possible to produce custom joins and outerjoins in queries without
    the main table getting added twice.
  id: totrans-926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在query.select()的from_obj参数中指定连接将替换查询的主表，如果表在给定的from_obj中的某处。这使得在查询中产生自定义连接和外连接而不会使主表被添加两次成为可能。
- en: 'References: [#315](https://www.sqlalchemy.org/trac/ticket/315)'
  id: totrans-927
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#315](https://www.sqlalchemy.org/trac/ticket/315)
- en: '**[orm]**'
  id: totrans-928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: eagerloading is adjusted to more thoughtfully attach its LEFT OUTER JOINs to
    the given query, looking for custom “FROM” clauses that may have already been
    set up.
  id: totrans-929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: eagerloading被调整为更加周到地将其LEFT OUTER JOIN附加到给定查询中，查找可能已经设置的自定义“FROM”子句。
- en: '**[orm]**'
  id: totrans-930
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added join_to and outerjoin_to transformative methods to SelectResults, to build
    up join/outerjoin conditions based on property names. also added select_from to
    explicitly set from_obj parameter.
  id: totrans-931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向SelectResults添加了join_to和outerjoin_to转换方法，根据属性名称构建连接/外连接条件。还添加了select_from以明确设置from_obj参数。
- en: '**[orm]**'
  id: totrans-932
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: removed “is_primary” flag from mapper.
  id: totrans-933
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从mapper中移除了“is_primary”标志。
- en: sql
  id: totrans-934
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [construction]**'
  id: totrans-935
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [construction]**'
- en: changed “for_update” parameter to accept False/True/”nowait” and “read”, the
    latter two of which are interpreted only by Oracle and MySQL
  id: totrans-936
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“for_update”参数更改为接受False/True/“nowait”和“read”，后两者仅由Oracle和MySQL解释。
- en: 'References: [#292](https://www.sqlalchemy.org/trac/ticket/292)'
  id: totrans-937
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#292](https://www.sqlalchemy.org/trac/ticket/292)
- en: '**[sql] [construction]**'
  id: totrans-938
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [construction]**'
- en: added extract() function to sql dialect (SELECT extract(field FROM expr))
  id: totrans-939
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向sql方言添加了extract()函数（SELECT extract(field FROM expr)）
- en: '**[sql] [construction]**'
  id: totrans-940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [construction]**'
- en: BooleanExpression includes new “negate” argument to specify the appropriate
    negation operator if one is available.
  id: totrans-941
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: BooleanExpression包括新的“negate”参数，以指定适当的否定运算符（如果有的话）。
- en: '**[sql] [construction]**'
  id: totrans-942
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [construction]**'
- en: calling a negation on an “IN” or “IS” clause will result in “NOT IN”, “IS NOT”
    (as opposed to NOT (x IN y)).
  id: totrans-943
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“IN”或“IS”子句进行否定将导致“NOT IN”，“IS NOT”（而不是NOT (x IN y)）。
- en: '**[sql] [construction]**'
  id: totrans-944
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [construction]**'
- en: Function objects know what to do in a FROM clause now. their behavior should
    be the same, except now you can also do things like select([‘*’], from_obj=[func.my_function()])
    to get multiple columns from the result, or even use sql.column() constructs to
    name the return columns
  id: totrans-945
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在函数对象知道如何在FROM子句中操作。它们的行为应该是相同的，只是现在你还可以做一些像select([‘*’], from_obj=[func.my_function()])这样的事情，以从结果中获取多个列，甚至使用sql.column()构造来命名返回的列。
- en: 'References: [#172](https://www.sqlalchemy.org/trac/ticket/172)'
  id: totrans-946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#172](https://www.sqlalchemy.org/trac/ticket/172)
- en: schema
  id: totrans-947
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: schema
- en: '**[schema]**'
  id: totrans-948
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: a fair amount of cleanup to the schema package, removal of ambiguous methods,
    methods that are no longer needed. slightly more constrained usage, greater emphasis
    on explicitness
  id: totrans-949
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对schema包进行了相当多的清理，删除了模糊的方法，不再需要的方法。稍微更受限制的使用，更加强调明确性
- en: '**[schema]**'
  id: totrans-950
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: the “primary_key” attribute of Table and other selectables becomes a setlike
    ColumnCollection object; is ordered but not numerically indexed. a comparison
    clause between two pks that are derived from the same underlying tables (i.e.
    such as two Alias objects) can be generated via table1.primary_key==table2.primary_key
  id: totrans-951
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table和其他可选择对象的“primary_key”属性变成了一个类似集合的ColumnCollection对象；它是有序的，但没有数值索引。从相同基础表派生的两个主键之间的比较子句（即两个Alias对象之间）可以通过table1.primary_key==table2.primary_key生成。
- en: '**[schema]**'
  id: totrans-952
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: ForeignKey(Constraint) supports “use_alter=True”, to create/drop a foreign key
    via ALTER. this allows circular foreign key relationships to be set up.
  id: totrans-953
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ForeignKey(Constraint)支持“use_alter=True”，通过ALTER创建/删除外键。这允许设置循环外键关系。
- en: '**[schema]**'
  id: totrans-954
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: append_item() methods removed from Table and Column; preferably construct Table/Column/related
    objects inline, but if needed use append_column(), append_foreign_key(), append_constraint(),
    etc.
  id: totrans-955
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从Table和Column中删除了append_item()方法；最好是内联构造Table/Column/相关对象，但如果需要，可以使用append_column()、append_foreign_key()、append_constraint()等方法。
- en: '**[schema]**'
  id: totrans-956
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[schema]**'
- en: table.create() no longer returns the Table object, instead has no return value.
    the usual case is that tables are created via metadata, which is preferable since
    it will handle table dependencies.
  id: totrans-957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: table.create() 不再返回 Table 对象，而是没有返回值。通常情况下，表是通过 metadata 创建的，这是更好的方式，因为它会处理表的依赖关系。
- en: '**[schema]**'
  id: totrans-958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: added UniqueConstraint (goes at Table level), CheckConstraint (goes at Table
    or Column level).
  id: totrans-959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 UniqueConstraint（在 Table 级别）、CheckConstraint（在 Table 或 Column 级别）。
- en: '**[schema]**'
  id: totrans-960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: index=False/unique=True on Column now creates a UniqueConstraint, index=True/unique=False
    creates a plain Index, index=True/unique=True on Column creates a unique Index.
    ‘index’ and ‘unique’ keyword arguments to column are now boolean only; for explicit
    names and groupings of indexes or unique constraints, use the UniqueConstraint/Index
    constructs explicitly.
  id: totrans-961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column 上的 index=False/unique=True 现在创建一个 UniqueConstraint，index=True/unique=False
    创建一个普通的 Index，index=True/unique=True 在 Column 上创建一个唯一的 Index。column 上的 ‘index’
    和 ‘unique’ 关键字参数现在仅为布尔值；对于索引或唯一约束的显式名称和分组，请显式使用 UniqueConstraint/Index 构造。
- en: '**[schema]**'
  id: totrans-962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: added autoincrement=True to Column; will disable schema generation of SERIAL/AUTO_INCREMENT/identity
    seq for postgres/mysql/mssql if explicitly set to False
  id: totrans-963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将 autoincrement=True 添加到 Column；如果明确设置为 False，则会禁用 postgres/mysql/mssql 的 SERIAL/AUTO_INCREMENT/identity
    序列的模式生成
- en: '**[schema]**'
  id: totrans-964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: TypeEngine objects now have methods to deal with copying and comparing values
    of their specific type. Currently used by the ORM, see below.
  id: totrans-965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeEngine 对象现在具有处理其特定类型的值的方法。目前被 ORM 使用，参见下文。
- en: '**[schema]**'
  id: totrans-966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: fixed condition that occurred during reflection when a primary key column was
    explicitly overridden, where the PrimaryKeyConstraint would get both the reflected
    and the programmatic column doubled up
  id: totrans-967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反射时当主键列被显式覆盖时出现的条件，其中 PrimaryKeyConstraint 会重复获取反映和编程列。
- en: '**[schema]**'
  id: totrans-968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: the “foreign_key” attribute on Column and ColumnElement in general is deprecated,
    in favor of the “foreign_keys” list/set-based attribute, which takes into account
    multiple foreign keys on one column. “foreign_key” will return the first element
    in the “foreign_keys” list/set or None if the list is empty.
  id: totrans-969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Column 和 ColumnElement 上的“foreign_key” 属性已被弃用，而是采用了“foreign_keys” 基于列表/集合的属性，该属性考虑了一个列上的多个外键。“foreign_key”
    将返回“foreign_keys” 列表/集合中的第一个元素，如果列表为空则返回 None。
- en: sqlite
  id: totrans-970
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: sqlite boolean datatype converts False/True to 0/1 by default
  id: totrans-972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite 布尔数据类型默认将 False/True 转换为 0/1
- en: '**[sqlite]**'
  id: totrans-973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: fixes to Date/Time (SLDate/SLTime) types; works as good as postgres now
  id: totrans-974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Date/Time（SLDate/SLTime）类型的问题；现在与 postgres 一样好用
- en: 'References: [#335](https://www.sqlalchemy.org/trac/ticket/335)'
  id: totrans-975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#335](https://www.sqlalchemy.org/trac/ticket/335)
- en: oracle
  id: totrans-976
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-977
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle has experimental support for cx_Oracle.TIMESTAMP, which requires a setinputsizes()
    call on the cursor that is now enabled via the ‘auto_setinputsizes’ flag to the
    oracle dialect.
  id: totrans-978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 对 cx_Oracle.TIMESTAMP 有试验性支持，这需要对现在通过 oracle 方言的游标进行 setinputsizes()
    调用，现在通过 ‘auto_setinputsizes’ 标志启用。
- en: misc
  id: totrans-979
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[ms-sql]**'
  id: totrans-980
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: fixes bug 261 (table reflection broken for MS-SQL case-sensitive databases)
  id: totrans-981
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 bug 261（对于区分大小写的数据库，表反射失效的问题）
- en: '**[ms-sql]**'
  id: totrans-982
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: can now specify port for pymssql
  id: totrans-983
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以为 pymssql 指定端口
- en: '**[ms-sql]**'
  id: totrans-984
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: introduces new “auto_identity_insert” option for auto-switching between “SET
    IDENTITY_INSERT” mode when values specified for IDENTITY columns
  id: totrans-985
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入了新的 “auto_identity_insert” 选项，用于在为 IDENTITY 列指定值时自动切换到 “SET IDENTITY_INSERT”
    模式
- en: '**[ms-sql]**'
  id: totrans-986
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: now supports multi-column foreign keys
  id: totrans-987
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持多列外键
- en: '**[ms-sql]**'
  id: totrans-988
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: fix to reflecting date/datetime columns
  id: totrans-989
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反射日期/时间列的问题
- en: '**[ms-sql]**'
  id: totrans-990
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: NCHAR and NVARCHAR type support added
  id: totrans-991
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 NCHAR 和 NVARCHAR 类型支持
- en: '**[firebird]**'
  id: totrans-992
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: aliases do not use “AS”
  id: totrans-993
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 别名不使用 “AS”
- en: '**[firebird]**'
  id: totrans-994
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: correctly raises NoSuchTableError when reflecting non-existent table
  id: totrans-995
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反映不存在的表时，正确引发 NoSuchTableError
- en: '**[connections/pooling/execution]**'
  id: totrans-996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[连接/池/执行]**'
- en: connection pool tracks open cursors and automatically closes them if connection
    is returned to pool with cursors still opened. Can be affected by options which
    cause it to raise an error instead, or to do nothing. fixes issues with MySQL,
    others
  id: totrans-997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接池跟踪打开的游标，并在连接返回到仍然打开游标的池时自动关闭它们。可以受到导致其引发错误或不执行任何操作的选项的影响。修复了与 MySQL 等的问题
- en: '**[connections/pooling/execution]**'
  id: totrans-998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[连接/池/执行]**'
- en: fixed bug where Connection wouldn’t lose its Transaction after commit/rollback
  id: totrans-999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了连接在提交/回滚后不会丢失其事务的错误。
- en: '**[connections/pooling/execution]**'
  id: totrans-1000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[连接/池/执行]**'
- en: added scalar() method to ComposedSQLEngine, ResultProxy
  id: totrans-1001
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ComposedSQLEngine、ResultProxy 现在添加了 scalar() 方法。
- en: '**[connections/pooling/execution]**'
  id: totrans-1002
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[connections/pooling/execution]**'
- en: ResultProxy will close() the underlying cursor when the ResultProxy itself is
    closed. this will auto-close cursors for ResultProxy objects that have had all
    their rows fetched (or had scalar() called).
  id: totrans-1003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ResultProxy 在其自身关闭时将关闭底层游标。当所有行都已提取（或已调用 scalar()）的 ResultProxy 对象将自动关闭游标。
- en: '**[connections/pooling/execution]**'
  id: totrans-1004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[connections/pooling/execution]**'
- en: ResultProxy.fetchall() internally uses DBAPI fetchall() for better efficiency,
    added to mapper iteration as well (courtesy Michael Twomey)
  id: totrans-1005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ResultProxy.fetchall() 在内部使用 DBAPI fetchall() 实现更好的效率，也添加到 mapper 迭代中（感谢 Michael
    Twomey）。
- en: 0.3.11
  id: totrans-1006
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.11
- en: 'Released: Sun Oct 14 2007'
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007 年 10 月 14 日（星期日）
- en: orm
  id: totrans-1008
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added a check for joining from A->B using join(), along two different m2m tables.
    this raises an error in 0.3 but is possible in 0.4 when aliases are used.
  id: totrans-1010
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个检查，用 join() 从 A->B 连接时，同时使用两个不同的 m2m 表。这在 0.3 中会引发错误，但在使用别名时在 0.4 中是可能的。
- en: 'References: [#687](https://www.sqlalchemy.org/trac/ticket/687)'
  id: totrans-1011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#687](https://www.sqlalchemy.org/trac/ticket/687)
- en: '**[orm]**'
  id: totrans-1012
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed small exception throw bug in Session.merge()
  id: totrans-1013
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Session.merge() 中的小异常抛出 bug。
- en: '**[orm]**'
  id: totrans-1014
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug where mapper, being linked to a join where one table had no PK columns,
    would not detect that the joined table had no PK.
  id: totrans-1015
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了映射器的一个 bug，该 bug 与一个表没有 PK 列的联接有关，映射器未检测到联接的表没有 PK。
- en: '**[orm]**'
  id: totrans-1016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bugs in determining proper sync clauses from custom inherit conditions
  id: totrans-1017
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从自定义继承条件确定适当的同步子句的 bug。
- en: 'References: [#769](https://www.sqlalchemy.org/trac/ticket/769)'
  id: totrans-1018
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#769](https://www.sqlalchemy.org/trac/ticket/769)
- en: '**[orm]**'
  id: totrans-1019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: backref remove object operation doesn’t fail if the other-side collection doesn’t
    contain the item, supports noload collections
  id: totrans-1020
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果另一侧集合不包含该项，则 backref 移除对象操作不会失败，支持 noload 集合。
- en: 'References: [#813](https://www.sqlalchemy.org/trac/ticket/813)'
  id: totrans-1021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#813](https://www.sqlalchemy.org/trac/ticket/813)
- en: engine
  id: totrans-1022
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-1023
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: fixed another occasional race condition which could occur when using pool with
    threadlocal setting
  id: totrans-1024
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了另一个偶发性竞态条件，在使用带 threadlocal 设置的池时可能会发生。
- en: sql
  id: totrans-1025
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1026
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: tweak DISTINCT precedence for clauses like func.count(t.c.col.distinct())
  id: totrans-1027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了像 func.count(t.c.col.distinct()) 这样的 DISTINCT 优先级。
- en: '**[sql]**'
  id: totrans-1028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed detection of internal ‘$’ characters in :bind$params
  id: totrans-1029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 :bind$params 中检测内部“$”字符的 bug。
- en: 'References: [#719](https://www.sqlalchemy.org/trac/ticket/719)'
  id: totrans-1030
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#719](https://www.sqlalchemy.org/trac/ticket/719)
- en: '**[sql]**'
  id: totrans-1031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: don’t assume join criterion consists only of column objects
  id: totrans-1032
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要假设连接条件仅包含列对象。
- en: 'References: [#768](https://www.sqlalchemy.org/trac/ticket/768)'
  id: totrans-1033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#768](https://www.sqlalchemy.org/trac/ticket/768)
- en: '**[sql]**'
  id: totrans-1034
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: adjusted operator precedence of NOT to match ‘==’ and others, so that ~(x==y)
    produces NOT (x=y), which is compatible with MySQL < 5.0 (doesn’t like “NOT x=y”)
  id: totrans-1035
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 NOT 的运算符优先级，使其与 ‘==’ 和其他运算符匹配，因此 ~(x==y) 产生 NOT (x=y)，这与 MySQL < 5.0 兼容（不喜欢
    “NOT x=y”）。
- en: 'References: [#764](https://www.sqlalchemy.org/trac/ticket/764)'
  id: totrans-1036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#764](https://www.sqlalchemy.org/trac/ticket/764)
- en: mysql
  id: totrans-1037
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1038
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: fixed specification of YEAR columns when generating schema
  id: totrans-1039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成模式时修正了 YEAR 列的规范。
- en: sqlite
  id: totrans-1040
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-1041
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: passthrough for stringified dates
  id: totrans-1042
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 日期字符串的传递
- en: mssql
  id: totrans-1043
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1044
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: added support for TIME columns (simulated using DATETIME)
  id: totrans-1045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 TIME 列（使用 DATETIME 模拟）的支持。
- en: 'References: [#679](https://www.sqlalchemy.org/trac/ticket/679)'
  id: totrans-1046
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#679](https://www.sqlalchemy.org/trac/ticket/679)
- en: '**[mssql]**'
  id: totrans-1047
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: added support for BIGINT, MONEY, SMALLMONEY, UNIQUEIDENTIFIER and SQL_VARIANT
  id: totrans-1048
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 BIGINT、MONEY、SMALLMONEY、UNIQUEIDENTIFIER 和 SQL_VARIANT 的支持。
- en: 'References: [#721](https://www.sqlalchemy.org/trac/ticket/721)'
  id: totrans-1049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#721](https://www.sqlalchemy.org/trac/ticket/721)
- en: '**[mssql]**'
  id: totrans-1050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: index names are now quoted when dropping from reflected tables
  id: totrans-1051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除反射表时现在会引用索引名称。
- en: 'References: [#684](https://www.sqlalchemy.org/trac/ticket/684)'
  id: totrans-1052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#684](https://www.sqlalchemy.org/trac/ticket/684)
- en: '**[mssql]**'
  id: totrans-1053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: can now specify a DSN for PyODBC, using a URI like mssql:///?dsn=bob
  id: totrans-1054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以为 PyODBC 指定 DSN，使用类似 mssql:///?dsn=bob 的 URI。
- en: oracle
  id: totrans-1055
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: removed LONG_STRING, LONG_BINARY from “binary” types, so type objects don’t
    try to read their values as LOB.
  id: totrans-1057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从“binary”类型中移除 LONG_STRING、LONG_BINARY，因此类型对象不会尝试将其值读取为 LOB。
- en: 'References: [#622](https://www.sqlalchemy.org/trac/ticket/622), [#751](https://www.sqlalchemy.org/trac/ticket/751)'
  id: totrans-1058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#622](https://www.sqlalchemy.org/trac/ticket/622)，[#751](https://www.sqlalchemy.org/trac/ticket/751)
- en: misc
  id: totrans-1059
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[postgres]**'
  id: totrans-1060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: when reflecting tables from alternate schemas, the “default” placed upon the
    primary key, i.e. usually a sequence name, has the “schema” name unconditionally
    quoted, so that schema names which need quoting are fine. its slightly unnecessary
    for schema names which don’t need quoting but not harmful.
  id: totrans-1061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当从备用模式中反映表时，“默认”放置在主键上的内容，即通常是序列名称，无条件地引用了 “schema” 名称，因此需要引用的模式名称是正确的。对于不需要引用的模式名称来说，这有点多余但不会有害。
- en: '**[firebird]**'
  id: totrans-1062
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: 'supports_sane_rowcount() set to False due to ticket #370 (right way).'
  id: totrans-1063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '由于票证 #370（正确的方式），supports_sane_rowcount() 设置为 False。'
- en: '**[firebird]**'
  id: totrans-1064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: fixed reflection of Column’s nullable property.
  id: totrans-1065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Column 的 nullable 属性的反射。
- en: orm
  id: totrans-1066
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added a check for joining from A->B using join(), along two different m2m tables.
    this raises an error in 0.3 but is possible in 0.4 when aliases are used.
  id: totrans-1068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个检查，用于使用 join() 从 A->B 进行连接，沿两个不同的 m2m 表。这在 0.3 中引发错误，但在 0.4 中使用别名时是可能的。
- en: 'References: [#687](https://www.sqlalchemy.org/trac/ticket/687)'
  id: totrans-1069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#687](https://www.sqlalchemy.org/trac/ticket/687)
- en: '**[orm]**'
  id: totrans-1070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed small exception throw bug in Session.merge()
  id: totrans-1071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Session.merge() 中修复了一个小的异常抛出错误。
- en: '**[orm]**'
  id: totrans-1072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug where mapper, being linked to a join where one table had no PK columns,
    would not detect that the joined table had no PK.
  id: totrans-1073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，其中 mapper 与一个表连接在一起，该表没有主键列，但不会检测到连接表没有主键。
- en: '**[orm]**'
  id: totrans-1074
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bugs in determining proper sync clauses from custom inherit conditions
  id: totrans-1075
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了从自定义继承条件中确定正确同步子句的错误。
- en: 'References: [#769](https://www.sqlalchemy.org/trac/ticket/769)'
  id: totrans-1076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#769](https://www.sqlalchemy.org/trac/ticket/769)
- en: '**[orm]**'
  id: totrans-1077
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: backref remove object operation doesn’t fail if the other-side collection doesn’t
    contain the item, supports noload collections
  id: totrans-1078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果另一侧的集合不包含该项，则 backref 移除对象操作不会失败，支持 noload 集合。
- en: 'References: [#813](https://www.sqlalchemy.org/trac/ticket/813)'
  id: totrans-1079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#813](https://www.sqlalchemy.org/trac/ticket/813)
- en: engine
  id: totrans-1080
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: engine
- en: '**[engine]**'
  id: totrans-1081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine]**'
- en: fixed another occasional race condition which could occur when using pool with
    threadlocal setting
  id: totrans-1082
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用带有 threadlocal 设置的池时可能发生的另一个偶发竞争条件。
- en: sql
  id: totrans-1083
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1084
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: tweak DISTINCT precedence for clauses like func.count(t.c.col.distinct())
  id: totrans-1085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了对像 func.count(t.c.col.distinct()) 这样的子句的 DISTINCT 优先级。
- en: '**[sql]**'
  id: totrans-1086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: Fixed detection of internal ‘$’ characters in :bind$params
  id: totrans-1087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对 :bind$params 中内部 ‘$’ 字符的检测。
- en: 'References: [#719](https://www.sqlalchemy.org/trac/ticket/719)'
  id: totrans-1088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#719](https://www.sqlalchemy.org/trac/ticket/719)
- en: '**[sql]**'
  id: totrans-1089
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: don’t assume join criterion consists only of column objects
  id: totrans-1090
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不再假设连接标准仅由列对象组成。
- en: 'References: [#768](https://www.sqlalchemy.org/trac/ticket/768)'
  id: totrans-1091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#768](https://www.sqlalchemy.org/trac/ticket/768)
- en: '**[sql]**'
  id: totrans-1092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: adjusted operator precedence of NOT to match ‘==’ and others, so that ~(x==y)
    produces NOT (x=y), which is compatible with MySQL < 5.0 (doesn’t like “NOT x=y”)
  id: totrans-1093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 NOT 运算符的优先级，使其与 ‘==’ 和其他运算符匹配，以便 ~(x==y) 产生 NOT (x=y)，这与 MySQL < 5.0 兼容（不喜欢
    “NOT x=y”）。
- en: 'References: [#764](https://www.sqlalchemy.org/trac/ticket/764)'
  id: totrans-1094
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#764](https://www.sqlalchemy.org/trac/ticket/764)
- en: mysql
  id: totrans-1095
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1096
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: fixed specification of YEAR columns when generating schema
  id: totrans-1097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在生成模式时修复了 YEAR 列的规范。
- en: sqlite
  id: totrans-1098
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-1099
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: passthrough for stringified dates
  id: totrans-1100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对字符串化的日期进行了穿透处理。
- en: mssql
  id: totrans-1101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: added support for TIME columns (simulated using DATETIME)
  id: totrans-1103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 TIME 列（使用 DATETIME 模拟）的支持。
- en: 'References: [#679](https://www.sqlalchemy.org/trac/ticket/679)'
  id: totrans-1104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#679](https://www.sqlalchemy.org/trac/ticket/679)
- en: '**[mssql]**'
  id: totrans-1105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: added support for BIGINT, MONEY, SMALLMONEY, UNIQUEIDENTIFIER and SQL_VARIANT
  id: totrans-1106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 BIGINT、MONEY、SMALLMONEY、UNIQUEIDENTIFIER 和 SQL_VARIANT 的支持。
- en: 'References: [#721](https://www.sqlalchemy.org/trac/ticket/721)'
  id: totrans-1107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#721](https://www.sqlalchemy.org/trac/ticket/721)
- en: '**[mssql]**'
  id: totrans-1108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: index names are now quoted when dropping from reflected tables
  id: totrans-1109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从反映的表中删除索引名称时现在会引用它们。
- en: 'References: [#684](https://www.sqlalchemy.org/trac/ticket/684)'
  id: totrans-1110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#684](https://www.sqlalchemy.org/trac/ticket/684)
- en: '**[mssql]**'
  id: totrans-1111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: can now specify a DSN for PyODBC, using a URI like mssql:///?dsn=bob
  id: totrans-1112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以为 PyODBC 指定 DSN，使用类似 mssql:///?dsn=bob 的 URI。
- en: oracle
  id: totrans-1113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: removed LONG_STRING, LONG_BINARY from “binary” types, so type objects don’t
    try to read their values as LOB.
  id: totrans-1115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 “binary” 类型中删除了 LONG_STRING、LONG_BINARY，因此类型对象不会尝试将其值读取为 LOB。
- en: 'References: [#622](https://www.sqlalchemy.org/trac/ticket/622), [#751](https://www.sqlalchemy.org/trac/ticket/751)'
  id: totrans-1116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#622](https://www.sqlalchemy.org/trac/ticket/622), [#751](https://www.sqlalchemy.org/trac/ticket/751)
- en: misc
  id: totrans-1117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[postgres]**'
  id: totrans-1118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: when reflecting tables from alternate schemas, the “default” placed upon the
    primary key, i.e. usually a sequence name, has the “schema” name unconditionally
    quoted, so that schema names which need quoting are fine. its slightly unnecessary
    for schema names which don’t need quoting but not harmful.
  id: totrans-1119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从替代模式反射表时，放在主键上的“默认”（通常是序列名称）无条件地引用了“模式”名称，因此需要引用的模式名称是可以的。对于不需要引用的模式名称来说，这有点多余但不会有害。
- en: '**[firebird]**'
  id: totrans-1120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: 'supports_sane_rowcount() set to False due to ticket #370 (right way).'
  id: totrans-1121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: supports_sane_rowcount()设置为False，因为ticket＃370（正确方式）。
- en: '**[firebird]**'
  id: totrans-1122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: fixed reflection of Column’s nullable property.
  id: totrans-1123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Column的nullable属性的反射。
- en: 0.3.10
  id: totrans-1124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.10
- en: 'Released: Fri Jul 20 2007'
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年7月20日星期五
- en: general
  id: totrans-1126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-1127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: a new mutex that was added in 0.3.9 causes the pool_timeout feature to fail
    during a race condition; threads would raise TimeoutError immediately with no
    delay if many threads push the pool into overflow at the same time. this issue
    has been fixed.
  id: totrans-1128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在0.3.9中添加的新互斥锁导致在竞争条件下pool_timeout功能失败；如果许多线程同时将池推入溢出，线程将立即引发TimeoutError，没有延迟。此问题已得到解决。
- en: orm
  id: totrans-1129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: cleanup to connection-bound sessions, SessionTransaction
  id: totrans-1131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 清理连接绑定会话，SessionTransaction
- en: sql
  id: totrans-1132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: got connection-bound metadata to work with implicit execution
  id: totrans-1134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使连接绑定的元数据与隐式执行一起工作
- en: '**[sql]**'
  id: totrans-1135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: foreign key specs can have any character in their identifiers
  id: totrans-1136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 外键规范可以在其标识符中包含任何字符
- en: 'References: [#667](https://www.sqlalchemy.org/trac/ticket/667)'
  id: totrans-1137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#667](https://www.sqlalchemy.org/trac/ticket/667)
- en: '**[sql]**'
  id: totrans-1138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added commutativity-awareness to binary clause comparisons to each other, improves
    ORM lazy load optimization
  id: totrans-1139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向二进制子句比较添加了可交换性意识，改进了ORM延迟加载优化
- en: 'References: [#664](https://www.sqlalchemy.org/trac/ticket/664)'
  id: totrans-1140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#664](https://www.sqlalchemy.org/trac/ticket/664)
- en: misc
  id: totrans-1141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[postgres]**'
  id: totrans-1142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: fixed max identifier length (63)
  id: totrans-1143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了最大标识符长度（63）
- en: 'References: [#571](https://www.sqlalchemy.org/trac/ticket/571)'
  id: totrans-1144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#571](https://www.sqlalchemy.org/trac/ticket/571)
- en: general
  id: totrans-1145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-1146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: a new mutex that was added in 0.3.9 causes the pool_timeout feature to fail
    during a race condition; threads would raise TimeoutError immediately with no
    delay if many threads push the pool into overflow at the same time. this issue
    has been fixed.
  id: totrans-1147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在0.3.9中添加的新互斥锁导致在竞争条件下pool_timeout功能失败；如果许多线程同时将池推入溢出，线程将立即引发TimeoutError，没有延迟。此问题已得到解决。
- en: orm
  id: totrans-1148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: cleanup to connection-bound sessions, SessionTransaction
  id: totrans-1150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 清理连接绑定会话，SessionTransaction
- en: sql
  id: totrans-1151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: got connection-bound metadata to work with implicit execution
  id: totrans-1153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使连接绑定的元数据与隐式执行一起工作
- en: '**[sql]**'
  id: totrans-1154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: foreign key specs can have any character in their identifiers
  id: totrans-1155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 外键规范可以在其标识符中包含任何字符
- en: 'References: [#667](https://www.sqlalchemy.org/trac/ticket/667)'
  id: totrans-1156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#667](https://www.sqlalchemy.org/trac/ticket/667)
- en: '**[sql]**'
  id: totrans-1157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added commutativity-awareness to binary clause comparisons to each other, improves
    ORM lazy load optimization
  id: totrans-1158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向二进制子句比较添加了可交换性意识，改进了ORM延迟加载优化
- en: 'References: [#664](https://www.sqlalchemy.org/trac/ticket/664)'
  id: totrans-1159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#664](https://www.sqlalchemy.org/trac/ticket/664)
- en: misc
  id: totrans-1160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[postgres]**'
  id: totrans-1161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: fixed max identifier length (63)
  id: totrans-1162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了最大标识符长度（63）
- en: 'References: [#571](https://www.sqlalchemy.org/trac/ticket/571)'
  id: totrans-1163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#571](https://www.sqlalchemy.org/trac/ticket/571)
- en: 0.3.9
  id: totrans-1164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.9
- en: 'Released: Sun Jul 15 2007'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年7月15日星期日
- en: general
  id: totrans-1166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-1167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: better error message for NoSuchColumnError
  id: totrans-1168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NoSuchColumnError的更好错误消息
- en: 'References: [#607](https://www.sqlalchemy.org/trac/ticket/607)'
  id: totrans-1169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#607](https://www.sqlalchemy.org/trac/ticket/607)
- en: '**[general]**'
  id: totrans-1170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: finally figured out how to get setuptools version in, available as sqlalchemy.__version__
  id: totrans-1171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终弄清楚了如何将setuptools版本引入，可作为sqlalchemy.__version__使用
- en: 'References: [#428](https://www.sqlalchemy.org/trac/ticket/428)'
  id: totrans-1172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#428](https://www.sqlalchemy.org/trac/ticket/428)
- en: '**[general]**'
  id: totrans-1173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: the various “engine” arguments, such as “engine”, “connectable”, “engine_or_url”,
    “bind_to”, etc. are all present, but deprecated. they all get replaced by the
    single term “bind”. you also set the “bind” of MetaData using metadata.bind =
    <engine or connection>
  id: totrans-1174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 各种“engine”参数，如“engine”，“connectable”，“engine_or_url”，“bind_to”等都存在，但已弃用。它们都被单个术语“bind”取代。您还可以使用metadata.bind
    = <engine or connection>设置MetaData的“bind”。
- en: orm
  id: totrans-1175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'forwards-compatibility with 0.4: added one(), first(), and all() to Query.
    almost all Query functionality from 0.4 is present in 0.3.9 for forwards-compat
    purposes.'
  id: totrans-1177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与0.4向前兼容：向Query添加了one()，first()和all()。几乎所有0.4中的Query功能在0.3.9中都存在，以实现向前兼容。
- en: '**[orm]**'
  id: totrans-1178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'reset_joinpoint() really really works this time, promise ! lets you re-join
    from the root: query.join([‘a’, ‘b’]).filter(<crit>).reset_joinpoint().join([‘a’,
    ‘c’]).filter(<some other crit>).all() in 0.4 all join() calls start from the “root”'
  id: totrans-1179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: reset_joinpoint()这次真的真的有效，保证！允许您从根重新加入：query.join([‘a’, ‘b’]).filter(<crit>).reset_joinpoint().join([‘a’,
    ‘c’]).filter(<some other crit>).all()在0.4中，所有的join()调用都从“root”开始。
- en: '**[orm]**'
  id: totrans-1180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added synchronization to the mapper() construction step, to avoid thread collisions
    when pre-existing mappers are compiling in a different thread
  id: totrans-1181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在mapper()构造步骤中添加了同步，以避免在不同线程中编译预先存在的mapper时出现线程冲突
- en: 'References: [#613](https://www.sqlalchemy.org/trac/ticket/613)'
  id: totrans-1182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#613](https://www.sqlalchemy.org/trac/ticket/613)
- en: '**[orm]**'
  id: totrans-1183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a warning is issued by Mapper when two primary key columns of the same name
    are munged into a single attribute. this happens frequently when mapping to joins
    (or inheritance).
  id: totrans-1184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当两个相同名称的主键列被混合成一个属性时，Mapper会发出警告。这在映射到联接（或继承）时经常发生。
- en: '**[orm]**'
  id: totrans-1185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: synonym() properties are fully supported by all Query joining/ with_parent operations
  id: totrans-1186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: synonym()属性现已完全受到所有Query joining/ with_parent操作的支持。
- en: 'References: [#598](https://www.sqlalchemy.org/trac/ticket/598)'
  id: totrans-1187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#598](https://www.sqlalchemy.org/trac/ticket/598)
- en: '**[orm]**'
  id: totrans-1188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed very stupid bug when deleting items with many-to-many uselist=False relations
  id: totrans-1189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用uselist=False关系删除项目时的非常愚蠢的错误。
- en: '**[orm]**'
  id: totrans-1190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: remember all that stuff about polymorphic_union ? for joined table inheritance
    ? Funny thing… You sort of don’t need it for joined table inheritance, you can
    just string all the tables together via outerjoin(). The UNION still applies if
    concrete tables are involved, though (since nothing to join them on).
  id: totrans-1191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还记得关于多态联合的所有东西吗？用于连接表继承？有趣的事情是...对于连接表继承，你基本上不需要它，你可以通过outerjoin()将所有表串在一起。然而，如果涉及具体表，则UNION仍然适用（因为没有东西可以加入它们）。
- en: '**[orm]**'
  id: totrans-1192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: small fix to eager loading to better work with eager loads to polymorphic mappers
    that are using a straight “outerjoin” clause
  id: totrans-1193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对贪婪加载进行了小修复，以更好地与使用直接“outerjoin”子句的多态映射器的贪婪加载配合使用。
- en: sql
  id: totrans-1194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: ForeignKey to a table in a schema that’s not the default schema requires the
    schema to be explicit; i.e. ForeignKey(‘alt_schema.users.id’)
  id: totrans-1196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对不是默认模式的表的外键需要明确指定模式；即ForeignKey(‘alt_schema.users.id’)
- en: '**[sql]**'
  id: totrans-1197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: MetaData can now be constructed with an engine or url as the first argument,
    just like BoundMetaData
  id: totrans-1198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MetaData现在可以用引擎或url作为第一个参数来构造，就像BoundMetaData一样。
- en: '**[sql]**'
  id: totrans-1199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: BoundMetaData is now deprecated, and MetaData is a direct substitute.
  id: totrans-1200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: BoundMetaData现已弃用，并且MetaData是一个直接的替代品。
- en: '**[sql]**'
  id: totrans-1201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: DynamicMetaData has been renamed to ThreadLocalMetaData. the DynamicMetaData
    name is deprecated and is an alias for ThreadLocalMetaData or a regular MetaData
    if threadlocal=False
  id: totrans-1202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DynamicMetaData已更名为ThreadLocalMetaData。DynamicMetaData名称已弃用，并且是ThreadLocalMetaData或者当threadlocal=False时是常规MetaData的别名。
- en: '**[sql]**'
  id: totrans-1203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: composite primary key is represented as a non-keyed set to allow for composite
    keys consisting of cols with the same name; occurs within a Join. helps inheritance
    scenarios formulate correct PK.
  id: totrans-1204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 复合主键被表示为非键集，以允许由具有相同名称的列组成的复合键；在Join中发生。帮助继承方案制定正确的PK。
- en: '**[sql]**'
  id: totrans-1205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: improved ability to get the “correct” and most minimal set of primary key columns
    from a join, equating foreign keys and otherwise equated columns. this is also
    mostly to help inheritance scenarios formulate the best choice of primary key
    columns.
  id: totrans-1206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提高了从联接中获取“正确”的和最小化的主键列集的能力，将外键和其他等值列等效。这也主要是为了帮助继承方案制定最佳选择的主键列。
- en: 'References: [#185](https://www.sqlalchemy.org/trac/ticket/185)'
  id: totrans-1207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#185](https://www.sqlalchemy.org/trac/ticket/185)
- en: '**[sql]**'
  id: totrans-1208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added ‘bind’ argument to Sequence.create()/drop(), ColumnDefault.execute()
  id: totrans-1209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Sequence.create()/drop()，ColumnDefault.execute()中添加了‘bind’参数。
- en: '**[sql]**'
  id: totrans-1210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: columns can be overridden in a reflected table with a “key” attribute different
    than the column’s name, including for primary key columns
  id: totrans-1211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列可以使用与列名不同的“key”属性在反射表中被重写，包括主键列
- en: 'References: [#650](https://www.sqlalchemy.org/trac/ticket/650)'
  id: totrans-1212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#650](https://www.sqlalchemy.org/trac/ticket/650)
- en: '**[sql]**'
  id: totrans-1213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed “ambiguous column” result detection, when dupe col names exist in a result
  id: totrans-1214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在结果中存在重复列名时“模棱两可的列”结果检测的问题。
- en: 'References: [#657](https://www.sqlalchemy.org/trac/ticket/657)'
  id: totrans-1215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#657](https://www.sqlalchemy.org/trac/ticket/657)
- en: '**[sql]**'
  id: totrans-1216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: some enhancements to “column targeting”, the ability to match a column to a
    “corresponding” column in another selectable. this affects mostly ORM ability
    to map to complex joins
  id: totrans-1217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“列定位”进行了一些增强，即将一列与另一个可选择的“对应”列进行匹配的能力。这主要影响ORM映射到复杂连接的能力
- en: '**[sql]**'
  id: totrans-1218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: MetaData and all SchemaItems are safe to use with pickle. slow table reflections
    can be dumped into a pickled file to be reused later. Just reconnect the engine
    to the metadata after unpickling.
  id: totrans-1219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MetaData和所有SchemaItems都可以安全地与pickle一起使用。可以将缓慢的表反射转储到一个pickled文件中以供以后重用。只需在解pickle后重新连接到元数据。
- en: 'References: [#619](https://www.sqlalchemy.org/trac/ticket/619)'
  id: totrans-1220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#619](https://www.sqlalchemy.org/trac/ticket/619)
- en: '**[sql]**'
  id: totrans-1221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added a mutex to QueuePool’s “overflow” calculation to prevent a race condition
    that can bypass max_overflow
  id: totrans-1222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在QueuePool的“overflow”计算中添加了互斥锁，以防止绕过max_overflow的竞争条件
- en: '**[sql]**'
  id: totrans-1223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed grouping of compound selects to give correct results. will break on sqlite
    in some cases, but those cases were producing incorrect results anyway, sqlite
    doesn’t support grouped compound selects
  id: totrans-1224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了复合选择的分组，以便给出正确的结果。在某些情况下会在sqlite上出现问题，但这些情况本来就会产生不正确的结果，sqlite不支持分组的复合选择
- en: 'References: [#623](https://www.sqlalchemy.org/trac/ticket/623)'
  id: totrans-1225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#623](https://www.sqlalchemy.org/trac/ticket/623)
- en: '**[sql]**'
  id: totrans-1226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed precedence of operators so that parenthesis are correctly applied
  id: totrans-1227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了运算符的优先级，以便正确��用括号
- en: 'References: [#620](https://www.sqlalchemy.org/trac/ticket/620)'
  id: totrans-1228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#620](https://www.sqlalchemy.org/trac/ticket/620)
- en: '**[sql]**'
  id: totrans-1229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: calling <column>.in_() (i.e. with no arguments) will return “CASE WHEN (<column>
    IS NULL) THEN NULL ELSE 0 END = 1)”, so that NULL or False is returned in all
    cases, rather than throwing an error
  id: totrans-1230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调用<column>.in_()（即不带参数）将返回“CASE WHEN (<column> IS NULL) THEN NULL ELSE 0 END
    = 1”，以便在所有情况下返回NULL或False，而不是抛出错误
- en: 'References: [#545](https://www.sqlalchemy.org/trac/ticket/545)'
  id: totrans-1231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#545](https://www.sqlalchemy.org/trac/ticket/545)
- en: '**[sql]**'
  id: totrans-1232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed “where”/”from” criterion of select() to accept a unicode string in addition
    to regular string - both convert to text()
  id: totrans-1233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了select()的“where”/“from”条件，以接受unicode字符串以及常规字符串 - 两者都转换为text()
- en: '**[sql]**'
  id: totrans-1234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added standalone distinct() function in addition to column.distinct()
  id: totrans-1235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了独立的distinct()函数，以补充column.distinct()
- en: 'References: [#558](https://www.sqlalchemy.org/trac/ticket/558)'
  id: totrans-1236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#558](https://www.sqlalchemy.org/trac/ticket/558)
- en: '**[sql]**'
  id: totrans-1237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: result.last_inserted_ids() should return a list that is identically sized to
    the primary key constraint of the table. values that were “passively” created
    and not available via cursor.lastrowid will be None.
  id: totrans-1238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: result.last_inserted_ids()应返回一个与表的主键约束大小相同的列表。通过“被动”创建而不通过cursor.lastrowid可用的值将为None。
- en: '**[sql]**'
  id: totrans-1239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: long-identifier detection fixed to use > rather than >= for max ident length
  id: totrans-1240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了长标识符检测，使用>而不是>=来确定最大标识符长度
- en: 'References: [#589](https://www.sqlalchemy.org/trac/ticket/589)'
  id: totrans-1241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#589](https://www.sqlalchemy.org/trac/ticket/589)
- en: '**[sql]**'
  id: totrans-1242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed bug where selectable.corresponding_column(selectable.c.col) would not
    return selectable.c.col, if the selectable is a join of a table and another join
    involving the same table. messed up ORM decision making
  id: totrans-1243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个错误，即selectable.corresponding_column(selectable.c.col)如果selectable是一个表和另一个涉及相同表的连接的连接，则不会返回selectable.c.col。搞乱了ORM的决策
- en: 'References: [#593](https://www.sqlalchemy.org/trac/ticket/593)'
  id: totrans-1244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#593](https://www.sqlalchemy.org/trac/ticket/593)
- en: '**[sql]**'
  id: totrans-1245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added Interval type to types.py
  id: totrans-1246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在types.py中添加了Interval类型
- en: 'References: [#595](https://www.sqlalchemy.org/trac/ticket/595)'
  id: totrans-1247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#595](https://www.sqlalchemy.org/trac/ticket/595)
- en: mysql
  id: totrans-1248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: fixed catching of some errors that imply a dropped connection
  id: totrans-1250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了捕获一些暗示连接中断的错误
- en: 'References: [#625](https://www.sqlalchemy.org/trac/ticket/625)'
  id: totrans-1251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#625](https://www.sqlalchemy.org/trac/ticket/625)
- en: '**[mysql]**'
  id: totrans-1252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: fixed escaping of the modulo operator
  id: totrans-1253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了百分号运算符的转义
- en: 'References: [#624](https://www.sqlalchemy.org/trac/ticket/624)'
  id: totrans-1254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#624](https://www.sqlalchemy.org/trac/ticket/624)
- en: '**[mysql]**'
  id: totrans-1255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: added ‘fields’ to reserved words
  id: totrans-1256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对“fields”保留字的支持
- en: 'References: [#590](https://www.sqlalchemy.org/trac/ticket/590)'
  id: totrans-1257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#590](https://www.sqlalchemy.org/trac/ticket/590)
- en: '**[mysql]**'
  id: totrans-1258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: various reflection enhancement/fixes
  id: totrans-1259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 各种反射增强/修复
- en: sqlite
  id: totrans-1260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-1261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: rearranged dialect initialization so it has time to warn about pysqlite1 being
    too old.
  id: totrans-1262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新排列了方言初始化，以便有时间警告pysqlite1太旧。
- en: '**[sqlite]**'
  id: totrans-1263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: sqlite better handles datetime/date/time objects mixed and matched with various
    Date/Time/DateTime columns
  id: totrans-1264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite更好地处理混合使用各种Date/Time/DateTime列的日期时间对象
- en: '**[sqlite]**'
  id: totrans-1265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: string PK column inserts don’t get overwritten with OID
  id: totrans-1266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串PK列插入不会被OID覆盖
- en: 'References: [#603](https://www.sqlalchemy.org/trac/ticket/603)'
  id: totrans-1267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#603](https://www.sqlalchemy.org/trac/ticket/603)
- en: mssql
  id: totrans-1268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix port option handling for pyodbc
  id: totrans-1270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了pyodbc的端口选项处理
- en: 'References: [#634](https://www.sqlalchemy.org/trac/ticket/634)'
  id: totrans-1271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#634](https://www.sqlalchemy.org/trac/ticket/634)
- en: '**[mssql]**'
  id: totrans-1272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: now able to reflect start and increment values for identity columns
  id: totrans-1273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在能够反射标识列的起始和增量值
- en: '**[mssql]**'
  id: totrans-1274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: preliminary support for using scope_identity() with pyodbc
  id: totrans-1275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与pyodbc一起使用scope_identity()的初步支持
- en: oracle
  id: totrans-1276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: 'datetime fixes: got subsecond TIMESTAMP to work, added OracleDate which supports
    types.Date with only year/month/day'
  id: totrans-1278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 日期时间修复：使亚秒级TIMESTAMP正常工作，添加支持仅具有年/月/日的types.Date的OracleDate
- en: 'References: [#604](https://www.sqlalchemy.org/trac/ticket/604)'
  id: totrans-1279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#604](https://www.sqlalchemy.org/trac/ticket/604)
- en: '**[oracle]**'
  id: totrans-1280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added dialect flag “auto_convert_lobs”, defaults to True; will cause any LOB
    objects detected in a result set to be forced into OracleBinary so that the LOB
    is read() automatically, if no typemap was present (i.e., if a textual execute()
    was issued).
  id: totrans-1281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加方言标志“auto_convert_lobs”，默认为True；将导致在结果集中检测到的任何LOB对象被强制转换为OracleBinary，以便LOB自动读取，如果没有typemap存在（即，如果发出了文本执行()）。
- en: '**[oracle]**'
  id: totrans-1282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: mod operator ‘%’ produces MOD
  id: totrans-1283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mod运算符‘%’产生MOD
- en: 'References: [#624](https://www.sqlalchemy.org/trac/ticket/624)'
  id: totrans-1284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#624](https://www.sqlalchemy.org/trac/ticket/624)
- en: '**[oracle]**'
  id: totrans-1285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: converts cx_oracle datetime objects to Python datetime.datetime when Python
    2.3 used
  id: totrans-1286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用Python 2.3时，将cx_oracle日期时间对象转换为Python datetime.datetime
- en: 'References: [#542](https://www.sqlalchemy.org/trac/ticket/542)'
  id: totrans-1287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#542](https://www.sqlalchemy.org/trac/ticket/542)
- en: '**[oracle]**'
  id: totrans-1288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: fixed unicode conversion in Oracle TEXT type
  id: totrans-1289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle TEXT类型中的Unicode转换
- en: misc
  id: totrans-1290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[ext]**'
  id: totrans-1291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: iteration over dict association proxies is now dict-like, not InstrumentedList-like
    (e.g. over keys instead of values)
  id: totrans-1292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 遍历字典关联代理现在类似于字典，而不是类似于InstrumentedList（例如，通过键而不是值）
- en: '**[ext]**'
  id: totrans-1293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: association proxies no longer bind tightly to source collections, and are constructed
    with a thunk instead
  id: totrans-1294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关联代理不再紧密绑定到源集合，并且使用thunk构造
- en: 'References: [#597](https://www.sqlalchemy.org/trac/ticket/597)'
  id: totrans-1295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#597](https://www.sqlalchemy.org/trac/ticket/597)
- en: '**[ext]**'
  id: totrans-1296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: added selectone_by() to assignmapper
  id: totrans-1297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了selectone_by()以分配映射器
- en: '**[postgres]**'
  id: totrans-1298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: fixed escaping of the modulo operator
  id: totrans-1299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了百分号运算符的转义
- en: 'References: [#624](https://www.sqlalchemy.org/trac/ticket/624)'
  id: totrans-1300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#624](https://www.sqlalchemy.org/trac/ticket/624)
- en: '**[postgres]**'
  id: totrans-1301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: added support for reflection of domains
  id: totrans-1302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对域反射的支持
- en: 'References: [#570](https://www.sqlalchemy.org/trac/ticket/570)'
  id: totrans-1303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#570](https://www.sqlalchemy.org/trac/ticket/570)
- en: '**[postgres]**'
  id: totrans-1304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: types which are missing during reflection resolve to Null type instead of raising
    an error
  id: totrans-1305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 反射期间缺失的类型解析为Null类型，而不是引发错误
- en: '**[postgres]**'
  id: totrans-1306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: the fix in “schema” above fixes reflection of foreign keys from an alt-schema
    table to a public schema table
  id: totrans-1307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上面“schema”中的修复解决了从alt-schema表反射到public schema表的外键反射
- en: general
  id: totrans-1308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: general
- en: '**[general]**'
  id: totrans-1309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: better error message for NoSuchColumnError
  id: totrans-1310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: NoSuchColumnError的更好错误消息
- en: 'References: [#607](https://www.sqlalchemy.org/trac/ticket/607)'
  id: totrans-1311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#607](https://www.sqlalchemy.org/trac/ticket/607)
- en: '**[general]**'
  id: totrans-1312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: finally figured out how to get setuptools version in, available as sqlalchemy.__version__
  id: totrans-1313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最终找到了如何获取setuptools版本，可作为sqlalchemy.__version__使用
- en: 'References: [#428](https://www.sqlalchemy.org/trac/ticket/428)'
  id: totrans-1314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#428](https://www.sqlalchemy.org/trac/ticket/428)
- en: '**[general]**'
  id: totrans-1315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: the various “engine” arguments, such as “engine”, “connectable”, “engine_or_url”,
    “bind_to”, etc. are all present, but deprecated. they all get replaced by the
    single term “bind”. you also set the “bind” of MetaData using metadata.bind =
    <engine or connection>
  id: totrans-1316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 各种“engine”参数，如“engine”，“connectable”，“engine_or_url”，“bind_to”等都存在，但已弃用。它们都被单个术语“bind”取代。您还可以使用metadata.bind
    = <engine or connection>设置MetaData的“bind”
- en: orm
  id: totrans-1317
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'forwards-compatibility with 0.4: added one(), first(), and all() to Query.
    almost all Query functionality from 0.4 is present in 0.3.9 for forwards-compat
    purposes.'
  id: totrans-1319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与0.4的向前兼容：向Query添加了one()，first()和all()。几乎所有0.4中的Query功能在0.3.9中都存在，以实现向前兼容。
- en: '**[orm]**'
  id: totrans-1320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'reset_joinpoint() really really works this time, promise ! lets you re-join
    from the root: query.join([‘a’, ‘b’]).filter(<crit>).reset_joinpoint().join([‘a’,
    ‘c’]).filter(<some other crit>).all() in 0.4 all join() calls start from the “root”'
  id: totrans-1321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: reset_joinpoint()这次真的有效，承诺！允许您从根重新加入：query.join(['a', 'b']).filter(<crit>).reset_joinpoint().join(['a',
    'c']).filter(<some other crit>).all()在0.4中，所有join()调用都从“root”开始
- en: '**[orm]**'
  id: totrans-1322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added synchronization to the mapper() construction step, to avoid thread collisions
    when pre-existing mappers are compiling in a different thread
  id: totrans-1323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 mapper() 构造步骤中添加了同步，以避免在不同线程中编译预先存在的映射器时发生线程冲突
- en: 'References: [#613](https://www.sqlalchemy.org/trac/ticket/613)'
  id: totrans-1324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#613](https://www.sqlalchemy.org/trac/ticket/613)
- en: '**[orm]**'
  id: totrans-1325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a warning is issued by Mapper when two primary key columns of the same name
    are munged into a single attribute. this happens frequently when mapping to joins
    (or inheritance).
  id: totrans-1326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 Mapper 将两个同名主键列混合成一个属性时，会发出警告。这在映射到连接（或继承）时经常发生。
- en: '**[orm]**'
  id: totrans-1327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: synonym() properties are fully supported by all Query joining/ with_parent operations
  id: totrans-1328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: synonym() 属性完全支持所有 Query 的 joining/with_parent 操作
- en: 'References: [#598](https://www.sqlalchemy.org/trac/ticket/598)'
  id: totrans-1329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#598](https://www.sqlalchemy.org/trac/ticket/598)
- en: '**[orm]**'
  id: totrans-1330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed very stupid bug when deleting items with many-to-many uselist=False relations
  id: totrans-1331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在删除具有 many-to-many uselist=False 关系的项目时的非常愚蠢的错误
- en: '**[orm]**'
  id: totrans-1332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: remember all that stuff about polymorphic_union ? for joined table inheritance
    ? Funny thing… You sort of don’t need it for joined table inheritance, you can
    just string all the tables together via outerjoin(). The UNION still applies if
    concrete tables are involved, though (since nothing to join them on).
  id: totrans-1333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还记得关于 polymorphic_union 的那些东西吗？用于 joined table inheritance？有趣的是… 对于 joined table
    inheritance，你实际上不需要它，你可以通过 outerjoin() 将所有表串在一起。但如果涉及具体表，则 UNION 仍然适用（因为没有东西可以将它们连接起来）。
- en: '**[orm]**'
  id: totrans-1334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: small fix to eager loading to better work with eager loads to polymorphic mappers
    that are using a straight “outerjoin” clause
  id: totrans-1335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对急加载进行了小修复，以更好地与使用直接“outerjoin”子句的多态映射器的急加载配合使用
- en: sql
  id: totrans-1336
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: ForeignKey to a table in a schema that’s not the default schema requires the
    schema to be explicit; i.e. ForeignKey(‘alt_schema.users.id’)
  id: totrans-1338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于不是默认模式的表的 ForeignKey 需要显式指定模式；即 ForeignKey(‘alt_schema.users.id’)
- en: '**[sql]**'
  id: totrans-1339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: MetaData can now be constructed with an engine or url as the first argument,
    just like BoundMetaData
  id: totrans-1340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MetaData 现在可以用引擎或 url 作为第一个参数构建，就像 BoundMetaData 一样
- en: '**[sql]**'
  id: totrans-1341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: BoundMetaData is now deprecated, and MetaData is a direct substitute.
  id: totrans-1342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: BoundMetaData 现在已被弃用，MetaData 是直接替代品。
- en: '**[sql]**'
  id: totrans-1343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: DynamicMetaData has been renamed to ThreadLocalMetaData. the DynamicMetaData
    name is deprecated and is an alias for ThreadLocalMetaData or a regular MetaData
    if threadlocal=False
  id: totrans-1344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DynamicMetaData 已更名为 ThreadLocalMetaData。DynamicMetaData 名称已被弃用，并且是 ThreadLocalMetaData
    或者如果 threadlocal=False 则是常规 MetaData 的别名
- en: '**[sql]**'
  id: totrans-1345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: composite primary key is represented as a non-keyed set to allow for composite
    keys consisting of cols with the same name; occurs within a Join. helps inheritance
    scenarios formulate correct PK.
  id: totrans-1346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 复合主键表示为非键集，以允许由具有相同名称的列组成的复合键；出现在 Join 中。有助于继承场景制定正确的 PK。
- en: '**[sql]**'
  id: totrans-1347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: improved ability to get the “correct” and most minimal set of primary key columns
    from a join, equating foreign keys and otherwise equated columns. this is also
    mostly to help inheritance scenarios formulate the best choice of primary key
    columns.
  id: totrans-1348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了从连接中获取“正确”和最小一组主键列的能力，将外键和其他等效列等同起来。这主要是为了帮助继承场景制定最佳选择的主键列。
- en: 'References: [#185](https://www.sqlalchemy.org/trac/ticket/185)'
  id: totrans-1349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#185](https://www.sqlalchemy.org/trac/ticket/185)
- en: '**[sql]**'
  id: totrans-1350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added ‘bind’ argument to Sequence.create()/drop(), ColumnDefault.execute()
  id: totrans-1351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Sequence.create()/drop()、ColumnDefault.execute() 中添加了 ‘bind’ 参数
- en: '**[sql]**'
  id: totrans-1352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: columns can be overridden in a reflected table with a “key” attribute different
    than the column’s name, including for primary key columns
  id: totrans-1353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用与列名不同的“key”属性在反射表中覆盖列，包括主键列
- en: 'References: [#650](https://www.sqlalchemy.org/trac/ticket/650)'
  id: totrans-1354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#650](https://www.sqlalchemy.org/trac/ticket/650)
- en: '**[sql]**'
  id: totrans-1355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed “ambiguous column” result detection, when dupe col names exist in a result
  id: totrans-1356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了“模糊列”结果检测，当结果中存在重复列名时
- en: 'References: [#657](https://www.sqlalchemy.org/trac/ticket/657)'
  id: totrans-1357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#657](https://www.sqlalchemy.org/trac/ticket/657)
- en: '**[sql]**'
  id: totrans-1358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: some enhancements to “column targeting”, the ability to match a column to a
    “corresponding” column in another selectable. this affects mostly ORM ability
    to map to complex joins
  id: totrans-1359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“列定位”的一些增强，即将一列与另一个可选择的“对应”列匹配的能力。这主要影响 ORM 映射到复杂连接的能力
- en: '**[sql]**'
  id: totrans-1360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: MetaData and all SchemaItems are safe to use with pickle. slow table reflections
    can be dumped into a pickled file to be reused later. Just reconnect the engine
    to the metadata after unpickling.
  id: totrans-1361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MetaData和所有SchemaItems都可以与pickle一起使用。可以将缓慢的表反射转储到pickle文件中以供以后重用。只需在解除pickle后重新连接引擎到元数据。
- en: 'References: [#619](https://www.sqlalchemy.org/trac/ticket/619)'
  id: totrans-1362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#619](https://www.sqlalchemy.org/trac/ticket/619)
- en: '**[sql]**'
  id: totrans-1363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added a mutex to QueuePool’s “overflow” calculation to prevent a race condition
    that can bypass max_overflow
  id: totrans-1364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向QueuePool的“overflow”计算添加了互斥锁，以防止绕过max_overflow的竞争条件。
- en: '**[sql]**'
  id: totrans-1365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed grouping of compound selects to give correct results. will break on sqlite
    in some cases, but those cases were producing incorrect results anyway, sqlite
    doesn’t support grouped compound selects
  id: totrans-1366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了复合选择的分组以提供正确的结果。在某些情况下，这将在sqlite上中断，但是这些情况无论如何都会产生不正确的结果，sqlite不支持分组的复合选择。
- en: 'References: [#623](https://www.sqlalchemy.org/trac/ticket/623)'
  id: totrans-1367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#623](https://www.sqlalchemy.org/trac/ticket/623)
- en: '**[sql]**'
  id: totrans-1368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed precedence of operators so that parenthesis are correctly applied
  id: totrans-1369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了操作符的优先级，以便正确应用括号
- en: 'References: [#620](https://www.sqlalchemy.org/trac/ticket/620)'
  id: totrans-1370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#620](https://www.sqlalchemy.org/trac/ticket/620)
- en: '**[sql]**'
  id: totrans-1371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: calling <column>.in_() (i.e. with no arguments) will return “CASE WHEN (<column>
    IS NULL) THEN NULL ELSE 0 END = 1)”, so that NULL or False is returned in all
    cases, rather than throwing an error
  id: totrans-1372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调用<column>.in_()（即不带参数）将返回“CASE WHEN（<column> IS NULL）THEN NULL ELSE 0 END =
    1”，以便在所有情况下返回NULL或False，而不是抛出错误。
- en: 'References: [#545](https://www.sqlalchemy.org/trac/ticket/545)'
  id: totrans-1373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#545](https://www.sqlalchemy.org/trac/ticket/545)
- en: '**[sql]**'
  id: totrans-1374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed “where”/”from” criterion of select() to accept a unicode string in addition
    to regular string - both convert to text()
  id: totrans-1375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了select()的“where”/“from”条件，以接受unicode字符串以及常规字符串 - 两者都转换为text()。
- en: '**[sql]**'
  id: totrans-1376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added standalone distinct() function in addition to column.distinct()
  id: totrans-1377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了column.distinct()之外，还添加了独立的distinct()函数。
- en: 'References: [#558](https://www.sqlalchemy.org/trac/ticket/558)'
  id: totrans-1378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#558](https://www.sqlalchemy.org/trac/ticket/558)
- en: '**[sql]**'
  id: totrans-1379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: result.last_inserted_ids() should return a list that is identically sized to
    the primary key constraint of the table. values that were “passively” created
    and not available via cursor.lastrowid will be None.
  id: totrans-1380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: result.last_inserted_ids()应返回与表的主键约束大小相同的列表。通过“被动”创建并且不可通过cursor.lastrowid获得的值将为None。
- en: '**[sql]**'
  id: totrans-1381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: long-identifier detection fixed to use > rather than >= for max ident length
  id: totrans-1382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 长标识符检测修复为使用>而不是>=用于最大标识符长度
- en: 'References: [#589](https://www.sqlalchemy.org/trac/ticket/589)'
  id: totrans-1383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#589](https://www.sqlalchemy.org/trac/ticket/589)
- en: '**[sql]**'
  id: totrans-1384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed bug where selectable.corresponding_column(selectable.c.col) would not
    return selectable.c.col, if the selectable is a join of a table and another join
    involving the same table. messed up ORM decision making
  id: totrans-1385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了selectable.corresponding_column(selectable.c.col)不返回selectable.c.col的错误，如果selectable是一个表和涉及相同表的另一个连接的连接。混乱的ORM决策制定
- en: 'References: [#593](https://www.sqlalchemy.org/trac/ticket/593)'
  id: totrans-1386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#593](https://www.sqlalchemy.org/trac/ticket/593)
- en: '**[sql]**'
  id: totrans-1387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added Interval type to types.py
  id: totrans-1388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在types.py中添加了Interval类型
- en: 'References: [#595](https://www.sqlalchemy.org/trac/ticket/595)'
  id: totrans-1389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#595](https://www.sqlalchemy.org/trac/ticket/595)
- en: mysql
  id: totrans-1390
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: fixed catching of some errors that imply a dropped connection
  id: totrans-1392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了捕获一些暗示连接已断开的错误
- en: 'References: [#625](https://www.sqlalchemy.org/trac/ticket/625)'
  id: totrans-1393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#625](https://www.sqlalchemy.org/trac/ticket/625)
- en: '**[mysql]**'
  id: totrans-1394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: fixed escaping of the modulo operator
  id: totrans-1395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了模运算符的转义
- en: 'References: [#624](https://www.sqlalchemy.org/trac/ticket/624)'
  id: totrans-1396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#624](https://www.sqlalchemy.org/trac/ticket/624)
- en: '**[mysql]**'
  id: totrans-1397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: added ‘fields’ to reserved words
  id: totrans-1398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将‘fields’添加到保留字中
- en: 'References: [#590](https://www.sqlalchemy.org/trac/ticket/590)'
  id: totrans-1399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#590](https://www.sqlalchemy.org/trac/ticket/590)
- en: '**[mysql]**'
  id: totrans-1400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: various reflection enhancement/fixes
  id: totrans-1401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 各种反射增强/修复
- en: sqlite
  id: totrans-1402
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-1403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: rearranged dialect initialization so it has time to warn about pysqlite1 being
    too old.
  id: totrans-1404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新排列方言初始化，以便及时警告pysqlite1过旧。
- en: '**[sqlite]**'
  id: totrans-1405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: sqlite better handles datetime/date/time objects mixed and matched with various
    Date/Time/DateTime columns
  id: totrans-1406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite更好地处理混合匹配各种日期/时间/日期时间列的日期时间对象
- en: '**[sqlite]**'
  id: totrans-1407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: string PK column inserts don’t get overwritten with OID
  id: totrans-1408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串PK列插入不会被OID覆盖
- en: 'References: [#603](https://www.sqlalchemy.org/trac/ticket/603)'
  id: totrans-1409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#603](https://www.sqlalchemy.org/trac/ticket/603)
- en: mssql
  id: totrans-1410
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix port option handling for pyodbc
  id: totrans-1412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了pyodbc的端口选项处理
- en: 'References: [#634](https://www.sqlalchemy.org/trac/ticket/634)'
  id: totrans-1413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#634](https://www.sqlalchemy.org/trac/ticket/634)
- en: '**[mssql]**'
  id: totrans-1414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: now able to reflect start and increment values for identity columns
  id: totrans-1415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在能够反射标识列的起始和增量值
- en: '**[mssql]**'
  id: totrans-1416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: preliminary support for using scope_identity() with pyodbc
  id: totrans-1417
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用pyodbc预备支持使用scope_identity()方法
- en: oracle
  id: totrans-1418
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: 'datetime fixes: got subsecond TIMESTAMP to work, added OracleDate which supports
    types.Date with only year/month/day'
  id: totrans-1420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 日期时间修复：使亚秒级别的时间戳工作，添加了支持仅具有年/月/日的types.Date的OracleDate
- en: 'References: [#604](https://www.sqlalchemy.org/trac/ticket/604)'
  id: totrans-1421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#604](https://www.sqlalchemy.org/trac/ticket/604)
- en: '**[oracle]**'
  id: totrans-1422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added dialect flag “auto_convert_lobs”, defaults to True; will cause any LOB
    objects detected in a result set to be forced into OracleBinary so that the LOB
    is read() automatically, if no typemap was present (i.e., if a textual execute()
    was issued).
  id: totrans-1423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了dialect标志“auto_convert_lobs”，默认为True；将导致在结果集中检测到任何LOB对象都被强制转换为OracleBinary，以便LOB自动读取，如果没有typemap存在（即，如果发出了文本执行()）。
- en: '**[oracle]**'
  id: totrans-1424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: mod operator ‘%’ produces MOD
  id: totrans-1425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mod运算符‘%’产生MOD
- en: 'References: [#624](https://www.sqlalchemy.org/trac/ticket/624)'
  id: totrans-1426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#624](https://www.sqlalchemy.org/trac/ticket/624)
- en: '**[oracle]**'
  id: totrans-1427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: converts cx_oracle datetime objects to Python datetime.datetime when Python
    2.3 used
  id: totrans-1428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用Python 2.3时，将cx_oracle datetime对象转换为Python datetime.datetime
- en: 'References: [#542](https://www.sqlalchemy.org/trac/ticket/542)'
  id: totrans-1429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#542](https://www.sqlalchemy.org/trac/ticket/542)
- en: '**[oracle]**'
  id: totrans-1430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: fixed unicode conversion in Oracle TEXT type
  id: totrans-1431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Oracle TEXT类型中的Unicode转换
- en: misc
  id: totrans-1432
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[ext]**'
  id: totrans-1433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: iteration over dict association proxies is now dict-like, not InstrumentedList-like
    (e.g. over keys instead of values)
  id: totrans-1434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在对字典关联代理进行迭代类似于字典，而不是InstrumentedList（例如，通过键而不是值）
- en: '**[ext]**'
  id: totrans-1435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: association proxies no longer bind tightly to source collections, and are constructed
    with a thunk instead
  id: totrans-1436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关联代理不再紧密绑定到源集合，并且使用thunk构造
- en: 'References: [#597](https://www.sqlalchemy.org/trac/ticket/597)'
  id: totrans-1437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#597](https://www.sqlalchemy.org/trac/ticket/597)
- en: '**[ext]**'
  id: totrans-1438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ext]**'
- en: added selectone_by() to assignmapper
  id: totrans-1439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了selectone_by()方法到assignmapper
- en: '**[postgres]**'
  id: totrans-1440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: fixed escaping of the modulo operator
  id: totrans-1441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了百分号运算符的转义
- en: 'References: [#624](https://www.sqlalchemy.org/trac/ticket/624)'
  id: totrans-1442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#624](https://www.sqlalchemy.org/trac/ticket/624)
- en: '**[postgres]**'
  id: totrans-1443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: added support for reflection of domains
  id: totrans-1444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对域的反射支持
- en: 'References: [#570](https://www.sqlalchemy.org/trac/ticket/570)'
  id: totrans-1445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#570](https://www.sqlalchemy.org/trac/ticket/570)
- en: '**[postgres]**'
  id: totrans-1446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: types which are missing during reflection resolve to Null type instead of raising
    an error
  id: totrans-1447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反射期间缺少的类型将解析为Null类型，而不是引发错误
- en: '**[postgres]**'
  id: totrans-1448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: the fix in “schema” above fixes reflection of foreign keys from an alt-schema
    table to a public schema table
  id: totrans-1449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上面“schema”中的修复修复了从alt-schema表反射到public schema表的外键反射
- en: 0.3.8
  id: totrans-1450
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.8
- en: 'Released: Sat Jun 02 2007'
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年6月2日星期六
- en: orm
  id: totrans-1452
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added reset_joinpoint() method to Query, moves the “join point” back to the
    starting mapper. 0.4 will change the behavior of join() to reset the “join point”
    in all cases so this is an interim method. for forwards compatibility, ensure
    joins across multiple relations are specified using a single join(), i.e. join([‘a’,
    ‘b’, ‘c’]).
  id: totrans-1454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Query中添加了reset_joinpoint()方法，将“连接点”移回起始映射器。0.4版本将更改join()方法的行为，以在所有情况下重置“连接点”，因此这是一个临时方法。为了向前兼容，请确保跨多个关系指定的连接使用单个join()方法，即join(['a',
    'b', 'c'])。
- en: '**[orm]**'
  id: totrans-1455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug in query.instances() that wouldn’t handle more than on additional
    mapper or one additional column.
  id: totrans-1456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了query.instances()方法中的一个bug，该bug无法处理多个额外的映射器或一个额外的列。
- en: '**[orm]**'
  id: totrans-1457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”delete-orphan” no longer implies “delete”. ongoing effort to separate the behavior
    of these two operations.
  id: totrans-1458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “delete-orphan”不再意味着“delete”。持续努力分离这两个操作的行为。
- en: '**[orm]**'
  id: totrans-1459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: many-to-many relationships properly set the type of bind params for delete operations
    on the association table
  id: totrans-1460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多对多关系正确设置了关联表上删除操作的绑定参数类型
- en: '**[orm]**'
  id: totrans-1461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: many-to-many relationships check that the number of rows deleted from the association
    table by a delete operation matches the expected results
  id: totrans-1462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多对多关系检查删除操作从关联表中删除的行数是否符合预期结果
- en: '**[orm]**'
  id: totrans-1463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.get() and session.load() propagate **kwargs through to query
  id: totrans-1464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.get()和session.load()方法将**kwargs传播到查询中
- en: '**[orm]**'
  id: totrans-1465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to polymorphic query which allows the original polymorphic_union to be embedded
    into a correlated subquery
  id: totrans-1466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了允许原始多态联合嵌入到相关子查询中的多态查询
- en: 'References: [#577](https://www.sqlalchemy.org/trac/ticket/577)'
  id: totrans-1467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#577](https://www.sqlalchemy.org/trac/ticket/577)
- en: '**[orm]**'
  id: totrans-1468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to select_by(<propname>=<object instance>) -style joins in conjunction with
    many-to-many relationships, bug introduced in r2556
  id: totrans-1469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ��复了在与多对多关系一起使用select_by(<propname>=<object instance>) -style joins的bug，引入于r2556
- en: '**[orm]**'
  id: totrans-1470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “primary_key” argument to mapper() is propagated to the “polymorphic” mapper.
    primary key columns in this list get normalized to that of the mapper’s local
    table.
  id: totrans-1471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper()的“primary_key”参数传播到“polymorphic”映射器。此列表中的主键列被规范化为映射器的本地表的主键。
- en: '**[orm]**'
  id: totrans-1472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: restored logging of “lazy loading clause” under sa.orm.strategies logger, got
    removed in 0.3.7
  id: totrans-1473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了在sa.orm.strategies记录器下记录“延迟加载子句”的日志，在0.3.7中被移除
- en: '**[orm]**'
  id: totrans-1474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: improved support for eagerloading of properties off of mappers that are mapped
    to select() statements; i.e. eagerloader is better at locating the correct selectable
    with which to attach its LEFT OUTER JOIN.
  id: totrans-1475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对映射到select()语句的属性的预加载支持；即eagerloader更善于定位正确的可选择项以附加其LEFT OUTER JOIN。
- en: sql
  id: totrans-1476
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: _Label class overrides compare_self to return its ultimate object. meaning,
    if you say someexpr.label(‘foo’) == 5, it produces the correct “someexpr == 5”.
  id: totrans-1478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _Label类覆盖compare_self以返回其最终对象。意味着，如果你说someexpr.label(‘foo’) == 5，它会产生正确的“someexpr
    == 5”。
- en: '**[sql]**'
  id: totrans-1479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: '_Label propagates “_hide_froms()” so that scalar selects behave more properly
    with regards to FROM clause #574'
  id: totrans-1480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '_Label传播“_hide_froms()”，使标量选择在FROM子句方面表现更正常 #574'
- en: '**[sql]**'
  id: totrans-1481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fix to long name generation when using oid_column as an order by (oids used
    heavily in mapper queries)
  id: totrans-1482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用oid_column作为排序依据时生成过长名称的问题（oids在映射器查询中被大量使用）
- en: '**[sql]**'
  id: totrans-1483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: significant speed improvement to ResultProxy, pre-caches TypeEngine dialect
    implementations and saves on function calls per column
  id: totrans-1484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ResultProxy的显著速度提升，预先缓存TypeEngine方言实现，并节省每列的函数调用
- en: '**[sql]**'
  id: totrans-1485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: parenthesis are applied to clauses via a new _Grouping construct. uses operator
    precedence to more intelligently apply parenthesis to clauses, provides cleaner
    nesting of clauses (doesn’t mutate clauses placed in other clauses, i.e. no ‘parens’
    flag)
  id: totrans-1486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过新的_Grouping构造将括号应用于子句。使用运算符优先级更智能地将括号应用于子句，提供更清晰的子句嵌套（不会改变放置在其他子句中的子句，即没有‘parens’标志）
- en: '**[sql]**'
  id: totrans-1487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added ‘modifier’ keyword, works like func.<foo> except does not add parenthesis.
    e.g. select([modifier.DISTINCT(…)]) etc.
  id: totrans-1488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了‘modifier’关键字，类似于func.<foo>，但不添加括号。例如 select([modifier.DISTINCT(…)]) 等。
- en: '**[sql]**'
  id: totrans-1489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: removed “no group by’s in a select that’s part of a UNION” restriction
  id: totrans-1490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了“在UNION的一部分的select中没有group by”的限制
- en: 'References: [#578](https://www.sqlalchemy.org/trac/ticket/578)'
  id: totrans-1491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#578](https://www.sqlalchemy.org/trac/ticket/578)
- en: mysql
  id: totrans-1492
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Nearly all MySQL column types are now supported for declaration and reflection.
    Added NCHAR, NVARCHAR, VARBINARY, TINYBLOB, LONGBLOB, YEAR
  id: totrans-1494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在几乎支持所有MySQL列类型的声明和反射。添加了NCHAR、NVARCHAR、VARBINARY、TINYBLOB、LONGBLOB、YEAR
- en: '**[mysql]**'
  id: totrans-1495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: The sqltypes.Binary passthrough now always builds a BLOB, avoiding problems
    with very old database versions
  id: totrans-1496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqltypes.Binary透传现在始终构建一个BLOB，避免与非常旧的数据库版本的问题
- en: '**[mysql]**'
  id: totrans-1497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: support for column-level CHARACTER SET and COLLATE declarations, as well as
    ASCII, UNICODE, NATIONAL and BINARY shorthand.
  id: totrans-1498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持列级别的CHARACTER SET和COLLATE声明，以及ASCII、UNICODE、NATIONAL和BINARY简写。
- en: misc
  id: totrans-1499
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[engines]**'
  id: totrans-1500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: added detach() to Connection, allows underlying DBAPI connection to be detached
    from its pool, closing on dereference/close() instead of being reused by the pool.
  id: totrans-1501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了detach()到Connection，允许底层DBAPI连接从其池中分离，在取消引用/关闭()时关闭而不是被池重用。
- en: '**[engines]**'
  id: totrans-1502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: added invalidate() to Connection, immediately invalidates the Connection and
    its underlying DBAPI connection.
  id: totrans-1503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了invalidate()到Connection，立即使Connection及其底层DBAPI连接无效。
- en: '**[firebird]**'
  id: totrans-1504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: set max identifier length to 31
  id: totrans-1505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将最大标识符长度设置为31
- en: '**[firebird]**'
  id: totrans-1506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: 'supports_sane_rowcount() set to False due to ticket #370. versioned_id_col
    feature won’t work in FB.'
  id: totrans-1507
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于票号#370，supports_sane_rowcount()设置为False。versioned_id_col功能在FB中不起作用。
- en: '**[firebird]**'
  id: totrans-1508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: some execution fixes
  id: totrans-1509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些执行修复
- en: '**[firebird]**'
  id: totrans-1510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: new association proxy implementation, implementing complete proxies to list,
    dict and set-based relation collections
  id: totrans-1511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的关联代理实现，实现了完整的代理到基于列表、字典和集合的关系集合
- en: '**[firebird]**'
  id: totrans-1512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: added orderinglist, a custom list class that synchronizes an object attribute
    with that object’s position in the list
  id: totrans-1513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了orderinglist，一个自定义列表类，将对象属性与该对象在列表中的位置同步
- en: '**[firebird]**'
  id: totrans-1514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: small fix to SelectResultsExt to not bypass itself during select().
  id: totrans-1515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对SelectResultsExt进行了小修复，以避免在select()期间绕过自身。
- en: '**[firebird]**'
  id: totrans-1516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: added filter(), filter_by() to assignmapper
  id: totrans-1517
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为assignmapper添加了filter()、filter_by()
- en: orm
  id: totrans-1518
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added reset_joinpoint() method to Query, moves the “join point” back to the
    starting mapper. 0.4 will change the behavior of join() to reset the “join point”
    in all cases so this is an interim method. for forwards compatibility, ensure
    joins across multiple relations are specified using a single join(), i.e. join([‘a’,
    ‘b’, ‘c’]).
  id: totrans-1520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Query添加了reset_joinpoint()方法，将“join point”移回起始映射器。0.4版本将更改join()的行为，以在所有情况下重置“join
    point”。为了向前兼容，请确保跨多个关系指定的连接使用单个join()，即join([‘a’, ‘b’, ‘c’）。
- en: '**[orm]**'
  id: totrans-1521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug in query.instances() that wouldn’t handle more than on additional
    mapper or one additional column.
  id: totrans-1522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了query.instances()中的bug，该bug无法处理多个额外的映射器或一个额外的列。
- en: '**[orm]**'
  id: totrans-1523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”delete-orphan” no longer implies “delete”. ongoing effort to separate the behavior
    of these two operations.
  id: totrans-1524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “delete-orphan”不再意味着“delete”。持续努力分离这两个操作的行为。
- en: '**[orm]**'
  id: totrans-1525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: many-to-many relationships properly set the type of bind params for delete operations
    on the association table
  id: totrans-1526
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多对多关系正确设置了关联表上删除操作的绑定参数类型
- en: '**[orm]**'
  id: totrans-1527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: many-to-many relationships check that the number of rows deleted from the association
    table by a delete operation matches the expected results
  id: totrans-1528
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多对多关系检查删除操作从关联表中删除的行数是否符合预期结果
- en: '**[orm]**'
  id: totrans-1529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.get() and session.load() propagate **kwargs through to query
  id: totrans-1530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.get() 和 session.load() 将 **kwargs 传播到查询
- en: '**[orm]**'
  id: totrans-1531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to polymorphic query which allows the original polymorphic_union to be embedded
    into a correlated subquery
  id: totrans-1532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了允许原始多态查询嵌入到相关子查询中的多态查询的问题
- en: 'References: [#577](https://www.sqlalchemy.org/trac/ticket/577)'
  id: totrans-1533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#577](https://www.sqlalchemy.org/trac/ticket/577)
- en: '**[orm]**'
  id: totrans-1534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to select_by(<propname>=<object instance>) -style joins in conjunction with
    many-to-many relationships, bug introduced in r2556
  id: totrans-1535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了select_by(<propname>=<object instance>)风格的连接与多对多关系一起使用时的bug，该bug在r2556中引入
- en: '**[orm]**'
  id: totrans-1536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “primary_key” argument to mapper() is propagated to the “polymorphic” mapper.
    primary key columns in this list get normalized to that of the mapper’s local
    table.
  id: totrans-1537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper()的“primary_key”参数传播到“polymorphic”映射器。此列表中的主键列将被规范化为映射器的本地表的主键列。
- en: '**[orm]**'
  id: totrans-1538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: restored logging of “lazy loading clause” under sa.orm.strategies logger, got
    removed in 0.3.7
  id: totrans-1539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了在sa.orm.strategies记录器下记录“lazy loading clause”的功能，该功能在0.3.7中被移除
- en: '**[orm]**'
  id: totrans-1540
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: improved support for eagerloading of properties off of mappers that are mapped
    to select() statements; i.e. eagerloader is better at locating the correct selectable
    with which to attach its LEFT OUTER JOIN.
  id: totrans-1541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对映射到select()语句的属性的预加载支持；即eagerloader更善于定位正确的可选择项以附加其LEFT OUTER JOIN。
- en: sql
  id: totrans-1542
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1543
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: _Label class overrides compare_self to return its ultimate object. meaning,
    if you say someexpr.label(‘foo’) == 5, it produces the correct “someexpr == 5”.
  id: totrans-1544
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: _Label类重写compare_self以返回其最终对象。意思是，如果你说someexpr.label(‘foo’) == 5，它会产生正确的“someexpr
    == 5”。
- en: '**[sql]**'
  id: totrans-1545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: '_Label propagates “_hide_froms()” so that scalar selects behave more properly
    with regards to FROM clause #574'
  id: totrans-1546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '_Label传播“_hide_froms()”，使标量选择在FROM子句方面表现更正常 #574'
- en: '**[sql]**'
  id: totrans-1547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fix to long name generation when using oid_column as an order by (oids used
    heavily in mapper queries)
  id: totrans-1548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用oid_column作为排序依据时生成过长名称的问题（oids在映射查询中被大量使用）
- en: '**[sql]**'
  id: totrans-1549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: significant speed improvement to ResultProxy, pre-caches TypeEngine dialect
    implementations and saves on function calls per column
  id: totrans-1550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ResultProxy的显著速度提升，预先缓存TypeEngine方言实现并减少每列的函数调用
- en: '**[sql]**'
  id: totrans-1551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: parenthesis are applied to clauses via a new _Grouping construct. uses operator
    precedence to more intelligently apply parenthesis to clauses, provides cleaner
    nesting of clauses (doesn’t mutate clauses placed in other clauses, i.e. no ‘parens’
    flag)
  id: totrans-1552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过新的_Grouping结构将括号应用于子句。使用运算符优先级更智能地将括号应用于子句，提供更清晰的子句嵌套（不会改变放置在其他子句中的子句，即没有‘parens’标志）
- en: '**[sql]**'
  id: totrans-1553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added ‘modifier’ keyword, works like func.<foo> except does not add parenthesis.
    e.g. select([modifier.DISTINCT(…)]) etc.
  id: totrans-1554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了‘modifier’关键字，类似于func.<foo>，但不会添加括号。例如 select([modifier.DISTINCT(…)]) 等。
- en: '**[sql]**'
  id: totrans-1555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: removed “no group by’s in a select that’s part of a UNION” restriction
  id: totrans-1556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了“在UNION的一部分的select中不允许group by”的限制
- en: 'References: [#578](https://www.sqlalchemy.org/trac/ticket/578)'
  id: totrans-1557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#578](https://www.sqlalchemy.org/trac/ticket/578)
- en: mysql
  id: totrans-1558
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: Nearly all MySQL column types are now supported for declaration and reflection.
    Added NCHAR, NVARCHAR, VARBINARY, TINYBLOB, LONGBLOB, YEAR
  id: totrans-1560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持几乎所有MySQL列类型的声明和反射。添加了NCHAR、NVARCHAR、VARBINARY、TINYBLOB、LONGBLOB、YEAR
- en: '**[mysql]**'
  id: totrans-1561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: The sqltypes.Binary passthrough now always builds a BLOB, avoiding problems
    with very old database versions
  id: totrans-1562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqltypes.Binary透传现在始终构建一个BLOB，避免与非常旧的数据库版本出现问题
- en: '**[mysql]**'
  id: totrans-1563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: support for column-level CHARACTER SET and COLLATE declarations, as well as
    ASCII, UNICODE, NATIONAL and BINARY shorthand.
  id: totrans-1564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持列级别的CHARACTER SET和COLLATE声明，以及ASCII、UNICODE、NATIONAL和BINARY简写。
- en: misc
  id: totrans-1565
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他
- en: '**[engines]**'
  id: totrans-1566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: added detach() to Connection, allows underlying DBAPI connection to be detached
    from its pool, closing on dereference/close() instead of being reused by the pool.
  id: totrans-1567
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Connection中添加了detach()，允许底层的DBAPI连接从其池中分离，在取消引用/关闭时关闭，而不是被池重用。
- en: '**[engines]**'
  id: totrans-1568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: added invalidate() to Connection, immediately invalidates the Connection and
    its underlying DBAPI connection.
  id: totrans-1569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Connection中添加了invalidate()，立即使Connection及其底层的DBAPI连接无效。
- en: '**[firebird]**'
  id: totrans-1570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: set max identifier length to 31
  id: totrans-1571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将最大标识符长度设置为31
- en: '**[firebird]**'
  id: totrans-1572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: 'supports_sane_rowcount() set to False due to ticket #370. versioned_id_col
    feature won’t work in FB.'
  id: totrans-1573
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于问题#370，supports_sane_rowcount()设置为False。versioned_id_col功能在FB中不起作用。
- en: '**[firebird]**'
  id: totrans-1574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: some execution fixes
  id: totrans-1575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些执行修复
- en: '**[firebird]**'
  id: totrans-1576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: new association proxy implementation, implementing complete proxies to list,
    dict and set-based relation collections
  id: totrans-1577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的关联代理实现，实现对基于列表、字典和集合的关系集合的完全代理
- en: '**[firebird]**'
  id: totrans-1578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: added orderinglist, a custom list class that synchronizes an object attribute
    with that object’s position in the list
  id: totrans-1579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加orderinglist，一个自定义列表类，将对象属性与列表中对象的位置同步
- en: '**[firebird]**'
  id: totrans-1580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: small fix to SelectResultsExt to not bypass itself during select().
  id: totrans-1581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对SelectResultsExt进行了小修复，以避免在select()期间绕过自身。
- en: '**[firebird]**'
  id: totrans-1582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: added filter(), filter_by() to assignmapper
  id: totrans-1583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将filter()、filter_by()添加到assignmapper
- en: 0.3.7
  id: totrans-1584
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.7
- en: 'Released: Sun Apr 29 2007'
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2007年4月29日星期日
- en: orm
  id: totrans-1586
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed critical issue when, after options(eagerload()) is used, the mapper would
    then always apply query “wrapping” behavior for all subsequent LIMIT/OFFSET/DISTINCT
    queries, even if no eager loading was applied on those subsequent queries.
  id: totrans-1588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个严重问题，即在使用options(eagerload())后，映射器将始终对所有后续的LIMIT/OFFSET/DISTINCT查询应用“包装”行为，即使在这些后续查询中没有应用急加载。
- en: '**[orm]**'
  id: totrans-1589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added query.with_parent(someinstance) method. searches for target instance using
    lazy join criterion from parent instance. takes optional string “property” to
    isolate the desired relation. also adds static Query.query_from_parent(instance,
    property) version.
  id: totrans-1590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了query.with_parent(someinstance)方法。使用父实例的延迟连接条件搜索目标实例。接受可选字符串“property”以隔离所需的关系。还添加了静态Query.query_from_parent(instance,
    property)版本。
- en: 'References: [#541](https://www.sqlalchemy.org/trac/ticket/541)'
  id: totrans-1591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#541](https://www.sqlalchemy.org/trac/ticket/541)
- en: '**[orm]**'
  id: totrans-1592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: improved query.XXX_by(someprop=someinstance) querying to use similar methodology
    to with_parent, i.e. using the “lazy” clause which prevents adding the remote
    instance’s table to the SQL, thereby making more complex conditions possible
  id: totrans-1593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了query.XXX_by(someprop=someinstance)查询，使用类似于with_parent的方法，即使用“lazy”子句，防止将远程实例的表添加到SQL中，从而使更复杂的条件成为可能
- en: 'References: [#554](https://www.sqlalchemy.org/trac/ticket/554)'
  id: totrans-1594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#554](https://www.sqlalchemy.org/trac/ticket/554)
- en: '**[orm]**'
  id: totrans-1595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'added generative versions of aggregates, i.e. sum(), avg(), etc. to query.
    used via query.apply_max(), apply_sum(), etc. #552'
  id: totrans-1596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向查询添加了聚合函数的生成版本，例如sum()、avg()等。通过query.apply_max()、apply_sum()等使用。#552
- en: '**[orm]**'
  id: totrans-1597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to using distinct() or distinct=True in combination with join() and similar
  id: totrans-1598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复使用distinct()或distinct=True与join()和类似操作结合时的问题
- en: '**[orm]**'
  id: totrans-1599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: corresponding to label/bindparam name generation, eager loaders generate deterministic
    names for the aliases they create using md5 hashes.
  id: totrans-1600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与标签/bindparam名称生成相对应，急加载器使用md5哈希为它们创建的别名生成确定性名称。
- en: '**[orm]**'
  id: totrans-1601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: improved/fixed custom collection classes when giving it “set”/ “sets.Set” classes
    or subclasses (was still looking for append() methods on them during lazy loads)
  id: totrans-1602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在给定“set”/“sets.Set”类或子类时，改进/修复了自定义集合类（在惰性加载期间仍在寻找append()方法）
- en: '**[orm]**'
  id: totrans-1603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: restored old “column_property()” ORM function (used to be called “column()”)
    to force any column expression to be added as a property on a mapper, particularly
    those that aren’t present in the mapped selectable. this allows “scalar expressions”
    of any kind to be added as relations (though they have issues with eager loads).
  id: totrans-1604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了旧的“column_property()” ORM 函数（以前称为“column()”），以强制将任何列表达式添加为映射器的属性，特别是那些不在映射选择中的列。这允许将任何类型的“标量表达式”添加为关系（尽管它们在急加载方面存在问题）。
- en: '**[orm]**'
  id: totrans-1605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to many-to-many relationships targeting polymorphic mappers
  id: totrans-1606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了针对多对多关系定位多态映射器的问题。
- en: 'References: [#533](https://www.sqlalchemy.org/trac/ticket/533)'
  id: totrans-1607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#533](https://www.sqlalchemy.org/trac/ticket/533)
- en: '**[orm]**'
  id: totrans-1608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: making progress with session.merge() as well as combining its usage with entity_name
  id: totrans-1609
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 session.merge() 和结合其使用与 entity_name 方面取得了进展
- en: 'References: [#543](https://www.sqlalchemy.org/trac/ticket/543)'
  id: totrans-1610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#543](https://www.sqlalchemy.org/trac/ticket/543)
- en: '**[orm]**'
  id: totrans-1611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the usual adjustments to relationships between inheriting mappers, in this case
    establishing relation()s to subclass mappers where the join conditions come from
    the superclass’ table
  id: totrans-1612
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在继承映射器之间的关系中进行了通常的调整，在这种情况下，建立了到子类映射器的 relation()，其中连接条件来自超类的表
- en: sql
  id: totrans-1613
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: keys() of result set columns are not lowercased, come back exactly as they’re
    expressed in cursor.description. note this causes colnames to be all caps in oracle.
  id: totrans-1615
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果集列的 keys() 不会小写化，会与 cursor.description 中的表达方式完全一致。请注意，这会导致 Oracle 中的列名全大写。
- en: '**[sql]**'
  id: totrans-1616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: preliminary support for unicode table names, column names and SQL statements
    added, for databases which can support them. Works with sqlite and postgres so
    far. MySQL *mostly* works except the has_table() function does not work. Reflection
    works too.
  id: totrans-1617
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为支持 Unicode 表名、列名和 SQL 语句添加了初步支持，适用于可以支持它们的数据库。到目前为止，与 sqlite 和 postgres 一起工作。MySQL
    *大部分* 可以工作，除了 has_table() 函数无法工作。反射也可以工作。
- en: '**[sql]**'
  id: totrans-1618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the Unicode type is now a direct subclass of String, which now contains all
    the “convert_unicode” logic. This helps the variety of unicode situations that
    occur in db’s such as MS-SQL to be better handled and allows subclassing of the
    Unicode datatype.
  id: totrans-1619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Unicode 类型现在是 String 的直接子类，其中包含所有“convert_unicode”逻辑。这有助于更好地处理在数据库中出现的各种 Unicode
    情况，如 MS-SQL，并允许对 Unicode 数据类型进行子类化。
- en: 'References: [#522](https://www.sqlalchemy.org/trac/ticket/522)'
  id: totrans-1620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#522](https://www.sqlalchemy.org/trac/ticket/522)
- en: '**[sql]**'
  id: totrans-1621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: 'ClauseElements can be used in in_() clauses now, such as bind parameters, etc.
    #476'
  id: totrans-1622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在 in_() 子句中使用 ClauseElements，如绑定参数等。＃476
- en: '**[sql]**'
  id: totrans-1623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: 'reverse operators implemented for CompareMixin elements, allows expressions
    like “5 + somecolumn” etc. #474'
  id: totrans-1624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 CompareMixin 元素实现了反向操作符，允许表达式如“5 + somecolumn”等。＃474
- en: '**[sql]**'
  id: totrans-1625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “where” criterion of an update() and delete() now correlates embedded select()
    statements against the table being updated or deleted. this works the same as
    nested select() statement correlation, and can be disabled via the correlate=False
    flag on the embedded select().
  id: totrans-1626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: update() 和 delete() 的“where”条件现在将嵌入式 select() 语句与正在更新或删除的表进行关联。这与嵌套 select()
    语句关联的方式相同，并且可以通过嵌入式 select() 上的 correlate=False 标志禁用。
- en: '**[sql]**'
  id: totrans-1627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: column labels are now generated in the compilation phase, which means their
    lengths are dialect-dependent. So on oracle a label that gets truncated to 30
    chars will go out to 63 characters on postgres. Also, the true labelname is always
    attached as the accessor on the parent Selectable so there’s no need to be aware
    of the “truncated” label names.
  id: totrans-1628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在在编译阶段生成列标签，这意味着它们的长度取决于方言。因此，在 Oracle 上，被截断为 30 个字符的标签将在 postgres 上扩展到 63
    个字符。此外，真实的标签名称始终作为父可选择的访问器附加，因此无需关注“截断”的标签名称。
- en: 'References: [#512](https://www.sqlalchemy.org/trac/ticket/512)'
  id: totrans-1629
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#512](https://www.sqlalchemy.org/trac/ticket/512)
- en: '**[sql]**'
  id: totrans-1630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: column label and bind param “truncation” also generate deterministic names now,
    based on their ordering within the full statement being compiled. this means the
    same statement will produce the same string across application restarts and allowing
    DB query plan caching to work better.
  id: totrans-1631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在列标签和绑定参数“截断”也生成确定性名称，基于它们在编译的完整语句中的顺序。这意味着相同的语句将在应用程序重新启动时产生相同的字符串，并且允许 DB
    查询计划缓存更好地工作。
- en: '**[sql]**'
  id: totrans-1632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “mini” column labels generated when using subqueries, which are to work
    around glitchy SQLite behavior that doesn’t understand “foo.id” as equivalent
    to “id”, are now only generated in the case that those named columns are selected
    from (part of)
  id: totrans-1633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用子查询时生成的“mini”列标签，用于解决SQLite行为不良的问题，不理解“foo.id”等同于“id”，现在仅在从中选择这些命名列的情况下生成
- en: 'References: [#513](https://www.sqlalchemy.org/trac/ticket/513)'
  id: totrans-1634
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#513](https://www.sqlalchemy.org/trac/ticket/513)
- en: '**[sql]**'
  id: totrans-1635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the label() method on ColumnElement will properly propagate the TypeEngine of
    the base element out to the label, including a label() created from a scalar=True
    select() statement.
  id: totrans-1636
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ColumnElement上的label()方法将正确地将基本元素的TypeEngine传播到标签，包括从scalar=True select()语句创建的label()。
- en: '**[sql]**'
  id: totrans-1637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: MS-SQL better detects when a query is a subquery and knows not to generate ORDER
    BY phrases for those
  id: totrans-1638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MS-SQL更好地检测查询是否为子查询，并知道不为其生成ORDER BY短语
- en: 'References: [#513](https://www.sqlalchemy.org/trac/ticket/513)'
  id: totrans-1639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#513](https://www.sqlalchemy.org/trac/ticket/513)
- en: '**[sql]**'
  id: totrans-1640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fix for fetchmany() “size” argument being positional in most dbapis
  id: totrans-1641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了fetchmany()“size”参数在大多数dbapis中是位置参数的问题
- en: 'References: [#505](https://www.sqlalchemy.org/trac/ticket/505)'
  id: totrans-1642
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#505](https://www.sqlalchemy.org/trac/ticket/505)
- en: '**[sql]**'
  id: totrans-1643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: sending None as an argument to func.<something> will produce an argument of
    NULL
  id: totrans-1644
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将None作为参数发送给func.<something>将产生一个NULL参数
- en: '**[sql]**'
  id: totrans-1645
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: query strings in unicode URLs get keys encoded to ascii for **kwargs compat
  id: totrans-1646
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Unicode URL中的查询字符串的键被编码为ascii以进行**kwargs兼容
- en: '**[sql]**'
  id: totrans-1647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: slight tweak to raw execute() change to also support tuples for positional parameters,
    not just lists
  id: totrans-1648
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对原始execute()更改进行微调，以支持位置参数的元组，而不仅仅是列表
- en: 'References: [#523](https://www.sqlalchemy.org/trac/ticket/523)'
  id: totrans-1649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#523](https://www.sqlalchemy.org/trac/ticket/523)
- en: '**[sql]**'
  id: totrans-1650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fix to case() construct to propagate the type of the first WHEN condition as
    the return type of the case statement
  id: totrans-1651
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了case()构造，以将第一个WHEN条件的类型传播为case语句的返回类型
- en: extensions
  id: totrans-1652
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: extensions
- en: '**[extensions]**'
  id: totrans-1653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: big fix to AssociationProxy so that multiple AssociationProxy objects can be
    associated with a single association collection.
  id: totrans-1654
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了AssociationProxy，使得多个AssociationProxy对象可以与单个关联集合关联。
- en: '**[extensions]**'
  id: totrans-1655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: 'assign_mapper names methods according to their keys (i.e. __name__) #551'
  id: totrans-1656
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '根据它们的键（即__name__）为assign_mapper命名方法 #551'
- en: mysql
  id: totrans-1657
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: support for SSL arguments given as inline within URL query string, prefixed
    with “ssl_”, courtesy [terjeros@gmail.com](mailto:terjeros%40gmail.com).
  id: totrans-1659
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持作为URL查询字符串内联给出的SSL参数，以“ssl_”为前缀，感谢[terjeros@gmail.com](mailto:terjeros%40gmail.com)。
- en: '**[mysql] [<schemaname>]**'
  id: totrans-1660
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [<schemaname>]**'
- en: mysql uses “DESCRIBE.<tablename>”, catching exceptions if table doesn’t exist,
    in order to determine if a table exists. this supports unicode table names as
    well as schema names. tested with MySQL5 but should work with 4.1 series as well.
    (#557)
  id: totrans-1661
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql使用“DESCRIBE.<tablename>”来确定表是否存在，如果表不存在则捕获异常，这支持unicode表名以及模式名。已在MySQL5上测试，但应该也适用于4.1系列。（#557）
- en: sqlite
  id: totrans-1662
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-1663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: removed silly behavior where sqlite would reflect UNIQUE indexes as part of
    the primary key (?!)
  id: totrans-1664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了sqlite将唯一索引反映为主键的愚蠢行为（？！）
- en: mssql
  id: totrans-1665
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: pyodbc is now the preferred DB-API for MSSQL, and if no module is specifically
    requested, will be loaded first on a module probe.
  id: totrans-1667
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pyodbc现在是MSSQL的首选DB-API，如果没有明确请求模块，将在模块探测时首先加载。
- en: '**[mssql]**'
  id: totrans-1668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: The @@SCOPE_IDENTITY is now used instead of @@IDENTITY. This behavior may be
    overridden with the engine_connect “use_scope_identity” keyword parameter, which
    may also be specified in the dburi.
  id: totrans-1669
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在使用@@SCOPE_IDENTITY而不是@@IDENTITY。此行为可以通过engine_connect“use_scope_identity”关键字参数覆盖，也可以在dburi中指定。
- en: oracle
  id: totrans-1670
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: small fix to allow successive compiles of the same SELECT object which features
    LIMIT/OFFSET. oracle dialect needs to modify the object to have ROW_NUMBER OVER
    and wasn’t performing the full series of steps on successive compiles.
  id: totrans-1672
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复允许对具有LIMIT/OFFSET的相同SELECT对象进行连续编译的小问题。oracle方言需要修改对象以具有ROW_NUMBER OVER，并且在连续编译时未执行完整的步骤。
- en: misc
  id: totrans-1673
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[engines]**'
  id: totrans-1674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: warnings module used for issuing warnings (instead of logging)
  id: totrans-1675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于发出警告的警告模块（而不��日志记录）
- en: '**[engines]**'
  id: totrans-1676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: cleanup of DBAPI import strategies across all engines
  id: totrans-1677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 清理所有引擎上的DBAPI导入策略
- en: 'References: [#480](https://www.sqlalchemy.org/trac/ticket/480)'
  id: totrans-1678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#480](https://www.sqlalchemy.org/trac/ticket/480)
- en: '**[engines]**'
  id: totrans-1679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: refactoring of engine internals which reduces complexity, number of codepaths;
    places more state inside of ExecutionContext to allow more dialect control of
    cursor handling, result sets. ResultProxy totally refactored and also has two
    versions of “buffered” result sets used for different purposes.
  id: totrans-1680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了引擎内部，减少了复杂性，代码路径数量；将更多状态放在ExecutionContext内部，以允许更多方言控制游标处理，结果集。 ResultProxy完全重构，还有两个用于不同目的的“缓冲”结果集版本。
- en: '**[engines]**'
  id: totrans-1681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: server side cursor support fully functional in postgres.
  id: totrans-1682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgres中的服务器端游标支持完全可用。
- en: 'References: [#514](https://www.sqlalchemy.org/trac/ticket/514)'
  id: totrans-1683
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#514](https://www.sqlalchemy.org/trac/ticket/514)
- en: '**[engines]**'
  id: totrans-1684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: 'improved framework for auto-invalidation of connections that have lost their
    underlying database, via dialect-specific detection of exceptions corresponding
    to that database’s disconnect related error messages. Additionally, when a “connection
    no longer open” condition is detected, the entire connection pool is discarded
    and replaced with a new instance. #516'
  id: totrans-1685
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了自动失效连接的框架，当检测到与该数据库的断开相关的异常时，通过特定于方言的异常检测，整个连接池被丢弃并替换为新实例。#516
- en: '**[engines]**'
  id: totrans-1686
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: the dialects within sqlalchemy.databases become a setuptools entry points. loading
    the built-in database dialects works the same as always, but if none found will
    fall back to trying pkg_resources to load an external module
  id: totrans-1687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.databases中的方言成为setuptools入口点。加载内置数据库方言的方式与以往相同，但如果找不到任何方言，将尝试使用pkg_resources加载外部模块。
- en: 'References: [#521](https://www.sqlalchemy.org/trac/ticket/521)'
  id: totrans-1688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#521](https://www.sqlalchemy.org/trac/ticket/521)
- en: '**[engines]**'
  id: totrans-1689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: Engine contains a “url” attribute referencing the url.URL object used by create_engine().
  id: totrans-1690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Engine包含一个“url”属性，引用create_engine()使用的url.URL对象。
- en: '**[informix]**'
  id: totrans-1691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[informix]**'
- en: informix support added ! courtesy James Zhang, who put a ton of effort in.
  id: totrans-1692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了informix支持！感谢James Zhang付出了大量努力。
- en: orm
  id: totrans-1693
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed critical issue when, after options(eagerload()) is used, the mapper would
    then always apply query “wrapping” behavior for all subsequent LIMIT/OFFSET/DISTINCT
    queries, even if no eager loading was applied on those subsequent queries.
  id: totrans-1695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关键问题，即在使用options(eagerload())后，映射器将始终对所有后续LIMIT/OFFSET/DISTINCT查询应用查询“包装”行为，即使在这些后续查询中没有应用急加载。
- en: '**[orm]**'
  id: totrans-1696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added query.with_parent(someinstance) method. searches for target instance using
    lazy join criterion from parent instance. takes optional string “property” to
    isolate the desired relation. also adds static Query.query_from_parent(instance,
    property) version.
  id: totrans-1697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了query.with_parent(someinstance)方法。使用父实例的延迟连接条件搜索目标实例。接受可选字符串“property”以隔离所需的关系。还添加了静态Query.query_from_parent(instance,
    property)版本。
- en: 'References: [#541](https://www.sqlalchemy.org/trac/ticket/541)'
  id: totrans-1698
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#541](https://www.sqlalchemy.org/trac/ticket/541)
- en: '**[orm]**'
  id: totrans-1699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: improved query.XXX_by(someprop=someinstance) querying to use similar methodology
    to with_parent, i.e. using the “lazy” clause which prevents adding the remote
    instance’s table to the SQL, thereby making more complex conditions possible
  id: totrans-1700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了query.XXX_by(someprop=someinstance)查询，使用与with_parent类似的方法，即使用“lazy”子句防止将远程实例的表添加到SQL中，从而使更复杂的条件成为可能
- en: 'References: [#554](https://www.sqlalchemy.org/trac/ticket/554)'
  id: totrans-1701
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#554](https://www.sqlalchemy.org/trac/ticket/554)
- en: '**[orm]**'
  id: totrans-1702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'added generative versions of aggregates, i.e. sum(), avg(), etc. to query.
    used via query.apply_max(), apply_sum(), etc. #552'
  id: totrans-1703
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在查询中添加了聚合函数的生成版本，例如sum()，avg()等。通过query.apply_max()，apply_sum()等使用。#552
- en: '**[orm]**'
  id: totrans-1704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to using distinct() or distinct=True in combination with join() and similar
  id: totrans-1705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在join()和类似情况下使用distinct()或distinct=True时的问题
- en: '**[orm]**'
  id: totrans-1706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: corresponding to label/bindparam name generation, eager loaders generate deterministic
    names for the aliases they create using md5 hashes.
  id: totrans-1707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于标签/bindparam名称生成，急加载器使用md5哈希为它们创建的别名生成确定性名称。
- en: '**[orm]**'
  id: totrans-1708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: improved/fixed custom collection classes when giving it “set”/ “sets.Set” classes
    or subclasses (was still looking for append() methods on them during lazy loads)
  id: totrans-1709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进/修复了自定义集合类在给定“set”/“sets.Set”类或子类时（在惰性加载期间仍在寻找append()方法）
- en: '**[orm]**'
  id: totrans-1710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: restored old “column_property()” ORM function (used to be called “column()”)
    to force any column expression to be added as a property on a mapper, particularly
    those that aren’t present in the mapped selectable. this allows “scalar expressions”
    of any kind to be added as relations (though they have issues with eager loads).
  id: totrans-1711
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恢复了旧的“column_property()”ORM函数（以前称为“column()”），以强制将任何列表达式添加为映射器的属性，特别是那些在映射的可选择性中不存在的表达式。这允许将任何类型的“标量表达式”添加为关系（尽管它们存在与急加载的问题）。
- en: '**[orm]**'
  id: totrans-1712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to many-to-many relationships targeting polymorphic mappers
  id: totrans-1713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多对多关系定位到多态映射器的问题
- en: 'References: [#533](https://www.sqlalchemy.org/trac/ticket/533)'
  id: totrans-1714
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#533](https://www.sqlalchemy.org/trac/ticket/533)
- en: '**[orm]**'
  id: totrans-1715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: making progress with session.merge() as well as combining its usage with entity_name
  id: totrans-1716
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 session.merge() 上取得进展以及将其使用与 entity_name 结合起来
- en: 'References: [#543](https://www.sqlalchemy.org/trac/ticket/543)'
  id: totrans-1717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#543](https://www.sqlalchemy.org/trac/ticket/543)
- en: '**[orm]**'
  id: totrans-1718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the usual adjustments to relationships between inheriting mappers, in this case
    establishing relation()s to subclass mappers where the join conditions come from
    the superclass’ table
  id: totrans-1719
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，通常需要调整继承映射器之间的关系，从父类表建立到子类映射器的关系
- en: sql
  id: totrans-1720
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: keys() of result set columns are not lowercased, come back exactly as they’re
    expressed in cursor.description. note this causes colnames to be all caps in oracle.
  id: totrans-1722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果集列的 keys() 不会小写化，会与游标描述中的表达完全相同返回。注意这会导致在 Oracle 中 colnames 全部大写。
- en: '**[sql]**'
  id: totrans-1723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: preliminary support for unicode table names, column names and SQL statements
    added, for databases which can support them. Works with sqlite and postgres so
    far. MySQL *mostly* works except the has_table() function does not work. Reflection
    works too.
  id: totrans-1724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 针对可以支持它们的数据库，添加了对 Unicode 表名、列名和 SQL 语句的初步支持。到目前为止，只支持 SQLite 和 postgres。MySQL
    *基本上*可以工作，除了 has_table() 函数无法工作。反射也能工作。
- en: '**[sql]**'
  id: totrans-1725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the Unicode type is now a direct subclass of String, which now contains all
    the “convert_unicode” logic. This helps the variety of unicode situations that
    occur in db’s such as MS-SQL to be better handled and allows subclassing of the
    Unicode datatype.
  id: totrans-1726
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Unicode 类型现在是 String 的直接子类，现在包含所有“convert_unicode”逻辑。这有助于更好地处理各种数据库中出现的 Unicode
    情况，例如 MS-SQL，并允许 Unicode 数据类型的子类化。
- en: 'References: [#522](https://www.sqlalchemy.org/trac/ticket/522)'
  id: totrans-1727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#522](https://www.sqlalchemy.org/trac/ticket/522)
- en: '**[sql]**'
  id: totrans-1728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: 'ClauseElements can be used in in_() clauses now, such as bind parameters, etc.
    #476'
  id: totrans-1729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ClauseElements 现在可以在 in_() 子句中使用，例如绑定参数等。＃476
- en: '**[sql]**'
  id: totrans-1730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: 'reverse operators implemented for CompareMixin elements, allows expressions
    like “5 + somecolumn” etc. #474'
  id: totrans-1731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 CompareMixin 元素实现了反向操作符，允许表达式如“5 + somecolumn”等。＃474
- en: '**[sql]**'
  id: totrans-1732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “where” criterion of an update() and delete() now correlates embedded select()
    statements against the table being updated or deleted. this works the same as
    nested select() statement correlation, and can be disabled via the correlate=False
    flag on the embedded select().
  id: totrans-1733
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: update() 和 delete() 的“where”条件现在会将嵌入的 select() 语句与正在更新或删除的表进行关联。这与嵌套的 select()
    语句关联方式相同，并且可以通过嵌入式 select() 上的 correlate=False 标志进行禁用。
- en: '**[sql]**'
  id: totrans-1734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: column labels are now generated in the compilation phase, which means their
    lengths are dialect-dependent. So on oracle a label that gets truncated to 30
    chars will go out to 63 characters on postgres. Also, the true labelname is always
    attached as the accessor on the parent Selectable so there’s no need to be aware
    of the “truncated” label names.
  id: totrans-1735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在列标签在编译阶段生成，这意味着它们的长度是方言相关的。因此，在 Oracle 上被截断为 30 个字符的标签在 postgres 上将扩展到 63
    个字符。此外，真实的标签名称始终作为父可选择性的访问器附加，因此不需要注意“截断”的标签名称。
- en: 'References: [#512](https://www.sqlalchemy.org/trac/ticket/512)'
  id: totrans-1736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用：[#512](https://www.sqlalchemy.org/trac/ticket/512)
- en: '**[sql]**'
  id: totrans-1737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: column label and bind param “truncation” also generate deterministic names now,
    based on their ordering within the full statement being compiled. this means the
    same statement will produce the same string across application restarts and allowing
    DB query plan caching to work better.
  id: totrans-1738
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 列标签和绑定参数“截断”现在也会基于它们在编译的完整语句中的顺序生成确定性名称。这意味着相同的语句在应用程序重新启动时会产生相同的字符串，并且允许DB查询计划缓存工作得更好。
- en: '**[sql]**'
  id: totrans-1739
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “mini” column labels generated when using subqueries, which are to work
    around glitchy SQLite behavior that doesn’t understand “foo.id” as equivalent
    to “id”, are now only generated in the case that those named columns are selected
    from (part of)
  id: totrans-1740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用子查询时生成的“mini”列标签，用于解决SQLite的问题，它不理解“foo.id”等同于“id”，现在仅在从中选择这些命名列的情况下生成
- en: 'References: [#513](https://www.sqlalchemy.org/trac/ticket/513)'
  id: totrans-1741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#513](https://www.sqlalchemy.org/trac/ticket/513)
- en: '**[sql]**'
  id: totrans-1742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the label() method on ColumnElement will properly propagate the TypeEngine of
    the base element out to the label, including a label() created from a scalar=True
    select() statement.
  id: totrans-1743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ColumnElement上的label()方法将正确地将基本元素的TypeEngine传播到标签，包括从scalar=True select()语句创建的标签。
- en: '**[sql]**'
  id: totrans-1744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: MS-SQL better detects when a query is a subquery and knows not to generate ORDER
    BY phrases for those
  id: totrans-1745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MS-SQL更好地检测查询是否为子查询，并知道不为其生成ORDER BY短语
- en: 'References: [#513](https://www.sqlalchemy.org/trac/ticket/513)'
  id: totrans-1746
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#513](https://www.sqlalchemy.org/trac/ticket/513)
- en: '**[sql]**'
  id: totrans-1747
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fix for fetchmany() “size” argument being positional in most dbapis
  id: totrans-1748
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了fetchmany()中“size”参数在大多数dbapis中是位置参数的问题
- en: 'References: [#505](https://www.sqlalchemy.org/trac/ticket/505)'
  id: totrans-1749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#505](https://www.sqlalchemy.org/trac/ticket/505)
- en: '**[sql]**'
  id: totrans-1750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: sending None as an argument to func.<something> will produce an argument of
    NULL
  id: totrans-1751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将None作为参数发送给func.<something>将产生一个NULL参数
- en: '**[sql]**'
  id: totrans-1752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: query strings in unicode URLs get keys encoded to ascii for **kwargs compat
  id: totrans-1753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在unicode URL中的查询字符串将键编码为ascii以进行**kwargs兼容。
- en: '**[sql]**'
  id: totrans-1754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: slight tweak to raw execute() change to also support tuples for positional parameters,
    not just lists
  id: totrans-1755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对原始execute()更改进行了轻微调整，以支持元组作为位置参数，而不仅仅是列表
- en: 'References: [#523](https://www.sqlalchemy.org/trac/ticket/523)'
  id: totrans-1756
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#523](https://www.sqlalchemy.org/trac/ticket/523)
- en: '**[sql]**'
  id: totrans-1757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fix to case() construct to propagate the type of the first WHEN condition as
    the return type of the case statement
  id: totrans-1758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了case()构造以将第一个WHEN条件的类型传播为case语句的返回类型
- en: extensions
  id: totrans-1759
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions]**'
  id: totrans-1760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: big fix to AssociationProxy so that multiple AssociationProxy objects can be
    associated with a single association collection.
  id: totrans-1761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对AssociationProxy进行了重大修复，使得多个AssociationProxy对象可以与单个关联集合关联。
- en: '**[extensions]**'
  id: totrans-1762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: 'assign_mapper names methods according to their keys (i.e. __name__) #551'
  id: totrans-1763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '根据它们的键（即__name__）为assign_mapper命名方法 #551'
- en: mysql
  id: totrans-1764
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1765
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: support for SSL arguments given as inline within URL query string, prefixed
    with “ssl_”, courtesy [terjeros@gmail.com](mailto:terjeros%40gmail.com).
  id: totrans-1766
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 支持作为URL查询字符串内联给出的SSL参数，以“ssl_”为前缀，感谢[terjeros@gmail.com](mailto:terjeros%40gmail.com)。
- en: '**[mysql] [<schemaname>]**'
  id: totrans-1767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql] [<schemaname>]**'
- en: mysql uses “DESCRIBE.<tablename>”, catching exceptions if table doesn’t exist,
    in order to determine if a table exists. this supports unicode table names as
    well as schema names. tested with MySQL5 but should work with 4.1 series as well.
    (#557)
  id: totrans-1768
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql使用“DESCRIBE.<tablename>”来确定表是否存在，如果表不存在则捕获异常，以支持unicode表名以及模式名。已在MySQL5上测试，但也应该适用于4.1系列。(#557)
- en: sqlite
  id: totrans-1769
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-1770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: removed silly behavior where sqlite would reflect UNIQUE indexes as part of
    the primary key (?!)
  id: totrans-1771
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了silly行为，其中sqlite将唯一索引作为主键的一部分反映出来（？！）
- en: mssql
  id: totrans-1772
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-1773
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: pyodbc is now the preferred DB-API for MSSQL, and if no module is specifically
    requested, will be loaded first on a module probe.
  id: totrans-1774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: pyodbc现在是MSSQL的首选DB-API，如果没有明确请求模块，则将在模块探测时首先加载。
- en: '**[mssql]**'
  id: totrans-1775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: The @@SCOPE_IDENTITY is now used instead of @@IDENTITY. This behavior may be
    overridden with the engine_connect “use_scope_identity” keyword parameter, which
    may also be specified in the dburi.
  id: totrans-1776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在使用@@SCOPE_IDENTITY而不是@@IDENTITY。此行为可以通过engine_connect“use_scope_identity”关键字参数覆盖，也可以在dburi中指定。
- en: oracle
  id: totrans-1777
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: small fix to allow successive compiles of the same SELECT object which features
    LIMIT/OFFSET. oracle dialect needs to modify the object to have ROW_NUMBER OVER
    and wasn’t performing the full series of steps on successive compiles.
  id: totrans-1779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对允许对具有LIMIT/OFFSET特性的相同SELECT对象进行连续编译的小修复。oracle方言需要修改对象以具有ROW_NUMBER OVER，并且在连续编译时未执行完整系列步骤。
- en: misc
  id: totrans-1780
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[engines]**'
  id: totrans-1781
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: warnings module used for issuing warnings (instead of logging)
  id: totrans-1782
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于发出警告的警告模块（而不是日志记录）
- en: '**[engines]**'
  id: totrans-1783
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: cleanup of DBAPI import strategies across all engines
  id: totrans-1784
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 清理了所有引擎中的DBAPI导入策略
- en: 'References: [#480](https://www.sqlalchemy.org/trac/ticket/480)'
  id: totrans-1785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#480](https://www.sqlalchemy.org/trac/ticket/480)
- en: '**[engines]**'
  id: totrans-1786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engines]**'
- en: refactoring of engine internals which reduces complexity, number of codepaths;
    places more state inside of ExecutionContext to allow more dialect control of
    cursor handling, result sets. ResultProxy totally refactored and also has two
    versions of “buffered” result sets used for different purposes.
  id: totrans-1787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引擎内部的重构，减少了复杂性，代码路径数量；将更多状态放在 ExecutionContext 内，以允许更多方言控制游标处理，结果集。ResultProxy
    完全重构，并且还有两个用于不同目的的“缓冲”结果集的版本。
- en: '**[engines]**'
  id: totrans-1788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: server side cursor support fully functional in postgres.
  id: totrans-1789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 服务器端游标支持在 postgres 中完全可用。
- en: 'References: [#514](https://www.sqlalchemy.org/trac/ticket/514)'
  id: totrans-1790
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#514](https://www.sqlalchemy.org/trac/ticket/514)
- en: '**[engines]**'
  id: totrans-1791
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: 'improved framework for auto-invalidation of connections that have lost their
    underlying database, via dialect-specific detection of exceptions corresponding
    to that database’s disconnect related error messages. Additionally, when a “connection
    no longer open” condition is detected, the entire connection pool is discarded
    and replaced with a new instance. #516'
  id: totrans-1792
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了自动失效连接的框架，通过方言特定的异常检测，对应于该数据库的断开相关错误消息。此外，当检测到“连接不再打开”的条件时，整个连接池将被丢弃，并用新实例替换。＃516
- en: '**[engines]**'
  id: totrans-1793
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: the dialects within sqlalchemy.databases become a setuptools entry points. loading
    the built-in database dialects works the same as always, but if none found will
    fall back to trying pkg_resources to load an external module
  id: totrans-1794
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlalchemy.databases 中的方言成为了 setuptools 的入口点。加载内置数据库方言的方式与以往相同，但如果找不到任何方言，将会退回到尝试使用
    pkg_resources 加载外部模块。
- en: 'References: [#521](https://www.sqlalchemy.org/trac/ticket/521)'
  id: totrans-1795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#521](https://www.sqlalchemy.org/trac/ticket/521)
- en: '**[engines]**'
  id: totrans-1796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎]**'
- en: Engine contains a “url” attribute referencing the url.URL object used by create_engine().
  id: totrans-1797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Engine 包含一个“url”属性，引用了 create_engine() 使用的 url.URL 对象。
- en: '**[informix]**'
  id: totrans-1798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[informix]**'
- en: informix support added ! courtesy James Zhang, who put a ton of effort in.
  id: totrans-1799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: informix 支持添加！感谢 James Zhang，他付出了大量努力。
- en: 0.3.6
  id: totrans-1800
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.6
- en: 'Released: Fri Mar 23 2007'
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Fri Mar 23 2007
- en: orm
  id: totrans-1802
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-1803
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: 'the full featureset of the SelectResults extension has been merged into a new
    set of methods available off of Query. These methods all provide “generative”
    behavior, whereby the Query is copied and a new one returned with additional criterion
    added. The new methods include:'
  id: totrans-1804
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SelectResults 扩展的全部特性已经合并到一个新的一组方法中，这些方法都提供“生成式”行为，其中查询被复制并返回带有附加条件的新查询。新方法包括：
- en: filter() - applies select criterion to the query
  id: totrans-1805
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: filter() - 对查询应用选择条件
- en: ''
  id: totrans-1806
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1807
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: filter_by() - applies “by”-style criterion to the query
  id: totrans-1808
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: filter_by() - 对查询应用“by”风格的条件
- en: ''
  id: totrans-1809
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1810
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: avg() - return the avg() function on the given column
  id: totrans-1811
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: avg() - 返回给定列上的 avg() 函数
- en: ''
  id: totrans-1812
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1813
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: join() - join to a property (or across a list of properties)
  id: totrans-1814
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: join() - 加入到一个属性（或跨越属性列表）
- en: ''
  id: totrans-1815
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1816
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: outerjoin() - like join() but uses LEFT OUTER JOIN
  id: totrans-1817
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: outerjoin() - 类似于 join()，但使用 LEFT OUTER JOIN
- en: ''
  id: totrans-1818
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1819
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'limit()/offset() - apply LIMIT/OFFSET range-based access which applies limit/offset:
    session.query(Foo)[3:5]'
  id: totrans-1820
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: limit()/offset() - 应用基于范围的 LIMIT/OFFSET 访问，该访问应用 limit/offset：session.query(Foo)[3:5]
- en: ''
  id: totrans-1821
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1822
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: distinct() - apply DISTINCT
  id: totrans-1823
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: distinct() - 应用 DISTINCT
- en: ''
  id: totrans-1824
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1825
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: list() - evaluate the criterion and return results
  id: totrans-1826
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: list() - 评估条件并返回结果
- en: no incompatible changes have been made to Query’s API and no methods have been
    deprecated. Existing methods like select(), select_by(), get(), get_by() all execute
    the query at once and return results like they always did. join_to()/join_via()
    are still there although the generative join()/outerjoin() methods are easier
    to use.
  id: totrans-1827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Query 的 API 没有进行不兼容的更改，也没有弃用任何方法。现有方法如 select()、select_by()、get()、get_by()
    等一次执行查询并返回结果，与以往一样。join_to()/join_via() 仍然存在，尽管生成式 join()/outerjoin() 方法更容易使用。
- en: '**[orm]**'
  id: totrans-1828
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: the return value for multiple mappers used with instances() now returns a cartesian
    product of the requested list of mappers, represented as a list of tuples. this
    corresponds to the documented behavior. So that instances match up properly, the
    “uniquing” is disabled when this feature is used.
  id: totrans-1829
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 instances() 与多个映射器的返回值现在返回所请求的映射器列表的笛卡尔积，表示为元组列表。这对应于文档化的行为。为了使实例正确匹配，当使用此功能时，“唯一化”被禁用。
- en: '**[orm]**'
  id: totrans-1830
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: Query has add_entity() and add_column() generative methods. these will add the
    given mapper/class or ColumnElement to the query at compile time, and apply them
    to the instances() method. the user is responsible for constructing reasonable
    join conditions (otherwise you can get full cartesian products). result set is
    the list of tuples, non-uniqued.
  id: totrans-1831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query 具有 add_entity() 和 add_column() 生成方法。这些方法将给定的映射器/类或 ColumnElement 在编译时添加到查询中，并将它们应用于
    instances() 方法。用户负责构建合理的连接条件（否则可能会得到完全的笛卡尔积）。结果集是元组的列表，不唯一。
- en: '**[orm]**'
  id: totrans-1832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: strings and columns can also be sent to the *args of instances() where those
    exact result columns will be part of the result tuples.
  id: totrans-1833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 也可以将字符串和列发送到 instances() 的 *args 中，这些精确的结果列将成为结果元组的一部分。
- en: '**[orm]**'
  id: totrans-1834
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a full select() construct can be passed to query.select() (which worked anyway),
    but also query.selectfirst(), query.selectone() which will be used as is (i.e.
    no query is compiled). works similarly to sending the results to instances().
  id: totrans-1835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以将完整的 select() 构造传递给 query.select()（这已经可以工作了），但也可以使用 query.selectfirst()、query.selectone()，它们将按原样使用（即不会编译查询）。类似地，结果会被发送到
    instances()。
- en: '**[orm]**'
  id: totrans-1836
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: eager loading will not “aliasize” “order by” clauses that were placed in the
    select statement by something other than the eager loader itself, to fix possibility
    of dupe columns as illustrated in. however, this means you have to be more careful
    with the columns placed in the “order by” of Query.select(), that you have explicitly
    named them in your criterion (i.e. you can’t rely on the eager loader adding them
    in for you)
  id: totrans-1837
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于由除了急加载器本身之外的其他内容放置在选择语句中的“order by”子句，急加载器不会“别名化”它们，以修复可能导致重复列的问题，如示例中所示。然而，这意味着你必须更加注意在
    Query.select() 的“order by”中放置的列，你必须显式地在你的条件中命名它们（即，你不能依赖于急加载器为你添加它们）
- en: 'References: [#495](https://www.sqlalchemy.org/trac/ticket/495)'
  id: totrans-1838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#495](https://www.sqlalchemy.org/trac/ticket/495)
- en: '**[orm]**'
  id: totrans-1839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added a handy multi-use “identity_key()” method to Session, allowing the generation
    of identity keys for primary key values, instances, and rows, courtesy Daniel
    Miller
  id: totrans-1840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Session 中添加了一个方便的多用途“identity_key()”方法，允许为主键值、实例和行生成标识键，由 Daniel Miller 提供
- en: '**[orm]**'
  id: totrans-1841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: many-to-many table will be properly handled even for operations that occur on
    the “backref” side of the operation
  id: totrans-1842
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 即使在操作发生在“反向引用”方的情况下，也将正确处理多对多表
- en: 'References: [#249](https://www.sqlalchemy.org/trac/ticket/249)'
  id: totrans-1843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#249](https://www.sqlalchemy.org/trac/ticket/249)
- en: '**[orm]**'
  id: totrans-1844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “refresh-expire” cascade. allows refresh() and expire() calls to propagate
    along relationships.
  id: totrans-1845
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“refresh-expire”级联。允许 refresh() 和 expire() 调用沿关系传播。
- en: 'References: [#492](https://www.sqlalchemy.org/trac/ticket/492)'
  id: totrans-1846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#492](https://www.sqlalchemy.org/trac/ticket/492)
- en: '**[orm]**'
  id: totrans-1847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: more fixes to polymorphic relations, involving proper lazy-clause generation
    on many-to-one relationships to polymorphic mappers. also fixes to detection of
    “direction”, more specific targeting of columns that belong to the polymorphic
    union vs. those that don’t.
  id: totrans-1848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对多态关系进行了更多修复，包括在多对一关系到多态映射器上生成正确的延迟子句。还修复了“direction”的检测，更具体地针对属于多态联合的列和不属于多态联合的列。
- en: 'References: [#493](https://www.sqlalchemy.org/trac/ticket/493)'
  id: totrans-1849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#493](https://www.sqlalchemy.org/trac/ticket/493)
- en: '**[orm]**'
  id: totrans-1850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: some fixes to relationship calcs when using “viewonly=True” to pull in other
    tables into the join condition which aren’t parent of the relationship’s parent/child
    mappings
  id: totrans-1851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用“viewonly=True”时对关系计算进行了一些修复，以将其他表引入到连接条件中，这些表不是关系的父/子映射的父级。
- en: '**[orm]**'
  id: totrans-1852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: flush fixes on cyclical-referential relationships that contain references to
    other instances outside of the cyclical chain, when some of the objects in the
    cycle are not actually part of the flush
  id: totrans-1853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了循环引用关系中的刷新问题，其中包含对循环链之外的其他实例的引用，当循环中的一些对象实际上不是刷新的一部分时。
- en: '**[orm]**'
  id: totrans-1854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: put an aggressive check for “flushing object A with a collection of B’s, but
    you put a C in the collection” error condition - **even if C is a subclass of
    B**, unless B’s mapper loads polymorphically. Otherwise, the collection will later
    load a “B” which should be a “C” (since its not polymorphic) which breaks in bi-directional
    relationships (i.e. C has its A, but A’s backref will lazyload it as a different
    instance of type “B”) This check is going to bite some of you who do this without
    issues, so the error message will also document a flag “enable_typechecks=False”
    to disable this checking. But be aware that bi-directional relationships in particular
    become fragile without this check.
  id: totrans-1855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“使用集合B刷新对象A，但将C放入集合中”错误条件进行了严格检查 - **即使C是B的子类**，除非B的映射器以多态方式加载。否则，集合稍后将加载一个应该是“C”的“B”（因为它不是多态的），这会在双向关系中出现问题（即C有它的A，但A的反向引用将懒加载为类型“B”的不同实例）。这个检查将会影响一些这样做而没有问题的人，因此错误消息还将记录一个标志“enable_typechecks=False”以禁用此检查。但请注意，特别是在没有此检查的情况下，双向关系会变得脆弱。
- en: 'References: [#500](https://www.sqlalchemy.org/trac/ticket/500)'
  id: totrans-1856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#500](https://www.sqlalchemy.org/trac/ticket/500)
- en: sql
  id: totrans-1857
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1858
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: bindparam() names are now repeatable! specify two distinct bindparam()s with
    the same name in a single statement, and the key will be shared. proper positional/named
    args translate at compile time. for the old behavior of “aliasing” bind parameters
    with conflicting names, specify “unique=True” - this option is still used internally
    for all the auto-generated (value-based) bind parameters.
  id: totrans-1859
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bindparam()名称现在是可重复的！在单个语句中指定两个不同的bindparam()具有相同的名称，键将被共享。适当的位置/命名参数在编译时转换。对于“别名”具有冲突名称的绑定参数的旧行为，指定“unique=True”
    - 此选项仍然在所有自动生成的（基于值的）绑定参数内部使用。
- en: '**[sql]**'
  id: totrans-1860
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: slightly better support for bind params as column clauses, either via bindparam()
    or via literal(), i.e. select([literal(‘foo’)])
  id: totrans-1861
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对绑定参数作为列子句的绑定参数或文字列的支持稍微改进，例如通过bindparam()或literal()，即select([literal('foo')])
- en: '**[sql]**'
  id: totrans-1862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: MetaData can bind to an engine either via “url” or “engine” kwargs to constructor,
    or by using connect() method. BoundMetaData is identical to MetaData except engine_or_url
    param is required. DynamicMetaData is the same and provides thread-local connections
    be default.
  id: totrans-1863
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MetaData可以通过构造函数的“url”或“engine”参数，或使用connect()方法绑定到引擎。BoundMetaData与MetaData相同，只是需要engine_or_url参数。DynamicMetaData相同，并默认提供线程本地连接。
- en: '**[sql]**'
  id: totrans-1864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: exists() becomes usable as a standalone selectable, not just in a WHERE clause,
    i.e. exists([columns], criterion).select()
  id: totrans-1865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: exists()现在可以作为独立的可选择项使用，不仅仅在WHERE子句中，例如exists([columns], criterion).select()
- en: '**[sql]**'
  id: totrans-1866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: correlated subqueries work inside of ORDER BY, GROUP BY
  id: totrans-1867
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相关子查询可以在ORDER BY、GROUP BY中工作
- en: '**[sql]**'
  id: totrans-1868
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed function execution with explicit connections, i.e. conn.execute(func.dosomething())
  id: totrans-1869
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用显式连接执行函数的问题，即conn.execute(func.dosomething())
- en: '**[sql]**'
  id: totrans-1870
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: use_labels flag on select() won’t auto-create labels for literal text column
    elements, since we can make no assumptions about the text. to create labels for
    literal columns, you can say “somecol AS somelabel”, or use literal_column(“somecol”).label(“somelabel”)
  id: totrans-1871
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在select()上使用use_labels标志不会自动为文字列元素创建标签，因为我们无法对文本做出任何假设。要为文字列创建标签，可以说“somecol
    AS somelabel”，或使用literal_column(“somecol”).label(“somelabel”)
- en: '**[sql]**'
  id: totrans-1872
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: quoting won’t occur for literal columns when they are “proxied” into the column
    collection for their selectable (is_literal flag is propagated). literal columns
    are specified via literal_column(“somestring”).
  id: totrans-1873
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将文字列列“代理”到其可选择的列集合中时，不会对文字列进行引用（is_literal标志被传播）。文字列通过literal_column(“somestring”)指定。
- en: '**[sql]**'
  id: totrans-1874
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added “fold_equivalents” boolean argument to Join.select(), which removes ‘duplicate’
    columns from the resulting column clause that are known to be equivalent based
    on the join condition. this is of great usage when constructing subqueries of
    joins which Postgres complains about if duplicate column names are present.
  id: totrans-1875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Join.select()中添加了“fold_equivalents”布尔参数，该参数根据连接条件删除结果列子句中已知等效的“重复”列。在构建Postgres抱怨存在重复列名的连接子查询时，这非常有用。
- en: '**[sql]**'
  id: totrans-1876
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed use_alter flag on ForeignKeyConstraint
  id: totrans-1877
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了ForeignKeyConstraint上的use_alter标志
- en: 'References: [#503](https://www.sqlalchemy.org/trac/ticket/503)'
  id: totrans-1878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#503](https://www.sqlalchemy.org/trac/ticket/503)
- en: '**[sql]**'
  id: totrans-1879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed usage of 2.4-only “reversed” in topological.py
  id: totrans-1880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在topological.py中使用仅限于2.4的“reversed”的问题
- en: 'References: [#506](https://www.sqlalchemy.org/trac/ticket/506)'
  id: totrans-1881
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#506](https://www.sqlalchemy.org/trac/ticket/506)
- en: '**[sql]**'
  id: totrans-1882
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: for hackers, refactored the “visitor” system of ClauseElement and SchemaItem
    so that the traversal of items is controlled by the ClauseVisitor itself, using
    the method visitor.traverse(item). accept_visitor() methods can still be called
    directly but will not do any traversal of child items. ClauseElement/SchemaItem
    now have a configurable get_children() method to return the collection of child
    elements for each parent object. This allows the full traversal of items to be
    clear and unambiguous (as well as loggable), with an easy method of limiting a
    traversal (just pass flags which are picked up by appropriate get_children() methods).
  id: totrans-1883
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于黑客，重构了ClauseElement和SchemaItem的“visitor”系统，以便项目的遍历由ClauseVisitor本身控制，使用方法visitor.traverse(item)。accept_visitor()方法仍然可以直接调用，但不会遍历子项目。ClauseElement/SchemaItem现在有一个可配置的get_children()方法，用于返回每个父对象的子元素集合。这允许项目的完整遍历清晰明了（以及可记录），并且有一种限制遍历的简单方法（只需传递标志，这些标志由适当的get_children()方法捕获）。
- en: 'References: [#501](https://www.sqlalchemy.org/trac/ticket/501)'
  id: totrans-1884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#501](https://www.sqlalchemy.org/trac/ticket/501)
- en: '**[sql]**'
  id: totrans-1885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “else_” parameter to the case statement now properly works when set to zero.
  id: totrans-1886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当设置为零时，case语句的“else_”参数现在正常工作。
- en: extensions
  id: totrans-1887
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions]**'
  id: totrans-1888
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: options() method on SelectResults now implemented “generatively” like the rest
    of the SelectResults methods. But you’re going to just use Query now anyway.
  id: totrans-1889
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SelectResults上的options()方法现在像其他SelectResults方法一样实现了“生成”。但是你现在无论如何都会只使用Query。
- en: 'References: [#472](https://www.sqlalchemy.org/trac/ticket/472)'
  id: totrans-1890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#472](https://www.sqlalchemy.org/trac/ticket/472)
- en: '**[extensions]**'
  id: totrans-1891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: query() method is added by assignmapper. this helps with navigating to all the
    new generative methods on Query.
  id: totrans-1892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过assignmapper添加了query()方法。这有助于导航到Query上的所有新的生成方法。
- en: mysql
  id: totrans-1893
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-1894
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: added a catchall **kwargs to MSString, to help reflection of obscure types (like
    “varchar() binary” in MS 4.0)
  id: totrans-1895
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为MSString添加了一个通用的**kwargs，以帮助反射模糊类型（例如MS 4.0中的“varchar() binary”）
- en: '**[mysql]**'
  id: totrans-1896
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: added explicit MSTimeStamp type which takes effect when using types.TIMESTAMP.
  id: totrans-1897
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了明确的MSTimeStamp类型，当使用types.TIMESTAMP时生效。
- en: oracle
  id: totrans-1898
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-1899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: got binary working for any size input ! cx_oracle works fine, it was my fault
    as BINARY was being passed and not BLOB for setinputsizes (also unit tests weren’t
    even setting input sizes).
  id: totrans-1900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为任意大小的输入使二进制工作！cx_oracle工作正常，这是我的错，因为BINARY被传递而不是BLOB用于setinputsizes（而且单元测试甚至没有设置输入大小）。
- en: '**[oracle]**'
  id: totrans-1901
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: also fixed CLOB read/write on a separate changeset.
  id: totrans-1902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还修复了CLOB读/写在一个单独的变更集上。
- en: '**[oracle]**'
  id: totrans-1903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: auto_setinputsizes defaults to True for Oracle, fixed cases where it improperly
    propagated bad types.
  id: totrans-1904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: auto_setinputsizes默认为True用于Oracle，修复了它错误地传播错误类型的情况。
- en: misc
  id: totrans-1905
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[ms-sql]**'
  id: totrans-1906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: removed seconds input on DATE column types (probably
  id: totrans-1907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在DATE列类型上删除了秒输入（可能应该完全删除时间）
- en: should remove the time altogether)
  id: totrans-1908
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应该完全删除时间）
- en: '**[ms-sql]**'
  id: totrans-1909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: null values in float fields no longer raise errors
  id: totrans-1910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 浮点字段中的空值不再引发错误
- en: '**[ms-sql]**'
  id: totrans-1911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: LIMIT with OFFSET now raises an error (MS-SQL has no OFFSET support)
  id: totrans-1912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 带有OFFSET的LIMIT现在会引发错误（MS-SQL不支持OFFSET）
- en: '**[ms-sql]**'
  id: totrans-1913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: added an facility to use the MSSQL type VARCHAR(max) instead of TEXT for large
    unsized string fields. Use the new “text_as_varchar” to turn it on.
  id: totrans-1914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一种使用MSSQL类型VARCHAR(max)而不是TEXT用于大型无大小字���串字段的方法。使用新的“text_as_varchar”来打开它。
- en: 'References: [#509](https://www.sqlalchemy.org/trac/ticket/509)'
  id: totrans-1915
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#509](https://www.sqlalchemy.org/trac/ticket/509)
- en: '**[ms-sql]**'
  id: totrans-1916
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: ORDER BY clauses without a LIMIT are now stripped in subqueries, as MS-SQL forbids
    this usage
  id: totrans-1917
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有LIMIT的ORDER BY子句现在在子查询中被剥离，因为MS-SQL禁止此用法
- en: '**[ms-sql]**'
  id: totrans-1918
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: cleanup of module importing code; specifiable DB-API module; more explicit ordering
    of module preferences.
  id: totrans-1919
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 清理模块导入代码；可指定的DB-API模块；模块偏好的更明确排序。
- en: 'References: [#480](https://www.sqlalchemy.org/trac/ticket/480)'
  id: totrans-1920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#480](https://www.sqlalchemy.org/trac/ticket/480)
- en: orm
  id: totrans-1921
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-1922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'the full featureset of the SelectResults extension has been merged into a new
    set of methods available off of Query. These methods all provide “generative”
    behavior, whereby the Query is copied and a new one returned with additional criterion
    added. The new methods include:'
  id: totrans-1923
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SelectResults扩展的完整功能集已合并到可用于Query的一组新方法中。这些方法都提供“生成”行为，其中查询被复制并返回一个添加了额外条件的新查询。新方法包括：
- en: filter() - applies select criterion to the query
  id: totrans-1924
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: filter() - 将选择条件应用于查询
- en: ''
  id: totrans-1925
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1926
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: filter_by() - applies “by”-style criterion to the query
  id: totrans-1927
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: filter_by() - 将“by”样式的条件应用于查询
- en: ''
  id: totrans-1928
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1929
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: avg() - return the avg() function on the given column
  id: totrans-1930
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: avg() - 返回给定列上的avg()函数
- en: ''
  id: totrans-1931
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1932
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: join() - join to a property (or across a list of properties)
  id: totrans-1933
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: join() - 加入到属性（或跨��性列表）
- en: ''
  id: totrans-1934
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1935
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: outerjoin() - like join() but uses LEFT OUTER JOIN
  id: totrans-1936
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: outerjoin() - 类似于join()，但使用LEFT OUTER JOIN
- en: ''
  id: totrans-1937
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1938
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'limit()/offset() - apply LIMIT/OFFSET range-based access which applies limit/offset:
    session.query(Foo)[3:5]'
  id: totrans-1939
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: limit()/offset() - 应用基于范围的LIMIT/OFFSET访问，该访问应用limit/offset：session.query(Foo)[3:5]
- en: ''
  id: totrans-1940
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1941
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: distinct() - apply DISTINCT
  id: totrans-1942
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: distinct() - 应用DISTINCT
- en: ''
  id: totrans-1943
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-1944
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: list() - evaluate the criterion and return results
  id: totrans-1945
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: list() - 评估条件并返回结果
- en: no incompatible changes have been made to Query’s API and no methods have been
    deprecated. Existing methods like select(), select_by(), get(), get_by() all execute
    the query at once and return results like they always did. join_to()/join_via()
    are still there although the generative join()/outerjoin() methods are easier
    to use.
  id: totrans-1946
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query的API没有进行不兼容的更改，也没有废弃任何方法。现有方法如select()、select_by()、get()、get_by()都会立即执行查询并返回结果，就像以前一样。join_to()/join_via()仍然存在，尽管生成的join()/outerjoin()方法更容易使用。
- en: '**[orm]**'
  id: totrans-1947
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the return value for multiple mappers used with instances() now returns a cartesian
    product of the requested list of mappers, represented as a list of tuples. this
    corresponds to the documented behavior. So that instances match up properly, the
    “uniquing” is disabled when this feature is used.
  id: totrans-1948
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于与instances()一起使用的多个mapper的返回值现在返回请求的mapper列表的笛卡尔积，表示为元组的列表。这与文档中的行为相对应。为了正确匹配实例，当使用此功能时，“唯一化”被禁用。
- en: '**[orm]**'
  id: totrans-1949
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: Query has add_entity() and add_column() generative methods. these will add the
    given mapper/class or ColumnElement to the query at compile time, and apply them
    to the instances() method. the user is responsible for constructing reasonable
    join conditions (otherwise you can get full cartesian products). result set is
    the list of tuples, non-uniqued.
  id: totrans-1950
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Query具有add_entity()和add_column()生成方法。这些方法将在编译时将给定的mapper/class或ColumnElement添加到查询中，并将它们应用于instances()方法。用户负责构建合理的连接条件（否则可能会得到完整的笛卡尔积）。结果集是元组的列表，不唯一。
- en: '**[orm]**'
  id: totrans-1951
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: strings and columns can also be sent to the *args of instances() where those
    exact result columns will be part of the result tuples.
  id: totrans-1952
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字符串和列也可以发送到instances()的*args中，其中这些确切的结果列将成为结果元组的一部分。
- en: '**[orm]**'
  id: totrans-1953
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a full select() construct can be passed to query.select() (which worked anyway),
    but also query.selectfirst(), query.selectone() which will be used as is (i.e.
    no query is compiled). works similarly to sending the results to instances().
  id: totrans-1954
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以将完整的select()构造传递给query.select()（这在任何情况下都有效），但也可以使用query.selectfirst()、query.selectone()，它们将按原样使用（即不会编译查询）。与将结果发送到instances()类似。
- en: '**[orm]**'
  id: totrans-1955
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: eager loading will not “aliasize” “order by” clauses that were placed in the
    select statement by something other than the eager loader itself, to fix possibility
    of dupe columns as illustrated in. however, this means you have to be more careful
    with the columns placed in the “order by” of Query.select(), that you have explicitly
    named them in your criterion (i.e. you can’t rely on the eager loader adding them
    in for you)
  id: totrans-1956
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 急加载不会“别名化”由急加载器本身放置在select语句中的“order by”子句，以修复可能出现的重复列的问题。但是，这意味着您必须更加小心地处理放置在Query.select()的“order
    by”中的列，您必须明确地在您的条件中命名它们（即您不能依赖于急加载器为您添加它们）
- en: 'References: [#495](https://www.sqlalchemy.org/trac/ticket/495)'
  id: totrans-1957
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#495](https://www.sqlalchemy.org/trac/ticket/495)
- en: '**[orm]**'
  id: totrans-1958
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added a handy multi-use “identity_key()” method to Session, allowing the generation
    of identity keys for primary key values, instances, and rows, courtesy Daniel
    Miller
  id: totrans-1959
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为Session添加了一个方便的多用途“identity_key()”方法，允许为主键值、实例和行生成身份键，感谢Daniel Miller
- en: '**[orm]**'
  id: totrans-1960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: many-to-many table will be properly handled even for operations that occur on
    the “backref” side of the operation
  id: totrans-1961
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多对多表将被正确处理，即使在操作发生在操作的“backref”一侧时也是如此
- en: 'References: [#249](https://www.sqlalchemy.org/trac/ticket/249)'
  id: totrans-1962
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#249](https://www.sqlalchemy.org/trac/ticket/249)
- en: '**[orm]**'
  id: totrans-1963
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “refresh-expire” cascade. allows refresh() and expire() calls to propagate
    along relationships.
  id: totrans-1964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“refresh-expire”级联。允许refresh()和expire()调用沿关系传播。
- en: 'References: [#492](https://www.sqlalchemy.org/trac/ticket/492)'
  id: totrans-1965
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#492](https://www.sqlalchemy.org/trac/ticket/492)
- en: '**[orm]**'
  id: totrans-1966
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: more fixes to polymorphic relations, involving proper lazy-clause generation
    on many-to-one relationships to polymorphic mappers. also fixes to detection of
    “direction”, more specific targeting of columns that belong to the polymorphic
    union vs. those that don’t.
  id: totrans-1967
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对多态关系进行了更多修复，涉及到对多对一关系到多态mapper的正确惰性子句生成。还修复了“方向”的检测，更具体地针对属于多态联合的列与不属于多态联合的列的定位。
- en: 'References: [#493](https://www.sqlalchemy.org/trac/ticket/493)'
  id: totrans-1968
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#493](https://www.sqlalchemy.org/trac/ticket/493)
- en: '**[orm]**'
  id: totrans-1969
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: some fixes to relationship calcs when using “viewonly=True” to pull in other
    tables into the join condition which aren’t parent of the relationship’s parent/child
    mappings
  id: totrans-1970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在使用“viewonly=True”时，修复了关系计算的一些问题，以将其他表引入到连接条件中，这些表不是关系的父/子映射的一部分
- en: '**[orm]**'
  id: totrans-1971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: flush fixes on cyclical-referential relationships that contain references to
    other instances outside of the cyclical chain, when some of the objects in the
    cycle are not actually part of the flush
  id: totrans-1972
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了包含对循环引用关系的刷新的问题，当循环链中的某些对象实际上不是刷新的一部分时
- en: '**[orm]**'
  id: totrans-1973
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: put an aggressive check for “flushing object A with a collection of B’s, but
    you put a C in the collection” error condition - **even if C is a subclass of
    B**, unless B’s mapper loads polymorphically. Otherwise, the collection will later
    load a “B” which should be a “C” (since its not polymorphic) which breaks in bi-directional
    relationships (i.e. C has its A, but A’s backref will lazyload it as a different
    instance of type “B”) This check is going to bite some of you who do this without
    issues, so the error message will also document a flag “enable_typechecks=False”
    to disable this checking. But be aware that bi-directional relationships in particular
    become fragile without this check.
  id: totrans-1974
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“将对象A与B的集合刷新，但将C放入集合中”错误条件进行了积极检查 - **即使C是B的子类**，除非B的映射器以多态方式加载。否则，集合稍后将加载一个“B”，而应该是一个“C”（因为它不是多态的），这会破坏双向关系（即C有其A，但A的反向引用将懒加载为类型“B”的不同实例）。这个检查将会影响一些没有问题的人，因此错误消息还将记录一个标志“enable_typechecks=False”来禁用此检查。但请注意，特别是在没有此检查的情况下，双向关系变得脆弱。
- en: 'References: [#500](https://www.sqlalchemy.org/trac/ticket/500)'
  id: totrans-1975
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#500](https://www.sqlalchemy.org/trac/ticket/500)
- en: sql
  id: totrans-1976
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-1977
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: bindparam() names are now repeatable! specify two distinct bindparam()s with
    the same name in a single statement, and the key will be shared. proper positional/named
    args translate at compile time. for the old behavior of “aliasing” bind parameters
    with conflicting names, specify “unique=True” - this option is still used internally
    for all the auto-generated (value-based) bind parameters.
  id: totrans-1978
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: bindparam()现在可以重复使用！在单个语句中指定两个不同的bindparam()具有相同的名称，键将被共享。适当的位置/命名参数在编译时转换。对于具有冲突名称的绑定参数进行“别名”处理的旧行为，指定“unique=True”
    - 此选项仍然在所有自动生成的（基于值的）绑定参数的内部使用。
- en: '**[sql]**'
  id: totrans-1979
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: slightly better support for bind params as column clauses, either via bindparam()
    or via literal(), i.e. select([literal(‘foo’)])
  id: totrans-1980
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对绑定参数作为列子句提供了更好的支持，可以通过bindparam()或literal()来实现，例如select([literal(‘foo’)])
- en: '**[sql]**'
  id: totrans-1981
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: MetaData can bind to an engine either via “url” or “engine” kwargs to constructor,
    or by using connect() method. BoundMetaData is identical to MetaData except engine_or_url
    param is required. DynamicMetaData is the same and provides thread-local connections
    be default.
  id: totrans-1982
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MetaData可以通过构造函数的“url”或“engine”参数绑定到引擎，也可以使用connect()方法。BoundMetaData与MetaData相同，只是engine_or_url参数是必需的。DynamicMetaData相同，并默认提供线程本地连接。
- en: '**[sql]**'
  id: totrans-1983
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: exists() becomes usable as a standalone selectable, not just in a WHERE clause,
    i.e. exists([columns], criterion).select()
  id: totrans-1984
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: exists()现在可以作为一个独立的可选择项使用，不仅仅在WHERE子句中，例如exists([columns], criterion).select()
- en: '**[sql]**'
  id: totrans-1985
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: correlated subqueries work inside of ORDER BY, GROUP BY
  id: totrans-1986
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 相关子查询可以在ORDER BY、GROUP BY中工作
- en: '**[sql]**'
  id: totrans-1987
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed function execution with explicit connections, i.e. conn.execute(func.dosomething())
  id: totrans-1988
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用显式连接执行函数的问题，例如conn.execute(func.dosomething())
- en: '**[sql]**'
  id: totrans-1989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: use_labels flag on select() won’t auto-create labels for literal text column
    elements, since we can make no assumptions about the text. to create labels for
    literal columns, you can say “somecol AS somelabel”, or use literal_column(“somecol”).label(“somelabel”)
  id: totrans-1990
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在select()上使用use_labels标志不会为文字列元素自动创建标签，因为我们无法对文本做出任何假设。要为文字列创建标签，可以说“somecol
    AS somelabel”，或使用literal_column(“somecol”).label(“somelabel”)
- en: '**[sql]**'
  id: totrans-1991
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: quoting won’t occur for literal columns when they are “proxied” into the column
    collection for their selectable (is_literal flag is propagated). literal columns
    are specified via literal_column(“somestring”).
  id: totrans-1992
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当将文字列代理到其可选择的列集合中时，文字列不会被引用（is_literal标志被传播）。文字列通过literal_column(“somestring”)指定。
- en: '**[sql]**'
  id: totrans-1993
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added “fold_equivalents” boolean argument to Join.select(), which removes ‘duplicate’
    columns from the resulting column clause that are known to be equivalent based
    on the join condition. this is of great usage when constructing subqueries of
    joins which Postgres complains about if duplicate column names are present.
  id: totrans-1994
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Join.select() 中添加了一个“fold_equivalents”布尔参数，它根据连接条件从结果列子句中移除‘重复’列，这些列基于连接条件被认为是等效的。在构造
    Postgres 抱怨有重复列名的子查询时，这非常有用。
- en: '**[sql]**'
  id: totrans-1995
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed use_alter flag on ForeignKeyConstraint
  id: totrans-1996
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 ForeignKeyConstraint 上的 use_alter 标志
- en: 'References: [#503](https://www.sqlalchemy.org/trac/ticket/503)'
  id: totrans-1997
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#503](https://www.sqlalchemy.org/trac/ticket/503)
- en: '**[sql]**'
  id: totrans-1998
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed usage of 2.4-only “reversed” in topological.py
  id: totrans-1999
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 topological.py 中修复了仅限于 2.4 的“reversed”的使用。
- en: 'References: [#506](https://www.sqlalchemy.org/trac/ticket/506)'
  id: totrans-2000
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#506](https://www.sqlalchemy.org/trac/ticket/506)
- en: '**[sql]**'
  id: totrans-2001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: for hackers, refactored the “visitor” system of ClauseElement and SchemaItem
    so that the traversal of items is controlled by the ClauseVisitor itself, using
    the method visitor.traverse(item). accept_visitor() methods can still be called
    directly but will not do any traversal of child items. ClauseElement/SchemaItem
    now have a configurable get_children() method to return the collection of child
    elements for each parent object. This allows the full traversal of items to be
    clear and unambiguous (as well as loggable), with an easy method of limiting a
    traversal (just pass flags which are picked up by appropriate get_children() methods).
  id: totrans-2002
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重构了 ClauseElement 和 SchemaItem 的“访问者”系统，使得项的遍历由 ClauseVisitor 本身控制，使用方法 visitor.traverse(item)。accept_visitor()
    方法仍然可以直接调用，但不会遍历子项。ClauseElement/SchemaItem 现在有一个可配置的 get_children() 方法，用于返回每个父对象的子元素集合。这允许项的完整遍历清晰明了（以及可记录），并且有一种简单的限制遍历的方法（只需传递标志，这些标志由适当的
    get_children() 方法拾取）。
- en: 'References: [#501](https://www.sqlalchemy.org/trac/ticket/501)'
  id: totrans-2003
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#501](https://www.sqlalchemy.org/trac/ticket/501)
- en: '**[sql]**'
  id: totrans-2004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “else_” parameter to the case statement now properly works when set to zero.
  id: totrans-2005
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 else_ 参数设置为零时，case 语句现在正常工作。
- en: extensions
  id: totrans-2006
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: extensions
- en: '**[extensions]**'
  id: totrans-2007
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: options() method on SelectResults now implemented “generatively” like the rest
    of the SelectResults methods. But you’re going to just use Query now anyway.
  id: totrans-2008
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SelectResults 上的 options() 方法现在像其他 SelectResults 方法一样实现了“生成”。但是现在你只会使用 Query。
- en: 'References: [#472](https://www.sqlalchemy.org/trac/ticket/472)'
  id: totrans-2009
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#472](https://www.sqlalchemy.org/trac/ticket/472)
- en: '**[extensions]**'
  id: totrans-2010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: query() method is added by assignmapper. this helps with navigating to all the
    new generative methods on Query.
  id: totrans-2011
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query() 方法由 assignmapper 添加。这有助于浏览 Query 上的所有新生成方法。
- en: mysql
  id: totrans-2012
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2013
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: added a catchall **kwargs to MSString, to help reflection of obscure types (like
    “varchar() binary” in MS 4.0)
  id: totrans-2014
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 MSString 上添加了一个捕获所有 **kwargs，以帮助反射模糊类型（例如 MS 4.0 中的“varchar() binary”）
- en: '**[mysql]**'
  id: totrans-2015
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: added explicit MSTimeStamp type which takes effect when using types.TIMESTAMP.
  id: totrans-2016
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了显式的 MSTimeStamp 类型，当使用 types.TIMESTAMP 时生效。
- en: oracle
  id: totrans-2017
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: got binary working for any size input ! cx_oracle works fine, it was my fault
    as BINARY was being passed and not BLOB for setinputsizes (also unit tests weren’t
    even setting input sizes).
  id: totrans-2019
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让二进制对任何大小的输入都有效！cx_oracle 正常工作，这是我的错，因为传递的是 BINARY 而不是 BLOB 以设置输入大小（而且单元测试甚至没有设置输入大小）。
- en: '**[oracle]**'
  id: totrans-2020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: also fixed CLOB read/write on a separate changeset.
  id: totrans-2021
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还在另一个变更集中修复了 CLOB 读写问题。
- en: '**[oracle]**'
  id: totrans-2022
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: auto_setinputsizes defaults to True for Oracle, fixed cases where it improperly
    propagated bad types.
  id: totrans-2023
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 Oracle，auto_setinputsizes 默认为 True，修复了不正确传播坏类型的情况。
- en: misc
  id: totrans-2024
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[ms-sql]**'
  id: totrans-2025
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: removed seconds input on DATE column types (probably
  id: totrans-2026
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 DATE 列类型上删除了秒输入（可能是为了黑客）。
- en: should remove the time altogether)
  id: totrans-2027
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应该完全移除时间）
- en: '**[ms-sql]**'
  id: totrans-2028
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: null values in float fields no longer raise errors
  id: totrans-2029
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 浮点字段中的空值不再引发错误
- en: '**[ms-sql]**'
  id: totrans-2030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: LIMIT with OFFSET now raises an error (MS-SQL has no OFFSET support)
  id: totrans-2031
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 OFFSET 的 LIMIT 现在会引发错误（MS-SQL 不支持 OFFSET）
- en: '**[ms-sql]**'
  id: totrans-2032
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: added an facility to use the MSSQL type VARCHAR(max) instead of TEXT for large
    unsized string fields. Use the new “text_as_varchar” to turn it on.
  id: totrans-2033
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一种使用 MSSQL 类型 VARCHAR(max) 而不是 TEXT 用于大型未定大小的字符串字段的方法。使用新的“text_as_varchar”来打开它。
- en: 'References: [#509](https://www.sqlalchemy.org/trac/ticket/509)'
  id: totrans-2034
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#509](https://www.sqlalchemy.org/trac/ticket/509)
- en: '**[ms-sql]**'
  id: totrans-2035
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: ORDER BY clauses without a LIMIT are now stripped in subqueries, as MS-SQL forbids
    this usage
  id: totrans-2036
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有 LIMIT 的 ORDER BY 子句现在在子查询中被剥离，因为 MS-SQL 禁止此用法
- en: '**[ms-sql]**'
  id: totrans-2037
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: cleanup of module importing code; specifiable DB-API module; more explicit ordering
    of module preferences.
  id: totrans-2038
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 清理模块导入代码；可指定的 DB-API 模块；模块偏好的更明确排序。
- en: 'References: [#480](https://www.sqlalchemy.org/trac/ticket/480)'
  id: totrans-2039
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#480](https://www.sqlalchemy.org/trac/ticket/480)
- en: 0.3.5
  id: totrans-2040
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.5
- en: 'Released: Thu Feb 22 2007'
  id: totrans-2041
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：Thu Feb 22 2007
- en: orm
  id: totrans-2042
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bugs]**'
  id: totrans-2043
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: another refactoring to relationship calculation. Allows more accurate ORM behavior
    with relationships from/to/between mappers, particularly polymorphic mappers,
    also their usage with Query, SelectResults. tickets include,,.
  id: totrans-2044
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个关系计算的重构。允许更准确的 ORM 行为与映射器之间的关系，特别是多态映射器，以及它们与 Query、SelectResults 的使用。票据包括,,。
- en: 'References: [#439](https://www.sqlalchemy.org/trac/ticket/439), [#441](https://www.sqlalchemy.org/trac/ticket/441),
    [#448](https://www.sqlalchemy.org/trac/ticket/448)'
  id: totrans-2045
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#439](https://www.sqlalchemy.org/trac/ticket/439), [#441](https://www.sqlalchemy.org/trac/ticket/441),
    [#448](https://www.sqlalchemy.org/trac/ticket/448)
- en: '**[orm] [bugs]**'
  id: totrans-2046
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: removed deprecated method of specifying custom collections on classes; you must
    now use the “collection_class” option. the old way was beginning to produce conflicts
    when people used assign_mapper(), which now patches an “options” method, in conjunction
    with a relationship named “options”. (relationships take precedence over monkeypatched
    assign_mapper methods).
  id: totrans-2047
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 删除了在类上指定自定义集合的已弃用方法；现在必须使用“collection_class”选项。旧方法开始在人们使用 assign_mapper() 时产生冲突，现在修补���一个“options”方法，与一个名为“options”的关系一起使用。
    （关系优先于猴子补丁的 assign_mapper 方法）。
- en: '**[orm] [bugs]**'
  id: totrans-2048
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: extension() query option propagates to Mapper._instance() method so that all
    loading-related methods get called
  id: totrans-2049
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: extension() 查询选项传播到 Mapper._instance() 方法，以便调用所有与加载相关的方法
- en: 'References: [#454](https://www.sqlalchemy.org/trac/ticket/454)'
  id: totrans-2050
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#454](https://www.sqlalchemy.org/trac/ticket/454)
- en: '**[orm] [bugs]**'
  id: totrans-2051
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: eager relation to an inheriting mapper won’t fail if no rows returned for the
    relationship.
  id: totrans-2052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对继承映射器的急切关系如果关系没有返回任何行不会失败。
- en: '**[orm] [bugs]**'
  id: totrans-2053
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: eager relation loading bug fixed for eager relation on multiple descendant classes
  id: totrans-2054
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多个后代类上急切关系加载的错误
- en: 'References: [#486](https://www.sqlalchemy.org/trac/ticket/486)'
  id: totrans-2055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#486](https://www.sqlalchemy.org/trac/ticket/486)
- en: '**[orm] [bugs]**'
  id: totrans-2056
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: fix for very large topological sorts, courtesy ants.aasma at gmail
  id: totrans-2057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了非常大的拓扑排序问题，感谢 ants.aasma at gmail
- en: 'References: [#423](https://www.sqlalchemy.org/trac/ticket/423)'
  id: totrans-2058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#423](https://www.sqlalchemy.org/trac/ticket/423)
- en: '**[orm] [bugs]**'
  id: totrans-2059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: eager loading is slightly more strict about detecting “self-referential” relationships,
    specifically between polymorphic mappers. this results in an “eager degrade” to
    lazy loading.
  id: totrans-2060
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 急切加载在检测“自引用”关系方面稍微更严格，特别是在多态映射器之间。这导致“急切降级”为延迟加载。
- en: '**[orm] [bugs]**'
  id: totrans-2061
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: improved support for complex queries embedded into “where” criterion for query.select()
  id: totrans-2062
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对嵌入到查询.select() 的“where”条件的复杂查询的支持
- en: 'References: [#449](https://www.sqlalchemy.org/trac/ticket/449)'
  id: totrans-2063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#449](https://www.sqlalchemy.org/trac/ticket/449)
- en: '**[orm] [bugs]**'
  id: totrans-2064
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: mapper options like eagerload(), lazyload(), deferred(), will work for “synonym()”
    relationships
  id: totrans-2065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射器选项如 eagerload()、lazyload()、deferred()，将适用于“synonym()”关系
- en: 'References: [#485](https://www.sqlalchemy.org/trac/ticket/485)'
  id: totrans-2066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#485](https://www.sqlalchemy.org/trac/ticket/485)
- en: '**[orm] [bugs]**'
  id: totrans-2067
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: fixed bug where cascade operations incorrectly included deleted collection items
    in the cascade
  id: totrans-2068
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了级联操作错误地将已删除的集合项包含在级联中的错误
- en: 'References: [#445](https://www.sqlalchemy.org/trac/ticket/445)'
  id: totrans-2069
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#445](https://www.sqlalchemy.org/trac/ticket/445)
- en: '**[orm] [bugs]**'
  id: totrans-2070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: fixed relationship deletion error when one-to-many child item is moved to a
    new parent in a single unit of work
  id: totrans-2071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个关系删除错误，当一个一对多的子项在单个工作单元中移动到新的父项时
- en: 'References: [#478](https://www.sqlalchemy.org/trac/ticket/478)'
  id: totrans-2072
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#478](https://www.sqlalchemy.org/trac/ticket/478)
- en: '**[orm] [bugs]**'
  id: totrans-2073
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: fixed relationship deletion error where parent/child with a single column as
    PK/FK on the child would raise a “blank out the primary key” error, if manually
    deleted or “delete” cascade without “delete-orphan” was used
  id: totrans-2074
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关系删除错误，其中具有单个列作为子项的 PK/FK 的父项/子项在手动删除或使用“delete-orphan”而不是“delete”级联时会引发“清空主键”错误
- en: '**[orm] [bugs]**'
  id: totrans-2075
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: fix to deferred so that load operation doesn’t mistakenly occur when only PK
    col attributes are set
  id: totrans-2076
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了延迟加载，以便在只设置 PK 列属性时不会错误地发生加载操作
- en: '**[orm] [enhancements]**'
  id: totrans-2077
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [enhancements]**'
- en: implemented foreign_keys argument to mapper. use in conjunction with primaryjoin/secondaryjoin
    arguments to specify/override foreign keys defined on the Table instance.
  id: totrans-2078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了mapper的foreign_keys参数。与primaryjoin/secondaryjoin参数一起使用，指定/覆盖在Table实例上定义的外键。
- en: 'References: [#385](https://www.sqlalchemy.org/trac/ticket/385)'
  id: totrans-2079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#385](https://www.sqlalchemy.org/trac/ticket/385)
- en: '**[orm] [enhancements]**'
  id: totrans-2080
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [增强]**'
- en: contains_eager(‘foo’) automatically implies eagerload(‘foo’)
  id: totrans-2081
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: contains_eager('foo')自动意味着eagerload('foo')
- en: '**[orm] [enhancements]**'
  id: totrans-2082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [增强]**'
- en: added “alias” argument to contains_eager(). use it to specify the string name
    or Alias instance of an alias used in the query for the eagerly loaded child items.
    easier to use than “decorator”
  id: totrans-2083
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在contains_eager()中添��了“alias”参数。使用它来指定在查询中用于急加载子项的别名的字符串名称或Alias实例。比“decorator”更容易使用
- en: '**[orm] [enhancements]**'
  id: totrans-2084
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [增强]**'
- en: added “contains_alias()” option for result set mapping to an alias of the mapped
    table
  id: totrans-2085
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为映射到映射表的别名的结果集映射添加了“contains_alias()”选项
- en: '**[orm] [enhancements]**'
  id: totrans-2086
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [增强]**'
- en: added support for py2.5 “with” statement with SessionTransaction
  id: totrans-2087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对py2.5“with”语句与SessionTransaction的支持
- en: 'References: [#468](https://www.sqlalchemy.org/trac/ticket/468)'
  id: totrans-2088
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#468](https://www.sqlalchemy.org/trac/ticket/468)
- en: sql
  id: totrans-2089
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2090
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the value of “case_sensitive” defaults to True now, regardless of the casing
    of the identifier, unless specifically set to False. this is because the object
    might be label’ed as something else which does contain mixed case, and propagating
    “case_sensitive=False” breaks that. Other fixes to quoting when using labels and
    “fake” column objects
  id: totrans-2091
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “case_sensitive”的值现在默认为True，不管标识符的大小写如何，除非明确设置为False。这是因为对象可能被标记为其他内容，其中包含混合大小写，传播“case_sensitive=False”会破坏这一点。在使用标签和“fake”列对象时修复引用的其他修复
- en: '**[sql]**'
  id: totrans-2092
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added a “supports_execution()” method to ClauseElement, so that individual kinds
    of clauses can express if they are appropriate for executing…such as, you can
    execute a “select”, but not a “Table” or a “Join”.
  id: totrans-2093
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“supports_execution()”方法到ClauseElement，以便各种类型的子句可以表达是否适合执行...例如，您可以执行“select”，但不能执行“Table”或“Join”。
- en: '**[sql]**'
  id: totrans-2094
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed argument passing to straight textual execute() on engine, connection.
    can handle *args or a list instance for positional, **kwargs or a dict instance
    for named args, or a list of list or dicts to invoke executemany()
  id: totrans-2095
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对引擎、连接上直接文本执行execute()的参数传递。可以处理*args或列表实例用于位置参数，**kwargs或字典实例用于命名参数，或列表的列表或字典用于调用executemany()
- en: '**[sql]**'
  id: totrans-2096
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: small fix to BoundMetaData to accept unicode or string URLs
  id: totrans-2097
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对BoundMetaData进行了小修复，接受unicode或字符串URL
- en: '**[sql]**'
  id: totrans-2098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed named PrimaryKeyConstraint generation courtesy andrija at gmail
  id: totrans-2099
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由andrija at gmail提供的命名PrimaryKeyConstraint生成
- en: 'References: [#466](https://www.sqlalchemy.org/trac/ticket/466)'
  id: totrans-2100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#466](https://www.sqlalchemy.org/trac/ticket/466)
- en: '**[sql]**'
  id: totrans-2101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed generation of CHECK constraints on columns
  id: totrans-2102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在列上生成CHECK约束
- en: 'References: [#464](https://www.sqlalchemy.org/trac/ticket/464)'
  id: totrans-2103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#464](https://www.sqlalchemy.org/trac/ticket/464)
- en: '**[sql]**'
  id: totrans-2104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixes to tometadata() operation to propagate Constraints at column and table
    level
  id: totrans-2105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在tometadata()操作中传播列和表级别的约束
- en: extensions
  id: totrans-2106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions]**'
  id: totrans-2107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: added distinct() method to SelectResults. generally should only make a difference
    when using count().
  id: totrans-2108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了distinct()方法到SelectResults。通常只在使用count()时会有所不同。
- en: '**[extensions]**'
  id: totrans-2109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: added options() method to SelectResults, equivalent to query.options()
  id: totrans-2110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SelectResults中添加了options()方法，相当于query.options()
- en: 'References: [#472](https://www.sqlalchemy.org/trac/ticket/472)'
  id: totrans-2111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#472](https://www.sqlalchemy.org/trac/ticket/472)
- en: '**[extensions]**'
  id: totrans-2112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: added optional __table_opts__ dictionary to ActiveMapper, will send kw options
    to Table objects
  id: totrans-2113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了可选的__table_opts__字典到ActiveMapper，将kw选项发送到Table对象
- en: 'References: [#462](https://www.sqlalchemy.org/trac/ticket/462)'
  id: totrans-2114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#462](https://www.sqlalchemy.org/trac/ticket/462)
- en: '**[extensions]**'
  id: totrans-2115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[扩展]**'
- en: added selectfirst(), selectfirst_by() to assign_mapper
  id: totrans-2116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了selectfirst()、selectfirst_by()到assign_mapper
- en: 'References: [#467](https://www.sqlalchemy.org/trac/ticket/467)'
  id: totrans-2117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#467](https://www.sqlalchemy.org/trac/ticket/467)
- en: mysql
  id: totrans-2118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: fix to reflection on older DB’s that might return array() type for “show variables
    like” statements
  id: totrans-2120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在旧数据库上反射可能返回“show variables like”语句的array()类型的问题
- en: mssql
  id: totrans-2121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: preliminary support for pyodbc (Yay!)
  id: totrans-2123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对pyodbc的初步支持（耶！）
- en: 'References: [#419](https://www.sqlalchemy.org/trac/ticket/419)'
  id: totrans-2124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#419](https://www.sqlalchemy.org/trac/ticket/419)
- en: '**[mssql]**'
  id: totrans-2125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: better support for NVARCHAR types added
  id: totrans-2126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对NVARCHAR类型的更好支持
- en: 'References: [#298](https://www.sqlalchemy.org/trac/ticket/298)'
  id: totrans-2127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#298](https://www.sqlalchemy.org/trac/ticket/298)
- en: '**[mssql]**'
  id: totrans-2128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix for commit logic on pymssql
  id: totrans-2129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 pymssql 上的提交逻辑问题
- en: '**[mssql]**'
  id: totrans-2130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix for query.get() with schema
  id: totrans-2131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使用 schema 的 query.get() 问题
- en: 'References: [#456](https://www.sqlalchemy.org/trac/ticket/456)'
  id: totrans-2132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#456](https://www.sqlalchemy.org/trac/ticket/456)
- en: '**[mssql]**'
  id: totrans-2133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix for non-integer relationships
  id: totrans-2134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了非整数关系的问题
- en: 'References: [#473](https://www.sqlalchemy.org/trac/ticket/473)'
  id: totrans-2135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#473](https://www.sqlalchemy.org/trac/ticket/473)
- en: '**[mssql]**'
  id: totrans-2136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: DB-API module now selectable at run-time
  id: totrans-2137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在运行时选择 DB-API 模块
- en: 'References: [#419](https://www.sqlalchemy.org/trac/ticket/419)'
  id: totrans-2138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#419](https://www.sqlalchemy.org/trac/ticket/419)
- en: '**[mssql] [415] [481] [tickets:422]**'
  id: totrans-2139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [415] [481] [tickets:422]**'
- en: now passes many more unit tests
  id: totrans-2140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在通过了更多的单元测试
- en: '**[mssql]**'
  id: totrans-2141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: better unittest compatibility with ANSI functions
  id: totrans-2142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 ANSI 函数的自动单元测试兼容性更好
- en: 'References: [#479](https://www.sqlalchemy.org/trac/ticket/479)'
  id: totrans-2143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#479](https://www.sqlalchemy.org/trac/ticket/479)
- en: '**[mssql]**'
  id: totrans-2144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: improved support for implicit sequence PK columns with auto-insert
  id: totrans-2145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对具有自动插入的隐式序列 PK 列的支持改进
- en: 'References: [#415](https://www.sqlalchemy.org/trac/ticket/415)'
  id: totrans-2146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#415](https://www.sqlalchemy.org/trac/ticket/415)
- en: '**[mssql]**'
  id: totrans-2147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix for blank password in adodbapi
  id: totrans-2148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 adodbapi 中空密码的问题
- en: 'References: [#371](https://www.sqlalchemy.org/trac/ticket/371)'
  id: totrans-2149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#371](https://www.sqlalchemy.org/trac/ticket/371)
- en: '**[mssql]**'
  id: totrans-2150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fixes to get unit tests working with pyodbc
  id: totrans-2151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了与 pyodbc 一起使用单元测试的问题
- en: 'References: [#481](https://www.sqlalchemy.org/trac/ticket/481)'
  id: totrans-2152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#481](https://www.sqlalchemy.org/trac/ticket/481)
- en: '**[mssql]**'
  id: totrans-2153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix to auto_identity_insert on db-url query
  id: totrans-2154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 db-url 查询中的 auto_identity_insert 问题
- en: '**[mssql]**'
  id: totrans-2155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: added query_timeout to db-url query params. currently works only for pymssql
  id: totrans-2156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 db-url 查询参数中添加了 query_timeout。 目前仅对 pymssql 有效
- en: '**[mssql]**'
  id: totrans-2157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: tested with pymssql 0.8.0 (which is now LGPL)
  id: totrans-2158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用了 pymssql 0.8.0 进行了测试（现在是 LGPL）
- en: oracle
  id: totrans-2159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: when returning “rowid” as the ORDER BY column or in use with ROW_NUMBER OVER,
    oracle dialect checks the selectable its being applied to and will switch to table
    PK if not applicable, i.e. for a UNION. checking for DISTINCT, GROUP BY (other
    places that rowid is invalid) still a TODO. allows polymorphic mappings to function.
  id: totrans-2161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在返回“rowid”作为 ORDER BY 列或与 ROW_NUMBER OVER 一起使用时，oracle 方言会检查其应用于的可选择项，并在不适用时切换到表
    PK，即对于 UNION。 检查 DISTINCT、GROUP BY（rowid 无效的其他地方）仍然是一个 TODO。 允许多态映射功能。
- en: 'References: [#436](https://www.sqlalchemy.org/trac/ticket/436)'
  id: totrans-2162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#436](https://www.sqlalchemy.org/trac/ticket/436)
- en: '**[oracle]**'
  id: totrans-2163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: sequences on a non-pk column will properly fire off on INSERT
  id: totrans-2164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非主键列上的序列现在在插入时会正确触发
- en: '**[oracle]**'
  id: totrans-2165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added PrefetchingResultProxy support to pre-fetch LOB columns when they are
    known to be present, fixes
  id: totrans-2166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 PrefetchingResultProxy 的支持，以在已知存在时预提取 LOB 列，修复
- en: 'References: [#435](https://www.sqlalchemy.org/trac/ticket/435)'
  id: totrans-2167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#435](https://www.sqlalchemy.org/trac/ticket/435)
- en: '**[oracle]**'
  id: totrans-2168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: implemented reflection of tables based on synonyms, including across dblinks
  id: totrans-2169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了基于同义词的表反射，包括跨数据库链接的反射
- en: 'References: [#379](https://www.sqlalchemy.org/trac/ticket/379)'
  id: totrans-2170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#379](https://www.sqlalchemy.org/trac/ticket/379)
- en: '**[oracle]**'
  id: totrans-2171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: issues a log warning when a related table can’t be reflected due to certain
    permission errors
  id: totrans-2172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当由于某些权限错误而无法反映相关表时，会发出日志警告
- en: 'References: [#363](https://www.sqlalchemy.org/trac/ticket/363)'
  id: totrans-2173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#363](https://www.sqlalchemy.org/trac/ticket/363)
- en: misc
  id: totrans-2174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[postgres]**'
  id: totrans-2175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: better reflection of sequences for alternate-schema Tables
  id: totrans-2176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更好地反映了交替模式表的序列
- en: 'References: [#442](https://www.sqlalchemy.org/trac/ticket/442)'
  id: totrans-2177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#442](https://www.sqlalchemy.org/trac/ticket/442)
- en: '**[postgres]**'
  id: totrans-2178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: sequences on a non-pk column will properly fire off on INSERT
  id: totrans-2179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 非主键列上的序列现在在插入时会正确触发
- en: '**[postgres]**'
  id: totrans-2180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: added PGInterval type, PGInet type
  id: totrans-2181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 PGInterval 类型，PGInet 类型
- en: 'References: [#444](https://www.sqlalchemy.org/trac/ticket/444), [#460](https://www.sqlalchemy.org/trac/ticket/460)'
  id: totrans-2182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#444](https://www.sqlalchemy.org/trac/ticket/444), [#460](https://www.sqlalchemy.org/trac/ticket/460)
- en: orm
  id: totrans-2183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm] [bugs]**'
  id: totrans-2184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: another refactoring to relationship calculation. Allows more accurate ORM behavior
    with relationships from/to/between mappers, particularly polymorphic mappers,
    also their usage with Query, SelectResults. tickets include,,.
  id: totrans-2185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对关系计算进行了进一步的重构。 允许更准确的 ORM 行为，包括来自/到/之间的映射器，特别是多态映射器，以及它们与 Query、SelectResults
    的使用。 票据包括,,。
- en: 'References: [#439](https://www.sqlalchemy.org/trac/ticket/439), [#441](https://www.sqlalchemy.org/trac/ticket/441),
    [#448](https://www.sqlalchemy.org/trac/ticket/448)'
  id: totrans-2186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#439](https://www.sqlalchemy.org/trac/ticket/439), [#441](https://www.sqlalchemy.org/trac/ticket/441),
    [#448](https://www.sqlalchemy.org/trac/ticket/448)
- en: '**[orm] [bugs]**'
  id: totrans-2187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: removed deprecated method of specifying custom collections on classes; you must
    now use the “collection_class” option. the old way was beginning to produce conflicts
    when people used assign_mapper(), which now patches an “options” method, in conjunction
    with a relationship named “options”. (relationships take precedence over monkeypatched
    assign_mapper methods).
  id: totrans-2188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移除了在类上指定自定义集合的已弃用方法；现在必须使用“collection_class”选项。旧方法开始在人们使用 assign_mapper() 时产生冲突，现在它会修补一个“options”方法，与一个名为“options”的关系一起使用（关系优先于
    monkeypatched assign_mapper 方法）。
- en: '**[orm] [bugs]**'
  id: totrans-2189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: extension() query option propagates to Mapper._instance() method so that all
    loading-related methods get called
  id: totrans-2190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: extension() 查询选项传播到 Mapper._instance() 方法，以便调用所有与加载相关的方法
- en: 'References: [#454](https://www.sqlalchemy.org/trac/ticket/454)'
  id: totrans-2191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#454](https://www.sqlalchemy.org/trac/ticket/454)
- en: '**[orm] [bugs]**'
  id: totrans-2192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: eager relation to an inheriting mapper won’t fail if no rows returned for the
    relationship.
  id: totrans-2193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果关系到一个继承的映射器，即使关系没有返回任何行也不会失败。
- en: '**[orm] [bugs]**'
  id: totrans-2194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: eager relation loading bug fixed for eager relation on multiple descendant classes
  id: totrans-2195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了多个后代类上急切关系加载的 bug
- en: 'References: [#486](https://www.sqlalchemy.org/trac/ticket/486)'
  id: totrans-2196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#486](https://www.sqlalchemy.org/trac/ticket/486)
- en: '**[orm] [bugs]**'
  id: totrans-2197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: fix for very large topological sorts, courtesy ants.aasma at gmail
  id: totrans-2198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了非常大的拓扑排序的 bug，感谢 ants.aasma@gmail
- en: 'References: [#423](https://www.sqlalchemy.org/trac/ticket/423)'
  id: totrans-2199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#423](https://www.sqlalchemy.org/trac/ticket/423)
- en: '**[orm] [bugs]**'
  id: totrans-2200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: eager loading is slightly more strict about detecting “self-referential” relationships,
    specifically between polymorphic mappers. this results in an “eager degrade” to
    lazy loading.
  id: totrans-2201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: eager loading 对于检测“自引用”关系稍微更加严格，特别是在多态映射器之间。这会导致“急切降级”到懒加载。
- en: '**[orm] [bugs]**'
  id: totrans-2202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: improved support for complex queries embedded into “where” criterion for query.select()
  id: totrans-2203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了嵌入到查询.select() 的“where”条件中的复杂查询的支持
- en: 'References: [#449](https://www.sqlalchemy.org/trac/ticket/449)'
  id: totrans-2204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#449](https://www.sqlalchemy.org/trac/ticket/449)
- en: '**[orm] [bugs]**'
  id: totrans-2205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: mapper options like eagerload(), lazyload(), deferred(), will work for “synonym()”
    relationships
  id: totrans-2206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mapper 选项如 eagerload()、lazyload()、deferred()，将适用于“synonym()”关系
- en: 'References: [#485](https://www.sqlalchemy.org/trac/ticket/485)'
  id: totrans-2207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#485](https://www.sqlalchemy.org/trac/ticket/485)
- en: '**[orm] [bugs]**'
  id: totrans-2208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: fixed bug where cascade operations incorrectly included deleted collection items
    in the cascade
  id: totrans-2209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了级联操作错误地将已删除的集合项包含在级联中的 bug
- en: 'References: [#445](https://www.sqlalchemy.org/trac/ticket/445)'
  id: totrans-2210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#445](https://www.sqlalchemy.org/trac/ticket/445)
- en: '**[orm] [bugs]**'
  id: totrans-2211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: fixed relationship deletion error when one-to-many child item is moved to a
    new parent in a single unit of work
  id: totrans-2212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在单个工作单元中将一对多子项移动到新父项时，修复了关系删除错误
- en: 'References: [#478](https://www.sqlalchemy.org/trac/ticket/478)'
  id: totrans-2213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#478](https://www.sqlalchemy.org/trac/ticket/478)
- en: '**[orm] [bugs]**'
  id: totrans-2214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: fixed relationship deletion error where parent/child with a single column as
    PK/FK on the child would raise a “blank out the primary key” error, if manually
    deleted or “delete” cascade without “delete-orphan” was used
  id: totrans-2215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了关系删除错误，其中父/子项的主键/外键只有一个列时，如果手动删除或使用“delete”级联而没有使用“delete-orphan”，则会引发“清空主键”错误
- en: '**[orm] [bugs]**'
  id: totrans-2216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [bugs]**'
- en: fix to deferred so that load operation doesn’t mistakenly occur when only PK
    col attributes are set
  id: totrans-2217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了延迟加载，以便在只设置了 PK 列属性时不会错误地发生加载操作
- en: '**[orm] [enhancements]**'
  id: totrans-2218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [enhancements]**'
- en: implemented foreign_keys argument to mapper. use in conjunction with primaryjoin/secondaryjoin
    arguments to specify/override foreign keys defined on the Table instance.
  id: totrans-2219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实现了 mapper 的 foreign_keys 参数。与 primaryjoin/secondaryjoin 参数一起使用，用于指定/覆盖在 Table
    实例上定义的外键。
- en: 'References: [#385](https://www.sqlalchemy.org/trac/ticket/385)'
  id: totrans-2220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#385](https://www.sqlalchemy.org/trac/ticket/385)
- en: '**[orm] [enhancements]**'
  id: totrans-2221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [enhancements]**'
- en: contains_eager(‘foo’) automatically implies eagerload(‘foo’)
  id: totrans-2222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: contains_eager('foo') 自动意味着 eagerload('foo')
- en: '**[orm] [enhancements]**'
  id: totrans-2223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [enhancements]**'
- en: added “alias” argument to contains_eager(). use it to specify the string name
    or Alias instance of an alias used in the query for the eagerly loaded child items.
    easier to use than “decorator”
  id: totrans-2224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为 contains_eager() 添加了“alias”参数。使用它来指定查询中用于急切加载子项的别名的字符串名称或 Alias 实例。比“decorator”更容易使用
- en: '**[orm] [enhancements]**'
  id: totrans-2225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [enhancements]**'
- en: added “contains_alias()” option for result set mapping to an alias of the mapped
    table
  id: totrans-2226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为映射到映射表的别名的结果集映射添加了“contains_alias()”选项
- en: '**[orm] [enhancements]**'
  id: totrans-2227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm] [enhancements]**'
- en: added support for py2.5 “with” statement with SessionTransaction
  id: totrans-2228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对py2.5“with”语句与SessionTransaction的支持
- en: 'References: [#468](https://www.sqlalchemy.org/trac/ticket/468)'
  id: totrans-2229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#468](https://www.sqlalchemy.org/trac/ticket/468)
- en: sql
  id: totrans-2230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the value of “case_sensitive” defaults to True now, regardless of the casing
    of the identifier, unless specifically set to False. this is because the object
    might be label’ed as something else which does contain mixed case, and propagating
    “case_sensitive=False” breaks that. Other fixes to quoting when using labels and
    “fake” column objects
  id: totrans-2232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “case_sensitive”的值现在默认为True，不管标识符的大小写如何，除非明确设置为False。这是因为对象可能被标记为其他内容，其中包含混合大小写，传播“case_sensitive=False”会破坏这一点。在使用标签和“fake”列对象时修复引用的其他修复
- en: '**[sql]**'
  id: totrans-2233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added a “supports_execution()” method to ClauseElement, so that individual kinds
    of clauses can express if they are appropriate for executing…such as, you can
    execute a “select”, but not a “Table” or a “Join”.
  id: totrans-2234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ClauseElement中添加了一个“supports_execution()”方法，以便各种类型的子句可以表达是否适合执行...例如，您可以执行“select”，但不能执行“Table”或“Join”。
- en: '**[sql]**'
  id: totrans-2235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed argument passing to straight textual execute() on engine, connection.
    can handle *args or a list instance for positional, **kwargs or a dict instance
    for named args, or a list of list or dicts to invoke executemany()
  id: totrans-2236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对引擎、连接上直接文本执行execute()的参数传递，可以处理*args或用于位置参数的列表实例，**kwargs或用于命名参数的字典实例，或用于调用executemany()的列表列表或字典
- en: '**[sql]**'
  id: totrans-2237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: small fix to BoundMetaData to accept unicode or string URLs
  id: totrans-2238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对BoundMetaData进行了小修复，以接受unicode或字符串URL
- en: '**[sql]**'
  id: totrans-2239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed named PrimaryKeyConstraint generation courtesy andrija at gmail
  id: totrans-2240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了由andrija at gmail提供的命名PrimaryKeyConstraint生成
- en: 'References: [#466](https://www.sqlalchemy.org/trac/ticket/466)'
  id: totrans-2241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#466](https://www.sqlalchemy.org/trac/ticket/466)
- en: '**[sql]**'
  id: totrans-2242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixed generation of CHECK constraints on columns
  id: totrans-2243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在列上生成CHECK约束
- en: 'References: [#464](https://www.sqlalchemy.org/trac/ticket/464)'
  id: totrans-2244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#464](https://www.sqlalchemy.org/trac/ticket/464)
- en: '**[sql]**'
  id: totrans-2245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fixes to tometadata() operation to propagate Constraints at column and table
    level
  id: totrans-2246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了tometadata()操作以在列和表级别传播Constraints
- en: extensions
  id: totrans-2247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: extensions
- en: '**[extensions]**'
  id: totrans-2248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: added distinct() method to SelectResults. generally should only make a difference
    when using count().
  id: totrans-2249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SelectResults中添加了distinct()方法。通常只在使用count()时才会有所不同。
- en: '**[extensions]**'
  id: totrans-2250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: added options() method to SelectResults, equivalent to query.options()
  id: totrans-2251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SelectResults中添加了options()方法，相当于query.options()
- en: 'References: [#472](https://www.sqlalchemy.org/trac/ticket/472)'
  id: totrans-2252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#472](https://www.sqlalchemy.org/trac/ticket/472)
- en: '**[extensions]**'
  id: totrans-2253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: added optional __table_opts__ dictionary to ActiveMapper, will send kw options
    to Table objects
  id: totrans-2254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ActiveMapper中添加了可选的__table_opts__字典，将kw选项发送到Table对象
- en: 'References: [#462](https://www.sqlalchemy.org/trac/ticket/462)'
  id: totrans-2255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#462](https://www.sqlalchemy.org/trac/ticket/462)
- en: '**[extensions]**'
  id: totrans-2256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: added selectfirst(), selectfirst_by() to assign_mapper
  id: totrans-2257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在assign_mapper中添加了selectfirst()、selectfirst_by()
- en: 'References: [#467](https://www.sqlalchemy.org/trac/ticket/467)'
  id: totrans-2258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#467](https://www.sqlalchemy.org/trac/ticket/467)
- en: mysql
  id: totrans-2259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: fix to reflection on older DB’s that might return array() type for “show variables
    like” statements
  id: totrans-2261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在旧DB上可能返回“show variables like”语句的array()类型的反射
- en: mssql
  id: totrans-2262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: preliminary support for pyodbc (Yay!)
  id: totrans-2264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对pyodbc进行了初步支持（耶！）
- en: 'References: [#419](https://www.sqlalchemy.org/trac/ticket/419)'
  id: totrans-2265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#419](https://www.sqlalchemy.org/trac/ticket/419)
- en: '**[mssql]**'
  id: totrans-2266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: better support for NVARCHAR types added
  id: totrans-2267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对NVARCHAR类型的更好支持
- en: 'References: [#298](https://www.sqlalchemy.org/trac/ticket/298)'
  id: totrans-2268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#298](https://www.sqlalchemy.org/trac/ticket/298)
- en: '**[mssql]**'
  id: totrans-2269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix for commit logic on pymssql
  id: totrans-2270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了pymssql上的提交逻辑
- en: '**[mssql]**'
  id: totrans-2271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix for query.get() with schema
  id: totrans-2272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了带有模式的query.get()
- en: 'References: [#456](https://www.sqlalchemy.org/trac/ticket/456)'
  id: totrans-2273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#456](https://www.sqlalchemy.org/trac/ticket/456)
- en: '**[mssql]**'
  id: totrans-2274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix for non-integer relationships
  id: totrans-2275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了非整数关系
- en: 'References: [#473](https://www.sqlalchemy.org/trac/ticket/473)'
  id: totrans-2276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#473](https://www.sqlalchemy.org/trac/ticket/473)
- en: '**[mssql]**'
  id: totrans-2277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: DB-API module now selectable at run-time
  id: totrans-2278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以在运行时选择DB-API模块
- en: 'References: [#419](https://www.sqlalchemy.org/trac/ticket/419)'
  id: totrans-2279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#419](https://www.sqlalchemy.org/trac/ticket/419)
- en: '**[mssql] [415] [481] [tickets:422]**'
  id: totrans-2280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql] [415] [481] [tickets:422]**'
- en: now passes many more unit tests
  id: totrans-2281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在通过了更多的单元测试
- en: '**[mssql]**'
  id: totrans-2282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: better unittest compatibility with ANSI functions
  id: totrans-2283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与ANSI函数更好的unittest兼容性
- en: 'References: [#479](https://www.sqlalchemy.org/trac/ticket/479)'
  id: totrans-2284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#479](https://www.sqlalchemy.org/trac/ticket/479)
- en: '**[mssql]**'
  id: totrans-2285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: improved support for implicit sequence PK columns with auto-insert
  id: totrans-2286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了对具有自动插入的隐式序列PK列的支持
- en: 'References: [#415](https://www.sqlalchemy.org/trac/ticket/415)'
  id: totrans-2287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#415](https://www.sqlalchemy.org/trac/ticket/415)'
- en: '**[mssql]**'
  id: totrans-2288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix for blank password in adodbapi
  id: totrans-2289
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 adodbapi 中的空密码
- en: 'References: [#371](https://www.sqlalchemy.org/trac/ticket/371)'
  id: totrans-2290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#371](https://www.sqlalchemy.org/trac/ticket/371)'
- en: '**[mssql]**'
  id: totrans-2291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fixes to get unit tests working with pyodbc
  id: totrans-2292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复以使单元测试与 pyodbc 正常工作
- en: 'References: [#481](https://www.sqlalchemy.org/trac/ticket/481)'
  id: totrans-2293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#481](https://www.sqlalchemy.org/trac/ticket/481)'
- en: '**[mssql]**'
  id: totrans-2294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: fix to auto_identity_insert on db-url query
  id: totrans-2295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 db-url 查询上的 auto_identity_insert
- en: '**[mssql]**'
  id: totrans-2296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: added query_timeout to db-url query params. currently works only for pymssql
  id: totrans-2297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 db-url 查询参数中添加了 query_timeout。目前仅对 pymssql 有效
- en: '**[mssql]**'
  id: totrans-2298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: tested with pymssql 0.8.0 (which is now LGPL)
  id: totrans-2299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 pymssql 0.8.0 进行测试（现在是 LGPL）
- en: oracle
  id: totrans-2300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: when returning “rowid” as the ORDER BY column or in use with ROW_NUMBER OVER,
    oracle dialect checks the selectable its being applied to and will switch to table
    PK if not applicable, i.e. for a UNION. checking for DISTINCT, GROUP BY (other
    places that rowid is invalid) still a TODO. allows polymorphic mappings to function.
  id: totrans-2302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当返回 "rowid" 作为 ORDER BY 列或与 ROW_NUMBER OVER 一起使用时，oracle 方言会检查其被应用的可选择对象，并在不适用时切换到表
    PK，即对于 UNION。检查 DISTINCT、GROUP BY（其他位置无效的 rowid）仍然是一个 TODO。允许多态映射功能。
- en: 'References: [#436](https://www.sqlalchemy.org/trac/ticket/436)'
  id: totrans-2303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#436](https://www.sqlalchemy.org/trac/ticket/436)'
- en: '**[oracle]**'
  id: totrans-2304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: sequences on a non-pk column will properly fire off on INSERT
  id: totrans-2305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在非主键列上的序列将会正确地在插入时触发
- en: '**[oracle]**'
  id: totrans-2306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: added PrefetchingResultProxy support to pre-fetch LOB columns when they are
    known to be present, fixes
  id: totrans-2307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 PrefetchingResultProxy 支持以在已知存在时预取 LOB 列，修复
- en: 'References: [#435](https://www.sqlalchemy.org/trac/ticket/435)'
  id: totrans-2308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#435](https://www.sqlalchemy.org/trac/ticket/435)'
- en: '**[oracle]**'
  id: totrans-2309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: implemented reflection of tables based on synonyms, including across dblinks
  id: totrans-2310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据同义词反射表的实现，包括跨数据库链接的情况
- en: 'References: [#379](https://www.sqlalchemy.org/trac/ticket/379)'
  id: totrans-2311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#379](https://www.sqlalchemy.org/trac/ticket/379)'
- en: '**[oracle]**'
  id: totrans-2312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: issues a log warning when a related table can’t be reflected due to certain
    permission errors
  id: totrans-2313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在由于某些权限错误而无法反射相关表时，记录警告
- en: 'References: [#363](https://www.sqlalchemy.org/trac/ticket/363)'
  id: totrans-2314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#363](https://www.sqlalchemy.org/trac/ticket/363)'
- en: misc
  id: totrans-2315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[postgres]**'
  id: totrans-2316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: better reflection of sequences for alternate-schema Tables
  id: totrans-2317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更好地反射了备用模式表的序列
- en: 'References: [#442](https://www.sqlalchemy.org/trac/ticket/442)'
  id: totrans-2318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#442](https://www.sqlalchemy.org/trac/ticket/442)'
- en: '**[postgres]**'
  id: totrans-2319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: sequences on a non-pk column will properly fire off on INSERT
  id: totrans-2320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在非主键列上的序列将会正确地在插入时触发
- en: '**[postgres]**'
  id: totrans-2321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: added PGInterval type, PGInet type
  id: totrans-2322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 PGInterval 类型，PGInet 类型
- en: 'References: [#444](https://www.sqlalchemy.org/trac/ticket/444), [#460](https://www.sqlalchemy.org/trac/ticket/460)'
  id: totrans-2323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '参考: [#444](https://www.sqlalchemy.org/trac/ticket/444), [#460](https://www.sqlalchemy.org/trac/ticket/460)'
- en: 0.3.4
  id: totrans-2324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.4
- en: 'Released: Tue Jan 23 2007'
  id: totrans-2325
  prefs: []
  type: TYPE_NORMAL
  zh: '发布日期: 2007年1月23日 星期二'
- en: general
  id: totrans-2326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general]**'
  id: totrans-2327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[一般]**'
- en: global “insure”->”ensure” change. in US english “insure” is actually largely
    interchangeable with “ensure” (so says the dictionary), so I’m not completely
    illiterate, but its definitely sub-optimal to “ensure” which is non-ambiguous.
  id: totrans-2328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 全局的 "保险"->"确保" 更改。在美国英语中，“保险”实际上与“确保”在很大程度上是可以互换的（字典上是这样说的），所以我不完全是文盲，但是“确保”是非歧义的，绝对是次优的。
- en: orm
  id: totrans-2329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'poked the first hole in the can of worms: saying query.select_by(somerelationname=someinstance)
    will create the join of the primary key columns represented by “somerelationname“‘s
    mapper to the actual primary key in “someinstance”.'
  id: totrans-2331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '在打开"一罐蠕虫"的第一个孔的时候: 说 query.select_by(somerelationname=someinstance) 将会创建由 "somerelationname"
    的映射器表示的主键列与 "someinstance" 中实际主键的连接。'
- en: '**[orm]**'
  id: totrans-2332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: reworked how relations interact with “polymorphic” mappers, i.e. mappers that
    have a select_table as well as polymorphic flags. better determination of proper
    join conditions, interaction with user- defined join conditions, and support for
    self-referential polymorphic mappers.
  id: totrans-2333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了关系如何与 "多态" 映射器交互，即具有 select_table 和多态标志的映射器。更好地确定适当的连接条件，与用户定义的连接条件的交互，以及支持自引用多态映射器。
- en: '**[orm]**'
  id: totrans-2334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: related to polymorphic mapping relations, some deeper error checking when compiling
    relations, to detect an ambiguous “primaryjoin” in the case that both sides of
    the relationship have foreign key references in the primary join condition. also
    tightened down conditions used to locate “relation direction”, associating the
    “foreignkey” of the relationship with the “primaryjoin”
  id: totrans-2335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于多态映射关系，当编译关系时进行了一些更深入的错误检查，以检测在关系的两侧都具有外键引用的情况下的模糊“primaryjoin”。还加强了用于定位“关系方向”的条件，将关系的“外键”与“primaryjoin”关联起来
- en: '**[orm]**'
  id: totrans-2336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a little bit of improvement to the concept of a “concrete” inheritance mapping,
    though that concept is not well fleshed out yet (added test case to support concrete
    mappers on top of a polymorphic base).
  id: totrans-2337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“具体”继承映射概念稍作改进，尽管该概念尚未完全明确（添加测试用例以支持在多态基础上的具体映射）。
- en: '**[orm]**'
  id: totrans-2338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to “proxy=True” behavior on synonym()
  id: totrans-2339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在synonym()上的“proxy=True”行为
- en: '**[orm]**'
  id: totrans-2340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug where delete-orphan basically didn’t work with many-to-many relationships,
    backref presence generally hid the symptom
  id: totrans-2341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了删除孤儿基本上无法与多对多关系一起工作的错误，反向引用通常隐藏了症状
- en: 'References: [#427](https://www.sqlalchemy.org/trac/ticket/427)'
  id: totrans-2342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#427](https://www.sqlalchemy.org/trac/ticket/427)
- en: '**[orm]**'
  id: totrans-2343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added a mutex to the mapper compilation step. ive been reluctant to add any
    kind of threading anything to SA but this is one spot that its really needed since
    mappers are typically “global”, and while their state does not change during normal
    operation, the initial compilation step does modify internal state significantly,
    and this step usually occurs not at module-level initialization time (unless you
    call compile()) but at first-request time
  id: totrans-2344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在映射器编译步骤中添加了互斥锁。我一直不愿意在SA中添加任何线程内容，但这是真正需要的一个地方，因为映射器通常是“全局”的，虽然它们的状态在正常操作期间不会改变，但初始编译步骤会显著修改内部状态，并且这一步通常不会发生在模块级别的初始化时间（除非您调用compile()），而是在第一次请求时
- en: '**[orm]**'
  id: totrans-2345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: basic idea of “session.merge()” actually implemented. needs more testing.
  id: totrans-2346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实际实现了“session.merge()”的基本概念。需要更多测试。
- en: '**[orm]**'
  id: totrans-2347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “compile_mappers()” function as a shortcut to compiling all mappers
  id: totrans-2348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“compile_mappers()”函数作为编译所有映射器的快捷方式
- en: '**[orm]**'
  id: totrans-2349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to MapperExtension create_instance so that entity_name properly associated
    with new instance
  id: totrans-2350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了MapperExtension create_instance，以便entity_name正确关联到新实例
- en: '**[orm]**'
  id: totrans-2351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: speed enhancements to ORM object instantiation, eager loading of rows
  id: totrans-2352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ORM对象实例化速度提升，行的急加载
- en: '**[orm]**'
  id: totrans-2353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: invalid options sent to ‘cascade’ string will raise an exception
  id: totrans-2354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 发送到“cascade”字符串的无效选项将引发异常
- en: 'References: [#406](https://www.sqlalchemy.org/trac/ticket/406)'
  id: totrans-2355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#406](https://www.sqlalchemy.org/trac/ticket/406)
- en: '**[orm]**'
  id: totrans-2356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug in mapper refresh/expire whereby eager loaders didn’t properly re-populate
    item lists
  id: totrans-2357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了映射器刷新/过期中的错误，急加载器未正确重新填充项目列表
- en: 'References: [#407](https://www.sqlalchemy.org/trac/ticket/407)'
  id: totrans-2358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#407](https://www.sqlalchemy.org/trac/ticket/407)
- en: '**[orm]**'
  id: totrans-2359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to post_update to ensure rows are updated even for non insert/delete scenarios
  id: totrans-2360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了post_update以确保即使在非插入/删除场景下也更新行
- en: 'References: [#413](https://www.sqlalchemy.org/trac/ticket/413)'
  id: totrans-2361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#413](https://www.sqlalchemy.org/trac/ticket/413)
- en: '**[orm]**'
  id: totrans-2362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added an error message if you actually try to modify primary key values on an
    entity and then flush it
  id: totrans-2363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您尝试修改实体的主键值然后刷新它，将添加错误消息
- en: 'References: [#412](https://www.sqlalchemy.org/trac/ticket/412)'
  id: totrans-2364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#412](https://www.sqlalchemy.org/trac/ticket/412)
- en: sql
  id: totrans-2365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added “fetchmany()” support to ResultProxy
  id: totrans-2367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“fetchmany()”支持到ResultProxy
- en: '**[sql]**'
  id: totrans-2368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added support for column “key” attribute to be usable in row[<key>]/row.<key>
  id: totrans-2369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对列“key”属性在row[<key>]/row.<key>中可用的支持
- en: '**[sql]**'
  id: totrans-2370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: changed “BooleanExpression” to subclass from “BinaryExpression”, so that boolean
    expressions can also follow column-clause behaviors (i.e. label(), etc).
  id: totrans-2371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“BooleanExpression”更改为从“BinaryExpression”继承，以便布尔表达式也可以遵循列子句行为（例如label()等）。
- en: '**[sql]**'
  id: totrans-2372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: trailing underscores are trimmed from func.<xxx> calls, such as func.if_()
  id: totrans-2373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从func.<xxx>调用中修剪尾随下划线，例如func.if_()
- en: '**[sql]**'
  id: totrans-2374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fix to correlation of subqueries when the column list of the select statement
    is constructed with individual calls to append_column(); this fixes an ORM bug
    whereby nested select statements were not getting correlated with the main select
    generated by the Query object.
  id: totrans-2375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当通过单独调用append_column()构建选择语句的列列表时，子查询的相关性；这修复了ORM错误，即嵌套的选择语句未与Query对象生成的主选择相关联。
- en: '**[sql]**'
  id: totrans-2376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: another fix to subquery correlation so that a subquery which has only one FROM
    element will *not* correlate that single element, since at least one FROM element
    is required in a query.
  id: totrans-2377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另一个修复子查询相关性的方法，以便仅当子查询只有一个FROM元素时*不*相关联该单个元素，因为查询中至少需要一个FROM元素。
- en: '**[sql]**'
  id: totrans-2378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: default “timezone” setting is now False. this corresponds to Python’s datetime
    behavior as well as Postgres’ timestamp/time types (which is the only timezone-sensitive
    dialect at the moment)
  id: totrans-2379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认���“timezone”设置现在为False。这对应于Python的datetime行为以及Postgres的timestamp/time类型（目前是唯一有时区敏感的方言）
- en: 'References: [#414](https://www.sqlalchemy.org/trac/ticket/414)'
  id: totrans-2380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#414](https://www.sqlalchemy.org/trac/ticket/414)
- en: '**[sql]**'
  id: totrans-2381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “op()” function is now treated as an “operation”, rather than a “comparison”.
    the difference is, an operation produces a BinaryExpression from which further
    operations can occur whereas comparison produces the more restrictive BooleanExpression
  id: totrans-2382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “op()”函数现在被视为“操作”，而不是“比较”。区别在于，操作产生一个BinaryExpression，可以进行进一步的操作，而比较产生更严格的BooleanExpression
- en: '**[sql]**'
  id: totrans-2383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: trying to redefine a reflected primary key column as non-primary key raises
    an error
  id: totrans-2384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尝试将反射的主键列重新定义为非主键会引发错误
- en: '**[sql]**'
  id: totrans-2385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: type system slightly modified to support TypeDecorators that can be overridden
    by the dialect (ok, that’s not very clear, it allows the mssql tweak below to
    be possible)
  id: totrans-2386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型系统略有修改，以支持可以被方言覆盖的TypeDecorators（好吧，这不太清楚，它允许下面的mssql调整成为可能）
- en: extensions
  id: totrans-2387
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: extensions
- en: '**[extensions]**'
  id: totrans-2388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: added “validate=False” argument to assign_mapper, if True will ensure that only
    mapped attributes are named
  id: totrans-2389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在assign_mapper中添加了“validate=False”参数，如果为True，则确保只有映射的属性被命名
- en: 'References: [#426](https://www.sqlalchemy.org/trac/ticket/426)'
  id: totrans-2390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#426](https://www.sqlalchemy.org/trac/ticket/426)
- en: '**[extensions]**'
  id: totrans-2391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: assign_mapper gets “options”, “instances” functions added (i.e. MyClass.instances())
  id: totrans-2392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: assign_mapper添加了“options”、“instances”函数（即MyClass.instances()）
- en: mysql
  id: totrans-2393
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: mysql is inconsistent with what kinds of quotes it uses in foreign keys during
    a SHOW CREATE TABLE, reflection updated to accommodate for all three styles
  id: totrans-2395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql在SHOW CREATE TABLE期间使用的外键引号类型不一致，反射已更新以适应所有三种样式
- en: 'References: [#420](https://www.sqlalchemy.org/trac/ticket/420)'
  id: totrans-2396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#420](https://www.sqlalchemy.org/trac/ticket/420)
- en: '**[mysql]**'
  id: totrans-2397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: mysql table create options work on a generic passthru now, i.e. Table(…, mysql_engine=’InnoDB’,
    mysql_collate=”latin1_german2_ci”, mysql_auto_increment=”5”, mysql_<somearg>…),
    helps
  id: totrans-2398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql表创建选项现在可以通用传递，即Table(…, mysql_engine=’InnoDB’, mysql_collate=”latin1_german2_ci”,
    mysql_auto_increment=”5”, mysql_<somearg>…), 有助于
- en: 'References: [#418](https://www.sqlalchemy.org/trac/ticket/418)'
  id: totrans-2399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#418](https://www.sqlalchemy.org/trac/ticket/418)
- en: mssql
  id: totrans-2400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: added an NVarchar type (produces NVARCHAR), also MSUnicode which provides Unicode-translation
    for the NVarchar regardless of dialect convert_unicode setting.
  id: totrans-2402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个NVarchar类型（产生NVARCHAR），还有一个提供Unicode翻译的MSUnicode，无论方言convert_unicode设置如何。
- en: oracle
  id: totrans-2403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: '*slight* support for binary, but still need to figure out how to insert reasonably
    large values (over 4K). requires auto_setinputsizes=True sent to create_engine(),
    rows must be fully fetched individually, etc.'
  id: totrans-2405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*轻微*支持二进制，但仍需弄清如何插入相当大的值（超过4K）。需要将auto_setinputsizes=True发送到create_engine()，行必须逐个完全获取，等等。'
- en: misc
  id: totrans-2406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[postgres]**'
  id: totrans-2407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: fix to the initial checkfirst for tables to take current schema into account
  id: totrans-2408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复对表的初始checkfirst以考虑当前模式
- en: 'References: [#424](https://www.sqlalchemy.org/trac/ticket/424)'
  id: totrans-2409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#424](https://www.sqlalchemy.org/trac/ticket/424)
- en: '**[postgres]**'
  id: totrans-2410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: postgres has an optional “server_side_cursors=True” flag which will utilize
    server side cursors. these are appropriate for fetching only partial results and
    are necessary for working with very large unbounded result sets. While we’d like
    this to be the default behavior, different environments seem to have different
    results and the causes have not been isolated so we are leaving the feature off
    by default for now. Uses an apparently undocumented psycopg2 behavior recently
    discovered on the psycopg mailing list.
  id: totrans-2411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgres有一个可选的“server_side_cursors=True”标志，将利用服务器端游标。这些适用于仅获取部分结果并且必须处理非常大的无界结果集。虽然我们希望这成为默认行为，但不同的环境似乎有不同的结果，原因尚未被分离，因此我们目前将该功能默认关闭。使用了最近在psycopg邮件列表上发现的一个显然未记录的psycopg2行为。
- en: '**[postgres]**'
  id: totrans-2412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: added “BIGSERIAL” support for postgres table with PGBigInteger/autoincrement
  id: totrans-2413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为postgres表添加了“BIGSERIAL”支持，具有PGBigInteger/autoincrement
- en: '**[postgres]**'
  id: totrans-2414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: fixes to postgres reflection to better handle when schema names are present;
    thanks to jason (at) ncsmags.com
  id: totrans-2415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 postgres 反射以更好处理存在模式名称时的情况；感谢 jason (at) ncsmags.com
- en: 'References: [#402](https://www.sqlalchemy.org/trac/ticket/402)'
  id: totrans-2416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#402](https://www.sqlalchemy.org/trac/ticket/402)
- en: '**[firebird]**'
  id: totrans-2417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: order of constraint creation puts primary key first before all other constraints;
    required for firebird, not a bad idea for others
  id: totrans-2418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 约束创建顺序将主键放在所有其他约束之前；对于 Firebird 是必需的，对于其他数据库也不是坏主意
- en: 'References: [#408](https://www.sqlalchemy.org/trac/ticket/408)'
  id: totrans-2419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#408](https://www.sqlalchemy.org/trac/ticket/408)
- en: '**[firebird]**'
  id: totrans-2420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Firebird fix to autoload multifield foreign keys
  id: totrans-2421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Firebird 自动加载多字段外键的问题
- en: 'References: [#409](https://www.sqlalchemy.org/trac/ticket/409)'
  id: totrans-2422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#409](https://www.sqlalchemy.org/trac/ticket/409)
- en: '**[firebird]**'
  id: totrans-2423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Firebird NUMERIC type properly handles a type without precision
  id: totrans-2424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird NUMERIC 类型正确处理没有精度的类型
- en: 'References: [#409](https://www.sqlalchemy.org/trac/ticket/409)'
  id: totrans-2425
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#409](https://www.sqlalchemy.org/trac/ticket/409)
- en: general
  id: totrans-2426
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general]**'
  id: totrans-2427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: global “insure”->”ensure” change. in US english “insure” is actually largely
    interchangeable with “ensure” (so says the dictionary), so I’m not completely
    illiterate, but its definitely sub-optimal to “ensure” which is non-ambiguous.
  id: totrans-2428
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 全局“insure”->“ensure”更改。在美国英语中，“insure”实际上与“ensure”在很大程度上是可以互换的（字典上是这么说的），所以我并不是完全文盲，但“ensure”明显更好，因为它是不含糊的。
- en: orm
  id: totrans-2429
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'poked the first hole in the can of worms: saying query.select_by(somerelationname=someinstance)
    will create the join of the primary key columns represented by “somerelationname“‘s
    mapper to the actual primary key in “someinstance”.'
  id: totrans-2431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在罐头中开了第一个洞：说 query.select_by(somerelationname=someinstance) 将创建“somerelationname”映射器表示的主键列与“someinstance”实际主键之间的连接。
- en: '**[orm]**'
  id: totrans-2432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: reworked how relations interact with “polymorphic” mappers, i.e. mappers that
    have a select_table as well as polymorphic flags. better determination of proper
    join conditions, interaction with user- defined join conditions, and support for
    self-referential polymorphic mappers.
  id: totrans-2433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计了关系与“多态”映射器的交互方式，即具有 select_table 和多态标志的映射器。更好地确定适当的连接条件，与用户定义的连接条件的交互，以及支持自引用多态映射器。
- en: '**[orm]**'
  id: totrans-2434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: related to polymorphic mapping relations, some deeper error checking when compiling
    relations, to detect an ambiguous “primaryjoin” in the case that both sides of
    the relationship have foreign key references in the primary join condition. also
    tightened down conditions used to locate “relation direction”, associating the
    “foreignkey” of the relationship with the “primaryjoin”
  id: totrans-2435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在编译关系时，与多态映射关系相关，在检测关系时进行了更深入的错误检查，以检测在关系的两侧都在主连接条件中具有外键引用的情况下的模棱两可的“primaryjoin”。还加强了用于定位“关系方向”的条件，将关系的“外键”与“primaryjoin”关联起来。
- en: '**[orm]**'
  id: totrans-2436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a little bit of improvement to the concept of a “concrete” inheritance mapping,
    though that concept is not well fleshed out yet (added test case to support concrete
    mappers on top of a polymorphic base).
  id: totrans-2437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“具体”继承映射概念进行了一点改进，尽管该概念尚未完全阐明（添加了支持在多态基础上使用具体映射器的测试用例）。
- en: '**[orm]**'
  id: totrans-2438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to “proxy=True” behavior on synonym()
  id: totrans-2439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 synonym() 上的“proxy=True”行为
- en: '**[orm]**'
  id: totrans-2440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug where delete-orphan basically didn’t work with many-to-many relationships,
    backref presence generally hid the symptom
  id: totrans-2441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了删除孤立基本上无法与多对多关系一起工作的错误，反向引用通常隐藏了症状
- en: 'References: [#427](https://www.sqlalchemy.org/trac/ticket/427)'
  id: totrans-2442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#427](https://www.sqlalchemy.org/trac/ticket/427)
- en: '**[orm]**'
  id: totrans-2443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added a mutex to the mapper compilation step. ive been reluctant to add any
    kind of threading anything to SA but this is one spot that its really needed since
    mappers are typically “global”, and while their state does not change during normal
    operation, the initial compilation step does modify internal state significantly,
    and this step usually occurs not at module-level initialization time (unless you
    call compile()) but at first-request time
  id: totrans-2444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在映射器编译步骤中添加了互斥锁。我一直不愿意在 SA 中添加任何线程相关的东西，但这是真正需要的地方，因为映射器通常是“全局”的，虽然它们的状态在正常操作期间不会改变，但初始编译步骤会显著修改内部状态，并且这一步通常不会在模块级别初始化时发生（除非调���
    compile()），而是在第一次请求时发生
- en: '**[orm]**'
  id: totrans-2445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: basic idea of “session.merge()” actually implemented. needs more testing.
  id: totrans-2446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 实际实现了“session.merge()”的基本思想。需要更多测试。
- en: '**[orm]**'
  id: totrans-2447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “compile_mappers()” function as a shortcut to compiling all mappers
  id: totrans-2448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了“compile_mappers()”函数作为编译所有映射器的快捷方式
- en: '**[orm]**'
  id: totrans-2449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to MapperExtension create_instance so that entity_name properly associated
    with new instance
  id: totrans-2450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MapperExtension create_instance，以便实体名称正确地与新实例关联
- en: '**[orm]**'
  id: totrans-2451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: speed enhancements to ORM object instantiation, eager loading of rows
  id: totrans-2452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 增加了 ORM 对象实例化、行的急切加载的速度优化
- en: '**[orm]**'
  id: totrans-2453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: invalid options sent to ‘cascade’ string will raise an exception
  id: totrans-2454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 发送给 'cascade' 字符串的无效选项将引发异常
- en: 'References: [#406](https://www.sqlalchemy.org/trac/ticket/406)'
  id: totrans-2455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#406](https://www.sqlalchemy.org/trac/ticket/406)
- en: '**[orm]**'
  id: totrans-2456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug in mapper refresh/expire whereby eager loaders didn’t properly re-populate
    item lists
  id: totrans-2457
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在 mapper 刷新/过期中的错误，因此急切加载器没有正确地重新填充项目列表
- en: 'References: [#407](https://www.sqlalchemy.org/trac/ticket/407)'
  id: totrans-2458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#407](https://www.sqlalchemy.org/trac/ticket/407)
- en: '**[orm]**'
  id: totrans-2459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to post_update to ensure rows are updated even for non insert/delete scenarios
  id: totrans-2460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 post_update 以确保即使对于非插入/删除场景，行也会被更新
- en: 'References: [#413](https://www.sqlalchemy.org/trac/ticket/413)'
  id: totrans-2461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#413](https://www.sqlalchemy.org/trac/ticket/413)
- en: '**[orm]**'
  id: totrans-2462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added an error message if you actually try to modify primary key values on an
    entity and then flush it
  id: totrans-2463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您实际尝试修改实体上的主键值，然后刷新它，将添加错误消息
- en: 'References: [#412](https://www.sqlalchemy.org/trac/ticket/412)'
  id: totrans-2464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#412](https://www.sqlalchemy.org/trac/ticket/412)
- en: sql
  id: totrans-2465
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql]**'
  id: totrans-2466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added “fetchmany()” support to ResultProxy
  id: totrans-2467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 ResultProxy 添加了“fetchmany()”支持
- en: '**[sql]**'
  id: totrans-2468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: added support for column “key” attribute to be usable in row[<key>]/row.<key>
  id: totrans-2469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对列“key”属性可在 row[<key>]/row.<key> 中使用的支持
- en: '**[sql]**'
  id: totrans-2470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: changed “BooleanExpression” to subclass from “BinaryExpression”, so that boolean
    expressions can also follow column-clause behaviors (i.e. label(), etc).
  id: totrans-2471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“BooleanExpression”更改为从“BinaryExpression”子类化，以便布尔表达式也可以遵循列子句行为（即 label() 等）。
- en: '**[sql]**'
  id: totrans-2472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: trailing underscores are trimmed from func.<xxx> calls, such as func.if_()
  id: totrans-2473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: func.<xxx> 调用中的尾部下划线会被修剪掉，例如 func.if_()
- en: '**[sql]**'
  id: totrans-2474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: fix to correlation of subqueries when the column list of the select statement
    is constructed with individual calls to append_column(); this fixes an ORM bug
    whereby nested select statements were not getting correlated with the main select
    generated by the Query object.
  id: totrans-2475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了当选择语句的列列表是使用对 append_column() 的单独调用构造时子查询相关性的问题；这修复了一个 ORM 错误，即嵌套的 select
    语句没有与 Query 对象生成的主要 select 相关联。
- en: '**[sql]**'
  id: totrans-2476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: another fix to subquery correlation so that a subquery which has only one FROM
    element will *not* correlate that single element, since at least one FROM element
    is required in a query.
  id: totrans-2477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复子查询相关性的另一个方法，以便只有一个FROM元素的子查询不会与该单个元素相关联，因为查询中至少需要一个FROM元素。
- en: '**[sql]**'
  id: totrans-2478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: default “timezone” setting is now False. this corresponds to Python’s datetime
    behavior as well as Postgres’ timestamp/time types (which is the only timezone-sensitive
    dialect at the moment)
  id: totrans-2479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认的“timezone”设置现在为 False。这与 Python 的 datetime 行为以及 Postgres 的 timestamp/time
    类型相对应（目前唯一对时区敏感的方言）
- en: 'References: [#414](https://www.sqlalchemy.org/trac/ticket/414)'
  id: totrans-2480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#414](https://www.sqlalchemy.org/trac/ticket/414)
- en: '**[sql]**'
  id: totrans-2481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: the “op()” function is now treated as an “operation”, rather than a “comparison”.
    the difference is, an operation produces a BinaryExpression from which further
    operations can occur whereas comparison produces the more restrictive BooleanExpression
  id: totrans-2482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “op()” 函数现在被视为一个“操作”，而不是一个“比较”。区别在于，操作会产生一个二进制表达式，而后续操作可以在其中进行，而比较会产生更严格的布尔表达式。
- en: '**[sql]**'
  id: totrans-2483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: trying to redefine a reflected primary key column as non-primary key raises
    an error
  id: totrans-2484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 试图将反射的主键列重新定义为非主键会引发错误
- en: '**[sql]**'
  id: totrans-2485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql]**'
- en: type system slightly modified to support TypeDecorators that can be overridden
    by the dialect (ok, that’s not very clear, it allows the mssql tweak below to
    be possible)
  id: totrans-2486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 类型系统略有修改以支持可以被方言覆盖的 TypeDecorators（好吧，这不是很清楚，它允许下面的 mssql 调整成为可能）
- en: extensions
  id: totrans-2487
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 扩展
- en: '**[extensions]**'
  id: totrans-2488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: added “validate=False” argument to assign_mapper, if True will ensure that only
    mapped attributes are named
  id: totrans-2489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对 assign_mapper 添加了“validate=False”参数，如果为 True，则会确保仅命名了映射的属性
- en: 'References: [#426](https://www.sqlalchemy.org/trac/ticket/426)'
  id: totrans-2490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#426](https://www.sqlalchemy.org/trac/ticket/426)
- en: '**[extensions]**'
  id: totrans-2491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[extensions]**'
- en: assign_mapper gets “options”, “instances” functions added (i.e. MyClass.instances())
  id: totrans-2492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: assign_mapper 添加了“options”、“instances”函数（即 MyClass.instances()）
- en: mysql
  id: totrans-2493
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mysql
- en: '**[mysql]**'
  id: totrans-2494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: mysql is inconsistent with what kinds of quotes it uses in foreign keys during
    a SHOW CREATE TABLE, reflection updated to accommodate for all three styles
  id: totrans-2495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql 在 SHOW CREATE TABLE 期间使用的引号类型不一致，反射已更新以适应所有三种风格。
- en: 'References: [#420](https://www.sqlalchemy.org/trac/ticket/420)'
  id: totrans-2496
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#420](https://www.sqlalchemy.org/trac/ticket/420)
- en: '**[mysql]**'
  id: totrans-2497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mysql]**'
- en: mysql table create options work on a generic passthru now, i.e. Table(…, mysql_engine=’InnoDB’,
    mysql_collate=”latin1_german2_ci”, mysql_auto_increment=”5”, mysql_<somearg>…),
    helps
  id: totrans-2498
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mysql 表创建选项现在可以通用传递，即 Table(…, mysql_engine=’InnoDB’, mysql_collate=”latin1_german2_ci”,
    mysql_auto_increment=”5”, mysql_<somearg>…), 有助于
- en: 'References: [#418](https://www.sqlalchemy.org/trac/ticket/418)'
  id: totrans-2499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#418](https://www.sqlalchemy.org/trac/ticket/418)
- en: mssql
  id: totrans-2500
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: mssql
- en: '**[mssql]**'
  id: totrans-2501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[mssql]**'
- en: added an NVarchar type (produces NVARCHAR), also MSUnicode which provides Unicode-translation
    for the NVarchar regardless of dialect convert_unicode setting.
  id: totrans-2502
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了一个 NVarchar 类型（生成 NVARCHAR），还有一个 MSUnicode，为 NVarchar 提供 Unicode-翻译，无论方言
    convert_unicode 设置如何。
- en: oracle
  id: totrans-2503
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: '*slight* support for binary, but still need to figure out how to insert reasonably
    large values (over 4K). requires auto_setinputsizes=True sent to create_engine(),
    rows must be fully fetched individually, etc.'
  id: totrans-2505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*轻微* 支持二进制，但仍需找出如何插入相当大的值（超过 4K）。需要将 auto_setinputsizes=True 发送到 create_engine()，行必须逐个完全获取，等等。'
- en: misc
  id: totrans-2506
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[postgres]**'
  id: totrans-2507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: fix to the initial checkfirst for tables to take current schema into account
  id: totrans-2508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对表的初始 checkfirst 考虑当前模式的问题
- en: 'References: [#424](https://www.sqlalchemy.org/trac/ticket/424)'
  id: totrans-2509
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#424](https://www.sqlalchemy.org/trac/ticket/424)
- en: '**[postgres]**'
  id: totrans-2510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: postgres has an optional “server_side_cursors=True” flag which will utilize
    server side cursors. these are appropriate for fetching only partial results and
    are necessary for working with very large unbounded result sets. While we’d like
    this to be the default behavior, different environments seem to have different
    results and the causes have not been isolated so we are leaving the feature off
    by default for now. Uses an apparently undocumented psycopg2 behavior recently
    discovered on the psycopg mailing list.
  id: totrans-2511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgres 有一个可选的 “server_side_cursors=True” 标志，将利用服务器端游标。这些适用于仅获取部分结果并且必要用于处理非常大的无界结果集。虽然我们希望这成为默认行为，但不同的环境似乎有不同的结果，原因尚未被分离，因此我们目前将该功能默认关闭。使用了最近在
    psycopg 邮件列表上发现的一个显然未记录的 psycopg2 行为。
- en: '**[postgres]**'
  id: totrans-2512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: added “BIGSERIAL” support for postgres table with PGBigInteger/autoincrement
  id: totrans-2513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对带有 PGBigInteger/autoincrement 的 postgres 表的 “BIGSERIAL” 支持
- en: '**[postgres]**'
  id: totrans-2514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[postgres]**'
- en: fixes to postgres reflection to better handle when schema names are present;
    thanks to jason (at) ncsmags.com
  id: totrans-2515
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对包含模式名称的 postgres 反射的处理方式；感谢 jason (at) ncsmags.com
- en: 'References: [#402](https://www.sqlalchemy.org/trac/ticket/402)'
  id: totrans-2516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#402](https://www.sqlalchemy.org/trac/ticket/402)
- en: '**[firebird]**'
  id: totrans-2517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: order of constraint creation puts primary key first before all other constraints;
    required for firebird, not a bad idea for others
  id: totrans-2518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 约束创建的顺序将主键放在所有其他约束之前；对于 firebird 是必需的，对于其他数据库也是个好主意
- en: 'References: [#408](https://www.sqlalchemy.org/trac/ticket/408)'
  id: totrans-2519
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#408](https://www.sqlalchemy.org/trac/ticket/408)
- en: '**[firebird]**'
  id: totrans-2520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Firebird fix to autoload multifield foreign keys
  id: totrans-2521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird 修复了自动加载多字段外键
- en: 'References: [#409](https://www.sqlalchemy.org/trac/ticket/409)'
  id: totrans-2522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#409](https://www.sqlalchemy.org/trac/ticket/409)
- en: '**[firebird]**'
  id: totrans-2523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: Firebird NUMERIC type properly handles a type without precision
  id: totrans-2524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Firebird NUMERIC 类型正确处理没有精度的类型
- en: 'References: [#409](https://www.sqlalchemy.org/trac/ticket/409)'
  id: totrans-2525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#409](https://www.sqlalchemy.org/trac/ticket/409)
- en: 0.3.3
  id: totrans-2526
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.3
- en: 'Released: Fri Dec 15 2006'
  id: totrans-2527
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2006 年 12 月 15 日 星期五
- en: '**[no_tags]**'
  id: totrans-2528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: string-based FROM clauses fixed, i.e. select(…, from_obj=[“sometext”])
  id: totrans-2529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了基于字符串的 FROM 子句，即 select(…, from_obj=[“sometext”])
- en: '**[no_tags]**'
  id: totrans-2530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: fixes to passive_deletes flag, lazy=None (noload) flag
  id: totrans-2531
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 passive_deletes 标志，lazy=None（noload）标志
- en: '**[no_tags]**'
  id: totrans-2532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: added example/docs for dealing with large collections
  id: totrans-2533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了处理大型集合的示例/文档
- en: '**[no_tags]**'
  id: totrans-2534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: added object_session() method to sqlalchemy namespace
  id: totrans-2535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 sqlalchemy 命名空间中添加了 object_session() 方法
- en: '**[no_tags]**'
  id: totrans-2536
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: fixed QueuePool bug whereby its better able to reconnect to a database that
    was not reachable (thanks to SÃ©bastien Lelong), also fixed dispose() method
  id: totrans-2537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 QueuePool bug，使其更好地重新连接到无法访问的数据库（感谢 SÃ©bastien Lelong），还修复了 dispose() 方法
- en: '**[no_tags]**'
  id: totrans-2538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: patch that makes MySQL rowcount work correctly!
  id: totrans-2539
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了使 MySQL rowcount 正常工作的补丁！
- en: 'References: [#396](https://www.sqlalchemy.org/trac/ticket/396)'
  id: totrans-2540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#396](https://www.sqlalchemy.org/trac/ticket/396)
- en: '**[no_tags]**'
  id: totrans-2541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: fix to MySQL catch of 2006/2014 errors to properly re-raise OperationalError
    exception
  id: totrans-2542
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 MySQL 捕获 2006/2014 错误以正确重新引发 OperationalError 异常
- en: 0.3.2
  id: totrans-2543
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.2
- en: 'Released: Sun Dec 10 2006'
  id: totrans-2544
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2006 年 12 月 10 日 星期日
- en: '**[no_tags]**'
  id: totrans-2545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: major connection pool bug fixed. fixes MySQL out of sync errors, will also prevent
    transactions getting rolled back accidentally in all DBs
  id: totrans-2546
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了重大的连接池错误。修复了 MySQL 不同步错误，还将防止所有数据库中意外回滚事务
- en: 'References: [#387](https://www.sqlalchemy.org/trac/ticket/387)'
  id: totrans-2547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#387](https://www.sqlalchemy.org/trac/ticket/387)
- en: '**[no_tags]**'
  id: totrans-2548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: major speed enhancements vs. 0.3.1, to bring speed back to 0.2.8 levels
  id: totrans-2549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 0.3.1 相比的主要速度增强，将速度提高到 0.2.8 的水平
- en: '**[no_tags]**'
  id: totrans-2550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: made conditional dozens of debug log calls that were time-intensive to generate
    log messages
  id: totrans-2551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使得数十个耗时生成日志消息的调试日志调用条件化
- en: '**[no_tags]**'
  id: totrans-2552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: fixed bug in cascade rules whereby the entire object graph could be unnecessarily
    cascaded on the save/update cascade
  id: totrans-2553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了级联规则中的错误，导致整个对象图可能在保存/更新级联时不必要地级联
- en: '**[no_tags]**'
  id: totrans-2554
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: various speedups in attributes module
  id: totrans-2555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 属性模块中的各种加速
- en: '**[no_tags]**'
  id: totrans-2556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: identity map in Session is by default *no longer weak referencing*. to have
    it be weak referencing, use create_session(weak_identity_map=True) fixes
  id: totrans-2557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 会话中的身份映射默认情况下不再是弱引用。要使其成为弱引用，请使用 create_session(weak_identity_map=True) 修复。
- en: 'References: [#388](https://www.sqlalchemy.org/trac/ticket/388)'
  id: totrans-2558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#388](https://www.sqlalchemy.org/trac/ticket/388)
- en: '**[no_tags]**'
  id: totrans-2559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: MySQL detects errors 2006 (server has gone away) and 2014 (commands out of sync)
    and invalidates the connection on which it occurred.
  id: totrans-2560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 检测到错误 2006（服务器已断开连接）和 2014（命令不同步），并在发生错误的连接上使其无效。
- en: '**[no_tags]**'
  id: totrans-2561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: 'MySQL bool type fix:'
  id: totrans-2562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL 布尔类型修复：
- en: 'References: [#307](https://www.sqlalchemy.org/trac/ticket/307)'
  id: totrans-2563
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#307](https://www.sqlalchemy.org/trac/ticket/307)
- en: '**[no_tags]**'
  id: totrans-2564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: 'postgres reflection fixes:'
  id: totrans-2565
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: postgres 反射修复：
- en: 'References: [#349](https://www.sqlalchemy.org/trac/ticket/349), [#382](https://www.sqlalchemy.org/trac/ticket/382)'
  id: totrans-2566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#349](https://www.sqlalchemy.org/trac/ticket/349), [#382](https://www.sqlalchemy.org/trac/ticket/382)
- en: '**[no_tags]**'
  id: totrans-2567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: added keywords for EXCEPT, INTERSECT, EXCEPT ALL, INTERSECT ALL
  id: totrans-2568
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 EXCEPT、INTERSECT、EXCEPT ALL、INTERSECT ALL 的关键字
- en: 'References: [#247](https://www.sqlalchemy.org/trac/ticket/247)'
  id: totrans-2569
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#247](https://www.sqlalchemy.org/trac/ticket/247)
- en: '**[no_tags]**'
  id: totrans-2570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: assign_mapper in assignmapper extension returns the created mapper
  id: totrans-2571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: assignmapper 扩展中的 assign_mapper 返回创建的映射器
- en: 'References: [#2110](https://www.sqlalchemy.org/trac/ticket/2110)'
  id: totrans-2572
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考资料：[#2110](https://www.sqlalchemy.org/trac/ticket/2110)
- en: '**[no_tags]**'
  id: totrans-2573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: added label() function to Select class, when scalar=True is used to create a
    scalar subquery i.e. “select x, y, (select max(foo) from table) AS foomax from
    table”
  id: totrans-2574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Select 类添加了 label() 函数，当使用 scalar=True 创建标量子查询时，例如“select x, y, (select max(foo)
    from table) AS foomax from table”。
- en: '**[no_tags]**'
  id: totrans-2575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: added onupdate and ondelete keyword arguments to ForeignKey; propagate to underlying
    ForeignKeyConstraint if present. (don’t propagate in the other direction, however)
  id: totrans-2576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 ForeignKey 添加了 onupdate 和 ondelete 关键字参数；如果存在，则传播到底层的 ForeignKeyConstraint。（但是不要在另一个方向上传播）
- en: '**[no_tags]**'
  id: totrans-2577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: fix to session.update() to preserve “dirty” status of incoming object
  id: totrans-2578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 session.update() 以保留传入对象的“脏”状态
- en: '**[no_tags]**'
  id: totrans-2579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: sending a selectable to an IN via the in_() function no longer creates a “union”
    out of multiple selects; only one selectable to a the in_() function is allowed
    now (make a union yourself if union is needed)
  id: totrans-2580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不再通过 in_() 函数向 IN 发送一个可选的“union”多选；现在只允许一个可选项到 in_() 函数（如果需要 union，请自行创建 union）
- en: '**[no_tags]**'
  id: totrans-2581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: improved support for disabling save-update cascade via cascade=”none” etc.
  id: totrans-2582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了通过 cascade=”none” 等禁用保存-更新级联的支持。
- en: '**[no_tags]**'
  id: totrans-2583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[no_tags]**'
- en: added “remote_side” argument to relation(), used only with self-referential
    mappers to force the direction of the parent/child relationship. replaces the
    usage of the “foreignkey” parameter for “switching” the direction. “foreignkey”
    argument is deprecated for all uses and will eventually be replaced by an argument
    dedicated to ForeignKey specification on mappers.
  id: totrans-2584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 relation() 添加了“remote_side”参数，仅用于自引用的映射，以强制父/子关系的方向。替换了“foreignkey”参数用于“切换”方向的用法。“foreignkey”参数已被弃用，将最终由专用于映射器上的
    ForeignKey 规范的参数替换。
- en: 0.3.1
  id: totrans-2585
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.1
- en: 'Released: Mon Nov 13 2006'
  id: totrans-2586
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2006 年 11 月 13 日（星期一）
- en: orm
  id: totrans-2587
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: the “delete” cascade will load in all child objects, if they were not loaded
    already. this can be turned off (i.e. the old behavior) by setting passive_deletes=True
    on a relation().
  id: totrans-2589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “删除”级联将加载所有子对象，如果它们尚未加载。这可以通过在 relation() 上设置 passive_deletes=True 来关闭（即旧行为）。
- en: '**[orm]**'
  id: totrans-2590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: adjustments to reworked eager query generation to not fail on circular eager-loaded
    relationships (like backrefs)
  id: totrans-2591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了重写的急切查询生成，以不在循环急切加载的关系（例如反向引用）上失败
- en: '**[orm]**'
  id: totrans-2592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fixed bug where eagerload() (nor lazyload()) option didn’t properly instruct
    the Query whether or not to use “nesting” when producing a LIMIT query.
  id: totrans-2593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即eagerload()（或lazyload()）选项未正确指示查询是否在生成LIMIT查询时使用“嵌套”。
- en: '**[orm]**'
  id: totrans-2594
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: fixed bug in circular dependency sorting at flush time; if object A contained
    a cyclical many-to-one relationship to object B, and object B was just attached
    to object A, *but* object B itself wasn’t changed, the many-to-one synchronize
    of B’s primary key attribute to A’s foreign key attribute wouldn’t occur.
  id: totrans-2595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了刷新时循环依赖排序中的bug；如果对象A包含一个循环的多对一关系到对象B，并且对象B刚刚附加到对象A，*但*对象B本身没有改变，那么B的主键属性与A的外键属性的多对一同步不会发生。
- en: 'References: [#360](https://www.sqlalchemy.org/trac/ticket/360)'
  id: totrans-2596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#360](https://www.sqlalchemy.org/trac/ticket/360)
- en: '**[orm]**'
  id: totrans-2597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: implemented from_obj argument for query.count, improves count function on selectresults
  id: totrans-2598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为query.count实现了from_obj参数，改进了selectresults上的count函数
- en: 'References: [#325](https://www.sqlalchemy.org/trac/ticket/325)'
  id: totrans-2599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#325](https://www.sqlalchemy.org/trac/ticket/325)
- en: '**[orm]**'
  id: totrans-2600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: added an assertion within the “cascade” step of ORM relationships to check that
    the class of object attached to a parent object is appropriate (i.e. if A.items
    stores B objects, raise an error if a C is appended to A.items)
  id: totrans-2601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ORM关系的“级联”步骤中添加了一���断言，以检查附加到父对象的对象类是否合适（即如果A.items存储B对象，则如果向A.items附加C，则引发错误）
- en: '**[orm]**'
  id: totrans-2602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: new extension sqlalchemy.ext.associationproxy, provides transparent “association
    object” mappings. new example examples/association/proxied_association.py illustrates.
  id: totrans-2603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新扩展sqlalchemy.ext.associationproxy，提供透明的“关联对象”映射。新示例examples/association/proxied_association.py进行了说明。
- en: '**[orm]**'
  id: totrans-2604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: improvement to single table inheritance to load full hierarchies beneath the
    target class
  id: totrans-2605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了单表继承以加载目标类下面的完整层次结构
- en: '**[orm]**'
  id: totrans-2606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: fix to subtle condition in topological sort where a node could appear twice,
    for
  id: totrans-2607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了拓扑排序中一个细微条件的问题，其中一个节点可能会出现两次，用于
- en: 'References: [#362](https://www.sqlalchemy.org/trac/ticket/362)'
  id: totrans-2608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#362](https://www.sqlalchemy.org/trac/ticket/362)
- en: '**[orm]**'
  id: totrans-2609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: additional rework to topological sort, refactoring, for
  id: totrans-2610
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对拓扑排序进行了额外的重构和重新设计，用于
- en: 'References: [#365](https://www.sqlalchemy.org/trac/ticket/365)'
  id: totrans-2611
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#365](https://www.sqlalchemy.org/trac/ticket/365)
- en: '**[orm]**'
  id: totrans-2612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: ”delete-orphan” for a certain type can be set on more than one parent class;
    the instance is an “orphan” only if its not attached to *any* of those parents
  id: totrans-2613
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于某种类型，“delete-orphan”可以在多个父类上设置；只有当实例未附加到*任何*这些父类中时，它才是“孤立的”
- en: misc
  id: totrans-2614
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[engine/pool]**'
  id: totrans-2615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎/池]**'
- en: some new Pool utility classes, updated docs
  id: totrans-2616
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些新的Pool实用类，更新了文档
- en: '**[engine/pool]**'
  id: totrans-2617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎/池]**'
- en: ”use_threadlocal” on Pool defaults to False (same as create_engine)
  id: totrans-2618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “use_threadlocal”在Pool上默认为False（与create_engine相同）
- en: '**[engine/pool]**'
  id: totrans-2619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎/池]**'
- en: fixed direct execution of Compiled objects
  id: totrans-2620
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对Compiled对象的直接执行
- en: '**[engine/pool]**'
  id: totrans-2621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[引擎/池]**'
- en: create_engine() reworked to be strict about incoming **kwargs. all keyword arguments
    must be consumed by one of the dialect, connection pool, and engine constructors,
    else a TypeError is thrown which describes the full set of invalid kwargs in relation
    to the selected dialect/pool/engine configuration.
  id: totrans-2622
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计create_engine()以严格处理传入的**kwargs。所有关键字参数必须被方言、连接池和引擎构造函数中的一个消耗，否则将抛出一个TypeError，其中描述了与所选方言/池/引擎配置相关的全部无效kwargs。
- en: '**[databases/types]**'
  id: totrans-2623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[数据库/类型]**'
- en: MySQL catches exception on “describe” and reports as NoSuchTableError
  id: totrans-2624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL在“describe”时捕获异常并报告为NoSuchTableError
- en: '**[databases/types]**'
  id: totrans-2625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[数据库/类型]**'
- en: further fixes to sqlite booleans, weren’t working as defaults
  id: totrans-2626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步修复了sqlite布尔值，默认情况下不起作用
- en: '**[databases/types]**'
  id: totrans-2627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[数据库/类型]**'
- en: fix to postgres sequence quoting when using schemas
  id: totrans-2628
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用模式时对postgres序列引用的问题
- en: orm
  id: totrans-2629
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ORM
- en: '**[orm]**'
  id: totrans-2630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: the “delete” cascade will load in all child objects, if they were not loaded
    already. this can be turned off (i.e. the old behavior) by setting passive_deletes=True
    on a relation().
  id: totrans-2631
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “delete”级联将加载所有子对象，如果它们尚未加载。可以通过在relation()上设置passive_deletes=True来关闭此功能（即旧行为）。
- en: '**[orm]**'
  id: totrans-2632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: adjustments to reworked eager query generation to not fail on circular eager-loaded
    relationships (like backrefs)
  id: totrans-2633
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了重新设计的急切查询生成，以避免在循环急切加载的关系（如反向引用）上失败
- en: '**[orm]**'
  id: totrans-2634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: fixed bug where eagerload() (nor lazyload()) option didn’t properly instruct
    the Query whether or not to use “nesting” when producing a LIMIT query.
  id: totrans-2635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了一个bug，即eagerload()（或lazyload()）选项未正确指示查询是否在生成LIMIT查询时使用“嵌套”。
- en: '**[orm]**'
  id: totrans-2636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ORM]**'
- en: fixed bug in circular dependency sorting at flush time; if object A contained
    a cyclical many-to-one relationship to object B, and object B was just attached
    to object A, *but* object B itself wasn’t changed, the many-to-one synchronize
    of B’s primary key attribute to A’s foreign key attribute wouldn’t occur.
  id: totrans-2637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了刷新时循环依赖排序中的错误；如果对象A包含一个循环的多对一关系到对象B，而对象B刚刚附加到对象A，*但*对象B本身没有改变，那么B的主键属性与A的外键属性的多对一同步不会发生。
- en: 'References: [#360](https://www.sqlalchemy.org/trac/ticket/360)'
  id: totrans-2638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#360](https://www.sqlalchemy.org/trac/ticket/360)
- en: '**[orm]**'
  id: totrans-2639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: implemented from_obj argument for query.count, improves count function on selectresults
  id: totrans-2640
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为query.count实现了from_obj参数，改进了selectresults上的count函数
- en: 'References: [#325](https://www.sqlalchemy.org/trac/ticket/325)'
  id: totrans-2641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#325](https://www.sqlalchemy.org/trac/ticket/325)
- en: '**[orm]**'
  id: totrans-2642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added an assertion within the “cascade” step of ORM relationships to check that
    the class of object attached to a parent object is appropriate (i.e. if A.items
    stores B objects, raise an error if a C is appended to A.items)
  id: totrans-2643
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在ORM关系的“级联”步骤中添加了一个断言，以检查附加到父对象的对象的类是否合适（即如果A.items存储B对象，则如果向A.items附加C，则引发错误）
- en: '**[orm]**'
  id: totrans-2644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: new extension sqlalchemy.ext.associationproxy, provides transparent “association
    object” mappings. new example examples/association/proxied_association.py illustrates.
  id: totrans-2645
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新��展sqlalchemy.ext.associationproxy，提供透明的“关联对象”映射。新示例examples/association/proxied_association.py进行了说明。
- en: '**[orm]**'
  id: totrans-2646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: improvement to single table inheritance to load full hierarchies beneath the
    target class
  id: totrans-2647
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对单表继承进行了改进，以加载目标类下的完整层次结构
- en: '**[orm]**'
  id: totrans-2648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to subtle condition in topological sort where a node could appear twice,
    for
  id: totrans-2649
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了拓扑排序中一个细微条件的问题，其中一个节点可能出现两次，用于
- en: 'References: [#362](https://www.sqlalchemy.org/trac/ticket/362)'
  id: totrans-2650
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#362](https://www.sqlalchemy.org/trac/ticket/362)
- en: '**[orm]**'
  id: totrans-2651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: additional rework to topological sort, refactoring, for
  id: totrans-2652
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对拓扑排序进行了额外的重构和重构，用于
- en: 'References: [#365](https://www.sqlalchemy.org/trac/ticket/365)'
  id: totrans-2653
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#365](https://www.sqlalchemy.org/trac/ticket/365)
- en: '**[orm]**'
  id: totrans-2654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”delete-orphan” for a certain type can be set on more than one parent class;
    the instance is an “orphan” only if its not attached to *any* of those parents
  id: totrans-2655
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于某种类型，“delete-orphan”可以设置在多个父类上；如果实例未附加到*任何*这些父类中，则该实例是“孤立的”
- en: misc
  id: totrans-2656
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[engine/pool]**'
  id: totrans-2657
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: some new Pool utility classes, updated docs
  id: totrans-2658
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一些新的Pool实用类，更新了文档
- en: '**[engine/pool]**'
  id: totrans-2659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: ”use_threadlocal” on Pool defaults to False (same as create_engine)
  id: totrans-2660
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “use_threadlocal”在Pool上默认为False（与create_engine相同）
- en: '**[engine/pool]**'
  id: totrans-2661
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: fixed direct execution of Compiled objects
  id: totrans-2662
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了对编译对象的直接执行
- en: '**[engine/pool]**'
  id: totrans-2663
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[engine/pool]**'
- en: create_engine() reworked to be strict about incoming **kwargs. all keyword arguments
    must be consumed by one of the dialect, connection pool, and engine constructors,
    else a TypeError is thrown which describes the full set of invalid kwargs in relation
    to the selected dialect/pool/engine configuration.
  id: totrans-2664
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重新设计create_engine()以严格处理传入的**kwargs。所有关键字参数必须被方言、连接池和引擎构造函数中的一个消耗，否则将抛出TypeError，其中描述了与所选方言/池/引擎配置相关的全部无效kwargs。
- en: '**[databases/types]**'
  id: totrans-2665
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[databases/types]**'
- en: MySQL catches exception on “describe” and reports as NoSuchTableError
  id: totrans-2666
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: MySQL在“describe”时捕获异常并报告为NoSuchTableError
- en: '**[databases/types]**'
  id: totrans-2667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[databases/types]**'
- en: further fixes to sqlite booleans, weren’t working as defaults
  id: totrans-2668
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 进一步修复sqlite布尔值，默认情况下未起作用
- en: '**[databases/types]**'
  id: totrans-2669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[databases/types]**'
- en: fix to postgres sequence quoting when using schemas
  id: totrans-2670
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在使用模式时对postgres序列引用的问题
- en: 0.3.0
  id: totrans-2671
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 0.3.0
- en: 'Released: Sun Oct 22 2006'
  id: totrans-2672
  prefs: []
  type: TYPE_NORMAL
  zh: 发布日期：2006年10月22日星期日
- en: general
  id: totrans-2673
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一般
- en: '**[general]**'
  id: totrans-2674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: logging is now implemented via standard python “logging” module. “echo” keyword
    parameters are still functional but set/unset log levels for their respective
    classes/instances. all logging can be controlled directly through the Python API
    by setting INFO and DEBUG levels for loggers in the “sqlalchemy” namespace. class-level
    logging is under “sqlalchemy.<module>.<classname>”, instance-level logging under
    “sqlalchemy.<module>.<classname>.0x..<00-FF>”. Test suite includes “–log-info”
    and “–log-debug” arguments which work independently of –verbose/–quiet. Logging
    added to orm to allow tracking of mapper configurations, row iteration.
  id: totrans-2675
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在通过标准的Python“logging”模块实现日志记录。“echo”关键字参数仍然可用，但设置/取消日志级别为其各自的类/实例。所有日志记录可以通过直接通过Python
    API设置“sqlalchemy”命名空间中的INFO和DEBUG级别来控制。类级别的日志记录在“sqlalchemy.<module>.<classname>”下，实例级别的日志记录在“sqlalchemy.<module>.<classname>.0x..<00-FF>”下。测试套件包括“--log-info”和“--log-debug”参数，独立于--verbose/--quiet工作。在ORM中添加了日志记录，以允许跟踪映射器配置、行迭代。
- en: '**[general]**'
  id: totrans-2676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[general]**'
- en: the documentation-generation system has been overhauled to be much simpler in
    design and more integrated with Markdown
  id: totrans-2677
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文档生成系统已经进行了全面改进，设计更简单，与Markdown更加集成
- en: orm
  id: totrans-2678
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2679
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: attribute tracking modified to be more intelligent about detecting changes,
    particularly with mutable types. TypeEngine objects now take a greater role in
    defining how to compare two scalar instances, including the addition of a MutableType
    mixin which is implemented by PickleType. unit-of-work now tracks the “dirty”
    list as an expression of all persistent objects where the attribute manager detects
    changes. The basic issue that’s fixed is detecting changes on PickleType objects,
    but also generalizes type handling and “modified” object checking to be more complete
    and extensible.
  id: totrans-2680
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改了属性跟踪以更智能地检测更改，特别是对于可变类型。TypeEngine对象现在在定义如何比较两个标量实例方面发挥更大作用，包括通过PickleType实现的MutableType
    mixin的添加。工作单元现在将“脏”列表跟踪为所有属性管理器检测到更改的持久对象的表达式。解决的基本问题是检测PickleType对象上的更改，但也将类型处理和“修改”对象检查泛化为更完整和可扩展。
- en: '**[orm]**'
  id: totrans-2681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a wide refactoring to “attribute loader” and “options” architectures. ColumnProperty
    and PropertyLoader define their loading behavior via switchable “strategies”,
    and MapperOptions no longer use mapper/property copying in order to function;
    they are instead propagated via QueryContext and SelectionContext objects at query/instances
    time. All of the internal copying of mappers and properties that was used to handle
    inheritance as well as options() has been removed; the structure of mappers and
    properties is much simpler than before and is clearly laid out in the new ‘interfaces’
    module.
  id: totrans-2682
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“属性加载器”和“选项”架构进行了广泛重构。ColumnProperty和PropertyLoader通过可切换的“策略”定义其加载行为，MapperOptions不再使用映射器/属性复制来运行；它们通过QueryContext和SelectionContext对象在查询/实例时间传播。所有用于处理继承以及options()的内部映射器和属性复制已被移除；映射器和属性的结构比以前简单得多，并且在新的“interfaces”模块中清晰地列出。
- en: '**[orm]**'
  id: totrans-2683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'related to the mapper/property overhaul, internal refactoring to mapper instances()
    method to use a SelectionContext object to track state during the operation. SLIGHT
    API BREAKAGE: the append_result() and populate_instances() methods on MapperExtension
    have a slightly different method signature now as a result of the change; hoping
    that these methods are not in widespread use as of yet.'
  id: totrans-2684
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与映射器/属性改组相关，对映射器实例()方法进行了内部重构，使用SelectionContext对象跟踪操作期间的状态。轻微的API破坏：由于更改的结果，MapperExtension上的append_result()和populate_instances()方法现在具有稍微不同的方法签名；希望这些方法目前尚未广泛使用。
- en: '**[orm]**'
  id: totrans-2685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: instances() method moved to Query now, backwards-compatible version remains
    on Mapper.
  id: totrans-2686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: instances()方法现在移至Query，向后兼容版本仍保留在Mapper上。
- en: '**[orm]**'
  id: totrans-2687
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added contains_eager() MapperOption, used in conjunction with instances() to
    specify properties that should be eagerly loaded from the result set, using their
    plain column names by default, or translated given an custom row-translation function.
  id: totrans-2688
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了contains_eager() MapperOption，与instances()一起使用，用于指定应该从结果集中急切加载的属性，默认情况下使用它们的普通列名，或者根据自定义行转换函数进行转换。
- en: '**[orm]**'
  id: totrans-2689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: more rearrangements of unit-of-work commit scheme to better allow dependencies
    within circular flushes to work properly…updated task traversal/logging implementation
  id: totrans-2690
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对工作单元提交方案进行了更多重新排列，以更好地允许循环刷新中的依赖关系正常工作…更新了任务遍历/日志记录实现
- en: '**[orm]**'
  id: totrans-2691
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: polymorphic mappers (i.e. using inheritance) now produces INSERT statements
    in order of tables across all inherited classes
  id: totrans-2692
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多态映射器（即使用继承）现在按照所有继承类的表顺序生成INSERT语句
- en: 'References: [#321](https://www.sqlalchemy.org/trac/ticket/321)'
  id: totrans-2693
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#321](https://www.sqlalchemy.org/trac/ticket/321)
- en: '**[orm]**'
  id: totrans-2694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added an automatic “row switch” feature to mapping, which will detect a pending
    instance/deleted instance pair with the same identity key and convert the INSERT/DELETE
    to a single UPDATE
  id: totrans-2695
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了自动“行切换”功能到映射，它将检测具有相同标识键的待处理实例/已删除实例对，并将INSERT/DELETE转换为单个UPDATE
- en: '**[orm]**'
  id: totrans-2696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”association” mappings simplified to take advantage of automatic “row switch”
    feature
  id: totrans-2697
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “关联”映射简化以利用自动“行切换”功能
- en: '**[orm]**'
  id: totrans-2698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”custom list classes” is now implemented via the “collection_class” keyword
    argument to relation(). the old way still works but is deprecated
  id: totrans-2699
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “自定义列表类”现在通过relation()的“collection_class”关键字参数实现。旧方法仍然有效，但已被弃用
- en: 'References: [#212](https://www.sqlalchemy.org/trac/ticket/212)'
  id: totrans-2700
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#212](https://www.sqlalchemy.org/trac/ticket/212)
- en: '**[orm]**'
  id: totrans-2701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “viewonly” flag to relation(), allows construction of relations that have
    no effect on the flush() process.
  id: totrans-2702
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在relation()中添加了“viewonly”标志，允许构建对flush()过程没有影响的关系。
- en: '**[orm]**'
  id: totrans-2703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “lockmode” argument to base Query select/get functions, including “with_lockmode”
    function to get a Query copy that has a default locking mode. Will translate “read”/”update”
    arguments into a for_update argument on the select side.
  id: totrans-2704
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在基本Query选择/获取函数中添加了“lockmode”参数，包括“with_lockmode”函数，以获取具有默认锁定模式的Query副本。将“read”/“update”参数转换为select端的for_update参数。
- en: 'References: [#292](https://www.sqlalchemy.org/trac/ticket/292)'
  id: totrans-2705
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#292](https://www.sqlalchemy.org/trac/ticket/292)
- en: '**[orm]**'
  id: totrans-2706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: implemented “version check” logic in Query/Mapper, used when version_id_col
    is in effect and query.with_lockmode() is used to get() an instance that’s already
    loaded
  id: totrans-2707
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在Query/Mapper中实现了“版本检查”逻辑，当version_id_col生效且使用query.with_lockmode()获取已加载实例时使用
- en: '**[orm]**'
  id: totrans-2708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: post_update behavior improved; does a better job at not updating too many rows,
    updates only required columns
  id: totrans-2709
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了post_update行为；在更新行时更好地避免更新过多行，仅更新所需的列
- en: 'References: [#208](https://www.sqlalchemy.org/trac/ticket/208)'
  id: totrans-2710
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#208](https://www.sqlalchemy.org/trac/ticket/208)
- en: '**[orm]**'
  id: totrans-2711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: adjustments to eager loading so that its “eager chain” is kept separate from
    the normal mapper setup, thereby preventing conflicts with lazy loader operation,
    fixes
  id: totrans-2712
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了急切加载，使其“急切链”与正常的mapper设置保持分离，从而防止与延迟加载器操作发生冲突，修复了问题
- en: 'References: [#308](https://www.sqlalchemy.org/trac/ticket/308)'
  id: totrans-2713
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#308](https://www.sqlalchemy.org/trac/ticket/308)
- en: '**[orm]**'
  id: totrans-2714
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to deferred group loading
  id: totrans-2715
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了延迟组加载问题
- en: '**[orm]**'
  id: totrans-2716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.flush() won’t close a connection it opened
  id: totrans-2717
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.flush()不会关闭它打开的连接
- en: 'References: [#346](https://www.sqlalchemy.org/trac/ticket/346)'
  id: totrans-2718
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#346](https://www.sqlalchemy.org/trac/ticket/346)
- en: '**[orm]**'
  id: totrans-2719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “batch=True” flag to mapper; if False, save_obj will fully save one object
    at a time including calls to before_XXXX and after_XXXX
  id: totrans-2720
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在mapper中添加了“batch=True”标志；如果为False，save_obj将完全逐个保存一个对象，包括调用before_XXXX和after_XXXX
- en: '**[orm]**'
  id: totrans-2721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “column_prefix=None” argument to mapper; prepends the given string (typically
    ‘_’) to column-based attributes automatically set up from the mapper’s Table
  id: totrans-2722
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在mapper中添加了“column_prefix=None”参数；将给定字符串（通常为‘_’）预先添加到从mapper的Table设置的基于列的属性中。
- en: '**[orm]**'
  id: totrans-2723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: specifying joins in the from_obj argument of query.select() will replace the
    main table of the query, if the table is somewhere within the given from_obj.
    this makes it possible to produce custom joins and outerjoins in queries without
    the main table getting added twice.
  id: totrans-2724
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在query.select()的from_obj参数中指定连接将替换查询的主表，如果表在给定的from_obj中的某处。这样可以在查询中生成自定义连接和外连接，而不会使主表添加两次。
- en: 'References: [#315](https://www.sqlalchemy.org/trac/ticket/315)'
  id: totrans-2725
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#315](https://www.sqlalchemy.org/trac/ticket/315)
- en: '**[orm]**'
  id: totrans-2726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: eagerloading is adjusted to more thoughtfully attach its LEFT OUTER JOINs to
    the given query, looking for custom “FROM” clauses that may have already been
    set up.
  id: totrans-2727
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了急切加载，更加周到地将其LEFT OUTER JOIN附加到给定查询中，查找可能已经设置的自定义“FROM”子句。
- en: '**[orm]**'
  id: totrans-2728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added join_to and outerjoin_to transformative methods to SelectResults, to build
    up join/outerjoin conditions based on property names. also added select_from to
    explicitly set from_obj parameter.
  id: totrans-2729
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在SelectResults中添加了join_to和outerjoin_to转换方法，根据属性名称构建连接/外连接条件。还添加了select_from以明确设置from_obj参数。
- en: '**[orm]**'
  id: totrans-2730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: removed “is_primary” flag from mapper.
  id: totrans-2731
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从mapper中删除了“is_primary”标志。
- en: sql
  id: totrans-2732
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [construction]**'
  id: totrans-2733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [construction]**'
- en: changed “for_update” parameter to accept False/True/”nowait” and “read”, the
    latter two of which are interpreted only by Oracle and MySQL
  id: totrans-2734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“for_update”参数更改为接受False/True/“nowait”和“read”，后两者仅由Oracle和MySQL解释。
- en: 'References: [#292](https://www.sqlalchemy.org/trac/ticket/292)'
  id: totrans-2735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#292](https://www.sqlalchemy.org/trac/ticket/292)
- en: '**[sql] [construction]**'
  id: totrans-2736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [construction]**'
- en: added extract() function to sql dialect (SELECT extract(field FROM expr))
  id: totrans-2737
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在sql方言中添加了extract()函数（SELECT extract(field FROM expr)）
- en: '**[sql] [construction]**'
  id: totrans-2738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [construction]**'
- en: BooleanExpression includes new “negate” argument to specify the appropriate
    negation operator if one is available.
  id: totrans-2739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: BooleanExpression包括新的“negate”参数，用于指定适当的否定运算符（如果有的话）。
- en: '**[sql] [construction]**'
  id: totrans-2740
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [construction]**'
- en: calling a negation on an “IN” or “IS” clause will result in “NOT IN”, “IS NOT”
    (as opposed to NOT (x IN y)).
  id: totrans-2741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“IN”或“IS”子句进行否定将导致“NOT IN”、“IS NOT”（而不是NOT (x IN y)）。
- en: '**[sql] [construction]**'
  id: totrans-2742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [construction]**'
- en: Function objects know what to do in a FROM clause now. their behavior should
    be the same, except now you can also do things like select([‘*’], from_obj=[func.my_function()])
    to get multiple columns from the result, or even use sql.column() constructs to
    name the return columns
  id: totrans-2743
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Function对象现在知道在FROM子句中该做什么。它们的行为应该是相同的，除了现在你还可以做像select([‘*’], from_obj=[func.my_function()])这样的事情来从结果中获取多个列，甚至使用sql.column()构造来命名返回列。
- en: 'References: [#172](https://www.sqlalchemy.org/trac/ticket/172)'
  id: totrans-2744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#172](https://www.sqlalchemy.org/trac/ticket/172)
- en: schema
  id: totrans-2745
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-2746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: a fair amount of cleanup to the schema package, removal of ambiguous methods,
    methods that are no longer needed. slightly more constrained usage, greater emphasis
    on explicitness
  id: totrans-2747
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对模式包进行了相当多的清理，删除了模糊方法、不再需要的方法。使用略微更受限制，更加强调明确性。
- en: '**[schema]**'
  id: totrans-2748
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: the “primary_key” attribute of Table and other selectables becomes a setlike
    ColumnCollection object; is ordered but not numerically indexed. a comparison
    clause between two pks that are derived from the same underlying tables (i.e.
    such as two Alias objects) can be generated via table1.primary_key==table2.primary_key
  id: totrans-2749
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table和其他可选择对象的“primary_key”属性变成了一个类似集合的ColumnCollection对象；它是有序的，但没有数值索引。从相同基础表（例如两个Alias对象）派生的两个主键之间的比较子句可以通过table1.primary_key==table2.primary_key生成。
- en: '**[schema]**'
  id: totrans-2750
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: ForeignKey(Constraint) supports “use_alter=True”, to create/drop a foreign key
    via ALTER. this allows circular foreign key relationships to be set up.
  id: totrans-2751
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ForeignKey(Constraint)支持“use_alter=True”，通过ALTER创建/删除外键。这允许建立循环外键关系。
- en: '**[schema]**'
  id: totrans-2752
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: append_item() methods removed from Table and Column; preferably construct Table/Column/related
    objects inline, but if needed use append_column(), append_foreign_key(), append_constraint(),
    etc.
  id: totrans-2753
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从Table和Column中删除了append_item()方法；最好内联构造Table/Column/相关对象，但如果需要，可以使用append_column()、append_foreign_key()、append_constraint()等。
- en: '**[schema]**'
  id: totrans-2754
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: table.create() no longer returns the Table object, instead has no return value.
    the usual case is that tables are created via metadata, which is preferable since
    it will handle table dependencies.
  id: totrans-2755
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: table.create()不再返回Table对象，而是没有返回值。通常情况下，通过metadata创建表，这是更可取的，因为它将处理表依赖关系。
- en: '**[schema]**'
  id: totrans-2756
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: added UniqueConstraint (goes at Table level), CheckConstraint (goes at Table
    or Column level).
  id: totrans-2757
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了UniqueConstraint（放在Table级别）、CheckConstraint（放在Table或Column级别）。
- en: '**[schema]**'
  id: totrans-2758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: index=False/unique=True on Column now creates a UniqueConstraint, index=True/unique=False
    creates a plain Index, index=True/unique=True on Column creates a unique Index.
    ‘index’ and ‘unique’ keyword arguments to column are now boolean only; for explicit
    names and groupings of indexes or unique constraints, use the UniqueConstraint/Index
    constructs explicitly.
  id: totrans-2759
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column上的index=False/unique=True现在创建UniqueConstraint，index=True/unique=False创建普通Index，Column上的index=True/unique=True创建唯一Index。column的‘index’和‘unique’关键字参数现在只能是布尔值；对于索引或唯一约束的显式名称和分组，使用UniqueConstraint/Index构造显式。
- en: '**[schema]**'
  id: totrans-2760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: added autoincrement=True to Column; will disable schema generation of SERIAL/AUTO_INCREMENT/identity
    seq for postgres/mysql/mssql if explicitly set to False
  id: totrans-2761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将autoincrement=True添加到Column；如果明确设置为False，则将禁用postgres/mysql/mssql的SERIAL/AUTO_INCREMENT/identity
    seq的模式生成。
- en: '**[schema]**'
  id: totrans-2762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: TypeEngine objects now have methods to deal with copying and comparing values
    of their specific type. Currently used by the ORM, see below.
  id: totrans-2763
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeEngine对象现在有处理复制和比较其特定类型值的方法。目前被ORM使用，见下文。
- en: '**[schema]**'
  id: totrans-2764
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: fixed condition that occurred during reflection when a primary key column was
    explicitly overridden, where the PrimaryKeyConstraint would get both the reflected
    and the programmatic column doubled up
  id: totrans-2765
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了在显式覆盖主键列时反射时出现的条件，其中PrimaryKeyConstraint会使反射和程序化列重复。
- en: '**[schema]**'
  id: totrans-2766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: the “foreign_key” attribute on Column and ColumnElement in general is deprecated,
    in favor of the “foreign_keys” list/set-based attribute, which takes into account
    multiple foreign keys on one column. “foreign_key” will return the first element
    in the “foreign_keys” list/set or None if the list is empty.
  id: totrans-2767
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column和ColumnElement上的“foreign_key”属性一般不建议使用，而是使用基于“foreign_keys”列表/集合的属性，该属性考虑了一个列上的多个外键。“foreign_key”将返回“foreign_keys”列表/集合中的第一个元素，如果列表为空，则返回None。
- en: sqlite
  id: totrans-2768
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-2769
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: sqlite boolean datatype converts False/True to 0/1 by default
  id: totrans-2770
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite布尔数据类型默认将False/True转换为0/1。
- en: '**[sqlite]**'
  id: totrans-2771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: fixes to Date/Time (SLDate/SLTime) types; works as good as postgres now
  id: totrans-2772
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Date/Time（SLDate/SLTime）类型；现在与postgres一样好用。
- en: 'References: [#335](https://www.sqlalchemy.org/trac/ticket/335)'
  id: totrans-2773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#335](https://www.sqlalchemy.org/trac/ticket/335)
- en: oracle
  id: totrans-2774
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2775
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle has experimental support for cx_Oracle.TIMESTAMP, which requires a setinputsizes()
    call on the cursor that is now enabled via the ‘auto_setinputsizes’ flag to the
    oracle dialect.
  id: totrans-2776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle对cx_Oracle.TIMESTAMP有实验性支持，需要在光标上调用setinputsizes()，现在可以通过oracle方言的‘auto_setinputsizes’标志启用。
- en: misc
  id: totrans-2777
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 杂项
- en: '**[ms-sql]**'
  id: totrans-2778
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: fixes bug 261 (table reflection broken for MS-SQL case-sensitive databases)
  id: totrans-2779
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了bug 261（对于区分大小写的MS-SQL数据库，表反射出现问题）
- en: '**[ms-sql]**'
  id: totrans-2780
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: can now specify port for pymssql
  id: totrans-2781
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以为pymssql指定端口
- en: '**[ms-sql]**'
  id: totrans-2782
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: introduces new “auto_identity_insert” option for auto-switching between “SET
    IDENTITY_INSERT” mode when values specified for IDENTITY columns
  id: totrans-2783
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入了新的“auto_identity_insert”选项，用于在为IDENTITY列指定值时自动切换到“SET IDENTITY_INSERT”模式
- en: '**[ms-sql]**'
  id: totrans-2784
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: now supports multi-column foreign keys
  id: totrans-2785
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持多列外键
- en: '**[ms-sql]**'
  id: totrans-2786
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: fix to reflecting date/datetime columns
  id: totrans-2787
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反射日期/时间列的问题
- en: '**[ms-sql]**'
  id: totrans-2788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: NCHAR and NVARCHAR type support added
  id: totrans-2789
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了NCHAR和NVARCHAR类型支持
- en: '**[firebird]**'
  id: totrans-2790
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: aliases do not use “AS”
  id: totrans-2791
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 别名不使用“AS”
- en: '**[firebird]**'
  id: totrans-2792
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: correctly raises NoSuchTableError when reflecting non-existent table
  id: totrans-2793
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反射不存在的表时正确地引发NoSuchTableError
- en: '**[connections/pooling/execution]**'
  id: totrans-2794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[连接/池/执行]**'
- en: connection pool tracks open cursors and automatically closes them if connection
    is returned to pool with cursors still opened. Can be affected by options which
    cause it to raise an error instead, or to do nothing. fixes issues with MySQL,
    others
  id: totrans-2795
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接池跟踪打开的光标，并在连接返回到池中时自动关闭它们。可以受到导致引发错误或不执行任何操作的选项的影响。修复了MySQL等其他问题
- en: '**[connections/pooling/execution]**'
  id: totrans-2796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[连接/池/执行]**'
- en: fixed bug where Connection wouldn’t lose its Transaction after commit/rollback
  id: totrans-2797
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了Connection在提交/回滚后不会失去其Transaction的bug
- en: '**[connections/pooling/execution]**'
  id: totrans-2798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[连接/池/执行]**'
- en: added scalar() method to ComposedSQLEngine, ResultProxy
  id: totrans-2799
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向ComposedSQLEngine、ResultProxy添加了scalar()方法
- en: '**[connections/pooling/execution]**'
  id: totrans-2800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[连接/池/执行]**'
- en: ResultProxy will close() the underlying cursor when the ResultProxy itself is
    closed. this will auto-close cursors for ResultProxy objects that have had all
    their rows fetched (or had scalar() called).
  id: totrans-2801
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当ResultProxy本身关闭时，ResultProxy将关闭底层光标。这将自动关闭已获取所有行（或已调用scalar()）的ResultProxy对象的光标。
- en: '**[connections/pooling/execution]**'
  id: totrans-2802
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[连接/池/执行]**'
- en: ResultProxy.fetchall() internally uses DBAPI fetchall() for better efficiency,
    added to mapper iteration as well (courtesy Michael Twomey)
  id: totrans-2803
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ResultProxy.fetchall()在内部使用DBAPI fetchall()以提高效率，也添加到映射器迭代中（感谢Michael Twomey）
- en: general
  id: totrans-2804
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用
- en: '**[general]**'
  id: totrans-2805
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: logging is now implemented via standard python “logging” module. “echo” keyword
    parameters are still functional but set/unset log levels for their respective
    classes/instances. all logging can be controlled directly through the Python API
    by setting INFO and DEBUG levels for loggers in the “sqlalchemy” namespace. class-level
    logging is under “sqlalchemy.<module>.<classname>”, instance-level logging under
    “sqlalchemy.<module>.<classname>.0x..<00-FF>”. Test suite includes “–log-info”
    and “–log-debug” arguments which work independently of –verbose/–quiet. Logging
    added to orm to allow tracking of mapper configurations, row iteration.
  id: totrans-2806
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在通过标准的Python“logging”模块实现日志记录。“echo”关键字参数仍然有效，但为它们各自的类/实例设置/取消设置日志级别。所有日志记录可以通过直接在Python
    API中为“sqlalchemy”命名空间的记录器设置INFO和DEBUG级别来直接控制。类级别的日志记录在“sqlalchemy.<module>.<classname>”下，实例级别的日志记录在“sqlalchemy.<module>.<classname>.0x..<00-FF>”下。测试套件包括“--log-info”和“--log-debug”参数，它们独立于--verbose/--quiet工作。在orm中添加了日志记录，以允许跟踪映射器配置，行迭代。
- en: '**[general]**'
  id: totrans-2807
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[通用]**'
- en: the documentation-generation system has been overhauled to be much simpler in
    design and more integrated with Markdown
  id: totrans-2808
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文档生成系统已经进行了全面改进，设计更简单，与Markdown更加集成
- en: orm
  id: totrans-2809
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: orm
- en: '**[orm]**'
  id: totrans-2810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: attribute tracking modified to be more intelligent about detecting changes,
    particularly with mutable types. TypeEngine objects now take a greater role in
    defining how to compare two scalar instances, including the addition of a MutableType
    mixin which is implemented by PickleType. unit-of-work now tracks the “dirty”
    list as an expression of all persistent objects where the attribute manager detects
    changes. The basic issue that’s fixed is detecting changes on PickleType objects,
    but also generalizes type handling and “modified” object checking to be more complete
    and extensible.
  id: totrans-2811
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修改属性跟踪以更智能地检测更改，特别是对可变类型。TypeEngine对象现在在定义如何比较两个标量实例方面发挥更大作用，包括通过PickleType实现的MutableType混合。工作单元现在跟踪“脏”列表，表示所有属性管理器检测到更改的持久对象的表达式。解决的基本问题是检测PickleType对象上的更改，但也将类型处理和“修改”对象检查泛化为更完整和可扩展。
- en: '**[orm]**'
  id: totrans-2812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: a wide refactoring to “attribute loader” and “options” architectures. ColumnProperty
    and PropertyLoader define their loading behavior via switchable “strategies”,
    and MapperOptions no longer use mapper/property copying in order to function;
    they are instead propagated via QueryContext and SelectionContext objects at query/instances
    time. All of the internal copying of mappers and properties that was used to handle
    inheritance as well as options() has been removed; the structure of mappers and
    properties is much simpler than before and is clearly laid out in the new ‘interfaces’
    module.
  id: totrans-2813
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“属性加载器”和“选项”架构进行了广泛重构。ColumnProperty和PropertyLoader通过可切换的“策略”定义其加载行为，MapperOptions不再使用映射器/属性复制来运行；它们通过QueryContext和SelectionContext对象在查询/实例时间传播。已删除用于处理继承以及options()的所有内部映射器和属性复制；映射器和属性的结构比以前简单得多，并且在新的“interfaces”模块中清晰地列出。
- en: '**[orm]**'
  id: totrans-2814
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: 'related to the mapper/property overhaul, internal refactoring to mapper instances()
    method to use a SelectionContext object to track state during the operation. SLIGHT
    API BREAKAGE: the append_result() and populate_instances() methods on MapperExtension
    have a slightly different method signature now as a result of the change; hoping
    that these methods are not in widespread use as of yet.'
  id: totrans-2815
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与映射器/属性重构相关，内部重构到映射器实例()方法，使用SelectionContext对象在操作期间跟踪状态。轻微的API破坏：由于更改，MapperExtension上的append_result()和populate_instances()方法现在具有稍微不同的方法签名；希望这些方法目前还没有被广泛使用。
- en: '**[orm]**'
  id: totrans-2816
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: instances() method moved to Query now, backwards-compatible version remains
    on Mapper.
  id: totrans-2817
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: instances()方法现在移动到Query中，向后兼容版本仍保留在Mapper上。
- en: '**[orm]**'
  id: totrans-2818
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added contains_eager() MapperOption, used in conjunction with instances() to
    specify properties that should be eagerly loaded from the result set, using their
    plain column names by default, or translated given an custom row-translation function.
  id: totrans-2819
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了contains_eager() MapperOption，与instances()一起使用，指定应该从结果集中急切加载的属性，默认情况下使用它们的普通列名，或者根据自定义行转换函数进行转换。
- en: '**[orm]**'
  id: totrans-2820
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: more rearrangements of unit-of-work commit scheme to better allow dependencies
    within circular flushes to work properly…updated task traversal/logging implementation
  id: totrans-2821
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对工作单元提交方案进行了更多重新排列，以更好地允许循环刷新内的依赖关系正常工作...更新了任务遍历/日志记录实现
- en: '**[orm]**'
  id: totrans-2822
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: polymorphic mappers (i.e. using inheritance) now produces INSERT statements
    in order of tables across all inherited classes
  id: totrans-2823
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 多态映射器（即使用继承）现在按照所有继承类的表的顺序生成INSERT语句
- en: 'References: [#321](https://www.sqlalchemy.org/trac/ticket/321)'
  id: totrans-2824
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#321](https://www.sqlalchemy.org/trac/ticket/321)
- en: '**[orm]**'
  id: totrans-2825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added an automatic “row switch” feature to mapping, which will detect a pending
    instance/deleted instance pair with the same identity key and convert the INSERT/DELETE
    to a single UPDATE
  id: totrans-2826
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了自动的“行切换”功能到映射，它将检测到具有相同标识键的待处理实例/已删除实例对，并将INSERT/DELETE转换为单个UPDATE
- en: '**[orm]**'
  id: totrans-2827
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”association” mappings simplified to take advantage of automatic “row switch”
    feature
  id: totrans-2828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “关联”映射简化以利用自动“行切换”功能
- en: '**[orm]**'
  id: totrans-2829
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: ”custom list classes” is now implemented via the “collection_class” keyword
    argument to relation(). the old way still works but is deprecated
  id: totrans-2830
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “自定义列表类”现在通过relation()的“collection_class”关键字参数实现。旧方法仍然有效，但已被弃用。
- en: 'References: [#212](https://www.sqlalchemy.org/trac/ticket/212)'
  id: totrans-2831
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#212](https://www.sqlalchemy.org/trac/ticket/212)
- en: '**[orm]**'
  id: totrans-2832
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “viewonly” flag to relation(), allows construction of relations that have
    no effect on the flush() process.
  id: totrans-2833
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在relation()中添加了“viewonly”标志，允许构建对flush()过程没有影响的关系。
- en: '**[orm]**'
  id: totrans-2834
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “lockmode” argument to base Query select/get functions, including “with_lockmode”
    function to get a Query copy that has a default locking mode. Will translate “read”/”update”
    arguments into a for_update argument on the select side.
  id: totrans-2835
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向基本 Query select/get 函数添加了“lockmode”参数，包括“with_lockmode”函数以获取具有默认锁定模式的 Query
    副本。将“read”/“update”参数转换为 select 侧的 for_update 参数。
- en: 'References: [#292](https://www.sqlalchemy.org/trac/ticket/292)'
  id: totrans-2836
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#292](https://www.sqlalchemy.org/trac/ticket/292)
- en: '**[orm]**'
  id: totrans-2837
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: implemented “version check” logic in Query/Mapper, used when version_id_col
    is in effect and query.with_lockmode() is used to get() an instance that’s already
    loaded
  id: totrans-2838
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Query/Mapper 中实现了“版本检查”逻辑，当 version_id_col 生效且使用 query.with_lockmode() 获取已加载实例时使用
- en: '**[orm]**'
  id: totrans-2839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: post_update behavior improved; does a better job at not updating too many rows,
    updates only required columns
  id: totrans-2840
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 改进了 post_update 行为；在不更新过多行的情况下，仅更新所需列
- en: 'References: [#208](https://www.sqlalchemy.org/trac/ticket/208)'
  id: totrans-2841
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#208](https://www.sqlalchemy.org/trac/ticket/208)
- en: '**[orm]**'
  id: totrans-2842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: adjustments to eager loading so that its “eager chain” is kept separate from
    the normal mapper setup, thereby preventing conflicts with lazy loader operation,
    fixes
  id: totrans-2843
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 调整了 eager loading，使其“eager chain”与正常 mapper 设置保持分离，从而防止与延迟加载器操作发生冲突，修复
- en: 'References: [#308](https://www.sqlalchemy.org/trac/ticket/308)'
  id: totrans-2844
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#308](https://www.sqlalchemy.org/trac/ticket/308)
- en: '**[orm]**'
  id: totrans-2845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: fix to deferred group loading
  id: totrans-2846
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了延迟组加载的问题
- en: '**[orm]**'
  id: totrans-2847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: session.flush() won’t close a connection it opened
  id: totrans-2848
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session.flush() 不会关闭它打开的连接
- en: 'References: [#346](https://www.sqlalchemy.org/trac/ticket/346)'
  id: totrans-2849
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#346](https://www.sqlalchemy.org/trac/ticket/346)
- en: '**[orm]**'
  id: totrans-2850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “batch=True” flag to mapper; if False, save_obj will fully save one object
    at a time including calls to before_XXXX and after_XXXX
  id: totrans-2851
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 mapper 添加了“batch=True”标志；如果为 False，save_obj 将完全一次保存一个对象，包括调用 before_XXXX 和
    after_XXXX
- en: '**[orm]**'
  id: totrans-2852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added “column_prefix=None” argument to mapper; prepends the given string (typically
    ‘_’) to column-based attributes automatically set up from the mapper’s Table
  id: totrans-2853
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 mapper 添加了“column_prefix=None”参数；将给定字符串（通常为‘_’）预先添加到从 mapper 的 Table 设置的基于列的属性中
- en: '**[orm]**'
  id: totrans-2854
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: specifying joins in the from_obj argument of query.select() will replace the
    main table of the query, if the table is somewhere within the given from_obj.
    this makes it possible to produce custom joins and outerjoins in queries without
    the main table getting added twice.
  id: totrans-2855
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 query.select() 的 from_obj 参数中指定连接将替换查询的主表，如果表在给定的 from_obj 中的某处。这样可以在查询中生成自定义连接和外连接，而不会使主表添加两次。
- en: 'References: [#315](https://www.sqlalchemy.org/trac/ticket/315)'
  id: totrans-2856
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#315](https://www.sqlalchemy.org/trac/ticket/315)
- en: '**[orm]**'
  id: totrans-2857
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: eagerloading is adjusted to more thoughtfully attach its LEFT OUTER JOINs to
    the given query, looking for custom “FROM” clauses that may have already been
    set up.
  id: totrans-2858
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: eagerloading 被调整以更加周到地将其 LEFT OUTER JOIN 附加到给定查询中，查找可能已经设置的自定义“FROM”子句。
- en: '**[orm]**'
  id: totrans-2859
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: added join_to and outerjoin_to transformative methods to SelectResults, to build
    up join/outerjoin conditions based on property names. also added select_from to
    explicitly set from_obj parameter.
  id: totrans-2860
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 SelectResults 中添加了 join_to 和 outerjoin_to 转换方法，用于根据属性名称构建连接/外连接条件。还添加了 select_from
    方法，用于显式设置 from_obj 参数。
- en: '**[orm]**'
  id: totrans-2861
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[orm]**'
- en: removed “is_primary” flag from mapper.
  id: totrans-2862
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 mapper 中移除了“is_primary”标志。
- en: sql
  id: totrans-2863
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sql
- en: '**[sql] [construction]**'
  id: totrans-2864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [construction]**'
- en: changed “for_update” parameter to accept False/True/”nowait” and “read”, the
    latter two of which are interpreted only by Oracle and MySQL
  id: totrans-2865
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将“for_update”参数更改为接受 False/True/“nowait” 和 “read”，后两者仅由 Oracle 和 MySQL 解释
- en: 'References: [#292](https://www.sqlalchemy.org/trac/ticket/292)'
  id: totrans-2866
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#292](https://www.sqlalchemy.org/trac/ticket/292)
- en: '**[sql] [construction]**'
  id: totrans-2867
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [construction]**'
- en: added extract() function to sql dialect (SELECT extract(field FROM expr))
  id: totrans-2868
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 SQL 方言的 extract() 函数（SELECT extract(field FROM expr)）的支持
- en: '**[sql] [construction]**'
  id: totrans-2869
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [construction]**'
- en: BooleanExpression includes new “negate” argument to specify the appropriate
    negation operator if one is available.
  id: totrans-2870
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: BooleanExpression 包括新的“negate”参数，以指定适当的否定运算符（如果有的话）。
- en: '**[sql] [construction]**'
  id: totrans-2871
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [construction]**'
- en: calling a negation on an “IN” or “IS” clause will result in “NOT IN”, “IS NOT”
    (as opposed to NOT (x IN y)).
  id: totrans-2872
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对“IN”或“IS”子句进行否定操作将导致“NOT IN”、“IS NOT”（而不是 NOT (x IN y)）。
- en: '**[sql] [construction]**'
  id: totrans-2873
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sql] [construction]**'
- en: Function objects know what to do in a FROM clause now. their behavior should
    be the same, except now you can also do things like select([‘*’], from_obj=[func.my_function()])
    to get multiple columns from the result, or even use sql.column() constructs to
    name the return columns
  id: totrans-2874
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Function 对象现在在 FROM 子句中知道该做什么。它们的行为应该是相同的，除了现在你还可以像这样做 select([‘*’], from_obj=[func.my_function()])
    从结果中获取多列，甚至使用 sql.column() 构造来命名返回列
- en: 'References: [#172](https://www.sqlalchemy.org/trac/ticket/172)'
  id: totrans-2875
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#172](https://www.sqlalchemy.org/trac/ticket/172)
- en: schema
  id: totrans-2876
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模式
- en: '**[schema]**'
  id: totrans-2877
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: a fair amount of cleanup to the schema package, removal of ambiguous methods,
    methods that are no longer needed. slightly more constrained usage, greater emphasis
    on explicitness
  id: totrans-2878
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对模式包进行了相当多的清理，删除了模棱两可的方法，不再需要的方法。使用略微受限，更加强调明确性
- en: '**[schema]**'
  id: totrans-2879
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: the “primary_key” attribute of Table and other selectables becomes a setlike
    ColumnCollection object; is ordered but not numerically indexed. a comparison
    clause between two pks that are derived from the same underlying tables (i.e.
    such as two Alias objects) can be generated via table1.primary_key==table2.primary_key
  id: totrans-2880
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Table 和其他可选项的 “primary_key” 属性成为了一个类似集合的 ColumnCollection 对象；它是有序的，但没有数值索引。从同一基础表派生的两个
    pks 之间的比较子句（例如两个 Alias 对象）可以通过 table1.primary_key==table2.primary_key 生成
- en: '**[schema]**'
  id: totrans-2881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: ForeignKey(Constraint) supports “use_alter=True”, to create/drop a foreign key
    via ALTER. this allows circular foreign key relationships to be set up.
  id: totrans-2882
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ForeignKey(Constraint) 支持 “use_alter=True”，以通过 ALTER 创建/删除外键。这允许设置循环外键关系。
- en: '**[schema]**'
  id: totrans-2883
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: append_item() methods removed from Table and Column; preferably construct Table/Column/related
    objects inline, but if needed use append_column(), append_foreign_key(), append_constraint(),
    etc.
  id: totrans-2884
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 Table 和 Column 中移除了 append_item() 方法；最好是内联构造 Table/Column/相关对象，但如果需要，可以使用
    append_column()、append_foreign_key()、append_constraint() 等。
- en: '**[schema]**'
  id: totrans-2885
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: table.create() no longer returns the Table object, instead has no return value.
    the usual case is that tables are created via metadata, which is preferable since
    it will handle table dependencies.
  id: totrans-2886
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: table.create() 现在不再返回 Table 对象，而是没有返回值。通常情况下，通过元数据创建表是可取的，因为它会处理表依赖关系。
- en: '**[schema]**'
  id: totrans-2887
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: added UniqueConstraint (goes at Table level), CheckConstraint (goes at Table
    or Column level).
  id: totrans-2888
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了 UniqueConstraint（放置在 Table 级别）、CheckConstraint（放置在 Table 或 Column 级别）。
- en: '**[schema]**'
  id: totrans-2889
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: index=False/unique=True on Column now creates a UniqueConstraint, index=True/unique=False
    creates a plain Index, index=True/unique=True on Column creates a unique Index.
    ‘index’ and ‘unique’ keyword arguments to column are now boolean only; for explicit
    names and groupings of indexes or unique constraints, use the UniqueConstraint/Index
    constructs explicitly.
  id: totrans-2890
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column 上的 index=False/unique=True 现在会创建一个 UniqueConstraint，index=True/unique=False
    创建一个普通 Index，Column 上的 index=True/unique=True 会创建一个唯一 Index。Column 上的 ‘index’
    和 ‘unique’ 关键字参数现在只能是布尔值；对于索引或唯一约束的显式名称和分组，使用 UniqueConstraint/Index 构造显式。
- en: '**[schema]**'
  id: totrans-2891
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: added autoincrement=True to Column; will disable schema generation of SERIAL/AUTO_INCREMENT/identity
    seq for postgres/mysql/mssql if explicitly set to False
  id: totrans-2892
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 向 Column 添加了 autoincrement=True；如果显式设置为 False，则会禁用 postgres/mysql/mssql 的 SERIAL/AUTO_INCREMENT/identity
    seq 的模式生成
- en: '**[schema]**'
  id: totrans-2893
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: TypeEngine objects now have methods to deal with copying and comparing values
    of their specific type. Currently used by the ORM, see below.
  id: totrans-2894
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: TypeEngine 对象现在具有处理其特定类型值的复制和比较方法。目前由 ORM 使用，请参见下文。
- en: '**[schema]**'
  id: totrans-2895
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: fixed condition that occurred during reflection when a primary key column was
    explicitly overridden, where the PrimaryKeyConstraint would get both the reflected
    and the programmatic column doubled up
  id: totrans-2896
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在反射期间出现了一个条件，在该条件中，当主键列被显式覆盖时，PrimaryKeyConstraint 会将反射和编程列都重复
- en: '**[schema]**'
  id: totrans-2897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[模式]**'
- en: the “foreign_key” attribute on Column and ColumnElement in general is deprecated,
    in favor of the “foreign_keys” list/set-based attribute, which takes into account
    multiple foreign keys on one column. “foreign_key” will return the first element
    in the “foreign_keys” list/set or None if the list is empty.
  id: totrans-2898
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Column 和 ColumnElement 上的 “foreign_key” 属性已被弃用，而是采用了基于 “foreign_keys” 列表/集合的属性，该属性考虑了一列上的多个外键。“foreign_key”
    将返回 “foreign_keys” 列表/集合中的第一个元素，如果列表为空，则返回 None。
- en: sqlite
  id: totrans-2899
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sqlite
- en: '**[sqlite]**'
  id: totrans-2900
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: sqlite boolean datatype converts False/True to 0/1 by default
  id: totrans-2901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: sqlite 布尔数据类型默认将 False/True 转换为 0/1
- en: '**[sqlite]**'
  id: totrans-2902
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[sqlite]**'
- en: fixes to Date/Time (SLDate/SLTime) types; works as good as postgres now
  id: totrans-2903
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对日期/时间（SLDate/SLTime）类型进行修复；现在与 postgres 一样工作良好
- en: 'References: [#335](https://www.sqlalchemy.org/trac/ticket/335)'
  id: totrans-2904
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 参考：[#335](https://www.sqlalchemy.org/trac/ticket/335)
- en: oracle
  id: totrans-2905
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: oracle
- en: '**[oracle]**'
  id: totrans-2906
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[oracle]**'
- en: Oracle has experimental support for cx_Oracle.TIMESTAMP, which requires a setinputsizes()
    call on the cursor that is now enabled via the ‘auto_setinputsizes’ flag to the
    oracle dialect.
  id: totrans-2907
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Oracle 对 cx_Oracle.TIMESTAMP 有试验性支持，这需要在光标上调用 setinputsizes() 方法，现在通过 oracle
    方言的 'auto_setinputsizes' 标志启用。
- en: misc
  id: totrans-2908
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他
- en: '**[ms-sql]**'
  id: totrans-2909
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: fixes bug 261 (table reflection broken for MS-SQL case-sensitive databases)
  id: totrans-2910
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 bug 261（对于 MS-SQL 区分大小写的数据库，表反射出现问题）
- en: '**[ms-sql]**'
  id: totrans-2911
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: can now specify port for pymssql
  id: totrans-2912
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在可以为 pymssql 指定端口
- en: '**[ms-sql]**'
  id: totrans-2913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: introduces new “auto_identity_insert” option for auto-switching between “SET
    IDENTITY_INSERT” mode when values specified for IDENTITY columns
  id: totrans-2914
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入了新的“auto_identity_insert”选项，用于在为 IDENTITY 列指定值时自动切换到“SET IDENTITY_INSERT”模式
- en: '**[ms-sql]**'
  id: totrans-2915
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: now supports multi-column foreign keys
  id: totrans-2916
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在支持多列外键
- en: '**[ms-sql]**'
  id: totrans-2917
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: fix to reflecting date/datetime columns
  id: totrans-2918
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了反射日期/日期时间列的问题
- en: '**[ms-sql]**'
  id: totrans-2919
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ms-sql]**'
- en: NCHAR and NVARCHAR type support added
  id: totrans-2920
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加了对 NCHAR 和 NVARCHAR 类型的支持
- en: '**[firebird]**'
  id: totrans-2921
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: aliases do not use “AS”
  id: totrans-2922
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 别名不使用“AS”
- en: '**[firebird]**'
  id: totrans-2923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[firebird]**'
- en: correctly raises NoSuchTableError when reflecting non-existent table
  id: totrans-2924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当反映不存在的表时，正确引发 NoSuchTableError
- en: '**[connections/pooling/execution]**'
  id: totrans-2925
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[connections/pooling/execution]**'
- en: connection pool tracks open cursors and automatically closes them if connection
    is returned to pool with cursors still opened. Can be affected by options which
    cause it to raise an error instead, or to do nothing. fixes issues with MySQL,
    others
  id: totrans-2926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接池跟踪打开的游标，并在连接返回到连接池时自动关闭它们，如果仍然打开了游标。可以受到使其引发错误或不做任何操作的选项的影响。修复了 MySQL 等数据库的问题
- en: '**[connections/pooling/execution]**'
  id: totrans-2927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[connections/pooling/execution]**'
- en: fixed bug where Connection wouldn’t lose its Transaction after commit/rollback
  id: totrans-2928
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 修复了 Connection 在提交/回滚后不会失去其 Transaction 的 bug
- en: '**[connections/pooling/execution]**'
  id: totrans-2929
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[connections/pooling/execution]**'
- en: added scalar() method to ComposedSQLEngine, ResultProxy
  id: totrans-2930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 ComposedSQLEngine、ResultProxy 中添加了 scalar() 方法
- en: '**[connections/pooling/execution]**'
  id: totrans-2931
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[connections/pooling/execution]**'
- en: ResultProxy will close() the underlying cursor when the ResultProxy itself is
    closed. this will auto-close cursors for ResultProxy objects that have had all
    their rows fetched (or had scalar() called).
  id: totrans-2932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 ResultProxy 被关闭时，将关闭底层的游标。当 ResultProxy 对象的所有行都被提取（或者调用了 scalar() 方法）时，这将自动关闭游标。
- en: '**[connections/pooling/execution]**'
  id: totrans-2933
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[connections/pooling/execution]**'
- en: ResultProxy.fetchall() internally uses DBAPI fetchall() for better efficiency,
    added to mapper iteration as well (courtesy Michael Twomey)
  id: totrans-2934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ResultProxy.fetchall() 内部使用 DBAPI 的 fetchall() 方法以提高效率，并添加到映射迭代中（由 Michael Twomey
    提供）
