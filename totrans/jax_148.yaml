- en: jax.experimental.sparse.BCOO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[`jax.readthedocs.io/en/latest/_autosummary/jax.experimental.sparse.BCOO.html`](https://jax.readthedocs.io/en/latest/_autosummary/jax.experimental.sparse.BCOO.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Experimental batched COO matrix implemented in JAX
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**(****data** – data and indices in batched COO format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**indices****)** – data and indices in batched COO format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**shape** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*) – shape of sparse array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**args** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple "(in
    Python v3.12)")**[*Array**,* *Array**]*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**indices_sorted** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)"))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**unique_indices** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)"))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: ndarray of shape `[*batch_dims, nse, *dense_dims]` containing the explicitly
    stored data within the sparse matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: jax.Array
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: ndarray of shape `[*batch_dims, nse, n_sparse]` containing the indices of the
    explicitly stored data. Duplicate entries will be summed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: jax.Array
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a sparse array from a dense array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Examine the internal representation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a dense array from a sparse array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a sparse array from COO data & indices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple "(in
    Python v3.12)")**[*Array**,* *Array**]*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**shape** ([*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*]*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**indices_sorted** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)"))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**unique_indices** ([*bool*](https://docs.python.org/3/library/functions.html#bool
    "(in Python v3.12)"))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Methods
  prefs: []
  type: TYPE_NORMAL
- en: '| `__init__`(args, *, shape[, indices_sorted, ...]) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `astype`(*args, **kwargs) | Copy the array and cast to a specified dtype.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `block_until_ready`() |  |'
  prefs: []
  type: TYPE_TB
- en: '| `from_scipy_sparse`(mat, *[, index_dtype, ...]) | Create a BCOO array from
    a [`scipy.sparse`](https://docs.scipy.org/doc/scipy/reference/sparse.html#module-scipy.sparse
    "(in SciPy v1.13.1)") array. |'
  prefs: []
  type: TYPE_TB
- en: '| `fromdense`(mat, *[, nse, index_dtype, ...]) | Create a BCOO array from a
    (dense) `Array`. |'
  prefs: []
  type: TYPE_TB
- en: '| `reshape`(*args, **kwargs) | Returns an array containing the same data with
    a new shape. |'
  prefs: []
  type: TYPE_TB
- en: '| `sort_indices`() | Return a copy of the matrix with indices sorted. |'
  prefs: []
  type: TYPE_TB
- en: '| `sum`(*args, **kwargs) | Sum array along axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `sum_duplicates`([nse, remove_zeros]) | Return a copy of the array with duplicate
    indices summed. |'
  prefs: []
  type: TYPE_TB
- en: '| `todense`() | Create a dense version of the array. |'
  prefs: []
  type: TYPE_TB
- en: '| `transpose`([axes]) | Create a new array containing the transpose. |'
  prefs: []
  type: TYPE_TB
- en: '| `tree_flatten`() |  |'
  prefs: []
  type: TYPE_TB
- en: '| `tree_unflatten`(aux_data, children) |  |'
  prefs: []
  type: TYPE_TB
- en: '| `update_layout`(*[, n_batch, n_dense, ...]) | Update the storage layout (i.e.
    n_batch & n_dense) of a BCOO matrix. |'
  prefs: []
  type: TYPE_TB
- en: Attributes
  prefs: []
  type: TYPE_NORMAL
- en: '| `T` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `dtype` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `n_batch` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `n_dense` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `n_sparse` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `ndim` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `nse` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `size` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `data` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `indices` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `shape` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `indices_sorted` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `unique_indices` |  |'
  prefs: []
  type: TYPE_TB
