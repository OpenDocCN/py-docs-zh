["```py\n# -*- coding: utf-8 -*-\n\"\"\"\n-------------------------------------------------------------------------------\nDemo script showing how annotations can be added to a PDF using PyMuPDF.\n\nIt contains the following annotation types:\nCaret, Text, FreeText, text markers (underline, strike-out, highlight,\nsquiggle), Circle, Square, Line, PolyLine, Polygon, FileAttachment, Stamp\nand Redaction.\nThere is some effort to vary appearances by adding colors, line ends,\nopacity, rotation, dashed lines, etc.\n\nDependencies\n------------\nPyMuPDF v1.17.0\n-------------------------------------------------------------------------------\n\"\"\"\nfrom __future__ import print_function\n\nimport gc\nimport sys\n\nimport pymupdf\n\nprint(pymupdf.__doc__)\nif pymupdf.VersionBind.split(\".\") < [\"1\", \"17\", \"0\"]:\n    sys.exit(\"PyMuPDF v1.17.0+ is needed.\")\n\ngc.set_debug(gc.DEBUG_UNCOLLECTABLE)\n\nhighlight = \"this text is highlighted\"\nunderline = \"this text is underlined\"\nstrikeout = \"this text is striked out\"\nsquiggled = \"this text is zigzag-underlined\"\nred = (1, 0, 0)\nblue = (0, 0, 1)\ngold = (1, 1, 0)\ngreen = (0, 1, 0)\n\ndispl = pymupdf.Rect(0, 50, 0, 50)\nr = pymupdf.Rect(72, 72, 220, 100)\nt1 = u\"têxt üsès Lätiñ charß,\\nEUR: €, mu: µ, super scripts: ²³!\"\n\ndef print_descr(annot):\n  \"\"\"Print a short description to the right of each annot rect.\"\"\"\n    annot.parent.insert_text(\n        annot.rect.br + (10, -5), \"%s annotation\" % annot.type[1], color=red\n    )\n\ndoc = pymupdf.open()\npage = doc.new_page()\n\npage.set_rotation(0)\n\nannot = page.add_caret_annot(r.tl)\nprint_descr(annot)\n\nr = r + displ\nannot = page.add_freetext_annot(\n    r,\n    t1,\n    fontsize=10,\n    rotate=90,\n    text_color=blue,\n    fill_color=gold,\n    align=pymupdf.TEXT_ALIGN_CENTER,\n)\nannot.set_border(width=0.3, dashes=[2])\nannot.update(text_color=blue, fill_color=gold)\nprint_descr(annot)\n\nr = annot.rect + displ\nannot = page.add_text_annot(r.tl, t1)\nprint_descr(annot)\n\n# Adding text marker annotations:\n# first insert a unique text, then search for it, then mark it\npos = annot.rect.tl + displ.tl\npage.insert_text(\n    pos,  # insertion point\n    highlight,  # inserted text\n    morph=(pos, pymupdf.Matrix(-5)),  # rotate around insertion point\n)\nrl = page.search_for(highlight, quads=True)  # need a quad b/o tilted text\nannot = page.add_highlight_annot(rl[0])\nprint_descr(annot)\n\npos = annot.rect.bl  # next insertion point\npage.insert_text(pos, underline, morph=(pos, pymupdf.Matrix(-10)))\nrl = page.search_for(underline, quads=True)\nannot = page.add_underline_annot(rl[0])\nprint_descr(annot)\n\npos = annot.rect.bl\npage.insert_text(pos, strikeout, morph=(pos, pymupdf.Matrix(-15)))\nrl = page.search_for(strikeout, quads=True)\nannot = page.add_strikeout_annot(rl[0])\nprint_descr(annot)\n\npos = annot.rect.bl\npage.insert_text(pos, squiggled, morph=(pos, pymupdf.Matrix(-20)))\nrl = page.search_for(squiggled, quads=True)\nannot = page.add_squiggly_annot(rl[0])\nprint_descr(annot)\n\npos = annot.rect.bl\nr = pymupdf.Rect(pos, pos.x + 75, pos.y + 35) + (0, 20, 0, 20)\nannot = page.add_polyline_annot([r.bl, r.tr, r.br, r.tl])  # 'Polyline'\nannot.set_border(width=0.3, dashes=[2])\nannot.set_colors(stroke=blue, fill=green)\nannot.set_line_ends(pymupdf.PDF_ANNOT_LE_CLOSED_ARROW, pymupdf.PDF_ANNOT_LE_R_CLOSED_ARROW)\nannot.update(fill_color=(1, 1, 0))\nprint_descr(annot)\n\nr += displ\nannot = page.add_polygon_annot([r.bl, r.tr, r.br, r.tl])  # 'Polygon'\nannot.set_border(width=0.3, dashes=[2])\nannot.set_colors(stroke=blue, fill=gold)\nannot.set_line_ends(pymupdf.PDF_ANNOT_LE_DIAMOND, pymupdf.PDF_ANNOT_LE_CIRCLE)\nannot.update()\nprint_descr(annot)\n\nr += displ\nannot = page.add_line_annot(r.tr, r.bl)  # 'Line'\nannot.set_border(width=0.3, dashes=[2])\nannot.set_colors(stroke=blue, fill=gold)\nannot.set_line_ends(pymupdf.PDF_ANNOT_LE_DIAMOND, pymupdf.PDF_ANNOT_LE_CIRCLE)\nannot.update()\nprint_descr(annot)\n\nr += displ\nannot = page.add_rect_annot(r)  # 'Square'\nannot.set_border(width=1, dashes=[1, 2])\nannot.set_colors(stroke=blue, fill=gold)\nannot.update(opacity=0.5)\nprint_descr(annot)\n\nr += displ\nannot = page.add_circle_annot(r)  # 'Circle'\nannot.set_border(width=0.3, dashes=[2])\nannot.set_colors(stroke=blue, fill=gold)\nannot.update()\nprint_descr(annot)\n\nr += displ\nannot = page.add_file_annot(\n    r.tl, b\"just anything for testing\", \"testdata.txt\"  # 'FileAttachment'\n)\nprint_descr(annot)  # annot.rect\n\nr += displ\nannot = page.add_stamp_annot(r, stamp=10)  # 'Stamp'\nannot.set_colors(stroke=green)\nannot.update()\nprint_descr(annot)\n\nr += displ + (0, 0, 50, 10)\nrc = page.insert_textbox(\n    r,\n    \"This content will be removed upon applying the redaction.\",\n    color=blue,\n    align=pymupdf.TEXT_ALIGN_CENTER,\n)\nannot = page.add_redact_annot(r)\nprint_descr(annot)\n\ndoc.save(__file__.replace(\".py\", \"-%i.pdf\" % page.rotation), deflate=True) \n```", "```py\n# -*- coding: utf-8 -*-\nimport pymupdf\n\n# some colors\nblue  = (0,0,1)\ngreen = (0,1,0)\nred   = (1,0,0)\ngold  = (1,1,0)\n\n# a new PDF with 1 page\ndoc = pymupdf.open()\npage = doc.new_page()\n\n# 3 rectangles, same size, above each other\nr1 = pymupdf.Rect(100,100,200,150)\nr2 = r1 + (0,75,0,75)\nr3 = r2 + (0,75,0,75)\n\n# the text, Latin alphabet\nt = \"¡Un pequeño texto para practicar!\"\n\n# add 3 annots, modify the last one somewhat\na1 = page.add_freetext_annot(r1, t, color=red)\na2 = page.add_freetext_annot(r2, t, fontname=\"Ti\", color=blue)\na3 = page.add_freetext_annot(r3, t, fontname=\"Co\", color=blue, rotate=90)\na3.set_border(width=0)\na3.update(fontsize=8, fill_color=gold)\n\n# save the PDF\ndoc.save(\"a-freetext.pdf\") \n```", "```py\n\"\"\"\nProblem: Since MuPDF v1.16 a 'Freetext' annotation font is restricted to the\n\"normal\" versions (no bold, no italics) of Times-Roman, Helvetica, Courier.\nIt is impossible to use PyMuPDF to modify this.\n\nSolution: Using Adobe's JavaScript API, it is possible to manipulate properties\nof Freetext annotations. Check out these references:\nhttps://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/js_api_reference.pdf,\nor https://www.adobe.com/devnet/acrobat/documentation.html.\n\nFunction 'this.getAnnots()'  will return all annotations  as an array. We loop\nover this array to set the properties of the text through the 'richContents'\nattribute.\nThere is no explicit property to set text to bold, but it is possible to set\nfontWeight=800 (400 is the normal size) of richContents.\nOther attributes, like color, italics, etc. can also be set via richContents.\n\nIf we have 'FreeText' annotations created with PyMuPDF, we can make use of this\nJavaScript feature to modify the font - thus circumventing the above restriction.\n\nUse PyMuPDF v1.16.12 to create a push button that executes a Javascript\ncontaining the desired code. This is what this program does.\nThen open the resulting file with Adobe reader (!).\nAfter clicking on the button, all Freetext annotations will be bold, and the\nfile can be saved.\nIf desired, the button can be removed again, using free tools like PyMuPDF or\nPDF XChange editor.\n\nNote / Caution:\n---------------\nThe JavaScript will **only** work if the file is opened with Adobe Acrobat reader!\nWhen using other PDF viewers, the reaction is unforeseeable.\n\"\"\"\nimport sys\n\nimport pymupdf\n\n# this JavaScript will execute when the button is clicked:\njscript = \"\"\"\nvar annt = this.getAnnots();\nannt.forEach(function (item, index) {\n try {\n var span = item.richContents;\n span.forEach(function (it, dx) {\n it.fontWeight = 800;\n })\n item.richContents = span;\n } catch (err) {}\n});\napp.alert('Done');\n\"\"\"\ni_fn = sys.argv[1]  # input file name\no_fn = \"bold-\" + i_fn  # output filename\ndoc = pymupdf.open(i_fn)  # open input\npage = doc[0]  # get desired page\n\n# ------------------------------------------------\n# make a push button for invoking the JavaScript\n# ------------------------------------------------\n\nwidget = pymupdf.Widget()  # create widget\n\n# make it a 'PushButton'\nwidget.field_type = pymupdf.PDF_WIDGET_TYPE_BUTTON\nwidget.field_flags = pymupdf.PDF_BTN_FIELD_IS_PUSHBUTTON\n\nwidget.rect = pymupdf.Rect(5, 5, 20, 20)  # button position\n\nwidget.script = jscript  # fill in JavaScript source text\nwidget.field_name = \"Make bold\"  # arbitrary name\nwidget.field_value = \"Off\"  # arbitrary value\nwidget.fill_color = (0, 0, 1)  # make button visible\n\nannot = page.add_widget(widget)  # add the widget to the page\ndoc.save(o_fn)  # output the file \n```", "```py\nimport math\nimport pymupdf\n\n#------------------------------------------------------------------------------\n# preliminary stuff: create function value lists for sine and cosine\n#------------------------------------------------------------------------------\nw360 = math.pi * 2  # go through full circle\ndeg = w360 / 360  # 1 degree as radians\nrect = pymupdf.Rect(100,200, 300, 300)  # use this rectangle\nfirst_x = rect.x0  # x starts from left\nfirst_y = rect.y0 + rect.height / 2.  # rect middle means y = 0\nx_step = rect.width / 360  # rect width means 360 degrees\ny_scale = rect.height / 2.  # rect height means 2\nsin_points = []  # sine values go here\ncos_points = []  # cosine values go here\nfor x in range(362):  # now fill in the values\n    x_coord = x * x_step + first_x  # current x coordinate\n    y = -math.sin(x * deg)  # sine\n    p = (x_coord, y * y_scale + first_y)  # corresponding point\n    sin_points.append(p)  # append\n    y = -math.cos(x * deg)  # cosine\n    p = (x_coord, y * y_scale + first_y)  # corresponding point\n    cos_points.append(p)  # append\n\n#------------------------------------------------------------------------------\n# create the document with one page\n#------------------------------------------------------------------------------\ndoc = pymupdf.open()  # make new PDF\npage = doc.new_page()  # give it a page\n\n#------------------------------------------------------------------------------\n# add the Ink annotation, consisting of 2 curve segments\n#------------------------------------------------------------------------------\nannot = page.addInkAnnot((sin_points, cos_points))\n# let it look a little nicer\nannot.set_border(width=0.3, dashes=[1,])  # line thickness, some dashing\nannot.set_colors(stroke=(0,0,1))  # make the lines blue\nannot.update()  # update the appearance\n\npage.draw_rect(rect, width=0.3)  # only to demonstrate we did OK\n\ndoc.save(\"a-inktest.pdf\") \n```", "```py\n# -*- coding: utf-8 -*-\n\"\"\"\n-------------------------------------------------------------------------------\nDemo script showing how annotations can be added to a PDF using PyMuPDF.\n\nIt contains the following annotation types:\nCaret, Text, FreeText, text markers (underline, strike-out, highlight,\nsquiggle), Circle, Square, Line, PolyLine, Polygon, FileAttachment, Stamp\nand Redaction.\nThere is some effort to vary appearances by adding colors, line ends,\nopacity, rotation, dashed lines, etc.\n\nDependencies\n------------\nPyMuPDF v1.17.0\n-------------------------------------------------------------------------------\n\"\"\"\nfrom __future__ import print_function\n\nimport gc\nimport sys\n\nimport pymupdf\n\nprint(pymupdf.__doc__)\nif pymupdf.VersionBind.split(\".\") < [\"1\", \"17\", \"0\"]:\n    sys.exit(\"PyMuPDF v1.17.0+ is needed.\")\n\ngc.set_debug(gc.DEBUG_UNCOLLECTABLE)\n\nhighlight = \"this text is highlighted\"\nunderline = \"this text is underlined\"\nstrikeout = \"this text is striked out\"\nsquiggled = \"this text is zigzag-underlined\"\nred = (1, 0, 0)\nblue = (0, 0, 1)\ngold = (1, 1, 0)\ngreen = (0, 1, 0)\n\ndispl = pymupdf.Rect(0, 50, 0, 50)\nr = pymupdf.Rect(72, 72, 220, 100)\nt1 = u\"têxt üsès Lätiñ charß,\\nEUR: €, mu: µ, super scripts: ²³!\"\n\ndef print_descr(annot):\n  \"\"\"Print a short description to the right of each annot rect.\"\"\"\n    annot.parent.insert_text(\n        annot.rect.br + (10, -5), \"%s annotation\" % annot.type[1], color=red\n    )\n\ndoc = pymupdf.open()\npage = doc.new_page()\n\npage.set_rotation(0)\n\nannot = page.add_caret_annot(r.tl)\nprint_descr(annot)\n\nr = r + displ\nannot = page.add_freetext_annot(\n    r,\n    t1,\n    fontsize=10,\n    rotate=90,\n    text_color=blue,\n    fill_color=gold,\n    align=pymupdf.TEXT_ALIGN_CENTER,\n)\nannot.set_border(width=0.3, dashes=[2])\nannot.update(text_color=blue, fill_color=gold)\nprint_descr(annot)\n\nr = annot.rect + displ\nannot = page.add_text_annot(r.tl, t1)\nprint_descr(annot)\n\n# Adding text marker annotations:\n# first insert a unique text, then search for it, then mark it\npos = annot.rect.tl + displ.tl\npage.insert_text(\n    pos,  # insertion point\n    highlight,  # inserted text\n    morph=(pos, pymupdf.Matrix(-5)),  # rotate around insertion point\n)\nrl = page.search_for(highlight, quads=True)  # need a quad b/o tilted text\nannot = page.add_highlight_annot(rl[0])\nprint_descr(annot)\n\npos = annot.rect.bl  # next insertion point\npage.insert_text(pos, underline, morph=(pos, pymupdf.Matrix(-10)))\nrl = page.search_for(underline, quads=True)\nannot = page.add_underline_annot(rl[0])\nprint_descr(annot)\n\npos = annot.rect.bl\npage.insert_text(pos, strikeout, morph=(pos, pymupdf.Matrix(-15)))\nrl = page.search_for(strikeout, quads=True)\nannot = page.add_strikeout_annot(rl[0])\nprint_descr(annot)\n\npos = annot.rect.bl\npage.insert_text(pos, squiggled, morph=(pos, pymupdf.Matrix(-20)))\nrl = page.search_for(squiggled, quads=True)\nannot = page.add_squiggly_annot(rl[0])\nprint_descr(annot)\n\npos = annot.rect.bl\nr = pymupdf.Rect(pos, pos.x + 75, pos.y + 35) + (0, 20, 0, 20)\nannot = page.add_polyline_annot([r.bl, r.tr, r.br, r.tl])  # 'Polyline'\nannot.set_border(width=0.3, dashes=[2])\nannot.set_colors(stroke=blue, fill=green)\nannot.set_line_ends(pymupdf.PDF_ANNOT_LE_CLOSED_ARROW, pymupdf.PDF_ANNOT_LE_R_CLOSED_ARROW)\nannot.update(fill_color=(1, 1, 0))\nprint_descr(annot)\n\nr += displ\nannot = page.add_polygon_annot([r.bl, r.tr, r.br, r.tl])  # 'Polygon'\nannot.set_border(width=0.3, dashes=[2])\nannot.set_colors(stroke=blue, fill=gold)\nannot.set_line_ends(pymupdf.PDF_ANNOT_LE_DIAMOND, pymupdf.PDF_ANNOT_LE_CIRCLE)\nannot.update()\nprint_descr(annot)\n\nr += displ\nannot = page.add_line_annot(r.tr, r.bl)  # 'Line'\nannot.set_border(width=0.3, dashes=[2])\nannot.set_colors(stroke=blue, fill=gold)\nannot.set_line_ends(pymupdf.PDF_ANNOT_LE_DIAMOND, pymupdf.PDF_ANNOT_LE_CIRCLE)\nannot.update()\nprint_descr(annot)\n\nr += displ\nannot = page.add_rect_annot(r)  # 'Square'\nannot.set_border(width=1, dashes=[1, 2])\nannot.set_colors(stroke=blue, fill=gold)\nannot.update(opacity=0.5)\nprint_descr(annot)\n\nr += displ\nannot = page.add_circle_annot(r)  # 'Circle'\nannot.set_border(width=0.3, dashes=[2])\nannot.set_colors(stroke=blue, fill=gold)\nannot.update()\nprint_descr(annot)\n\nr += displ\nannot = page.add_file_annot(\n    r.tl, b\"just anything for testing\", \"testdata.txt\"  # 'FileAttachment'\n)\nprint_descr(annot)  # annot.rect\n\nr += displ\nannot = page.add_stamp_annot(r, stamp=10)  # 'Stamp'\nannot.set_colors(stroke=green)\nannot.update()\nprint_descr(annot)\n\nr += displ + (0, 0, 50, 10)\nrc = page.insert_textbox(\n    r,\n    \"This content will be removed upon applying the redaction.\",\n    color=blue,\n    align=pymupdf.TEXT_ALIGN_CENTER,\n)\nannot = page.add_redact_annot(r)\nprint_descr(annot)\n\ndoc.save(__file__.replace(\".py\", \"-%i.pdf\" % page.rotation), deflate=True) \n```", "```py\n# -*- coding: utf-8 -*-\nimport pymupdf\n\n# some colors\nblue  = (0,0,1)\ngreen = (0,1,0)\nred   = (1,0,0)\ngold  = (1,1,0)\n\n# a new PDF with 1 page\ndoc = pymupdf.open()\npage = doc.new_page()\n\n# 3 rectangles, same size, above each other\nr1 = pymupdf.Rect(100,100,200,150)\nr2 = r1 + (0,75,0,75)\nr3 = r2 + (0,75,0,75)\n\n# the text, Latin alphabet\nt = \"¡Un pequeño texto para practicar!\"\n\n# add 3 annots, modify the last one somewhat\na1 = page.add_freetext_annot(r1, t, color=red)\na2 = page.add_freetext_annot(r2, t, fontname=\"Ti\", color=blue)\na3 = page.add_freetext_annot(r3, t, fontname=\"Co\", color=blue, rotate=90)\na3.set_border(width=0)\na3.update(fontsize=8, fill_color=gold)\n\n# save the PDF\ndoc.save(\"a-freetext.pdf\") \n```", "```py\n\"\"\"\nProblem: Since MuPDF v1.16 a 'Freetext' annotation font is restricted to the\n\"normal\" versions (no bold, no italics) of Times-Roman, Helvetica, Courier.\nIt is impossible to use PyMuPDF to modify this.\n\nSolution: Using Adobe's JavaScript API, it is possible to manipulate properties\nof Freetext annotations. Check out these references:\nhttps://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/js_api_reference.pdf,\nor https://www.adobe.com/devnet/acrobat/documentation.html.\n\nFunction 'this.getAnnots()'  will return all annotations  as an array. We loop\nover this array to set the properties of the text through the 'richContents'\nattribute.\nThere is no explicit property to set text to bold, but it is possible to set\nfontWeight=800 (400 is the normal size) of richContents.\nOther attributes, like color, italics, etc. can also be set via richContents.\n\nIf we have 'FreeText' annotations created with PyMuPDF, we can make use of this\nJavaScript feature to modify the font - thus circumventing the above restriction.\n\nUse PyMuPDF v1.16.12 to create a push button that executes a Javascript\ncontaining the desired code. This is what this program does.\nThen open the resulting file with Adobe reader (!).\nAfter clicking on the button, all Freetext annotations will be bold, and the\nfile can be saved.\nIf desired, the button can be removed again, using free tools like PyMuPDF or\nPDF XChange editor.\n\nNote / Caution:\n---------------\nThe JavaScript will **only** work if the file is opened with Adobe Acrobat reader!\nWhen using other PDF viewers, the reaction is unforeseeable.\n\"\"\"\nimport sys\n\nimport pymupdf\n\n# this JavaScript will execute when the button is clicked:\njscript = \"\"\"\nvar annt = this.getAnnots();\nannt.forEach(function (item, index) {\n try {\n var span = item.richContents;\n span.forEach(function (it, dx) {\n it.fontWeight = 800;\n })\n item.richContents = span;\n } catch (err) {}\n});\napp.alert('Done');\n\"\"\"\ni_fn = sys.argv[1]  # input file name\no_fn = \"bold-\" + i_fn  # output filename\ndoc = pymupdf.open(i_fn)  # open input\npage = doc[0]  # get desired page\n\n# ------------------------------------------------\n# make a push button for invoking the JavaScript\n# ------------------------------------------------\n\nwidget = pymupdf.Widget()  # create widget\n\n# make it a 'PushButton'\nwidget.field_type = pymupdf.PDF_WIDGET_TYPE_BUTTON\nwidget.field_flags = pymupdf.PDF_BTN_FIELD_IS_PUSHBUTTON\n\nwidget.rect = pymupdf.Rect(5, 5, 20, 20)  # button position\n\nwidget.script = jscript  # fill in JavaScript source text\nwidget.field_name = \"Make bold\"  # arbitrary name\nwidget.field_value = \"Off\"  # arbitrary value\nwidget.fill_color = (0, 0, 1)  # make button visible\n\nannot = page.add_widget(widget)  # add the widget to the page\ndoc.save(o_fn)  # output the file \n```", "```py\nimport math\nimport pymupdf\n\n#------------------------------------------------------------------------------\n# preliminary stuff: create function value lists for sine and cosine\n#------------------------------------------------------------------------------\nw360 = math.pi * 2  # go through full circle\ndeg = w360 / 360  # 1 degree as radians\nrect = pymupdf.Rect(100,200, 300, 300)  # use this rectangle\nfirst_x = rect.x0  # x starts from left\nfirst_y = rect.y0 + rect.height / 2.  # rect middle means y = 0\nx_step = rect.width / 360  # rect width means 360 degrees\ny_scale = rect.height / 2.  # rect height means 2\nsin_points = []  # sine values go here\ncos_points = []  # cosine values go here\nfor x in range(362):  # now fill in the values\n    x_coord = x * x_step + first_x  # current x coordinate\n    y = -math.sin(x * deg)  # sine\n    p = (x_coord, y * y_scale + first_y)  # corresponding point\n    sin_points.append(p)  # append\n    y = -math.cos(x * deg)  # cosine\n    p = (x_coord, y * y_scale + first_y)  # corresponding point\n    cos_points.append(p)  # append\n\n#------------------------------------------------------------------------------\n# create the document with one page\n#------------------------------------------------------------------------------\ndoc = pymupdf.open()  # make new PDF\npage = doc.new_page()  # give it a page\n\n#------------------------------------------------------------------------------\n# add the Ink annotation, consisting of 2 curve segments\n#------------------------------------------------------------------------------\nannot = page.addInkAnnot((sin_points, cos_points))\n# let it look a little nicer\nannot.set_border(width=0.3, dashes=[1,])  # line thickness, some dashing\nannot.set_colors(stroke=(0,0,1))  # make the lines blue\nannot.update()  # update the appearance\n\npage.draw_rect(rect, width=0.3)  # only to demonstrate we did OK\n\ndoc.save(\"a-inktest.pdf\") \n```"]