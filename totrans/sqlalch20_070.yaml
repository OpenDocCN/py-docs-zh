- en: Ordering List
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/orderinglist.html](https://docs.sqlalchemy.org/en/20/orm/extensions/orderinglist.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A custom list that manages index/position information for contained elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'author:'
  prefs: []
  type: TYPE_NORMAL
- en: Jason Kirtland
  prefs: []
  type: TYPE_NORMAL
- en: '`orderinglist` is a helper for mutable ordered relationships. It will intercept
    list operations performed on a [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")-managed collection and automatically synchronize
    changes in list position onto a target scalar attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: A `slide` table, where each row refers to zero or more entries in
    a related `bullet` table. The bullets within a slide are displayed in order based
    on the value of the `position` column in the `bullet` table. As entries are reordered
    in memory, the value of the `position` attribute should be updated to reflect
    the new sort order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The standard relationship mapping will produce a list-like attribute on each
    `Slide` containing all related `Bullet` objects, but coping with changes in ordering
    is not handled automatically. When appending a `Bullet` into `Slide.bullets`,
    the `Bullet.position` attribute will remain unset until manually assigned. When
    the `Bullet` is inserted into the middle of the list, the following `Bullet` objects
    will also need to be renumbered.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")
    object automates this task, managing the `position` attribute on all `Bullet`
    objects in the collection. It is constructed using the [`ordering_list()`](#sqlalchemy.ext.orderinglist.ordering_list
    "sqlalchemy.ext.orderinglist.ordering_list") factory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'With the above mapping the `Bullet.position` attribute is managed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")
    construct only works with **changes** to a collection, and not the initial load
    from the database, and requires that the list be sorted when loaded. Therefore,
    be sure to specify `order_by` on the [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") against the target ordering attribute, so that
    the ordering is correct when first loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '[`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")
    only provides limited functionality when a primary key column or unique column
    is the target of the sort. Operations that are unsupported or are problematic
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: two entries must trade values. This is not supported directly in the case of
    a primary key or unique constraint because it means at least one row would need
    to be temporarily removed first, or changed to a third, neutral value while the
    switch occurs.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: an entry must be deleted in order to make room for a new entry. SQLAlchemy’s
    unit of work performs all INSERTs before DELETEs within a single flush. In the
    case of a primary key, it will trade an INSERT/DELETE of the same primary key
    for an UPDATE statement in order to lessen the impact of this limitation, however
    this does not take place for a UNIQUE column. A future feature will allow the
    “DELETE before INSERT” behavior to be possible, alleviating this limitation, though
    this feature will require explicit configuration at the mapper level for sets
    of columns that are to be handled in this way.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ordering_list()`](#sqlalchemy.ext.orderinglist.ordering_list "sqlalchemy.ext.orderinglist.ordering_list")
    takes the name of the related object’s ordering attribute as an argument. By default,
    the zero-based integer index of the object’s position in the [`ordering_list()`](#sqlalchemy.ext.orderinglist.ordering_list
    "sqlalchemy.ext.orderinglist.ordering_list") is synchronized with the ordering
    attribute: index 0 will get position 0, index 1 position 1, etc. To start numbering
    at 1 or some other integer, provide `count_from=1`.'
  prefs: []
  type: TYPE_NORMAL
- en: API Reference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [count_from_0](#sqlalchemy.ext.orderinglist.count_from_0)(index, collection)
    | Numbering function: consecutive integers starting at 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [count_from_1](#sqlalchemy.ext.orderinglist.count_from_1)(index, collection)
    | Numbering function: consecutive integers starting at 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [count_from_n_factory](#sqlalchemy.ext.orderinglist.count_from_n_factory)(start)
    | Numbering function: consecutive integers starting at arbitrary start. |'
  prefs: []
  type: TYPE_TB
- en: '| [ordering_list](#sqlalchemy.ext.orderinglist.ordering_list)(attr[, count_from,
    ordering_func, reorder_on_append]) | Prepares an [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList
    "sqlalchemy.ext.orderinglist.OrderingList") factory for use in mapper definitions.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [OrderingList](#sqlalchemy.ext.orderinglist.OrderingList) | A custom list
    that manages position information for its children. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Prepares an [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")
    factory for use in mapper definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns an object suitable for use as an argument to a Mapper relationship’s
    `collection_class` option. e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`attr` – Name of the mapped attribute to use for storage and retrieval of ordering
    information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count_from` – Set up an integer-based ordering, starting at `count_from`.
    For example, `ordering_list(''pos'', count_from=1)` would create a 1-based list
    in SQL, storing the value in the ‘pos’ column. Ignored if `ordering_func` is supplied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional arguments are passed to the [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList
    "sqlalchemy.ext.orderinglist.OrderingList") constructor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Numbering function: consecutive integers starting at 0.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Numbering function: consecutive integers starting at 1.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Numbering function: consecutive integers starting at arbitrary start.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: A custom list that manages position information for its children.
  prefs: []
  type: TYPE_NORMAL
- en: The [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")
    object is normally set up using the [`ordering_list()`](#sqlalchemy.ext.orderinglist.ordering_list
    "sqlalchemy.ext.orderinglist.ordering_list") factory function, used in conjunction
    with the [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.ext.orderinglist.OrderingList.__init__), [append()](#sqlalchemy.ext.orderinglist.OrderingList.append),
    [insert()](#sqlalchemy.ext.orderinglist.OrderingList.insert), [pop()](#sqlalchemy.ext.orderinglist.OrderingList.pop),
    [remove()](#sqlalchemy.ext.orderinglist.OrderingList.remove), [reorder()](#sqlalchemy.ext.orderinglist.OrderingList.reorder)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.orderinglist.OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList
    "sqlalchemy.ext.orderinglist.OrderingList") (`builtins.list`, `typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: A custom list that manages position information for its children.
  prefs: []
  type: TYPE_NORMAL
- en: '`OrderingList` is a `collection_class` list implementation that syncs position
    in a Python list with a position attribute on the mapped objects.'
  prefs: []
  type: TYPE_NORMAL
- en: This implementation relies on the list starting in the proper order, so be **sure**
    to put an `order_by` on your relationship.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ordering_attr` – Name of the attribute that stores the object’s order in the
    relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ordering_func` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional. A function that maps the position in the Python list to a value to
    store in the `ordering_attr`. Values returned are usually (but need not be!) integers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An `ordering_func` is called with two positional parameters: the index of the
    element in the list, and the list itself.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If omitted, Python list indexes are used for the attribute values. Two basic
    pre-built numbering functions are provided in this module: `count_from_0` and
    `count_from_1`. For more exotic examples like stepped numbering, alphabetical
    and Fibonacci numbering, see the unit tests.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`reorder_on_append` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default False. When appending an object with an existing (non-None) ordering
    value, that value will be left untouched unless `reorder_on_append` is true. This
    is an optimization to avoid a variety of dangerous unexpected database writes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: SQLAlchemy will add instances to the list via append() when your object loads.
    If for some reason the result set from the database skips a step in the ordering
    (say, row ‘1’ is missing but you get ‘2’, ‘3’, and ‘4’), reorder_on_append=True
    would immediately renumber the items to ‘1’, ‘2’, ‘3’. If you have multiple sessions
    making changes, any of whom happen to load this collection even in passing, all
    of the sessions would try to “clean up” the numbering in their commits, possibly
    causing all but one to fail with a concurrent modification error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Recommend leaving this with the default of False, and just call `reorder()`
    if you’re doing `append()` operations with previously ordered instances or when
    doing some housekeeping after manual sql operations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Append object to the end of the list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Insert object before index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Remove and return item at index (default last).
  prefs: []
  type: TYPE_NORMAL
- en: Raises IndexError if list is empty or index is out of range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Remove first occurrence of value.
  prefs: []
  type: TYPE_NORMAL
- en: Raises ValueError if the value is not present.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Synchronize ordering for the entire collection.
  prefs: []
  type: TYPE_NORMAL
- en: Sweeps through the list and ensures that each object has accurate ordering information
    set.
  prefs: []
  type: TYPE_NORMAL
- en: API Reference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [count_from_0](#sqlalchemy.ext.orderinglist.count_from_0)(index, collection)
    | Numbering function: consecutive integers starting at 0. |'
  prefs: []
  type: TYPE_TB
- en: '| [count_from_1](#sqlalchemy.ext.orderinglist.count_from_1)(index, collection)
    | Numbering function: consecutive integers starting at 1. |'
  prefs: []
  type: TYPE_TB
- en: '| [count_from_n_factory](#sqlalchemy.ext.orderinglist.count_from_n_factory)(start)
    | Numbering function: consecutive integers starting at arbitrary start. |'
  prefs: []
  type: TYPE_TB
- en: '| [ordering_list](#sqlalchemy.ext.orderinglist.ordering_list)(attr[, count_from,
    ordering_func, reorder_on_append]) | Prepares an [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList
    "sqlalchemy.ext.orderinglist.OrderingList") factory for use in mapper definitions.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [OrderingList](#sqlalchemy.ext.orderinglist.OrderingList) | A custom list
    that manages position information for its children. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Prepares an [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")
    factory for use in mapper definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns an object suitable for use as an argument to a Mapper relationship’s
    `collection_class` option. e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`attr` – Name of the mapped attribute to use for storage and retrieval of ordering
    information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`count_from` – Set up an integer-based ordering, starting at `count_from`.
    For example, `ordering_list(''pos'', count_from=1)` would create a 1-based list
    in SQL, storing the value in the ‘pos’ column. Ignored if `ordering_func` is supplied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional arguments are passed to the [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList
    "sqlalchemy.ext.orderinglist.OrderingList") constructor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Numbering function: consecutive integers starting at 0.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Numbering function: consecutive integers starting at 1.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Numbering function: consecutive integers starting at arbitrary start.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: A custom list that manages position information for its children.
  prefs: []
  type: TYPE_NORMAL
- en: The [`OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList "sqlalchemy.ext.orderinglist.OrderingList")
    object is normally set up using the [`ordering_list()`](#sqlalchemy.ext.orderinglist.ordering_list
    "sqlalchemy.ext.orderinglist.ordering_list") factory function, used in conjunction
    with the [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.ext.orderinglist.OrderingList.__init__), [append()](#sqlalchemy.ext.orderinglist.OrderingList.append),
    [insert()](#sqlalchemy.ext.orderinglist.OrderingList.insert), [pop()](#sqlalchemy.ext.orderinglist.OrderingList.pop),
    [remove()](#sqlalchemy.ext.orderinglist.OrderingList.remove), [reorder()](#sqlalchemy.ext.orderinglist.OrderingList.reorder)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.ext.orderinglist.OrderingList`](#sqlalchemy.ext.orderinglist.OrderingList
    "sqlalchemy.ext.orderinglist.OrderingList") (`builtins.list`, `typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: A custom list that manages position information for its children.
  prefs: []
  type: TYPE_NORMAL
- en: '`OrderingList` is a `collection_class` list implementation that syncs position
    in a Python list with a position attribute on the mapped objects.'
  prefs: []
  type: TYPE_NORMAL
- en: This implementation relies on the list starting in the proper order, so be **sure**
    to put an `order_by` on your relationship.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ordering_attr` – Name of the attribute that stores the object’s order in the
    relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ordering_func` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional. A function that maps the position in the Python list to a value to
    store in the `ordering_attr`. Values returned are usually (but need not be!) integers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'An `ordering_func` is called with two positional parameters: the index of the
    element in the list, and the list itself.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If omitted, Python list indexes are used for the attribute values. Two basic
    pre-built numbering functions are provided in this module: `count_from_0` and
    `count_from_1`. For more exotic examples like stepped numbering, alphabetical
    and Fibonacci numbering, see the unit tests.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`reorder_on_append` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default False. When appending an object with an existing (non-None) ordering
    value, that value will be left untouched unless `reorder_on_append` is true. This
    is an optimization to avoid a variety of dangerous unexpected database writes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: SQLAlchemy will add instances to the list via append() when your object loads.
    If for some reason the result set from the database skips a step in the ordering
    (say, row ‘1’ is missing but you get ‘2’, ‘3’, and ‘4’), reorder_on_append=True
    would immediately renumber the items to ‘1’, ‘2’, ‘3’. If you have multiple sessions
    making changes, any of whom happen to load this collection even in passing, all
    of the sessions would try to “clean up” the numbering in their commits, possibly
    causing all but one to fail with a concurrent modification error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Recommend leaving this with the default of False, and just call `reorder()`
    if you’re doing `append()` operations with previously ordered instances or when
    doing some housekeeping after manual sql operations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Append object to the end of the list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Insert object before index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Remove and return item at index (default last).
  prefs: []
  type: TYPE_NORMAL
- en: Raises IndexError if list is empty or index is out of range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Remove first occurrence of value.
  prefs: []
  type: TYPE_NORMAL
- en: Raises ValueError if the value is not present.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Synchronize ordering for the entire collection.
  prefs: []
  type: TYPE_NORMAL
- en: Sweeps through the list and ensures that each object has accurate ordering information
    set.
  prefs: []
  type: TYPE_NORMAL
