- en: jax.lax module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jax.lax 模块
- en: 原文：[`jax.readthedocs.io/en/latest/jax.lax.html`](https://jax.readthedocs.io/en/latest/jax.lax.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[`jax.readthedocs.io/en/latest/jax.lax.html`](https://jax.readthedocs.io/en/latest/jax.lax.html)
- en: '`jax.lax` is a library of primitives operations that underpins libraries such
    as `jax.numpy`. Transformation rules, such as JVP and batching rules, are typically
    defined as transformations on `jax.lax` primitives.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`jax.lax` 是支持诸如 `jax.numpy` 等库的基本操作的库。通常会定义转换规则，例如 JVP 和批处理规则，作为对 `jax.lax`
    基元的转换。'
- en: Many of the primitives are thin wrappers around equivalent XLA operations, described
    by the [XLA operation semantics](https://www.tensorflow.org/xla/operation_semantics)
    documentation. In a few cases JAX diverges from XLA, usually to ensure that the
    set of operations is closed under the operation of JVP and transpose rules.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 许多基元都是等价于 XLA 操作的薄包装，详细描述请参阅[XLA 操作语义](https://www.tensorflow.org/xla/operation_semantics)文档。
- en: Where possible, prefer to use libraries such as `jax.numpy` instead of using
    `jax.lax` directly. The `jax.numpy` API follows NumPy, and is therefore more stable
    and less likely to change than the `jax.lax` API.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，优先使用诸如 `jax.numpy` 等库，而不是直接使用 `jax.lax`。`jax.numpy` API 遵循 NumPy，因此比
    `jax.lax` API 更稳定，更不易更改。
- en: Operators
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Operators
- en: '| `abs`(x) | Elementwise absolute value: \(&#124;x&#124;\). |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| `abs`(x) | 按元素绝对值：\(&#124;x&#124;\)。 |'
- en: '| `acos`(x) | Elementwise arc cosine: \(\mathrm{acos}(x)\). |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| `acos`(x) | 按元素求反余弦：\(\mathrm{acos}(x)\)。 |'
- en: '| `acosh`(x) | Elementwise inverse hyperbolic cosine: \(\mathrm{acosh}(x)\).
    |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| `acosh`(x) | 按元素求反双曲余弦：\(\mathrm{acosh}(x)\)。 |'
- en: '| `add`(x, y) | Elementwise addition: \(x + y\). |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `add`(x, y) | 按元素加法：\(x + y\)。 |'
- en: '| `after_all`(*operands) | Merges one or more XLA token values. |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `after_all`(*operands) | 合并一个或多个 XLA 令牌值。 |'
- en: '| `approx_max_k`(operand, k[, ...]) | Returns max `k` values and their indices
    of the `operand` in an approximate manner. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `approx_max_k`(operand, k[, ...]) | 以近似方式返回 `operand` 的最大 `k` 值及其索引。 |'
- en: '| `approx_min_k`(operand, k[, ...]) | Returns min `k` values and their indices
    of the `operand` in an approximate manner. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `approx_min_k`(operand, k[, ...]) | 以近似方式返回 `operand` 的最小 `k` 值及其索引。 |'
- en: '| `argmax`(operand, axis, index_dtype) | Computes the index of the maximum
    element along `axis`. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `argmax`(operand, axis, index_dtype) | 计算沿着 `axis` 的最大元素的索引。 |'
- en: '| `argmin`(operand, axis, index_dtype) | Computes the index of the minimum
    element along `axis`. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `argmin`(operand, axis, index_dtype) | 计算沿着 `axis` 的最小元素的索引。 |'
- en: '| `asin`(x) | Elementwise arc sine: \(\mathrm{asin}(x)\). |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `asin`(x) | 按元素求反正弦：\(\mathrm{asin}(x)\)。 |'
- en: '| `asinh`(x) | Elementwise inverse hyperbolic sine: \(\mathrm{asinh}(x)\).
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `asinh`(x) | 按元素求反双曲正弦：\(\mathrm{asinh}(x)\)。 |'
- en: '| `atan`(x) | Elementwise arc tangent: \(\mathrm{atan}(x)\). |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `atan`(x) | 按元素求反正切：\(\mathrm{atan}(x)\)。 |'
- en: '| `atan2`(x, y) | Elementwise arc tangent of two variables: \(\mathrm{atan}({x
    \over y})\). |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `atan2`(x, y) | 两个变量的按元素反正切：\(\mathrm{atan}({x \over y})\)。 |'
- en: '| `atanh`(x) | Elementwise inverse hyperbolic tangent: \(\mathrm{atanh}(x)\).
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `atanh`(x) | 按元素求反双曲正切：\(\mathrm{atanh}(x)\)。 |'
- en: '| `batch_matmul`(lhs, rhs[, precision]) | Batch matrix multiplication. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `batch_matmul`(lhs, rhs[, precision]) | 批量矩阵乘法。 |'
- en: '| `bessel_i0e`(x) | Exponentially scaled modified Bessel function of order
    0: \(\mathrm{i0e}(x) = e^{-&#124;x&#124;} \mathrm{i0}(x)\) |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `bessel_i0e`(x) | 指数缩放修正贝塞尔函数 \(0\) 阶：\(\mathrm{i0e}(x) = e^{-&#124;x&#124;}
    \mathrm{i0}(x)\) |'
- en: '| `bessel_i1e`(x) | Exponentially scaled modified Bessel function of order
    1: \(\mathrm{i1e}(x) = e^{-&#124;x&#124;} \mathrm{i1}(x)\) |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `bessel_i1e`(x) | 指数缩放修正贝塞尔函数 \(1\) 阶：\(\mathrm{i1e}(x) = e^{-&#124;x&#124;}
    \mathrm{i1}(x)\) |'
- en: '| `betainc`(a, b, x) | Elementwise regularized incomplete beta integral. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `betainc`(a, b, x) | 按元素的正则化不完全贝塔积分。 |'
- en: '| `bitcast_convert_type`(operand, new_dtype) | Elementwise bitcast. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `bitcast_convert_type`(operand, new_dtype) | 按元素位转换。 |'
- en: '| `bitwise_and`(x, y) | Elementwise AND: \(x \wedge y\). |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_and`(x, y) | 按位与运算：\(x \wedge y\)。 |'
- en: '| `bitwise_not`(x) | Elementwise NOT: \(\neg x\). |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_not`(x) | 按位取反：\(\neg x\)。 |'
- en: '| `bitwise_or`(x, y) | Elementwise OR: \(x \vee y\). |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_or`(x, y) | 按位或运算：\(x \vee y\)。 |'
- en: '| `bitwise_xor`(x, y) | Elementwise exclusive OR: \(x \oplus y\). |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `bitwise_xor`(x, y) | 按位异或运算：\(x \oplus y\)。 |'
- en: '| `population_count`(x) | Elementwise popcount, count the number of set bits
    in each element. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `population_count`(x) | 按元素计算 popcount，即每个元素中设置的位数。 |'
- en: '| `broadcast`(operand, sizes) | Broadcasts an array, adding new leading dimensions
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `broadcast`(operand, sizes) | 广播数组，添加新的前导维度。 |'
- en: '| `broadcast_in_dim`(operand, shape, ...) | Wraps XLA''s [BroadcastInDim](https://www.tensorflow.org/xla/operation_semantics#broadcastindim)
    operator. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `broadcast_in_dim`(operand, shape, ...) | 包装 XLA 的 [BroadcastInDim](https://www.tensorflow.org/xla/operation_semantics#broadcastindim)
    操作符。 |'
- en: '| `broadcast_shapes`() | Returns the shape that results from NumPy broadcasting
    of shapes. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `broadcast_shapes`() | 返回经过 NumPy 广播后的形状。 |'
- en: '| `broadcast_to_rank`(x, rank) | Adds leading dimensions of `1` to give `x`
    rank `rank`. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `broadcast_to_rank`(x, rank) | 添加 `1` 的前导维度，使 `x` 的等级为 `rank`。 |'
- en: '| `broadcasted_iota`(dtype, shape, dimension) | Convenience wrapper around
    `iota`. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `broadcasted_iota`(dtype, shape, dimension) | `iota`的便捷封装器。 |'
- en: '| `cbrt`(x) | Elementwise cube root: \(\sqrt[3]{x}\). |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `cbrt`(x) | 元素级立方根：\(\sqrt[3]{x}\)。 |'
- en: '| `ceil`(x) | Elementwise ceiling: \(\left\lceil x \right\rceil\). |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `ceil`(x) | 元素级向上取整：\(\left\lceil x \right\rceil\)。 |'
- en: '| `clamp`(min, x, max) | Elementwise clamp. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `clamp`(min, x, max) | 元素级 clamp 函数。 |'
- en: '| `clz`(x) | Elementwise count-leading-zeros. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `clz`(x) | 元素级计算前导零的个数。 |'
- en: '| `collapse`(operand, start_dimension[, ...]) | Collapses dimensions of an
    array into a single dimension. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `collapse`(operand, start_dimension[, ...]) | 将数组的维度折叠为单个维度。 |'
- en: '| `complex`(x, y) | Elementwise make complex number: \(x + jy\). |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `complex`(x, y) | 元素级构造复数：\(x + jy\)。 |'
- en: '| `concatenate`(operands, dimension) | Concatenates a sequence of arrays along
    dimension. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `concatenate`(operands, dimension) | 沿指定维度连接一系列数组。 |'
- en: '| `conj`(x) | Elementwise complex conjugate function: \(\overline{x}\). |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `conj`(x) | 元素级复数的共轭函数：\(\overline{x}\)。 |'
- en: '| `conv`(lhs, rhs, window_strides, padding[, ...]) | Convenience wrapper around
    conv_general_dilated. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `conv`(lhs, rhs, window_strides, padding[, ...]) | `conv_general_dilated`的便捷封装器。
    |'
- en: '| `convert_element_type`(operand, new_dtype) | Elementwise cast. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `convert_element_type`(operand, new_dtype) | 元素级类型转换。 |'
- en: '| `conv_dimension_numbers`(lhs_shape, rhs_shape, ...) | Converts convolution
    dimension_numbers to a ConvDimensionNumbers. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `conv_dimension_numbers`(lhs_shape, rhs_shape, ...) | 将卷积维度编号转换为 `ConvDimensionNumbers`。
    |'
- en: '| `conv_general_dilated`(lhs, rhs, ...[, ...]) | General n-dimensional convolution
    operator, with optional dilation. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `conv_general_dilated`(lhs, rhs, ...[, ...]) | 带有可选扩展的通用 n 维卷积运算符。 |'
- en: '| `conv_general_dilated_local`(lhs, rhs, ...[, ...]) | General n-dimensional
    unshared convolution operator with optional dilation. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `conv_general_dilated_local`(lhs, rhs, ...[, ...]) | 带有可选扩展的通用 n 维非共享卷积运算符。
    |'
- en: '| `conv_general_dilated_patches`(lhs, ...[, ...]) | Extract patches subject
    to the receptive field of conv_general_dilated. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `conv_general_dilated_patches`(lhs, ...[, ...]) | 提取符合 `conv_general_dilated`
    接受域的补丁。 |'
- en: '| `conv_transpose`(lhs, rhs, strides, padding[, ...]) | Convenience wrapper
    for calculating the N-d convolution "transpose". |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `conv_transpose`(lhs, rhs, strides, padding[, ...]) | 计算 N 维卷积的“转置”的便捷封装器。
    |'
- en: '| `conv_with_general_padding`(lhs, rhs, ...[, ...]) | Convenience wrapper around
    conv_general_dilated. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `conv_with_general_padding`(lhs, rhs, ...[, ...]) | `conv_general_dilated`的便捷封装器。
    |'
- en: '| `cos`(x) | Elementwise cosine: \(\mathrm{cos}(x)\). |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `cos`(x) | 元素级余弦函数：\(\mathrm{cos}(x)\)。 |'
- en: '| `cosh`(x) | Elementwise hyperbolic cosine: \(\mathrm{cosh}(x)\). |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `cosh`(x) | 元素级双曲余弦函数：\(\mathrm{cosh}(x)\)。 |'
- en: '| `cumlogsumexp`(operand[, axis, reverse]) | Computes a cumulative logsumexp
    along axis. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `cumlogsumexp`(operand[, axis, reverse]) | 沿轴计算累积 logsumexp。 |'
- en: '| `cummax`(operand[, axis, reverse]) | Computes a cumulative maximum along
    axis. |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `cummax`(operand[, axis, reverse]) | 沿轴计算累积最大值。 |'
- en: '| `cummin`(operand[, axis, reverse]) | Computes a cumulative minimum along
    axis. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `cummin`(operand[, axis, reverse]) | 沿轴计算累积最小值。 |'
- en: '| `cumprod`(operand[, axis, reverse]) | Computes a cumulative product along
    axis. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `cumprod`(operand[, axis, reverse]) | 沿轴计算累积乘积。 |'
- en: '| `cumsum`(operand[, axis, reverse]) | Computes a cumulative sum along axis.
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `cumsum`(operand[, axis, reverse]) | 沿轴计算累积和。 |'
- en: '| `digamma`(x) | Elementwise digamma: \(\psi(x)\). |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `digamma`(x) | 元素级 digamma 函数：\(\psi(x)\)。 |'
- en: '| `div`(x, y) | Elementwise division: \(x \over y\). |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `div`(x, y) | 元素级除法：\(x \over y\)。 |'
- en: '| `dot`(lhs, rhs[, precision, ...]) | Vector/vector, matrix/vector, and matrix/matrix
    multiplication. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `dot`(lhs, rhs[, precision, ...]) | 向量/向量，矩阵/向量和矩阵/矩阵乘法。 |'
- en: '| `dot_general`(lhs, rhs, dimension_numbers[, ...]) | General dot product/contraction
    operator. |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `dot_general`(lhs, rhs, dimension_numbers[, ...]) | 通用的点积/收缩运算符。 |'
- en: '| `dynamic_index_in_dim`(operand, index[, axis, ...]) | Convenience wrapper
    around dynamic_slice to perform int indexing. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `dynamic_index_in_dim`(operand, index[, axis, ...]) | 对 `dynamic_slice` 的便捷封装，用于执行整数索引。
    |'
- en: '| `dynamic_slice`(operand, start_indices, ...) | Wraps XLA''s [DynamicSlice](https://www.tensorflow.org/xla/operation_semantics#dynamicslice)
    operator. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `dynamic_slice`(operand, start_indices, ...) | 封装了 XLA 的 [DynamicSlice](https://www.tensorflow.org/xla/operation_semantics#dynamicslice)
    操作符。 |'
- en: '| `dynamic_slice_in_dim`(operand, start_index, ...) | Convenience wrapper around
    `lax.dynamic_slice()` applied to one dimension. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `dynamic_slice_in_dim`(operand, start_index, ...) | 方便地封装了应用于单个维度的 `lax.dynamic_slice()`。
    |'
- en: '| `dynamic_update_index_in_dim`(operand, update, ...) | Convenience wrapper
    around `dynamic_update_slice()` to update a slice of size 1 in a single `axis`.
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `dynamic_update_index_in_dim`(operand, update, ...) | 方便地封装了 `dynamic_update_slice()`，用于在单个
    `axis` 中更新大小为 1 的切片。 |'
- en: '| `dynamic_update_slice`(operand, update, ...) | Wraps XLA''s [DynamicUpdateSlice](https://www.tensorflow.org/xla/operation_semantics#dynamicupdateslice)
    operator. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `dynamic_update_slice`(operand, update, ...) | 封装了 XLA 的 [DynamicUpdateSlice](https://www.tensorflow.org/xla/operation_semantics#dynamicupdateslice)
    操作符。 |'
- en: '| `dynamic_update_slice_in_dim`(operand, update, ...) | Convenience wrapper
    around `dynamic_update_slice()` to update a slice in a single `axis`. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `dynamic_update_slice_in_dim`(operand, update, ...) | 方便地封装了 `dynamic_update_slice()`，用于在单个
    `axis` 中更新一个切片。 |'
- en: '| `eq`(x, y) | Elementwise equals: \(x = y\). |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `eq`(x, y) | 元素级相等：\(x = y\)。 |'
- en: '| `erf`(x) | Elementwise error function: \(\mathrm{erf}(x)\). |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `erf`(x) | 元素级误差函数：\(\mathrm{erf}(x)\)。 |'
- en: '| `erfc`(x) | Elementwise complementary error function: \(\mathrm{erfc}(x)
    = 1 - \mathrm{erf}(x)\). |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `erfc`(x) | 元素级补充误差函数：\(\mathrm{erfc}(x) = 1 - \mathrm{erf}(x)\)。 |'
- en: '| `erf_inv`(x) | Elementwise inverse error function: \(\mathrm{erf}^{-1}(x)\).
    |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `erf_inv`(x) | 元素级反误差函数：\(\mathrm{erf}^{-1}(x)\)。 |'
- en: '| `exp`(x) | Elementwise exponential: \(e^x\). |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `exp`(x) | 元素级指数函数：\(e^x\)。 |'
- en: '| `expand_dims`(array, dimensions) | Insert any number of size 1 dimensions
    into an array. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `expand_dims`(array, dimensions) | 将任意数量的大小为 1 的维度插入到数组中。 |'
- en: '| `expm1`(x) | Elementwise \(e^{x} - 1\). |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `expm1`(x) | 元素级运算 \(e^{x} - 1\)。 |'
- en: '| `fft`(x, fft_type, fft_lengths) |  |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `fft`(x, fft_type, fft_lengths) |  |'
- en: '| `floor`(x) | Elementwise floor: \(\left\lfloor x \right\rfloor\). |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `floor`(x) | 元素级向下取整：\(\left\lfloor x \right\rfloor\)。 |'
- en: '| `full`(shape, fill_value[, dtype, sharding]) | Returns an array of shape
    filled with fill_value. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `full`(shape, fill_value[, dtype, sharding]) | 返回填充值为 fill_value 的形状数组。 |'
- en: '| `full_like`(x, fill_value[, dtype, shape, ...]) | Create a full array like
    np.full based on the example array x. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `full_like`(x, fill_value[, dtype, shape, ...]) | 基于示例数组 x 创建类似于 np.full
    的完整数组。 |'
- en: '| `gather`(operand, start_indices, ...[, ...]) | Gather operator. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `gather`(operand, start_indices, ...[, ...]) | Gather 操作符。 |'
- en: '| `ge`(x, y) | Elementwise greater-than-or-equals: \(x \geq y\). |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `ge`(x, y) | 元素级大于或等于：\(x \geq y\)。 |'
- en: '| `gt`(x, y) | Elementwise greater-than: \(x > y\). |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `gt`(x, y) | 元素级大于：\(x > y\)。 |'
- en: '| `igamma`(a, x) | Elementwise regularized incomplete gamma function. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `igamma`(a, x) | 元素级正则化不完全 gamma 函数。 |'
- en: '| `igammac`(a, x) | Elementwise complementary regularized incomplete gamma
    function. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `igammac`(a, x) | 元素级补充正则化不完全 gamma 函数。 |'
- en: '| `imag`(x) | Elementwise extract imaginary part: \(\mathrm{Im}(x)\). |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `imag`(x) | 提取复数的虚部：\(\mathrm{Im}(x)\)。 |'
- en: '| `index_in_dim`(operand, index[, axis, keepdims]) | Convenience wrapper around
    `lax.slice()` to perform int indexing. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `index_in_dim`(operand, index[, axis, keepdims]) | 方便地封装了 `lax.slice()`，用于执行整数索引。
    |'
- en: '| `index_take`(src, idxs, axes) |  |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `index_take`(src, idxs, axes) |  |'
- en: '| `integer_pow`(x, y) | Elementwise power: \(x^y\), where \(y\) is a fixed
    integer. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `integer_pow`(x, y) | 元素级幂运算：\(x^y\)，其中 \(y\) 是固定整数。 |'
- en: '| `iota`(dtype, size) | Wraps XLA''s [Iota](https://www.tensorflow.org/xla/operation_semantics#iota)
    operator. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `iota`(dtype, size) | 封装了 XLA 的 [Iota](https://www.tensorflow.org/xla/operation_semantics#iota)
    操作符。 |'
- en: '| `is_finite`(x) | Elementwise \(\mathrm{isfinite}\). |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `is_finite`(x) | 元素级 \(\mathrm{isfinite}\)。 |'
- en: '| `le`(x, y) | Elementwise less-than-or-equals: \(x \leq y\). |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `le`(x, y) | 元素级小于或等于：\(x \leq y\)。 |'
- en: '| `lgamma`(x) | Elementwise log gamma: \(\mathrm{log}(\Gamma(x))\). |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `lgamma`(x) | 元素级对数 gamma 函数：\(\mathrm{log}(\Gamma(x))\)。 |'
- en: '| `log`(x) | Elementwise natural logarithm: \(\mathrm{log}(x)\). |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `log`(x) | 元素级自然对数：\(\mathrm{log}(x)\)。 |'
- en: '| `log1p`(x) | Elementwise \(\mathrm{log}(1 + x)\). |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `log1p`(x) | 元素级 \(\mathrm{log}(1 + x)\)。 |'
- en: '| `logistic`(x) | Elementwise logistic (sigmoid) function: \(\frac{1}{1 + e^{-x}}\).
    |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `logistic`(x) | 元素级 logistic（sigmoid）函数：\(\frac{1}{1 + e^{-x}}\)。 |'
- en: '| `lt`(x, y) | Elementwise less-than: \(x < y\). |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `lt`(x, y) | 元素级小于：\(x < y\)。 |'
- en: '| `max`(x, y) | Elementwise maximum: \(\mathrm{max}(x, y)\) |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `max`(x, y) | 元素级最大值：\(\mathrm{max}(x, y)\) |'
- en: '| `min`(x, y) | Elementwise minimum: \(\mathrm{min}(x, y)\) |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `min`(x, y) | 元素级最小值：\(\mathrm{min}(x, y)\) |'
- en: '| `mul`(x, y) | Elementwise multiplication: \(x \times y\). |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `mul`(x, y) | 元素级乘法：\(x \times y\)。 |'
- en: '| `ne`(x, y) | Elementwise not-equals: \(x \neq y\). |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `ne`(x, y) | 按位不等于：\(x \neq y\)。 |'
- en: '| `neg`(x) | Elementwise negation: \(-x\). |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `neg`(x) | 按位取负：\(-x\)。 |'
- en: '| `nextafter`(x1, x2) | Returns the next representable value after x1 in the
    direction of x2. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `nextafter`(x1, x2) | 返回x1在x2方向上的下一个可表示的值。 |'
- en: '| `pad`(operand, padding_value, padding_config) | Applies low, high, and/or
    interior padding to an array. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `pad`(operand, padding_value, padding_config) | 对数组应用低、高和/或内部填充。 |'
- en: '| `polygamma`(m, x) | Elementwise polygamma: \(\psi^{(m)}(x)\). |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `polygamma`(m, x) | 按位多次gamma函数：\(\psi^{(m)}(x)\)。 |'
- en: '| `population_count`(x) | Elementwise popcount, count the number of set bits
    in each element. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `population_count`(x) | 按位人口统计，统计每个元素中设置的位数。 |'
- en: '| `pow`(x, y) | Elementwise power: \(x^y\). |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `pow`(x, y) | 按位幂运算：\(x^y\)。 |'
- en: '| `random_gamma_grad`(a, x) | Elementwise derivative of samples from Gamma(a,
    1). |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `random_gamma_grad`(a, x) | Gamma分布导数的按位计算。 |'
- en: '| `real`(x) | Elementwise extract real part: \(\mathrm{Re}(x)\). |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `real`(x) | 按位提取实部：\(\mathrm{Re}(x)\)。 |'
- en: '| `reciprocal`(x) | Elementwise reciprocal: \(1 \over x\). |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `reciprocal`(x) | 按位倒数：\(1 \over x\)。 |'
- en: '| `reduce`(operands, init_values, computation, ...) | Wraps XLA''s [Reduce](https://www.tensorflow.org/xla/operation_semantics#reduce)
    operator. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `reduce`(operands, init_values, computation, ...) | 封装了XLA的 [Reduce](https://www.tensorflow.org/xla/operation_semantics#reduce)
    运算符。 |'
- en: '| `reduce_precision`(operand, exponent_bits, ...) | Wraps XLA''s [ReducePrecision](https://www.tensorflow.org/xla/operation_semantics#reduceprecision)
    operator. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `reduce_precision`(operand, exponent_bits, ...) | 封装了XLA的 [ReducePrecision](https://www.tensorflow.org/xla/operation_semantics#reduceprecision)
    运算符。 |'
- en: '| `reduce_window`(operand, init_value, ...[, ...]) |  |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `reduce_window`(operand, init_value, ...[, ...]) |  |'
- en: '| `rem`(x, y) | Elementwise remainder: \(x \bmod y\). |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `rem`(x, y) | 按位取余：\(x \bmod y\)。 |'
- en: '| `reshape`(operand, new_sizes[, dimensions]) | Wraps XLA''s [Reshape](https://www.tensorflow.org/xla/operation_semantics#reshape)
    operator. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `reshape`(operand, new_sizes[, dimensions]) | 封装了XLA的 [Reshape](https://www.tensorflow.org/xla/operation_semantics#reshape)
    运算符。 |'
- en: '| `rev`(operand, dimensions) | Wraps XLA''s [Rev](https://www.tensorflow.org/xla/operation_semantics#rev_reverse)
    operator. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `rev`(operand, dimensions) | 封装了XLA的 [Rev](https://www.tensorflow.org/xla/operation_semantics#rev_reverse)
    运算符。 |'
- en: '| `rng_bit_generator`(key, shape[, dtype, algorithm]) | Stateless PRNG bit
    generator. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `rng_bit_generator`(key, shape[, dtype, algorithm]) | 无状态的伪随机数位生成器。 |'
- en: '| `rng_uniform`(a, b, shape) | Stateful PRNG generator. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `rng_uniform`(a, b, shape) | 有状态的伪随机数生成器。 |'
- en: '| `round`(x[, rounding_method]) | Elementwise round. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `round`(x[, rounding_method]) | 按位四舍五入。 |'
- en: '| `rsqrt`(x) | Elementwise reciprocal square root: \(1 \over \sqrt{x}\). |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `rsqrt`(x) | 按位倒数平方根：\(1 \over \sqrt{x}\)。 |'
- en: '| `scatter`(operand, scatter_indices, updates, ...) | Scatter-update operator.
    |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `scatter`(operand, scatter_indices, updates, ...) | Scatter-update 运算符。 |'
- en: '| `scatter_add`(operand, scatter_indices, ...[, ...]) | Scatter-add operator.
    |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `scatter_add`(operand, scatter_indices, ...[, ...]) | Scatter-add 运算符。 |'
- en: '| `scatter_apply`(operand, scatter_indices, ...) | Scatter-apply operator.
    |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `scatter_apply`(operand, scatter_indices, ...) | Scatter-apply 运算符。 |'
- en: '| `scatter_max`(operand, scatter_indices, ...[, ...]) | Scatter-max operator.
    |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `scatter_max`(operand, scatter_indices, ...[, ...]) | Scatter-max 运算符。 |'
- en: '| `scatter_min`(operand, scatter_indices, ...[, ...]) | Scatter-min operator.
    |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `scatter_min`(operand, scatter_indices, ...[, ...]) | Scatter-min 运算符。 |'
- en: '| `scatter_mul`(operand, scatter_indices, ...[, ...]) | Scatter-multiply operator.
    |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `scatter_mul`(operand, scatter_indices, ...[, ...]) | Scatter-multiply 运算符。
    |'
- en: '| `shift_left`(x, y) | Elementwise left shift: \(x \ll y\). |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `shift_left`(x, y) | 按位左移：\(x \ll y\)。 |'
- en: '| `shift_right_arithmetic`(x, y) | Elementwise arithmetic right shift: \(x
    \gg y\). |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `shift_right_arithmetic`(x, y) | 按位算术右移：\(x \gg y\)。 |'
- en: '| `shift_right_logical`(x, y) | Elementwise logical right shift: \(x \gg y\).
    |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `shift_right_logical`(x, y) | 按位逻辑右移：\(x \gg y\)。 |'
- en: '| `sign`(x) | Elementwise sign. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `sign`(x) | 按位符号函数。 |'
- en: '| `sin`(x) | Elementwise sine: \(\mathrm{sin}(x)\). |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `sin`(x) | 按位正弦函数：\(\mathrm{sin}(x)\)。 |'
- en: '| `sinh`(x) | Elementwise hyperbolic sine: \(\mathrm{sinh}(x)\). |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `sinh`(x) | 按位双曲正弦函数：\(\mathrm{sinh}(x)\)。 |'
- en: '| `slice`(operand, start_indices, limit_indices) | Wraps XLA''s [Slice](https://www.tensorflow.org/xla/operation_semantics#slice)
    operator. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `slice`(operand, start_indices, limit_indices) | 封装了XLA的 [Slice](https://www.tensorflow.org/xla/operation_semantics#slice)
    运算符。 |'
- en: '| `slice_in_dim`(operand, start_index, limit_index) | Convenience wrapper around
    `lax.slice()` applying to only one dimension. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `slice_in_dim`(operand, start_index, limit_index) | `lax.slice()` 的单维度应用封装。
    |'
- en: '| `sort`() | Wraps XLA''s [Sort](https://www.tensorflow.org/xla/operation_semantics#sort)
    operator. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `sort`() | 封装了XLA的 [Sort](https://www.tensorflow.org/xla/operation_semantics#sort)
    运算符。 |'
- en: '| `sort_key_val`(keys, values[, dimension, ...]) | Sorts `keys` along `dimension`
    and applies the same permutation to `values`. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `sort_key_val`(keys, values[, dimension, ...]) | 沿着`dimension`排序`keys`并对`values`应用相同的置换。
    |'
- en: '| `sqrt`(x) | Elementwise square root: \(\sqrt{x}\). |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `sqrt`(x) | 逐元素平方根：\(\sqrt{x}\)。 |'
- en: '| `square`(x) | Elementwise square: \(x²\). |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `square`(x) | 逐元素平方：\(x²\)。 |'
- en: '| `squeeze`(array, dimensions) | Squeeze any number of size 1 dimensions from
    an array. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `squeeze`(array, dimensions) | 从数组中挤出任意数量的大小为1的维度。 |'
- en: '| `sub`(x, y) | Elementwise subtraction: \(x - y\). |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `sub`(x, y) | 逐元素减法：\(x - y\)。 |'
- en: '| `tan`(x) | Elementwise tangent: \(\mathrm{tan}(x)\). |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `tan`(x) | 逐元素正切：\(\mathrm{tan}(x)\)。 |'
- en: '| `tanh`(x) | Elementwise hyperbolic tangent: \(\mathrm{tanh}(x)\). |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `tanh`(x) | 逐元素双曲正切：\(\mathrm{tanh}(x)\)。 |'
- en: '| `top_k`(operand, k) | Returns top `k` values and their indices along the
    last axis of `operand`. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `top_k`(operand, k) | 返回`operand`最后一轴上的前`k`个值及其索引。 |'
- en: '| `transpose`(operand, permutation) | Wraps XLA''s [Transpose](https://www.tensorflow.org/xla/operation_semantics#transpose)
    operator. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `transpose`(operand, permutation) | 包装XLA的[Transpose](https://www.tensorflow.org/xla/operation_semantics#transpose)运算符。
    |'
- en: '| `zeros_like_array`(x) |  |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `zeros_like_array`(x) |  |'
- en: '| `zeta`(x, q) | Elementwise Hurwitz zeta function: \(\zeta(x, q)\) |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `zeta`(x, q) | 逐元素Hurwitz zeta函数：\(\zeta(x, q)\) |'
- en: '## Control flow operators'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '## 控制流操作符'
- en: '| `associative_scan`(fn, elems[, reverse, axis]) | Performs a scan with an
    associative binary operation, in parallel. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `associative_scan`(fn, elems[, reverse, axis]) | 使用关联二元操作并行执行扫描。 |'
- en: '| `cond`(pred, true_fun, false_fun, *operands[, ...]) | Conditionally apply
    `true_fun` or `false_fun`. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `cond`(pred, true_fun, false_fun, *operands[, ...]) | 根据条件应用`true_fun`或`false_fun`。
    |'
- en: '| `fori_loop`(lower, upper, body_fun, init_val, *) | Loop from `lower` to `upper`
    by reduction to `jax.lax.while_loop()`. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `fori_loop`(lower, upper, body_fun, init_val, *) | 通过归约到`jax.lax.while_loop()`从`lower`到`upper`循环。
    |'
- en: '| `map`(f, xs) | Map a function over leading array axes. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `map`(f, xs) | 在主要数组轴上映射函数。 |'
- en: '| `scan`(f, init[, xs, length, reverse, unroll, ...]) | Scan a function over
    leading array axes while carrying along state. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `scan`(f, init[, xs, length, reverse, unroll, ...]) | 在主要数组轴上扫描函数并携带状态。 |'
- en: '| `select`(pred, on_true, on_false) | Selects between two branches based on
    a boolean predicate. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `select`(pred, on_true, on_false) | 根据布尔谓词在两个分支之间选择。 |'
- en: '| `select_n`(which, *cases) | Selects array values from multiple cases. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| `select_n`(which, *cases) | 从多个情况中选择数组值。 |'
- en: '| `switch`(index, branches, *operands[, operand]) | Apply exactly one of the
    `branches` given by `index`. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `switch`(index, branches, *operands[, operand]) | 根据`index`应用恰好一个`branches`。
    |'
- en: '| `while_loop`(cond_fun, body_fun, init_val) | Call `body_fun` repeatedly in
    a loop while `cond_fun` is True. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `while_loop`(cond_fun, body_fun, init_val) | 在`cond_fun`为True时重复调用`body_fun`。
    |'
- en: Custom gradient operators
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义梯度操作符
- en: '| `stop_gradient`(x) | Stops gradient computation. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `stop_gradient`(x) | 停止梯度计算。 |'
- en: '| `custom_linear_solve`(matvec, b, solve[, ...]) | Perform a matrix-free linear
    solve with implicitly defined gradients. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `custom_linear_solve`(matvec, b, solve[, ...]) | 使用隐式定义的梯度执行无矩阵线性求解。 |'
- en: '| `custom_root`(f, initial_guess, solve, ...[, ...]) | Differentiably solve
    for the roots of a function. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `custom_root`(f, initial_guess, solve, ...[, ...]) | 可微分求解函数的根。 |'
- en: '## Parallel operators'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '## 并行操作符'
- en: '| `all_gather`(x, axis_name, *[, ...]) | Gather values of x across all replicas.
    |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `all_gather`(x, axis_name, *[, ...]) | 在所有副本中收集`x`的值。 |'
- en: '| `all_to_all`(x, axis_name, split_axis, ...[, ...]) | Materialize the mapped
    axis and map a different axis. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `all_to_all`(x, axis_name, split_axis, ...[, ...]) | 映射轴的实例化和映射不同轴。 |'
- en: '| `pdot`(x, y, axis_name[, pos_contract, ...]) |  |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `pdot`(x, y, axis_name[, pos_contract, ...]) |  |'
- en: '| `psum`(x, axis_name, *[, axis_index_groups]) | Compute an all-reduce sum
    on `x` over the pmapped axis `axis_name`. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `psum`(x, axis_name, *[, axis_index_groups]) | 在映射的轴`axis_name`上进行全归约求和。
    |'
- en: '| `psum_scatter`(x, axis_name, *[, ...]) | Like `psum(x, axis_name)` but each
    device retains only part of the result. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `psum_scatter`(x, axis_name, *[, ...]) | 像`psum(x, axis_name)`，但每个设备仅保留部分结果。
    |'
- en: '| `pmax`(x, axis_name, *[, axis_index_groups]) | Compute an all-reduce max
    on `x` over the pmapped axis `axis_name`. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `pmax`(x, axis_name, *[, axis_index_groups]) | 在映射的轴`axis_name`上计算全归约最大值。
    |'
- en: '| `pmin`(x, axis_name, *[, axis_index_groups]) | Compute an all-reduce min
    on `x` over the pmapped axis `axis_name`. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `pmin`(x, axis_name, *[, axis_index_groups]) | 在映射的轴`axis_name`上计算全归约最小值。
    |'
- en: '| `pmean`(x, axis_name, *[, axis_index_groups]) | Compute an all-reduce mean
    on `x` over the pmapped axis `axis_name`. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| `pmean`(x, axis_name, *[, axis_index_groups]) | 在映射的轴`axis_name`上计算全归约均值。
    |'
- en: '| `ppermute`(x, axis_name, perm) | Perform a collective permutation according
    to the permutation `perm`. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| `ppermute`(x, axis_name, perm) | 根据置换 `perm` 执行集体置换。 |'
- en: '| `pshuffle`(x, axis_name, perm) | Convenience wrapper of jax.lax.ppermute
    with alternate permutation encoding |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `pshuffle`(x, axis_name, perm) | 使用替代置换编码的 jax.lax.ppermute 的便捷包装器 |'
- en: '| `pswapaxes`(x, axis_name, axis, *[, ...]) | Swap the pmapped axis `axis_name`
    with the unmapped axis `axis`. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `pswapaxes`(x, axis_name, axis, *[, ...]) | 将 pmapped 轴 `axis_name` 与非映射轴
    `axis` 交换。 |'
- en: '| `axis_index`(axis_name) | Return the index along the mapped axis `axis_name`.
    |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `axis_index`(axis_name) | 返回沿映射轴 `axis_name` 的索引。 |'
- en: Sharding-related operators
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与分片相关的操作符
- en: '| `with_sharding_constraint`(x, shardings) | Mechanism to constrain the sharding
    of an Array inside a jitted computation |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `with_sharding_constraint`(x, shardings) | 在 jitted 计算中约束数组的分片机制 |'
- en: '## Linear algebra operators (jax.lax.linalg)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '## 线性代数操作符 (jax.lax.linalg)'
- en: '| `cholesky`(x, *[, symmetrize_input]) | Cholesky decomposition. |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `cholesky`(x, *[, symmetrize_input]) | Cholesky 分解。 |'
- en: '| `eig`(x, *[, compute_left_eigenvectors, ...]) | Eigendecomposition of a general
    matrix. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `eig`(x, *[, compute_left_eigenvectors, ...]) | 一般矩阵的特征分解。 |'
- en: '| `eigh`(x, *[, lower, symmetrize_input, ...]) | Eigendecomposition of a Hermitian
    matrix. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `eigh`(x, *[, lower, symmetrize_input, ...]) | Hermite 矩阵的特征分解。 |'
- en: '| `hessenberg`(a) | Reduces a square matrix to upper Hessenberg form. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `hessenberg`(a) | 将方阵约化为上 Hessenberg 形式。 |'
- en: '| `lu`(x) | LU decomposition with partial pivoting. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `lu`(x) | 带有部分主元列主元分解。 |'
- en: '| `householder_product`(a, taus) | Product of elementary Householder reflectors.
    |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `householder_product`(a, taus) | 单元 Householder 反射的乘积。 |'
- en: '| `qdwh`(x, *[, is_hermitian, max_iterations, ...]) | QR-based dynamically
    weighted Halley iteration for polar decomposition. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `qdwh`(x, *[, is_hermitian, max_iterations, ...]) | 基于 QR 的动态加权 Halley 迭代进行极分解。
    |'
- en: '| `qr`(x, *[, full_matrices]) | QR decomposition. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `qr`(x, *[, full_matrices]) | QR 分解。 |'
- en: '| `schur`(x, *[, compute_schur_vectors, ...]) |  |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `schur`(x, *[, compute_schur_vectors, ...]) |  |'
- en: '| `svd`() | Singular value decomposition. |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `svd`() | 奇异值分解。 |'
- en: '| `triangular_solve`(a, b, *[, left_side, ...]) | Triangular solve. |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `triangular_solve`(a, b, *[, left_side, ...]) | 三角解法。 |'
- en: '| `tridiagonal`(a, *[, lower]) | Reduces a symmetric/Hermitian matrix to tridiagonal
    form. |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `tridiagonal`(a, *[, lower]) | 将对称/Hermitian 矩阵约化为三对角形式。 |'
- en: '| `tridiagonal_solve`(dl, d, du, b) | Computes the solution of a tridiagonal
    linear system. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `tridiagonal_solve`(dl, d, du, b) | 计算三对角线性系统的解。 |'
- en: Argument classes
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数类
- en: '[PRE0]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Describes batch, spatial, and feature dimensions of a convolution.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 描述卷积的批量、空间和特征维度。
- en: 'Parameters:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**lhs_spec** ([*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*]*) – a tuple of nonnegative integer dimension numbers containing
    (batch dimension, feature dimension, spatial dimensions…).'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**lhs_spec** ([*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(在 Python v3.12 中)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.12 中)")*]*) – 包含非负整数维度编号的元组，其中包括（批量维度，特征维度，空间维度…）。'
- en: '**rhs_spec** ([*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*]*) – a tuple of nonnegative integer dimension numbers containing
    (out feature dimension, in feature dimension, spatial dimensions…).'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**rhs_spec** ([*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(在 Python v3.12 中)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.12 中)")*]*) – 包含非负整数维度编号的元组，其中包括（输出特征维度，输入特征维度，空间维度…）。'
- en: '**out_spec** ([*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*]*) – a tuple of nonnegative integer dimension numbers containing
    (batch dimension, feature dimension, spatial dimensions…).'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**out_spec** ([*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(在 Python v3.12 中)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.12 中)")*]*) – 包含非负整数维度编号的元组，其中包括（批量维度，特征维度，空间维度…）。'
- en: '[PRE1]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: alias of [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "(in
    Python v3.12)")[[`str`](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)"), [`str`](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)"), [`str`](https://docs.python.org/3/library/stdtypes.html#str "(in
    Python v3.12)")] | `ConvDimensionNumbers` | [`None`](https://docs.python.org/3/library/constants.html#None
    "(in Python v3.12)")
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: alias of [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "(在
    Python v3.12 中)")[[`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(在 Python v3.12 中)"), [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(在 Python v3.12 中)"), [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(在 Python v3.12 中)")] | `ConvDimensionNumbers` | [`None`](https://docs.python.org/3/library/constants.html#None
    "(在 Python v3.12 中)")
- en: '[PRE2]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Describes the dimension number arguments to an [XLA’s Gather operator](https://www.tensorflow.org/xla/operation_semantics#gather).
    See the XLA documentation for more details of what the dimension numbers mean.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 描述了传递给 [XLA 的 Gather 运算符](https://www.tensorflow.org/xla/operation_semantics#gather)
    的维度号参数。有关维度号含义的详细信息，请参阅 XLA 文档。
- en: 'Parameters:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 'Parameters:'
- en: '**offset_dims** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*) – the set of dimensions in the gather output
    that offset into an array sliced from operand. Must be a tuple of integers in
    ascending order, each representing a dimension number of the output.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**offset_dims** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(在 Python v3.12 中)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.12 中)")*,* *...**]*) – gather 输出中偏移到从操作数切片的数组中的维度的集合。必须是升序整数元组，每个代表输出的一个维度编号。'
- en: '**collapsed_slice_dims** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*) – the set of dimensions i in operand that have
    slice_sizes[i] == 1 and that should not have a corresponding dimension in the
    output of the gather. Must be a tuple of integers in ascending order.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**collapsed_slice_dims** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(在 Python v3.12 中)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.12 中)")*,* *...**]*) – operand 中具有 slice_sizes[i] == 1 的维度 i 的集合，这些维度不应在
    gather 输出中具有对应维度。必须是一个升序整数元组。'
- en: '**start_index_map** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*,* *...**]*) – for each dimension in start_indices, gives
    the corresponding dimension in the operand that is to be sliced. Must be a tuple
    of integers with size equal to start_indices.shape[-1].'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**start_index_map** ([*tuple*](https://docs.python.org/3/library/stdtypes.html#tuple
    "(在 Python v3.12 中)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(在 Python v3.12 中)")*,* *...**]*) – 对于 start_indices 中的每个维度，给出应该被切片的操作数中对应的维度。必须是一个大小等于
    start_indices.shape[-1] 的整数元组。'
- en: Unlike XLA’s GatherDimensionNumbers structure, index_vector_dim is implicit;
    there is always an index vector dimension and it must always be the last dimension.
    To gather scalar indices, add a trailing dimension of size 1.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 与 XLA 的 GatherDimensionNumbers 结构不同，index_vector_dim 是隐含的；总是存在一个索引向量维度，且它必须始终是最后一个维度。要收集标量索引，请添加大小为
    1 的尾随维度。
- en: '[PRE3]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Describes how to handle out-of-bounds indices in a gather or scatter.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 描述了如何处理 gather 或 scatter 中的越界索引。
- en: 'Possible values are:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的值包括：
- en: 'CLIP:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 'CLIP:'
- en: Indices will be clamped to the nearest in-range value, i.e., such that the entire
    window to be gathered is in-range.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 索引将被夹在最近的范围内值上，即整个要收集的窗口都在范围内。
- en: 'FILL_OR_DROP:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 'FILL_OR_DROP:'
- en: If any part of a gathered window is out of bounds, the entire window that is
    returned, even those elements that were otherwise in-bounds, will be filled with
    a constant. If any part of a scattered window is out of bounds, the entire window
    will be discarded.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果收集窗口的任何部分越界，则返回整个窗口，即使其他部分原本在界内的元素也将用常量填充。如果分散窗口的任何部分越界，则整个窗口将被丢弃。
- en: 'PROMISE_IN_BOUNDS:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 'PROMISE_IN_BOUNDS:'
- en: The user promises that indices are in bounds. No additional checking will be
    performed. In practice, with the current XLA implementation this means that out-of-bounds
    gathers will be clamped but out-of-bounds scatters will be discarded. Gradients
    will not be correct if indices are out-of-bounds.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 用户承诺索引在范围内。不会执行额外检查。实际上，根据当前的 XLA 实现，这意味着越界的 gather 将被夹在范围内，但越界的 scatter 将被丢弃。如果索引越界，则梯度将不正确。
- en: '[PRE4]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Precision enum for lax functions
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: lax 函数的精度枚举
- en: 'The precision argument to JAX functions generally controls the tradeoff between
    speed and accuracy for array computations on accelerator backends, (i.e. TPU and
    GPU). Members are:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 函数的精度参数通常控制加速器后端（即 TPU 和 GPU）上的数组计算速度和精度之间的权衡。成员包括：
- en: 'DEFAULT:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 默认：
- en: 'Fastest mode, but least accurate. Performs computations in bfloat16. Aliases:
    `''default''`, `''fastest''`, `''bfloat16''`.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 最快模式，但最不准确。在 bfloat16 中执行计算。别名：`'default'`，`'fastest'`，`'bfloat16'`。
- en: 'HIGH:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 高：
- en: 'Slower but more accurate. Performs float32 computations in 3 bfloat16 passes,
    or using tensorfloat32 where available. Aliases: `''high''`, `''bfloat16_3x''`,
    `''tensorfloat32''`.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 较慢但更准确。以 3 个 bfloat16 传递执行 float32 计算，或在可用时使用 tensorfloat32。别名：`'high'`，`'bfloat16_3x'`，`'tensorfloat32'`。
- en: 'HIGHEST:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 最高：
- en: 'Slowest but most accurate. Performs computations in float32 or float64 as applicable.
    Aliases: `''highest''`, `''float32''`.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 最慢但最准确。根据适用情况在 float32 或 float64 中执行计算。别名：`'highest'`，`'float32'`。
- en: '[PRE5]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: alias of [`str`](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.12)") | `Precision` | [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")[[`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)"), [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")] | [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")[`Precision`, `Precision`] | [`None`](https://docs.python.org/3/library/constants.html#None
    "(in Python v3.12)")
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 别名为 [`str`](https://docs.python.org/3/library/stdtypes.html#str "(in Python
    v3.12)") | `Precision` | [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")[[`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)"), [`str`](https://docs.python.org/3/library/stdtypes.html#str
    "(in Python v3.12)")] | [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple
    "(in Python v3.12)")[`Precision`, `Precision`] | [`None`](https://docs.python.org/3/library/constants.html#None
    "(in Python v3.12)")
- en: '[PRE6]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: An enumeration.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 一个枚举。
- en: '[PRE7]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Describes the dimension number arguments to an [XLA’s Scatter operator](https://www.tensorflow.org/xla/operation_semantics#scatter).
    See the XLA documentation for more details of what the dimension numbers mean.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 描述了对 [XLA 的 Scatter 操作符](https://www.tensorflow.org/xla/operation_semantics#scatter)
    的维度编号参数。有关维度编号含义的更多详细信息，请参阅 XLA 文档。
- en: 'Parameters:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**update_window_dims** ([*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*]*) – the set of dimensions in the updates that are window
    dimensions. Must be a tuple of integers in ascending order, each representing
    a dimension number.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**update_window_dims** ([*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*]*) – 更新中作为窗口维度的维度集合。必须是整数元组，按升序排列，每个表示一个维度编号。'
- en: '**inserted_window_dims** ([*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*]*) – the set of size 1 window dimensions that must be inserted
    into the shape of updates. Must be a tuple of integers in ascending order, each
    representing a dimension number of the output. These are the mirror image of collapsed_slice_dims
    in the case of gather.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**inserted_window_dims** ([*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*]*) – 必须插入更新形状的大小为 1 的窗口维度集合。必须是整数元组，按升序排列，每个表示输出的维度编号的镜像图。这些是
    gather 情况下 collapsed_slice_dims 的镜像图。'
- en: '**scatter_dims_to_operand_dims** ([*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*]*) – for each dimension in scatter_indices, gives the corresponding
    dimension in operand. Must be a sequence of integers with size equal to scatter_indices.shape[-1].'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**scatter_dims_to_operand_dims** ([*Sequence*](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
    "(in Python v3.12)")*[*[*int*](https://docs.python.org/3/library/functions.html#int
    "(in Python v3.12)")*]*) – 对于 scatter_indices 中的每个维度，给出 operand 中对应的维度。必须是整数序列，大小等于
    scatter_indices.shape[-1]。'
- en: Unlike XLA’s ScatterDimensionNumbers structure, index_vector_dim is implicit;
    there is always an index vector dimension and it must always be the last dimension.
    To scatter scalar indices, add a trailing dimension of size 1.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 与 XLA 的 ScatterDimensionNumbers 结构不同，index_vector_dim 是隐式的；总是有一个索引向量维度，并且它必须始终是最后一个维度。要分散标量索引，添加一个尺寸为
    1 的尾随维度。
