- en: Defining Constraints and Indexes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义约束和索引
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/constraints.html](https://docs.sqlalchemy.org/en/20/core/constraints.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/core/constraints.html](https://docs.sqlalchemy.org/en/20/core/constraints.html)
- en: This section will discuss SQL [constraints](../glossary.html#term-constraints)
    and indexes. In SQLAlchemy the key classes include [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") and [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index").
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分将讨论SQL的[约束](../glossary.html#term-constraints)和索引。在SQLAlchemy中，关键类包括[`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")和[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")。
- en: '## Defining Foreign Keys'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '## 定义外键'
- en: A *foreign key* in SQL is a table-level construct that constrains one or more
    columns in that table to only allow values that are present in a different set
    of columns, typically but not always located on a different table. We call the
    columns which are constrained the *foreign key* columns and the columns which
    they are constrained towards the *referenced* columns. The referenced columns
    almost always define the primary key for their owning table, though there are
    exceptions to this. The foreign key is the “joint” that connects together pairs
    of rows which have a relationship with each other, and SQLAlchemy assigns very
    deep importance to this concept in virtually every area of its operation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: SQL中的*外键*是一个表级构造，它将该表中的一个或多个列约束为仅允许存在于另一组列中的值，通常但不总是位于不同的表上。我们称被约束的列为*外键*列，它们被约束到的列为*引用*列。引用列几乎总是定义其拥有表的主键，尽管也有例外情况。外键是连接具有关系的行对的“关节”，SQLAlchemy在其几乎每个操作的每个区域都赋予了这个概念非常深的重要性。
- en: 'In SQLAlchemy as well as in DDL, foreign key constraints can be defined as
    additional attributes within the table clause, or for single-column foreign keys
    they may optionally be specified within the definition of a single column. The
    single column foreign key is more common, and at the column level is specified
    by constructing a [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    object as an argument to a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy中以及在DDL中，外键约束可以被定义为表子句中的附加属性，或者对于单列外键，它们可以选择地在单列的定义中指定。单列外键更常见，在列级别上是通过将[`ForeignKey`](#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")对象构造为[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的参数来指定的：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Above, we define a new table `user_preference` for which each row must contain
    a value in the `user_id` column that also exists in the `user` table’s `user_id`
    column.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我们定义了一个新表`user_preference`，其中每一行必须包含一个存在于`user`表的`user_id`列中的值。
- en: 'The argument to [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    is most commonly a string of the form *<tablename>.<columnname>*, or for a table
    in a remote schema or “owner” of the form *<schemaname>.<tablename>.<columnname>*.
    It may also be an actual [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object, which as we’ll see later is accessed from an existing [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object via its `c` collection:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 参数[`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")最常见的形式是一个字符串，格式为*<tablename>.<columnname>*，或者对于远程模式或者“owner”的表格是*<schemaname>.<tablename>.<columnname>*。它也可以是一个实际的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象，稍后我们将看到它是通过其`c`集合从现有的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象中访问的：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The advantage to using a string is that the in-python linkage between `user`
    and `user_preference` is resolved only when first needed, so that table objects
    can be easily spread across multiple modules and defined in any order.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符串的优点是，在首次需要时才解析`user`和`user_preference`之间的Python链接，因此表对象可以轻松地分布在多个模块中并按任何顺序定义。
- en: 'Foreign keys may also be defined at the table level, using the [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object. This object can describe a single-
    or multi-column foreign key. A multi-column foreign key is known as a *composite*
    foreign key, and almost always references a table that has a composite primary
    key. Below we define a table `invoice` which has a composite primary key:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 外键也可以在表级别使用 [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象定义。此对象可以描述单列或多列外键。多列外键称为*复合*外键，几乎总是引用具有复合主键的表。下面我们定义一个具有复合主键的表
    `invoice`：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And then a table `invoice_item` with a composite foreign key referencing `invoice`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是一个引用 `invoice` 的复合外键的表 `invoice_item`：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It’s important to note that the [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") is the only way to define a composite
    foreign key. While we could also have placed individual [`ForeignKey`](#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects on both the `invoice_item.invoice_id`
    and `invoice_item.ref_num` columns, SQLAlchemy would not be aware that these two
    values should be paired together - it would be two individual foreign key constraints
    instead of a single composite foreign key referencing two columns.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，[`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint")
    是定义复合外键的唯一方式。虽然我们也可以将单独的 [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    对象放置在 `invoice_item.invoice_id` 和 `invoice_item.ref_num` 列上，但 SQLAlchemy 不会意识到这两个值应该配对在一起
    - 它将是两个单独的外键约束，而不是一个引用两个列的单个复合外键。
- en: '### Creating/Dropping Foreign Key Constraints via ALTER'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '### 通过 ALTER 创建/删除外键约束'
- en: 'The behavior we’ve seen in tutorials and elsewhere involving foreign keys with
    DDL illustrates that the constraints are typically rendered “inline” within the
    CREATE TABLE statement, such as:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在教程和其他地方看到的涉及 DDL 的外键行为表明，约束通常以“内联”的方式在 CREATE TABLE 语句中呈现，例如：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `CONSTRAINT .. FOREIGN KEY` directive is used to create the constraint in
    an “inline” fashion within the CREATE TABLE definition. The [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") methods do this by default, using a topological
    sort of all the [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects involved such that tables are created and dropped in order of their foreign
    key dependency (this sort is also available via the [`MetaData.sorted_tables`](metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") accessor).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`CONSTRAINT .. FOREIGN KEY` 指令用于在 CREATE TABLE 定义中以“内联”的方式创建约束。 [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 和 [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") 方法默认使用所有涉及的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象的拓扑排序，以便按照它们的外键依赖顺序创建和删除表（此排序也可通过 [`MetaData.sorted_tables`](metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") 访问器获取）。'
- en: 'This approach can’t work when two or more foreign key constraints are involved
    in a “dependency cycle”, where a set of tables are mutually dependent on each
    other, assuming the backend enforces foreign keys (always the case except on SQLite,
    MySQL/MyISAM). The methods will therefore break out constraints in such a cycle
    into separate ALTER statements, on all backends other than SQLite which does not
    support most forms of ALTER. Given a schema like:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及两个或更多外键约束参与“依赖循环”时，这种方法无法工作，其中一组表彼此相互依赖，假设后端执行外键（除了 SQLite、MySQL/MyISAM 之外总是是这样的情况）。因此，这些方法将在除
    SQLite 之外的所有后端上将循环中的约束拆分为单独的 ALTER 语句，SQLite 不支持大多数形式的 ALTER。给定这样的模式：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When we call upon [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") on a backend such as the PostgreSQL backend,
    the cycle between these two tables is resolved and the constraints are created
    separately:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在像 PostgreSQL 这样的后端上调用 [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 时，这两个表之间的循环被解析，并且约束被分别创建：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In order to emit DROP for these tables, the same logic applies, however note
    here that in SQL, to emit DROP CONSTRAINT requires that the constraint has a name.
    In the case of the `''node''` table above, we haven’t named this constraint; the
    system will therefore attempt to emit DROP for only those constraints that are
    named:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了发出这些表的 DROP，相同的逻辑也适用，但是请注意，在 SQL 中，发出 DROP CONSTRAINT 需要约束具有名称。在上面的 `'node'`
    表的情况下，我们还没有为此约束命名；因此系统将仅尝试发出对具有名称的约束的 DROP：
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the case where the cycle cannot be resolved, such as if we hadn’t applied
    a name to either constraint here, we will receive the following error:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在无法解决循环的情况下，例如如果我们在这里没有对约束应用名称，则将收到以下错误：
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This error only applies to the DROP case as we can emit “ADD CONSTRAINT” in
    the CREATE case without a name; the database typically assigns one automatically.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此错误仅适用于 DROP 情况，因为我们可以在 CREATE 情况下发出 “ADD CONSTRAINT” 而无需名称；数据库通常会自动分配一个名称。
- en: 'The [`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") and [`ForeignKey.use_alter`](#sqlalchemy.schema.ForeignKey.params.use_alter
    "sqlalchemy.schema.ForeignKey") keyword arguments can be used to manually resolve
    dependency cycles. We can add this flag only to the `''element''` table as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") 和 [`ForeignKey.use_alter`](#sqlalchemy.schema.ForeignKey.params.use_alter
    "sqlalchemy.schema.ForeignKey") 关键字参数可用于手动解决依赖循环。我们可以仅将此标志添加到 `''element''` 表中，如下所示：'
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'in our CREATE DDL we will see the ALTER statement only for this constraint,
    and not the other one:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 CREATE DDL 中，我们将只看到此约束的 ALTER 语句，而不是另一个约束的 ALTER 语句：
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") and [`ForeignKey.use_alter`](#sqlalchemy.schema.ForeignKey.params.use_alter
    "sqlalchemy.schema.ForeignKey"), when used in conjunction with a drop operation,
    will require that the constraint is named, else an error like the following is
    generated:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当与删除操作结合使用时，[`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") 和 [`ForeignKey.use_alter`](#sqlalchemy.schema.ForeignKey.params.use_alter
    "sqlalchemy.schema.ForeignKey") 将要求约束具有名称，否则将生成类似以下的错误：
- en: '[PRE11]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: See also
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Constraint Naming Conventions](#constraint-naming-conventions)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[配置约束命名约定](#constraint-naming-conventions)'
- en: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")  ### ON UPDATE and ON DELETE'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")  ### ON UPDATE 和 ON DELETE'
- en: 'Most databases support *cascading* of foreign key values, that is the when
    a parent row is updated the new value is placed in child rows, or when the parent
    row is deleted all corresponding child rows are set to null or deleted. In data
    definition language these are specified using phrases like “ON UPDATE CASCADE”,
    “ON DELETE CASCADE”, and “ON DELETE SET NULL”, corresponding to foreign key constraints.
    The phrase after “ON UPDATE” or “ON DELETE” may also allow other phrases that
    are specific to the database in use. The [`ForeignKey`](#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects support the generation of this
    clause via the `onupdate` and `ondelete` keyword arguments. The value is any string
    which will be output after the appropriate “ON UPDATE” or “ON DELETE” phrase:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数数据库都支持外键值的*级联*，即当父行更新时，新值会放在子行中，或者当父行删除时，所有相应的子行都会被设置为 null 或删除。在数据定义语言中，这些是使用诸如
    “ON UPDATE CASCADE”，“ON DELETE CASCADE” 和 “ON DELETE SET NULL” 之类的短语来指定的，对应于外键约束。在
    “ON UPDATE” 或 “ON DELETE” 之后的短语可能还允许使用特定于正在使用的数据库的其他短语。[`ForeignKey`](#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 和 [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象通过 `onupdate` 和 `ondelete` 关键字参数支持生成此子句。该值是任何字符串，该字符串将在适当的
    “ON UPDATE” 或 “ON DELETE” 短语之后输出：
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that these clauses require `InnoDB` tables when used with MySQL. They may
    also not be supported on other databases.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些子句在与 MySQL 配合使用时需要 `InnoDB` 表。它们在其他数据库上也可能不受支持。
- en: See also
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'For background on integration of `ON DELETE CASCADE` with ORM [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs, see the following sections:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有关将 `ON DELETE CASCADE` 与 ORM [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 结构集成的背景，请参阅以下部分：
- en: '[Using foreign key ON DELETE cascade with ORM relationships](../orm/cascades.html#passive-deletes)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用外键 ON DELETE cascade 处理 ORM 关系](../orm/cascades.html#passive-deletes)'
- en: '[Using foreign key ON DELETE with many-to-many relationships](../orm/cascades.html#passive-deletes-many-to-many)  ##
    UNIQUE Constraint'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用外键 ON DELETE 处理多对多关系](../orm/cascades.html#passive-deletes-many-to-many)  ##
    唯一约束'
- en: Unique constraints can be created anonymously on a single column using the `unique`
    keyword on [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column").
    Explicitly named unique constraints and/or those with multiple columns are created
    via the [`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint "sqlalchemy.schema.UniqueConstraint")
    table-level construct.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    上的 `unique` 关键字在单个列上匿名创建唯一约束。显式命名的唯一约束和/或具有多个列的约束通过 [`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 表级构造创建。
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: CHECK Constraint
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查约束
- en: Check constraints can be named or unnamed and can be created at the Column or
    Table level, using the [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") construct. The text of the check constraint
    is passed directly through to the database, so there is limited “database independent”
    behavior. Column level check constraints generally should only refer to the column
    to which they are placed, while table level constraints can refer to any columns
    in the table.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 检查约束可以具有命名或未命名，可以在列或表级别使用 [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") 构造。检查约束的文本直接传递到数据库，因此具有有限的“数据库独立”行为。列级检查约束通常只应引用它们放置的列，而表级约束可以引用表中的任何列。
- en: Note that some databases do not actively support check constraints such as older
    versions of MySQL (prior to 8.0.16).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一些数据库不支持主动支持检查约束，例如旧版本的 MySQL（在 8.0.16 之前）。
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: PRIMARY KEY Constraint
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主键约束
- en: 'The primary key constraint of any [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object is implicitly present, based on the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that are marked with the [`Column.primary_key`](metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") flag. The [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") object provides explicit access to this
    constraint, which includes the option of being configured directly:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 任何 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象的主键约束在本质上是隐式存在的，基于标记有 [`Column.primary_key`](metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") 标志的 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象。[`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") 对象提供了对此约束的显式访问，其中包括直接配置的选项：
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: See also
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint "sqlalchemy.schema.PrimaryKeyConstraint")
    - detailed API documentation.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint "sqlalchemy.schema.PrimaryKeyConstraint")
    - 详细的 API 文档。'
- en: Setting up Constraints when using the Declarative ORM Extension
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Declarative ORM 扩展设置约束
- en: The [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    is the SQLAlchemy Core construct that allows one to define table metadata, which
    among other things can be used by the SQLAlchemy ORM as a target to map a class.
    The [Declarative](../orm/extensions/declarative/index.html) extension allows the
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object
    to be created automatically, given the contents of the table primarily as a mapping
    of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    是 SQLAlchemy 核心构造，允许定义表元数据，其中可以用于 SQLAlchemy ORM 作为映射类的目标。[Declarative](../orm/extensions/declarative/index.html)
    扩展允许自动创建 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象，主要根据表的内容作为 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象的映射。'
- en: To apply table-level constraint objects such as [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") to a table defined using Declarative,
    use the `__table_args__` attribute, described at [Table Configuration](../orm/extensions/declarative/table_config.html#declarative-table-args).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要将表级约束对象（例如 [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")）应用于使用 Declarative 定义的表，请使用 `__table_args__`
    属性，详见 [表配置](../orm/extensions/declarative/table_config.html#declarative-table-args)。
- en: '## Configuring Constraint Naming Conventions'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '## 配置约束命名约定'
- en: Relational databases typically assign explicit names to all constraints and
    indexes. In the common case that a table is created using `CREATE TABLE` where
    constraints such as CHECK, UNIQUE, and PRIMARY KEY constraints are produced inline
    with the table definition, the database usually has a system in place in which
    names are automatically assigned to these constraints, if a name is not otherwise
    specified. When an existing database table is altered in a database using a command
    such as `ALTER TABLE`, this command typically needs to specify explicit names
    for new constraints as well as be able to specify the name of an existing constraint
    that is to be dropped or modified.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数据库通常会为所有约束和索引分配明确的名称。在常见情况下，使用`CREATE TABLE`创建表时，约束（如CHECK、UNIQUE和PRIMARY
    KEY约束）会与表定义一起内联生成，如果未另行指定名称，则数据库通常会自动为这些约束分配名称。当在使用诸如`ALTER TABLE`之类的命令更改数据库中的现有数据库表时，此命令通常需要为新约束指定显式名称，以及能够指定要删除或修改的现有约束的名称。
- en: Constraints can be named explicitly using the [`Constraint.name`](#sqlalchemy.schema.Constraint.params.name
    "sqlalchemy.schema.Constraint") parameter, and for indexes the [`Index.name`](#sqlalchemy.schema.Index.params.name
    "sqlalchemy.schema.Index") parameter. However, in the case of constraints this
    parameter is optional. There are also the use cases of using the [`Column.unique`](metadata.html#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column") and [`Column.index`](metadata.html#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") parameters which create [`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") and [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects without an explicit name being specified.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`Constraint.name`](#sqlalchemy.schema.Constraint.params.name "sqlalchemy.schema.Constraint")参数可以明确命名约束，对于索引，可以使用[`Index.name`](#sqlalchemy.schema.Index.params.name
    "sqlalchemy.schema.Index")参数。然而，在约束的情况下，此参数是可选的。还有使用[`Column.unique`](metadata.html#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column")和[`Column.index`](metadata.html#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column")参数的用例，这些参数创建[`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")和[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")对象时未明确指定名称。
- en: The use case of alteration of existing tables and constraints can be handled
    by schema migration tools such as [Alembic](https://alembic.sqlalchemy.org/).
    However, neither Alembic nor SQLAlchemy currently create names for constraint
    objects where the name is otherwise unspecified, leading to the case where being
    able to alter existing constraints means that one must reverse-engineer the naming
    system used by the relational database to auto-assign names, or that care must
    be taken to ensure that all constraints are named.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对现有表和约束进行更改的用例可以由模式迁移工具（如[Alembic](https://alembic.sqlalchemy.org/)）处理。然而，Alembic和SQLAlchemy目前都不会为未指定名称的约束对象创建名称，导致可以更改现有约束的情况下，必须反向工程关系数据库用于自动分配名称的命名系统，或者必须注意确保所有约束都已命名。
- en: In contrast to having to assign explicit names to all [`Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") and [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects, automated naming schemes can be constructed using events. This approach
    has the advantage that constraints will get a consistent naming scheme without
    the need for explicit name parameters throughout the code, and also that the convention
    takes place just as well for those constraints and indexes produced by the [`Column.unique`](metadata.html#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column") and [`Column.index`](metadata.html#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") parameters. As of SQLAlchemy 0.9.2 this event-based
    approach is included, and can be configured using the argument [`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData").
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与必须为所有[`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")和[`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象分配显式名称相比，可以使用事件构建自动命名方案。这种方法的优势在于，约束将获得一致的命名方案，无需在整个代码中使用显式名称参数，并且约定也适用于由[`Column.unique`](metadata.html#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column")和[`Column.index`](metadata.html#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column")参数生成的那些约束和索引。从SQLAlchemy 0.9.2开始，包含了这种基于事件的方法，并且可以使用参数[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData")进行配置。
- en: Configuring a Naming Convention for a MetaData Collection
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置元数据集合的命名约定
- en: '[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") refers to a dictionary which accepts the [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") class or individual [`Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") classes as keys, and Python string templates as
    values. It also accepts a series of string-codes as alternative keys, `"fk"`,
    `"pk"`, `"ix"`, `"ck"`, `"uq"` for foreign key, primary key, index, check, and
    unique constraint, respectively. The string templates in this dictionary are used
    whenever a constraint or index is associated with this [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object that does not have an existing name given
    (including one exception case where an existing name can be further embellished).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData")指的是一个接受[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")类或单独的[`Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")类作为键，Python字符串模板作为值的字典。它还接受一系列字符串代码作为备用键，分别为外键、主键、索引、检查和唯一约束的`"fk"`、`"pk"`、`"ix"`、`"ck"`、`"uq"`。在这个字典中的字符串模板在与这个[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象关联的约束或索引没有给出现有名称的情况下���用。（包括一个例外情况，其中现有名称可以进一步装饰）。'
- en: 'An example naming convention that suits basic cases is as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于基本情况的一个命名约定示例如下：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The above convention will establish names for all constraints within the target
    [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection. For example, we can observe the name produced when we create an unnamed
    [`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint "sqlalchemy.schema.UniqueConstraint"):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 上述约定将为目标[`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")集合中的所有约束建立名称。例如，当我们创建一个未命名的[`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")时，我们可以观察到生成的名称：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This same feature takes effect even if we just use the [`Column.unique`](metadata.html#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column") flag:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们只使用[`Column.unique`](metadata.html#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column")标志，这个相同的特性也会生效：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'A key advantage to the naming convention approach is that the names are established
    at Python construction time, rather than at DDL emit time. The effect this has
    when using Alembic’s `--autogenerate` feature is that the naming convention will
    be explicit when a new migration script is generated:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 命名约定方法的一个关键优势是，名称是在Python构建时建立的，而不是在DDL发出时建立的。当使用Alembic的`--autogenerate`功能时，这个特性的效果是，当生成新的迁移脚本时，命名约定将是明确的：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The above `"uq_user_name"` string was copied from the [`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") object that `--autogenerate` located in
    our metadata.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的`"uq_user_name"`字符串是从`--autogenerate`在我们的元数据中定位的[`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")对象复制而来。
- en: The tokens available include `%(table_name)s`, `%(referred_table_name)s`, `%(column_0_name)s`,
    `%(column_0_label)s`, `%(column_0_key)s`, `%(referred_column_0_name)s`, and `%(constraint_name)s`,
    as well as multiple-column versions of each including `%(column_0N_name)s`, `%(column_0_N_name)s`,
    `%(referred_column_0_N_name)s` which render all column names separated with or
    without an underscore. The documentation for [`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") has further detail on each of these conventions.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的令牌包括 `%(table_name)s`、`%(referred_table_name)s`、`%(column_0_name)s`、`%(column_0_label)s`、`%(column_0_key)s`、`%(referred_column_0_name)s`，以及每个令牌的多列版本，包括
    `%(column_0N_name)s`、`%(column_0_N_name)s`、`%(referred_column_0_N_name)s`，它们以带有或不带有下划线的形式呈现所有列名称。关于
    [`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") 的文档进一步详细说明了这些约定。
- en: '### The Default Naming Convention'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '### 默认命名约定'
- en: 'The default value for [`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") handles the long-standing SQLAlchemy behavior of
    assigning a name to a [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    object that is created using the [`Column.index`](metadata.html#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") parameter:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") 的默认值处理了长期以来 SQLAlchemy 的行为，即使用 [`Column.index`](metadata.html#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") 参数创建 [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    对象时分配名称的情况：'
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Truncation of Long Names
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 长名称的截断
- en: 'When a generated name, particularly those that use the multiple-column tokens,
    is too long for the identifier length limit of the target database (for example,
    PostgreSQL has a limit of 63 characters), the name will be deterministically truncated
    using a 4-character suffix based on the md5 hash of the long name. For example,
    the naming convention below will generate very long names given the column names
    in use:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当生成的名称，特别是使用多列令牌的名称，超出目标数据库的标识符长度限制（例如，PostgreSQL 具有 63 个字符的限制）时，名称将使用基于长名称的
    md5 哈希的 4 个字符后缀进行确定性截断。例如，以下命名约定将根据使用的列名生成非常长的名称：
- en: '[PRE21]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'On the PostgreSQL dialect, names longer than 63 characters will be truncated
    as in the following example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 方言中，长度超过 63 个字符的名称将被截断，如以下示例所示：
- en: '[PRE22]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The above suffix `a79e` is based on the md5 hash of the long name and will generate
    the same value every time to produce consistent names for a given schema.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 上述后缀 `a79e` 基于长名称的 md5 哈希，并且每次生成相同的值，以便为给定模式生成一致的名称。
- en: Creating Custom Tokens for Naming Conventions
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建用于命名约定的自定义令牌
- en: 'New tokens can also be added, by specifying an additional token and a callable
    within the naming_convention dictionary. For example, if we wanted to name our
    foreign key constraints using a GUID scheme, we could do that as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以通过在 naming_convention 字典中指定额外的令牌和可调用对象来添加新的令牌。例如，如果我们想要使用 GUID 方案对外键约束进行命名，我们可以这样做：
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Above, when we create a new [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), we will get a name as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建新的 [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint")
    时，我们将获得以下名称：
- en: '[PRE24]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: See also
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") - for additional usage details as well as a listing
    of all available naming components.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") - 附加使用详细信息以及所有可用命名组件的列表。'
- en: '[The Importance of Naming Constraints](https://alembic.sqlalchemy.org/en/latest/naming.html)
    - in the Alembic documentation.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[命名约束的重要性](https://alembic.sqlalchemy.org/en/latest/naming.html) - 在 Alembic
    文档中。'
- en: 'New in version 1.3.0: added multi-column naming tokens such as `%(column_0_N_name)s`.
    Generated names that go beyond the character limit for the target database will
    be deterministically truncated.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3.0 中的新功能：添加了诸如 `%(column_0_N_name)s` 等多列命名令牌。超出目标数据库字符限制的生成名称将被确定性地截断。
- en: '### Naming CHECK Constraints'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '### 命名 CHECK 约束'
- en: 'The [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")
    object is configured against an arbitrary SQL expression, which can have any number
    of columns present, and additionally is often configured using a raw SQL string.
    Therefore a common convention to use with [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") is one where we expect the object to have
    a name already, and we then enhance it with other convention elements. A typical
    convention is `"ck_%(table_name)s_%(constraint_name)s"`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CheckConstraint`](#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")
    对象配置针对任意 SQL 表达式，该表达式可以有任意数量的列，并且通常使用原始 SQL 字符串进行配置。因此，通常与 [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") 一起使用的约定是，我们希望对象已经有一个名称，然后我们使用其他约定元素增强它。一个典型的约定是
    `"ck_%(table_name)s_%(constraint_name)s"`：'
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The above table will produce the name `ck_foo_value_gt_5`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表格将产生名称 `ck_foo_value_gt_5`：
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[`CheckConstraint`](#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")
    also supports the `%(columns_0_name)s` token; we can make use of this by ensuring
    we use a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    or [`column()`](sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    element within the constraint’s expression, either by declaring the constraint
    separate from the table:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CheckConstraint`](#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")
    还支持 `%(columns_0_name)s` token；我们可以通过确保在约束表达式中使用 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 或 [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") 元素来利用它，无论是通过单独声明约束表达式还是内联到表中：'
- en: '[PRE27]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'or by using a [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") inline:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 或通过内联使用 [`column()`](sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")：
- en: '[PRE28]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Both will produce the name `ck_foo_value`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都将产生名称 `ck_foo_value`：
- en: '[PRE29]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The determination of the name of “column zero” is performed by scanning the
    given expression for column objects. If the expression has more than one column
    present, the scan does use a deterministic search, however the structure of the
    expression will determine which column is noted as “column zero”.  ### Configuring
    Naming for Boolean, Enum, and other schema types'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: “column zero”的名称确定是通过扫描给定表达式中的列对象来执行的。如果表达式中有多个列，扫描将使用确定性搜索，但是表达式的结构将决定哪个列被标记为“column
    zero”。### 针对布尔、枚举和其他模式类型进行命名配置
- en: 'The [`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    class refers to type objects such as [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") and [`Enum`](type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") which generate a CHECK constraint accompanying the type.
    The name for the constraint here is most directly set up by sending the “name”
    parameter, e.g. [`Boolean.name`](type_basics.html#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean"):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    类指的是诸如 [`Boolean`](type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    和 [`Enum`](type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum") 等类型对象，它们生成与类型相伴随的
    CHECK 约束。这里约束的名称最直接是通过发送“name”参数来设置的，例如 [`Boolean.name`](type_basics.html#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean")：'
- en: '[PRE30]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The naming convention feature may be combined with these types as well, normally
    by using a convention which includes `%(constraint_name)s` and then applying a
    name to the type:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 命名约定功能也可以与这些类型结合使用，通常是通过使用包含 `%(constraint_name)s` 的约定，然后将名称应用于类型：
- en: '[PRE31]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The above table will produce the constraint name `ck_foo_flag_bool`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表格将产生约束名称 `ck_foo_flag_bool`：
- en: '[PRE32]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The [`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    classes use special internal symbols so that the naming convention is only determined
    at DDL compile time. On PostgreSQL, there’s a native BOOLEAN type, so the CHECK
    constraint of [`Boolean`](type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    is not needed; we are safe to set up a [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") type without a name, even though a naming convention
    is in place for check constraints. This convention will only be consulted for
    the CHECK constraint if we run against a database without a native BOOLEAN type
    like SQLite or MySQL.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")类使用特殊的内部符号，以便命名约定仅在DDL编译时确定。在PostgreSQL上，有一个原生的BOOLEAN类型，因此不需要[`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")的CHECK约束；即使为检查约束设置了命名约定，我们也可以安全地设置不带名称的[`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")类型。如果我们针对没有原生BOOLEAN类型的数据库运行，如SQLite或MySQL，那么仅当我们运行时才会参考此约定CHECK约束。'
- en: 'The CHECK constraint may also make use of the `column_0_name` token, which
    works nicely with [`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") since these constraints have only one column:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: CHECK约束也可以使用`column_0_name`标记，与[`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")很好地配合使用，因为这些约束只有一个列：
- en: '[PRE33]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The above schema will produce:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以上模式将产生：
- en: '[PRE34]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Using Naming Conventions with ORM Declarative Mixins
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用ORM声明式混合与命名约定
- en: When using the naming convention feature with [ORM Declarative Mixins](../orm/declarative_mixins.html),
    individual constraint objects must exist for each actual table-mapped subclass.
    See the section [Creating Indexes and Constraints with Naming Conventions on Mixins](../orm/declarative_mixins.html#orm-mixins-named-constraints)
    for background and examples.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命名约定功能与[ORM声明性混合](../orm/declarative_mixins.html)一起使用时，必须为每个实际表映射的子类存在单独的约束对象。有关背景和示例，请参见[使用命名约定在混合上创建索引和约束](../orm/declarative_mixins.html#orm-mixins-named-constraints)部分。
- en: Constraints API
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 约束API
- en: '| Object Name | Description |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [CheckConstraint](#sqlalchemy.schema.CheckConstraint) | A table- or column-level
    CHECK constraint. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| [CheckConstraint](#sqlalchemy.schema.CheckConstraint) | 表级或列级CHECK约束。 |'
- en: '| [ColumnCollectionConstraint](#sqlalchemy.schema.ColumnCollectionConstraint)
    | A constraint that proxies a ColumnCollection. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnCollectionConstraint](#sqlalchemy.schema.ColumnCollectionConstraint)
    | 代理ColumnCollection的约束。 |'
- en: '| [ColumnCollectionMixin](#sqlalchemy.schema.ColumnCollectionMixin) | A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnCollectionMixin](#sqlalchemy.schema.ColumnCollectionMixin) | [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。 |'
- en: '| [Constraint](#sqlalchemy.schema.Constraint) | A table-level SQL constraint.
    |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| [Constraint](#sqlalchemy.schema.Constraint) | 表级SQL约束。 |'
- en: '| [conv](#sqlalchemy.schema.conv) | Mark a string indicating that a name has
    already been converted by a naming convention. |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| [conv](#sqlalchemy.schema.conv) | 标记一个字符串，指示名称已经由命名约定转换。 |'
- en: '| [ForeignKey](#sqlalchemy.schema.ForeignKey) | Defines a dependency between
    two columns. |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| [ForeignKey](#sqlalchemy.schema.ForeignKey) | 定义两列之间的依赖关系。 |'
- en: '| [ForeignKeyConstraint](#sqlalchemy.schema.ForeignKeyConstraint) | A table-level
    FOREIGN KEY constraint. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| [ForeignKeyConstraint](#sqlalchemy.schema.ForeignKeyConstraint) | 表级FOREIGN
    KEY约束。 |'
- en: '| [HasConditionalDDL](#sqlalchemy.schema.HasConditionalDDL) | define a class
    that includes the [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") method, allowing for conditional
    rendering of DDL. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| [HasConditionalDDL](#sqlalchemy.schema.HasConditionalDDL) | 定义一个包括[`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if")方法的类，允许对DDL进行条件渲染。 |'
- en: '| [PrimaryKeyConstraint](#sqlalchemy.schema.PrimaryKeyConstraint) | A table-level
    PRIMARY KEY constraint. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| [PrimaryKeyConstraint](#sqlalchemy.schema.PrimaryKeyConstraint) | 表级主键约束。
    |'
- en: '| [UniqueConstraint](#sqlalchemy.schema.UniqueConstraint) | A table-level UNIQUE
    constraint. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| [UniqueConstraint](#sqlalchemy.schema.UniqueConstraint) | 表级UNIQUE约束。 |'
- en: '[PRE35]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: A table-level SQL constraint.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 表级SQL约束。
- en: '[`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    serves as the base class for the series of constraint objects that can be associated
    with [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects, including [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") [`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), and [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint").'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    作为一系列约束对象的基类，可以与 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象关联，包括 [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint "sqlalchemy.schema.PrimaryKeyConstraint")、[`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")、[`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 和 [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")。'
- en: '**Members**'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.Constraint.__init__), [argument_for()](#sqlalchemy.schema.Constraint.argument_for),
    [copy()](#sqlalchemy.schema.Constraint.copy), [ddl_if()](#sqlalchemy.schema.Constraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.Constraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.Constraint.dialect_options),
    [info](#sqlalchemy.schema.Constraint.info), [kwargs](#sqlalchemy.schema.Constraint.kwargs)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.Constraint.__init__), [argument_for()](#sqlalchemy.schema.Constraint.argument_for),
    [copy()](#sqlalchemy.schema.Constraint.copy), [ddl_if()](#sqlalchemy.schema.Constraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.Constraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.Constraint.dialect_options),
    [info](#sqlalchemy.schema.Constraint.info), [kwargs](#sqlalchemy.schema.Constraint.kwargs)'
- en: '**Class signature**'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.schema.HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.schema.HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
- en: '[PRE36]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Create a SQL constraint.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 SQL 约束。
- en: 'Parameters:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – Optional, the in-database name of this `Constraint`.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选，此 `Constraint` 的数据库名称。'
- en: '`deferrable` – Optional bool. If set, emit DEFERRABLE or NOT DEFERRABLE when
    issuing DDL for this constraint.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferrable` – 可选布尔值。如果设置，则在为此约束发出 DDL 时发出 DEFERRABLE 或 NOT DEFERRABLE。'
- en: '`initially` – Optional string. If set, emit INITIALLY <value>when issuing DDL
    for this constraint.</value>'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initially` – 可选字符串。如果设置，则在为此约束发出 DDL 时发出 INITIALLY <value>。</value>'
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选数据字典，将填充到此对象的 [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") 属性中。'
- en: '`comment` –'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comment` –'
- en: Optional string that will render an SQL comment on foreign key constraint creation.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选字符串，���在创建外键约束时呈现 SQL 注释。
- en: New in version 2.0.
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 2.0 版本中的新功能。
- en: '`**dialect_kw` – Additional keyword arguments are dialect specific, and passed
    in the form `<dialectname>_<argname>`. See the documentation regarding an individual
    dialect at [Dialects](../dialects/index.html) for detail on documented arguments.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**dialect_kw` – 附加关键字参数是特定于方言的，并以 `<dialectname>_<argname>` 的形式传递。有关单个方言的文档参数详细信息，请参阅
    [方言](../dialects/index.html)。'
- en: '`_create_rule` – used internally by some datatypes that also create constraints.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_create_rule` – 一些数据类型内部使用，也创建约束。'
- en: '`_type_bound` – used internally to indicate that this constraint is associated
    with a specific datatype.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_type_bound` – 内部使用，表示此约束与特定数据类型相关联。'
- en: '[PRE37]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为此类添加一种新的特定于方言的关键字参数。
- en: 'E.g.:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE38]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for")方法是一种为[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")字典添加额外参数的每个参数的方式。该字典提供了由各种模式级构造所接受的参数名称列表，代表一个方言。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 新方言通常应该一次性指定此字典为方言类的数据成员。临时添加参数名称的用例通常是用于使用自定义编译方案并消耗额外参数的最终用户代码。
- en: 'Parameters:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言名称。 方言必须是可定位的，否则会引发[`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。 方言还必须包括一个现有的[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")集合，表示它参与关键字参数验证和默认系统，否则会引发[`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。 如果方言不包含此集合，则可以已为该方言指定任何关键字参数。SQLAlchemy中打包的所有方言都包含此集合，但对于第三方方言，支持可能会有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE39]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Deprecated since version 1.4: The [`Constraint.copy()`](#sqlalchemy.schema.Constraint.copy
    "sqlalchemy.schema.Constraint.copy") method is deprecated and will be removed
    in a future release.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.4版本弃用：[`Constraint.copy()`](#sqlalchemy.schema.Constraint.copy "sqlalchemy.schema.Constraint.copy")
    方法已弃用，并将在将来的版本中删除。
- en: '[PRE40]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '*inherited from the* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *method of* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *的方法* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
- en: apply a conditional DDL rule to this schema item.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 对此模式项目应用条件DDL规则。
- en: These rules work in a similar manner to the [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") callable, with the added
    feature that the criteria may be checked within the DDL compilation phase for
    a construct such as [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable").
    [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if "sqlalchemy.schema.HasConditionalDDL.ddl_if")
    currently applies towards the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct as well as all [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    constructs.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则的工作方式与[`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")类似，不同之处在于可以在DDL编译阶段检查条件，例如[`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable")这样的结构。 [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") 目前适用于[`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")结构以及所有[`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")结构。
- en: 'Parameters:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – string name of a dialect, or a tuple of string names to indicate
    multiple dialect types.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 方言的字符串名称，或字符串名称的元组，表示多个方言类型。'
- en: '`callable_` – a callable that is constructed using the same form as that described
    in [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if").'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` – 使用与[`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")中描述的相同形式构建的可调用对象。'
- en: '`state` – any arbitrary object that will be passed to the callable, if present.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` – 将传递给可调用对象的任意任意对象（如果存在）。'
- en: New in version 2.0.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0 版本中的新功能。
- en: See also
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#schema-ddl-ddl-if)
    - background and usage examples'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制约束和索引的 DDL 生成](ddl.html#schema-ddl-ddl-if) - 背景和用法示例'
- en: '[PRE41]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 作为针对此结构的方言特定选项指定的关键字参数的集合。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数以原始的`<dialect>_<kwarg>`格式呈现。仅包含实际传递的参数；与包含此方言的所有选项（包括默认值）的[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") 集合不同。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合也是可写的；键采用`<dialect>_<kwarg>`形式，其中的值将被组装成选项列表。
- en: See also
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE42]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 作为针对此结构的方言特定选项指定的关键字参数的集合。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，键为 `<dialect_name>` 和 `<argument_name>`。例如，`postgresql_where` 参数可定位为：
- en: '[PRE43]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: New in version 0.9.2.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 0.9.2 版本中的新功能。
- en: See also
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 平面字典形式'
- en: '[PRE44]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '*inherited from the* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象相关联的信息字典，允许将用户定义的数据与此 [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") 关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次访问时，字典会自动生成。它也可以在某些对象的构造函数中指定，例如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 和 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: '[PRE45]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs") *属性*'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") 的同义词。'
- en: '[PRE46]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: This collection represents the columns which are referred to by this object.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 此集合表示此对象引用的列。
- en: '[PRE47]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: A constraint that proxies a ColumnCollection.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 代理列集合的约束。
- en: '**Members**'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.ColumnCollectionConstraint.__init__), [argument_for()](#sqlalchemy.schema.ColumnCollectionConstraint.argument_for),
    [columns](#sqlalchemy.schema.ColumnCollectionConstraint.columns), [contains_column()](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column),
    [copy()](#sqlalchemy.schema.ColumnCollectionConstraint.copy), [ddl_if()](#sqlalchemy.schema.ColumnCollectionConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.ColumnCollectionConstraint.dialect_kwargs),
    [dialect_options](#sqlalchemy.schema.ColumnCollectionConstraint.dialect_options),
    [info](#sqlalchemy.schema.ColumnCollectionConstraint.info), [kwargs](#sqlalchemy.schema.ColumnCollectionConstraint.kwargs)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.ColumnCollectionConstraint.__init__), [argument_for()](#sqlalchemy.schema.ColumnCollectionConstraint.argument_for),
    [columns](#sqlalchemy.schema.ColumnCollectionConstraint.columns), [contains_column()](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column),
    [copy()](#sqlalchemy.schema.ColumnCollectionConstraint.copy), [ddl_if()](#sqlalchemy.schema.ColumnCollectionConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.ColumnCollectionConstraint.dialect_kwargs),
    [dialect_options](#sqlalchemy.schema.ColumnCollectionConstraint.dialect_options),
    [info](#sqlalchemy.schema.ColumnCollectionConstraint.info), [kwargs](#sqlalchemy.schema.ColumnCollectionConstraint.kwargs)'
- en: '**Class signature**'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint") ([`sqlalchemy.schema.ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin"), [`sqlalchemy.schema.Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint"))
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint") ([`sqlalchemy.schema.ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin"), [`sqlalchemy.schema.Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint"))
- en: '[PRE48]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Parameters:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`*columns` – A sequence of column names or Column objects.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*columns` – 一系列列名或列对象。'
- en: '`name` – Optional, the in-database name of this constraint.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选项，此约束的数据库中的名称。'
- en: '`deferrable` – Optional bool. If set, emit DEFERRABLE or NOT DEFERRABLE when
    issuing DDL for this constraint.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferrable` – 可选布尔值。如果设置，发出 DDL 时会发出 DEFERRABLE 或 NOT DEFERRABLE 用于此约束。'
- en: '`initially` – Optional string. If set, emit INITIALLY <value>when issuing DDL
    for this constraint.</value>'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initially` – 可选字符串。如果设置，发出 DDL 时会发出 INITIALLY <value> 用于此约束。</value>'
- en: '`**dialect_kw` – other keyword arguments including dialect-specific arguments
    are propagated to the [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    superclass.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**dialect_kw` – 其他关键字参数，包括方言特定参数，都会传播到[`Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") 超类。'
- en: '[PRE49]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs") '
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 为此类添加一种新的特定于方言的关键字参数。
- en: 'E.g.:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE50]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法是向 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 字典添加额外参数的每个参数的方法。
    此字典提供了代表方言的各种模式级构造所接受的参数名称列表。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 新方言通常应一次性指定此字典为方言类的数据成员。 通常，为了使用自定义编译方案并使用附加参数的最终用户代码，使用情形是添加参数名称的即兴增加。
- en: 'Parameters:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。 方言必须可定位，否则会引发 [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。 方言还必须包括一个现有的 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 集合，指示其参与关键字参数验证和默认系统，否则将引发
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")。
    如果方言不包括此集合，则可以代表此方言已经指定任何关键字参数。 SQLAlchemy 中打包的所有方言都包括此集合，但是对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE51]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '*inherited from the* `ColumnCollectionMixin.columns` *attribute of* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin")'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin "sqlalchemy.schema.ColumnCollectionMixin")
    *属性* `ColumnCollectionMixin.columns` *的*。'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the set of columns
    for this constraint.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 代表此约束的一组列的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: '[PRE52]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Return True if this constraint contains the given column.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此约束包含给定的列，则返回 True。
- en: Note that this object also contains an attribute `.columns` which is a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此对象还包含一个属性 `.columns`，它是 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: '[PRE53]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Deprecated since version 1.4: The [`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") method is deprecated and
    will be removed in a future release.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始弃用：[`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") 方法已弃用，并将在将来的版本中删除。
- en: '[PRE54]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '*inherited from the* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *method of* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *方法的* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
- en: apply a conditional DDL rule to this schema item.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 对此模式项应用条件DDL规则。
- en: These rules work in a similar manner to the [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") callable, with the added
    feature that the criteria may be checked within the DDL compilation phase for
    a construct such as [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable").
    [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if "sqlalchemy.schema.HasConditionalDDL.ddl_if")
    currently applies towards the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct as well as all [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    constructs.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则的工作方式与[`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")可调用对象类似，额外的特性是可以在DDL编译阶段检查条件，例如[`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable")构造中的条件。[`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if")目前也适用于[`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造以及所有[`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")构造。
- en: 'Parameters:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – string name of a dialect, or a tuple of string names to indicate
    multiple dialect types.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 方言的字符串名称，或表示多个方言类型的字符串名称元组。'
- en: '`callable_` – a callable that is constructed using the same form as that described
    in [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if").'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` – 一个可调用对象，其构造方式与[`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")中描述的形式相同。'
- en: '`state` – any arbitrary object that will be passed to the callable, if present.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` – 任意对象，如果存在将传递给可调用对象。'
- en: New in version 2.0.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: See also
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#schema-ddl-ddl-if)
    - background and usage examples'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制约束和索引的DDL生成](ddl.html#schema-ddl-ddl-if) - 背景和使用示例'
- en: '[PRE55]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 作为特定于方言的选项指定为此构造的关键字参数集合。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数以原始的`<dialect>_<kwarg>`格式呈现。仅包括实际传递的参数；与包含所有已知选项的默认值的[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options")集合不同。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合也是可写的；键的形式为`<dialect>_<kwarg>`，其中的值将被组装到选项列表中。
- en: See also
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE56]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项指定的关键字参数集合。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，键入 `<dialect_name>` 和 `<argument_name>`。例如，`postgresql_where` 参数可以定位为：
- en: '[PRE57]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: New in version 0.9.2.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 0.9.2 中新增。
- en: See also
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 扁平字典形式'
- en: '[PRE58]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '*inherited from the* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此 [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") 关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次访问时自动生成该字典。也可以在某些对象的构造函数中指定，例如 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 和 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: '[PRE59]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") 的同义词。'
- en: '[PRE60]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: A table- or column-level CHECK constraint.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 表或列级别的检查约束。
- en: Can be included in the definition of a Table or Column.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 可以包含在表或列的定义中。
- en: '**Members**'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.CheckConstraint.__init__), [argument_for()](#sqlalchemy.schema.CheckConstraint.argument_for),
    [columns](#sqlalchemy.schema.CheckConstraint.columns), [contains_column()](#sqlalchemy.schema.CheckConstraint.contains_column),
    [copy()](#sqlalchemy.schema.CheckConstraint.copy), [ddl_if()](#sqlalchemy.schema.CheckConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.CheckConstraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.CheckConstraint.dialect_options),
    [info](#sqlalchemy.schema.CheckConstraint.info), [kwargs](#sqlalchemy.schema.CheckConstraint.kwargs)'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.CheckConstraint.__init__), [argument_for()](#sqlalchemy.schema.CheckConstraint.argument_for),
    [columns](#sqlalchemy.schema.CheckConstraint.columns), [contains_column()](#sqlalchemy.schema.CheckConstraint.contains_column),
    [copy()](#sqlalchemy.schema.CheckConstraint.copy), [ddl_if()](#sqlalchemy.schema.CheckConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.CheckConstraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.CheckConstraint.dialect_options),
    [info](#sqlalchemy.schema.CheckConstraint.info), [kwargs](#sqlalchemy.schema.CheckConstraint.kwargs)'
- en: '**Class signature**'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") ([`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint"))
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.CheckConstraint`](#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")
    ([`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint"))
- en: '[PRE61]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Construct a CHECK constraint.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个检查约束。
- en: 'Parameters:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`sqltext` –'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqltext` –'
- en: 'A string containing the constraint definition, which will be used verbatim,
    or a SQL expression construct. If given as a string, the object is converted to
    a [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    object. If the textual string includes a colon character, escape this using a
    backslash:'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含约束定义的字符串，将会原样使用，或者是一个 SQL 表达式构造。如果给定为字符串，则将对象转换为 [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 对象。如果文本字符串包含冒号字符，则使用反斜杠进行转义：
- en: '[PRE62]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Warning
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: The [`CheckConstraint.sqltext`](#sqlalchemy.schema.CheckConstraint.params.sqltext
    "sqlalchemy.schema.CheckConstraint") argument to [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") can be passed as a Python string argument,
    which will be treated as **trusted SQL text** and rendered as given. **DO NOT
    PASS UNTRUSTED INPUT TO THIS PARAMETER**.
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`CheckConstraint.sqltext`](#sqlalchemy.schema.CheckConstraint.params.sqltext
    "sqlalchemy.schema.CheckConstraint") 参数可以作为 Python 字符串参数传递给 [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")，该参数将被视为**受信任的 SQL 文本**并按原样呈现。**不要将不受信任的输入传递给此参数**。'
- en: '`name` – Optional, the in-database name of the constraint.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选的，约束在数据库中的名称。'
- en: '`deferrable` – Optional bool. If set, emit DEFERRABLE or NOT DEFERRABLE when
    issuing DDL for this constraint.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferrable` – 可选布尔值。如果设置了，则在为此约束发出 DDL 时发出 DEFERRABLE 或 NOT DEFERRABLE。'
- en: '`initially` – Optional string. If set, emit INITIALLY <value>when issuing DDL
    for this constraint.</value>'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initially` – 可选字符串。如果设置了，则在为此约束发出 DDL 时发出 INITIALLY <value>。'
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选的数据字典，将填充到该对象的 [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") 属性中。'
- en: '[PRE63]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 为此类添加一种新的方言特定关键字参数。
- en: 'E.g.:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE64]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法是一种逐个方式向 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 字典添加额外参数的方法。该字典提供了方言代表各种模式级别构造接受的参数名称列表。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 新的方言通常应该一次性指定该字典，作为方言类的数据成员。临时添加参数名称的用例通常是用于最终用户代码，该代码还使用了自定义编译方案，该方案会使用额外的参数。
- en: 'Parameters:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。如果无法找到该方言，则会引发 [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。该方言还必须包括一个现有的 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 集合，表示它参与关键字参数的验证和默认系统，否则将引发
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")。如果该方言不包括此集合，则可以代表该方言指定任何关键字参数。所有
    SQLAlchemy 打包的方言都包括此集合，但是对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE65]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '*inherited from the* `ColumnCollectionMixin.columns` *attribute of* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin")'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `ColumnCollectionMixin.columns` *属性的* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin")'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the set of columns
    for this constraint.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此约束的列集合。
- en: '[PRE66]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '*inherited from the* [`ColumnCollectionConstraint.contains_column()`](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column
    "sqlalchemy.schema.ColumnCollectionConstraint.contains_column") *method of* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnCollectionConstraint.contains_column()`](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column
    "sqlalchemy.schema.ColumnCollectionConstraint") *方法的* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
- en: Return True if this constraint contains the given column.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此约束包含给定的列，则返回 True。
- en: Note that this object also contains an attribute `.columns` which is a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此对象还包含一个属性 `.columns`，它是一个 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，其中包含 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象。
- en: '[PRE67]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Deprecated since version 1.4: The [`CheckConstraint.copy()`](#sqlalchemy.schema.CheckConstraint.copy
    "sqlalchemy.schema.CheckConstraint.copy") method is deprecated and will be removed
    in a future release.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起已弃用：[`CheckConstraint.copy()`](#sqlalchemy.schema.CheckConstraint.copy
    "sqlalchemy.schema.CheckConstraint.copy") 方法已弃用，并将在将来的版本中删除。
- en: '[PRE68]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '*inherited from the* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *method of* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *方法的* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
- en: apply a conditional DDL rule to this schema item.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 对此模式项应用条件 DDL 规则。
- en: These rules work in a similar manner to the [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") callable, with the added
    feature that the criteria may be checked within the DDL compilation phase for
    a construct such as [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable").
    [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if "sqlalchemy.schema.HasConditionalDDL.ddl_if")
    currently applies towards the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct as well as all [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    constructs.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则的工作方式与[`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")可调用对象类似，但增加了一个功能，即可以在DDL编译阶段检查条件，例如[`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable")构造。 [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if")目前也适用于[`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造以及所有[`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")构造。
- en: 'Parameters:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – string name of a dialect, or a tuple of string names to indicate
    multiple dialect types.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` - 方言的字符串名称，或字符串名称的元组以指示多个方言类型。'
- en: '`callable_` – a callable that is constructed using the same form as that described
    in [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if").'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` - 使用与[`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")描述的相同形式构造的可调用对象。'
- en: '`state` – any arbitrary object that will be passed to the callable, if present.'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` - 任意对象，如果存在，将传递给可调用对象。'
- en: New in version 2.0.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: See also
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#schema-ddl-ddl-if)
    - background and usage examples'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制约束和索引的DDL生成](ddl.html#schema-ddl-ddl-if) - 背景和用法示例'
- en: '[PRE69]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项传递给此构造函数的关键字参数集合。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数以其原始的`<dialect>_<kwarg>`格式存在。只包括实际传递的参数；与包含此方言的所有选项的[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options")集合不同，后者包含了所有已知选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合也可写入；键的形式为`<dialect>_<kwarg>`，其中的值将被组装到选项列表中。
- en: See also
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE70]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项传递给此构造函数的关键字参数集合。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，键为`<dialect_name>`和`<argument_name>`。例如，`postgresql_where`参数可定位为：
- en: '[PRE71]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: New in version 0.9.2.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 版本0.9.2中的新功能。
- en: See also
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 平面字典形式'
- en: '[PRE72]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '*inherited from the* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")。'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象相关联的信息字典，允许将用户定义的数据与此[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")相关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次访问时，字典会自动生成。也可以在某些对象的构造函数中指定，例如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")和[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。
- en: '[PRE73]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")。'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs")的同义词。'
- en: '[PRE74]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Defines a dependency between two columns.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了两个列之间的依赖关系。
- en: '`ForeignKey` is specified as an argument to a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object, e.g.:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`ForeignKey`被指定为[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象的一个参数，例如：'
- en: '[PRE75]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Note that `ForeignKey` is only a marker object that defines a dependency between
    two columns. The actual constraint is in all cases represented by the [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object. This object will be generated
    automatically when a `ForeignKey` is associated with a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") which in turn is associated with a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). Conversely, when [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") is applied to a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), `ForeignKey` markers are automatically generated to
    be present on each associated [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which are also associated with the constraint object.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`ForeignKey`只是一个标记对象，它定义了两个列之间的依赖关系。在所有情况下，实际的约束由[`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象表示。当`ForeignKey`与一个与[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")关联的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")相关联时，此对象将自动生成。相反，当[`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")应用于一个与[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")相关联的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")时，将自动生成`ForeignKey`标记，这些标记也与约束对象相关联。
- en: Note that you cannot define a “composite” foreign key constraint, that is a
    constraint between a grouping of multiple parent/child columns, using `ForeignKey`
    objects. To define this grouping, the [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object must be used, and applied to
    the [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
    The associated `ForeignKey` objects are created automatically.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您不能使用`ForeignKey`对象定义“复合”外键约束，即多个父/子列的分组之间的约束。要定义此分组，必须使用[`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象，并将其应用于[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。相关的`ForeignKey`对象会自动生成。
- en: The `ForeignKey` objects associated with an individual [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object are available in the foreign_keys collection
    of that column.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 与单个[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象关联的`ForeignKey`对象可在该列的foreign_keys集合中使用。
- en: Further examples of foreign key configuration are in [Defining Foreign Keys](#metadata-foreignkeys).
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 更多外键配置示例见[定义外键](#metadata-foreignkeys)。
- en: '**Members**'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.ForeignKey.__init__), [argument_for()](#sqlalchemy.schema.ForeignKey.argument_for),
    [column](#sqlalchemy.schema.ForeignKey.column), [copy()](#sqlalchemy.schema.ForeignKey.copy),
    [dialect_kwargs](#sqlalchemy.schema.ForeignKey.dialect_kwargs), [dialect_options](#sqlalchemy.schema.ForeignKey.dialect_options),
    [get_referent()](#sqlalchemy.schema.ForeignKey.get_referent), [info](#sqlalchemy.schema.ForeignKey.info),
    [kwargs](#sqlalchemy.schema.ForeignKey.kwargs), [references()](#sqlalchemy.schema.ForeignKey.references),
    [target_fullname](#sqlalchemy.schema.ForeignKey.target_fullname)'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.ForeignKey.__init__), [argument_for()](#sqlalchemy.schema.ForeignKey.argument_for),
    [column](#sqlalchemy.schema.ForeignKey.column), [copy()](#sqlalchemy.schema.ForeignKey.copy),
    [dialect_kwargs](#sqlalchemy.schema.ForeignKey.dialect_kwargs), [dialect_options](#sqlalchemy.schema.ForeignKey.dialect_options),
    [get_referent()](#sqlalchemy.schema.ForeignKey.get_referent), [info](#sqlalchemy.schema.ForeignKey.info),
    [kwargs](#sqlalchemy.schema.ForeignKey.kwargs), [references()](#sqlalchemy.schema.ForeignKey.references),
    [target_fullname](#sqlalchemy.schema.ForeignKey.target_fullname)'
- en: '**Class signature**'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")（[`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
- en: '[PRE76]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Construct a column-level FOREIGN KEY.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 构造列级FOREIGN KEY。
- en: The [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    object when constructed generates a [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") which is associated with the parent
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object’s
    collection of constraints.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 构造[`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")对象时生成与父[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的约束集合关联的[`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")。
- en: 'Parameters:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – A single target column for the key relationship. A [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object or a column name as a string: `tablename.columnkey`
    or `schema.tablename.columnkey`. `columnkey` is the `key` which has been assigned
    to the column (defaults to the column name itself), unless `link_to_name` is `True`
    in which case the rendered name of the column is used.'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` – 关键关系的单个目标列。一个[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象或作为字符串的列名：`tablename.columnkey`或`schema.tablename.columnkey`。除非`link_to_name`为`True`，否则`columnkey`是分配给列的`key`（默认为列名本身）。'
- en: '`name` – Optional string. An in-database name for the key if constraint is
    not provided.'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选的字符串。如果未提供约束，则用于键的数据库内名称。'
- en: '`onupdate` – Optional string. If set, emit ON UPDATE <value>when issuing DDL
    for this constraint. Typical values include CASCADE, DELETE and RESTRICT.</value>'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onupdate` – 可选的字符串。如果设置，发出ON UPDATE <value>的DDL。典型值包括CASCADE、DELETE和RESTRICT。</value>'
- en: '`ondelete` – Optional string. If set, emit ON DELETE <value>when issuing DDL
    for this constraint. Typical values include CASCADE, DELETE and RESTRICT.</value>'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ondelete` – 可选的字符串。如果设置，发出ON DELETE <value>的DDL。典型值包括CASCADE、DELETE和RESTRICT。</value>'
- en: '`deferrable` – Optional bool. If set, emit DEFERRABLE or NOT DEFERRABLE when
    issuing DDL for this constraint.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferrable` – 可选的布尔值。如果设置，发出DEFERRABLE或NOT DEFERRABLE的DDL。'
- en: '`initially` – Optional string. If set, emit INITIALLY <value>when issuing DDL
    for this constraint.</value>'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initially` – 可选的字符串。如果设置，发出INITIALLY <value>的DDL。</value>'
- en: '`link_to_name` – if True, the string name given in `column` is the rendered
    name of the referenced column, not its locally assigned `key`.'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`link_to_name` – 如果为True，则`column`中给定的字符串名称是引用列的呈现名称，而不是其本地分配的`key`。'
- en: '`use_alter` –'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_alter` –'
- en: passed to the underlying [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") to indicate the constraint should be
    generated/dropped externally from the CREATE TABLE/ DROP TABLE statement. See
    [`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") for further description.
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给底层 [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint")
    以指示应该从 CREATE TABLE/ DROP TABLE 语句外部生成/删除约束。 有关详细信息，请参阅 [`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint")。
- en: See also
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint")'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint")'
- en: '[Creating/Dropping Foreign Key Constraints via ALTER](#use-alter)'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[通过 ALTER 创建/删除外键约束](#use-alter)'
- en: '`match` – Optional string. If set, emit MATCH <value>when issuing DDL for this
    constraint. Typical values include SIMPLE, PARTIAL and FULL.</value>'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`match` – 可选字符串。 如果设置，当为此约束发出 DDL 时，将发出 MATCH <value>。 典型值包括 SIMPLE、PARTIAL
    和 FULL。</value>'
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选数据字典，将填充到此对象的 [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") 属性中。'
- en: '`comment` –'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comment` –'
- en: Optional string that will render an SQL comment on foreign key constraint creation.
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选字符串，将在外键约束创建时渲染 SQL 注释。
- en: New in version 2.0.
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 2.0 版中的新内容。
- en: '`**dialect_kw` – Additional keyword arguments are dialect specific, and passed
    in the form `<dialectname>_<argname>`. The arguments are ultimately handled by
    a corresponding [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"). See the documentation regarding an
    individual dialect at [Dialects](../dialects/index.html) for detail on documented
    arguments.'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**dialect_kw` – 额外的关键字参数是特定于方言的，并以 `<dialectname>_<argname>` 的形式传递。 这些参数最终由相应的
    [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint")
    处理。 有关已记录参数的详细信息，请参阅 [方言](../dialects/index.html) 中有关单个方言的文档。'
- en: '[PRE77]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 为此类添加一种新类型的特定于方言的关键字参数。
- en: 'E.g.:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE78]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法是一种逐个参数方式向 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 字典添加额外参数的方法。 此字典提供了由各种基于模式的构造物代表方言的参数名列表。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 新方言通常应将此字典一次性指定为方言类的数据成员。 通常，临时添加参数名称的用例是为了同时使用自定义编译方案的最终用户代码，该方案使用附加参数。
- en: 'Parameters:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。方言必须是可定位的，否则会引发 [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。方言还必须包括一个现有的 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 集合，指示其参与关键字参数验证和默认系统，否则会引发
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")。如果方言不包括此集合，则已经可以代表此方言指定任何关键字参数。SQLAlchemy
    中打包的所有方言都包括此集合，但对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE79]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Return the target [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    referenced by this [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey").
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此 [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    引用的目标 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。
- en: If no target column has been established, an exception is raised.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有建立目标列，则会引发异常��
- en: '[PRE80]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Deprecated since version 1.4: The [`ForeignKey.copy()`](#sqlalchemy.schema.ForeignKey.copy
    "sqlalchemy.schema.ForeignKey.copy") method is deprecated and will be removed
    in a future release.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用：[`ForeignKey.copy()`](#sqlalchemy.schema.ForeignKey.copy "sqlalchemy.schema.ForeignKey.copy")
    方法已弃用，并将在将来的版本中移除。
- en: '[PRE81]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性* 的 *[`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")*'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 作为特定于方言的选项指定的关键字参数集合。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数以其原始的 `<dialect>_<kwarg>` 格式呈现。只包括实际传递的参数；不像 [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") 集合，该集合包含此方言已知的所有选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合也是可写的；键的形式为 `<dialect>_<kwarg>`，其中的值将被组装到选项列表中。
- en: See also
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE82]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性* 的 *[`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")*'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 作为特定于方言的选项指定的关键字参数集合。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，键入为`<dialect_name>`和`<argument_name>`。例如，`postgresql_where`参数可以定位为：
- en: '[PRE83]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: New in version 0.9.2.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 版本0.9.2中的新功能。
- en: See also
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 扁平字典形式'
- en: '[PRE84]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Return the [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    in the given [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    (or any [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause"))
    referenced by this [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey").
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")引用的给定[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")（或任何[`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")）中的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: Returns None if this [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    does not reference the given [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")未引用给定的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，则返回None。
- en: '[PRE85]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '*inherited from the* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在首次访问时自动生成。也可以在一些对象的构造函数中指定，例如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")和[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。
- en: '[PRE86]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs")的同义词。'
- en: '[PRE87]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Return True if the given [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    is referenced by this [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey").
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")引用给定的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，则返回True。
- en: '[PRE88]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Return a string based ‘column specification’ for this [`ForeignKey`](#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey").
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")的基于字符串的‘列规范’。
- en: This is usually the equivalent of the string-based “tablename.colname” argument
    first passed to the object’s constructor.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常相当于首先传递给对象构造函数的基于字符串的“tablename.colname”参数。
- en: '[PRE89]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: A table-level FOREIGN KEY constraint.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 表级别的外键约束。
- en: Defines a single column or composite FOREIGN KEY … REFERENCES constraint. For
    a no-frills, single column foreign key, adding a [`ForeignKey`](#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") to the definition of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is a shorthand equivalent for an unnamed, single column
    [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint").
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 定义单列或复合 FOREIGN KEY … REFERENCES 约束。对于简单的、单列的外键，将 [`ForeignKey`](#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 添加到 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 的定义中相当于一个未命名的、单列的 [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")。
- en: Examples of foreign key configuration are in [Defining Foreign Keys](#metadata-foreignkeys).
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 外键配置示例位于 [定义外键](#metadata-foreignkeys) 中。
- en: '**Members**'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.ForeignKeyConstraint.__init__), [argument_for()](#sqlalchemy.schema.ForeignKeyConstraint.argument_for),
    [column_keys](#sqlalchemy.schema.ForeignKeyConstraint.column_keys), [columns](#sqlalchemy.schema.ForeignKeyConstraint.columns),
    [contains_column()](#sqlalchemy.schema.ForeignKeyConstraint.contains_column),
    [copy()](#sqlalchemy.schema.ForeignKeyConstraint.copy), [ddl_if()](#sqlalchemy.schema.ForeignKeyConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.ForeignKeyConstraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.ForeignKeyConstraint.dialect_options),
    [elements](#sqlalchemy.schema.ForeignKeyConstraint.elements), [info](#sqlalchemy.schema.ForeignKeyConstraint.info),
    [kwargs](#sqlalchemy.schema.ForeignKeyConstraint.kwargs), [referred_table](#sqlalchemy.schema.ForeignKeyConstraint.referred_table)'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.ForeignKeyConstraint.__init__), [argument_for()](#sqlalchemy.schema.ForeignKeyConstraint.argument_for),
    [column_keys](#sqlalchemy.schema.ForeignKeyConstraint.column_keys), [columns](#sqlalchemy.schema.ForeignKeyConstraint.columns),
    [contains_column()](#sqlalchemy.schema.ForeignKeyConstraint.contains_column),
    [copy()](#sqlalchemy.schema.ForeignKeyConstraint.copy), [ddl_if()](#sqlalchemy.schema.ForeignKeyConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.ForeignKeyConstraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.ForeignKeyConstraint.dialect_options),
    [elements](#sqlalchemy.schema.ForeignKeyConstraint.elements), [info](#sqlalchemy.schema.ForeignKeyConstraint.info),
    [kwargs](#sqlalchemy.schema.ForeignKeyConstraint.kwargs), [referred_table](#sqlalchemy.schema.ForeignKeyConstraint.referred_table)'
- en: '**Class signature**'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") ([`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint"))
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")（[`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")）
- en: '[PRE90]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Construct a composite-capable FOREIGN KEY.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个能够处理复合键的 FOREIGN KEY。
- en: 'Parameters:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`columns` – A sequence of local column names. The named columns must be defined
    and present in the parent Table. The names should match the `key` given to each
    column (defaults to the name) unless `link_to_name` is True.'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`columns` – 一系列本地列名称。所命名的列必须在父表中定义并存在。除非 `link_to_name` 为 True，否则名称应与每列给定的
    `key` 匹配（默认为名称）。'
- en: '`refcolumns` – A sequence of foreign column names or Column objects. The columns
    must all be located within the same Table.'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`refcolumns` – 一系列外键列名称或 Column 对象。这些列必须全部位于同一张表内。'
- en: '`name` – Optional, the in-database name of the key.'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选，键的数据库内名称。'
- en: '`onupdate` – Optional string. If set, emit ON UPDATE <value>when issuing DDL
    for this constraint. Typical values include CASCADE, DELETE and RESTRICT.</value>'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onupdate` – 可选字符串。如果设置，则在为此约束发出 DDL 时发出 ON UPDATE <value>。典型值包括 CASCADE、DELETE
    和 RESTRICT。</value>'
- en: '`ondelete` – Optional string. If set, emit ON DELETE <value>when issuing DDL
    for this constraint. Typical values include CASCADE, DELETE and RESTRICT.</value>'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ondelete` – 可选字符串。如果设置，则在为此约束发出 DDL 时发出 ON DELETE <value>。典型值包括 CASCADE、DELETE
    和 RESTRICT。</value>'
- en: '`deferrable` – Optional bool. If set, emit DEFERRABLE or NOT DEFERRABLE when
    issuing DDL for this constraint.'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferrable` – 可选布尔值。如果设置，则在发出此约束的 DDL 时发出 DEFERRABLE 或 NOT DEFERRABLE。'
- en: '`initially` – Optional string. If set, emit INITIALLY <value>when issuing DDL
    for this constraint.</value>'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initially` – 可选字符串。如果设置，则在为此约束发出 DDL 时发出 INITIALLY <value>。</value>'
- en: '`link_to_name` – if True, the string name given in `column` is the rendered
    name of the referenced column, not its locally assigned `key`.'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`link_to_name` – 如果为 True，则 `column` 中给定的字符串名称是引用列的渲染名称，而不是其本地分配的 `key`。'
- en: '`use_alter` –'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_alter` –'
- en: If True, do not emit the DDL for this constraint as part of the CREATE TABLE
    definition. Instead, generate it via an ALTER TABLE statement issued after the
    full collection of tables have been created, and drop it via an ALTER TABLE statement
    before the full collection of tables are dropped.
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则不会将此约束的 DDL 作为 CREATE TABLE 定义的一部分输出。相反，在创建完整的表集合之后，通过 ALTER TABLE
    语句生成它，在删除完整的表集合之前，通过 ALTER TABLE 语句将其删除。
- en: The use of [`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") is particularly geared towards the case
    where two or more tables are established within a mutually-dependent foreign key
    constraint relationship; however, the [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") methods will perform this resolution automatically,
    so the flag is normally not needed.
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") 的使用特别适用于两个或多个表在相互依赖的外键约束关系内建立的情况；然而，[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 和 [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") 方法将自动执行此解析，因此通常不需要该标志。'
- en: See also
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Creating/Dropping Foreign Key Constraints via ALTER](#use-alter)'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[通过 ALTER 创建/删除外键约束](#use-alter)'
- en: '`match` – Optional string. If set, emit MATCH <value>when issuing DDL for this
    constraint. Typical values include SIMPLE, PARTIAL and FULL.</value>'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`match` – 可选字符串。如果设置，则在为此约束发出 DDL 时发出 MATCH <value>。典型值包括 SIMPLE、PARTIAL 和
    FULL。</value>'
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 将填充到此对象的 [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") 属性中的可选数据字典。'
- en: '`comment` –'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comment` –'
- en: Optional string that will render an SQL comment on foreign key constraint creation.
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选字符串，将在创建外键约束时呈现 SQL 注释。
- en: New in version 2.0.
  id: totrans-446
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: '`**dialect_kw` – Additional keyword arguments are dialect specific, and passed
    in the form `<dialectname>_<argname>`. See the documentation regarding an individual
    dialect at [Dialects](../dialects/index.html) for detail on documented arguments.'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**dialect_kw` – 附加关键字参数是方言特定的，并以 `<方言名称>_<参数名称>` 形式传递。有关文档中记录的参数的详细信息，请参阅[方言](../dialects/index.html)中有关单个方言的文档。'
- en: '[PRE91]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '*来自* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs "sqlalchemy.sql.base.DialectKWArgs")
    *的* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法继承*'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 为此类添加一种新的方言特定关键字参数。
- en: 'E.g.:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE92]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法是向[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 字典中各种模式级构造所接受的参数名称添加额外参数的方法。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 新方言通常应一次性指定此字典作为方言类的数据成员。临时添加参数名称的用例通常是终端用户代码，该代码还使用自定义编译方案，该方案消耗附加参数。
- en: 'Parameters:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。如果无法定位方言，将引发 [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。方言还必须包括一个现有的 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 集合，表示它参与关键字参数的验证和默认系统，否则将引发
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")。如果方言不包括此集合，则可以代表此方言已经指定任何关键字参数。SQLAlchemy
    中打包的所有方言都包括此集合，但是对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE93]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Return a list of string keys representing the local columns in this [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 返回表示此 [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint")
    中本地列的字符串键列表。
- en: This list is either the original string arguments sent to the constructor of
    the [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint"),
    or if the constraint has been initialized with [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, is the string `.key` of each element.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表是发送到 [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint")
    构造函数的原始字符串参数，或者如果约束已使用 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象进行初始化，则是每个元素的字符串 `.key`。
- en: '[PRE94]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '*inherited from the* `ColumnCollectionMixin.columns` *attribute of* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin")'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin "sqlalchemy.schema.ColumnCollectionMixin")
    *的* `ColumnCollectionMixin.columns` *属性继承*'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the set of columns
    for this constraint.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此约束的列集合的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: '[PRE95]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '*inherited from the* [`ColumnCollectionConstraint.contains_column()`](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column
    "sqlalchemy.schema.ColumnCollectionConstraint.contains_column") *method of* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnCollectionConstraint.contains_column()`](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column
    "sqlalchemy.schema.ColumnCollectionConstraint.contains_column") *方法继承*'
- en: Return True if this constraint contains the given column.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此约束包含给定的列，则返回 True。
- en: Note that this object also contains an attribute `.columns` which is a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此对象还包含一个属性 `.columns`，它是 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: '[PRE96]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Deprecated since version 1.4: The [`ForeignKeyConstraint.copy()`](#sqlalchemy.schema.ForeignKeyConstraint.copy
    "sqlalchemy.schema.ForeignKeyConstraint.copy") method is deprecated and will be
    removed in a future release.'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 起弃用：[`ForeignKeyConstraint.copy()`](#sqlalchemy.schema.ForeignKeyConstraint.copy
    "sqlalchemy.schema.ForeignKeyConstraint.copy") 方法已弃用，并将在将来的版本中删除。
- en: '[PRE97]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '*inherited from the* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *method of* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL "sqlalchemy.schema.HasConditionalDDL")
    *的* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *方法继承*'
- en: apply a conditional DDL rule to this schema item.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 对此模式项应用条件DDL规则。
- en: These rules work in a similar manner to the [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") callable, with the added
    feature that the criteria may be checked within the DDL compilation phase for
    a construct such as [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable").
    [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if "sqlalchemy.schema.HasConditionalDDL.ddl_if")
    currently applies towards the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct as well as all [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    constructs.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则的工作方式与[`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")可调用对象类似，但增加了在DDL编译阶段检查条件的功能，例如[`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable")构造。[`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if")当前还适用于[`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造以及所有[`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")构造。
- en: 'Parameters:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – string name of a dialect, or a tuple of string names to indicate
    multiple dialect types.'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 方言的字符串名称，或一个字符串名称元组，表示多个方言类型。'
- en: '`callable_` – a callable that is constructed using the same form as that described
    in [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if").'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` – 使用与[`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")描述的相同形式构造的可调用对象。'
- en: '`state` – any arbitrary object that will be passed to the callable, if present.'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` – 如果存在，则会传递给可调用对象的任意对象。'
- en: New in version 2.0.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 版本2.0中的新功能。
- en: See also
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#schema-ddl-ddl-if)
    - background and usage examples'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制约束和索引的DDL生成](ddl.html#schema-ddl-ddl-if) - 背景和使用示例'
- en: '[PRE98]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 一组关键字参数，指定为此构造的方言特定选项。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数在这里以其原始的`<dialect>_<kwarg>`格式呈现。只包括实际传递的参数；与包含此方言的所有选项（包括默认值）的[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options")集合不同。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合也是可写的；接受形式为`<dialect>_<kwarg>`的键，值将被组装到选项列表中。
- en: See also
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE99]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 一组关键字参数，指定为此构造的方言特定选项。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，键为`<dialect_name>`和`<argument_name>`。例如，`postgresql_where`参数可以定位为：
- en: '[PRE100]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: New in version 0.9.2.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 0.9.2 中的新功能。
- en: See also
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 平面字典形式'
- en: '[PRE101]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: A sequence of [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    objects.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列[`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")对象。
- en: Each [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    represents a single referring column/referred column pair.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 每个[`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")表示一个引用列/被引用列对。
- en: This collection is intended to be read-only.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 此集合预期为只读。
- en: '[PRE102]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '*inherited from the* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 继承自[`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的*
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在首次访问时自动生成。它也可以在某些对象的构造函数中指定，例如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")和[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。
- en: '[PRE103]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 继承自[`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性的*
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs")的同义词。'
- en: '[PRE104]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: The [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object to which this [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") references.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 此[`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint")引用的[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象。
- en: This is a dynamically calculated attribute which may not be available if the
    constraint and/or parent table is not yet associated with a metadata collection
    that contains the referred table.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个动态计算的属性，如果约束和/或父表尚未与包含所引用表的元数据集合关联，则可能无法使用此属性。
- en: '[PRE105]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: define a class that includes the [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") method, allowing for conditional
    rendering of DDL.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个包含[`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if")方法的类，允许对DDL进行条件渲染。
- en: Currently applies to constraints and indexes.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 目前适用于约束和索引。
- en: '**Members**'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[ddl_if()](#sqlalchemy.schema.HasConditionalDDL.ddl_if)'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '[ddl_if()](#sqlalchemy.schema.HasConditionalDDL.ddl_if)'
- en: New in version 2.0.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: '[PRE106]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: apply a conditional DDL rule to this schema item.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 对此模式项应用条件DDL规则。
- en: These rules work in a similar manner to the [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") callable, with the added
    feature that the criteria may be checked within the DDL compilation phase for
    a construct such as [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable").
    [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if "sqlalchemy.schema.HasConditionalDDL.ddl_if")
    currently applies towards the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct as well as all [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    constructs.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则的工作方式类似于 [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 可调用对象，但增加了一个特性，即在DDL编译阶段可以检查条件，例如
    [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    等构造中的条件。 [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") 目前也适用于 [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造以及所有 [`Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") 构造。
- en: 'Parameters:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – string name of a dialect, or a tuple of string names to indicate
    multiple dialect types.'
  id: totrans-521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 方言的字符串名称，或者字符串名称的元组，表示多种方言类型。'
- en: '`callable_` – a callable that is constructed using the same form as that described
    in [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if").'
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` – 一个可调用对象，其构造方式与 [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 中描述的相同。'
- en: '`state` – any arbitrary object that will be passed to the callable, if present.'
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` – 如果存在，则将传递给可调用对象的任意对象。'
- en: New in version 2.0.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新增内容。
- en: See also
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#schema-ddl-ddl-if)
    - background and usage examples'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制约束和索引的DDL生成](ddl.html#schema-ddl-ddl-if) - 背景和用法示例'
- en: '[PRE107]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: A table-level PRIMARY KEY constraint.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 表级别的主键约束。
- en: 'The [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint "sqlalchemy.schema.PrimaryKeyConstraint")
    object is present automatically on any [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object; it is assigned a set of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects corresponding to those marked with the [`Column.primary_key`](metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") flag:'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象上自动存在 [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint "sqlalchemy.schema.PrimaryKeyConstraint")
    对象；它被分配了一组与标记有 [`Column.primary_key`](metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") 标志的列对应的 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象：'
- en: '[PRE108]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'The primary key of a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    can also be specified by using a [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") object explicitly; in this mode of usage,
    the “name” of the constraint can also be specified, as well as other options which
    may be recognized by dialects:'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过显式使用 [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint "sqlalchemy.schema.PrimaryKeyConstraint")
    对象来指定 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    的主键；在这种用法模式下，还可以指定约束的“名称”，以及方言可能识别的其他选项：
- en: '[PRE109]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: The two styles of column-specification should generally not be mixed. An warning
    is emitted if the columns present in the [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") don’t match the columns that were marked
    as `primary_key=True`, if both are present; in this case, the columns are taken
    strictly from the [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") declaration, and those columns otherwise
    marked as `primary_key=True` are ignored. This behavior is intended to be backwards
    compatible with previous behavior.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 通常不应混合两种列规范样式。如果同时存在 [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") 中的列与标记为 `primary_key=True` 的列不匹配，则会发出警告；在这种情况下，列严格来自
    [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint "sqlalchemy.schema.PrimaryKeyConstraint")
    声明，并且其他标记为 `primary_key=True` 的列将被忽略。此行为旨在向后兼容以前的行为。
- en: 'For the use case where specific options are to be specified on the [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), but the usual style of using `primary_key=True`
    flags is still desirable, an empty [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") may be specified, which will take on
    the primary key column collection from the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") based on the flags:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要在 [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint "sqlalchemy.schema.PrimaryKeyConstraint")
    上指定特定选项的用例，但仍希望使用 `primary_key=True` 标志的常规方式，可以指定一个空的 [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")，该约束将根据标志从 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 中获取主键列集合：
- en: '[PRE110]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '**Members**'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[argument_for()](#sqlalchemy.schema.PrimaryKeyConstraint.argument_for), [columns](#sqlalchemy.schema.PrimaryKeyConstraint.columns),
    [contains_column()](#sqlalchemy.schema.PrimaryKeyConstraint.contains_column),
    [copy()](#sqlalchemy.schema.PrimaryKeyConstraint.copy), [ddl_if()](#sqlalchemy.schema.PrimaryKeyConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.PrimaryKeyConstraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.PrimaryKeyConstraint.dialect_options),
    [info](#sqlalchemy.schema.PrimaryKeyConstraint.info), [kwargs](#sqlalchemy.schema.PrimaryKeyConstraint.kwargs)'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '[argument_for()](#sqlalchemy.schema.PrimaryKeyConstraint.argument_for), [columns](#sqlalchemy.schema.PrimaryKeyConstraint.columns),
    [contains_column()](#sqlalchemy.schema.PrimaryKeyConstraint.contains_column),
    [copy()](#sqlalchemy.schema.PrimaryKeyConstraint.copy), [ddl_if()](#sqlalchemy.schema.PrimaryKeyConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.PrimaryKeyConstraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.PrimaryKeyConstraint.dialect_options),
    [info](#sqlalchemy.schema.PrimaryKeyConstraint.info), [kwargs](#sqlalchemy.schema.PrimaryKeyConstraint.kwargs)'
- en: '**Class signature**'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") ([`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint"))
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.schema.PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") ([`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint"))
- en: '[PRE111]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 为此类添加一种新的方言特定关键字参数。
- en: 'E.g.:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE112]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法是一种逐个参数地向 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 字典添加额外参数的方法。此字典提供了各种模式级别构造接受的参数名称列表，代表方言。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 新的方言通常应将此字典一次性指定为方言类的数据成员。通常，对参数名称进行临时添加的用例是针对终端用户代码的，该代码还使用了消耗额外参数的自定义编译方案。
- en: 'Parameters:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。方言必须是可定位的，否则将引发 [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。方言还必须包含一个现有的 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 集合，表明它参与关键字参数验证和默认系统，否则将引发
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")。如果方言不包括此集合，则可以代表此方言已经指定任何关键字参数。SQLAlchemy
    中打包的所有方言都包括此集合，但是对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE113]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '*inherited from the* `ColumnCollectionMixin.columns` *attribute of* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin")'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `ColumnCollectionMixin.columns` *属性的* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin")'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the set of columns
    for this constraint.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 代表此约束的一组列的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: '[PRE114]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '*inherited from the* [`ColumnCollectionConstraint.contains_column()`](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column
    "sqlalchemy.schema.ColumnCollectionConstraint.contains_column") *method of* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnCollectionConstraint.contains_column()`](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column
    "sqlalchemy.schema.ColumnCollectionConstraint.contains_column") *方法的* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
- en: Return True if this constraint contains the given column.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此约束包含给定的列，则返回 True。
- en: Note that this object also contains an attribute `.columns` which is a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此对象还包含一个名为 `.columns` 的属性，它是 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: '[PRE115]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '*inherited from the* [`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") *method of* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") *方法的* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
- en: 'Deprecated since version 1.4: The [`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") method is deprecated and
    will be removed in a future release.'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始已弃用：[`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") 方法已弃用，并将在将来的版本中删除。
- en: '[PRE116]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '*inherited from the* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *method of* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *方法的* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
- en: apply a conditional DDL rule to this schema item.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个模式项应用一个条件 DDL 规则。
- en: These rules work in a similar manner to the [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") callable, with the added
    feature that the criteria may be checked within the DDL compilation phase for
    a construct such as [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable").
    [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if "sqlalchemy.schema.HasConditionalDDL.ddl_if")
    currently applies towards the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct as well as all [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    constructs.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则与[`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")可调用对象的工作方式类似，额外的特性是可以在DDL编译阶段检查条件，例如[`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable")这样的结构。 [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if")目前也适用于[`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")结构以及所有[`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")结构。
- en: 'Parameters:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – string name of a dialect, or a tuple of string names to indicate
    multiple dialect types.'
  id: totrans-566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 方言的字符串名称，或者字符串名称的元组以指示多个方言类型。'
- en: '`callable_` – a callable that is constructed using the same form as that described
    in [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if").'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` – 使用与[`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")中描述的相同形式构造的可调用对象。'
- en: '`state` – any arbitrary object that will be passed to the callable, if present.'
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` – 如果存在，将传递给可调用对象的任意对象。'
- en: New in version 2.0.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: See also
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#schema-ddl-ddl-if)
    - background and usage examples'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制约束和索引的DDL生成](ddl.html#schema-ddl-ddl-if) - 背景和使用示例'
- en: '[PRE117]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 一组作为特定于方言的选项指定为此结构的关键字参数。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数以原始的 `<dialect>_<kwarg>` 格式出现在此处。仅包括实际传递的参数；不像[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options")集合，该集合包含该方言知道的所有选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合也是可写的；键以 `<dialect>_<kwarg>` 形式接受，其中值将被组装到选项列表中。
- en: See also
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE118]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 一组作为特定于方言的选项指定为此结构的关键字参数。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，键为 `<dialect_name>` 和 `<argument_name>`。例如，`postgresql_where` 参数可定位为：
- en: '[PRE119]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: New in version 0.9.2.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 0.9.2 中的新功能。
- en: See also
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 平展的字典形式'
- en: '[PRE120]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '*inherited from the* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    *的*'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此 [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") 关联起来。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在首次访问时会自动生成。也可以在某些对象的构造函数中指定，例如 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 和 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: '[PRE121]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") 的同义词。'
- en: '[PRE122]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: A table-level UNIQUE constraint.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 表级别的唯一约束。
- en: Defines a single column or composite UNIQUE constraint. For a no-frills, single
    column constraint, adding `unique=True` to the `Column` definition is a shorthand
    equivalent for an unnamed, single column UniqueConstraint.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 定义单列或组合唯一约束。对于简单的单列约束，向 `Column` 定义中添加 `unique=True` 是一个等效的缩写，相当于未命名的单列 UniqueConstraint。
- en: '**Members**'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.UniqueConstraint.__init__), [argument_for()](#sqlalchemy.schema.UniqueConstraint.argument_for),
    [columns](#sqlalchemy.schema.UniqueConstraint.columns), [contains_column()](#sqlalchemy.schema.UniqueConstraint.contains_column),
    [copy()](#sqlalchemy.schema.UniqueConstraint.copy), [ddl_if()](#sqlalchemy.schema.UniqueConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.UniqueConstraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.UniqueConstraint.dialect_options),
    [info](#sqlalchemy.schema.UniqueConstraint.info), [kwargs](#sqlalchemy.schema.UniqueConstraint.kwargs)'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.UniqueConstraint.__init__), [argument_for()](#sqlalchemy.schema.UniqueConstraint.argument_for),
    [columns](#sqlalchemy.schema.UniqueConstraint.columns), [contains_column()](#sqlalchemy.schema.UniqueConstraint.contains_column),
    [copy()](#sqlalchemy.schema.UniqueConstraint.copy), [ddl_if()](#sqlalchemy.schema.UniqueConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.UniqueConstraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.UniqueConstraint.dialect_options),
    [info](#sqlalchemy.schema.UniqueConstraint.info), [kwargs](#sqlalchemy.schema.UniqueConstraint.kwargs)'
- en: '**Class signature**'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") ([`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint"))
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") ([`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint"))。
- en: '[PRE123]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '*inherited from the* `sqlalchemy.schema.ColumnCollectionConstraint.__init__`
    *method of* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.schema.ColumnCollectionConstraint.__init__` *方法的* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
- en: 'Parameters:'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*columns` – A sequence of column names or Column objects.'
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*columns` – 一系列列名或 Column 对象。'
- en: '`name` – Optional, the in-database name of this constraint.'
  id: totrans-605
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选项，此约束的数据库内名称。'
- en: '`deferrable` – Optional bool. If set, emit DEFERRABLE or NOT DEFERRABLE when
    issuing DDL for this constraint.'
  id: totrans-606
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferrable` – 可选的布尔值。如果设置，当为此约束发出 DDL 时会发出 DEFERRABLE 或 NOT DEFERRABLE。'
- en: '`initially` – Optional string. If set, emit INITIALLY <value>when issuing DDL
    for this constraint.</value>'
  id: totrans-607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initially` – 可选字符串。如果设置，当为此约束发出 DDL 时，会发出 INITIALLY <value>。'
- en: '`**dialect_kw` – other keyword arguments including dialect-specific arguments
    are propagated to the [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    superclass.'
  id: totrans-608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**dialect_kw` – 其他关键字参数，包括方言特定参数，将传播到 [`Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") 超类。'
- en: '[PRE124]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs "sqlalchemy.sql.base.DialectKWArgs")
    *的* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法*。'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 为此类添加一种新的方言特定关键字参数。
- en: 'E.g.:'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE125]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法是逐个参数地向 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 字典添加额外参数的方式。此字典提供了各种模式级别构造所接受的参数名称列表，代表方言。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 新方言通常应该将此字典一次性指定为方言类的数据成员。通常情况下，对参数名称的临时添加用例是用于还使用自定义编译方案的端用户代码，该方案会消耗额外的参数。
- en: 'Parameters:'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。方言必须可定位，否则会引发 [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。方言还必须包括现有的 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 集合，指示其参与关键字参数验证和默认系统，否则会引发
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")。如果方言不包括此集合，则已经可以代表此方言指定任何关键字参数。SQLAlchemy
    中打包的所有方言都包含此集合，但是对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-618
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE126]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '*inherited from the* `ColumnCollectionMixin.columns` *attribute of* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin")'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin "sqlalchemy.schema.ColumnCollectionMixin")
    *的* `ColumnCollectionMixin.columns` *属性*。'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the set of columns
    for this constraint.
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此约束的列集合的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: '[PRE127]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '*inherited from the* [`ColumnCollectionConstraint.contains_column()`](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column
    "sqlalchemy.schema.ColumnCollectionConstraint.contains_column") *method of* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnCollectionConstraint.contains_column()`](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column
    "sqlalchemy.schema.ColumnCollectionConstraint.contains_column") *方法的* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
- en: Return True if this constraint contains the given column.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此约束包含给定的列，则返回 True。
- en: Note that this object also contains an attribute `.columns` which is a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此对象还包含一个属性`.columns`，它是[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: '[PRE128]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '*inherited from the* [`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") *method of* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") *方法的* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
- en: 'Deprecated since version 1.4: The [`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") method is deprecated and
    will be removed in a future release.'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4开始已弃用：[`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") 方法已弃用，将在未来版本中删除。
- en: '[PRE129]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '*inherited from the* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *method of* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *方法的* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
- en: apply a conditional DDL rule to this schema item.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 对此模式项应用一个条件DDL规则。
- en: These rules work in a similar manner to the [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") callable, with the added
    feature that the criteria may be checked within the DDL compilation phase for
    a construct such as [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable").
    [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if "sqlalchemy.schema.HasConditionalDDL.ddl_if")
    currently applies towards the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct as well as all [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    constructs.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则的工作方式与[`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")可调用对象类似，但添加了一个特性，即可以在DDL编译阶段检查条件，例如[`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable")构造。 [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") 目前也适用于[`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造以及所有[`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")构造。
- en: 'Parameters:'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – string name of a dialect, or a tuple of string names to indicate
    multiple dialect types.'
  id: totrans-635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 方言的字符串名称，或者一个字符串名称的元组，表示多个方言类型。'
- en: '`callable_` – a callable that is constructed using the same form as that described
    in [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if").'
  id: totrans-636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` – 使用与[`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")描述的相同形式构建的可调用对象。'
- en: '`state` – any arbitrary object that will be passed to the callable, if present.'
  id: totrans-637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` – 如果存在，将传递给可调用对象的任意对象。'
- en: New in version 2.0.
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版中的新功能。
- en: See also
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#schema-ddl-ddl-if)
    - background and usage examples'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制约束和索引的DDL生成](ddl.html#schema-ddl-ddl-if) - 背景和使用示例'
- en: '[PRE130]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关键字参数的集合，指定为此构造函数的特定于方言的选项。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数以其原始的 `<dialect>_<kwarg>` 格式呈现。仅包括实际传递的参数；与 [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") 集合不同，后者包含此方言的所有已知选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合也是可写的；接受形式为 `<dialect>_<kwarg>` 的键，其值将被组装到选项列表中。
- en: See also
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE131]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关键字参数的集合，指定为此构造函数的特定于方言的选项。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，键入为 `<dialect_name>` 和 `<argument_name>`。例如，`postgresql_where`
    参数可以定位为：
- en: '[PRE132]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: New in version 0.9.2.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中新增 0.9.2。
- en: See also
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 平面字典形式'
- en: '[PRE133]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '*inherited from the* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 与此 [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")
    关联的信息字典，允许将用户定义的数据与此对象关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次访问时，该字典将自动生成。也可以在某些对象的构造函数中指定它，例如 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 和 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: '[PRE134]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") 的同义词。'
- en: '[PRE135]'
  id: totrans-663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Mark a string indicating that a name has already been converted by a naming
    convention.
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 标记字符串，指示名称已经被命名约定转换。
- en: This is a string subclass that indicates a name that should not be subject to
    any further naming conventions.
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个字符串子类，指示不应再受任何进一步命名约定的影响的名称。
- en: 'E.g. when we create a [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    using a naming convention as follows:'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当我们按照以下命名约定创建一个 [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    时：
- en: '[PRE136]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: The name of the above constraint will be rendered as `"ck_t_x5"`. That is, the
    existing name `x5` is used in the naming convention as the `constraint_name` token.
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 上述约束的名称将呈现为 `"ck_t_x5"`。也就是说，现有名称 `x5` 被用作命名约定中的 `constraint_name` 令牌。
- en: 'In some situations, such as in migration scripts, we may be rendering the above
    [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")
    with a name that’s already been converted. In order to make sure the name isn’t
    double-modified, the new name is applied using the [`conv()`](#sqlalchemy.schema.conv
    "sqlalchemy.schema.conv") marker. We can use this explicitly as follows:'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，例如在迁移脚本中，我们可能会使用已经转换过的名称渲染上述 [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")。为了确保名称不被双重修改，新名称使用 [`conv()`](#sqlalchemy.schema.conv
    "sqlalchemy.schema.conv") 标记应用。我们可以显式地使用如下：
- en: '[PRE137]'
  id: totrans-670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: Where above, the [`conv()`](#sqlalchemy.schema.conv "sqlalchemy.schema.conv")
    marker indicates that the constraint name here is final, and the name will render
    as `"ck_t_x5"` and not `"ck_t_ck_t_x5"`
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况中，[`conv()`](#sqlalchemy.schema.conv "sqlalchemy.schema.conv") 标记指示此处约束名为最终名称，名称将呈现为
    `"ck_t_x5"` 而不是 `"ck_t_ck_t_x5"`
- en: See also
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Configuring Constraint Naming Conventions](#constraint-naming-conventions)'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '[配置约束命名约定](#constraint-naming-conventions)'
- en: '## Indexes'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '## 索引'
- en: Indexes can be created anonymously (using an auto-generated name `ix_<column
    label>`) for a single column using the inline `index` keyword on [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which also modifies the usage of `unique` to apply
    the uniqueness to the index itself, instead of adding a separate UNIQUE constraint.
    For indexes with specific names or which encompass more than one column, use the
    [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") construct, which
    requires a name.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 可以匿名创建索引（使用自动生成的名称 `ix_<column label>`）来为单个列使用内联 `index` 关键字，该关键字还修改了 `unique`
    的使用，将唯一性应用于索引本身，而不是添加单独的 UNIQUE 约束。对于具有特定名称或涵盖多个列的索引，请使用 [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造，该构造需要一个名称。
- en: 'Below we illustrate a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    with several [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") objects
    associated. The DDL for “CREATE INDEX” is issued right after the create statements
    for the table:'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 下面我们示例了一个带有多个相关 [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    对象的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")。DDL
    “创建索引”的语句会在表的创建语句之后立即发出：
- en: '[PRE138]'
  id: totrans-677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'Note in the example above, the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct is created externally to the table which it corresponds, using [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects directly. [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") also supports “inline” definition inside the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), using string names to identify columns:'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上面的示例中，[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") 构造是在对应的表之外创建的，直接使用
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象。[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") 还支持在 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 内部“内联”定义，使用字符串名称标识列：
- en: '[PRE139]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'The [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") object also
    supports its own `create()` method:'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") 对象还支持自己的 `create()`
    方法：'
- en: '[PRE140]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '### Functional Indexes'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: '### 函数索引'
- en: '[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") supports SQL
    and function expressions, as supported by the target backend. To create an index
    against a column using a descending value, the [`ColumnElement.desc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.desc
    "sqlalchemy.sql.expression.ColumnElement.desc") modifier may be used:'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '[`索引`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") 支持 SQL 和函数表达式，正如目标后端所支持的那样。要针对列使用降序值创建索引，可以使用
    [`ColumnElement.desc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.desc
    "sqlalchemy.sql.expression.ColumnElement.desc") 修饰符：'
- en: '[PRE141]'
  id: totrans-684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'Or with a backend that supports functional indexes such as PostgreSQL, a “case
    insensitive” index can be created using the `lower()` function:'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用支持功能性索引的后端，比如 PostgreSQL，可以使用 `lower()` 函数创建“不区分大小写”的索引：
- en: '[PRE142]'
  id: totrans-686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Index API
  id: totrans-687
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引 API
- en: '| Object Name | Description |'
  id: totrans-688
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-689
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Index](#sqlalchemy.schema.Index) | A table-level INDEX. |'
  id: totrans-690
  prefs: []
  type: TYPE_TB
  zh: '| [Index](#sqlalchemy.schema.Index) | 表级别的索引。 |'
- en: '[PRE143]'
  id: totrans-691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: A table-level INDEX.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 表级别的索引。
- en: Defines a composite (one or more column) INDEX.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个复合（一个或多个列）索引。
- en: 'E.g.:'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE144]'
  id: totrans-695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'For a no-frills, single column index, adding [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") also supports `index=True`:'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个简单的单列索引，添加 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    也支持 `index=True`：
- en: '[PRE145]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'For a composite index, multiple columns can be specified:'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个复合索引，可以指定多列：
- en: '[PRE146]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'Functional indexes are supported as well, typically by using the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") construct in conjunction with table-bound [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects:'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 也支持功能性索引，通常通过结合绑定到表的 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象使用 [`func`](sqlelement.html#sqlalchemy.sql.expression.func "sqlalchemy.sql.expression.func")
    构造来实现：
- en: '[PRE147]'
  id: totrans-701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: 'An [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") can also be
    manually associated with a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    either through inline declaration or using [`Table.append_constraint()`](metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint"). When this approach is used, the
    names of the indexed columns can be specified as strings:'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") 也可以通过内联声明或使用
    [`Table.append_constraint()`](metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint") 与 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 手动关联。当使用这种方法时，索引列的名称可以指定为字符串：'
- en: '[PRE148]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: 'To support functional or expression-based indexes in this form, the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct may be used:'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在此形式中支持功能性或基于表达式的索引，可以使用 [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 构造：
- en: '[PRE149]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: See also
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Indexes](#schema-indexes) - General information on [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index").'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: '[索引](#schema-indexes) - 关于 [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    的一般信息。'
- en: '[PostgreSQL-Specific Index Options](../dialects/postgresql.html#postgresql-indexes)
    - PostgreSQL-specific options available for the [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct.'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: '[PostgreSQL 特定索引选项](../dialects/postgresql.html#postgresql-indexes) - 用于 [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造的特定于 PostgreSQL 的选项。'
- en: '[MySQL / MariaDB- Specific Index Options](../dialects/mysql.html#mysql-indexes)
    - MySQL-specific options available for the [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct.'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: '[MySQL / MariaDB 特定索引选项](../dialects/mysql.html#mysql-indexes) - 用于 [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造的特定于 MySQL 的选项。'
- en: '[Clustered Index Support](../dialects/mssql.html#mssql-indexes) - MSSQL-specific
    options available for the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct.'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: '[聚集索引支持](../dialects/mssql.html#mssql-indexes) - 用于 [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造的特定于 MSSQL 的选项。'
- en: '**Members**'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.Index.__init__), [argument_for()](#sqlalchemy.schema.Index.argument_for),
    [create()](#sqlalchemy.schema.Index.create), [ddl_if()](#sqlalchemy.schema.Index.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.Index.dialect_kwargs), [dialect_options](#sqlalchemy.schema.Index.dialect_options),
    [drop()](#sqlalchemy.schema.Index.drop), [info](#sqlalchemy.schema.Index.info),
    [kwargs](#sqlalchemy.schema.Index.kwargs)'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.Index.__init__), [argument_for()](#sqlalchemy.schema.Index.argument_for),
    [create()](#sqlalchemy.schema.Index.create), [ddl_if()](#sqlalchemy.schema.Index.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.Index.dialect_kwargs), [dialect_options](#sqlalchemy.schema.Index.dialect_options),
    [drop()](#sqlalchemy.schema.Index.drop), [info](#sqlalchemy.schema.Index.info),
    [kwargs](#sqlalchemy.schema.Index.kwargs)'
- en: '**Class signature**'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.schema.ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin"), [`sqlalchemy.schema.HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.schema.ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin"), [`sqlalchemy.schema.HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
- en: '[PRE150]'
  id: totrans-715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: Construct an index object.
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 构造索引对象。
- en: 'Parameters:'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – The name of the index'
  id: totrans-718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 索引的名称'
- en: '`*expressions` – Column expressions to include in the index. The expressions
    are normally instances of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    but may also be arbitrary SQL expressions which ultimately refer to a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").'
  id: totrans-719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*expressions` – 要包含在索引中的列表达式。这些表达式通常是 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 的实例，但也可以是最终引用 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 的任意SQL表达式。'
- en: '`unique=False` – Keyword only argument; if True, create a unique index.'
  id: totrans-720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unique=False` – 仅限关键字参数；如果为True，则创建唯一索引。'
- en: '`quote=None` – Keyword only argument; whether to apply quoting to the name
    of the index. Works in the same manner as that of [`Column.quote`](metadata.html#sqlalchemy.schema.Column.params.quote
    "sqlalchemy.schema.Column").'
  id: totrans-721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote=None` – 仅限关键字参数；是否对索引名称应用引号。其工作方式与 [`Column.quote`](metadata.html#sqlalchemy.schema.Column.params.quote
    "sqlalchemy.schema.Column") 相同。'
- en: '`info=None` – Optional data dictionary which will be populated into the [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  id: totrans-722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info=None` – 可选数据字典，将填充到此对象的 [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") 属性中。'
- en: '`**dialect_kw` – Additional keyword arguments not mentioned above are dialect
    specific, and passed in the form `<dialectname>_<argname>`. See the documentation
    regarding an individual dialect at [Dialects](../dialects/index.html) for detail
    on documented arguments.'
  id: totrans-723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**dialect_kw` – 除上述未提及的其他关键字参数是方言特定的，并以`<dialectname>_<argname>`的形式传递。有关文档中列出的参数的详细信息，请参阅有关单个方言的文档
    [方言](../dialects/index.html) 。'
- en: '[PRE151]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 为此类添加一种新的特定于方言的关键字参数类型。
- en: 'E.g.:'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE152]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法是一种通过每个参数的方式向 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 字典添加额外参数的方法。该字典提供了各种模式级构造接受的参数名称列表，代表方言。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 新方言通常应将此字典一次性指定为方言类的数据成员。通常情况下，临时添加参数名称的用例是用于终端用户代码，该代码还使用了自定义编译方案，该方案使用了额外的参数。
- en: 'Parameters:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。方言必须是可定位的，否则会引发 [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。方言还必须包括一个现有的 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 集合，表示它参与关键字参数验证和默认系统，否则会引发
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")。如果方言不包括此集合，则可以代表该方言已经指定任何关键字参数。SQLAlchemy中打包的所有方言都包括此集合，但对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE153]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: Issue a `CREATE` statement for this [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    using the given [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or `Engine`` for connectivity.
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个 [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") 发出一个 `CREATE`
    语句，使用给定的 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    或 `Engine` 进行连接。
- en: See also
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all").'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all").'
- en: '[PRE154]'
  id: totrans-739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '*inherited from the* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *method of* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *方法的* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
- en: apply a conditional DDL rule to this schema item.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 对此模式项应用条件DDL规则。
- en: These rules work in a similar manner to the [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") callable, with the added
    feature that the criteria may be checked within the DDL compilation phase for
    a construct such as [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable").
    [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if "sqlalchemy.schema.HasConditionalDDL.ddl_if")
    currently applies towards the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct as well as all [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    constructs.
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则的工作方式类似于 [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 可调用对象，额外的功能是可以在DDL编译阶段检查条件，例如
    [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    这样的构造。[`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") 目前也适用于 [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造以及所有 [`Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") 构造。
- en: 'Parameters:'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`dialect` – string name of a dialect, or a tuple of string names to indicate
    multiple dialect types.'
  id: totrans-744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 方言的字符串名称，或者字符串名称的元组，表示多个方言类型。'
- en: '`callable_` – a callable that is constructed using the same form as that described
    in [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if").'
  id: totrans-745
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` – 一个可调用对象，其构造方式与 [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 中描述的形式相同。'
- en: '`state` – any arbitrary object that will be passed to the callable, if present.'
  id: totrans-746
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` – 如果存在，将传递给可调用对象的任意对象。'
- en: New in version 2.0.
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: See also
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#schema-ddl-ddl-if)
    - background and usage examples'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制约束和索引的DDL生成](ddl.html#schema-ddl-ddl-if) - 背景和使用示例'
- en: '[PRE155]'
  id: totrans-750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 作为特定于方言的选项指定的关键字参数集合，用于此构造。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数以原始的`<dialect>_<kwarg>`格式呈现。仅包括实际传递的参数；不像[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options")集合，该集合包含此方言已知的所有选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合也是可写的；接受形式为`<dialect>_<kwarg>`的键，其值将被组装到选项列表中。
- en: See also
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE156]'
  id: totrans-757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 作为特定于方言的选项指定的关键字参数集合。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，键为`<dialect_name>`和`<argument_name>`。例如，`postgresql_where`参数可以定位为：
- en: '[PRE157]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: New in version 0.9.2.
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本0.9.2开始。
- en: See also
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 扁平字典形式'
- en: '[PRE158]'
  id: totrans-765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Issue a `DROP` statement for this [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    using the given [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    for connectivity.
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的[`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")或[`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")进行此[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")的`DROP`语句。
- en: See also
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all "sqlalchemy.schema.MetaData.drop_all").'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all "sqlalchemy.schema.MetaData.drop_all")。'
- en: '[PRE159]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '*inherited from the* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 与该对象关联的信息字典，允许将用户定义的数据与此[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次访问时，字典将自动生成。它也可以在某些对象的构造函数中指定，例如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")和[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。
- en: '[PRE160]'
  id: totrans-773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") 的一个同义词。'
- en: '## Defining Foreign Keys'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: '## 定义外键'
- en: A *foreign key* in SQL is a table-level construct that constrains one or more
    columns in that table to only allow values that are present in a different set
    of columns, typically but not always located on a different table. We call the
    columns which are constrained the *foreign key* columns and the columns which
    they are constrained towards the *referenced* columns. The referenced columns
    almost always define the primary key for their owning table, though there are
    exceptions to this. The foreign key is the “joint” that connects together pairs
    of rows which have a relationship with each other, and SQLAlchemy assigns very
    deep importance to this concept in virtually every area of its operation.
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 中，*外键*是一个表级构造，它限制该表中的一个或多个列只允许存在于另一组列中的值，通常但不总是位于不同的表中。我们将受到限制的列称为*外键*列，它们被约束到的列称为*引用*列。引用列几乎总是定义其所属表的主键，尽管也有例外情况。外键是连接具有彼此关系的行对的“接头部分”，在几乎每个操作中，SQLAlchemy
    都将这个概念赋予了非常重要的意义。
- en: 'In SQLAlchemy as well as in DDL, foreign key constraints can be defined as
    additional attributes within the table clause, or for single-column foreign keys
    they may optionally be specified within the definition of a single column. The
    single column foreign key is more common, and at the column level is specified
    by constructing a [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    object as an argument to a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object:'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQLAlchemy 以及 DDL 中，外键约束可以作为表子句中的附加属性来定义，或者对于单列外键，它们可以选择地在单列的定义中指定。单列外键更常见，在列级别上通过将
    [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey") 对象构造为
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象的参数来指定：
- en: '[PRE161]'
  id: totrans-779
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: Above, we define a new table `user_preference` for which each row must contain
    a value in the `user_id` column that also exists in the `user` table’s `user_id`
    column.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们为 `user_preference` 定义了一个新表，其中每行必须包含一个存在于 `user` 表的 `user_id` 列中的值。
- en: 'The argument to [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    is most commonly a string of the form *<tablename>.<columnname>*, or for a table
    in a remote schema or “owner” of the form *<schemaname>.<tablename>.<columnname>*.
    It may also be an actual [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    object, which as we’ll see later is accessed from an existing [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object via its `c` collection:'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    的参数最常见的是形式为 *<tablename>.<columnname>* 的字符串，或者对于远程架构或“拥有者”的表，形式为 *<schemaname>.<tablename>.<columnname>*。它也可以是一个实际的
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象，稍后我们将看到，它通过其 `c` 集合从现有的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象中访问：'
- en: '[PRE162]'
  id: totrans-782
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: The advantage to using a string is that the in-python linkage between `user`
    and `user_preference` is resolved only when first needed, so that table objects
    can be easily spread across multiple modules and defined in any order.
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 使用字符串的优势在于，`user` 和 `user_preference` 之间的 python 链接只有在首次需要时才会解析，因此表对象可以轻松地分布在多个模块中，并且以任何顺序定义。
- en: 'Foreign keys may also be defined at the table level, using the [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object. This object can describe a single-
    or multi-column foreign key. A multi-column foreign key is known as a *composite*
    foreign key, and almost always references a table that has a composite primary
    key. Below we define a table `invoice` which has a composite primary key:'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 外键也可以在表级别定义，使用[`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")对象。此对象可以描述单列或多列外键。多列外键被称为*复合*外键，并且几乎总是引用具有复合主键的表。下面我们定义一个具有复合主键的`invoice`表：
- en: '[PRE163]'
  id: totrans-785
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'And then a table `invoice_item` with a composite foreign key referencing `invoice`:'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 然后一个具有引用`invoice`的复合外键的`invoice_item`表：
- en: '[PRE164]'
  id: totrans-787
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: It’s important to note that the [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") is the only way to define a composite
    foreign key. While we could also have placed individual [`ForeignKey`](#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") objects on both the `invoice_item.invoice_id`
    and `invoice_item.ref_num` columns, SQLAlchemy would not be aware that these two
    values should be paired together - it would be two individual foreign key constraints
    instead of a single composite foreign key referencing two columns.
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，[`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint")
    是定义复合外键的唯一方法。虽然我们也可以将单独的 [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    对象放置在`invoice_item.invoice_id`和`invoice_item.ref_num`列上，但SQLAlchemy不会意识到这两个值应该成对出现
    - 它将成为两个单独的外键约束，而不是引用两列的单个复合外键。
- en: '### Creating/Dropping Foreign Key Constraints via ALTER'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: '### 通过ALTER创建/删除外键约束'
- en: 'The behavior we’ve seen in tutorials and elsewhere involving foreign keys with
    DDL illustrates that the constraints are typically rendered “inline” within the
    CREATE TABLE statement, such as:'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在教程和其他地方看到的关于DDL中外键的行为表明，约束通常以“内联”的方式在CREATE TABLE语句中呈现，例如：
- en: '[PRE165]'
  id: totrans-791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: The `CONSTRAINT .. FOREIGN KEY` directive is used to create the constraint in
    an “inline” fashion within the CREATE TABLE definition. The [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") methods do this by default, using a topological
    sort of all the [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects involved such that tables are created and dropped in order of their foreign
    key dependency (this sort is also available via the [`MetaData.sorted_tables`](metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") accessor).
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: '`CONSTRAINT .. FOREIGN KEY`指令用于在CREATE TABLE定义内“内联”创建约束。[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 和 [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") 方法默认使用拓扑排序对所有涉及的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象进行排序，以便按外键依赖关系的顺序创建和删除表（此排序也可通过 [`MetaData.sorted_tables`](metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") 访问器获得）。'
- en: 'This approach can’t work when two or more foreign key constraints are involved
    in a “dependency cycle”, where a set of tables are mutually dependent on each
    other, assuming the backend enforces foreign keys (always the case except on SQLite,
    MySQL/MyISAM). The methods will therefore break out constraints in such a cycle
    into separate ALTER statements, on all backends other than SQLite which does not
    support most forms of ALTER. Given a schema like:'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及两个或更多外键约束的“依赖循环”时，此方法无法工作，在这种情况下，一组表彼此相互依赖，假设后端执行外键（SQLite除外，MySQL/MyISAM总是如此）。因此，该方法将在除SQLite之外的所有后端上将循环中的约束分解为单独的ALTER语句，因为SQLite不支持大多数形式的ALTER。给定一个类似的模式：
- en: '[PRE166]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'When we call upon [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") on a backend such as the PostgreSQL backend,
    the cycle between these two tables is resolved and the constraints are created
    separately:'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在后端（如PostgreSQL后端）调用[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")时，这两个表之间的循环被解决，约束被分别创建：
- en: '[PRE167]'
  id: totrans-796
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'In order to emit DROP for these tables, the same logic applies, however note
    here that in SQL, to emit DROP CONSTRAINT requires that the constraint has a name.
    In the case of the `''node''` table above, we haven’t named this constraint; the
    system will therefore attempt to emit DROP for only those constraints that are
    named:'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: '为了对这些表发出DROP，相同的逻辑适用，但是请注意，在SQL中，发出DROP CONSTRAINT需要约束具有名称。 在上述`''node''`表的情况下，我们没有命名此约束;
    因此，系统将仅尝试为具有名称的约束发出DROP:'
- en: '[PRE168]'
  id: totrans-798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: 'In the case where the cycle cannot be resolved, such as if we hadn’t applied
    a name to either constraint here, we will receive the following error:'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 在无法解析循环的情况下，例如，如果我们没有在这里为任一约束指定名称，我们将收到以下错误：
- en: '[PRE169]'
  id: totrans-800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: This error only applies to the DROP case as we can emit “ADD CONSTRAINT” in
    the CREATE case without a name; the database typically assigns one automatically.
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 此错误仅适用于DROP情况，因为在CREATE情况下我们可以不带名称发出“ADD CONSTRAINT”; 数据库通常会自动分配一个名称。
- en: 'The [`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") and [`ForeignKey.use_alter`](#sqlalchemy.schema.ForeignKey.params.use_alter
    "sqlalchemy.schema.ForeignKey") keyword arguments can be used to manually resolve
    dependency cycles. We can add this flag only to the `''element''` table as follows:'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 当手动解析依赖关系循环时，可以使用[`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") 和 [`ForeignKey.use_alter`](#sqlalchemy.schema.ForeignKey.params.use_alter
    "sqlalchemy.schema.ForeignKey") 关键字参数。 我们可以仅将此标志添加到`'element'`表中，如下所示：
- en: '[PRE170]'
  id: totrans-803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'in our CREATE DDL we will see the ALTER statement only for this constraint,
    and not the other one:'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: '在我们的CREATE DDL中，我们将只看到这个约束的ALTER语句，而不是其他约束:'
- en: '[PRE171]'
  id: totrans-805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") and [`ForeignKey.use_alter`](#sqlalchemy.schema.ForeignKey.params.use_alter
    "sqlalchemy.schema.ForeignKey"), when used in conjunction with a drop operation,
    will require that the constraint is named, else an error like the following is
    generated:'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 当与删除操作一起使用时，[`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") 和 [`ForeignKey.use_alter`](#sqlalchemy.schema.ForeignKey.params.use_alter
    "sqlalchemy.schema.ForeignKey") 关键字参数将要求约束具有名称，否则将生成以下错误：
- en: '[PRE172]'
  id: totrans-807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: See also
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Configuring Constraint Naming Conventions](#constraint-naming-conventions)'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: '[配置约束命名约定](#constraint-naming-conventions)'
- en: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")  ### ON UPDATE and ON DELETE'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")  ### ON UPDATE and ON DELETE'
- en: 'Most databases support *cascading* of foreign key values, that is the when
    a parent row is updated the new value is placed in child rows, or when the parent
    row is deleted all corresponding child rows are set to null or deleted. In data
    definition language these are specified using phrases like “ON UPDATE CASCADE”,
    “ON DELETE CASCADE”, and “ON DELETE SET NULL”, corresponding to foreign key constraints.
    The phrase after “ON UPDATE” or “ON DELETE” may also allow other phrases that
    are specific to the database in use. The [`ForeignKey`](#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects support the generation of this
    clause via the `onupdate` and `ondelete` keyword arguments. The value is any string
    which will be output after the appropriate “ON UPDATE” or “ON DELETE” phrase:'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数数据库支持外键值的级联，即当父行更新时，新值将放置在子行中，或者当父行删除时，所有相应的子行都将设置为null或删除。 在数据定义语言中，这些是使用诸如“ON
    UPDATE CASCADE”，“ON DELETE CASCADE”和“ON DELETE SET NULL”之类的短语来指定的，这些短语对应于外键约束。
    “ON UPDATE”或“ON DELETE”后面的短语还可以允许其他与正在使用的数据库特定的短语相对应的短语。 [`ForeignKey`](#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 和 [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象通过 `onupdate` 和 `ondelete` 关键字参数支持通过生成此子句。
    值是任何字符串，将在适当的“ON UPDATE”或“ON DELETE”短语之后输出：
- en: '[PRE173]'
  id: totrans-812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Note that these clauses require `InnoDB` tables when used with MySQL. They may
    also not be supported on other databases.
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些子句在与MySQL一起使用时需要`InnoDB`表。 它们在其他数据库上也可能不受支持。
- en: See also
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: 'For background on integration of `ON DELETE CASCADE` with ORM [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs, see the following sections:'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 关于与ORM [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 构造的 `ON DELETE CASCADE` 集成的背景，请参见以下各节：
- en: '[Using foreign key ON DELETE cascade with ORM relationships](../orm/cascades.html#passive-deletes)'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 ORM 关系中的外键 ON DELETE cascade](../orm/cascades.html#passive-deletes)'
- en: '[Using foreign key ON DELETE with many-to-many relationships](../orm/cascades.html#passive-deletes-many-to-many)  ###
    Creating/Dropping Foreign Key Constraints via ALTER'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: '[在多对多关系中使用外键 ON DELETE](../orm/cascades.html#passive-deletes-many-to-many)  ###
    通过 ALTER 创建/删除外键约束'
- en: 'The behavior we’ve seen in tutorials and elsewhere involving foreign keys with
    DDL illustrates that the constraints are typically rendered “inline” within the
    CREATE TABLE statement, such as:'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在教程和其他地方看到的涉及 DDL 的外键的行为表明，约束通常在 CREATE TABLE 语句中“内联”呈现，例如：
- en: '[PRE174]'
  id: totrans-819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: The `CONSTRAINT .. FOREIGN KEY` directive is used to create the constraint in
    an “inline” fashion within the CREATE TABLE definition. The [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") methods do this by default, using a topological
    sort of all the [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects involved such that tables are created and dropped in order of their foreign
    key dependency (this sort is also available via the [`MetaData.sorted_tables`](metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") accessor).
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: '`CONSTRAINT .. FOREIGN KEY` 指令用于以“内联”方式在 CREATE TABLE 定义中创建约束。 [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 和 [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") 方法默认使用所有涉及的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 对象的拓扑排序，这样表就按照它们的外键依赖顺序创建和删除（此排序也可以通过 [`MetaData.sorted_tables`](metadata.html#sqlalchemy.schema.MetaData.sorted_tables
    "sqlalchemy.schema.MetaData.sorted_tables") 访问器获得）。'
- en: 'This approach can’t work when two or more foreign key constraints are involved
    in a “dependency cycle”, where a set of tables are mutually dependent on each
    other, assuming the backend enforces foreign keys (always the case except on SQLite,
    MySQL/MyISAM). The methods will therefore break out constraints in such a cycle
    into separate ALTER statements, on all backends other than SQLite which does not
    support most forms of ALTER. Given a schema like:'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及两个或更多个外键约束参与“依赖循环”时，此方法无法工作，在此循环中一组表相互依赖，假设后端强制执行外键（除 SQLite、MySQL/MyISAM
    之外的情况始终如此）。因此，方法将在除不支持大多数 ALTER 形式的 SQLite 外的所有后端上将此类循环中的约束拆分为单独的 ALTER 语句。给定这样的模式：
- en: '[PRE175]'
  id: totrans-822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'When we call upon [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") on a backend such as the PostgreSQL backend,
    the cycle between these two tables is resolved and the constraints are created
    separately:'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在诸如 PostgreSQL 后端之类的后端上调用 [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 时，这两个表之间的循环被解决，并且约束被单独创建：
- en: '[PRE176]'
  id: totrans-824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'In order to emit DROP for these tables, the same logic applies, however note
    here that in SQL, to emit DROP CONSTRAINT requires that the constraint has a name.
    In the case of the `''node''` table above, we haven’t named this constraint; the
    system will therefore attempt to emit DROP for only those constraints that are
    named:'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 为了发出这些表的 DROP 命令，相同的逻辑适用，但是请注意，SQL 中，要发出 DROP CONSTRAINT 需要约束具有名称。在上面的 `'node'`
    表的情况下，我们没有为此约束命名；因此系统将尝试仅发出命名的约束的 DROP：
- en: '[PRE177]'
  id: totrans-826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'In the case where the cycle cannot be resolved, such as if we hadn’t applied
    a name to either constraint here, we will receive the following error:'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 如果无法解决循环，例如我们在这里未给任何约束应用名称的情况，我们将收到以下错误：
- en: '[PRE178]'
  id: totrans-828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: This error only applies to the DROP case as we can emit “ADD CONSTRAINT” in
    the CREATE case without a name; the database typically assigns one automatically.
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 此错误仅适用于 DROP 案例，因为我们可以在 CREATE 案例中发出“ADD CONSTRAINT”而无需名称；数据库通常会自动分配一个名称。
- en: 'The [`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") and [`ForeignKey.use_alter`](#sqlalchemy.schema.ForeignKey.params.use_alter
    "sqlalchemy.schema.ForeignKey") keyword arguments can be used to manually resolve
    dependency cycles. We can add this flag only to the `''element''` table as follows:'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") 和 [`ForeignKey.use_alter`](#sqlalchemy.schema.ForeignKey.params.use_alter
    "sqlalchemy.schema.ForeignKey") 关键字参数可用于手动解决依赖循环。我们可以将此标志仅添加到 `''element''` 表中，如下所示：'
- en: '[PRE179]'
  id: totrans-831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: 'in our CREATE DDL we will see the ALTER statement only for this constraint,
    and not the other one:'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 CREATE DDL 中，我们将只看到该约束的 ALTER 语句，而不是其他的：
- en: '[PRE180]'
  id: totrans-833
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") and [`ForeignKey.use_alter`](#sqlalchemy.schema.ForeignKey.params.use_alter
    "sqlalchemy.schema.ForeignKey"), when used in conjunction with a drop operation,
    will require that the constraint is named, else an error like the following is
    generated:'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 当与删除操作一起使用时，[`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") 和 [`ForeignKey.use_alter`](#sqlalchemy.schema.ForeignKey.params.use_alter
    "sqlalchemy.schema.ForeignKey") 需要命名约束，否则会生成以下错误：
- en: '[PRE181]'
  id: totrans-835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: See also
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Configuring Constraint Naming Conventions](#constraint-naming-conventions)'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: '[配置约束命名约定](#constraint-naming-conventions)'
- en: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sort_tables_and_constraints()`](ddl.html#sqlalchemy.schema.sort_tables_and_constraints
    "sqlalchemy.schema.sort_tables_and_constraints")'
- en: '### ON UPDATE and ON DELETE'
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: '### ON UPDATE 和 ON DELETE'
- en: 'Most databases support *cascading* of foreign key values, that is the when
    a parent row is updated the new value is placed in child rows, or when the parent
    row is deleted all corresponding child rows are set to null or deleted. In data
    definition language these are specified using phrases like “ON UPDATE CASCADE”,
    “ON DELETE CASCADE”, and “ON DELETE SET NULL”, corresponding to foreign key constraints.
    The phrase after “ON UPDATE” or “ON DELETE” may also allow other phrases that
    are specific to the database in use. The [`ForeignKey`](#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") and [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") objects support the generation of this
    clause via the `onupdate` and `ondelete` keyword arguments. The value is any string
    which will be output after the appropriate “ON UPDATE” or “ON DELETE” phrase:'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数数据库支持外键值的*级联*，也就是当父行更新时，新值将放置在子行中，或者当父行删除时，所有相应的子行都设置为 null 或删除。在数据定义语言中，这些是使用诸如“ON
    UPDATE CASCADE”、“ON DELETE CASCADE”和“ON DELETE SET NULL”之类的短语指定的，对应于外键约束。在“ON
    UPDATE”或“ON DELETE”之后的短语可能还允许其他特定于正在使用的数据库的短语。 [`ForeignKey`](#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") 和 [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象支持通过 `onupdate` 和 `ondelete` 关键字参数生成此子句。该值是任何字符串，将在适当的“ON
    UPDATE”或“ON DELETE”短语之后输出：
- en: '[PRE182]'
  id: totrans-841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: Note that these clauses require `InnoDB` tables when used with MySQL. They may
    also not be supported on other databases.
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当与 MySQL 一起使用时，这些子句需要 `InnoDB` 表。它们在其他数据库上也可能不受支持。
- en: See also
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: 'For background on integration of `ON DELETE CASCADE` with ORM [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") constructs, see the following sections:'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 关于将 `ON DELETE CASCADE` 与 ORM [`relationship()`](../orm/relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 构造集成的背景信息，请参见以下部分：
- en: '[Using foreign key ON DELETE cascade with ORM relationships](../orm/cascades.html#passive-deletes)'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 ORM 关联的外键 ON DELETE cascade](../orm/cascades.html#passive-deletes)'
- en: '[Using foreign key ON DELETE with many-to-many relationships](../orm/cascades.html#passive-deletes-many-to-many)'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: '[在多对多关系中使用外键 ON DELETE](../orm/cascades.html#passive-deletes-many-to-many)'
- en: '## UNIQUE Constraint'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: '## 唯一约束'
- en: Unique constraints can be created anonymously on a single column using the `unique`
    keyword on [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column").
    Explicitly named unique constraints and/or those with multiple columns are created
    via the [`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint "sqlalchemy.schema.UniqueConstraint")
    table-level construct.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    上的 `unique` 关键字匿名地在单个列上创建唯一约束。通过 [`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 表级构造显式命名的唯一约束和/或具有多列的约束。
- en: '[PRE183]'
  id: totrans-849
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: CHECK Constraint
  id: totrans-850
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CHECK 约束
- en: Check constraints can be named or unnamed and can be created at the Column or
    Table level, using the [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") construct. The text of the check constraint
    is passed directly through to the database, so there is limited “database independent”
    behavior. Column level check constraints generally should only refer to the column
    to which they are placed, while table level constraints can refer to any columns
    in the table.
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 检查约束可以具有命名或未命名，并且可以在列级别或表级别上创建，使用 [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") 构造。检查约束的文本直接传递到数据库，因此具有有限的“数据库独立”行为。列级别的检查约束通常只应引用它们所放置的列，而表级别的约束可以引用表中的任何列。
- en: Note that some databases do not actively support check constraints such as older
    versions of MySQL (prior to 8.0.16).
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一些数据库不支持主动支持检查约束，例如较旧版本的 MySQL（在 8.0.16 之前）。
- en: '[PRE184]'
  id: totrans-853
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: PRIMARY KEY Constraint
  id: totrans-854
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主键约束
- en: 'The primary key constraint of any [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object is implicitly present, based on the [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects that are marked with the [`Column.primary_key`](metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") flag. The [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") object provides explicit access to this
    constraint, which includes the option of being configured directly:'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 任何 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象的主键约束都是隐式存在的，基于标记有 [`Column.primary_key`](metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") 标志的 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象。[`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") 对象提供对此约束的显式访问，包括直接配置的选项：
- en: '[PRE185]'
  id: totrans-856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: See also
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint "sqlalchemy.schema.PrimaryKeyConstraint")
    - detailed API documentation.'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint "sqlalchemy.schema.PrimaryKeyConstraint")
    - 详细的 API 文档。'
- en: Setting up Constraints when using the Declarative ORM Extension
  id: totrans-859
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Declarative ORM 扩展时设置约束
- en: The [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    is the SQLAlchemy Core construct that allows one to define table metadata, which
    among other things can be used by the SQLAlchemy ORM as a target to map a class.
    The [Declarative](../orm/extensions/declarative/index.html) extension allows the
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object
    to be created automatically, given the contents of the table primarily as a mapping
    of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects.
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    是 SQLAlchemy 核心的构造，允许定义表元数据，这些元数据可以被 SQLAlchemy ORM 用作映射类的目标之一。[Declarative](../orm/extensions/declarative/index.html)
    扩展允许自动创建 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象，主要是将表的内容作为 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象的映射。'
- en: To apply table-level constraint objects such as [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") to a table defined using Declarative,
    use the `__table_args__` attribute, described at [Table Configuration](../orm/extensions/declarative/table_config.html#declarative-table-args).
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 要将诸如 [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint")
    等表级约束对象应用于使用 Declarative 定义的表，请使用 `__table_args__` 属性，详见 [表配置](../orm/extensions/declarative/table_config.html#declarative-table-args)。
- en: '## Configuring Constraint Naming Conventions'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: '## 配置约束命名约定'
- en: Relational databases typically assign explicit names to all constraints and
    indexes. In the common case that a table is created using `CREATE TABLE` where
    constraints such as CHECK, UNIQUE, and PRIMARY KEY constraints are produced inline
    with the table definition, the database usually has a system in place in which
    names are automatically assigned to these constraints, if a name is not otherwise
    specified. When an existing database table is altered in a database using a command
    such as `ALTER TABLE`, this command typically needs to specify explicit names
    for new constraints as well as be able to specify the name of an existing constraint
    that is to be dropped or modified.
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 关系数据库通常为所有约束和索引分配显式名称。在创建表时使用`CREATE TABLE`的常见情况下，约束（如CHECK、UNIQUE和PRIMARY KEY约束）会与表定义一起内联生成，如果未另有规定，则数据库通常会自动分配名称给这些约束。在使用诸如`ALTER
    TABLE`之类的命令在数据库中更改现有数据库表时，此命令通常需要为新约束指定显式名称，以及能够指定要删除或修改的现有约束的名称。
- en: Constraints can be named explicitly using the [`Constraint.name`](#sqlalchemy.schema.Constraint.params.name
    "sqlalchemy.schema.Constraint") parameter, and for indexes the [`Index.name`](#sqlalchemy.schema.Index.params.name
    "sqlalchemy.schema.Index") parameter. However, in the case of constraints this
    parameter is optional. There are also the use cases of using the [`Column.unique`](metadata.html#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column") and [`Column.index`](metadata.html#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") parameters which create [`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") and [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects without an explicit name being specified.
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[`Constraint.name`](#sqlalchemy.schema.Constraint.params.name "sqlalchemy.schema.Constraint")参数和索引的[`Index.name`](#sqlalchemy.schema.Index.params.name
    "sqlalchemy.schema.Index")参数明确地为约束命名。然而，在约束的情况下，此参数是可选的。还有使用[`Column.unique`](metadata.html#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column")和[`Column.index`](metadata.html#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column")参数的用例，这些参数会创建未指定显式名称的[`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")和[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")对象。
- en: The use case of alteration of existing tables and constraints can be handled
    by schema migration tools such as [Alembic](https://alembic.sqlalchemy.org/).
    However, neither Alembic nor SQLAlchemy currently create names for constraint
    objects where the name is otherwise unspecified, leading to the case where being
    able to alter existing constraints means that one must reverse-engineer the naming
    system used by the relational database to auto-assign names, or that care must
    be taken to ensure that all constraints are named.
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: 通过架构迁移工具，如[Alembic](https://alembic.sqlalchemy.org/)，可以处理现有表格和约束的更改用例。但是，目前既不是Alembic也不是SQLAlchemy创建约束对象的名称，除非另有规定，否则导致能够更改现有约束的情况，这意味着必须逆向工程关系数据库用于自动分配名称的命名系统，或者必须小心确保所有约束都有名称。
- en: In contrast to having to assign explicit names to all [`Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") and [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    objects, automated naming schemes can be constructed using events. This approach
    has the advantage that constraints will get a consistent naming scheme without
    the need for explicit name parameters throughout the code, and also that the convention
    takes place just as well for those constraints and indexes produced by the [`Column.unique`](metadata.html#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column") and [`Column.index`](metadata.html#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") parameters. As of SQLAlchemy 0.9.2 this event-based
    approach is included, and can be configured using the argument [`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData").
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 与不得不为所有[`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")和[`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")对象分配显式名称相比，可以使用事件构建自动命名方案。这种方法的优点是，约束将获得一致的命名方案，无需在代码中的所有位置都使用显式名称参数，而且约定也会对由[`Column.unique`](metadata.html#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column")和[`Column.index`](metadata.html#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column")参数生成的约束和索引同样适用。从SQLAlchemy 0.9.2开始，包含了这种基于事件的方法，可以使用参数[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData")进行配置。
- en: Configuring a Naming Convention for a MetaData Collection
  id: totrans-867
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为 MetaData 集合配置命名约定
- en: '[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") refers to a dictionary which accepts the [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") class or individual [`Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") classes as keys, and Python string templates as
    values. It also accepts a series of string-codes as alternative keys, `"fk"`,
    `"pk"`, `"ix"`, `"ck"`, `"uq"` for foreign key, primary key, index, check, and
    unique constraint, respectively. The string templates in this dictionary are used
    whenever a constraint or index is associated with this [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object that does not have an existing name given
    (including one exception case where an existing name can be further embellished).'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") 指的是一个字典，接受 [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    类或单独的 [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    类作为键，并接受 Python 字符串模板作为值。它还接受一系列字符串代码作为替代键，分别为外键、主键、索引、检查和唯一约束的 `"fk"`、`"pk"`、`"ix"`、`"ck"`、`"uq"`。在这个字典中的字符串模板在与此
    [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    对象关联的约束或索引没有给出现有名称时使用（包括一个例外情况，即可以进一步装饰现有名称的情况）。'
- en: 'An example naming convention that suits basic cases is as follows:'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于基本情况的一个示例命名约定如下：
- en: '[PRE186]'
  id: totrans-870
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'The above convention will establish names for all constraints within the target
    [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection. For example, we can observe the name produced when we create an unnamed
    [`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint "sqlalchemy.schema.UniqueConstraint"):'
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 上述约定将为目标 [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    集合中的所有约束建立名称。例如，当我们创建一个未命名的 [`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 时，我们可以观察到生成的名称：
- en: '[PRE187]'
  id: totrans-872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'This same feature takes effect even if we just use the [`Column.unique`](metadata.html#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column") flag:'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 即使只是使用 [`Column.unique`](metadata.html#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column") 标志，这个相同的特性也会生效：
- en: '[PRE188]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'A key advantage to the naming convention approach is that the names are established
    at Python construction time, rather than at DDL emit time. The effect this has
    when using Alembic’s `--autogenerate` feature is that the naming convention will
    be explicit when a new migration script is generated:'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
  zh: 命名约定方法的一个关键优势是名称在 Python 构造时建立，而不是在 DDL 发射时建立。使用 Alembic 的 `--autogenerate`
    功能时的影响是，当生成新的迁移脚本时，命名约定将是明确的：
- en: '[PRE189]'
  id: totrans-876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: The above `"uq_user_name"` string was copied from the [`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") object that `--autogenerate` located in
    our metadata.
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的 `"uq_user_name"` 字符串是从我们的元数据中 `--autogenerate` 定位到的 [`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") 对象中复制的。
- en: The tokens available include `%(table_name)s`, `%(referred_table_name)s`, `%(column_0_name)s`,
    `%(column_0_label)s`, `%(column_0_key)s`, `%(referred_column_0_name)s`, and `%(constraint_name)s`,
    as well as multiple-column versions of each including `%(column_0N_name)s`, `%(column_0_N_name)s`,
    `%(referred_column_0_N_name)s` which render all column names separated with or
    without an underscore. The documentation for [`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") has further detail on each of these conventions.
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的标记包括 `%(table_name)s`、`%(referred_table_name)s`、`%(column_0_name)s`、`%(column_0_label)s`、`%(column_0_key)s`、`%(referred_column_0_name)s`，以及每个的多列版本，包括
    `%(column_0N_name)s`、`%(column_0_N_name)s`、`%(referred_column_0_N_name)s`，它们以带有或不带有下划线的形式呈现所有列名称。关于
    [`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") 的文档对每个约定有进一步的详细信息。
- en: '### The Default Naming Convention'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: '### 默认命名规则'
- en: 'The default value for [`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") handles the long-standing SQLAlchemy behavior of
    assigning a name to a [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    object that is created using the [`Column.index`](metadata.html#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") parameter:'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData")的默认值处理了SQLAlchemy长期以来的行为，即为使用[`Column.index`](metadata.html#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column")参数创建的[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")对象分配名称：'
- en: '[PRE190]'
  id: totrans-881
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: Truncation of Long Names
  id: totrans-882
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 长名称的截断
- en: 'When a generated name, particularly those that use the multiple-column tokens,
    is too long for the identifier length limit of the target database (for example,
    PostgreSQL has a limit of 63 characters), the name will be deterministically truncated
    using a 4-character suffix based on the md5 hash of the long name. For example,
    the naming convention below will generate very long names given the column names
    in use:'
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个生成的名称，特别是那些使用多列令牌的名称，超出了目标数据库的标识符长度限制时（例如，PostgreSQL的限制为63个字符），名称将使用基于长名称的md5哈希的4字符后缀进行确定性截断。例如，以下命名约定将基于正在使用的列名称生成非常长的名称：
- en: '[PRE191]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: 'On the PostgreSQL dialect, names longer than 63 characters will be truncated
    as in the following example:'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 在PostgreSQL方言上，长度超过63个字符的名称将被截断，如下例所示：
- en: '[PRE192]'
  id: totrans-886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: The above suffix `a79e` is based on the md5 hash of the long name and will generate
    the same value every time to produce consistent names for a given schema.
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 上述后缀`a79e`是基于长名称的md5哈希值，并且每次都会生成相同的值，以便为给定模式生成一致的名称。
- en: Creating Custom Tokens for Naming Conventions
  id: totrans-888
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建用于命名约定的自定义令牌
- en: 'New tokens can also be added, by specifying an additional token and a callable
    within the naming_convention dictionary. For example, if we wanted to name our
    foreign key constraints using a GUID scheme, we could do that as follows:'
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以通过在naming_convention字典中指定一个额外的令牌和一个可调用对象来添加新的令牌。例如，如果我们想要使用GUID方案来命名我们的外键约束，我们可以这样做：
- en: '[PRE193]'
  id: totrans-890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: 'Above, when we create a new [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), we will get a name as follows:'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，当我们创建一个新的[`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")时，我们将获得如下名称：
- en: '[PRE194]'
  id: totrans-892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: See also
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") - for additional usage details as well as a listing
    of all available naming components.'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") - 用于额外的用法详情以及所有可用命名组件的列表。'
- en: '[The Importance of Naming Constraints](https://alembic.sqlalchemy.org/en/latest/naming.html)
    - in the Alembic documentation.'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: '[命名约束的重要性](https://alembic.sqlalchemy.org/en/latest/naming.html) - 在Alembic文档中。'
- en: 'New in version 1.3.0: added multi-column naming tokens such as `%(column_0_N_name)s`.
    Generated names that go beyond the character limit for the target database will
    be deterministically truncated.'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3.0中的新功能：添加了多列命名令牌，如`%(column_0_N_name)s`。生成的名称如果超出目标数据库的字符限制将被确定性截断。
- en: '### Naming CHECK Constraints'
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: '### 命名 CHECK 约束'
- en: 'The [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")
    object is configured against an arbitrary SQL expression, which can have any number
    of columns present, and additionally is often configured using a raw SQL string.
    Therefore a common convention to use with [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") is one where we expect the object to have
    a name already, and we then enhance it with other convention elements. A typical
    convention is `"ck_%(table_name)s_%(constraint_name)s"`:'
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CheckConstraint`](#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")对象配置为针对任意SQL表达式，该表达式可以有任意数量的列，并且通常使用原始SQL字符串进行配置。因此，我们通常使用的与[`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")配合使用的约定是，我们期望对象已经有一个名称，然后我们使用其他约定元素增强它。一个典型的约定是`"ck_%(table_name)s_%(constraint_name)s"`：'
- en: '[PRE195]'
  id: totrans-899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: 'The above table will produce the name `ck_foo_value_gt_5`:'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表将生成名称`ck_foo_value_gt_5`：
- en: '[PRE196]'
  id: totrans-901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[`CheckConstraint`](#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")
    also supports the `%(columns_0_name)s` token; we can make use of this by ensuring
    we use a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    or [`column()`](sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    element within the constraint’s expression, either by declaring the constraint
    separate from the table:'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CheckConstraint`](#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")
    还支持`%(columns_0_name)s`令牌；我们可以通过确保在约束的表达式中使用[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")或[`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")元素来使用此令牌，无论是通过将约束声明为表的一部分：'
- en: '[PRE197]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: 'or by using a [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") inline:'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: 或者通过使用[`column()`](sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")内联：
- en: '[PRE198]'
  id: totrans-905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: 'Both will produce the name `ck_foo_value`:'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都将生成名称`ck_foo_value`：
- en: '[PRE199]'
  id: totrans-907
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: 'The determination of the name of “column zero” is performed by scanning the
    given expression for column objects. If the expression has more than one column
    present, the scan does use a deterministic search, however the structure of the
    expression will determine which column is noted as “column zero”.  ### Configuring
    Naming for Boolean, Enum, and other schema types'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: '对“列零”的名称确定是通过扫描给定表达式以查找列对象进行的。如果表达式中存在多个列，则扫描会使用确定性搜索，但是表达式的结构将确定哪一列被指定为“列零”。  ###
    对布尔、枚举和其他模式类型进行命名配置'
- en: 'The [`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    class refers to type objects such as [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") and [`Enum`](type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") which generate a CHECK constraint accompanying the type.
    The name for the constraint here is most directly set up by sending the “name”
    parameter, e.g. [`Boolean.name`](type_basics.html#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean"):'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    类引用诸如 [`Boolean`](type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    和 [`Enum`](type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum") 之类的类型对象，这些对象生成伴随类型的
    CHECK 约束。此处约束的名称最直接通过发送“name”参数设置，例如 [`Boolean.name`](type_basics.html#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean")：'
- en: '[PRE200]'
  id: totrans-910
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: 'The naming convention feature may be combined with these types as well, normally
    by using a convention which includes `%(constraint_name)s` and then applying a
    name to the type:'
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 命名约定功能也可以与这些类型结合使用，通常是通过使用包含`%(constraint_name)s`的约定，然后将名称应用于类型：
- en: '[PRE201]'
  id: totrans-912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: 'The above table will produce the constraint name `ck_foo_flag_bool`:'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表将产生约束名称`ck_foo_flag_bool`：
- en: '[PRE202]'
  id: totrans-914
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: The [`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    classes use special internal symbols so that the naming convention is only determined
    at DDL compile time. On PostgreSQL, there’s a native BOOLEAN type, so the CHECK
    constraint of [`Boolean`](type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    is not needed; we are safe to set up a [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") type without a name, even though a naming convention
    is in place for check constraints. This convention will only be consulted for
    the CHECK constraint if we run against a database without a native BOOLEAN type
    like SQLite or MySQL.
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    类使用特殊的内部符号，以便命名约定仅在DDL编译时确定。在 PostgreSQL 上，有一个原生的 BOOLEAN 类型，因此不需要 [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") 的 CHECK 约束；我们可以安全地设置 [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") 类型而不需要名称，即使对于检查约束已经设置了命名约定。如果我们在没有原生 BOOLEAN 类型的数据库上运行，例如
    SQLite 或 MySQL，则仅会查阅此约定以获取 CHECK 约束。'
- en: 'The CHECK constraint may also make use of the `column_0_name` token, which
    works nicely with [`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") since these constraints have only one column:'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: CHECK 约束也可以使用`column_0_name`令牌，与[`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")非常匹配，因为这些约束只有一列：
- en: '[PRE203]'
  id: totrans-917
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: 'The above schema will produce:'
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 上述模式将产生：
- en: '[PRE204]'
  id: totrans-919
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: Using Naming Conventions with ORM Declarative Mixins
  id: totrans-920
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 ORM 声明性混合物时使用命名约定
- en: When using the naming convention feature with [ORM Declarative Mixins](../orm/declarative_mixins.html),
    individual constraint objects must exist for each actual table-mapped subclass.
    See the section [Creating Indexes and Constraints with Naming Conventions on Mixins](../orm/declarative_mixins.html#orm-mixins-named-constraints)
    for background and examples.
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用命名约定功能与[ORM 声明式 Mixins](../orm/declarative_mixins.html)时，每个实际表映射子类必须存在单独的约束对象。有关背景和示例，请参阅[使用命名约定在
    Mixins 上创建索引和约束的部分](../orm/declarative_mixins.html#orm-mixins-named-constraints)。
- en: Configuring a Naming Convention for a MetaData Collection
  id: totrans-922
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 MetaData 集合的命名约定
- en: '[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") refers to a dictionary which accepts the [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") class or individual [`Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") classes as keys, and Python string templates as
    values. It also accepts a series of string-codes as alternative keys, `"fk"`,
    `"pk"`, `"ix"`, `"ck"`, `"uq"` for foreign key, primary key, index, check, and
    unique constraint, respectively. The string templates in this dictionary are used
    whenever a constraint or index is associated with this [`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") object that does not have an existing name given
    (including one exception case where an existing name can be further embellished).'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData")指的是一个字典，接受[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")类或个别[`Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")类作为键，以及 Python 字符串模板作为值。它还接受一系列字符串代码作为替代键，分别为外键、主键、索引、检查和唯一约束的
    `"fk"`、`"pk"`、`"ix"`、`"ck"`、`"uq"`。这个字典中的字符串模板在与这个[`MetaData`](metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")对象相关联的约束或索引没有给出现有名称时使用（包括一个现有名称可以进一步修饰的例外情况）。'
- en: 'An example naming convention that suits basic cases is as follows:'
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 适用于基本情况的示例命名约定如下：
- en: '[PRE205]'
  id: totrans-925
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: 'The above convention will establish names for all constraints within the target
    [`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    collection. For example, we can observe the name produced when we create an unnamed
    [`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint "sqlalchemy.schema.UniqueConstraint"):'
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 上述约定将为目标[`MetaData`](metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")集合中的所有约束建立名称。例如，当我们创建一个未命名的[`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")时，我们可以观察到生成的名称。
- en: '[PRE206]'
  id: totrans-927
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: 'This same feature takes effect even if we just use the [`Column.unique`](metadata.html#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column") flag:'
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们只是使用[`Column.unique`](metadata.html#sqlalchemy.schema.Column.params.unique
    "sqlalchemy.schema.Column")标志，同样的特性也会生效：
- en: '[PRE207]'
  id: totrans-929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: 'A key advantage to the naming convention approach is that the names are established
    at Python construction time, rather than at DDL emit time. The effect this has
    when using Alembic’s `--autogenerate` feature is that the naming convention will
    be explicit when a new migration script is generated:'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 命名约定方法的一个关键优势是名称在 Python 构造时建立，而不是在 DDL 发射时。当使用 Alembic 的 `--autogenerate` 特性时，这个效果是命名约定在生成新的迁移脚本时将是明确的：
- en: '[PRE208]'
  id: totrans-931
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: The above `"uq_user_name"` string was copied from the [`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") object that `--autogenerate` located in
    our metadata.
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: 上述`"uq_user_name"`字符串是从我们的元数据中`--autogenerate`定位到的[`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")对象中复制的。
- en: The tokens available include `%(table_name)s`, `%(referred_table_name)s`, `%(column_0_name)s`,
    `%(column_0_label)s`, `%(column_0_key)s`, `%(referred_column_0_name)s`, and `%(constraint_name)s`,
    as well as multiple-column versions of each including `%(column_0N_name)s`, `%(column_0_N_name)s`,
    `%(referred_column_0_N_name)s` which render all column names separated with or
    without an underscore. The documentation for [`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") has further detail on each of these conventions.
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的标记包括`%(table_name)s`、`%(referred_table_name)s`、`%(column_0_name)s`、`%(column_0_label)s`、`%(column_0_key)s`、`%(referred_column_0_name)s`，以及每个的多列版本，包括`%(column_0N_name)s`、`%(column_0_N_name)s`、`%(referred_column_0_N_name)s`，它们用下划线分隔或不分隔所有列名。有关[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData")的文档还详细介绍了每个约定。
- en: '### The Default Naming Convention'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: '### 默认命名约定'
- en: 'The default value for [`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") handles the long-standing SQLAlchemy behavior of
    assigning a name to a [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    object that is created using the [`Column.index`](metadata.html#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column") parameter:'
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData")的默认值处理了SQLAlchemy的长期行为，即为使用[`Column.index`](metadata.html#sqlalchemy.schema.Column.params.index
    "sqlalchemy.schema.Column")参数创建的[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")对象分配名称：'
- en: '[PRE209]'
  id: totrans-936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: Truncation of Long Names
  id: totrans-937
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 截断长名称
- en: 'When a generated name, particularly those that use the multiple-column tokens,
    is too long for the identifier length limit of the target database (for example,
    PostgreSQL has a limit of 63 characters), the name will be deterministically truncated
    using a 4-character suffix based on the md5 hash of the long name. For example,
    the naming convention below will generate very long names given the column names
    in use:'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 当生成的名称特别是那些使用多列令牌的名称，超出目标数据库的标识符长度限制时（例如，PostgreSQL的限制为63个字符），名称将使用基于长名称的md5哈希的4字符后缀进行确定性截断。例如，给定以下命名约定，根据使用的列名称，将生成非常长的名称：
- en: '[PRE210]'
  id: totrans-939
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: 'On the PostgreSQL dialect, names longer than 63 characters will be truncated
    as in the following example:'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 在PostgreSQL方言中，名称长度超过63个字符的将被截断，如以下示例所示：
- en: '[PRE211]'
  id: totrans-941
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: The above suffix `a79e` is based on the md5 hash of the long name and will generate
    the same value every time to produce consistent names for a given schema.
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 上述后缀`a79e`是基于长名称的md5哈希值，并且每次生成相同的值，以便为给定模式生成一致的名称。
- en: Creating Custom Tokens for Naming Conventions
  id: totrans-943
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建自定义令牌以用于命名约定
- en: 'New tokens can also be added, by specifying an additional token and a callable
    within the naming_convention dictionary. For example, if we wanted to name our
    foreign key constraints using a GUID scheme, we could do that as follows:'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过在naming_convention字典中指定额外的令牌和可调用对象来添加新令牌。例如，如果我们想要使用GUID方案为外键约束命名，我们可以这样做：
- en: '[PRE212]'
  id: totrans-945
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: 'Above, when we create a new [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"), we will get a name as follows:'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，当我们创建一个新的[`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")时，我们将得到以下名称：
- en: '[PRE213]'
  id: totrans-947
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: See also
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") - for additional usage details as well as a listing
    of all available naming components.'
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.naming_convention`](metadata.html#sqlalchemy.schema.MetaData.params.naming_convention
    "sqlalchemy.schema.MetaData") - 有关更多使用详细信息以及所有可用命名组件的列表。'
- en: '[The Importance of Naming Constraints](https://alembic.sqlalchemy.org/en/latest/naming.html)
    - in the Alembic documentation.'
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: '[命名约束的重要性](https://alembic.sqlalchemy.org/en/latest/naming.html) - Alembic文档中的内容。'
- en: 'New in version 1.3.0: added multi-column naming tokens such as `%(column_0_N_name)s`.
    Generated names that go beyond the character limit for the target database will
    be deterministically truncated.'
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.3.0开始：添加了多列命名令牌，例如`%(column_0_N_name)s`。生成的名称如果超过目标数据库的字符限制，将被确定性地截断。
- en: '### Naming CHECK Constraints'
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: '### 命名CHECK约束'
- en: 'The [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")
    object is configured against an arbitrary SQL expression, which can have any number
    of columns present, and additionally is often configured using a raw SQL string.
    Therefore a common convention to use with [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") is one where we expect the object to have
    a name already, and we then enhance it with other convention elements. A typical
    convention is `"ck_%(table_name)s_%(constraint_name)s"`:'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CheckConstraint`](#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")对象针对任意SQL表达式进行配置，该表达式可以有任意数量的列，而且通常使用原始SQL字符串进行配置。因此，与[`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")一起使用的一种常见约定是，我们期望对象已经具有名称，然后我们使用其他约定元素来增强它。一个典型的约定是`"ck_%(table_name)s_%(constraint_name)s"`：'
- en: '[PRE214]'
  id: totrans-954
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: 'The above table will produce the name `ck_foo_value_gt_5`:'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表将生成名称`ck_foo_value_gt_5`：
- en: '[PRE215]'
  id: totrans-956
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[`CheckConstraint`](#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")
    also supports the `%(columns_0_name)s` token; we can make use of this by ensuring
    we use a [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    or [`column()`](sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")
    element within the constraint’s expression, either by declaring the constraint
    separate from the table:'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: '[`CheckConstraint`](#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")还支持`%(columns_0_name)s`令牌；我们可以通过确保在约束表达式中使用[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")或[`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column")元素来利用这一点，无论是通过单独声明约束还是通过在表内：'
- en: '[PRE216]'
  id: totrans-958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: 'or by using a [`column()`](sqlelement.html#sqlalchemy.sql.expression.column
    "sqlalchemy.sql.expression.column") inline:'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 或通过使用[`column()`](sqlelement.html#sqlalchemy.sql.expression.column "sqlalchemy.sql.expression.column")内联：
- en: '[PRE217]'
  id: totrans-960
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: 'Both will produce the name `ck_foo_value`:'
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都会生成名称为`ck_foo_value`的内容：
- en: '[PRE218]'
  id: totrans-962
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: The determination of the name of “column zero” is performed by scanning the
    given expression for column objects. If the expression has more than one column
    present, the scan does use a deterministic search, however the structure of the
    expression will determine which column is noted as “column zero”.
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: “列零”的名称确定是通过扫描给定表达式中的列对象执行的。如果表达式中存在多个列，则扫描将使用确定性搜索，但表达式的结构将确定哪一列被标记为“列零”。
- en: '### Configuring Naming for Boolean, Enum, and other schema types'
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: '### 针对布尔型、枚举型和其他模式类型进行命名配置'
- en: 'The [`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    class refers to type objects such as [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") and [`Enum`](type_basics.html#sqlalchemy.types.Enum
    "sqlalchemy.types.Enum") which generate a CHECK constraint accompanying the type.
    The name for the constraint here is most directly set up by sending the “name”
    parameter, e.g. [`Boolean.name`](type_basics.html#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean"):'
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")类引用诸如[`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")和[`Enum`](type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum")之类的类型对象，这些对象生成伴随类型的CHECK约束。此处约束的名称最直接通过发送“name”参数设置，例如[`Boolean.name`](type_basics.html#sqlalchemy.types.Boolean.params.name
    "sqlalchemy.types.Boolean")：'
- en: '[PRE219]'
  id: totrans-966
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: 'The naming convention feature may be combined with these types as well, normally
    by using a convention which includes `%(constraint_name)s` and then applying a
    name to the type:'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
  zh: 命名约定功能也可以与这些类型结合使用，通常是使用包含`%(constraint_name)s`的约定，然后将名称应用于类型：
- en: '[PRE220]'
  id: totrans-968
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: 'The above table will produce the constraint name `ck_foo_flag_bool`:'
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: 上述表将产生约束名为`ck_foo_flag_bool`：
- en: '[PRE221]'
  id: totrans-970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: The [`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")
    classes use special internal symbols so that the naming convention is only determined
    at DDL compile time. On PostgreSQL, there’s a native BOOLEAN type, so the CHECK
    constraint of [`Boolean`](type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    is not needed; we are safe to set up a [`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean") type without a name, even though a naming convention
    is in place for check constraints. This convention will only be consulted for
    the CHECK constraint if we run against a database without a native BOOLEAN type
    like SQLite or MySQL.
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType "sqlalchemy.types.SchemaType")类使用特殊的内部符号，以便命名约定仅在DDL编译时确定。在PostgreSQL上，有一种原生的BOOLEAN类型，因此不需要[`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")的CHECK约束；即使有检查约定，我们也可以安全地设置一个不带名称的[`Boolean`](type_basics.html#sqlalchemy.types.Boolean
    "sqlalchemy.types.Boolean")类型。只有在没有原生BOOLEAN类型的数据库（如SQLite或MySQL）上运行时，才会咨询此约定以进行CHECK约束。'
- en: 'The CHECK constraint may also make use of the `column_0_name` token, which
    works nicely with [`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType") since these constraints have only one column:'
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: CHECK约束也可以使用`column_0_name`令牌，这与[`SchemaType`](type_basics.html#sqlalchemy.types.SchemaType
    "sqlalchemy.types.SchemaType")非常匹配，因为这些约束只有一个列：
- en: '[PRE222]'
  id: totrans-973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: 'The above schema will produce:'
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: 上述模式将产生：
- en: '[PRE223]'
  id: totrans-975
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: Using Naming Conventions with ORM Declarative Mixins
  id: totrans-976
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用ORM声明性Mixin配置命名约定
- en: When using the naming convention feature with [ORM Declarative Mixins](../orm/declarative_mixins.html),
    individual constraint objects must exist for each actual table-mapped subclass.
    See the section [Creating Indexes and Constraints with Naming Conventions on Mixins](../orm/declarative_mixins.html#orm-mixins-named-constraints)
    for background and examples.
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用命名约定功能与[ORM声明性混合](../orm/declarative_mixins.html)时，每个实际表映射的子类必须存在单独的约束对象。有关背景和示例，请参见[使用命名约定在混合上创建索引和约束](../orm/declarative_mixins.html#orm-mixins-named-constraints)部分。
- en: Constraints API
  id: totrans-978
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 约束API
- en: '| Object Name | Description |'
  id: totrans-979
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-980
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [CheckConstraint](#sqlalchemy.schema.CheckConstraint) | A table- or column-level
    CHECK constraint. |'
  id: totrans-981
  prefs: []
  type: TYPE_TB
  zh: '| [检查约束](#sqlalchemy.schema.CheckConstraint) | 表级或列级检查约束。 |'
- en: '| [ColumnCollectionConstraint](#sqlalchemy.schema.ColumnCollectionConstraint)
    | A constraint that proxies a ColumnCollection. |'
  id: totrans-982
  prefs: []
  type: TYPE_TB
  zh: '| [列集合约束](#sqlalchemy.schema.ColumnCollectionConstraint) | 代理列集合的约束。 |'
- en: '| [ColumnCollectionMixin](#sqlalchemy.schema.ColumnCollectionMixin) | A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects. |'
  id: totrans-983
  prefs: []
  type: TYPE_TB
  zh: '| [ColumnCollectionMixin](#sqlalchemy.schema.ColumnCollectionMixin) | 一个[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")对象的[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")集合。 |'
- en: '| [Constraint](#sqlalchemy.schema.Constraint) | A table-level SQL constraint.
    |'
  id: totrans-984
  prefs: []
  type: TYPE_TB
  zh: '| [约束](#sqlalchemy.schema.Constraint) | 表级SQL约束。 |'
- en: '| [conv](#sqlalchemy.schema.conv) | Mark a string indicating that a name has
    already been converted by a naming convention. |'
  id: totrans-985
  prefs: []
  type: TYPE_TB
  zh: '| [conv](#sqlalchemy.schema.conv) | 标记一个字符串，指示名称已经通过命名约定转换。 |'
- en: '| [ForeignKey](#sqlalchemy.schema.ForeignKey) | Defines a dependency between
    two columns. |'
  id: totrans-986
  prefs: []
  type: TYPE_TB
  zh: '| [外键](#sqlalchemy.schema.ForeignKey) | 定义两列之间的依赖关系。 |'
- en: '| [ForeignKeyConstraint](#sqlalchemy.schema.ForeignKeyConstraint) | A table-level
    FOREIGN KEY constraint. |'
  id: totrans-987
  prefs: []
  type: TYPE_TB
  zh: '| [外键约束](#sqlalchemy.schema.ForeignKeyConstraint) | 表级外键约束。 |'
- en: '| [HasConditionalDDL](#sqlalchemy.schema.HasConditionalDDL) | define a class
    that includes the [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") method, allowing for conditional
    rendering of DDL. |'
  id: totrans-988
  prefs: []
  type: TYPE_TB
  zh: '| [具有条件DDL](#sqlalchemy.schema.HasConditionalDDL) | 定义一个包括[`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if")方法的类，允许对DDL进行条件渲染。 |'
- en: '| [PrimaryKeyConstraint](#sqlalchemy.schema.PrimaryKeyConstraint) | A table-level
    PRIMARY KEY constraint. |'
  id: totrans-989
  prefs: []
  type: TYPE_TB
  zh: '| [主键约束](#sqlalchemy.schema.PrimaryKeyConstraint) | 表级主键约束。 |'
- en: '| [UniqueConstraint](#sqlalchemy.schema.UniqueConstraint) | A table-level UNIQUE
    constraint. |'
  id: totrans-990
  prefs: []
  type: TYPE_TB
  zh: '| [唯一约束](#sqlalchemy.schema.UniqueConstraint) | 表级唯一约束。 |'
- en: '[PRE224]'
  id: totrans-991
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: A table-level SQL constraint.
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: 表级SQL约束。
- en: '[`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    serves as the base class for the series of constraint objects that can be associated
    with [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects, including [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") [`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint"), and [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint").'
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")作为可以与[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象关联的一系列约束对象的基类，包括[`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")、[`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")、[`UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint")和[`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint")。'
- en: '**Members**'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.Constraint.__init__), [argument_for()](#sqlalchemy.schema.Constraint.argument_for),
    [copy()](#sqlalchemy.schema.Constraint.copy), [ddl_if()](#sqlalchemy.schema.Constraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.Constraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.Constraint.dialect_options),
    [info](#sqlalchemy.schema.Constraint.info), [kwargs](#sqlalchemy.schema.Constraint.kwargs)'
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.Constraint.__init__), [argument_for()](#sqlalchemy.schema.Constraint.argument_for),
    [copy()](#sqlalchemy.schema.Constraint.copy), [ddl_if()](#sqlalchemy.schema.Constraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.Constraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.Constraint.dialect_options),
    [info](#sqlalchemy.schema.Constraint.info), [kwargs](#sqlalchemy.schema.Constraint.kwargs)'
- en: '**Class signature**'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.schema.HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.schema.HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
- en: '[PRE225]'
  id: totrans-998
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: Create a SQL constraint.
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 SQL 约束。
- en: 'Parameters:'
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – Optional, the in-database name of this `Constraint`.'
  id: totrans-1001
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选的，这个 `Constraint` 在数据库中的名称。'
- en: '`deferrable` – Optional bool. If set, emit DEFERRABLE or NOT DEFERRABLE when
    issuing DDL for this constraint.'
  id: totrans-1002
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferrable` – 可选布尔值。如果设置，当为这个约束发出 DDL 时，会发出 DEFERRABLE 或 NOT DEFERRABLE。'
- en: '`initially` – Optional string. If set, emit INITIALLY <value>when issuing DDL
    for this constraint.</value>'
  id: totrans-1003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initially` – 可选字符串。如果设置，当为这个约束发出 DDL 时，会发出 INITIALLY <value>。'
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  id: totrans-1004
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选的数据字典，将被填充到此对象的 [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") 属性中。'
- en: '`comment` –'
  id: totrans-1005
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comment` –'
- en: Optional string that will render an SQL comment on foreign key constraint creation.
  id: totrans-1006
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在外键约束创建时渲染 SQL 注释的可选字符串。
- en: New in version 2.0.
  id: totrans-1007
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: '`**dialect_kw` – Additional keyword arguments are dialect specific, and passed
    in the form `<dialectname>_<argname>`. See the documentation regarding an individual
    dialect at [Dialects](../dialects/index.html) for detail on documented arguments.'
  id: totrans-1008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**dialect_kw` – 附加的关键字参数是方言特定的，并以 `<dialectname>_<argname>` 的形式传递。有关每个方言的文档参数的详细信息，请参见
    [Dialects](../dialects/index.html) 中的文档。'
- en: '`_create_rule` – used internally by some datatypes that also create constraints.'
  id: totrans-1009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_create_rule` – 由一些也创建约束的数据类型内部使用。'
- en: '`_type_bound` – used internally to indicate that this constraint is associated
    with a specific datatype.'
  id: totrans-1010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_type_bound` – 用于内部指示此约束与特定数据类型相关联。'
- en: '[PRE226]'
  id: totrans-1011
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个类添加一种新的方言特定关键字参数。
- en: 'E.g.:'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE227]'
  id: totrans-1015
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法是一种通过每个参数方式向 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 字典添加额外参数的方法。该字典提供了接受方言各种架构级别构造的参数名称列表。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 新方言通常应该一次性将此字典指定为方言类的数据成员。通常，对于使用自定义编译方案并消耗额外参数的端用户代码，额外添加参数名的用例是使用这些参数。
- en: 'Parameters:'
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-1019
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。方言必须是可定位的，否则会引发[`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")异常。方言还必须包括一个现有的[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")集合，表明它参与关键字参数验证和默认系统，否则会引发[`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")异常。如果方言不包含此集合，则可以代表该方言已经指定任何关键字参数。SQLAlchemy中打包的所有方言都包含此集合，但对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-1020
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-1021
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE228]'
  id: totrans-1022
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: 'Deprecated since version 1.4: The [`Constraint.copy()`](#sqlalchemy.schema.Constraint.copy
    "sqlalchemy.schema.Constraint.copy") method is deprecated and will be removed
    in a future release.'
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 从1.4版开始已弃用：[`Constraint.copy()`](#sqlalchemy.schema.Constraint.copy "sqlalchemy.schema.Constraint.copy")方法已弃用，并将在未来的版本中移除。
- en: '[PRE229]'
  id: totrans-1024
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '*inherited from the* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *method of* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *方法的* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
- en: apply a conditional DDL rule to this schema item.
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: 将条件DDL规则应用于此模式项。
- en: These rules work in a similar manner to the [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") callable, with the added
    feature that the criteria may be checked within the DDL compilation phase for
    a construct such as [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable").
    [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if "sqlalchemy.schema.HasConditionalDDL.ddl_if")
    currently applies towards the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct as well as all [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    constructs.
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则的工作方式类似于[`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")可调用对象，但增加了一个特性，即可以在DDL编译阶段为[`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable")等结构检查条件。[`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if")目前适用于[`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")结构以及所有[`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")结构。
- en: 'Parameters:'
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – string name of a dialect, or a tuple of string names to indicate
    multiple dialect types.'
  id: totrans-1029
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 方言的字符串名称，或者表示多个方言类型的字符串名称元组。'
- en: '`callable_` – a callable that is constructed using the same form as that described
    in [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if").'
  id: totrans-1030
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` – 使用与[`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")描述的相同形式构造的可调用对象。'
- en: '`state` – any arbitrary object that will be passed to the callable, if present.'
  id: totrans-1031
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` – 如果存在，则将传递给可调用对象的任意对象。'
- en: New in version 2.0.
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0版中的新功能。
- en: See also
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#schema-ddl-ddl-if)
    - background and usage examples'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制约束和索引的DDL生成](ddl.html#schema-ddl-ddl-if) - 背景和使用示例'
- en: '[PRE230]'
  id: totrans-1035
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项指定为关键字参数的集合。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数以原始的 `<dialect>_<kwarg>` 格式呈现在这里。仅包括实际传递的参数；不像[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") 集合那样，它包含了该方言已知的所有选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合也是可写的；键的形式为 `<dialect>_<kwarg>`，其中的值将被组装到选项列表中。
- en: See also
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE231]'
  id: totrans-1042
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项指定为关键字参数的集合。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，以 `<dialect_name>` 和 `<argument_name>` 为键。例如，`postgresql_where`
    参数可以定位为：
- en: '[PRE232]'
  id: totrans-1046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: New in version 0.9.2.
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 0.9.2 中新增。
- en: See also
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 扁平字典形式'
- en: '[PRE233]'
  id: totrans-1050
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '*inherited from the* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象相关联的信息字典，允许将用户定义的数据与此[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") 关联起来。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在首次访问时会自动生成。它也可以在某些对象的构造函数中指定，比如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 和 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: '[PRE234]'
  id: totrans-1054
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: 一个与[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") 同义的词语。
- en: '[PRE235]'
  id: totrans-1057
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects.
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: This collection represents the columns which are referred to by this object.
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
  zh: 此集合代表此对象引用的列。
- en: '[PRE236]'
  id: totrans-1060
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: A constraint that proxies a ColumnCollection.
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
  zh: 代理列集合的约束。
- en: '**Members**'
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.ColumnCollectionConstraint.__init__), [argument_for()](#sqlalchemy.schema.ColumnCollectionConstraint.argument_for),
    [columns](#sqlalchemy.schema.ColumnCollectionConstraint.columns), [contains_column()](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column),
    [copy()](#sqlalchemy.schema.ColumnCollectionConstraint.copy), [ddl_if()](#sqlalchemy.schema.ColumnCollectionConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.ColumnCollectionConstraint.dialect_kwargs),
    [dialect_options](#sqlalchemy.schema.ColumnCollectionConstraint.dialect_options),
    [info](#sqlalchemy.schema.ColumnCollectionConstraint.info), [kwargs](#sqlalchemy.schema.ColumnCollectionConstraint.kwargs)'
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.ColumnCollectionConstraint.__init__), [argument_for()](#sqlalchemy.schema.ColumnCollectionConstraint.argument_for),
    [columns](#sqlalchemy.schema.ColumnCollectionConstraint.columns), [contains_column()](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column),
    [copy()](#sqlalchemy.schema.ColumnCollectionConstraint.copy), [ddl_if()](#sqlalchemy.schema.ColumnCollectionConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.ColumnCollectionConstraint.dialect_kwargs),
    [dialect_options](#sqlalchemy.schema.ColumnCollectionConstraint.dialect_options),
    [info](#sqlalchemy.schema.ColumnCollectionConstraint.info), [kwargs](#sqlalchemy.schema.ColumnCollectionConstraint.kwargs)'
- en: '**Class signature**'
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint") ([`sqlalchemy.schema.ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin"), [`sqlalchemy.schema.Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint"))
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint") ([`sqlalchemy.schema.ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin"), [`sqlalchemy.schema.Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint"))
- en: '[PRE237]'
  id: totrans-1066
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: 'Parameters:'
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*columns` – A sequence of column names or Column objects.'
  id: totrans-1068
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*columns` – 一系列列名或列对象。'
- en: '`name` – Optional, the in-database name of this constraint.'
  id: totrans-1069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选，此约束在数据库中的名称。'
- en: '`deferrable` – Optional bool. If set, emit DEFERRABLE or NOT DEFERRABLE when
    issuing DDL for this constraint.'
  id: totrans-1070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferrable` – 可选布尔值。如果设置，当为此约束发���DDL时，发出DEFERRABLE或NOT DEFERRABLE。'
- en: '`initially` – Optional string. If set, emit INITIALLY <value>when issuing DDL
    for this constraint.</value>'
  id: totrans-1071
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initially` – 可选字符串。如果设置，当为此约束发出DDL时，发出INITIALLY <value>。</value>'
- en: '`**dialect_kw` – other keyword arguments including dialect-specific arguments
    are propagated to the [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    superclass.'
  id: totrans-1072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**dialect_kw` – 其他关键字参数，包括方言特定参数，将传播到[`Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")超类。'
- en: '[PRE238]'
  id: totrans-1073
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs "sqlalchemy.sql.base.DialectKWArgs")
    *的* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法*'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个类添加一种新的方言特定关键字参数。
- en: 'E.g.:'
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE239]'
  id: totrans-1077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法是一种逐个参数地向[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 字典添加额外参数的方式。该字典提供了一个由方言代表接受各种模式级构造的参数名称列表。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: 新方言通常应一次性将此字典指定为方言类的数据成员。临时添加参数名称的用例通常是针对同时使用自定义编译方案的最终用户代码，该编译方案使用额外的参数。
- en: 'Parameters:'
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-1081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。方言必须是可定位的，否则会引发 [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。方言还必须包括一个现有的 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 集合，表明它参与关键字参数的验证和默认系统，否则会引发
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")。如果方言不包括此集合，则可以代表此方言已经指定任何关键字参数。SQLAlchemy
    中打包的所有方言都包括此集合，但是对于第三方方言，支持可能会有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-1082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-1083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE240]'
  id: totrans-1084
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '*inherited from the* `ColumnCollectionMixin.columns` *attribute of* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin")'
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `ColumnCollectionMixin.columns` *属性，来自于* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin")'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the set of columns
    for this constraint.
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") 表示这个约束的列集合。
- en: '[PRE241]'
  id: totrans-1087
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: Return True if this constraint contains the given column.
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此约束包含给定的列，则返回 True。
- en: Note that this object also contains an attribute `.columns` which is a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects.
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此对象还包含一个属性 `.columns`，它是一个 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")，包含了 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象。
- en: '[PRE242]'
  id: totrans-1090
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: 'Deprecated since version 1.4: The [`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") method is deprecated and
    will be removed in a future release.'
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始不推荐使用：[`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") 方法已弃用，将在未来的版本中删除。
- en: '[PRE243]'
  id: totrans-1092
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '*inherited from the* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *method of* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *方法，来自于* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
- en: apply a conditional DDL rule to this schema item.
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: 为此模式项应用条件性 DDL 规则。
- en: These rules work in a similar manner to the [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") callable, with the added
    feature that the criteria may be checked within the DDL compilation phase for
    a construct such as [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable").
    [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if "sqlalchemy.schema.HasConditionalDDL.ddl_if")
    currently applies towards the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct as well as all [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    constructs.
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则的工作方式类似于 [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 可调用对象，额外的功能是可以在DDL编译阶段检查条件，例如
    [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    这样的结构。 [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") 目前也适用于 [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 结构以及所有 [`Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") 结构。
- en: 'Parameters:'
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – string name of a dialect, or a tuple of string names to indicate
    multiple dialect types.'
  id: totrans-1097
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 方言的字符串名称，或指示多个方言类型的字符串名称的元组。'
- en: '`callable_` – a callable that is constructed using the same form as that described
    in [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if").'
  id: totrans-1098
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` – 一个可调用对象，其构造方式与 [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 中描述的形式相同。'
- en: '`state` – any arbitrary object that will be passed to the callable, if present.'
  id: totrans-1099
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` – 如果存在，将传递给可调用对象的任意对象。'
- en: New in version 2.0.
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本2.0中新增。
- en: See also
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#schema-ddl-ddl-if)
    - background and usage examples'
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制约束和索引的DDL生成](ddl.html#schema-ddl-ddl-if) - 背景和用法示例'
- en: '[PRE244]'
  id: totrans-1103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性继承*'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 作为此结构的方言特定选项指定的关键字参数集合。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数以其原始 `<dialect>_<kwarg>` 格式呈现。只包括实际传递的参数；与 [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") 集合不同，后者包含此方言知道的所有选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: 此集合也是可写的；接受形式为 `<dialect>_<kwarg>` 的键，其值将组装到选项列表中。
- en: See also
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE245]'
  id: totrans-1110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性继承*'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: 作为此结构的方言特定选项指定的关键字参数集合。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，键入为 `<dialect_name>` 和 `<argument_name>`。例如，`postgresql_where`
    参数可以定位为：
- en: '[PRE246]'
  id: totrans-1114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: New in version 0.9.2.
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本0.9.2中新增。
- en: See also
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 平面字典形式'
- en: '[PRE247]'
  id: totrans-1118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '*inherited from the* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此 [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") 关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在首次访问时会自动生成。也可以在某些对象的构造函数中指定，例如 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 和 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: '[PRE248]'
  id: totrans-1122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") 的同义词。'
- en: '[PRE249]'
  id: totrans-1125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: A table- or column-level CHECK constraint.
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: 表或列级别的CHECK约束。
- en: Can be included in the definition of a Table or Column.
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: 可以包含在表或列的定义中。
- en: '**Members**'
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.CheckConstraint.__init__), [argument_for()](#sqlalchemy.schema.CheckConstraint.argument_for),
    [columns](#sqlalchemy.schema.CheckConstraint.columns), [contains_column()](#sqlalchemy.schema.CheckConstraint.contains_column),
    [copy()](#sqlalchemy.schema.CheckConstraint.copy), [ddl_if()](#sqlalchemy.schema.CheckConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.CheckConstraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.CheckConstraint.dialect_options),
    [info](#sqlalchemy.schema.CheckConstraint.info), [kwargs](#sqlalchemy.schema.CheckConstraint.kwargs)'
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.CheckConstraint.__init__), [argument_for()](#sqlalchemy.schema.CheckConstraint.argument_for),
    [columns](#sqlalchemy.schema.CheckConstraint.columns), [contains_column()](#sqlalchemy.schema.CheckConstraint.contains_column),
    [copy()](#sqlalchemy.schema.CheckConstraint.copy), [ddl_if()](#sqlalchemy.schema.CheckConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.CheckConstraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.CheckConstraint.dialect_options),
    [info](#sqlalchemy.schema.CheckConstraint.info), [kwargs](#sqlalchemy.schema.CheckConstraint.kwargs)'
- en: '**Class signature**'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") ([`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint"))
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.CheckConstraint`](#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")
    ([`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint"))
- en: '[PRE250]'
  id: totrans-1132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: Construct a CHECK constraint.
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个CHECK约束。
- en: 'Parameters:'
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`sqltext` –'
  id: totrans-1135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqltext` –'
- en: 'A string containing the constraint definition, which will be used verbatim,
    or a SQL expression construct. If given as a string, the object is converted to
    a [`text()`](sqlelement.html#sqlalchemy.sql.expression.text "sqlalchemy.sql.expression.text")
    object. If the textual string includes a colon character, escape this using a
    backslash:'
  id: totrans-1136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含约束定义的字符串，将直接使用，或者是一个SQL表达式构造。如果给定为字符串，则对象将转换为 [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") 对象。如果文本字符串包含冒号字符，请使用反斜杠进行转义：
- en: '[PRE251]'
  id: totrans-1137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: Warning
  id: totrans-1138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: The [`CheckConstraint.sqltext`](#sqlalchemy.schema.CheckConstraint.params.sqltext
    "sqlalchemy.schema.CheckConstraint") argument to [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") can be passed as a Python string argument,
    which will be treated as **trusted SQL text** and rendered as given. **DO NOT
    PASS UNTRUSTED INPUT TO THIS PARAMETER**.
  id: totrans-1139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`CheckConstraint`](#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")
    的[`CheckConstraint.sqltext`](#sqlalchemy.schema.CheckConstraint.params.sqltext
    "sqlalchemy.schema.CheckConstraint") 参数可以作为Python字符串参数传递，该字符串参数将被视为**可信任的SQL文本**并按照给定的方式呈现。**不要将不受信任的输入传递给此参数**。'
- en: '`name` – Optional, the in-database name of the constraint.'
  id: totrans-1140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选，约束的数据库中名称。'
- en: '`deferrable` – Optional bool. If set, emit DEFERRABLE or NOT DEFERRABLE when
    issuing DDL for this constraint.'
  id: totrans-1141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferrable` – 可选布尔值。如果设置，则在为此约束发出DDL时发出DEFERRABLE或NOT DEFERRABLE。'
- en: '`initially` – Optional string. If set, emit INITIALLY <value>when issuing DDL
    for this constraint.</value>'
  id: totrans-1142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initially` – 可选字符串。如果设置，则在为此约束发出DDL时发出INITIALLY <value>。</value>'
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  id: totrans-1143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选数据字典，将填充到此对象的[`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info")属性中。'
- en: '[PRE252]'
  id: totrans-1144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs "sqlalchemy.sql.base.DialectKWArgs")
    *类的* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法*'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
  zh: 为此类添加一种新的方言特定关键字参数。
- en: 'E.g.:'
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE253]'
  id: totrans-1148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法是向[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")字典添加额外参数的一种逐参数方式。此字典为代表方言的各种模式级构造接受的参数名称提供了列表。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 新方言通常应一次性将此字典指定为方言类的数据成员。通常情况下，用于添加参数名称的临时用例是终端用户代码，该代码还使用了自定义编译方案，该方案消耗了额外的参数。
- en: 'Parameters:'
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-1152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。方言必须是可定位的，否则将引发[`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。方言还必须包括一个现有的[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")集合，指示它参与关键字参数验证和默认系统，否则将引发[`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。如果方言不包括此集合，则可以代表此方言已经指定任何关键字参数。SQLAlchemy中打包的所有方言都包括此集合，但是对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-1153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-1154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE254]'
  id: totrans-1155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '*inherited from the* `ColumnCollectionMixin.columns` *attribute of* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin")'
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin "sqlalchemy.schema.ColumnCollectionMixin")
    *的* `ColumnCollectionMixin.columns` *属性*'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the set of columns
    for this constraint.
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此约束的列集合。
- en: '[PRE255]'
  id: totrans-1158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '*inherited from the* [`ColumnCollectionConstraint.contains_column()`](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column
    "sqlalchemy.schema.ColumnCollectionConstraint.contains_column") *method of* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint") *的* [`ColumnCollectionConstraint.contains_column()`](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column
    "sqlalchemy.schema.ColumnCollectionConstraint.contains_column") *方法*'
- en: Return True if this constraint contains the given column.
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此约束包含给定列，则返回 True。
- en: Note that this object also contains an attribute `.columns` which is a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects.
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此对象还包含一个属性 `.columns`，它是 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: '[PRE256]'
  id: totrans-1162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'Deprecated since version 1.4: The [`CheckConstraint.copy()`](#sqlalchemy.schema.CheckConstraint.copy
    "sqlalchemy.schema.CheckConstraint.copy") method is deprecated and will be removed
    in a future release.'
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 弃用：[`CheckConstraint.copy()`](#sqlalchemy.schema.CheckConstraint.copy
    "sqlalchemy.schema.CheckConstraint.copy") 方法已弃用，将在未来的版本中移除。
- en: '[PRE257]'
  id: totrans-1164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '*inherited from the* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *method of* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL "sqlalchemy.schema.HasConditionalDDL")
    *的* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *方法*'
- en: apply a conditional DDL rule to this schema item.
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
  zh: 将条件 DDL 规则应用于此模式项。
- en: These rules work in a similar manner to the [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") callable, with the added
    feature that the criteria may be checked within the DDL compilation phase for
    a construct such as [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable").
    [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if "sqlalchemy.schema.HasConditionalDDL.ddl_if")
    currently applies towards the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct as well as all [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    constructs.
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则的工作方式与 [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 可调用对象类似，额外的功能是可以在 DDL 编译阶段检查标准，例如
    [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    构造。 [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") 目前也适用于 [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造以及所有 [`Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") 构造。
- en: 'Parameters:'
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – string name of a dialect, or a tuple of string names to indicate
    multiple dialect types.'
  id: totrans-1169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 方言的字符串名称，或字符串名称的元组，以指示多个方言类型。'
- en: '`callable_` – a callable that is constructed using the same form as that described
    in [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if").'
  id: totrans-1170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` – 使用与[`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")中描述的相同形式构建的可调用对象。'
- en: '`state` – any arbitrary object that will be passed to the callable, if present.'
  id: totrans-1171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` – 将传递给可调用对象的任意对象（如果存在）。'
- en: New in version 2.0.
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 2.0 新增。
- en: See also
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#schema-ddl-ddl-if)
    - background and usage examples'
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制约束和索引的 DDL 生成](ddl.html#schema-ddl-ddl-if) - 背景和用法示例'
- en: '[PRE258]'
  id: totrans-1175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项指定为此结构的关键字参数的集合。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数以其原始 `<dialect>_<kwarg>` 格式呈现。仅包含实际传递的参数；不像 [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") 集合，该集合包含此方言已知的所有选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合也是可写的；接受的键的形式为 `<dialect>_<kwarg>`，其中值将被组装成选项列表。
- en: See also
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE259]'
  id: totrans-1182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项指定为此结构的关键字参数的集合。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，键入 `<dialect_name>` 和 `<argument_name>`。例如，`postgresql_where` 参数可以定位为：
- en: '[PRE260]'
  id: totrans-1186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: New in version 0.9.2.
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 0.9.2 中新增。
- en: See also
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 扁平字典形式'
- en: '[PRE261]'
  id: totrans-1190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '*inherited from the* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此 [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") 关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次访问时，字典会自动生成。它也可以在某些对象的构造函数中指定，例如 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 和 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: '[PRE262]'
  id: totrans-1194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") 的同义词。'
- en: '[PRE263]'
  id: totrans-1197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: Defines a dependency between two columns.
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: 定义两列之间的依赖关系。
- en: '`ForeignKey` is specified as an argument to a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object, e.g.:'
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: '`ForeignKey` 被指定为 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象的参数，例如：'
- en: '[PRE264]'
  id: totrans-1200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: Note that `ForeignKey` is only a marker object that defines a dependency between
    two columns. The actual constraint is in all cases represented by the [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object. This object will be generated
    automatically when a `ForeignKey` is associated with a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") which in turn is associated with a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"). Conversely, when [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") is applied to a [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), `ForeignKey` markers are automatically generated to
    be present on each associated [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which are also associated with the constraint object.
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`ForeignKey` 仅是一个标记对象，定义了两列之间的依赖关系。在所有情况下，实际约束都由 [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象表示。当`ForeignKey`与一个 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 相关联，而这个列又与一个 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 相关联时，此对象将自动生成。反之，当 [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 应用于一个 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 时，`ForeignKey` 标记将自动在每个相关联的 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 上存在，这些列也与约束对象相关联。
- en: Note that you cannot define a “composite” foreign key constraint, that is a
    constraint between a grouping of multiple parent/child columns, using `ForeignKey`
    objects. To define this grouping, the [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") object must be used, and applied to
    the [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
    The associated `ForeignKey` objects are created automatically.
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您不能使用 `ForeignKey` 对象定义“复合”外键约束，即多个父/子列的分组约束。要定义此分组，必须使用 [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") 对象，并应用于 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。相关联的`ForeignKey`对象将自动创建。
- en: The `ForeignKey` objects associated with an individual [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object are available in the foreign_keys collection
    of that column.
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: 与单个 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象相关联的 `ForeignKey` 对象可在该列的 foreign_keys 集合中找到。
- en: Further examples of foreign key configuration are in [Defining Foreign Keys](#metadata-foreignkeys).
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: 关于外键配置的更多示例在[定义外键](#metadata-foreignkeys)中。
- en: '**Members**'
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.ForeignKey.__init__), [argument_for()](#sqlalchemy.schema.ForeignKey.argument_for),
    [column](#sqlalchemy.schema.ForeignKey.column), [copy()](#sqlalchemy.schema.ForeignKey.copy),
    [dialect_kwargs](#sqlalchemy.schema.ForeignKey.dialect_kwargs), [dialect_options](#sqlalchemy.schema.ForeignKey.dialect_options),
    [get_referent()](#sqlalchemy.schema.ForeignKey.get_referent), [info](#sqlalchemy.schema.ForeignKey.info),
    [kwargs](#sqlalchemy.schema.ForeignKey.kwargs), [references()](#sqlalchemy.schema.ForeignKey.references),
    [target_fullname](#sqlalchemy.schema.ForeignKey.target_fullname)'
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.ForeignKey.__init__), [argument_for()](#sqlalchemy.schema.ForeignKey.argument_for),
    [column](#sqlalchemy.schema.ForeignKey.column), [copy()](#sqlalchemy.schema.ForeignKey.copy),
    [dialect_kwargs](#sqlalchemy.schema.ForeignKey.dialect_kwargs), [dialect_options](#sqlalchemy.schema.ForeignKey.dialect_options),
    [get_referent()](#sqlalchemy.schema.ForeignKey.get_referent), [info](#sqlalchemy.schema.ForeignKey.info),
    [kwargs](#sqlalchemy.schema.ForeignKey.kwargs), [references()](#sqlalchemy.schema.ForeignKey.references),
    [target_fullname](#sqlalchemy.schema.ForeignKey.target_fullname)'
- en: '**Class signature**'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
- en: '[PRE265]'
  id: totrans-1209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: Construct a column-level FOREIGN KEY.
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个列级的外键。
- en: The [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    object when constructed generates a [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") which is associated with the parent
    [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table") object’s
    collection of constraints.
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 构造时生成 [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    对象，与父 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象的约束集合关联的 [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint")。
- en: 'Parameters:'
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`column` – A single target column for the key relationship. A [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") object or a column name as a string: `tablename.columnkey`
    or `schema.tablename.columnkey`. `columnkey` is the `key` which has been assigned
    to the column (defaults to the column name itself), unless `link_to_name` is `True`
    in which case the rendered name of the column is used.'
  id: totrans-1213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column` – 键关系的单个目标列。[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象或列名称字符串：`tablename.columnkey` 或 `schema.tablename.columnkey`。`columnkey` 是分配给列的
    `key`（默认为列名称本身），除非 `link_to_name` 为 `True`，此时使用列的呈现名称。'
- en: '`name` – Optional string. An in-database name for the key if constraint is
    not provided.'
  id: totrans-1214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选字符串。如果未提供约束，则键的数据库名称。'
- en: '`onupdate` – Optional string. If set, emit ON UPDATE <value>when issuing DDL
    for this constraint. Typical values include CASCADE, DELETE and RESTRICT.</value>'
  id: totrans-1215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onupdate` – 可选字符串。如果设置，则在为此约束发出 DDL 时发出 ON UPDATE <value>。典型值包括 CASCADE、DELETE
    和 RESTRICT。</value>'
- en: '`ondelete` – Optional string. If set, emit ON DELETE <value>when issuing DDL
    for this constraint. Typical values include CASCADE, DELETE and RESTRICT.</value>'
  id: totrans-1216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ondelete` – 可选字符串。如果设置，则在为此约束发出 DDL 时发出 ON DELETE <value>。典型值包括 CASCADE、DELETE
    和 RESTRICT。</value>'
- en: '`deferrable` – Optional bool. If set, emit DEFERRABLE or NOT DEFERRABLE when
    issuing DDL for this constraint.'
  id: totrans-1217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferrable` – 可选布尔值。如果设置，则在为此约束发出 DDL 时发出 DEFERRABLE 或 NOT DEFERRABLE。'
- en: '`initially` – Optional string. If set, emit INITIALLY <value>when issuing DDL
    for this constraint.</value>'
  id: totrans-1218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initially` – 可选字符串。如果设置，则在为此约束发出 DDL 时发出 INITIALLY <value>。</value>'
- en: '`link_to_name` – if True, the string name given in `column` is the rendered
    name of the referenced column, not its locally assigned `key`.'
  id: totrans-1219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`link_to_name` – 如果为 True，则 `column` 中给定的字符串名称是引用列的呈现名称，而不是其本地分配的 `key`。'
- en: '`use_alter` –'
  id: totrans-1220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_alter` –'
- en: passed to the underlying [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") to indicate the constraint should be
    generated/dropped externally from the CREATE TABLE/ DROP TABLE statement. See
    [`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") for further description.
  id: totrans-1221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 传递给底层 [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint")，以指示约束应从
    CREATE TABLE/ DROP TABLE 语句外部生成/删除。有关详细描述，请参阅 [`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint")。
- en: See also
  id: totrans-1222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint")'
  id: totrans-1223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint")'
- en: '[Creating/Dropping Foreign Key Constraints via ALTER](#use-alter)'
  id: totrans-1224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[通过 ALTER 创建/删除外键约束](#use-alter)'
- en: '`match` – Optional string. If set, emit MATCH <value>when issuing DDL for this
    constraint. Typical values include SIMPLE, PARTIAL and FULL.</value>'
  id: totrans-1225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`match` – 可选字符串。如果设置，则在为此约束发出 DDL 时发出 MATCH <value>。典型值包括 SIMPLE、PARTIAL 和
    FULL。</value>'
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  id: totrans-1226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选数据字典，将填充到此对象的 [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") 属性中。'
- en: '`comment` –'
  id: totrans-1227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comment` –'
- en: Optional string that will render an SQL comment on foreign key constraint creation.
  id: totrans-1228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选字符串，将在创建外键约束时呈现 SQL 注释。
- en: New in version 2.0.
  id: totrans-1229
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新内容。
- en: '`**dialect_kw` – Additional keyword arguments are dialect specific, and passed
    in the form `<dialectname>_<argname>`. The arguments are ultimately handled by
    a corresponding [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint"). See the documentation regarding an
    individual dialect at [Dialects](../dialects/index.html) for detail on documented
    arguments.'
  id: totrans-1230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**dialect_kw` – 附加的关键字参数是方言特定的，并以 `<dialectname>_<argname>` 的形式传递。这些参数最终由相应的
    [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint")
    处理。有关文档化参数的详细信息，请参阅 [Dialects](../dialects/index.html) 中关于各个方言的文档。'
- en: '[PRE266]'
  id: totrans-1231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs "sqlalchemy.sql.base.DialectKWArgs")
    *的* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法继承*'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个类添加一种新的方言特定关键字参数。
- en: 'E.g.:'
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE267]'
  id: totrans-1235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法是向 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 字典添加额外参数的逐个参数方式。该字典提供了在方言代表各种模式级构造时代表方言接受的参数名称的列表。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
  zh: 新方言通常应将此字典一次性指定为方言类的数据成员。临时添加参数名称的用例通常用于同时使用自定义编译方案的最终用户代码，该编译方案使用额外的参数。
- en: 'Parameters:'
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-1239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。方言必须是可定位的，否则会引发 [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。方言还必须包括一个现有的 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 集合，表示它参与关键字参数验证和默认系统，否则会引发
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")。如果方言不包括此集合，则已经可以代表该方言指定任何关键字参数。所有打包在
    SQLAlchemy 中的方言都包括此集合，但对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-1240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-1241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE268]'
  id: totrans-1242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: Return the target [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    referenced by this [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey").
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此 [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    引用的目标 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。
- en: If no target column has been established, an exception is raised.
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有建立目标列，则会引发异常。
- en: '[PRE269]'
  id: totrans-1245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: 'Deprecated since version 1.4: The [`ForeignKey.copy()`](#sqlalchemy.schema.ForeignKey.copy
    "sqlalchemy.schema.ForeignKey.copy") method is deprecated and will be removed
    in a future release.'
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`ForeignKey.copy()`](#sqlalchemy.schema.ForeignKey.copy "sqlalchemy.schema.ForeignKey.copy")
    方法已弃用，并将在未来版本中移除。
- en: '[PRE270]'
  id: totrans-1247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: 这是作为方言特定选项指定的关键字参数的集合。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数以原始的 `<dialect>_<kwarg>` 格式显示在此处。仅包括实际传递的参数；与 [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") 不同，后者包含此方言已知的所有选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合也是可写的；接受形式为 `<dialect>_<kwarg>` 的键，其中值将被组装成选项列表。
- en: See also
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE271]'
  id: totrans-1254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: 这是作为方言特定选项指定的关键字参数的集合。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，以 `<dialect_name>` 和 `<argument_name>` 为键。例如，`postgresql_where`
    参数可以定位为：
- en: '[PRE272]'
  id: totrans-1258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: New in version 0.9.2.
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本为0.9.2。
- en: See also
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 平面字典形式'
- en: '[PRE273]'
  id: totrans-1262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: Return the [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    in the given [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    (or any [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause"))
    referenced by this [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey").
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: 返回由此 [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    引用的给定 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")（或任何
    [`FromClause`](selectable.html#sqlalchemy.sql.expression.FromClause "sqlalchemy.sql.expression.FromClause")）中的
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。
- en: Returns None if this [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    does not reference the given [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table").
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    未引用给定的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")，则返回
    None。
- en: '[PRE274]'
  id: totrans-1265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '*inherited from the* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此 [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") 关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次访问时，字典会自动生成。它也可以在某些对象的构造函数中指定，例如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")和[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。
- en: '[PRE275]'
  id: totrans-1269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性继承* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs")的同义词。'
- en: '[PRE276]'
  id: totrans-1272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: Return True if the given [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    is referenced by this [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey").
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定的[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")被此[`ForeignKey`](#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")引用，则返回True。
- en: '[PRE277]'
  id: totrans-1274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: Return a string based ‘column specification’ for this [`ForeignKey`](#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey").
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: 为此[`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")返回基于字符串的“列规范”。
- en: This is usually the equivalent of the string-based “tablename.colname” argument
    first passed to the object’s constructor.
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是传递给对象构造函数的基于字符串的“tablename.colname”参数的等效值。
- en: '[PRE278]'
  id: totrans-1277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: A table-level FOREIGN KEY constraint.
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
  zh: 表级外键约束。
- en: Defines a single column or composite FOREIGN KEY … REFERENCES constraint. For
    a no-frills, single column foreign key, adding a [`ForeignKey`](#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey") to the definition of a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") is a shorthand equivalent for an unnamed, single column
    [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint").
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: 定义单列或复合外键引用约束。对于简单的、单列外键，向[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的定义中添加一个[`ForeignKey`](#sqlalchemy.schema.ForeignKey
    "sqlalchemy.schema.ForeignKey")是一个简写等效于未命名的、单列[`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")。
- en: Examples of foreign key configuration are in [Defining Foreign Keys](#metadata-foreignkeys).
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: 外键配置示例在[定义外键](#metadata-foreignkeys)中。
- en: '**Members**'
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.ForeignKeyConstraint.__init__), [argument_for()](#sqlalchemy.schema.ForeignKeyConstraint.argument_for),
    [column_keys](#sqlalchemy.schema.ForeignKeyConstraint.column_keys), [columns](#sqlalchemy.schema.ForeignKeyConstraint.columns),
    [contains_column()](#sqlalchemy.schema.ForeignKeyConstraint.contains_column),
    [copy()](#sqlalchemy.schema.ForeignKeyConstraint.copy), [ddl_if()](#sqlalchemy.schema.ForeignKeyConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.ForeignKeyConstraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.ForeignKeyConstraint.dialect_options),
    [elements](#sqlalchemy.schema.ForeignKeyConstraint.elements), [info](#sqlalchemy.schema.ForeignKeyConstraint.info),
    [kwargs](#sqlalchemy.schema.ForeignKeyConstraint.kwargs), [referred_table](#sqlalchemy.schema.ForeignKeyConstraint.referred_table)'
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.ForeignKeyConstraint.__init__), [argument_for()](#sqlalchemy.schema.ForeignKeyConstraint.argument_for),
    [column_keys](#sqlalchemy.schema.ForeignKeyConstraint.column_keys), [columns](#sqlalchemy.schema.ForeignKeyConstraint.columns),
    [contains_column()](#sqlalchemy.schema.ForeignKeyConstraint.contains_column),
    [copy()](#sqlalchemy.schema.ForeignKeyConstraint.copy), [ddl_if()](#sqlalchemy.schema.ForeignKeyConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.ForeignKeyConstraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.ForeignKeyConstraint.dialect_options),
    [elements](#sqlalchemy.schema.ForeignKeyConstraint.elements), [info](#sqlalchemy.schema.ForeignKeyConstraint.info),
    [kwargs](#sqlalchemy.schema.ForeignKeyConstraint.kwargs), [referred_table](#sqlalchemy.schema.ForeignKeyConstraint.referred_table)'
- en: '**Class signature**'
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") ([`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint"))
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")（[`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")）
- en: '[PRE279]'
  id: totrans-1285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: Construct a composite-capable FOREIGN KEY.
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个支持复合的外键。
- en: 'Parameters:'
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`columns` – A sequence of local column names. The named columns must be defined
    and present in the parent Table. The names should match the `key` given to each
    column (defaults to the name) unless `link_to_name` is True.'
  id: totrans-1288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`columns` – 本地列名称的序列。这些命名列必须在父表中定义并存在。除非 `link_to_name` 为 True，否则名称应与每个列（默认为名称）给定的
    `key` 匹配。'
- en: '`refcolumns` – A sequence of foreign column names or Column objects. The columns
    must all be located within the same Table.'
  id: totrans-1289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`refcolumns` – 外键列名称或 Column 对象的序列。这些列必须全部位于同一个表中。'
- en: '`name` – Optional, the in-database name of the key.'
  id: totrans-1290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选项，键的数据库内名称。'
- en: '`onupdate` – Optional string. If set, emit ON UPDATE <value>when issuing DDL
    for this constraint. Typical values include CASCADE, DELETE and RESTRICT.</value>'
  id: totrans-1291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onupdate` – 可选字符串。如果设置，则在为此约束发出 DDL 时发出 ON UPDATE <value>。典型值包括 CASCADE、DELETE
    和 RESTRICT。'
- en: '`ondelete` – Optional string. If set, emit ON DELETE <value>when issuing DDL
    for this constraint. Typical values include CASCADE, DELETE and RESTRICT.</value>'
  id: totrans-1292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ondelete` – 可选字符串。如果设置，则在为此约束发出 DDL 时发出 ON DELETE <value>。典型值包括 CASCADE、DELETE
    和 RESTRICT。'
- en: '`deferrable` – Optional bool. If set, emit DEFERRABLE or NOT DEFERRABLE when
    issuing DDL for this constraint.'
  id: totrans-1293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferrable` – 可选布尔值。如果设置，则在发出 DDL 时发出 DEFERRABLE 或 NOT DEFERRABLE。'
- en: '`initially` – Optional string. If set, emit INITIALLY <value>when issuing DDL
    for this constraint.</value>'
  id: totrans-1294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initially` – 可选字符串。如果设置，则在为此约束发出 DDL 时发出 INITIALLY <value>。'
- en: '`link_to_name` – if True, the string name given in `column` is the rendered
    name of the referenced column, not its locally assigned `key`.'
  id: totrans-1295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`link_to_name` – 如果为 True，则 `column` 中给定的字符串名称是引用列的渲染名称，而不是其在本地分配的 `key`。'
- en: '`use_alter` –'
  id: totrans-1296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_alter` –'
- en: If True, do not emit the DDL for this constraint as part of the CREATE TABLE
    definition. Instead, generate it via an ALTER TABLE statement issued after the
    full collection of tables have been created, and drop it via an ALTER TABLE statement
    before the full collection of tables are dropped.
  id: totrans-1297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则不会将此约束的 DDL 作为 CREATE TABLE 定义的一部分发出。相反，在完整的表集合创建之后，通过 ALTER TABLE
    语句生成它，并在删除完整的表集合之前通过 ALTER TABLE 语句将其删除。
- en: The use of [`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") is particularly geared towards the case
    where two or more tables are established within a mutually-dependent foreign key
    constraint relationship; however, the [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") and [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") methods will perform this resolution automatically,
    so the flag is normally not needed.
  id: totrans-1298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 [`ForeignKeyConstraint.use_alter`](#sqlalchemy.schema.ForeignKeyConstraint.params.use_alter
    "sqlalchemy.schema.ForeignKeyConstraint") 特别适用于两个或多个表在相互依赖的外键约束关系中建立的情况；但是，[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all") 和 [`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all
    "sqlalchemy.schema.MetaData.drop_all") 方法将自动执行此解析，因此通常不需要此标志。
- en: See also
  id: totrans-1299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Creating/Dropping Foreign Key Constraints via ALTER](#use-alter)'
  id: totrans-1300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[通过 ALTER 创建/删除外键约束](#use-alter)'
- en: '`match` – Optional string. If set, emit MATCH <value>when issuing DDL for this
    constraint. Typical values include SIMPLE, PARTIAL and FULL.</value>'
  id: totrans-1301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`match` – 可选字符串。如果设置，则在为此约束发出 DDL 时发出 MATCH <value>。典型值包括 SIMPLE、PARTIAL 和
    FULL。'
- en: '`info` – Optional data dictionary which will be populated into the [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  id: totrans-1302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 将填充到此对象的 [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") 属性中的可选数据字典。'
- en: '`comment` –'
  id: totrans-1303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comment` –'
- en: Optional string that will render an SQL comment on foreign key constraint creation.
  id: totrans-1304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在外键约束创建时渲染一个 SQL 注释的可选字符串。
- en: New in version 2.0.
  id: totrans-1305
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 2.0 版中新增。
- en: '`**dialect_kw` – Additional keyword arguments are dialect specific, and passed
    in the form `<dialectname>_<argname>`. See the documentation regarding an individual
    dialect at [Dialects](../dialects/index.html) for detail on documented arguments.'
  id: totrans-1306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**dialect_kw` – 额外的关键字参数是方言特定的，并以 `<方言名称>_<参数名称>` 的形式传递。有关文档化参数的详细信息，请参阅[方言](../dialects/index.html)中有关各个方言的文档。'
- en: '[PRE280]'
  id: totrans-1307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs "sqlalchemy.sql.base.DialectKWArgs")
    *的* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法*'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: 为此类添加一种新的特定于方言的关键字参数。
- en: 'E.g.:'
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE281]'
  id: totrans-1311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for")方法是向[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")字典添加额外参数的每个参数的方法。此字典提供了各种模式级别构造函数可接受的参数名称列表。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: 新的方言通常应将此字典作为方言类的数据成员一次性指定。通常情况下，用于临时添加参数名称的用例是为了终端用户代码，该代码还使用自定义编译方案，该方案消耗附加参数。
- en: 'Parameters:'
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-1315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。方言必须是可定位的，否则会引发[`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。方言还必须包括一个现有的[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")集合，指示它参与关键字参数验证和默认系统，否则会引发[`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError")。如果方言不包含此集合，则可以代表该方言指定任何关键字参数。SQLAlchemy内置的所有方言都包含此集合，但对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-1316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-1317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE282]'
  id: totrans-1318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: Return a list of string keys representing the local columns in this [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint").
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个字符串键列表，表示此[`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint")中的本地列。
- en: This list is either the original string arguments sent to the constructor of
    the [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint"),
    or if the constraint has been initialized with [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects, is the string `.key` of each element.
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表是发送到[`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint")构造函数的原始字符串参数，或者如果约束已使用[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象初始化，则是每个元素的字符串`.key`。
- en: '[PRE283]'
  id: totrans-1321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '*inherited from the* `ColumnCollectionMixin.columns` *attribute of* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin")'
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnCollectionMixin.columns`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin") *属性*'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the set of columns
    for this constraint.
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
  zh: 代表此约束的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")表示列的集合。
- en: '[PRE284]'
  id: totrans-1324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '*inherited from the* [`ColumnCollectionConstraint.contains_column()`](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column
    "sqlalchemy.schema.ColumnCollectionConstraint.contains_column") *method of* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnCollectionConstraint.contains_column()`](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column
    "sqlalchemy.schema.ColumnCollectionConstraint.contains_column") *方法的* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
- en: Return True if this constraint contains the given column.
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此约束包含给定列，则返回True。
- en: Note that this object also contains an attribute `.columns` which is a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects.
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个对象还包含一个属性`.columns`，它是一个[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")对象的集合，其中包含[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象。
- en: '[PRE285]'
  id: totrans-1328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: 'Deprecated since version 1.4: The [`ForeignKeyConstraint.copy()`](#sqlalchemy.schema.ForeignKeyConstraint.copy
    "sqlalchemy.schema.ForeignKeyConstraint.copy") method is deprecated and will be
    removed in a future release.'
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4弃用：[`ForeignKeyConstraint.copy()`](#sqlalchemy.schema.ForeignKeyConstraint.copy
    "sqlalchemy.schema.ForeignKeyConstraint.copy")方法已弃用，并将在将来的版本中移除。
- en: '[PRE286]'
  id: totrans-1330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '*inherited from the* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *method of* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *方法的* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
- en: apply a conditional DDL rule to this schema item.
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: 将条件DDL规则应用于此模式项。
- en: These rules work in a similar manner to the [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") callable, with the added
    feature that the criteria may be checked within the DDL compilation phase for
    a construct such as [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable").
    [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if "sqlalchemy.schema.HasConditionalDDL.ddl_if")
    currently applies towards the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct as well as all [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    constructs.
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则的工作方式类似于[`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")可调用对象，只是增加了一个特性，即在DDL编译阶段可以检查条件，例如[`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable")构造。[`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if")当前还适用于[`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造以及所有[`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")构造。
- en: 'Parameters:'
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – string name of a dialect, or a tuple of string names to indicate
    multiple dialect types.'
  id: totrans-1335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 方言的字符串名称，或者一个字符串名称的元组，表示多个方言类型。'
- en: '`callable_` – a callable that is constructed using the same form as that described
    in [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if").'
  id: totrans-1336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` – 使用与[`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")描述的相同形式构造的可调用对象。'
- en: '`state` – any arbitrary object that will be passed to the callable, if present.'
  id: totrans-1337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` – 任意的对象，如果存在，将传递给可调用对象。'
- en: New in version 2.0.
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始新添加。
- en: See also
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#schema-ddl-ddl-if)
    - background and usage examples'
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制约束和索引的DDL生成](ddl.html#schema-ddl-ddl-if) - 背景和使用示例'
- en: '[PRE287]'
  id: totrans-1341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
  zh: 此结构的特定方言选项的关键字参数集合。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数以其原始`<dialect>_<kwarg>`格式呈现。仅包含实际传递的参数；与[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options")集合不同，后者包含此方言已知的所有选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合也是可写的；键采用`<dialect>_<kwarg>`的形式，其中值将被组装成选项列表。
- en: See also
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE288]'
  id: totrans-1348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: 此结构的特定方言选项的关键字参数集合。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套注册表，键入`<dialect_name>`和`<argument_name>`。例如，`postgresql_where`参数可以定位为：
- en: '[PRE289]'
  id: totrans-1352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: New in version 0.9.2.
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本0.9.2开始。
- en: See also
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 平面字典形式'
- en: '[PRE290]'
  id: totrans-1356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: A sequence of [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    objects.
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列[`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")对象。
- en: Each [`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")
    represents a single referring column/referred column pair.
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
  zh: 每个[`ForeignKey`](#sqlalchemy.schema.ForeignKey "sqlalchemy.schema.ForeignKey")代表单个引用列/被引用列对。
- en: This collection is intended to be read-only.
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: 此集合旨在为只读。
- en: '[PRE291]'
  id: totrans-1360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '*inherited from the* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")相关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在首次访问时自动生成。它也可以在某些对象的构造函数中指定，例如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")和[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。
- en: '[PRE292]'
  id: totrans-1364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性，属于* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") 的同义词。'
- en: '[PRE293]'
  id: totrans-1367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: The [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object to which this [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint
    "sqlalchemy.schema.ForeignKeyConstraint") references.
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`ForeignKeyConstraint`](#sqlalchemy.schema.ForeignKeyConstraint "sqlalchemy.schema.ForeignKeyConstraint")
    引用的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象。
- en: This is a dynamically calculated attribute which may not be available if the
    constraint and/or parent table is not yet associated with a metadata collection
    that contains the referred table.
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个动态计算的属性，如果约束和/或父表尚未与包含所引用表的元数据集关联，则可能不可用。
- en: '[PRE294]'
  id: totrans-1370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: define a class that includes the [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") method, allowing for conditional
    rendering of DDL.
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个包含 [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") 方法的类，允许对DDL进行条件渲染。
- en: Currently applies to constraints and indexes.
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: 目前适用于约束和索引。
- en: '**Members**'
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[ddl_if()](#sqlalchemy.schema.HasConditionalDDL.ddl_if)'
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: '[ddl_if()](#sqlalchemy.schema.HasConditionalDDL.ddl_if)'
- en: New in version 2.0.
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中新增。
- en: '[PRE295]'
  id: totrans-1376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: apply a conditional DDL rule to this schema item.
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个条件DDL规则应用到此模式项。
- en: These rules work in a similar manner to the [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") callable, with the added
    feature that the criteria may be checked within the DDL compilation phase for
    a construct such as [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable").
    [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if "sqlalchemy.schema.HasConditionalDDL.ddl_if")
    currently applies towards the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct as well as all [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    constructs.
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则的工作方式与 [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 可调用对象类似，但增加了一个功能，即可以在DDL编译阶段检查条件，例如
    [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")。
    [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if "sqlalchemy.schema.HasConditionalDDL.ddl_if")
    目前也适用于 [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") 构造以及所有 [`Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") 构造。
- en: 'Parameters:'
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – string name of a dialect, or a tuple of string names to indicate
    multiple dialect types.'
  id: totrans-1380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 方言的字符串名称，或字符串名称的元组，表示多个方言类型。'
- en: '`callable_` – a callable that is constructed using the same form as that described
    in [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if").'
  id: totrans-1381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` – 使用与 [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 描述的形式构建的可调用对象。'
- en: '`state` – any arbitrary object that will be passed to the callable, if present.'
  id: totrans-1382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` – 如果存在，将传递给可调用对象的任意对象。'
- en: New in version 2.0.
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中新增。
- en: See also
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#schema-ddl-ddl-if)
    - background and usage examples'
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制约束和索引的DDL生成](ddl.html#schema-ddl-ddl-if) - 背景和使用示例'
- en: '[PRE296]'
  id: totrans-1386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: A table-level PRIMARY KEY constraint.
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: 表级主键约束。
- en: 'The [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint "sqlalchemy.schema.PrimaryKeyConstraint")
    object is present automatically on any [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object; it is assigned a set of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects corresponding to those marked with the [`Column.primary_key`](metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") flag:'
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint "sqlalchemy.schema.PrimaryKeyConstraint")
    对象会自动出现在任何 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象上；它被分配一组与标记为 [`Column.primary_key`](metadata.html#sqlalchemy.schema.Column.params.primary_key
    "sqlalchemy.schema.Column") 标志相对应的 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象：'
- en: '[PRE297]'
  id: totrans-1389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: 'The primary key of a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    can also be specified by using a [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") object explicitly; in this mode of usage,
    the “name” of the constraint can also be specified, as well as other options which
    may be recognized by dialects:'
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    的主键也可以通过显式使用 [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") 对象来指定；在这种用法模式下，“约束”的“名称”也可以指定，以及方言可能识别的其他选项：'
- en: '[PRE298]'
  id: totrans-1391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: The two styles of column-specification should generally not be mixed. An warning
    is emitted if the columns present in the [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") don’t match the columns that were marked
    as `primary_key=True`, if both are present; in this case, the columns are taken
    strictly from the [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") declaration, and those columns otherwise
    marked as `primary_key=True` are ignored. This behavior is intended to be backwards
    compatible with previous behavior.
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
  zh: 两种列规范样式通常不应混合使用。如果 [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") 中存在的列与标记为 `primary_key=True` 的列不匹配，则会发出警告，如果两者都存在；在这种情况下，列严格来自
    [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint "sqlalchemy.schema.PrimaryKeyConstraint")
    声明，并且其他标记为 `primary_key=True` 的列将被忽略。这种行为旨在与先前的行为向后兼容。
- en: 'For the use case where specific options are to be specified on the [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint"), but the usual style of using `primary_key=True`
    flags is still desirable, an empty [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") may be specified, which will take on
    the primary key column collection from the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") based on the flags:'
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要在 [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint "sqlalchemy.schema.PrimaryKeyConstraint")
    上指定特定选项的用例，但仍然希望使用 `primary_key=True` 标志的常规样式的情况，可以指定一个空的 [`PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")，它将从基于标志的 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 中采用主键列集合：
- en: '[PRE299]'
  id: totrans-1394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '**Members**'
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[argument_for()](#sqlalchemy.schema.PrimaryKeyConstraint.argument_for), [columns](#sqlalchemy.schema.PrimaryKeyConstraint.columns),
    [contains_column()](#sqlalchemy.schema.PrimaryKeyConstraint.contains_column),
    [copy()](#sqlalchemy.schema.PrimaryKeyConstraint.copy), [ddl_if()](#sqlalchemy.schema.PrimaryKeyConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.PrimaryKeyConstraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.PrimaryKeyConstraint.dialect_options),
    [info](#sqlalchemy.schema.PrimaryKeyConstraint.info), [kwargs](#sqlalchemy.schema.PrimaryKeyConstraint.kwargs)'
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: '[argument_for()](#sqlalchemy.schema.PrimaryKeyConstraint.argument_for), [columns](#sqlalchemy.schema.PrimaryKeyConstraint.columns),
    [contains_column()](#sqlalchemy.schema.PrimaryKeyConstraint.contains_column),
    [copy()](#sqlalchemy.schema.PrimaryKeyConstraint.copy), [ddl_if()](#sqlalchemy.schema.PrimaryKeyConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.PrimaryKeyConstraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.PrimaryKeyConstraint.dialect_options),
    [info](#sqlalchemy.schema.PrimaryKeyConstraint.info), [kwargs](#sqlalchemy.schema.PrimaryKeyConstraint.kwargs)'
- en: '**Class signature**'
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint") ([`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint"))
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.schema.PrimaryKeyConstraint`](#sqlalchemy.schema.PrimaryKeyConstraint
    "sqlalchemy.schema.PrimaryKeyConstraint")（[`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")）
- en: '[PRE300]'
  id: totrans-1399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
  zh: 为此类添加一种新的方言特定的关键字参数。
- en: 'E.g.:'
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE301]'
  id: totrans-1403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法是一种逐个参数地向 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 字典添加额外参数的方式。此字典提供了由各种模式级构造接受的参数名称列表，代表方言。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
  zh: 新的方言通常应一次性指定此字典作为方言类的数据成员。临时添加参数名的用例通常是为了使用自定义编译方案的终端用户代码，该编译方案消耗额外的参数。
- en: 'Parameters:'
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-1407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。 方言必须是可定位的，否则会引发 [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。方言还必须包含一个现有的 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 集合，表示它参与关键字参数验证和默认系统，否则会引发
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")。
    如果方言不包含此集合，则可以为此方言代表已经指定任何关键字参数。SQLAlchemy 中打包的所有方言都包括此集合，但对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-1408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-1409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE302]'
  id: totrans-1410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '*inherited from the* `ColumnCollectionMixin.columns` *attribute of* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin")'
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `ColumnCollectionMixin.columns` *属性的* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin")'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the set of columns
    for this constraint.
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: 表示此约束的列集合的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: '[PRE303]'
  id: totrans-1413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '*inherited from the* [`ColumnCollectionConstraint.contains_column()`](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column
    "sqlalchemy.schema.ColumnCollectionConstraint.contains_column") *method of* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnCollectionConstraint.contains_column()`](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column
    "sqlalchemy.schema.ColumnCollectionConstraint.contains_column") *方法的* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
- en: Return True if this constraint contains the given column.
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此约束包含给定列，则返回 True。
- en: Note that this object also contains an attribute `.columns` which is a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects.
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此对象还包含一个名为`.columns`的属性，它是[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象的[`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: '[PRE304]'
  id: totrans-1417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '*inherited from the* [`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") *method of* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") *方法的* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
- en: 'Deprecated since version 1.4: The [`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") method is deprecated and
    will be removed in a future release.'
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起弃用：[`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy")方法已弃用，并将在将来的版本中移除。
- en: '[PRE305]'
  id: totrans-1420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '*inherited from the* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *method of* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *方法的* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
- en: apply a conditional DDL rule to this schema item.
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: 对此模式项应用条件DDL规则。
- en: These rules work in a similar manner to the [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") callable, with the added
    feature that the criteria may be checked within the DDL compilation phase for
    a construct such as [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable").
    [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if "sqlalchemy.schema.HasConditionalDDL.ddl_if")
    currently applies towards the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct as well as all [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    constructs.
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则的工作方式类似于[`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")可调用对象，额外的特性是可以在DDL编译阶段检查条件，例如[`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable")这样的构造函数。[`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if")目前也适用于[`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造以及所有[`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")构造。
- en: 'Parameters:'
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – string name of a dialect, or a tuple of string names to indicate
    multiple dialect types.'
  id: totrans-1425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 方言的字符串名称，或表示多个方言类型的字符串名称元组。'
- en: '`callable_` – a callable that is constructed using the same form as that described
    in [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if").'
  id: totrans-1426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` – 使用与[`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")中描述的相同形式构造的可调用对象。'
- en: '`state` – any arbitrary object that will be passed to the callable, if present.'
  id: totrans-1427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` – 如果存在，将传递给可调用对象的任意对象。'
- en: New in version 2.0.
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0开始新增。
- en: See also
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#schema-ddl-ddl-if)
    - background and usage examples'
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制约束和索引的DDL生成](ddl.html#schema-ddl-ddl-if) - 背景和使用示例'
- en: '[PRE306]'
  id: totrans-1431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项指定的关键字参数集合，用于此构造函数。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数以其原始`<dialect>_<kwarg>`格式呈现。仅包括实际传递的参数；不像[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options")集合，该集合包含此方言已知的所有选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合也是可写的；接受形式为`<dialect>_<kwarg>`的键，其中值将被组装到选项列表中。
- en: See also
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE307]'
  id: totrans-1438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项指定给此结构的关键字参数集合。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，键为`<dialect_name>`和`<argument_name>`。例如，`postgresql_where`参数可定位为：
- en: '[PRE308]'
  id: totrans-1442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: New in version 0.9.2.
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本中新增的功能为0.9.2。
- en: See also
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 平面字典形式'
- en: '[PRE309]'
  id: totrans-1446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '*inherited from the* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此[`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")相关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在首次访问时会自动生成。它也可以在某些对象的构造函数中指定，例如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")和[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")。
- en: '[PRE310]'
  id: totrans-1450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") 的同义词。'
- en: '[PRE311]'
  id: totrans-1453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: A table-level UNIQUE constraint.
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
  zh: 表级别的唯一约束。
- en: Defines a single column or composite UNIQUE constraint. For a no-frills, single
    column constraint, adding `unique=True` to the `Column` definition is a shorthand
    equivalent for an unnamed, single column UniqueConstraint.
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
  zh: 定义单列或复合唯一约束。对于简单的单列约束，将`unique=True`添加到`Column`定义中相当于未命名的单列UniqueConstraint的简写等效形式。
- en: '**Members**'
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.UniqueConstraint.__init__), [argument_for()](#sqlalchemy.schema.UniqueConstraint.argument_for),
    [columns](#sqlalchemy.schema.UniqueConstraint.columns), [contains_column()](#sqlalchemy.schema.UniqueConstraint.contains_column),
    [copy()](#sqlalchemy.schema.UniqueConstraint.copy), [ddl_if()](#sqlalchemy.schema.UniqueConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.UniqueConstraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.UniqueConstraint.dialect_options),
    [info](#sqlalchemy.schema.UniqueConstraint.info), [kwargs](#sqlalchemy.schema.UniqueConstraint.kwargs)'
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.UniqueConstraint.__init__), [argument_for()](#sqlalchemy.schema.UniqueConstraint.argument_for),
    [columns](#sqlalchemy.schema.UniqueConstraint.columns), [contains_column()](#sqlalchemy.schema.UniqueConstraint.contains_column),
    [copy()](#sqlalchemy.schema.UniqueConstraint.copy), [ddl_if()](#sqlalchemy.schema.UniqueConstraint.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.UniqueConstraint.dialect_kwargs), [dialect_options](#sqlalchemy.schema.UniqueConstraint.dialect_options),
    [info](#sqlalchemy.schema.UniqueConstraint.info), [kwargs](#sqlalchemy.schema.UniqueConstraint.kwargs)'
- en: '**Class signature**'
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") ([`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint"))
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.UniqueConstraint`](#sqlalchemy.schema.UniqueConstraint
    "sqlalchemy.schema.UniqueConstraint") ([`sqlalchemy.schema.ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint"))
- en: '[PRE312]'
  id: totrans-1460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '*inherited from the* `sqlalchemy.schema.ColumnCollectionConstraint.__init__`
    *method of* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.schema.ColumnCollectionConstraint.__init__` *方法的* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
- en: 'Parameters:'
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`*columns` – A sequence of column names or Column objects.'
  id: totrans-1463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*columns` – 列名或列对象的序列。'
- en: '`name` – Optional, the in-database name of this constraint.'
  id: totrans-1464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 可选，此约束的数据库中的名称。'
- en: '`deferrable` – Optional bool. If set, emit DEFERRABLE or NOT DEFERRABLE when
    issuing DDL for this constraint.'
  id: totrans-1465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deferrable` – 可选布尔值。 如果设置，为此约束发出 DEFERRABLE 或 NOT DEFERRABLE。'
- en: '`initially` – Optional string. If set, emit INITIALLY <value>when issuing DDL
    for this constraint.</value>'
  id: totrans-1466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initially` – 可选字符串。 如果设置，发出 INITIALLY <value>when 为此约束发出 DDL。</value>'
- en: '`**dialect_kw` – other keyword arguments including dialect-specific arguments
    are propagated to the [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    superclass.'
  id: totrans-1467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**dialect_kw` – 其他关键字参数，包括方言特定参数，将传递给[`Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint")超类。'
- en: '[PRE313]'
  id: totrans-1468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个类添加一种新的方言特定关键字参数。
- en: 'E.g.:'
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE314]'
  id: totrans-1472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法是逐个添加额外参数到[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 字典的方法。 这个字典提供了由各种模式级构造接受的代表方言的参数名称的列表。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: 新的方言通常应该一次性指定这个字典作为方言类的数据成员。 临时添加参数名称的用例通常是为了使用自定义编译方案并消耗额外参数的最终用户代码。
- en: 'Parameters:'
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-1476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` – 方言的名称。方言必须是可定位的，否则会引发 [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。方言还必须包括一个现有的 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 集合，表示它参与关键字参数验证和默认系统，否则会引发
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")。如果方言不包括此集合，则可以代表此方言已经指定任何关键字参数。SQLAlchemy
    内置的所有方言都包括此集合，但对于第三方方言，支持可能有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-1477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` – 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-1478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` – 参数的默认值。'
- en: '[PRE315]'
  id: totrans-1479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '*inherited from the* `ColumnCollectionMixin.columns` *attribute of* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin")'
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin "sqlalchemy.schema.ColumnCollectionMixin")
    *的* `.columns` *属性继承*'
- en: A [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") representing the set of columns
    for this constraint.
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: 代表此约束的一组列的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: '[PRE316]'
  id: totrans-1482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '*inherited from the* [`ColumnCollectionConstraint.contains_column()`](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column
    "sqlalchemy.schema.ColumnCollectionConstraint.contains_column") *method of* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint") *的* [`ColumnCollectionConstraint.contains_column()`](#sqlalchemy.schema.ColumnCollectionConstraint.contains_column
    "sqlalchemy.schema.ColumnCollectionConstraint.contains_column") *方法继承*'
- en: Return True if this constraint contains the given column.
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此约束包含给定列，则返回 True。
- en: Note that this object also contains an attribute `.columns` which is a [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection") of [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects.
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此对象还包含一个名为`.columns`的属性，它是 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象的 [`ColumnCollection`](sqlelement.html#sqlalchemy.sql.expression.ColumnCollection
    "sqlalchemy.sql.expression.ColumnCollection")。
- en: '[PRE317]'
  id: totrans-1486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '*inherited from the* [`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") *method of* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint")'
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`ColumnCollectionConstraint`](#sqlalchemy.schema.ColumnCollectionConstraint
    "sqlalchemy.schema.ColumnCollectionConstraint") *的* [`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") *方法继承*'
- en: 'Deprecated since version 1.4: The [`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") method is deprecated and
    will be removed in a future release.'
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本 1.4 起已弃用：[`ColumnCollectionConstraint.copy()`](#sqlalchemy.schema.ColumnCollectionConstraint.copy
    "sqlalchemy.schema.ColumnCollectionConstraint.copy") 方法已弃用，并将在将来的版本中删除。
- en: '[PRE318]'
  id: totrans-1489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '*inherited from the* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *method of* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL "sqlalchemy.schema.HasConditionalDDL")
    *的* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *方法继承*'
- en: apply a conditional DDL rule to this schema item.
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: 对此模式项目应用条件 DDL 规则。
- en: These rules work in a similar manner to the [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") callable, with the added
    feature that the criteria may be checked within the DDL compilation phase for
    a construct such as [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable").
    [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if "sqlalchemy.schema.HasConditionalDDL.ddl_if")
    currently applies towards the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct as well as all [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    constructs.
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则的工作方式类似于[`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")可调用对象，额外的特性是在DDL编译阶段可以检查条件，例如[`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable
    "sqlalchemy.schema.CreateTable")构造中。[`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") 目前也适用于[`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造以及所有[`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")构造。
- en: 'Parameters:'
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – string name of a dialect, or a tuple of string names to indicate
    multiple dialect types.'
  id: totrans-1494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` – 方言的字符串名称，或者字符串名称的元组，表示多个方言类型。'
- en: '`callable_` – a callable that is constructed using the same form as that described
    in [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if").'
  id: totrans-1495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` – 一个可调用对象，其构造方式与[`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if")中描述的形式相同。'
- en: '`state` – any arbitrary object that will be passed to the callable, if present.'
  id: totrans-1496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` – 任意对象，如果存在将传递给可调用对象。'
- en: New in version 2.0.
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0。
- en: See also
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#schema-ddl-ddl-if)
    - background and usage examples'
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制约束和索引的DDL生成](ddl.html#schema-ddl-ddl-if) - 背景和用法示例'
- en: '[PRE319]'
  id: totrans-1500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项指定给此构造的关键字参数集合。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数以其原始的`<dialect>_<kwarg>`格式呈现。仅包括实际传递的参数；不像[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options")集合，该集合包含此方言已��的所有选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
  zh: 该集合也是可写的；键的形式为`<dialect>_<kwarg>`，其中值将被组装到选项列表中。
- en: See also
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套字典形式'
- en: '[PRE320]'
  id: totrans-1507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项指定给此构造的关键字参数集合。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，键为`<dialect_name>`和`<argument_name>`。例如，`postgresql_where` 参数可以定位为：
- en: '[PRE321]'
  id: totrans-1511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: New in version 0.9.2.
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 0.9.2。
- en: See also
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 平坦的字典形式'
- en: '[PRE322]'
  id: totrans-1515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '*inherited from the* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此 [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") 关联起来。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
  zh: 字典在首次访问时会自动生成。它也可以在某些对象的构造函数中指定，例如 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 和 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: '[PRE323]'
  id: totrans-1519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") 的同义词。'
- en: '[PRE324]'
  id: totrans-1522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: Mark a string indicating that a name has already been converted by a naming
    convention.
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: 标记一个字符串，指示名称已经通过命名约定转换。
- en: This is a string subclass that indicates a name that should not be subject to
    any further naming conventions.
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个字符串子类，表示不应再受任何其他命名约定影响的名称。
- en: 'E.g. when we create a [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    using a naming convention as follows:'
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: 例如 当我们使用以下命名约定创建 [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    时：
- en: '[PRE325]'
  id: totrans-1526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: The name of the above constraint will be rendered as `"ck_t_x5"`. That is, the
    existing name `x5` is used in the naming convention as the `constraint_name` token.
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: 上述约束的名称将呈现为 `"ck_t_x5"`。即，现有名称 `x5` 被用作命名约定中的 `constraint_name` 令牌。
- en: 'In some situations, such as in migration scripts, we may be rendering the above
    [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint "sqlalchemy.schema.CheckConstraint")
    with a name that’s already been converted. In order to make sure the name isn’t
    double-modified, the new name is applied using the [`conv()`](#sqlalchemy.schema.conv
    "sqlalchemy.schema.conv") marker. We can use this explicitly as follows:'
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，例如在迁移脚本中，我们可能会渲染上述 [`CheckConstraint`](#sqlalchemy.schema.CheckConstraint
    "sqlalchemy.schema.CheckConstraint") 的名称已经被转换了。为了确保名称不会被双重修改，新名称使用 [`conv()`](#sqlalchemy.schema.conv
    "sqlalchemy.schema.conv") 标记应用。我们可以明确使用如下：
- en: '[PRE326]'
  id: totrans-1529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: Where above, the [`conv()`](#sqlalchemy.schema.conv "sqlalchemy.schema.conv")
    marker indicates that the constraint name here is final, and the name will render
    as `"ck_t_x5"` and not `"ck_t_ck_t_x5"`
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，[`conv()`](#sqlalchemy.schema.conv "sqlalchemy.schema.conv") 标记表示此处的约束名称是最终的，名称将呈现为
    `"ck_t_x5"` 而不是 `"ck_t_ck_t_x5"`
- en: See also
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Configuring Constraint Naming Conventions](#constraint-naming-conventions)'
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: '[配置约束命名约定](#constraint-naming-conventions)'
- en: '## Indexes'
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: '## 索引'
- en: Indexes can be created anonymously (using an auto-generated name `ix_<column
    label>`) for a single column using the inline `index` keyword on [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which also modifies the usage of `unique` to apply
    the uniqueness to the index itself, instead of adding a separate UNIQUE constraint.
    For indexes with specific names or which encompass more than one column, use the
    [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") construct, which
    requires a name.
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: 索引可以匿名创建（使用自动生成的名称 `ix_<column label>`）为单列使用内联 `index` 关键字，在 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 上，该关键字也修改了 `unique` 的用法，将唯一性应用于索引本身，而不是添加一个单独的 UNIQUE
    约束。对于具有特定名称或涵盖多个列的索引，请使用 [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    结构，该结构需要一个名称。
- en: 'Below we illustrate a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    with several [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") objects
    associated. The DDL for “CREATE INDEX” is issued right after the create statements
    for the table:'
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: 下面我们展示了一个具有多个关联 [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    对象的 [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")。DDL
    为“CREATE INDEX”在表的创建语句之后发布：
- en: '[PRE327]'
  id: totrans-1536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: 'Note in the example above, the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct is created externally to the table which it corresponds, using [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects directly. [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") also supports “inline” definition inside the [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), using string names to identify columns:'
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在上面的示例中，[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") 结构是外部创建的，与其对应的表使用
    [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象直接创建。[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") 也支持在 [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 内部“内联”定义，使用字符串名称来标识列：
- en: '[PRE328]'
  id: totrans-1538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: 'The [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") object also
    supports its own `create()` method:'
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") 对象也支持其自己的 `create()`
    方法：'
- en: '[PRE329]'
  id: totrans-1540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '### Functional Indexes'
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
  zh: '### 函数索引'
- en: '[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") supports SQL
    and function expressions, as supported by the target backend. To create an index
    against a column using a descending value, the [`ColumnElement.desc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.desc
    "sqlalchemy.sql.expression.ColumnElement.desc") modifier may be used:'
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") 支持 SQL 和函数表达式，与目标后端支持的一样。要针对列使用降序值创建索引，可以使用
    [`ColumnElement.desc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.desc
    "sqlalchemy.sql.expression.ColumnElement.desc") 修改器：'
- en: '[PRE330]'
  id: totrans-1543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: 'Or with a backend that supports functional indexes such as PostgreSQL, a “case
    insensitive” index can be created using the `lower()` function:'
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用支持函数索引的后端，比如 PostgreSQL，可以使用 `lower()` 函数创建“不区分大小写”的索引：
- en: '[PRE331]  ### Functional Indexes'
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE331]  ### 函数索引'
- en: '[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") supports SQL
    and function expressions, as supported by the target backend. To create an index
    against a column using a descending value, the [`ColumnElement.desc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.desc
    "sqlalchemy.sql.expression.ColumnElement.desc") modifier may be used:'
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") 支持 SQL 和函数表达式，与目标后端支持的一样。要针对列使用降序值创建索引，可以使用
    [`ColumnElement.desc()`](sqlelement.html#sqlalchemy.sql.expression.ColumnElement.desc
    "sqlalchemy.sql.expression.ColumnElement.desc") 修改器：'
- en: '[PRE332]'
  id: totrans-1547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: 'Or with a backend that supports functional indexes such as PostgreSQL, a “case
    insensitive” index can be created using the `lower()` function:'
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用支持函数索引的后端，比如 PostgreSQL，可以使用 `lower()` 函数创建“不区分大小写”的索引：
- en: '[PRE333]'
  id: totrans-1549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: Index API
  id: totrans-1550
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引 API
- en: '| Object Name | Description |'
  id: totrans-1551
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1552
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [Index](#sqlalchemy.schema.Index) | A table-level INDEX. |'
  id: totrans-1553
  prefs: []
  type: TYPE_TB
  zh: '| [索引](#sqlalchemy.schema.Index) | 一个表级索引。|'
- en: '[PRE334]'
  id: totrans-1554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: A table-level INDEX.
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: 一个表级索引。
- en: Defines a composite (one or more column) INDEX.
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个复合（一个或多个列）索引。
- en: 'E.g.:'
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE335]'
  id: totrans-1558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: 'For a no-frills, single column index, adding [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") also supports `index=True`:'
  id: totrans-1559
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个简单的、单列索引，添加 [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    也支持 `index=True`：
- en: '[PRE336]'
  id: totrans-1560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: 'For a composite index, multiple columns can be specified:'
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: 对于复合索引，可以指定多列：
- en: '[PRE337]'
  id: totrans-1562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: 'Functional indexes are supported as well, typically by using the [`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func") construct in conjunction with table-bound [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") objects:'
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: 功能性索引也得到支持，通常通过与绑定到表的[`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")对象一起使用[`func`](sqlelement.html#sqlalchemy.sql.expression.func
    "sqlalchemy.sql.expression.func")构造来实现：
- en: '[PRE338]'
  id: totrans-1564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: 'An [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") can also be
    manually associated with a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table"),
    either through inline declaration or using [`Table.append_constraint()`](metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint"). When this approach is used, the
    names of the indexed columns can be specified as strings:'
  id: totrans-1565
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")也可以手动与[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")关联，可以通过内联声明或使用[`Table.append_constraint()`](metadata.html#sqlalchemy.schema.Table.append_constraint
    "sqlalchemy.schema.Table.append_constraint")来实现。当使用此方法时，可以将索引列的名称指定为字符串：'
- en: '[PRE339]'
  id: totrans-1566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: 'To support functional or expression-based indexes in this form, the [`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text") construct may be used:'
  id: totrans-1567
  prefs: []
  type: TYPE_NORMAL
  zh: 要支持此形式中的功能性或基于表达式的索引，可以使用[`text()`](sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")构造：
- en: '[PRE340]'
  id: totrans-1568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: See also
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Indexes](#schema-indexes) - General information on [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index").'
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
  zh: '[索引](#schema-indexes) - 有关[`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")的一般信息。'
- en: '[PostgreSQL-Specific Index Options](../dialects/postgresql.html#postgresql-indexes)
    - PostgreSQL-specific options available for the [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct.'
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
  zh: '[PostgreSQL特定索引选项](../dialects/postgresql.html#postgresql-indexes) - 适用于[`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造的PostgreSQL特定选项。'
- en: '[MySQL / MariaDB- Specific Index Options](../dialects/mysql.html#mysql-indexes)
    - MySQL-specific options available for the [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct.'
  id: totrans-1572
  prefs: []
  type: TYPE_NORMAL
  zh: '[MySQL / MariaDB特定索引选项](../dialects/mysql.html#mysql-indexes) - MySQL特定选项适用于[`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造。'
- en: '[Clustered Index Support](../dialects/mssql.html#mssql-indexes) - MSSQL-specific
    options available for the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct.'
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
  zh: '[集群索引支持](../dialects/mssql.html#mssql-indexes) - MSSQL特定选项适用于[`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index")构造。'
- en: '**Members**'
  id: totrans-1574
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.schema.Index.__init__), [argument_for()](#sqlalchemy.schema.Index.argument_for),
    [create()](#sqlalchemy.schema.Index.create), [ddl_if()](#sqlalchemy.schema.Index.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.Index.dialect_kwargs), [dialect_options](#sqlalchemy.schema.Index.dialect_options),
    [drop()](#sqlalchemy.schema.Index.drop), [info](#sqlalchemy.schema.Index.info),
    [kwargs](#sqlalchemy.schema.Index.kwargs)'
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.schema.Index.__init__), [argument_for()](#sqlalchemy.schema.Index.argument_for),
    [create()](#sqlalchemy.schema.Index.create), [ddl_if()](#sqlalchemy.schema.Index.ddl_if),
    [dialect_kwargs](#sqlalchemy.schema.Index.dialect_kwargs), [dialect_options](#sqlalchemy.schema.Index.dialect_options),
    [drop()](#sqlalchemy.schema.Index.drop), [info](#sqlalchemy.schema.Index.info),
    [kwargs](#sqlalchemy.schema.Index.kwargs)'
- en: '**Class signature**'
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.schema.Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.schema.ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin"), [`sqlalchemy.schema.HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.schema.Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    ([`sqlalchemy.sql.base.DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs"), [`sqlalchemy.schema.ColumnCollectionMixin`](#sqlalchemy.schema.ColumnCollectionMixin
    "sqlalchemy.schema.ColumnCollectionMixin"), [`sqlalchemy.schema.HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL"), [`sqlalchemy.schema.SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem"))
- en: '[PRE341]'
  id: totrans-1578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: Construct an index object.
  id: totrans-1579
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个索引对象。
- en: 'Parameters:'
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – The name of the index'
  id: totrans-1581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 索引的名称'
- en: '`*expressions` – Column expressions to include in the index. The expressions
    are normally instances of [`Column`](metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column"),
    but may also be arbitrary SQL expressions which ultimately refer to a [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").'
  id: totrans-1582
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*expressions` – 要包含在索引中的列表达式。这些表达式通常是[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的实例，但也可以是最终指向[`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")的任意SQL表达式。'
- en: '`unique=False` – Keyword only argument; if True, create a unique index.'
  id: totrans-1583
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unique=False` – 仅限关键字参数；如果为True，则创建一个唯一索引。'
- en: '`quote=None` – Keyword only argument; whether to apply quoting to the name
    of the index. Works in the same manner as that of [`Column.quote`](metadata.html#sqlalchemy.schema.Column.params.quote
    "sqlalchemy.schema.Column").'
  id: totrans-1584
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quote=None` – 仅限关键字参数；是否对索引的名称应用引号。工作方式与[`Column.quote`](metadata.html#sqlalchemy.schema.Column.params.quote
    "sqlalchemy.schema.Column")相同。'
- en: '`info=None` – Optional data dictionary which will be populated into the [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") attribute of this object.'
  id: totrans-1585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info=None` – 可选数据字典，将填充到此对象的[`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") 属性中。'
- en: '`**dialect_kw` – Additional keyword arguments not mentioned above are dialect
    specific, and passed in the form `<dialectname>_<argname>`. See the documentation
    regarding an individual dialect at [Dialects](../dialects/index.html) for detail
    on documented arguments.'
  id: totrans-1586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**dialect_kw` – 上述未提及的额外关键字参数是方言特定的，并以`<dialectname>_<argname>`的形式传递。有关个别方言的文档参数的详细信息，请参阅[方言](../dialects/index.html)的文档。'
- en: '[PRE342]'
  id: totrans-1587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '*inherited from the* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *method of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1588
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") *方法的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: Add a new kind of dialect-specific keyword argument for this class.
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个类添加一种新的方言特定的关键字参数。
- en: 'E.g.:'
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE343]'
  id: totrans-1591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: The [`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") method is a per-argument way
    adding extra arguments to the [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") dictionary. This
    dictionary provides a list of argument names accepted by various schema-level
    constructs on behalf of a dialect.
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.argument_for()`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.argument_for
    "sqlalchemy.sql.base.DialectKWArgs.argument_for") 方法是一种逐个添加额外参数到[`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 字典的方式。该字典提供了在方言代表构造级别构造上接受的各种参数名称的列表。'
- en: New dialects should typically specify this dictionary all at once as a data
    member of the dialect class. The use case for ad-hoc addition of argument names
    is typically for end-user code that is also using a custom compilation scheme
    which consumes the additional arguments.
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: 新方言通常应将此字典一次性指定为方言类的数据成员。通常，对于需要临时添加参数名的用例，是用于终端用户代码，该代码还使用了自定义的编译方案，其中包含了额外的参数。
- en: 'Parameters:'
  id: totrans-1594
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect_name` – name of a dialect. The dialect must be locatable, else a [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError") is raised. The dialect must also include an
    existing [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") collection, indicating
    that it participates in the keyword-argument validation and default system, else
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")
    is raised. If the dialect does not include this collection, then any keyword argument
    can be specified on behalf of this dialect already. All dialects packaged within
    SQLAlchemy include this collection, however for third party dialects, support
    may vary.'
  id: totrans-1595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect_name` - 方言的名称。方言必须是可定位的，否则会引发 [`NoSuchModuleError`](exceptions.html#sqlalchemy.exc.NoSuchModuleError
    "sqlalchemy.exc.NoSuchModuleError")。方言还必须包括一个现有的 [`DefaultDialect.construct_arguments`](internals.html#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments") 集合，指示它参与关键字参数的验证和默认系统，否则会引发
    [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError "sqlalchemy.exc.ArgumentError")。如果方言不包括此集合，则已为此方言指定任何关键字参数都是可以的。SQLAlchemy
    中打包的所有方言都包含此集合，但对于第三方方言，支持可能会有所不同。'
- en: '`argument_name` – name of the parameter.'
  id: totrans-1596
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`argument_name` - 参数的名称。'
- en: '`default` – default value of the parameter.'
  id: totrans-1597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default` - 参数的默认值。'
- en: '[PRE344]'
  id: totrans-1598
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: Issue a `CREATE` statement for this [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    using the given [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or `Engine`` for connectivity.
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此 [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")，使用给定的 [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 或 `Engine` 发出 `CREATE` 语句以进行连接。
- en: See also
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all").'
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all")。'
- en: '[PRE345]'
  id: totrans-1602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '*inherited from the* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *method of* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") *方法* [`HasConditionalDDL`](#sqlalchemy.schema.HasConditionalDDL
    "sqlalchemy.schema.HasConditionalDDL")'
- en: apply a conditional DDL rule to this schema item.
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
  zh: 将条件 DDL 规则应用于此模式项。
- en: These rules work in a similar manner to the [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") callable, with the added
    feature that the criteria may be checked within the DDL compilation phase for
    a construct such as [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable").
    [`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if "sqlalchemy.schema.HasConditionalDDL.ddl_if")
    currently applies towards the [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    construct as well as all [`Constraint`](#sqlalchemy.schema.Constraint "sqlalchemy.schema.Constraint")
    constructs.
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则的工作方式类似于 [`ExecutableDDLElement.execute_if()`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 可调用对象，其附加功能是可以在 DDL 编译阶段检查条件，例如
    [`CreateTable`](ddl.html#sqlalchemy.schema.CreateTable "sqlalchemy.schema.CreateTable")
    构造。[`HasConditionalDDL.ddl_if()`](#sqlalchemy.schema.HasConditionalDDL.ddl_if
    "sqlalchemy.schema.HasConditionalDDL.ddl_if") 目前也适用于 [`Index`](#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") 构造以及所有 [`Constraint`](#sqlalchemy.schema.Constraint
    "sqlalchemy.schema.Constraint") 构造。
- en: 'Parameters:'
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`dialect` – string name of a dialect, or a tuple of string names to indicate
    multiple dialect types.'
  id: totrans-1607
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dialect` - 方言的字符串名称，或一组字符串名称以指示多个方言类型。'
- en: '`callable_` – a callable that is constructed using the same form as that described
    in [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if").'
  id: totrans-1608
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callable_` - 使用与 [`ExecutableDDLElement.execute_if.callable_`](ddl.html#sqlalchemy.schema.ExecutableDDLElement.execute_if.params.callable_
    "sqlalchemy.schema.ExecutableDDLElement.execute_if") 中描述的相同形式构造的可调用对象。'
- en: '`state` – any arbitrary object that will be passed to the callable, if present.'
  id: totrans-1609
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state` - 如果存在，将传递给可调用对象的任意对象。'
- en: New in version 2.0.
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0 开始新增。
- en: See also
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[Controlling DDL Generation of Constraints and Indexes](ddl.html#schema-ddl-ddl-if)
    - background and usage examples'
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: '[控制约束和索引的 DDL 生成](ddl.html#schema-ddl-ddl-if) - 背景和用法示例'
- en: '[PRE346]'
  id: totrans-1613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '*inherited from the* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1615
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项的关键字参数集合，用于这个构造函数。
- en: The arguments are present here in their original `<dialect>_<kwarg>` format.
    Only arguments that were actually passed are included; unlike the [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") collection, which contains
    all options known by this dialect including defaults.
  id: totrans-1616
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数以其原始的 `<dialect>_<kwarg>` 格式存在。只包括实际传递的参数；不像 [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") 集合，该集合包含此方言已知的所有选项，包括默认值。
- en: The collection is also writable; keys are accepted of the form `<dialect>_<kwarg>`
    where the value will be assembled into the list of options.
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: 集合也是可写的；接受形式为 `<dialect>_<kwarg>` 的键，其值将被组装成选项列表。
- en: See also
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - nested dictionary form'
  id: totrans-1619
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") - 嵌套的字典形式'
- en: '[PRE347]'
  id: totrans-1620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '*inherited from the* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1621
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.dialect_options`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_options
    "sqlalchemy.sql.base.DialectKWArgs.dialect_options") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
- en: A collection of keyword arguments specified as dialect-specific options to this
    construct.
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: 作为方言特定选项的关键字参数集合，用于这个构造函数。
- en: 'This is a two-level nested registry, keyed to `<dialect_name>` and `<argument_name>`.
    For example, the `postgresql_where` argument would be locatable as:'
  id: totrans-1623
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个两级嵌套的注册表，以 `<dialect_name>` 和 `<argument_name>` 为键。例如，`postgresql_where`
    参数可以定位为：
- en: '[PRE348]'
  id: totrans-1624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: New in version 0.9.2.
  id: totrans-1625
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 0.9.2 中的新功能。
- en: See also
  id: totrans-1626
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - flat dictionary form'
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") - 平坦的字典形式'
- en: '[PRE349]'
  id: totrans-1628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: Issue a `DROP` statement for this [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index"),
    using the given [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    or [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    for connectivity.
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的 [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    或 [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    进行连接性，为此 [`Index`](#sqlalchemy.schema.Index "sqlalchemy.schema.Index") 发出 `DROP`
    语句。
- en: See also
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all "sqlalchemy.schema.MetaData.drop_all").'
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
  zh: '[`MetaData.drop_all()`](metadata.html#sqlalchemy.schema.MetaData.drop_all "sqlalchemy.schema.MetaData.drop_all").'
- en: '[PRE350]'
  id: totrans-1632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '*inherited from the* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info
    "sqlalchemy.schema.SchemaItem.info") *attribute of* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem")'
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`SchemaItem.info`](metadata.html#sqlalchemy.schema.SchemaItem.info "sqlalchemy.schema.SchemaItem.info")
    *属性的* [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem "sqlalchemy.schema.SchemaItem")'
- en: Info dictionary associated with the object, allowing user-defined data to be
    associated with this [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem").
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
  zh: 与对象关联的信息字典，允许将用户定义的数据与此 [`SchemaItem`](metadata.html#sqlalchemy.schema.SchemaItem
    "sqlalchemy.schema.SchemaItem") 关联。
- en: The dictionary is automatically generated when first accessed. It can also be
    specified in the constructor of some objects, such as [`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") and [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column").
  id: totrans-1635
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次访问时，字典会自动生成。它也可以在某些对象的构造函数中指定，比如[`Table`](metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 和 [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")。
- en: '[PRE351]'
  id: totrans-1636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '*inherited from the* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *attribute of* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")'
  id: totrans-1637
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* [`DialectKWArgs.kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.kwargs
    "sqlalchemy.sql.base.DialectKWArgs.kwargs") *属性的* [`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs
    "sqlalchemy.sql.base.DialectKWArgs")。'
- en: A synonym for [`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs").
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
  zh: '[`DialectKWArgs.dialect_kwargs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs
    "sqlalchemy.sql.base.DialectKWArgs.dialect_kwargs") 的同义词。'
