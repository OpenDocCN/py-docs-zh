- en: Session API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/session_api.html](https://docs.sqlalchemy.org/en/20/orm/session_api.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Session and sessionmaker()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [ORMExecuteState](#sqlalchemy.orm.ORMExecuteState) | Represents a call to
    the [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    method, as passed to the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook. |'
  prefs: []
  type: TYPE_TB
- en: '| [Session](#sqlalchemy.orm.Session) | Manages persistence operations for ORM-mapped
    objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [sessionmaker](#sqlalchemy.orm.sessionmaker) | A configurable [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") factory. |'
  prefs: []
  type: TYPE_TB
- en: '| [SessionTransaction](#sqlalchemy.orm.SessionTransaction) | A [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")-level transaction. |'
  prefs: []
  type: TYPE_TB
- en: '| [SessionTransactionOrigin](#sqlalchemy.orm.SessionTransactionOrigin) | indicates
    the origin of a [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction").
    |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A configurable [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    factory.
  prefs: []
  type: TYPE_NORMAL
- en: The [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    factory generates new [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects when called, creating them given the configurational arguments established
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Context manager use is optional; otherwise, the returned [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object may be closed explicitly via the [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method. Using a `try:/finally:` block is optional,
    however will ensure that the close takes place even if there are database errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    acts as a factory for [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects in the same way as an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") acts as a factory for [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects. In this way it also includes a [`sessionmaker.begin()`](#sqlalchemy.orm.sessionmaker.begin
    "sqlalchemy.orm.sessionmaker.begin") method, that provides a context manager which
    both begins and commits a transaction, as well as closes out the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") when complete, rolling back the transaction if any errors
    occur:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'When calling upon [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    to construct a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    keyword arguments may also be passed to the method; these arguments will override
    that of the globally configured parameters. Below we use a [`sessionmaker`](#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") bound to a certain [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") to produce a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    that is instead bound to a specific [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") procured from that engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The class also includes a method [`sessionmaker.configure()`](#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure"), which can be used to specify additional
    keyword arguments to the factory, which will take effect for subsequent [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects generated. This is usually used to associate
    one or more [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    objects with an existing [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    factory before it is first used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Opening and Closing a Session](session_basics.html#session-getting) - introductory
    text on creating sessions using [`sessionmaker`](#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__call__()](#sqlalchemy.orm.sessionmaker.__call__), [__init__()](#sqlalchemy.orm.sessionmaker.__init__),
    [begin()](#sqlalchemy.orm.sessionmaker.begin), [close_all()](#sqlalchemy.orm.sessionmaker.close_all),
    [configure()](#sqlalchemy.orm.sessionmaker.configure), [identity_key()](#sqlalchemy.orm.sessionmaker.identity_key),
    [object_session()](#sqlalchemy.orm.sessionmaker.object_session)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    (`sqlalchemy.orm.session._SessionClassMethods`, `typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Produce a new [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object using the configuration established in this [`sessionmaker`](#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, the `__call__` method is invoked on an object when it is “called”
    in the same way as a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker").
  prefs: []
  type: TYPE_NORMAL
- en: All arguments here except for `class_` correspond to arguments accepted by [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") directly. See the [`Session.__init__()`](#sqlalchemy.orm.Session.__init__
    "sqlalchemy.orm.Session.__init__") docstring for more details on parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` – a [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or other `Connectable` with which newly created [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects will be associated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_` – class to use in order to create new [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects. Defaults to [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoflush` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The autoflush setting to use with newly created [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Flushing](session_basics.html#session-flushing) - additional background on
    autoflush'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`expire_on_commit=True` – the [`Session.expire_on_commit`](#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") setting to use with newly created [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`info` – optional dictionary of information that will be available via [`Session.info`](#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info"). Note this dictionary is *updated*, not replaced,
    when the `info` parameter is specified to the specific [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") construction operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kw` – all other keyword arguments are passed to the constructor of newly
    created [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Produce a context manager that both provides a new [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") as well as a transaction that commits.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.close_all`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  prefs: []
  type: TYPE_NORMAL
- en: Close *all* sessions in memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.3: The [`Session.close_all()`](#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all") method is deprecated and will be removed in
    a future release. Please refer to `close_all_sessions()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: (Re)configure the arguments for this sessionmaker.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.identity_key`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  prefs: []
  type: TYPE_NORMAL
- en: Return an identity key.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.object_session`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  prefs: []
  type: TYPE_NORMAL
- en: Return the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") to
    which an object belongs.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`object_session()`](#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Represents a call to the [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method, as passed to the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Execute Events](session_events.html#session-execute-events) - top level documentation
    on how to use [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.orm.ORMExecuteState.__init__), [all_mappers](#sqlalchemy.orm.ORMExecuteState.all_mappers),
    [bind_arguments](#sqlalchemy.orm.ORMExecuteState.bind_arguments), [bind_mapper](#sqlalchemy.orm.ORMExecuteState.bind_mapper),
    [execution_options](#sqlalchemy.orm.ORMExecuteState.execution_options), [invoke_statement()](#sqlalchemy.orm.ORMExecuteState.invoke_statement),
    [is_column_load](#sqlalchemy.orm.ORMExecuteState.is_column_load), [is_delete](#sqlalchemy.orm.ORMExecuteState.is_delete),
    [is_executemany](#sqlalchemy.orm.ORMExecuteState.is_executemany), [is_from_statement](#sqlalchemy.orm.ORMExecuteState.is_from_statement),
    [is_insert](#sqlalchemy.orm.ORMExecuteState.is_insert), [is_orm_statement](#sqlalchemy.orm.ORMExecuteState.is_orm_statement),
    [is_relationship_load](#sqlalchemy.orm.ORMExecuteState.is_relationship_load),
    [is_select](#sqlalchemy.orm.ORMExecuteState.is_select), [is_update](#sqlalchemy.orm.ORMExecuteState.is_update),
    [lazy_loaded_from](#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from), [load_options](#sqlalchemy.orm.ORMExecuteState.load_options),
    [loader_strategy_path](#sqlalchemy.orm.ORMExecuteState.loader_strategy_path),
    [local_execution_options](#sqlalchemy.orm.ORMExecuteState.local_execution_options),
    [parameters](#sqlalchemy.orm.ORMExecuteState.parameters), [session](#sqlalchemy.orm.ORMExecuteState.session),
    [statement](#sqlalchemy.orm.ORMExecuteState.statement), [update_delete_options](#sqlalchemy.orm.ORMExecuteState.update_delete_options),
    [update_execution_options()](#sqlalchemy.orm.ORMExecuteState.update_execution_options),
    [user_defined_options](#sqlalchemy.orm.ORMExecuteState.user_defined_options)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    (`sqlalchemy.util.langhelpers.MemoizedSlots`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState").
  prefs: []
  type: TYPE_NORMAL
- en: this object is constructed internally.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Return a sequence of all [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects that are involved at the top level of this statement.
  prefs: []
  type: TYPE_NORMAL
- en: By “top level” we mean those [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects that would be represented in the result set rows
    for a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    query, or for a [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") or [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") query, the mapper that is the main subject
    of the UPDATE or DELETE.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ORMExecuteState.bind_mapper`](#sqlalchemy.orm.ORMExecuteState.bind_mapper
    "sqlalchemy.orm.ORMExecuteState.bind_mapper")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The dictionary passed as the [`Session.execute.bind_arguments`](#sqlalchemy.orm.Session.execute.params.bind_arguments
    "sqlalchemy.orm.Session.execute") dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This dictionary may be used by extensions to [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to pass arguments that will assist in determining amongst
    a set of database connections which one should be used to invoke this statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    that is the primary “bind” mapper.
  prefs: []
  type: TYPE_NORMAL
- en: For an [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    object invoking an ORM statement, that is, the [`ORMExecuteState.is_orm_statement`](#sqlalchemy.orm.ORMExecuteState.is_orm_statement
    "sqlalchemy.orm.ORMExecuteState.is_orm_statement") attribute is `True`, this attribute
    will return the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    that is considered to be the “primary” mapper of the statement. The term “bind
    mapper” refers to the fact that a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object may be “bound” to multiple [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects keyed to mapped classes, and the “bind mapper”
    determines which of those [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects would be selected.
  prefs: []
  type: TYPE_NORMAL
- en: For a statement that is invoked against a single mapped class, [`ORMExecuteState.bind_mapper`](#sqlalchemy.orm.ORMExecuteState.bind_mapper
    "sqlalchemy.orm.ORMExecuteState.bind_mapper") is intended to be a reliable way
    of getting this mapper.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ORMExecuteState.all_mappers`](#sqlalchemy.orm.ORMExecuteState.all_mappers
    "sqlalchemy.orm.ORMExecuteState.all_mappers")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The complete dictionary of current execution options.
  prefs: []
  type: TYPE_NORMAL
- en: This is a merge of the statement level options with the locally passed execution
    options.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ORMExecuteState.local_execution_options`](#sqlalchemy.orm.ORMExecuteState.local_execution_options
    "sqlalchemy.orm.ORMExecuteState.local_execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Executable.execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Execute the statement represented by this [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState"), without re-invoking events that have already
    proceeded.
  prefs: []
  type: TYPE_NORMAL
- en: This method essentially performs a re-entrant execution of the current statement
    for which the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event is being currently invoked.
    The use case for this is for event handlers that want to override how the ultimate
    [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object is returned, such as for schemes that retrieve results from an offline
    cache or which concatenate results from multiple executions.
  prefs: []
  type: TYPE_NORMAL
- en: When the [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object is returned by the actual handler function within [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") and is propagated to the calling
    [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    method, the remainder of the [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method is preempted and the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object is returned to the caller of [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") immediately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`statement` – optional statement to be invoked, in place of the statement currently
    represented by [`ORMExecuteState.statement`](#sqlalchemy.orm.ORMExecuteState.statement
    "sqlalchemy.orm.ORMExecuteState.statement").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional dictionary of parameters or list of parameters which will be merged
    into the existing [`ORMExecuteState.parameters`](#sqlalchemy.orm.ORMExecuteState.parameters
    "sqlalchemy.orm.ORMExecuteState.parameters") of this [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: a list of parameter dictionaries is accepted for executemany
    executions.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`execution_options` – optional dictionary of execution options will be merged
    into the existing [`ORMExecuteState.execution_options`](#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options") of this [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bind_arguments` – optional dictionary of bind_arguments which will be merged
    amongst the current [`ORMExecuteState.bind_arguments`](#sqlalchemy.orm.ORMExecuteState.bind_arguments
    "sqlalchemy.orm.ORMExecuteState.bind_arguments") of this [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object with ORM-level results.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Re-Executing Statements](session_events.html#do-orm-execute-re-executing)
    - background and examples on the appropriate usage of [`ORMExecuteState.invoke_statement()`](#sqlalchemy.orm.ORMExecuteState.invoke_statement
    "sqlalchemy.orm.ORMExecuteState.invoke_statement").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Return True if the operation is refreshing column-oriented attributes on an
    existing ORM object.
  prefs: []
  type: TYPE_NORMAL
- en: This occurs during operations such as [`Session.refresh()`](#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh"), as well as when an attribute deferred by [`defer()`](queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") is being loaded, or an attribute that was expired either
    directly by [`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")
    or via a commit operation is being loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Handlers will very likely not want to add any options to queries when such an
    operation is occurring as the query should be a straight primary key fetch which
    should not have any additional WHERE criteria, and loader options travelling with
    the instance will have already been added to the query.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ORMExecuteState.is_relationship_load`](#sqlalchemy.orm.ORMExecuteState.is_relationship_load
    "sqlalchemy.orm.ORMExecuteState.is_relationship_load")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: return True if this is a DELETE operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.30: - the attribute is also True for a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") construct that is itself against
    a [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    construct, such as `select(Entity).from_statement(delete(..))`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: return True if the parameters are a multi-element list of dictionaries with
    more than one dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: return True if this operation is a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") operation.
  prefs: []
  type: TYPE_NORMAL
- en: This is independent from [`ORMExecuteState.is_select`](#sqlalchemy.orm.ORMExecuteState.is_select
    "sqlalchemy.orm.ORMExecuteState.is_select"), as a `select().from_statement()`
    construct can be used with INSERT/UPDATE/DELETE RETURNING types of statements
    as well. [`ORMExecuteState.is_select`](#sqlalchemy.orm.ORMExecuteState.is_select
    "sqlalchemy.orm.ORMExecuteState.is_select") will only be set if the [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") is itself against a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.30.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: return True if this is an INSERT operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.30: - the attribute is also True for a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") construct that is itself against
    a [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct, such as `select(Entity).from_statement(insert(..))`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: return True if the operation is an ORM statement.
  prefs: []
  type: TYPE_NORMAL
- en: This indicates that the select(), insert(), update(), or delete() being invoked
    contains ORM entities as subjects. For a statement that does not have ORM entities
    and instead refers only to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") metadata, it is invoked as a Core SQL statement and
    no ORM-level automation takes place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this load is loading objects on behalf of a relationship.
  prefs: []
  type: TYPE_NORMAL
- en: This means, the loader in effect is either a LazyLoader, SelectInLoader, SubqueryLoader,
    or similar, and the entire SELECT statement being emitted is on behalf of a relationship
    load.
  prefs: []
  type: TYPE_NORMAL
- en: Handlers will very likely not want to add any options to queries when such an
    operation is occurring, as loader options are already capable of being propagated
    to relationship loaders and should be already present.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ORMExecuteState.is_column_load`](#sqlalchemy.orm.ORMExecuteState.is_column_load
    "sqlalchemy.orm.ORMExecuteState.is_column_load")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: return True if this is a SELECT operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.30: - the attribute is also True for a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") construct that is itself against
    a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct, such as `select(Entity).from_statement(select(..))`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: return True if this is an UPDATE operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.30: - the attribute is also True for a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") construct that is itself against
    a [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct, such as `select(Entity).from_statement(update(..))`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: An [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    that is using this statement execution for a lazy load operation.
  prefs: []
  type: TYPE_NORMAL
- en: The primary rationale for this attribute is to support the horizontal sharding
    extension, where it is available within specific query execution time hooks created
    by this extension. To that end, the attribute is only intended to be meaningful
    at **query execution time**, and importantly not any time prior to that, including
    query compilation time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Return the load_options that will be used for this execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Return the `PathRegistry` for the current load path.
  prefs: []
  type: TYPE_NORMAL
- en: This object represents the “path” in a query along relationships when a particular
    object or collection is being loaded.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Dictionary view of the execution options passed to the [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method.
  prefs: []
  type: TYPE_NORMAL
- en: This does not include options that may be associated with the statement being
    invoked.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ORMExecuteState.execution_options`](#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Dictionary of parameters that was passed to [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") in use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The SQL statement being invoked.
  prefs: []
  type: TYPE_NORMAL
- en: For an ORM selection as would be retrieved from [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), this is an instance of [`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") that was generated from the ORM query.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Return the update_delete_options that will be used for this execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Update the local execution options with new values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The sequence of `UserDefinedOptions` that have been associated with the statement
    being invoked.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Manages persistence operations for ORM-mapped objects.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") is **not safe
    for use in concurrent threads.**. See [Is the Session thread-safe? Is AsyncSession
    safe to share in concurrent tasks?](session_basics.html#session-faq-threadsafe)
    for background.
  prefs: []
  type: TYPE_NORMAL
- en: The Session’s usage paradigm is described at [Using the Session](session.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.orm.Session.__init__), [add()](#sqlalchemy.orm.Session.add),
    [add_all()](#sqlalchemy.orm.Session.add_all), [begin()](#sqlalchemy.orm.Session.begin),
    [begin_nested()](#sqlalchemy.orm.Session.begin_nested), [bind_mapper()](#sqlalchemy.orm.Session.bind_mapper),
    [bind_table()](#sqlalchemy.orm.Session.bind_table), [bulk_insert_mappings()](#sqlalchemy.orm.Session.bulk_insert_mappings),
    [bulk_save_objects()](#sqlalchemy.orm.Session.bulk_save_objects), [bulk_update_mappings()](#sqlalchemy.orm.Session.bulk_update_mappings),
    [close()](#sqlalchemy.orm.Session.close), [close_all()](#sqlalchemy.orm.Session.close_all),
    [commit()](#sqlalchemy.orm.Session.commit), [connection()](#sqlalchemy.orm.Session.connection),
    [delete()](#sqlalchemy.orm.Session.delete), [deleted](#sqlalchemy.orm.Session.deleted),
    [dirty](#sqlalchemy.orm.Session.dirty), [enable_relationship_loading()](#sqlalchemy.orm.Session.enable_relationship_loading),
    [execute()](#sqlalchemy.orm.Session.execute), [expire()](#sqlalchemy.orm.Session.expire),
    [expire_all()](#sqlalchemy.orm.Session.expire_all), [expunge()](#sqlalchemy.orm.Session.expunge),
    [expunge_all()](#sqlalchemy.orm.Session.expunge_all), [flush()](#sqlalchemy.orm.Session.flush),
    [get()](#sqlalchemy.orm.Session.get), [get_bind()](#sqlalchemy.orm.Session.get_bind),
    [get_nested_transaction()](#sqlalchemy.orm.Session.get_nested_transaction), [get_one()](#sqlalchemy.orm.Session.get_one),
    [get_transaction()](#sqlalchemy.orm.Session.get_transaction), [identity_key()](#sqlalchemy.orm.Session.identity_key),
    [identity_map](#sqlalchemy.orm.Session.identity_map), [in_nested_transaction()](#sqlalchemy.orm.Session.in_nested_transaction),
    [in_transaction()](#sqlalchemy.orm.Session.in_transaction), [info](#sqlalchemy.orm.Session.info),
    [invalidate()](#sqlalchemy.orm.Session.invalidate), [is_active](#sqlalchemy.orm.Session.is_active),
    [is_modified()](#sqlalchemy.orm.Session.is_modified), [merge()](#sqlalchemy.orm.Session.merge),
    [new](#sqlalchemy.orm.Session.new), [no_autoflush](#sqlalchemy.orm.Session.no_autoflush),
    [object_session()](#sqlalchemy.orm.Session.object_session), [prepare()](#sqlalchemy.orm.Session.prepare),
    [query()](#sqlalchemy.orm.Session.query), [refresh()](#sqlalchemy.orm.Session.refresh),
    [reset()](#sqlalchemy.orm.Session.reset), [rollback()](#sqlalchemy.orm.Session.rollback),
    [scalar()](#sqlalchemy.orm.Session.scalar), [scalars()](#sqlalchemy.orm.Session.scalars)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    (`sqlalchemy.orm.session._SessionClassMethods`, `sqlalchemy.event.registry.EventTarget`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See also the [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    function which is used to generate a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")-producing
    callable with a given set of arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`autoflush` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `True`, all query operations will issue a [`Session.flush()`](#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") call to this `Session` before proceeding. This
    is a convenience feature so that [`Session.flush()`](#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") need not be called repeatedly in order for database
    queries to retrieve results.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Flushing](session_basics.html#session-flushing) - additional background on
    autoflush'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`autobegin` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatically start transactions (i.e. equivalent to invoking [`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")) when database access is requested by an operation.
    Defaults to `True`. Set to `False` to prevent a [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") from implicitly beginning transactions after construction,
    as well as after any of the [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback"), [`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit"), or [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") methods are called.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Disabling Autobegin to Prevent Implicit Transactions](session_basics.html#session-autobegin-disable)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`bind` – An optional [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") to which this `Session` should be bound. When
    specified, all SQL operations performed by this session will execute via this
    connectable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`binds` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A dictionary which may specify any number of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects as the source of connectivity for SQL
    operations on a per-entity basis. The keys of the dictionary consist of any series
    of mapped classes, arbitrary Python classes that are bases for mapped classes,
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects and [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects. The values of the dictionary are then instances of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or less commonly [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects. Operations which proceed relative to
    a particular mapped class will consult this dictionary for the closest matching
    entity in order to determine which [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") should be used for a particular SQL operation. The
    complete heuristics for resolution are described at [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind"). Usage looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`class_` – Specify an alternate class other than `sqlalchemy.orm.session.Session`
    which should be used by the returned class. This is the only argument that is
    local to the [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    function, and is not sent directly to the constructor for `Session`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enable_baked_queries` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: legacy; defaults to `True`. A parameter consumed by the [`sqlalchemy.ext.baked`](extensions/baked.html#module-sqlalchemy.ext.baked
    "sqlalchemy.ext.baked") extension to determine if “baked queries” should be cached,
    as is the normal operation of this extension. When set to `False`, caching as
    used by this particular extension is disabled.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `sqlalchemy.ext.baked` extension is legacy and
    is not used by any of SQLAlchemy’s internals. This flag therefore only affects
    applications that are making explicit use of this extension within their own code.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`expire_on_commit` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defaults to `True`. When `True`, all instances will be fully expired after each
    [`commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit"),
    so that all attribute/object access subsequent to a completed transaction will
    load from the most recent database state.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Committing](session_basics.html#session-committing)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`future` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecated; this flag is always True.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[SQLAlchemy 2.0 - Major Migration Guide](../changelog/migration_20.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`info` – optional dictionary of arbitrary data to be associated with this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). Is available via the [`Session.info`](#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info") attribute. Note the dictionary is copied at construction
    time so that modifications to the per- [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    dictionary will be local to that [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`query_cls` – Class which should be used to create new Query objects, as returned
    by the [`Session.query()`](#sqlalchemy.orm.Session.query "sqlalchemy.orm.Session.query")
    method. Defaults to [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`twophase` – When `True`, all transactions will be started as a “two phase”
    transaction, i.e. using the “two phase” semantics of the database in use along
    with an XID. During a [`commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit"),
    after [`flush()`](#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush")
    has been issued for all attached databases, the [`TwoPhaseTransaction.prepare()`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") method on each database’s [`TwoPhaseTransaction`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction") will be called. This allows each database
    to roll back the entire transaction, before each transaction is committed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autocommit` – the “autocommit” keyword is present for backwards compatibility
    but must remain at its default value of `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`join_transaction_mode` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describes the transactional behavior to take when a given bind is a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") that has already begun a transaction outside the
    scope of this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"); in
    other words the [`Connection.in_transaction()`](../core/connections.html#sqlalchemy.engine.Connection.in_transaction
    "sqlalchemy.engine.Connection.in_transaction") method returns True.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following behaviors only take effect when the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") **actually makes use of the connection given**; that
    is, a method such as [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute"),
    [`Session.connection()`](#sqlalchemy.orm.Session.connection "sqlalchemy.orm.Session.connection"),
    etc. are actually invoked:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"conditional_savepoint"` - this is the default. if the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is begun within a transaction but does not have
    a SAVEPOINT, then `"rollback_only"` is used. If the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is additionally within a SAVEPOINT, in other words
    [`Connection.in_nested_transaction()`](../core/connections.html#sqlalchemy.engine.Connection.in_nested_transaction
    "sqlalchemy.engine.Connection.in_nested_transaction") method returns True, then
    `"create_savepoint"` is used.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"conditional_savepoint"` behavior attempts to make use of savepoints in order
    to keep the state of the existing transaction unchanged, but only if there is
    already a savepoint in progress; otherwise, it is not assumed that the backend
    in use has adequate support for SAVEPOINT, as availability of this feature varies.
    `"conditional_savepoint"` also seeks to establish approximate backwards compatibility
    with previous [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") behavior,
    for applications that are not setting a specific mode. It is recommended that
    one of the explicit settings be used.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"create_savepoint"` - the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will use [`Connection.begin_nested()`](../core/connections.html#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") in all cases to create its own transaction.
    This transaction by its nature rides “on top” of any existing transaction that’s
    opened on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"); if the underlying database and the driver in
    use has full, non-broken support for SAVEPOINT, the external transaction will
    remain unaffected throughout the lifespan of the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `"create_savepoint"` mode is the most useful for integrating a [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") into a test suite where an externally initiated transaction
    should remain unaffected; however, it relies on proper SAVEPOINT support from
    the underlying driver and database.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: When using SQLite, the SQLite driver included through Python 3.11 does not handle
    SAVEPOINTs correctly in all cases without workarounds. See the sections [Serializable
    isolation / Savepoints / Transactional DDL](../dialects/sqlite.html#pysqlite-serializable)
    and [Serializable isolation / Savepoints / Transactional DDL (asyncio version)](../dialects/sqlite.html#aiosqlite-serializable)
    for details on current workarounds.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"control_fully"` - the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will take control of the given transaction as its own; [`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") will call `.commit()` on the transaction, [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") will call `.rollback()` on the transaction,
    [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    will call `.rollback` on the transaction.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: This mode of use is equivalent to how SQLAlchemy 1.4 would handle a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") given with an existing SAVEPOINT (i.e. [`Connection.begin_nested()`](../core/connections.html#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested")); the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") would take full control of the existing SAVEPOINT.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"rollback_only"` - the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will take control of the given transaction for `.rollback()` calls only; `.commit()`
    calls will not be propagated to the given transaction. `.close()` calls will have
    no effect on the given transaction.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: This mode of use is equivalent to how SQLAlchemy 1.4 would handle a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") given with an existing regular database transaction
    (i.e. [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")); the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") would propagate [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") calls to the underlying transaction, but not
    [`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    or [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    calls.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.0rc1.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`close_resets_only` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defaults to `True`. Determines if the session should reset itself after calling
    `.close()` or should pass in a no longer usable state, disabling re-use.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 2.0.22: added flag `close_resets_only`. A future SQLAlchemy
    version may change the default value of this flag to `False`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Closing](session_basics.html#session-closing) - Detail on the semantics of
    [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Place an object into this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Objects that are in the [transient](../glossary.html#term-transient) state when
    passed to the [`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    method will move to the [pending](../glossary.html#term-pending) state, until
    the next flush, at which point they will move to the [persistent](../glossary.html#term-persistent)
    state.
  prefs: []
  type: TYPE_NORMAL
- en: Objects that are in the [detached](../glossary.html#term-detached) state when
    passed to the [`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    method will move to the [persistent](../glossary.html#term-persistent) state directly.
  prefs: []
  type: TYPE_NORMAL
- en: If the transaction used by the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is rolled back, objects which were transient when they were passed to [`Session.add()`](#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") will be moved back to the [transient](../glossary.html#term-transient)
    state, and will no longer be present within this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.add_all()`](#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding New or Existing Items](session_basics.html#session-adding) - at [Basics
    of Using a Session](session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Add the given collection of instances to this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    for a general behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding New or Existing Items](session_basics.html#session-adding) - at [Basics
    of Using a Session](session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Begin a transaction, or nested transaction, on this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), if one is not already begun.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") object features
    **autobegin** behavior, so that normally it is not necessary to call the [`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") method explicitly. However, it may be used in
    order to control the scope of when the transactional state is begun.
  prefs: []
  type: TYPE_NORMAL
- en: When used to begin the outermost transaction, an error is raised if this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is already inside of a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**nested** – if True, begins a SAVEPOINT transaction and is equivalent to calling
    [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested").
    For documentation on SAVEPOINT transactions, please see [Using SAVEPOINT](session_transaction.html#session-begin-nested).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    object. Note that [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    acts as a Python context manager, allowing [`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") to be used in a “with” block. See [Explicit Begin](session_transaction.html#session-explicit-begin)
    for an example.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Auto Begin](session_basics.html#session-autobegin)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Begin a “nested” transaction on this Session, e.g. SAVEPOINT.
  prefs: []
  type: TYPE_NORMAL
- en: The target database(s) and associated drivers must support SQL SAVEPOINT for
    this method to function correctly.
  prefs: []
  type: TYPE_NORMAL
- en: For documentation on SAVEPOINT transactions, please see [Using SAVEPOINT](session_transaction.html#session-begin-nested).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    object. Note that [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    acts as a context manager, allowing [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") to be used in a “with” block. See [Using
    SAVEPOINT](session_transaction.html#session-begin-nested) for a usage example.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using SAVEPOINT](session_transaction.html#session-begin-nested)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Serializable isolation / Savepoints / Transactional DDL](../dialects/sqlite.html#pysqlite-serializable)
    - special workarounds required with the SQLite driver in order for SAVEPOINT to
    work correctly. For asyncio use cases, see the section [Serializable isolation
    / Savepoints / Transactional DDL (asyncio version)](../dialects/sqlite.html#aiosqlite-serializable).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Associate a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    or arbitrary Python class with a “bind”, e.g. an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: The given entity is added to a lookup used by the [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    object, or an instance of a mapped class, or any Python class that is the base
    of a set of mapped classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bind` – an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Associate a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    with a “bind”, e.g. an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: The given [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    is added to a lookup used by the [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`table` – a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, which is typically the target of an ORM mapping, or is present within
    a selectable that is mapped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bind` – an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Perform a bulk insert of the given list of mapping dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
    The 2.0 API shares implementation details with this method and adds new features
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – a mapped class, or the actual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object, representing the single kind of object represented
    within the mapping list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mappings` – a sequence of dictionaries, each one containing the state of the
    mapped row to be inserted, in terms of the attribute names on the mapped class.
    If the mapping refers to multiple tables, such as a joined-inheritance mapping,
    each dictionary must contain all keys to be populated into all tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_defaults` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when True, the INSERT process will be altered to ensure that newly generated
    primary key values will be fetched. The rationale for this parameter is typically
    to enable [Joined Table Inheritance](inheritance.html#joined-inheritance) mappings
    to be bulk inserted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: for backends that don’t support RETURNING, the [`Session.bulk_insert_mappings.return_defaults`](#sqlalchemy.orm.Session.bulk_insert_mappings.params.return_defaults
    "sqlalchemy.orm.Session.bulk_insert_mappings") parameter can significantly decrease
    performance as INSERT statements can no longer be batched. See [“Insert Many Values”
    Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    for background on which backends are affected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`render_nulls` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When True, a value of `None` will result in a NULL value being included in the
    INSERT statement, rather than the column being omitted from the INSERT. This allows
    all the rows being INSERTed to have the identical set of columns which allows
    the full set of rows to be batched to the DBAPI. Normally, each column-set that
    contains a different combination of NULL values than the previous row must omit
    a different series of columns from the rendered INSERT statement, which means
    it must be emitted as a separate statement. By passing this flag, the full set
    of rows are guaranteed to be batchable into one batch; the cost however is that
    server-side defaults which are invoked by an omitted column will be skipped, so
    care must be taken to ensure that these are not necessary.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When this flag is set, **server side default SQL values will not be invoked**
    for those columns that are inserted as NULL; the NULL value will be sent explicitly.
    Care must be taken to ensure that no server-side default functions need to be
    invoked for the operation as a whole.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_save_objects()`](#sqlalchemy.orm.Session.bulk_save_objects "sqlalchemy.orm.Session.bulk_save_objects")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_update_mappings()`](#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Perform a bulk save of the given list of objects.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
  prefs: []
  type: TYPE_NORMAL
- en: For general INSERT and UPDATE of existing ORM mapped objects, prefer standard
    [unit of work](../glossary.html#term-unit-of-work) data management patterns, introduced
    in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)
    at [Data Manipulation with the ORM](../tutorial/orm_data_manipulation.html#tutorial-orm-data-manipulation).
    SQLAlchemy 2.0 now uses [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    with modern dialects which solves previous issues of bulk INSERT slowness.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`objects` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a sequence of mapped object instances. The mapped objects are persisted as is,
    and are **not** associated with the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    afterwards.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For each object, whether the object is sent as an INSERT or an UPDATE is dependent
    on the same rules used by the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    in traditional operation; if the object has the `InstanceState.key` attribute
    set, then the object is assumed to be “detached” and will result in an UPDATE.
    Otherwise, an INSERT is used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the case of an UPDATE, statements are grouped based on which attributes have
    changed, and are thus to be the subject of each SET clause. If `update_changed_only`
    is False, then all attributes present within each object are applied to the UPDATE
    statement, which may help in allowing the statements to be grouped together into
    a larger executemany(), and will also reduce the overhead of checking history
    on attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_defaults` – when True, rows that are missing values which generate
    defaults, namely integer primary key defaults and sequences, will be inserted
    `one at a time`, so that the primary key value is available. In particular this
    will allow joined-inheritance and other multi-table mappings to insert correctly
    without the need to provide primary key values ahead of time; however, [`Session.bulk_save_objects.return_defaults`](#sqlalchemy.orm.Session.bulk_save_objects.params.return_defaults
    "sqlalchemy.orm.Session.bulk_save_objects") `greatly reduces the performance gains`
    of the method overall. It is strongly advised to please use the standard [`Session.add_all()`](#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all") approach.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update_changed_only` – when True, UPDATE statements are rendered based on
    those attributes in each state that have logged changes. When False, all attributes
    present are rendered into the SET clause with the exception of primary key attributes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`preserve_order` – when True, the order of inserts and updates matches exactly
    the order in which the objects are given. When False, common types of objects
    are grouped into inserts and updates, to allow for more batching opportunities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_insert_mappings()`](#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_update_mappings()`](#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Perform a bulk update of the given list of mapping dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
    The 2.0 API shares implementation details with this method and adds new features
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – a mapped class, or the actual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object, representing the single kind of object represented
    within the mapping list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mappings` – a sequence of dictionaries, each one containing the state of the
    mapped row to be updated, in terms of the attribute names on the mapped class.
    If the mapping refers to multiple tables, such as a joined-inheritance mapping,
    each dictionary may contain keys corresponding to all tables. All those keys which
    are present and are not part of the primary key are applied to the SET clause
    of the UPDATE statement; the primary key values, which are required, are applied
    to the WHERE clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_insert_mappings()`](#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_save_objects()`](#sqlalchemy.orm.Session.bulk_save_objects "sqlalchemy.orm.Session.bulk_save_objects")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Close out the transactional resources and ORM objects used by this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: This expunges all ORM objects associated with this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), ends any transaction in progress and [releases](../glossary.html#term-releases)
    any [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    objects which this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    itself has checked out from associated [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects. The operation then leaves the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in a state which it may be used again.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: In the default running mode the [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method **does not prevent the Session from being
    used again**. The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    itself does not actually have a distinct “closed” state; it merely means the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will release all database connections and ORM objects.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the parameter [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") to `False` will instead make the `close` final, meaning
    that any further action on the session will be forbidden.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method does not immediately create a new [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object; instead, the new [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is created only if the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is used again for a database operation.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Closing](session_basics.html#session-closing) - detail on the semantics of
    [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - a similar method that behaves like `close()` with the parameter [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") set to `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.close_all`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  prefs: []
  type: TYPE_NORMAL
- en: Close *all* sessions in memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.3: The [`Session.close_all()`](#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all") method is deprecated and will be removed in
    a future release. Please refer to `close_all_sessions()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Flush pending changes and commit the current transaction.
  prefs: []
  type: TYPE_NORMAL
- en: When the COMMIT operation is complete, all objects are fully [expired](../glossary.html#term-expired),
    erasing their internal contents, which will be automatically re-loaded when the
    objects are next accessed. In the interim, these objects are in an expired state
    and will not function if they are [detached](../glossary.html#term-detached) from
    the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"). Additionally,
    this re-load operation is not supported when using asyncio-oriented APIs. The
    [`Session.expire_on_commit`](#sqlalchemy.orm.Session.params.expire_on_commit "sqlalchemy.orm.Session")
    parameter may be used to disable this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: When there is no transaction in place for the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), indicating that no operations were invoked on this
    [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") since the previous
    call to [`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit"),
    the method will begin and commit an internal-only “logical” transaction, that
    does not normally affect the database unless pending flush changes were detected,
    but will still invoke event handlers and object expiration rules.
  prefs: []
  type: TYPE_NORMAL
- en: The outermost database transaction is committed unconditionally, automatically
    releasing any SAVEPOINTs in effect.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Committing](session_basics.html#session-committing)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Preventing Implicit IO when Using AsyncSession](extensions/asyncio.html#asyncio-orm-avoid-lazyloads)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object corresponding to this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s transactional state.
  prefs: []
  type: TYPE_NORMAL
- en: Either the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") corresponding to the current transaction is returned,
    or if no transaction is in progress, a new one is begun and the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") returned (note that no transactional state is
    established with the DBAPI until the first SQL statement is emitted).
  prefs: []
  type: TYPE_NORMAL
- en: Ambiguity in multi-bind or unbound [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects can be resolved through any of the optional keyword arguments. This ultimately
    makes usage of the [`get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method for resolution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind_arguments` – dictionary of bind arguments. May include “mapper”, “bind”,
    “clause”, other custom arguments that are passed to [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a dictionary of execution options that will be passed to [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), **when the connection is first
    procured only**. If the connection is already present within the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), a warning is emitted and the arguments are ignored.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Setting Transaction Isolation Levels / DBAPI AUTOCOMMIT](session_transaction.html#session-transaction-isolation)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Mark an instance as deleted.
  prefs: []
  type: TYPE_NORMAL
- en: The object is assumed to be either [persistent](../glossary.html#term-persistent)
    or [detached](../glossary.html#term-detached) when passed; after the method is
    called, the object will remain in the [persistent](../glossary.html#term-persistent)
    state until the next flush proceeds. During this time, the object will also be
    a member of the [`Session.deleted`](#sqlalchemy.orm.Session.deleted "sqlalchemy.orm.Session.deleted")
    collection.
  prefs: []
  type: TYPE_NORMAL
- en: When the next flush proceeds, the object will move to the [deleted](../glossary.html#term-deleted)
    state, indicating a `DELETE` statement was emitted for its row within the current
    transaction. When the transaction is successfully committed, the deleted object
    is moved to the [detached](../glossary.html#term-detached) state and is no longer
    present within this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Deleting](session_basics.html#session-deleting) - at [Basics of Using a Session](session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The set of all instances marked as ‘deleted’ within this `Session`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The set of all persistent instances considered dirty.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Instances are considered dirty when they were modified but not deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this ‘dirty’ calculation is ‘optimistic’; most attribute-setting or
    collection modification operations will mark an instance as ‘dirty’ and place
    it in this set, even if there is no net change to the attribute’s value. At flush
    time, the value of each attribute is compared to its previously saved value, and
    if there’s no net change, no SQL operation will occur (this is a more expensive
    operation so it’s only done at flush time).
  prefs: []
  type: TYPE_NORMAL
- en: To check if an instance has actionable net changes to its attributes, use the
    [`Session.is_modified()`](#sqlalchemy.orm.Session.is_modified "sqlalchemy.orm.Session.is_modified")
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Associate an object with this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    for related object loading.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '[`enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") exists to serve special
    use cases and is not recommended for general use.'
  prefs: []
  type: TYPE_NORMAL
- en: Accesses of attributes mapped with [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") will attempt to load a value from the database
    using this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") as the
    source of connectivity. The values will be loaded based on foreign key and primary
    key values present on this object - if not present, then those relationships will
    be unavailable.
  prefs: []
  type: TYPE_NORMAL
- en: The object will be attached to this session, but will **not** participate in
    any persistence operations; its state for almost all purposes will remain either
    “transient” or “detached”, except for the case of relationship loading.
  prefs: []
  type: TYPE_NORMAL
- en: Also note that backrefs will often not work as expected. Altering a relationship-bound
    attribute on the target object may not fire off a backref event, if the effective
    value is what was already loaded from a foreign-key-holding value.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") method is similar to the
    `load_on_pending` flag on [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). Unlike that flag, [`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") allows an object to remain
    transient while still being able to load related items.
  prefs: []
  type: TYPE_NORMAL
- en: To make a transient object associated with a [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") via [`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") pending, add it to the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") using [`Session.add()`](#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") normally. If the object instead represents an existing
    identity in the database, it should be merged using [`Session.merge()`](#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge").
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") does not improve behavior
    when the ORM is used normally - object references should be constructed at the
    object level, not at the foreign key level, so that they are present in an ordinary
    way before flush() proceeds. This method is not intended for general use.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`relationship.load_on_pending`](relationship_api.html#sqlalchemy.orm.relationship.params.load_on_pending
    "sqlalchemy.orm.relationship") - this flag allows per-relationship loading of
    many-to-ones on items that are pending.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - allows for an object to be added
    to a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") without SQL
    emitted, which then will unexpire attributes on access.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Execute a SQL expression construct.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object representing results of the statement execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The API contract of [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    is similar to that of [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), the [2.0 style](../glossary.html#term-2.0-style)
    version of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: the [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method is now the primary point of ORM statement
    execution when using [2.0 style](../glossary.html#term-2.0-style) ORM usage.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`statement` – An executable statement (i.e. an [`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") expression such as [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params` – Optional dictionary, or list of dictionaries, containing bound parameter
    values. If a single dictionary, single-row execution occurs; if a list of dictionaries,
    an “executemany” will be invoked. The keys in each dictionary must correspond
    to parameter names present in the statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional dictionary of execution options, which will be associated with the
    statement execution. This dictionary can provide a subset of the options that
    are accepted by [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), and may also provide additional
    options understood only in an ORM context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)
    - ORM-specific execution options'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`bind_arguments` – dictionary of additional arguments to determine the bind.
    May include “mapper”, “bind”, or other custom arguments. Contents of this dictionary
    are passed to the [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Expire the attributes on an instance.
  prefs: []
  type: TYPE_NORMAL
- en: Marks the attributes of an instance as out of date. When an expired attribute
    is next accessed, a query will be issued to the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s current transactional context in order to load
    all expired attributes for the given instance. Note that a highly isolated transaction
    will return the same values as were previously read in that same transaction,
    regardless of changes in database state outside of that transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To expire all objects in the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    simultaneously, use [`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all").
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") object’s default
    behavior is to expire all state whenever the [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") or [`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") methods are called, so that new state can be
    loaded for the new transaction. For this reason, calling [`Session.expire()`](#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire") only makes sense for the specific case that a
    non-ORM SQL statement was emitted in the current transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – The instance to be refreshed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attribute_names` – optional list of string attribute names indicating a subset
    of attributes to be expired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Expires all persistent instances within this Session.
  prefs: []
  type: TYPE_NORMAL
- en: When any attributes on a persistent instance is next accessed, a query will
    be issued using the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s current transactional context in order to load all expired attributes
    for the given instance. Note that a highly isolated transaction will return the
    same values as were previously read in that same transaction, regardless of changes
    in database state outside of that transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To expire individual objects and individual attributes on those objects, use
    [`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire").
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") object’s default
    behavior is to expire all state whenever the [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") or [`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") methods are called, so that new state can be
    loaded for the new transaction. For this reason, calling [`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all") is not usually needed, assuming the transaction
    is isolated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Remove the instance from this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: This will free all internal references to the instance. Cascading will be applied
    according to the *expunge* cascade rule.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Remove all object instances from this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to calling `expunge(obj)` on all objects in this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Flush all the object changes to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Writes out all pending object creations, deletions and modifications to the
    database as INSERTs, DELETEs, UPDATEs, etc. Operations are automatically ordered
    by the Session’s unit of work dependency solver.
  prefs: []
  type: TYPE_NORMAL
- en: Database operations will be issued in the current transactional context and
    do not affect the state of the transaction, unless an error occurs, in which case
    the entire transaction is rolled back. You may flush() as often as you like within
    a transaction to move changes from Python to the database’s transaction buffer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**objects** –'
  prefs: []
  type: TYPE_NORMAL
- en: Optional; restricts the flush operation to operate only on elements that are
    in the given collection.
  prefs: []
  type: TYPE_NORMAL
- en: This feature is for an extremely narrow set of use cases where particular objects
    may need to be operated upon before the full flush() occurs. It is not intended
    for general use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.4: Added [`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get"),
    which is moved from the now legacy [`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    is special in that it provides direct access to the identity map of the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). If the given primary key identifier is present in the
    local identity map, the object is returned directly from this collection and no
    SQL is emitted, unless the object has been marked fully expired. If not present,
    a SELECT is performed in order to locate the object.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    also will perform a check if the object is present in the identity map and marked
    as expired - a SELECT is emitted to refresh the object as well as to ensure that
    the row is still present. If not, [`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") is raised.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`entity` – a mapped class or [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") indicating the type of entity to be loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ident` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A scalar, tuple, or dictionary representing the primary key. For a composite
    (e.g. multiple column) primary key, a tuple or dictionary should be passed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For a single-column primary key, the scalar calling form is typically the most
    expedient. If the primary key of a row is the value “5”, the call looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The tuple form contains primary key values typically in the order in which
    they correspond to the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object’s primary key columns, or if the [`Mapper.primary_key`](mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") configuration parameter were used, in the order used
    for that parameter. For example, if the primary key of a row is represented by
    the integer digits “5, 10” the call would look like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The dictionary form should include as keys the mapped attribute names corresponding
    to each element of the primary key. If the mapped class has the attributes `id`,
    `version_id` as the attributes which store the object’s primary key value, the
    call would look like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`options` – optional sequence of loader options which will be applied to the
    query, if one is emitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`populate_existing` – causes the method to unconditionally emit a SQL query
    and refresh the object with the newly loaded data, regardless of whether or not
    the object is already present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_for_update` – optional boolean `True` indicating FOR UPDATE should be
    used, or may be a dictionary containing flags to indicate a more specific set
    of FOR UPDATE flags for the SELECT; flags should match the parameters of [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Supersedes the [`Session.refresh.lockmode`](#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional dictionary of execution options, which will be associated with the
    query execution if one is emitted. This dictionary can provide a subset of the
    options that are accepted by [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), and may also provide additional
    options understood only in an ORM context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.29.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)
    - ORM-specific execution options'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`bind_arguments` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionary of additional arguments to determine the bind. May include “mapper”,
    “bind”, or other custom arguments. Contents of this dictionary are passed to the
    [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The object instance, or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Return a “bind” to which this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is bound.
  prefs: []
  type: TYPE_NORMAL
- en: The “bind” is usually an instance of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), except in the case where the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has been explicitly bound directly to a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: For a multiply-bound or unbound [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    the `mapper` or `clause` arguments are used to determine the appropriate bind
    to return.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the “mapper” argument is usually present when [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") is called via an ORM operation such as a [`Session.query()`](#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"), each individual INSERT/UPDATE/DELETE operation
    within a [`Session.flush()`](#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush"),
    call, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'The order of resolution is:'
  prefs: []
  type: TYPE_NORMAL
- en: if mapper given and [`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")
    is present, locate a bind based first on the mapper in use, then on the mapped
    class in use, then on any base classes that are present in the `__mro__` of the
    mapped class, from more specific superclasses to more general.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if clause given and `Session.binds` is present, locate a bind based on [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects found in the given clause present in `Session.binds`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if `Session.binds` is present, return that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if clause given, attempt to return a bind linked to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the clause.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if mapper given, attempt to return a bind linked to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other selectable to which the mapper is mapped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No bind can be found, [`UnboundExecutionError`](../core/exceptions.html#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError") is raised.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method can be overridden on a user-defined subclass of [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to provide any kind of bind resolution scheme. See the
    example at [Custom Vertical Partitioning](persistence_techniques.html#session-custom-partitioning).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – Optional mapped class or corresponding [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") instance. The bind can be derived from a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") first by consulting the “binds” map associated with this
    [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"), and secondly by
    consulting the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    associated with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    to which the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    is mapped for a bind.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clause` – A [`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") (i.e. [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text"), etc.). If the `mapper` argument is not present
    or could not produce a bind, the given expression construct will be searched for
    a bound element, typically a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") associated with bound [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Return the current nested transaction in progress, if any.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Return exactly one instance based on the given primary key identifier, or raise
    an exception if not found.
  prefs: []
  type: TYPE_NORMAL
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows.
  prefs: []
  type: TYPE_NORMAL
- en: For a detailed documentation of the arguments see the method [`Session.get()`](#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.22.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The object instance.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - equivalent method that instead'
  prefs: []
  type: TYPE_NORMAL
- en: returns `None` if no row was found with the provided primary key
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Return the current root transaction in progress, if any.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.identity_key`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  prefs: []
  type: TYPE_NORMAL
- en: Return an identity key.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: A mapping of object identities to objects themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating through `Session.identity_map.values()` provides access to the full
    set of persistent objects (i.e., those that have row identity) currently in the
    session.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key "sqlalchemy.orm.util.identity_key")
    - helper function to produce the keys used in this dictionary.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    has begun a nested transaction, e.g. SAVEPOINT.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    has begun a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.is_active`](#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: A user-modifiable dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: The initial value of this dictionary can be populated using the `info` argument
    to the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") constructor
    or [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    constructor or factory methods. The dictionary here is always local to this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and can be modified independently of all other [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Close this Session, using connection invalidation.
  prefs: []
  type: TYPE_NORMAL
- en: This is a variant of [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    that will additionally ensure that the [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method will be called on each [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object that is currently in use for a transaction
    (typically there is only one connection unless the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is used with multiple engines).
  prefs: []
  type: TYPE_NORMAL
- en: This can be called when the database is known to be in a state where the connections
    are no longer safe to be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below illustrates a scenario when using [gevent](https://www.gevent.org/),
    which can produce `Timeout` exceptions that may mean the underlying connection
    should be discarded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: The method additionally does everything that [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") does, including that all ORM objects are expunged.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: True if this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") not
    in “partial rollback” state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    no longer begins a new transaction immediately, so this attribute will be False
    when the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") is first
    instantiated.'
  prefs: []
  type: TYPE_NORMAL
- en: “partial rollback” state typically indicates that the flush process of the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has failed, and that the [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method must be emitted in order to fully roll
    back the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: If this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") is not
    in a transaction at all, the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will autobegin when it is first used, so in this case [`Session.is_active`](#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") will return True.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, if this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is within a transaction, and that transaction has not been rolled back internally,
    the [`Session.is_active`](#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will also return True.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[“This Session’s transaction has been rolled back due to a previous exception
    during flush.” (or similar)](../faq/sessions.html#faq-session-rollback)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.in_transaction()`](#sqlalchemy.orm.Session.in_transaction "sqlalchemy.orm.Session.in_transaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the given instance has locally modified attributes.
  prefs: []
  type: TYPE_NORMAL
- en: This method retrieves the history for each instrumented attribute on the instance
    and performs a comparison of the current value to its previously committed value,
    if any.
  prefs: []
  type: TYPE_NORMAL
- en: It is in effect a more expensive and accurate version of checking for the given
    instance in the [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")
    collection; a full test for each attribute’s net “dirty” status is performed.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'A few caveats to this method apply:'
  prefs: []
  type: TYPE_NORMAL
- en: Instances present in the [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")
    collection may report `False` when tested with this method. This is because the
    object may have received change events via attribute mutation, thus placing it
    in [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty"),
    but ultimately the state is the same as that loaded from the database, resulting
    in no net change here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalar attributes may not have recorded the previously set value when a new
    value was applied, if the attribute was not loaded, or was expired, at the time
    the new value was received - in these cases, the attribute is assumed to have
    a change, even if there is ultimately no net change against its database value.
    SQLAlchemy in most cases does not need the “old” value when a set event occurs,
    so it skips the expense of a SQL call if the old value isn’t present, based on
    the assumption that an UPDATE of the scalar value is usually needed, and in those
    few cases where it isn’t, is less expensive on average than issuing a defensive
    SELECT.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “old” value is fetched unconditionally upon set only if the attribute container
    has the `active_history` flag set to `True`. This flag is set typically for primary
    key attributes and scalar object references that are not a simple many-to-one.
    To set this flag for any arbitrary mapped column, use the `active_history` argument
    with [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – mapped instance to be tested for pending changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_collections` – Indicates if multivalued collections should be included
    in the operation. Setting this to `False` is a way to detect only local-column
    based properties (i.e. scalar columns or many-to-one foreign keys) that would
    result in an UPDATE for this instance upon flush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Copy the state of a given instance into a corresponding instance within this
    [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.merge()`](#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    examines the primary key attributes of the source instance, and attempts to reconcile
    it with an instance of the same primary key in the session. If not found locally,
    it attempts to load the object from the database based on primary key, and if
    none can be located, creates a new instance. The state of each attribute on the
    source instance is then copied to the target instance. The resulting target instance
    is then returned by the method; the original source instance is left unmodified,
    and un-associated with the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    if not already.'
  prefs: []
  type: TYPE_NORMAL
- en: This operation cascades to associated instances if the association is mapped
    with `cascade="merge"`.
  prefs: []
  type: TYPE_NORMAL
- en: See [Merging](session_state_management.html#unitofwork-merging) for a detailed
    discussion of merging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – Instance to be merged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`load` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean, when False, [`merge()`](#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    switches into a “high performance” mode which causes it to forego emitting history
    events as well as all database access. This flag is used for cases such as transferring
    graphs of objects into a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    from a second level cache, or to transfer just-loaded objects into the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") owned by a worker thread or process without re-querying
    the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `load=False` use case adds the caveat that the given object has to be in
    a “clean” state, that is, has no pending changes to be flushed - even if the incoming
    object is detached from any [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    This is so that when the merge operation populates local attributes and cascades
    to related objects and collections, the values can be “stamped” onto the target
    object as is, without generating any history or attribute events, and without
    the need to reconcile the incoming data with any existing related objects or collections
    that might not be loaded. The resulting objects from `load=False` are always produced
    as “clean”, so it is only appropriate that the given objects should be “clean”
    as well, else this suggests a mis-use of the method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional sequence of loader options which will be applied to the [`Session.get()`](#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") method when the merge operation loads the existing
    version of the object from the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - provides for an alternative means
    of “merging” a single object into the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: The set of all instances marked as ‘new’ within this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Return a context manager that disables autoflush.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Operations that proceed within the `with:` block will not be subject to flushes
    occurring upon query access. This is useful when initializing a series of objects
    which involve existing database queries, where the uncompleted object should not
    yet be flushed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.object_session`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  prefs: []
  type: TYPE_NORMAL
- en: Return the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") to
    which an object belongs.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`object_session()`](#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Prepare the current transaction in progress for two phase commit.
  prefs: []
  type: TYPE_NORMAL
- en: If no transaction is in progress, this method raises an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError").
  prefs: []
  type: TYPE_NORMAL
- en: Only root transactions of two phase sessions can be prepared. If the current
    transaction is not such, an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object corresponding to this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Note that the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object is legacy as of SQLAlchemy 2.0; the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct is now used to construct ORM queries.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Querying Guide](queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Legacy Query API](queryguide/query.html) - legacy API doc'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Expire and refresh attributes on the given instance.
  prefs: []
  type: TYPE_NORMAL
- en: The selected attributes will first be expired as they would when using [`Session.expire()`](#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire"); then a SELECT statement will be issued to the
    database to refresh column-oriented attributes with the current value available
    in the current transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    oriented attributes will also be immediately loaded if they were already eagerly
    loaded on the object, using the same eager loading strategy that they were loaded
    with originally.'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: - the [`Session.refresh()`](#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method can also refresh eagerly loaded attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    oriented attributes that would normally load using the `select` (or “lazy”) loader
    strategy will also load **if they are named explicitly in the attribute_names
    collection**, emitting a SELECT statement for the attribute using the `immediate`
    loader strategy. If lazy-loaded relationships are not named in [`Session.refresh.attribute_names`](#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh"), then they remain as “lazy loaded” attributes
    and are not implicitly refreshed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.4: The [`Session.refresh()`](#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method will now refresh lazy-loaded [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") oriented attributes for those which are named explicitly
    in the [`Session.refresh.attribute_names`](#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") collection.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: While the [`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    method is capable of refreshing both column and relationship oriented attributes,
    its primary focus is on refreshing of local column-oriented attributes on a single
    instance. For more open ended “refresh” functionality, including the ability to
    refresh the attributes on many objects at once while having explicit control over
    relationship loader strategies, use the [populate existing](queryguide/api.html#orm-queryguide-populate-existing)
    feature instead.
  prefs: []
  type: TYPE_NORMAL
- en: Note that a highly isolated transaction will return the same values as were
    previously read in that same transaction, regardless of changes in database state
    outside of that transaction. Refreshing attributes usually only makes sense at
    the start of a transaction where database rows have not yet been accessed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`attribute_names` – optional. An iterable collection of string attribute names
    indicating a subset of attributes to be refreshed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_for_update` – optional boolean `True` indicating FOR UPDATE should be
    used, or may be a dictionary containing flags to indicate a more specific set
    of FOR UPDATE flags for the SELECT; flags should match the parameters of [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Supersedes the [`Session.refresh.lockmode`](#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all "sqlalchemy.orm.Session.expire_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Populate Existing](queryguide/api.html#orm-queryguide-populate-existing) -
    allows any ORM query to refresh objects as they would be loaded normally.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Close out the transactional resources and ORM objects used by this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), resetting the session to its initial state.
  prefs: []
  type: TYPE_NORMAL
- en: This method provides for same “reset-only” behavior that the [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method has provided historically, where the state
    of the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") is reset
    as though the object were brand new, and ready to be used again. This method may
    then be useful for [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects which set [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") to `False`, so that “reset only” behavior is still available.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.22.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Closing](session_basics.html#session-closing) - detail on the semantics of
    [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - a similar method will additionally prevent re-use of the Session when the parameter
    [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") is set to `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Rollback the current transaction in progress.
  prefs: []
  type: TYPE_NORMAL
- en: If no transaction is in progress, this method is a pass-through.
  prefs: []
  type: TYPE_NORMAL
- en: The method always rolls back the topmost database transaction, discarding any
    nested transactions that may be in progress.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Rolling Back](session_basics.html#session-rollback)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a scalar result.
  prefs: []
  type: TYPE_NORMAL
- en: Usage and parameters are the same as that of [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"); the return result is a scalar Python value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return the results as scalars.
  prefs: []
  type: TYPE_NORMAL
- en: Usage and parameters are the same as that of [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"); the return result is a [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") filtering object which will return single elements
    rather than [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    object
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.24: Added [`Session.scalars()`](#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.26: Added [`scoped_session.scalars()`](contextual.html#sqlalchemy.orm.scoped_session.scalars
    "sqlalchemy.orm.scoped_session.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Selecting ORM Entities](queryguide/select.html#orm-queryguide-select-orm-entities)
    - contrasts the behavior of [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") to [`Session.scalars()`](#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: A [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")-level transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    is produced from the [`Session.begin()`](#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")
    and [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")
    methods. It’s largely an internal object that in modern use provides a context
    manager for session transactions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Documentation on interacting with [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is at: [Managing Transactions](session_transaction.html#unitofwork-transaction).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The scoping and API methods to work with the [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object directly have been simplified.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.begin()`](#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.rollback()`](#sqlalchemy.orm.Session.rollback "sqlalchemy.orm.Session.rollback")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.in_transaction()`](#sqlalchemy.orm.Session.in_transaction "sqlalchemy.orm.Session.in_transaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.in_nested_transaction()`](#sqlalchemy.orm.Session.in_nested_transaction
    "sqlalchemy.orm.Session.in_nested_transaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get_transaction()`](#sqlalchemy.orm.Session.get_transaction "sqlalchemy.orm.Session.get_transaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get_nested_transaction()`](#sqlalchemy.orm.Session.get_nested_transaction
    "sqlalchemy.orm.Session.get_nested_transaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[nested](#sqlalchemy.orm.SessionTransaction.nested), [origin](#sqlalchemy.orm.SessionTransaction.origin),
    [parent](#sqlalchemy.orm.SessionTransaction.parent)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") (`sqlalchemy.orm.state_changes._StateChange`,
    `sqlalchemy.engine.util.TransactionalContext`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Indicates if this is a nested, or SAVEPOINT, transaction.
  prefs: []
  type: TYPE_NORMAL
- en: When [`SessionTransaction.nested`](#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested") is True, it is expected that [`SessionTransaction.parent`](#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent") will be present as well, linking to
    the enclosing [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionTransaction.origin`](#sqlalchemy.orm.SessionTransaction.origin "sqlalchemy.orm.SessionTransaction.origin")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Origin of this [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: Refers to a [`SessionTransactionOrigin`](#sqlalchemy.orm.SessionTransactionOrigin
    "sqlalchemy.orm.SessionTransactionOrigin") instance which is an enumeration indicating
    the source event that led to constructing this [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: The parent [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    of this [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: If this attribute is `None`, indicates this [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is at the top of the stack, and corresponds
    to a real “COMMIT”/”ROLLBACK” block. If non-`None`, then this is either a “subtransaction”
    (an internal marker object used by the flush process) or a “nested” / SAVEPOINT
    transaction. If the [`SessionTransaction.nested`](#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested") attribute is `True`, then this is
    a SAVEPOINT, and if `False`, indicates this a subtransaction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: indicates the origin of a [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: This enumeration is present on the [`SessionTransaction.origin`](#sqlalchemy.orm.SessionTransaction.origin
    "sqlalchemy.orm.SessionTransaction.origin") attribute of any [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[AUTOBEGIN](#sqlalchemy.orm.SessionTransactionOrigin.AUTOBEGIN), [BEGIN](#sqlalchemy.orm.SessionTransactionOrigin.BEGIN),
    [BEGIN_NESTED](#sqlalchemy.orm.SessionTransactionOrigin.BEGIN_NESTED), [SUBTRANSACTION](#sqlalchemy.orm.SessionTransactionOrigin.SUBTRANSACTION)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.SessionTransactionOrigin`](#sqlalchemy.orm.SessionTransactionOrigin
    "sqlalchemy.orm.SessionTransactionOrigin") (`enum.Enum`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: transaction were started by autobegin
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: transaction were started by calling [`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: tranaction were started by [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: transaction is an internal “subtransaction”
  prefs: []
  type: TYPE_NORMAL
- en: Session Utilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [close_all_sessions](#sqlalchemy.orm.close_all_sessions)() | Close all sessions
    in memory. |'
  prefs: []
  type: TYPE_TB
- en: '| [make_transient](#sqlalchemy.orm.make_transient)(instance) | Alter the state
    of the given instance so that it is [transient](../glossary.html#term-transient).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [make_transient_to_detached](#sqlalchemy.orm.make_transient_to_detached)(instance)
    | Make the given transient instance [detached](../glossary.html#term-detached).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [object_session](#sqlalchemy.orm.object_session)(instance) | Return the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to which the given instance belongs. |'
  prefs: []
  type: TYPE_TB
- en: '| [was_deleted](#sqlalchemy.orm.util.was_deleted)(object_) | Return True if
    the given object was deleted within a session flush. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Close all sessions in memory.
  prefs: []
  type: TYPE_NORMAL
- en: This function consults a global registry of all [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects and calls [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") on them, which resets them to a clean state.
  prefs: []
  type: TYPE_NORMAL
- en: This function is not for general use but may be useful for test suites within
    the teardown scheme.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Alter the state of the given instance so that it is [transient](../glossary.html#term-transient).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")
    is a special-case function for advanced use cases only.'
  prefs: []
  type: TYPE_NORMAL
- en: The given mapped instance is assumed to be in the [persistent](../glossary.html#term-persistent)
    or [detached](../glossary.html#term-detached) state. The function will remove
    its association with any [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    as well as its [`InstanceState.identity`](internals.html#sqlalchemy.orm.InstanceState.identity
    "sqlalchemy.orm.InstanceState.identity"). The effect is that the object will behave
    as though it were newly constructed, except retaining any attribute / collection
    values that were loaded at the time of the call. The [`InstanceState.deleted`](internals.html#sqlalchemy.orm.InstanceState.deleted
    "sqlalchemy.orm.InstanceState.deleted") flag is also reset if this object had
    been deleted as a result of using [`Session.delete()`](#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete").
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")
    does **not** “unexpire” or otherwise eagerly load ORM-mapped attributes that are
    not currently loaded at the time the function is called. This includes attributes
    which:'
  prefs: []
  type: TYPE_NORMAL
- en: were expired via [`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: were expired as the natural effect of committing a session transaction, e.g.
    [`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: are normally [lazy loaded](../glossary.html#term-lazy-loaded) but are not currently
    loaded
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: are “deferred” (see [Limiting which Columns Load with Column Deferral](queryguide/columns.html#orm-queryguide-column-deferral))
    and are not yet loaded
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: were not present in the query which loaded this object, such as that which is
    common in joined table inheritance and other scenarios.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After [`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")
    is called, unloaded attributes such as those above will normally resolve to the
    value `None` when accessed, or an empty collection for a collection-oriented attribute.
    As the object is transient and un-associated with any database identity, it will
    no longer retrieve these values.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Make the given transient instance [detached](../glossary.html#term-detached).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") is a special-case function for advanced
    use cases only.'
  prefs: []
  type: TYPE_NORMAL
- en: All attribute history on the given instance will be reset as though the instance
    were freshly loaded from a query. Missing attributes will be marked as expired.
    The primary key attributes of the object, which are required, will be made into
    the “key” of the instance.
  prefs: []
  type: TYPE_NORMAL
- en: The object can then be added to a session, or merged possibly with the load=False
    flag, at which point it will look as if it were loaded that way, without emitting
    SQL.
  prefs: []
  type: TYPE_NORMAL
- en: This is a special use case function that differs from a normal call to [`Session.merge()`](#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") in that a given persistent state can be manufactured
    without any SQL calls.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") to
    which the given instance belongs.
  prefs: []
  type: TYPE_NORMAL
- en: This is essentially the same as the [`InstanceState.session`](internals.html#sqlalchemy.orm.InstanceState.session
    "sqlalchemy.orm.InstanceState.session") accessor. See that attribute for details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Return True if the given object was deleted within a session flush.
  prefs: []
  type: TYPE_NORMAL
- en: This is regardless of whether or not the object is persistent or detached.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceState.was_deleted`](internals.html#sqlalchemy.orm.InstanceState.was_deleted
    "sqlalchemy.orm.InstanceState.was_deleted")'
  prefs: []
  type: TYPE_NORMAL
- en: Attribute and State Management Utilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These functions are provided by the SQLAlchemy attribute instrumentation API
    to provide a detailed interface for dealing with instances, attribute values,
    and history. Some of them are useful when constructing event listener functions,
    such as those described in [ORM Events](events.html).
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [del_attribute](#sqlalchemy.orm.attributes.del_attribute)(instance, key)
    | Delete the value of an attribute, firing history events. |'
  prefs: []
  type: TYPE_TB
- en: '| [flag_dirty](#sqlalchemy.orm.attributes.flag_dirty)(instance) | Mark an instance
    as ‘dirty’ without any specific attribute mentioned. |'
  prefs: []
  type: TYPE_TB
- en: '| [flag_modified](#sqlalchemy.orm.attributes.flag_modified)(instance, key)
    | Mark an attribute on an instance as ‘modified’. |'
  prefs: []
  type: TYPE_TB
- en: '| [get_attribute](#sqlalchemy.orm.attributes.get_attribute)(instance, key)
    | Get the value of an attribute, firing any callables required. |'
  prefs: []
  type: TYPE_TB
- en: '| [get_history](#sqlalchemy.orm.attributes.get_history)(obj, key[, passive])
    | Return a [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    record for the given object and attribute key. |'
  prefs: []
  type: TYPE_TB
- en: '| [History](#sqlalchemy.orm.attributes.History) | A 3-tuple of added, unchanged
    and deleted values, representing the changes which have occurred on an instrumented
    attribute. |'
  prefs: []
  type: TYPE_TB
- en: '| [init_collection](#sqlalchemy.orm.attributes.init_collection)(obj, key) |
    Initialize a collection attribute and return the collection adapter. |'
  prefs: []
  type: TYPE_TB
- en: '| [instance_state](#sqlalchemy.orm.attributes.instance_state) | Return the
    [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    for a given mapped object. |'
  prefs: []
  type: TYPE_TB
- en: '| [is_instrumented](#sqlalchemy.orm.instrumentation.is_instrumented)(instance,
    key) | Return True if the given attribute on the given instance is instrumented
    by the attributes package. |'
  prefs: []
  type: TYPE_TB
- en: '| [object_state](#sqlalchemy.orm.util.object_state)(instance) | Given an object,
    return the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    associated with the object. |'
  prefs: []
  type: TYPE_TB
- en: '| [set_attribute](#sqlalchemy.orm.attributes.set_attribute)(instance, key,
    value[, initiator]) | Set the value of an attribute, firing history events. |'
  prefs: []
  type: TYPE_TB
- en: '| [set_committed_value](#sqlalchemy.orm.attributes.set_committed_value)(instance,
    key, value) | Set the value of an attribute with no history events. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Given an object, return the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") associated with the object.
  prefs: []
  type: TYPE_NORMAL
- en: Raises [`sqlalchemy.orm.exc.UnmappedInstanceError`](exceptions.html#sqlalchemy.orm.exc.UnmappedInstanceError
    "sqlalchemy.orm.exc.UnmappedInstanceError") if no mapping is configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Equivalent functionality is available via the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Using the inspection system will raise [`sqlalchemy.exc.NoInspectionAvailable`](../core/exceptions.html#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable") if the instance is not part of a mapping.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Delete the value of an attribute, firing history events.
  prefs: []
  type: TYPE_NORMAL
- en: This function may be used regardless of instrumentation applied directly to
    the class, i.e. no descriptors are required. Custom attribute management schemes
    will need to make usage of this method to establish attribute state as understood
    by SQLAlchemy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Get the value of an attribute, firing any callables required.
  prefs: []
  type: TYPE_NORMAL
- en: This function may be used regardless of instrumentation applied directly to
    the class, i.e. no descriptors are required. Custom attribute management schemes
    will need to make usage of this method to make usage of attribute state as understood
    by SQLAlchemy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    record for the given object and attribute key.
  prefs: []
  type: TYPE_NORMAL
- en: This is the **pre-flush** history for a given attribute, which is reset each
    time the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") flushes
    changes to the current database transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Prefer to use the [`AttributeState.history`](internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history") and [`AttributeState.load_history()`](internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history") accessors to retrieve the [`History`](#sqlalchemy.orm.attributes.History
    "sqlalchemy.orm.attributes.History") for instance attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`obj` – an object whose class is instrumented by the attributes package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` – string attribute name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`passive` – indicates loading behavior for the attribute if the value is not
    already present. This is a bitflag attribute, which defaults to the symbol `PASSIVE_OFF`
    indicating all necessary SQL should be emitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeState.history`](internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeState.load_history()`](internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history") - retrieve history using loader
    callables if the value is not locally present.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Initialize a collection attribute and return the collection adapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function is used to provide direct access to collection internals for
    a previously unloaded attribute. e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: For an easier way to do the above, see [`set_committed_value()`](#sqlalchemy.orm.attributes.set_committed_value
    "sqlalchemy.orm.attributes.set_committed_value").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`obj` – a mapped object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` – string attribute name where the collection is located.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Mark an attribute on an instance as ‘modified’.
  prefs: []
  type: TYPE_NORMAL
- en: This sets the ‘modified’ flag on the instance and establishes an unconditional
    change event for the given attribute. The attribute must have a value present,
    else an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised.
  prefs: []
  type: TYPE_NORMAL
- en: To mark an object “dirty” without referring to any specific attribute so that
    it is considered within a flush, use the [`flag_dirty()`](#sqlalchemy.orm.attributes.flag_dirty
    "sqlalchemy.orm.attributes.flag_dirty") call.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`flag_dirty()`](#sqlalchemy.orm.attributes.flag_dirty "sqlalchemy.orm.attributes.flag_dirty")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Mark an instance as ‘dirty’ without any specific attribute mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: This is a special operation that will allow the object to travel through the
    flush process for interception by events such as [`SessionEvents.before_flush()`](events.html#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush"). Note that no SQL will be emitted
    in the flush process for an object that has no changes, even if marked dirty via
    this method. However, a [`SessionEvents.before_flush()`](events.html#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") handler will be able to see the object
    in the [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")
    collection and may establish changes on it, which will then be included in the
    SQL emitted.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`flag_modified()`](#sqlalchemy.orm.attributes.flag_modified "sqlalchemy.orm.attributes.flag_modified")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    for a given mapped object.
  prefs: []
  type: TYPE_NORMAL
- en: This function is the internal version of [`object_state()`](#sqlalchemy.orm.util.object_state
    "sqlalchemy.orm.util.object_state"). The [`object_state()`](#sqlalchemy.orm.util.object_state
    "sqlalchemy.orm.util.object_state") and/or the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function is preferred here as they each emit an informative
    exception if the given object is not mapped.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Return True if the given attribute on the given instance is instrumented by
    the attributes package.
  prefs: []
  type: TYPE_NORMAL
- en: This function may be used regardless of instrumentation applied directly to
    the class, i.e. no descriptors are required.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Set the value of an attribute, firing history events.
  prefs: []
  type: TYPE_NORMAL
- en: This function may be used regardless of instrumentation applied directly to
    the class, i.e. no descriptors are required. Custom attribute management schemes
    will need to make usage of this method to establish attribute state as understood
    by SQLAlchemy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – the object that will be modified'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` – string name of the attribute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value` – value to assign'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initiator` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an instance of `Event` that would have been propagated from a previous event
    listener. This argument is used when the [`set_attribute()`](#sqlalchemy.orm.attributes.set_attribute
    "sqlalchemy.orm.attributes.set_attribute") function is being used within an existing
    event listening function where an `Event` object is being supplied; the object
    may be used to track the origin of the chain of events.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.2.3.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Set the value of an attribute with no history events.
  prefs: []
  type: TYPE_NORMAL
- en: Cancels any previous history present. The value should be a scalar value for
    scalar-holding attributes, or an iterable for any collection-holding attribute.
  prefs: []
  type: TYPE_NORMAL
- en: This is the same underlying method used when a lazy loader fires off and loads
    additional data from the database. In particular, this method can be used by application
    code which has loaded additional attributes or collections through separate queries,
    which can then be attached to an instance as though it were part of its original
    loaded state.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: A 3-tuple of added, unchanged and deleted values, representing the changes which
    have occurred on an instrumented attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to get a [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    object for a particular attribute on an object is to use the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'Each tuple member is an iterable sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '`added` - the collection of items added to the attribute (the first tuple element).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unchanged` - the collection of items that have not changed on the attribute
    (the second tuple element).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deleted` - the collection of items that have been removed from the attribute
    (the third tuple element).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[added](#sqlalchemy.orm.attributes.History.added), [deleted](#sqlalchemy.orm.attributes.History.deleted),
    [empty()](#sqlalchemy.orm.attributes.History.empty), [has_changes()](#sqlalchemy.orm.attributes.History.has_changes),
    [non_added()](#sqlalchemy.orm.attributes.History.non_added), [non_deleted()](#sqlalchemy.orm.attributes.History.non_deleted),
    [sum()](#sqlalchemy.orm.attributes.History.sum), [unchanged](#sqlalchemy.orm.attributes.History.unchanged)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class `sqlalchemy.orm.History` (`builtins.tuple`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: Alias for field number 0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: Alias for field number 2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    has no changes and no existing, unchanged state.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    has changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: Return a collection of unchanged + deleted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Return a collection of added + unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: Return a collection of added + unchanged + deleted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: Alias for field number 1
  prefs: []
  type: TYPE_NORMAL
- en: Session and sessionmaker()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [ORMExecuteState](#sqlalchemy.orm.ORMExecuteState) | Represents a call to
    the [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    method, as passed to the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook. |'
  prefs: []
  type: TYPE_TB
- en: '| [Session](#sqlalchemy.orm.Session) | Manages persistence operations for ORM-mapped
    objects. |'
  prefs: []
  type: TYPE_TB
- en: '| [sessionmaker](#sqlalchemy.orm.sessionmaker) | A configurable [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") factory. |'
  prefs: []
  type: TYPE_TB
- en: '| [SessionTransaction](#sqlalchemy.orm.SessionTransaction) | A [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")-level transaction. |'
  prefs: []
  type: TYPE_TB
- en: '| [SessionTransactionOrigin](#sqlalchemy.orm.SessionTransactionOrigin) | indicates
    the origin of a [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction").
    |'
  prefs: []
  type: TYPE_TB
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: A configurable [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    factory.
  prefs: []
  type: TYPE_NORMAL
- en: The [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    factory generates new [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects when called, creating them given the configurational arguments established
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: 'Context manager use is optional; otherwise, the returned [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object may be closed explicitly via the [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method. Using a `try:/finally:` block is optional,
    however will ensure that the close takes place even if there are database errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    acts as a factory for [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects in the same way as an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") acts as a factory for [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects. In this way it also includes a [`sessionmaker.begin()`](#sqlalchemy.orm.sessionmaker.begin
    "sqlalchemy.orm.sessionmaker.begin") method, that provides a context manager which
    both begins and commits a transaction, as well as closes out the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") when complete, rolling back the transaction if any errors
    occur:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'When calling upon [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    to construct a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    keyword arguments may also be passed to the method; these arguments will override
    that of the globally configured parameters. Below we use a [`sessionmaker`](#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") bound to a certain [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") to produce a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    that is instead bound to a specific [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") procured from that engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'The class also includes a method [`sessionmaker.configure()`](#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure"), which can be used to specify additional
    keyword arguments to the factory, which will take effect for subsequent [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects generated. This is usually used to associate
    one or more [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    objects with an existing [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    factory before it is first used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Opening and Closing a Session](session_basics.html#session-getting) - introductory
    text on creating sessions using [`sessionmaker`](#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__call__()](#sqlalchemy.orm.sessionmaker.__call__), [__init__()](#sqlalchemy.orm.sessionmaker.__init__),
    [begin()](#sqlalchemy.orm.sessionmaker.begin), [close_all()](#sqlalchemy.orm.sessionmaker.close_all),
    [configure()](#sqlalchemy.orm.sessionmaker.configure), [identity_key()](#sqlalchemy.orm.sessionmaker.identity_key),
    [object_session()](#sqlalchemy.orm.sessionmaker.object_session)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    (`sqlalchemy.orm.session._SessionClassMethods`, `typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: Produce a new [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object using the configuration established in this [`sessionmaker`](#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, the `__call__` method is invoked on an object when it is “called”
    in the same way as a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker").
  prefs: []
  type: TYPE_NORMAL
- en: All arguments here except for `class_` correspond to arguments accepted by [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") directly. See the [`Session.__init__()`](#sqlalchemy.orm.Session.__init__
    "sqlalchemy.orm.Session.__init__") docstring for more details on parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind` – a [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or other `Connectable` with which newly created [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects will be associated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_` – class to use in order to create new [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects. Defaults to [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoflush` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The autoflush setting to use with newly created [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Flushing](session_basics.html#session-flushing) - additional background on
    autoflush'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`expire_on_commit=True` – the [`Session.expire_on_commit`](#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") setting to use with newly created [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`info` – optional dictionary of information that will be available via [`Session.info`](#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info"). Note this dictionary is *updated*, not replaced,
    when the `info` parameter is specified to the specific [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") construction operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**kw` – all other keyword arguments are passed to the constructor of newly
    created [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: Produce a context manager that both provides a new [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") as well as a transaction that commits.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.close_all`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  prefs: []
  type: TYPE_NORMAL
- en: Close *all* sessions in memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.3: The [`Session.close_all()`](#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all") method is deprecated and will be removed in
    a future release. Please refer to `close_all_sessions()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: (Re)configure the arguments for this sessionmaker.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.identity_key`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  prefs: []
  type: TYPE_NORMAL
- en: Return an identity key.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.object_session`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  prefs: []
  type: TYPE_NORMAL
- en: Return the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") to
    which an object belongs.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`object_session()`](#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: Represents a call to the [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method, as passed to the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Execute Events](session_events.html#session-execute-events) - top level documentation
    on how to use [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.orm.ORMExecuteState.__init__), [all_mappers](#sqlalchemy.orm.ORMExecuteState.all_mappers),
    [bind_arguments](#sqlalchemy.orm.ORMExecuteState.bind_arguments), [bind_mapper](#sqlalchemy.orm.ORMExecuteState.bind_mapper),
    [execution_options](#sqlalchemy.orm.ORMExecuteState.execution_options), [invoke_statement()](#sqlalchemy.orm.ORMExecuteState.invoke_statement),
    [is_column_load](#sqlalchemy.orm.ORMExecuteState.is_column_load), [is_delete](#sqlalchemy.orm.ORMExecuteState.is_delete),
    [is_executemany](#sqlalchemy.orm.ORMExecuteState.is_executemany), [is_from_statement](#sqlalchemy.orm.ORMExecuteState.is_from_statement),
    [is_insert](#sqlalchemy.orm.ORMExecuteState.is_insert), [is_orm_statement](#sqlalchemy.orm.ORMExecuteState.is_orm_statement),
    [is_relationship_load](#sqlalchemy.orm.ORMExecuteState.is_relationship_load),
    [is_select](#sqlalchemy.orm.ORMExecuteState.is_select), [is_update](#sqlalchemy.orm.ORMExecuteState.is_update),
    [lazy_loaded_from](#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from), [load_options](#sqlalchemy.orm.ORMExecuteState.load_options),
    [loader_strategy_path](#sqlalchemy.orm.ORMExecuteState.loader_strategy_path),
    [local_execution_options](#sqlalchemy.orm.ORMExecuteState.local_execution_options),
    [parameters](#sqlalchemy.orm.ORMExecuteState.parameters), [session](#sqlalchemy.orm.ORMExecuteState.session),
    [statement](#sqlalchemy.orm.ORMExecuteState.statement), [update_delete_options](#sqlalchemy.orm.ORMExecuteState.update_delete_options),
    [update_execution_options()](#sqlalchemy.orm.ORMExecuteState.update_execution_options),
    [user_defined_options](#sqlalchemy.orm.ORMExecuteState.user_defined_options)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    (`sqlalchemy.util.langhelpers.MemoizedSlots`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState").
  prefs: []
  type: TYPE_NORMAL
- en: this object is constructed internally.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: Return a sequence of all [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects that are involved at the top level of this statement.
  prefs: []
  type: TYPE_NORMAL
- en: By “top level” we mean those [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects that would be represented in the result set rows
    for a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    query, or for a [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") or [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") query, the mapper that is the main subject
    of the UPDATE or DELETE.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ORMExecuteState.bind_mapper`](#sqlalchemy.orm.ORMExecuteState.bind_mapper
    "sqlalchemy.orm.ORMExecuteState.bind_mapper")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: The dictionary passed as the [`Session.execute.bind_arguments`](#sqlalchemy.orm.Session.execute.params.bind_arguments
    "sqlalchemy.orm.Session.execute") dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This dictionary may be used by extensions to [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to pass arguments that will assist in determining amongst
    a set of database connections which one should be used to invoke this statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    that is the primary “bind” mapper.
  prefs: []
  type: TYPE_NORMAL
- en: For an [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    object invoking an ORM statement, that is, the [`ORMExecuteState.is_orm_statement`](#sqlalchemy.orm.ORMExecuteState.is_orm_statement
    "sqlalchemy.orm.ORMExecuteState.is_orm_statement") attribute is `True`, this attribute
    will return the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    that is considered to be the “primary” mapper of the statement. The term “bind
    mapper” refers to the fact that a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object may be “bound” to multiple [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects keyed to mapped classes, and the “bind mapper”
    determines which of those [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects would be selected.
  prefs: []
  type: TYPE_NORMAL
- en: For a statement that is invoked against a single mapped class, [`ORMExecuteState.bind_mapper`](#sqlalchemy.orm.ORMExecuteState.bind_mapper
    "sqlalchemy.orm.ORMExecuteState.bind_mapper") is intended to be a reliable way
    of getting this mapper.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ORMExecuteState.all_mappers`](#sqlalchemy.orm.ORMExecuteState.all_mappers
    "sqlalchemy.orm.ORMExecuteState.all_mappers")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: The complete dictionary of current execution options.
  prefs: []
  type: TYPE_NORMAL
- en: This is a merge of the statement level options with the locally passed execution
    options.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ORMExecuteState.local_execution_options`](#sqlalchemy.orm.ORMExecuteState.local_execution_options
    "sqlalchemy.orm.ORMExecuteState.local_execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Executable.execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Execute the statement represented by this [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState"), without re-invoking events that have already
    proceeded.
  prefs: []
  type: TYPE_NORMAL
- en: This method essentially performs a re-entrant execution of the current statement
    for which the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event is being currently invoked.
    The use case for this is for event handlers that want to override how the ultimate
    [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object is returned, such as for schemes that retrieve results from an offline
    cache or which concatenate results from multiple executions.
  prefs: []
  type: TYPE_NORMAL
- en: When the [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object is returned by the actual handler function within [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") and is propagated to the calling
    [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    method, the remainder of the [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method is preempted and the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object is returned to the caller of [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") immediately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`statement` – optional statement to be invoked, in place of the statement currently
    represented by [`ORMExecuteState.statement`](#sqlalchemy.orm.ORMExecuteState.statement
    "sqlalchemy.orm.ORMExecuteState.statement").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional dictionary of parameters or list of parameters which will be merged
    into the existing [`ORMExecuteState.parameters`](#sqlalchemy.orm.ORMExecuteState.parameters
    "sqlalchemy.orm.ORMExecuteState.parameters") of this [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: a list of parameter dictionaries is accepted for executemany
    executions.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`execution_options` – optional dictionary of execution options will be merged
    into the existing [`ORMExecuteState.execution_options`](#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options") of this [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bind_arguments` – optional dictionary of bind_arguments which will be merged
    amongst the current [`ORMExecuteState.bind_arguments`](#sqlalchemy.orm.ORMExecuteState.bind_arguments
    "sqlalchemy.orm.ORMExecuteState.bind_arguments") of this [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object with ORM-level results.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Re-Executing Statements](session_events.html#do-orm-execute-re-executing)
    - background and examples on the appropriate usage of [`ORMExecuteState.invoke_statement()`](#sqlalchemy.orm.ORMExecuteState.invoke_statement
    "sqlalchemy.orm.ORMExecuteState.invoke_statement").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Return True if the operation is refreshing column-oriented attributes on an
    existing ORM object.
  prefs: []
  type: TYPE_NORMAL
- en: This occurs during operations such as [`Session.refresh()`](#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh"), as well as when an attribute deferred by [`defer()`](queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") is being loaded, or an attribute that was expired either
    directly by [`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")
    or via a commit operation is being loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Handlers will very likely not want to add any options to queries when such an
    operation is occurring as the query should be a straight primary key fetch which
    should not have any additional WHERE criteria, and loader options travelling with
    the instance will have already been added to the query.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ORMExecuteState.is_relationship_load`](#sqlalchemy.orm.ORMExecuteState.is_relationship_load
    "sqlalchemy.orm.ORMExecuteState.is_relationship_load")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: return True if this is a DELETE operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.30: - the attribute is also True for a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") construct that is itself against
    a [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    construct, such as `select(Entity).from_statement(delete(..))`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: return True if the parameters are a multi-element list of dictionaries with
    more than one dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: return True if this operation is a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") operation.
  prefs: []
  type: TYPE_NORMAL
- en: This is independent from [`ORMExecuteState.is_select`](#sqlalchemy.orm.ORMExecuteState.is_select
    "sqlalchemy.orm.ORMExecuteState.is_select"), as a `select().from_statement()`
    construct can be used with INSERT/UPDATE/DELETE RETURNING types of statements
    as well. [`ORMExecuteState.is_select`](#sqlalchemy.orm.ORMExecuteState.is_select
    "sqlalchemy.orm.ORMExecuteState.is_select") will only be set if the [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") is itself against a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.30.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: return True if this is an INSERT operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.30: - the attribute is also True for a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") construct that is itself against
    a [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct, such as `select(Entity).from_statement(insert(..))`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: return True if the operation is an ORM statement.
  prefs: []
  type: TYPE_NORMAL
- en: This indicates that the select(), insert(), update(), or delete() being invoked
    contains ORM entities as subjects. For a statement that does not have ORM entities
    and instead refers only to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") metadata, it is invoked as a Core SQL statement and
    no ORM-level automation takes place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this load is loading objects on behalf of a relationship.
  prefs: []
  type: TYPE_NORMAL
- en: This means, the loader in effect is either a LazyLoader, SelectInLoader, SubqueryLoader,
    or similar, and the entire SELECT statement being emitted is on behalf of a relationship
    load.
  prefs: []
  type: TYPE_NORMAL
- en: Handlers will very likely not want to add any options to queries when such an
    operation is occurring, as loader options are already capable of being propagated
    to relationship loaders and should be already present.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ORMExecuteState.is_column_load`](#sqlalchemy.orm.ORMExecuteState.is_column_load
    "sqlalchemy.orm.ORMExecuteState.is_column_load")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: return True if this is a SELECT operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.30: - the attribute is also True for a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") construct that is itself against
    a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct, such as `select(Entity).from_statement(select(..))`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: return True if this is an UPDATE operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.30: - the attribute is also True for a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") construct that is itself against
    a [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct, such as `select(Entity).from_statement(update(..))`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: An [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    that is using this statement execution for a lazy load operation.
  prefs: []
  type: TYPE_NORMAL
- en: The primary rationale for this attribute is to support the horizontal sharding
    extension, where it is available within specific query execution time hooks created
    by this extension. To that end, the attribute is only intended to be meaningful
    at **query execution time**, and importantly not any time prior to that, including
    query compilation time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: Return the load_options that will be used for this execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: Return the `PathRegistry` for the current load path.
  prefs: []
  type: TYPE_NORMAL
- en: This object represents the “path” in a query along relationships when a particular
    object or collection is being loaded.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: Dictionary view of the execution options passed to the [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method.
  prefs: []
  type: TYPE_NORMAL
- en: This does not include options that may be associated with the statement being
    invoked.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`ORMExecuteState.execution_options`](#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: Dictionary of parameters that was passed to [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") in use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: The SQL statement being invoked.
  prefs: []
  type: TYPE_NORMAL
- en: For an ORM selection as would be retrieved from [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), this is an instance of [`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") that was generated from the ORM query.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: Return the update_delete_options that will be used for this execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: Update the local execution options with new values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: The sequence of `UserDefinedOptions` that have been associated with the statement
    being invoked.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: Manages persistence operations for ORM-mapped objects.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") is **not safe
    for use in concurrent threads.**. See [Is the Session thread-safe? Is AsyncSession
    safe to share in concurrent tasks?](session_basics.html#session-faq-threadsafe)
    for background.
  prefs: []
  type: TYPE_NORMAL
- en: The Session’s usage paradigm is described at [Using the Session](session.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.orm.Session.__init__), [add()](#sqlalchemy.orm.Session.add),
    [add_all()](#sqlalchemy.orm.Session.add_all), [begin()](#sqlalchemy.orm.Session.begin),
    [begin_nested()](#sqlalchemy.orm.Session.begin_nested), [bind_mapper()](#sqlalchemy.orm.Session.bind_mapper),
    [bind_table()](#sqlalchemy.orm.Session.bind_table), [bulk_insert_mappings()](#sqlalchemy.orm.Session.bulk_insert_mappings),
    [bulk_save_objects()](#sqlalchemy.orm.Session.bulk_save_objects), [bulk_update_mappings()](#sqlalchemy.orm.Session.bulk_update_mappings),
    [close()](#sqlalchemy.orm.Session.close), [close_all()](#sqlalchemy.orm.Session.close_all),
    [commit()](#sqlalchemy.orm.Session.commit), [connection()](#sqlalchemy.orm.Session.connection),
    [delete()](#sqlalchemy.orm.Session.delete), [deleted](#sqlalchemy.orm.Session.deleted),
    [dirty](#sqlalchemy.orm.Session.dirty), [enable_relationship_loading()](#sqlalchemy.orm.Session.enable_relationship_loading),
    [execute()](#sqlalchemy.orm.Session.execute), [expire()](#sqlalchemy.orm.Session.expire),
    [expire_all()](#sqlalchemy.orm.Session.expire_all), [expunge()](#sqlalchemy.orm.Session.expunge),
    [expunge_all()](#sqlalchemy.orm.Session.expunge_all), [flush()](#sqlalchemy.orm.Session.flush),
    [get()](#sqlalchemy.orm.Session.get), [get_bind()](#sqlalchemy.orm.Session.get_bind),
    [get_nested_transaction()](#sqlalchemy.orm.Session.get_nested_transaction), [get_one()](#sqlalchemy.orm.Session.get_one),
    [get_transaction()](#sqlalchemy.orm.Session.get_transaction), [identity_key()](#sqlalchemy.orm.Session.identity_key),
    [identity_map](#sqlalchemy.orm.Session.identity_map), [in_nested_transaction()](#sqlalchemy.orm.Session.in_nested_transaction),
    [in_transaction()](#sqlalchemy.orm.Session.in_transaction), [info](#sqlalchemy.orm.Session.info),
    [invalidate()](#sqlalchemy.orm.Session.invalidate), [is_active](#sqlalchemy.orm.Session.is_active),
    [is_modified()](#sqlalchemy.orm.Session.is_modified), [merge()](#sqlalchemy.orm.Session.merge),
    [new](#sqlalchemy.orm.Session.new), [no_autoflush](#sqlalchemy.orm.Session.no_autoflush),
    [object_session()](#sqlalchemy.orm.Session.object_session), [prepare()](#sqlalchemy.orm.Session.prepare),
    [query()](#sqlalchemy.orm.Session.query), [refresh()](#sqlalchemy.orm.Session.refresh),
    [reset()](#sqlalchemy.orm.Session.reset), [rollback()](#sqlalchemy.orm.Session.rollback),
    [scalar()](#sqlalchemy.orm.Session.scalar), [scalars()](#sqlalchemy.orm.Session.scalars)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    (`sqlalchemy.orm.session._SessionClassMethods`, `sqlalchemy.event.registry.EventTarget`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See also the [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    function which is used to generate a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")-producing
    callable with a given set of arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`autoflush` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `True`, all query operations will issue a [`Session.flush()`](#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") call to this `Session` before proceeding. This
    is a convenience feature so that [`Session.flush()`](#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") need not be called repeatedly in order for database
    queries to retrieve results.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Flushing](session_basics.html#session-flushing) - additional background on
    autoflush'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`autobegin` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatically start transactions (i.e. equivalent to invoking [`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")) when database access is requested by an operation.
    Defaults to `True`. Set to `False` to prevent a [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") from implicitly beginning transactions after construction,
    as well as after any of the [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback"), [`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit"), or [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") methods are called.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Disabling Autobegin to Prevent Implicit Transactions](session_basics.html#session-autobegin-disable)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`bind` – An optional [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") to which this `Session` should be bound. When
    specified, all SQL operations performed by this session will execute via this
    connectable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`binds` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A dictionary which may specify any number of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects as the source of connectivity for SQL
    operations on a per-entity basis. The keys of the dictionary consist of any series
    of mapped classes, arbitrary Python classes that are bases for mapped classes,
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects and [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects. The values of the dictionary are then instances of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or less commonly [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects. Operations which proceed relative to
    a particular mapped class will consult this dictionary for the closest matching
    entity in order to determine which [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") should be used for a particular SQL operation. The
    complete heuristics for resolution are described at [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind"). Usage looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`class_` – Specify an alternate class other than `sqlalchemy.orm.session.Session`
    which should be used by the returned class. This is the only argument that is
    local to the [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    function, and is not sent directly to the constructor for `Session`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enable_baked_queries` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: legacy; defaults to `True`. A parameter consumed by the [`sqlalchemy.ext.baked`](extensions/baked.html#module-sqlalchemy.ext.baked
    "sqlalchemy.ext.baked") extension to determine if “baked queries” should be cached,
    as is the normal operation of this extension. When set to `False`, caching as
    used by this particular extension is disabled.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The `sqlalchemy.ext.baked` extension is legacy and
    is not used by any of SQLAlchemy’s internals. This flag therefore only affects
    applications that are making explicit use of this extension within their own code.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`expire_on_commit` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defaults to `True`. When `True`, all instances will be fully expired after each
    [`commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit"),
    so that all attribute/object access subsequent to a completed transaction will
    load from the most recent database state.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Committing](session_basics.html#session-committing)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`future` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deprecated; this flag is always True.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[SQLAlchemy 2.0 - Major Migration Guide](../changelog/migration_20.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`info` – optional dictionary of arbitrary data to be associated with this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). Is available via the [`Session.info`](#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info") attribute. Note the dictionary is copied at construction
    time so that modifications to the per- [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    dictionary will be local to that [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`query_cls` – Class which should be used to create new Query objects, as returned
    by the [`Session.query()`](#sqlalchemy.orm.Session.query "sqlalchemy.orm.Session.query")
    method. Defaults to [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`twophase` – When `True`, all transactions will be started as a “two phase”
    transaction, i.e. using the “two phase” semantics of the database in use along
    with an XID. During a [`commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit"),
    after [`flush()`](#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush")
    has been issued for all attached databases, the [`TwoPhaseTransaction.prepare()`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") method on each database’s [`TwoPhaseTransaction`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction") will be called. This allows each database
    to roll back the entire transaction, before each transaction is committed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autocommit` – the “autocommit” keyword is present for backwards compatibility
    but must remain at its default value of `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`join_transaction_mode` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describes the transactional behavior to take when a given bind is a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") that has already begun a transaction outside the
    scope of this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"); in
    other words the [`Connection.in_transaction()`](../core/connections.html#sqlalchemy.engine.Connection.in_transaction
    "sqlalchemy.engine.Connection.in_transaction") method returns True.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following behaviors only take effect when the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") **actually makes use of the connection given**; that
    is, a method such as [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute"),
    [`Session.connection()`](#sqlalchemy.orm.Session.connection "sqlalchemy.orm.Session.connection"),
    etc. are actually invoked:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"conditional_savepoint"` - this is the default. if the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is begun within a transaction but does not have
    a SAVEPOINT, then `"rollback_only"` is used. If the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is additionally within a SAVEPOINT, in other words
    [`Connection.in_nested_transaction()`](../core/connections.html#sqlalchemy.engine.Connection.in_nested_transaction
    "sqlalchemy.engine.Connection.in_nested_transaction") method returns True, then
    `"create_savepoint"` is used.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"conditional_savepoint"` behavior attempts to make use of savepoints in order
    to keep the state of the existing transaction unchanged, but only if there is
    already a savepoint in progress; otherwise, it is not assumed that the backend
    in use has adequate support for SAVEPOINT, as availability of this feature varies.
    `"conditional_savepoint"` also seeks to establish approximate backwards compatibility
    with previous [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") behavior,
    for applications that are not setting a specific mode. It is recommended that
    one of the explicit settings be used.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"create_savepoint"` - the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will use [`Connection.begin_nested()`](../core/connections.html#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") in all cases to create its own transaction.
    This transaction by its nature rides “on top” of any existing transaction that’s
    opened on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"); if the underlying database and the driver in
    use has full, non-broken support for SAVEPOINT, the external transaction will
    remain unaffected throughout the lifespan of the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `"create_savepoint"` mode is the most useful for integrating a [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") into a test suite where an externally initiated transaction
    should remain unaffected; however, it relies on proper SAVEPOINT support from
    the underlying driver and database.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: When using SQLite, the SQLite driver included through Python 3.11 does not handle
    SAVEPOINTs correctly in all cases without workarounds. See the sections [Serializable
    isolation / Savepoints / Transactional DDL](../dialects/sqlite.html#pysqlite-serializable)
    and [Serializable isolation / Savepoints / Transactional DDL (asyncio version)](../dialects/sqlite.html#aiosqlite-serializable)
    for details on current workarounds.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"control_fully"` - the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will take control of the given transaction as its own; [`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") will call `.commit()` on the transaction, [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") will call `.rollback()` on the transaction,
    [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    will call `.rollback` on the transaction.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: This mode of use is equivalent to how SQLAlchemy 1.4 would handle a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") given with an existing SAVEPOINT (i.e. [`Connection.begin_nested()`](../core/connections.html#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested")); the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") would take full control of the existing SAVEPOINT.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"rollback_only"` - the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will take control of the given transaction for `.rollback()` calls only; `.commit()`
    calls will not be propagated to the given transaction. `.close()` calls will have
    no effect on the given transaction.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: This mode of use is equivalent to how SQLAlchemy 1.4 would handle a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") given with an existing regular database transaction
    (i.e. [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")); the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") would propagate [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") calls to the underlying transaction, but not
    [`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    or [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    calls.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 2.0.0rc1.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`close_resets_only` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defaults to `True`. Determines if the session should reset itself after calling
    `.close()` or should pass in a no longer usable state, disabling re-use.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 2.0.22: added flag `close_resets_only`. A future SQLAlchemy
    version may change the default value of this flag to `False`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Closing](session_basics.html#session-closing) - Detail on the semantics of
    [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: Place an object into this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Objects that are in the [transient](../glossary.html#term-transient) state when
    passed to the [`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    method will move to the [pending](../glossary.html#term-pending) state, until
    the next flush, at which point they will move to the [persistent](../glossary.html#term-persistent)
    state.
  prefs: []
  type: TYPE_NORMAL
- en: Objects that are in the [detached](../glossary.html#term-detached) state when
    passed to the [`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    method will move to the [persistent](../glossary.html#term-persistent) state directly.
  prefs: []
  type: TYPE_NORMAL
- en: If the transaction used by the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is rolled back, objects which were transient when they were passed to [`Session.add()`](#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") will be moved back to the [transient](../glossary.html#term-transient)
    state, and will no longer be present within this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.add_all()`](#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding New or Existing Items](session_basics.html#session-adding) - at [Basics
    of Using a Session](session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: Add the given collection of instances to this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See the documentation for [`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    for a general behavioral description.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Adding New or Existing Items](session_basics.html#session-adding) - at [Basics
    of Using a Session](session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: Begin a transaction, or nested transaction, on this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), if one is not already begun.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") object features
    **autobegin** behavior, so that normally it is not necessary to call the [`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") method explicitly. However, it may be used in
    order to control the scope of when the transactional state is begun.
  prefs: []
  type: TYPE_NORMAL
- en: When used to begin the outermost transaction, an error is raised if this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is already inside of a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**nested** – if True, begins a SAVEPOINT transaction and is equivalent to calling
    [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested").
    For documentation on SAVEPOINT transactions, please see [Using SAVEPOINT](session_transaction.html#session-begin-nested).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    object. Note that [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    acts as a Python context manager, allowing [`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") to be used in a “with” block. See [Explicit Begin](session_transaction.html#session-explicit-begin)
    for an example.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Auto Begin](session_basics.html#session-autobegin)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: Begin a “nested” transaction on this Session, e.g. SAVEPOINT.
  prefs: []
  type: TYPE_NORMAL
- en: The target database(s) and associated drivers must support SQL SAVEPOINT for
    this method to function correctly.
  prefs: []
  type: TYPE_NORMAL
- en: For documentation on SAVEPOINT transactions, please see [Using SAVEPOINT](session_transaction.html#session-begin-nested).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: the [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    object. Note that [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    acts as a context manager, allowing [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") to be used in a “with” block. See [Using
    SAVEPOINT](session_transaction.html#session-begin-nested) for a usage example.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using SAVEPOINT](session_transaction.html#session-begin-nested)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Serializable isolation / Savepoints / Transactional DDL](../dialects/sqlite.html#pysqlite-serializable)
    - special workarounds required with the SQLite driver in order for SAVEPOINT to
    work correctly. For asyncio use cases, see the section [Serializable isolation
    / Savepoints / Transactional DDL (asyncio version)](../dialects/sqlite.html#aiosqlite-serializable).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: Associate a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    or arbitrary Python class with a “bind”, e.g. an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: The given entity is added to a lookup used by the [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    object, or an instance of a mapped class, or any Python class that is the base
    of a set of mapped classes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bind` – an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: Associate a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    with a “bind”, e.g. an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: The given [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    is added to a lookup used by the [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`table` – a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, which is typically the target of an ORM mapping, or is present within
    a selectable that is mapped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bind` – an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: Perform a bulk insert of the given list of mapping dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
    The 2.0 API shares implementation details with this method and adds new features
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – a mapped class, or the actual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object, representing the single kind of object represented
    within the mapping list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mappings` – a sequence of dictionaries, each one containing the state of the
    mapped row to be inserted, in terms of the attribute names on the mapped class.
    If the mapping refers to multiple tables, such as a joined-inheritance mapping,
    each dictionary must contain all keys to be populated into all tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_defaults` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when True, the INSERT process will be altered to ensure that newly generated
    primary key values will be fetched. The rationale for this parameter is typically
    to enable [Joined Table Inheritance](inheritance.html#joined-inheritance) mappings
    to be bulk inserted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: for backends that don’t support RETURNING, the [`Session.bulk_insert_mappings.return_defaults`](#sqlalchemy.orm.Session.bulk_insert_mappings.params.return_defaults
    "sqlalchemy.orm.Session.bulk_insert_mappings") parameter can significantly decrease
    performance as INSERT statements can no longer be batched. See [“Insert Many Values”
    Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    for background on which backends are affected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`render_nulls` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When True, a value of `None` will result in a NULL value being included in the
    INSERT statement, rather than the column being omitted from the INSERT. This allows
    all the rows being INSERTed to have the identical set of columns which allows
    the full set of rows to be batched to the DBAPI. Normally, each column-set that
    contains a different combination of NULL values than the previous row must omit
    a different series of columns from the rendered INSERT statement, which means
    it must be emitted as a separate statement. By passing this flag, the full set
    of rows are guaranteed to be batchable into one batch; the cost however is that
    server-side defaults which are invoked by an omitted column will be skipped, so
    care must be taken to ensure that these are not necessary.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When this flag is set, **server side default SQL values will not be invoked**
    for those columns that are inserted as NULL; the NULL value will be sent explicitly.
    Care must be taken to ensure that no server-side default functions need to be
    invoked for the operation as a whole.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_save_objects()`](#sqlalchemy.orm.Session.bulk_save_objects "sqlalchemy.orm.Session.bulk_save_objects")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_update_mappings()`](#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: Perform a bulk save of the given list of objects.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
  prefs: []
  type: TYPE_NORMAL
- en: For general INSERT and UPDATE of existing ORM mapped objects, prefer standard
    [unit of work](../glossary.html#term-unit-of-work) data management patterns, introduced
    in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)
    at [Data Manipulation with the ORM](../tutorial/orm_data_manipulation.html#tutorial-orm-data-manipulation).
    SQLAlchemy 2.0 now uses [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    with modern dialects which solves previous issues of bulk INSERT slowness.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`objects` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a sequence of mapped object instances. The mapped objects are persisted as is,
    and are **not** associated with the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    afterwards.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For each object, whether the object is sent as an INSERT or an UPDATE is dependent
    on the same rules used by the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    in traditional operation; if the object has the `InstanceState.key` attribute
    set, then the object is assumed to be “detached” and will result in an UPDATE.
    Otherwise, an INSERT is used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the case of an UPDATE, statements are grouped based on which attributes have
    changed, and are thus to be the subject of each SET clause. If `update_changed_only`
    is False, then all attributes present within each object are applied to the UPDATE
    statement, which may help in allowing the statements to be grouped together into
    a larger executemany(), and will also reduce the overhead of checking history
    on attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_defaults` – when True, rows that are missing values which generate
    defaults, namely integer primary key defaults and sequences, will be inserted
    `one at a time`, so that the primary key value is available. In particular this
    will allow joined-inheritance and other multi-table mappings to insert correctly
    without the need to provide primary key values ahead of time; however, [`Session.bulk_save_objects.return_defaults`](#sqlalchemy.orm.Session.bulk_save_objects.params.return_defaults
    "sqlalchemy.orm.Session.bulk_save_objects") `greatly reduces the performance gains`
    of the method overall. It is strongly advised to please use the standard [`Session.add_all()`](#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all") approach.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update_changed_only` – when True, UPDATE statements are rendered based on
    those attributes in each state that have logged changes. When False, all attributes
    present are rendered into the SET clause with the exception of primary key attributes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`preserve_order` – when True, the order of inserts and updates matches exactly
    the order in which the objects are given. When False, common types of objects
    are grouped into inserts and updates, to allow for more batching opportunities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_insert_mappings()`](#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_update_mappings()`](#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: Perform a bulk update of the given list of mapping dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy Feature
  prefs: []
  type: TYPE_NORMAL
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
    The 2.0 API shares implementation details with this method and adds new features
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – a mapped class, or the actual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object, representing the single kind of object represented
    within the mapping list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mappings` – a sequence of dictionaries, each one containing the state of the
    mapped row to be updated, in terms of the attribute names on the mapped class.
    If the mapping refers to multiple tables, such as a joined-inheritance mapping,
    each dictionary may contain keys corresponding to all tables. All those keys which
    are present and are not part of the primary key are applied to the SET clause
    of the UPDATE statement; the primary key values, which are required, are applied
    to the WHERE clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_insert_mappings()`](#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bulk_save_objects()`](#sqlalchemy.orm.Session.bulk_save_objects "sqlalchemy.orm.Session.bulk_save_objects")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Close out the transactional resources and ORM objects used by this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: This expunges all ORM objects associated with this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), ends any transaction in progress and [releases](../glossary.html#term-releases)
    any [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    objects which this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    itself has checked out from associated [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects. The operation then leaves the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in a state which it may be used again.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: In the default running mode the [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method **does not prevent the Session from being
    used again**. The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    itself does not actually have a distinct “closed” state; it merely means the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will release all database connections and ORM objects.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the parameter [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") to `False` will instead make the `close` final, meaning
    that any further action on the session will be forbidden.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method does not immediately create a new [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object; instead, the new [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is created only if the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is used again for a database operation.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Closing](session_basics.html#session-closing) - detail on the semantics of
    [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - a similar method that behaves like `close()` with the parameter [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") set to `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.close_all`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  prefs: []
  type: TYPE_NORMAL
- en: Close *all* sessions in memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deprecated since version 1.3: The [`Session.close_all()`](#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all") method is deprecated and will be removed in
    a future release. Please refer to `close_all_sessions()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: Flush pending changes and commit the current transaction.
  prefs: []
  type: TYPE_NORMAL
- en: When the COMMIT operation is complete, all objects are fully [expired](../glossary.html#term-expired),
    erasing their internal contents, which will be automatically re-loaded when the
    objects are next accessed. In the interim, these objects are in an expired state
    and will not function if they are [detached](../glossary.html#term-detached) from
    the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"). Additionally,
    this re-load operation is not supported when using asyncio-oriented APIs. The
    [`Session.expire_on_commit`](#sqlalchemy.orm.Session.params.expire_on_commit "sqlalchemy.orm.Session")
    parameter may be used to disable this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: When there is no transaction in place for the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), indicating that no operations were invoked on this
    [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") since the previous
    call to [`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit"),
    the method will begin and commit an internal-only “logical” transaction, that
    does not normally affect the database unless pending flush changes were detected,
    but will still invoke event handlers and object expiration rules.
  prefs: []
  type: TYPE_NORMAL
- en: The outermost database transaction is committed unconditionally, automatically
    releasing any SAVEPOINTs in effect.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Committing](session_basics.html#session-committing)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Preventing Implicit IO when Using AsyncSession](extensions/asyncio.html#asyncio-orm-avoid-lazyloads)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object corresponding to this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s transactional state.
  prefs: []
  type: TYPE_NORMAL
- en: Either the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") corresponding to the current transaction is returned,
    or if no transaction is in progress, a new one is begun and the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") returned (note that no transactional state is
    established with the DBAPI until the first SQL statement is emitted).
  prefs: []
  type: TYPE_NORMAL
- en: Ambiguity in multi-bind or unbound [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects can be resolved through any of the optional keyword arguments. This ultimately
    makes usage of the [`get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method for resolution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bind_arguments` – dictionary of bind arguments. May include “mapper”, “bind”,
    “clause”, other custom arguments that are passed to [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a dictionary of execution options that will be passed to [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), **when the connection is first
    procured only**. If the connection is already present within the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), a warning is emitted and the arguments are ignored.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Setting Transaction Isolation Levels / DBAPI AUTOCOMMIT](session_transaction.html#session-transaction-isolation)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: Mark an instance as deleted.
  prefs: []
  type: TYPE_NORMAL
- en: The object is assumed to be either [persistent](../glossary.html#term-persistent)
    or [detached](../glossary.html#term-detached) when passed; after the method is
    called, the object will remain in the [persistent](../glossary.html#term-persistent)
    state until the next flush proceeds. During this time, the object will also be
    a member of the [`Session.deleted`](#sqlalchemy.orm.Session.deleted "sqlalchemy.orm.Session.deleted")
    collection.
  prefs: []
  type: TYPE_NORMAL
- en: When the next flush proceeds, the object will move to the [deleted](../glossary.html#term-deleted)
    state, indicating a `DELETE` statement was emitted for its row within the current
    transaction. When the transaction is successfully committed, the deleted object
    is moved to the [detached](../glossary.html#term-detached) state and is no longer
    present within this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Deleting](session_basics.html#session-deleting) - at [Basics of Using a Session](session_basics.html#id1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: The set of all instances marked as ‘deleted’ within this `Session`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: The set of all persistent instances considered dirty.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: Instances are considered dirty when they were modified but not deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this ‘dirty’ calculation is ‘optimistic’; most attribute-setting or
    collection modification operations will mark an instance as ‘dirty’ and place
    it in this set, even if there is no net change to the attribute’s value. At flush
    time, the value of each attribute is compared to its previously saved value, and
    if there’s no net change, no SQL operation will occur (this is a more expensive
    operation so it’s only done at flush time).
  prefs: []
  type: TYPE_NORMAL
- en: To check if an instance has actionable net changes to its attributes, use the
    [`Session.is_modified()`](#sqlalchemy.orm.Session.is_modified "sqlalchemy.orm.Session.is_modified")
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: Associate an object with this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    for related object loading.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '[`enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") exists to serve special
    use cases and is not recommended for general use.'
  prefs: []
  type: TYPE_NORMAL
- en: Accesses of attributes mapped with [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") will attempt to load a value from the database
    using this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") as the
    source of connectivity. The values will be loaded based on foreign key and primary
    key values present on this object - if not present, then those relationships will
    be unavailable.
  prefs: []
  type: TYPE_NORMAL
- en: The object will be attached to this session, but will **not** participate in
    any persistence operations; its state for almost all purposes will remain either
    “transient” or “detached”, except for the case of relationship loading.
  prefs: []
  type: TYPE_NORMAL
- en: Also note that backrefs will often not work as expected. Altering a relationship-bound
    attribute on the target object may not fire off a backref event, if the effective
    value is what was already loaded from a foreign-key-holding value.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") method is similar to the
    `load_on_pending` flag on [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). Unlike that flag, [`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") allows an object to remain
    transient while still being able to load related items.
  prefs: []
  type: TYPE_NORMAL
- en: To make a transient object associated with a [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") via [`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") pending, add it to the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") using [`Session.add()`](#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") normally. If the object instead represents an existing
    identity in the database, it should be merged using [`Session.merge()`](#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge").
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") does not improve behavior
    when the ORM is used normally - object references should be constructed at the
    object level, not at the foreign key level, so that they are present in an ordinary
    way before flush() proceeds. This method is not intended for general use.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`relationship.load_on_pending`](relationship_api.html#sqlalchemy.orm.relationship.params.load_on_pending
    "sqlalchemy.orm.relationship") - this flag allows per-relationship loading of
    many-to-ones on items that are pending.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - allows for an object to be added
    to a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") without SQL
    emitted, which then will unexpire attributes on access.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: Execute a SQL expression construct.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object representing results of the statement execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: The API contract of [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    is similar to that of [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), the [2.0 style](../glossary.html#term-2.0-style)
    version of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: the [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method is now the primary point of ORM statement
    execution when using [2.0 style](../glossary.html#term-2.0-style) ORM usage.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`statement` – An executable statement (i.e. an [`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") expression such as [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params` – Optional dictionary, or list of dictionaries, containing bound parameter
    values. If a single dictionary, single-row execution occurs; if a list of dictionaries,
    an “executemany” will be invoked. The keys in each dictionary must correspond
    to parameter names present in the statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional dictionary of execution options, which will be associated with the
    statement execution. This dictionary can provide a subset of the options that
    are accepted by [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), and may also provide additional
    options understood only in an ORM context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)
    - ORM-specific execution options'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`bind_arguments` – dictionary of additional arguments to determine the bind.
    May include “mapper”, “bind”, or other custom arguments. Contents of this dictionary
    are passed to the [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: Expire the attributes on an instance.
  prefs: []
  type: TYPE_NORMAL
- en: Marks the attributes of an instance as out of date. When an expired attribute
    is next accessed, a query will be issued to the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s current transactional context in order to load
    all expired attributes for the given instance. Note that a highly isolated transaction
    will return the same values as were previously read in that same transaction,
    regardless of changes in database state outside of that transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To expire all objects in the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    simultaneously, use [`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all").
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") object’s default
    behavior is to expire all state whenever the [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") or [`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") methods are called, so that new state can be
    loaded for the new transaction. For this reason, calling [`Session.expire()`](#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire") only makes sense for the specific case that a
    non-ORM SQL statement was emitted in the current transaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – The instance to be refreshed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attribute_names` – optional list of string attribute names indicating a subset
    of attributes to be expired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: Expires all persistent instances within this Session.
  prefs: []
  type: TYPE_NORMAL
- en: When any attributes on a persistent instance is next accessed, a query will
    be issued using the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s current transactional context in order to load all expired attributes
    for the given instance. Note that a highly isolated transaction will return the
    same values as were previously read in that same transaction, regardless of changes
    in database state outside of that transaction.
  prefs: []
  type: TYPE_NORMAL
- en: To expire individual objects and individual attributes on those objects, use
    [`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire").
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") object’s default
    behavior is to expire all state whenever the [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") or [`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") methods are called, so that new state can be
    loaded for the new transaction. For this reason, calling [`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all") is not usually needed, assuming the transaction
    is isolated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: Remove the instance from this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: This will free all internal references to the instance. Cascading will be applied
    according to the *expunge* cascade rule.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: Remove all object instances from this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to calling `expunge(obj)` on all objects in this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: Flush all the object changes to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Writes out all pending object creations, deletions and modifications to the
    database as INSERTs, DELETEs, UPDATEs, etc. Operations are automatically ordered
    by the Session’s unit of work dependency solver.
  prefs: []
  type: TYPE_NORMAL
- en: Database operations will be issued in the current transactional context and
    do not affect the state of the transaction, unless an error occurs, in which case
    the entire transaction is rolled back. You may flush() as often as you like within
    a transaction to move changes from Python to the database’s transaction buffer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**objects** –'
  prefs: []
  type: TYPE_NORMAL
- en: Optional; restricts the flush operation to operate only on elements that are
    in the given collection.
  prefs: []
  type: TYPE_NORMAL
- en: This feature is for an extremely narrow set of use cases where particular objects
    may need to be operated upon before the full flush() occurs. It is not intended
    for general use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.4: Added [`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get"),
    which is moved from the now legacy [`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    is special in that it provides direct access to the identity map of the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). If the given primary key identifier is present in the
    local identity map, the object is returned directly from this collection and no
    SQL is emitted, unless the object has been marked fully expired. If not present,
    a SELECT is performed in order to locate the object.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    also will perform a check if the object is present in the identity map and marked
    as expired - a SELECT is emitted to refresh the object as well as to ensure that
    the row is still present. If not, [`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") is raised.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`entity` – a mapped class or [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") indicating the type of entity to be loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ident` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A scalar, tuple, or dictionary representing the primary key. For a composite
    (e.g. multiple column) primary key, a tuple or dictionary should be passed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For a single-column primary key, the scalar calling form is typically the most
    expedient. If the primary key of a row is the value “5”, the call looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The tuple form contains primary key values typically in the order in which
    they correspond to the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object’s primary key columns, or if the [`Mapper.primary_key`](mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") configuration parameter were used, in the order used
    for that parameter. For example, if the primary key of a row is represented by
    the integer digits “5, 10” the call would look like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The dictionary form should include as keys the mapped attribute names corresponding
    to each element of the primary key. If the mapped class has the attributes `id`,
    `version_id` as the attributes which store the object’s primary key value, the
    call would look like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`options` – optional sequence of loader options which will be applied to the
    query, if one is emitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`populate_existing` – causes the method to unconditionally emit a SQL query
    and refresh the object with the newly loaded data, regardless of whether or not
    the object is already present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_for_update` – optional boolean `True` indicating FOR UPDATE should be
    used, or may be a dictionary containing flags to indicate a more specific set
    of FOR UPDATE flags for the SELECT; flags should match the parameters of [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Supersedes the [`Session.refresh.lockmode`](#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`execution_options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional dictionary of execution options, which will be associated with the
    query execution if one is emitted. This dictionary can provide a subset of the
    options that are accepted by [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), and may also provide additional
    options understood only in an ORM context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.29.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)
    - ORM-specific execution options'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`bind_arguments` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionary of additional arguments to determine the bind. May include “mapper”,
    “bind”, or other custom arguments. Contents of this dictionary are passed to the
    [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The object instance, or `None`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: Return a “bind” to which this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is bound.
  prefs: []
  type: TYPE_NORMAL
- en: The “bind” is usually an instance of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), except in the case where the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has been explicitly bound directly to a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  prefs: []
  type: TYPE_NORMAL
- en: For a multiply-bound or unbound [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    the `mapper` or `clause` arguments are used to determine the appropriate bind
    to return.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the “mapper” argument is usually present when [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") is called via an ORM operation such as a [`Session.query()`](#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"), each individual INSERT/UPDATE/DELETE operation
    within a [`Session.flush()`](#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush"),
    call, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'The order of resolution is:'
  prefs: []
  type: TYPE_NORMAL
- en: if mapper given and [`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")
    is present, locate a bind based first on the mapper in use, then on the mapped
    class in use, then on any base classes that are present in the `__mro__` of the
    mapped class, from more specific superclasses to more general.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if clause given and `Session.binds` is present, locate a bind based on [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects found in the given clause present in `Session.binds`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if `Session.binds` is present, return that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if clause given, attempt to return a bind linked to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the clause.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if mapper given, attempt to return a bind linked to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other selectable to which the mapper is mapped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No bind can be found, [`UnboundExecutionError`](../core/exceptions.html#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError") is raised.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method can be overridden on a user-defined subclass of [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to provide any kind of bind resolution scheme. See the
    example at [Custom Vertical Partitioning](persistence_techniques.html#session-custom-partitioning).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapper` – Optional mapped class or corresponding [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") instance. The bind can be derived from a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") first by consulting the “binds” map associated with this
    [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"), and secondly by
    consulting the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    associated with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    to which the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    is mapped for a bind.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clause` – A [`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") (i.e. [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text"), etc.). If the `mapper` argument is not present
    or could not produce a bind, the given expression construct will be searched for
    a bound element, typically a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") associated with bound [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: Return the current nested transaction in progress, if any.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: Return exactly one instance based on the given primary key identifier, or raise
    an exception if not found.
  prefs: []
  type: TYPE_NORMAL
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows.
  prefs: []
  type: TYPE_NORMAL
- en: For a detailed documentation of the arguments see the method [`Session.get()`](#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.22.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: The object instance.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - equivalent method that instead'
  prefs: []
  type: TYPE_NORMAL
- en: returns `None` if no row was found with the provided primary key
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: Return the current root transaction in progress, if any.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.identity_key`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  prefs: []
  type: TYPE_NORMAL
- en: Return an identity key.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: A mapping of object identities to objects themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating through `Session.identity_map.values()` provides access to the full
    set of persistent objects (i.e., those that have row identity) currently in the
    session.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key "sqlalchemy.orm.util.identity_key")
    - helper function to produce the keys used in this dictionary.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    has begun a nested transaction, e.g. SAVEPOINT.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    has begun a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.is_active`](#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: A user-modifiable dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: The initial value of this dictionary can be populated using the `info` argument
    to the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") constructor
    or [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    constructor or factory methods. The dictionary here is always local to this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and can be modified independently of all other [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: Close this Session, using connection invalidation.
  prefs: []
  type: TYPE_NORMAL
- en: This is a variant of [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    that will additionally ensure that the [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method will be called on each [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object that is currently in use for a transaction
    (typically there is only one connection unless the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is used with multiple engines).
  prefs: []
  type: TYPE_NORMAL
- en: This can be called when the database is known to be in a state where the connections
    are no longer safe to be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below illustrates a scenario when using [gevent](https://www.gevent.org/),
    which can produce `Timeout` exceptions that may mean the underlying connection
    should be discarded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: The method additionally does everything that [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") does, including that all ORM objects are expunged.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: True if this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") not
    in “partial rollback” state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    no longer begins a new transaction immediately, so this attribute will be False
    when the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") is first
    instantiated.'
  prefs: []
  type: TYPE_NORMAL
- en: “partial rollback” state typically indicates that the flush process of the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has failed, and that the [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method must be emitted in order to fully roll
    back the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: If this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") is not
    in a transaction at all, the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will autobegin when it is first used, so in this case [`Session.is_active`](#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") will return True.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, if this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is within a transaction, and that transaction has not been rolled back internally,
    the [`Session.is_active`](#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will also return True.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[“This Session’s transaction has been rolled back due to a previous exception
    during flush.” (or similar)](../faq/sessions.html#faq-session-rollback)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.in_transaction()`](#sqlalchemy.orm.Session.in_transaction "sqlalchemy.orm.Session.in_transaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: Return `True` if the given instance has locally modified attributes.
  prefs: []
  type: TYPE_NORMAL
- en: This method retrieves the history for each instrumented attribute on the instance
    and performs a comparison of the current value to its previously committed value,
    if any.
  prefs: []
  type: TYPE_NORMAL
- en: It is in effect a more expensive and accurate version of checking for the given
    instance in the [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")
    collection; a full test for each attribute’s net “dirty” status is performed.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: 'A few caveats to this method apply:'
  prefs: []
  type: TYPE_NORMAL
- en: Instances present in the [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")
    collection may report `False` when tested with this method. This is because the
    object may have received change events via attribute mutation, thus placing it
    in [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty"),
    but ultimately the state is the same as that loaded from the database, resulting
    in no net change here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalar attributes may not have recorded the previously set value when a new
    value was applied, if the attribute was not loaded, or was expired, at the time
    the new value was received - in these cases, the attribute is assumed to have
    a change, even if there is ultimately no net change against its database value.
    SQLAlchemy in most cases does not need the “old” value when a set event occurs,
    so it skips the expense of a SQL call if the old value isn’t present, based on
    the assumption that an UPDATE of the scalar value is usually needed, and in those
    few cases where it isn’t, is less expensive on average than issuing a defensive
    SELECT.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The “old” value is fetched unconditionally upon set only if the attribute container
    has the `active_history` flag set to `True`. This flag is set typically for primary
    key attributes and scalar object references that are not a simple many-to-one.
    To set this flag for any arbitrary mapped column, use the `active_history` argument
    with [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property").
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – mapped instance to be tested for pending changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_collections` – Indicates if multivalued collections should be included
    in the operation. Setting this to `False` is a way to detect only local-column
    based properties (i.e. scalar columns or many-to-one foreign keys) that would
    result in an UPDATE for this instance upon flush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: Copy the state of a given instance into a corresponding instance within this
    [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.merge()`](#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    examines the primary key attributes of the source instance, and attempts to reconcile
    it with an instance of the same primary key in the session. If not found locally,
    it attempts to load the object from the database based on primary key, and if
    none can be located, creates a new instance. The state of each attribute on the
    source instance is then copied to the target instance. The resulting target instance
    is then returned by the method; the original source instance is left unmodified,
    and un-associated with the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    if not already.'
  prefs: []
  type: TYPE_NORMAL
- en: This operation cascades to associated instances if the association is mapped
    with `cascade="merge"`.
  prefs: []
  type: TYPE_NORMAL
- en: See [Merging](session_state_management.html#unitofwork-merging) for a detailed
    discussion of merging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – Instance to be merged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`load` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean, when False, [`merge()`](#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    switches into a “high performance” mode which causes it to forego emitting history
    events as well as all database access. This flag is used for cases such as transferring
    graphs of objects into a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    from a second level cache, or to transfer just-loaded objects into the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") owned by a worker thread or process without re-querying
    the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `load=False` use case adds the caveat that the given object has to be in
    a “clean” state, that is, has no pending changes to be flushed - even if the incoming
    object is detached from any [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    This is so that when the merge operation populates local attributes and cascades
    to related objects and collections, the values can be “stamped” onto the target
    object as is, without generating any history or attribute events, and without
    the need to reconcile the incoming data with any existing related objects or collections
    that might not be loaded. The resulting objects from `load=False` are always produced
    as “clean”, so it is only appropriate that the given objects should be “clean”
    as well, else this suggests a mis-use of the method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`options` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optional sequence of loader options which will be applied to the [`Session.get()`](#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") method when the merge operation loads the existing
    version of the object from the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - provides for an alternative means
    of “merging” a single object into the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: The set of all instances marked as ‘new’ within this `Session`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: Return a context manager that disables autoflush.
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: Operations that proceed within the `with:` block will not be subject to flushes
    occurring upon query access. This is useful when initializing a series of objects
    which involve existing database queries, where the uncompleted object should not
    yet be flushed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.object_session`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  prefs: []
  type: TYPE_NORMAL
- en: Return the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") to
    which an object belongs.
  prefs: []
  type: TYPE_NORMAL
- en: This is an alias of [`object_session()`](#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: Prepare the current transaction in progress for two phase commit.
  prefs: []
  type: TYPE_NORMAL
- en: If no transaction is in progress, this method raises an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError").
  prefs: []
  type: TYPE_NORMAL
- en: Only root transactions of two phase sessions can be prepared. If the current
    transaction is not such, an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object corresponding to this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  prefs: []
  type: TYPE_NORMAL
- en: Note that the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object is legacy as of SQLAlchemy 2.0; the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct is now used to construct ORM queries.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Querying Guide](queryguide/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Legacy Query API](queryguide/query.html) - legacy API doc'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: Expire and refresh attributes on the given instance.
  prefs: []
  type: TYPE_NORMAL
- en: The selected attributes will first be expired as they would when using [`Session.expire()`](#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire"); then a SELECT statement will be issued to the
    database to refresh column-oriented attributes with the current value available
    in the current transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    oriented attributes will also be immediately loaded if they were already eagerly
    loaded on the object, using the same eager loading strategy that they were loaded
    with originally.'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: - the [`Session.refresh()`](#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method can also refresh eagerly loaded attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    oriented attributes that would normally load using the `select` (or “lazy”) loader
    strategy will also load **if they are named explicitly in the attribute_names
    collection**, emitting a SELECT statement for the attribute using the `immediate`
    loader strategy. If lazy-loaded relationships are not named in [`Session.refresh.attribute_names`](#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh"), then they remain as “lazy loaded” attributes
    and are not implicitly refreshed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0.4: The [`Session.refresh()`](#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method will now refresh lazy-loaded [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") oriented attributes for those which are named explicitly
    in the [`Session.refresh.attribute_names`](#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") collection.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: While the [`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    method is capable of refreshing both column and relationship oriented attributes,
    its primary focus is on refreshing of local column-oriented attributes on a single
    instance. For more open ended “refresh” functionality, including the ability to
    refresh the attributes on many objects at once while having explicit control over
    relationship loader strategies, use the [populate existing](queryguide/api.html#orm-queryguide-populate-existing)
    feature instead.
  prefs: []
  type: TYPE_NORMAL
- en: Note that a highly isolated transaction will return the same values as were
    previously read in that same transaction, regardless of changes in database state
    outside of that transaction. Refreshing attributes usually only makes sense at
    the start of a transaction where database rows have not yet been accessed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`attribute_names` – optional. An iterable collection of string attribute names
    indicating a subset of attributes to be refreshed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_for_update` – optional boolean `True` indicating FOR UPDATE should be
    used, or may be a dictionary containing flags to indicate a more specific set
    of FOR UPDATE flags for the SELECT; flags should match the parameters of [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Supersedes the [`Session.refresh.lockmode`](#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all "sqlalchemy.orm.Session.expire_all")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Populate Existing](queryguide/api.html#orm-queryguide-populate-existing) -
    allows any ORM query to refresh objects as they would be loaded normally.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: Close out the transactional resources and ORM objects used by this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), resetting the session to its initial state.
  prefs: []
  type: TYPE_NORMAL
- en: This method provides for same “reset-only” behavior that the [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method has provided historically, where the state
    of the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") is reset
    as though the object were brand new, and ready to be used again. This method may
    then be useful for [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects which set [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") to `False`, so that “reset only” behavior is still available.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.22.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Closing](session_basics.html#session-closing) - detail on the semantics of
    [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - a similar method will additionally prevent re-use of the Session when the parameter
    [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") is set to `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: Rollback the current transaction in progress.
  prefs: []
  type: TYPE_NORMAL
- en: If no transaction is in progress, this method is a pass-through.
  prefs: []
  type: TYPE_NORMAL
- en: The method always rolls back the topmost database transaction, discarding any
    nested transactions that may be in progress.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Rolling Back](session_basics.html#session-rollback)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return a scalar result.
  prefs: []
  type: TYPE_NORMAL
- en: Usage and parameters are the same as that of [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"); the return result is a scalar Python value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: Execute a statement and return the results as scalars.
  prefs: []
  type: TYPE_NORMAL
- en: Usage and parameters are the same as that of [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"); the return result is a [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") filtering object which will return single elements
    rather than [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    object
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.24: Added [`Session.scalars()`](#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.26: Added [`scoped_session.scalars()`](contextual.html#sqlalchemy.orm.scoped_session.scalars
    "sqlalchemy.orm.scoped_session.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Selecting ORM Entities](queryguide/select.html#orm-queryguide-select-orm-entities)
    - contrasts the behavior of [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") to [`Session.scalars()`](#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: A [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")-level transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    is produced from the [`Session.begin()`](#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")
    and [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")
    methods. It’s largely an internal object that in modern use provides a context
    manager for session transactions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Documentation on interacting with [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is at: [Managing Transactions](session_transaction.html#unitofwork-transaction).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: The scoping and API methods to work with the [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object directly have been simplified.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.begin()`](#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.rollback()`](#sqlalchemy.orm.Session.rollback "sqlalchemy.orm.Session.rollback")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.in_transaction()`](#sqlalchemy.orm.Session.in_transaction "sqlalchemy.orm.Session.in_transaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.in_nested_transaction()`](#sqlalchemy.orm.Session.in_nested_transaction
    "sqlalchemy.orm.Session.in_nested_transaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get_transaction()`](#sqlalchemy.orm.Session.get_transaction "sqlalchemy.orm.Session.get_transaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.get_nested_transaction()`](#sqlalchemy.orm.Session.get_nested_transaction
    "sqlalchemy.orm.Session.get_nested_transaction")'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[nested](#sqlalchemy.orm.SessionTransaction.nested), [origin](#sqlalchemy.orm.SessionTransaction.origin),
    [parent](#sqlalchemy.orm.SessionTransaction.parent)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") (`sqlalchemy.orm.state_changes._StateChange`,
    `sqlalchemy.engine.util.TransactionalContext`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: Indicates if this is a nested, or SAVEPOINT, transaction.
  prefs: []
  type: TYPE_NORMAL
- en: When [`SessionTransaction.nested`](#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested") is True, it is expected that [`SessionTransaction.parent`](#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent") will be present as well, linking to
    the enclosing [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`SessionTransaction.origin`](#sqlalchemy.orm.SessionTransaction.origin "sqlalchemy.orm.SessionTransaction.origin")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: Origin of this [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: Refers to a [`SessionTransactionOrigin`](#sqlalchemy.orm.SessionTransactionOrigin
    "sqlalchemy.orm.SessionTransactionOrigin") instance which is an enumeration indicating
    the source event that led to constructing this [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: The parent [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    of this [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: If this attribute is `None`, indicates this [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is at the top of the stack, and corresponds
    to a real “COMMIT”/”ROLLBACK” block. If non-`None`, then this is either a “subtransaction”
    (an internal marker object used by the flush process) or a “nested” / SAVEPOINT
    transaction. If the [`SessionTransaction.nested`](#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested") attribute is `True`, then this is
    a SAVEPOINT, and if `False`, indicates this a subtransaction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: indicates the origin of a [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  prefs: []
  type: TYPE_NORMAL
- en: This enumeration is present on the [`SessionTransaction.origin`](#sqlalchemy.orm.SessionTransaction.origin
    "sqlalchemy.orm.SessionTransaction.origin") attribute of any [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[AUTOBEGIN](#sqlalchemy.orm.SessionTransactionOrigin.AUTOBEGIN), [BEGIN](#sqlalchemy.orm.SessionTransactionOrigin.BEGIN),
    [BEGIN_NESTED](#sqlalchemy.orm.SessionTransactionOrigin.BEGIN_NESTED), [SUBTRANSACTION](#sqlalchemy.orm.SessionTransactionOrigin.SUBTRANSACTION)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.SessionTransactionOrigin`](#sqlalchemy.orm.SessionTransactionOrigin
    "sqlalchemy.orm.SessionTransactionOrigin") (`enum.Enum`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: transaction were started by autobegin
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: transaction were started by calling [`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: tranaction were started by [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: transaction is an internal “subtransaction”
  prefs: []
  type: TYPE_NORMAL
- en: Session Utilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [close_all_sessions](#sqlalchemy.orm.close_all_sessions)() | Close all sessions
    in memory. |'
  prefs: []
  type: TYPE_TB
- en: '| [make_transient](#sqlalchemy.orm.make_transient)(instance) | Alter the state
    of the given instance so that it is [transient](../glossary.html#term-transient).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [make_transient_to_detached](#sqlalchemy.orm.make_transient_to_detached)(instance)
    | Make the given transient instance [detached](../glossary.html#term-detached).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [object_session](#sqlalchemy.orm.object_session)(instance) | Return the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to which the given instance belongs. |'
  prefs: []
  type: TYPE_TB
- en: '| [was_deleted](#sqlalchemy.orm.util.was_deleted)(object_) | Return True if
    the given object was deleted within a session flush. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: Close all sessions in memory.
  prefs: []
  type: TYPE_NORMAL
- en: This function consults a global registry of all [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects and calls [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") on them, which resets them to a clean state.
  prefs: []
  type: TYPE_NORMAL
- en: This function is not for general use but may be useful for test suites within
    the teardown scheme.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: Alter the state of the given instance so that it is [transient](../glossary.html#term-transient).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")
    is a special-case function for advanced use cases only.'
  prefs: []
  type: TYPE_NORMAL
- en: The given mapped instance is assumed to be in the [persistent](../glossary.html#term-persistent)
    or [detached](../glossary.html#term-detached) state. The function will remove
    its association with any [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    as well as its [`InstanceState.identity`](internals.html#sqlalchemy.orm.InstanceState.identity
    "sqlalchemy.orm.InstanceState.identity"). The effect is that the object will behave
    as though it were newly constructed, except retaining any attribute / collection
    values that were loaded at the time of the call. The [`InstanceState.deleted`](internals.html#sqlalchemy.orm.InstanceState.deleted
    "sqlalchemy.orm.InstanceState.deleted") flag is also reset if this object had
    been deleted as a result of using [`Session.delete()`](#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete").
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")
    does **not** “unexpire” or otherwise eagerly load ORM-mapped attributes that are
    not currently loaded at the time the function is called. This includes attributes
    which:'
  prefs: []
  type: TYPE_NORMAL
- en: were expired via [`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: were expired as the natural effect of committing a session transaction, e.g.
    [`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: are normally [lazy loaded](../glossary.html#term-lazy-loaded) but are not currently
    loaded
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: are “deferred” (see [Limiting which Columns Load with Column Deferral](queryguide/columns.html#orm-queryguide-column-deferral))
    and are not yet loaded
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: were not present in the query which loaded this object, such as that which is
    common in joined table inheritance and other scenarios.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After [`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")
    is called, unloaded attributes such as those above will normally resolve to the
    value `None` when accessed, or an empty collection for a collection-oriented attribute.
    As the object is transient and un-associated with any database identity, it will
    no longer retrieve these values.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: Make the given transient instance [detached](../glossary.html#term-detached).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") is a special-case function for advanced
    use cases only.'
  prefs: []
  type: TYPE_NORMAL
- en: All attribute history on the given instance will be reset as though the instance
    were freshly loaded from a query. Missing attributes will be marked as expired.
    The primary key attributes of the object, which are required, will be made into
    the “key” of the instance.
  prefs: []
  type: TYPE_NORMAL
- en: The object can then be added to a session, or merged possibly with the load=False
    flag, at which point it will look as if it were loaded that way, without emitting
    SQL.
  prefs: []
  type: TYPE_NORMAL
- en: This is a special use case function that differs from a normal call to [`Session.merge()`](#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") in that a given persistent state can be manufactured
    without any SQL calls.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") to
    which the given instance belongs.
  prefs: []
  type: TYPE_NORMAL
- en: This is essentially the same as the [`InstanceState.session`](internals.html#sqlalchemy.orm.InstanceState.session
    "sqlalchemy.orm.InstanceState.session") accessor. See that attribute for details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: Return True if the given object was deleted within a session flush.
  prefs: []
  type: TYPE_NORMAL
- en: This is regardless of whether or not the object is persistent or detached.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`InstanceState.was_deleted`](internals.html#sqlalchemy.orm.InstanceState.was_deleted
    "sqlalchemy.orm.InstanceState.was_deleted")'
  prefs: []
  type: TYPE_NORMAL
- en: Attribute and State Management Utilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These functions are provided by the SQLAlchemy attribute instrumentation API
    to provide a detailed interface for dealing with instances, attribute values,
    and history. Some of them are useful when constructing event listener functions,
    such as those described in [ORM Events](events.html).
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [del_attribute](#sqlalchemy.orm.attributes.del_attribute)(instance, key)
    | Delete the value of an attribute, firing history events. |'
  prefs: []
  type: TYPE_TB
- en: '| [flag_dirty](#sqlalchemy.orm.attributes.flag_dirty)(instance) | Mark an instance
    as ‘dirty’ without any specific attribute mentioned. |'
  prefs: []
  type: TYPE_TB
- en: '| [flag_modified](#sqlalchemy.orm.attributes.flag_modified)(instance, key)
    | Mark an attribute on an instance as ‘modified’. |'
  prefs: []
  type: TYPE_TB
- en: '| [get_attribute](#sqlalchemy.orm.attributes.get_attribute)(instance, key)
    | Get the value of an attribute, firing any callables required. |'
  prefs: []
  type: TYPE_TB
- en: '| [get_history](#sqlalchemy.orm.attributes.get_history)(obj, key[, passive])
    | Return a [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    record for the given object and attribute key. |'
  prefs: []
  type: TYPE_TB
- en: '| [History](#sqlalchemy.orm.attributes.History) | A 3-tuple of added, unchanged
    and deleted values, representing the changes which have occurred on an instrumented
    attribute. |'
  prefs: []
  type: TYPE_TB
- en: '| [init_collection](#sqlalchemy.orm.attributes.init_collection)(obj, key) |
    Initialize a collection attribute and return the collection adapter. |'
  prefs: []
  type: TYPE_TB
- en: '| [instance_state](#sqlalchemy.orm.attributes.instance_state) | Return the
    [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    for a given mapped object. |'
  prefs: []
  type: TYPE_TB
- en: '| [is_instrumented](#sqlalchemy.orm.instrumentation.is_instrumented)(instance,
    key) | Return True if the given attribute on the given instance is instrumented
    by the attributes package. |'
  prefs: []
  type: TYPE_TB
- en: '| [object_state](#sqlalchemy.orm.util.object_state)(instance) | Given an object,
    return the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    associated with the object. |'
  prefs: []
  type: TYPE_TB
- en: '| [set_attribute](#sqlalchemy.orm.attributes.set_attribute)(instance, key,
    value[, initiator]) | Set the value of an attribute, firing history events. |'
  prefs: []
  type: TYPE_TB
- en: '| [set_committed_value](#sqlalchemy.orm.attributes.set_committed_value)(instance,
    key, value) | Set the value of an attribute with no history events. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: Given an object, return the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") associated with the object.
  prefs: []
  type: TYPE_NORMAL
- en: Raises [`sqlalchemy.orm.exc.UnmappedInstanceError`](exceptions.html#sqlalchemy.orm.exc.UnmappedInstanceError
    "sqlalchemy.orm.exc.UnmappedInstanceError") if no mapping is configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Equivalent functionality is available via the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: Using the inspection system will raise [`sqlalchemy.exc.NoInspectionAvailable`](../core/exceptions.html#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable") if the instance is not part of a mapping.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: Delete the value of an attribute, firing history events.
  prefs: []
  type: TYPE_NORMAL
- en: This function may be used regardless of instrumentation applied directly to
    the class, i.e. no descriptors are required. Custom attribute management schemes
    will need to make usage of this method to establish attribute state as understood
    by SQLAlchemy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: Get the value of an attribute, firing any callables required.
  prefs: []
  type: TYPE_NORMAL
- en: This function may be used regardless of instrumentation applied directly to
    the class, i.e. no descriptors are required. Custom attribute management schemes
    will need to make usage of this method to make usage of attribute state as understood
    by SQLAlchemy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: Return a [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    record for the given object and attribute key.
  prefs: []
  type: TYPE_NORMAL
- en: This is the **pre-flush** history for a given attribute, which is reset each
    time the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") flushes
    changes to the current database transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Prefer to use the [`AttributeState.history`](internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history") and [`AttributeState.load_history()`](internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history") accessors to retrieve the [`History`](#sqlalchemy.orm.attributes.History
    "sqlalchemy.orm.attributes.History") for instance attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`obj` – an object whose class is instrumented by the attributes package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` – string attribute name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`passive` – indicates loading behavior for the attribute if the value is not
    already present. This is a bitflag attribute, which defaults to the symbol `PASSIVE_OFF`
    indicating all necessary SQL should be emitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeState.history`](internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`AttributeState.load_history()`](internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history") - retrieve history using loader
    callables if the value is not locally present.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: Initialize a collection attribute and return the collection adapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function is used to provide direct access to collection internals for
    a previously unloaded attribute. e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: For an easier way to do the above, see [`set_committed_value()`](#sqlalchemy.orm.attributes.set_committed_value
    "sqlalchemy.orm.attributes.set_committed_value").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`obj` – a mapped object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` – string attribute name where the collection is located.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: Mark an attribute on an instance as ‘modified’.
  prefs: []
  type: TYPE_NORMAL
- en: This sets the ‘modified’ flag on the instance and establishes an unconditional
    change event for the given attribute. The attribute must have a value present,
    else an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised.
  prefs: []
  type: TYPE_NORMAL
- en: To mark an object “dirty” without referring to any specific attribute so that
    it is considered within a flush, use the [`flag_dirty()`](#sqlalchemy.orm.attributes.flag_dirty
    "sqlalchemy.orm.attributes.flag_dirty") call.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`flag_dirty()`](#sqlalchemy.orm.attributes.flag_dirty "sqlalchemy.orm.attributes.flag_dirty")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: Mark an instance as ‘dirty’ without any specific attribute mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: This is a special operation that will allow the object to travel through the
    flush process for interception by events such as [`SessionEvents.before_flush()`](events.html#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush"). Note that no SQL will be emitted
    in the flush process for an object that has no changes, even if marked dirty via
    this method. However, a [`SessionEvents.before_flush()`](events.html#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") handler will be able to see the object
    in the [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")
    collection and may establish changes on it, which will then be included in the
    SQL emitted.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`flag_modified()`](#sqlalchemy.orm.attributes.flag_modified "sqlalchemy.orm.attributes.flag_modified")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: Return the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    for a given mapped object.
  prefs: []
  type: TYPE_NORMAL
- en: This function is the internal version of [`object_state()`](#sqlalchemy.orm.util.object_state
    "sqlalchemy.orm.util.object_state"). The [`object_state()`](#sqlalchemy.orm.util.object_state
    "sqlalchemy.orm.util.object_state") and/or the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function is preferred here as they each emit an informative
    exception if the given object is not mapped.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: Return True if the given attribute on the given instance is instrumented by
    the attributes package.
  prefs: []
  type: TYPE_NORMAL
- en: This function may be used regardless of instrumentation applied directly to
    the class, i.e. no descriptors are required.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: Set the value of an attribute, firing history events.
  prefs: []
  type: TYPE_NORMAL
- en: This function may be used regardless of instrumentation applied directly to
    the class, i.e. no descriptors are required. Custom attribute management schemes
    will need to make usage of this method to establish attribute state as understood
    by SQLAlchemy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – the object that will be modified'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` – string name of the attribute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value` – value to assign'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initiator` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an instance of `Event` that would have been propagated from a previous event
    listener. This argument is used when the [`set_attribute()`](#sqlalchemy.orm.attributes.set_attribute
    "sqlalchemy.orm.attributes.set_attribute") function is being used within an existing
    event listening function where an `Event` object is being supplied; the object
    may be used to track the origin of the chain of events.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.2.3.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: Set the value of an attribute with no history events.
  prefs: []
  type: TYPE_NORMAL
- en: Cancels any previous history present. The value should be a scalar value for
    scalar-holding attributes, or an iterable for any collection-holding attribute.
  prefs: []
  type: TYPE_NORMAL
- en: This is the same underlying method used when a lazy loader fires off and loads
    additional data from the database. In particular, this method can be used by application
    code which has loaded additional attributes or collections through separate queries,
    which can then be attached to an instance as though it were part of its original
    loaded state.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: A 3-tuple of added, unchanged and deleted values, representing the changes which
    have occurred on an instrumented attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to get a [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    object for a particular attribute on an object is to use the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: 'Each tuple member is an iterable sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '`added` - the collection of items added to the attribute (the first tuple element).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unchanged` - the collection of items that have not changed on the attribute
    (the second tuple element).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deleted` - the collection of items that have been removed from the attribute
    (the third tuple element).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[added](#sqlalchemy.orm.attributes.History.added), [deleted](#sqlalchemy.orm.attributes.History.deleted),
    [empty()](#sqlalchemy.orm.attributes.History.empty), [has_changes()](#sqlalchemy.orm.attributes.History.has_changes),
    [non_added()](#sqlalchemy.orm.attributes.History.non_added), [non_deleted()](#sqlalchemy.orm.attributes.History.non_deleted),
    [sum()](#sqlalchemy.orm.attributes.History.sum), [unchanged](#sqlalchemy.orm.attributes.History.unchanged)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class `sqlalchemy.orm.History` (`builtins.tuple`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: Alias for field number 0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: Alias for field number 2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    has no changes and no existing, unchanged state.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: Return True if this [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    has changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: Return a collection of unchanged + deleted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: Return a collection of added + unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: Return a collection of added + unchanged + deleted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: Alias for field number 1
  prefs: []
  type: TYPE_NORMAL
