- en: Session API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Session API
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/session_api.html](https://docs.sqlalchemy.org/en/20/orm/session_api.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/session_api.html](https://docs.sqlalchemy.org/en/20/orm/session_api.html)
- en: Session and sessionmaker()
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Session 和 sessionmaker()
- en: '| Object Name | Description |'
  id: totrans-3
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [ORMExecuteState](#sqlalchemy.orm.ORMExecuteState) | Represents a call to
    the [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    method, as passed to the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| [ORMExecuteState](#sqlalchemy.orm.ORMExecuteState) | 表示对[`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法的调用，作为传递给[`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件钩子的参数。 |'
- en: '| [Session](#sqlalchemy.orm.Session) | Manages persistence operations for ORM-mapped
    objects. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| [Session](#sqlalchemy.orm.Session) | 管理ORM映射对象的持久化操作。 |'
- en: '| [sessionmaker](#sqlalchemy.orm.sessionmaker) | A configurable [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") factory. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| [sessionmaker](#sqlalchemy.orm.sessionmaker) | 可配置的[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")工厂。 |'
- en: '| [SessionTransaction](#sqlalchemy.orm.SessionTransaction) | A [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")-level transaction. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| [SessionTransaction](#sqlalchemy.orm.SessionTransaction) | 一个[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")级别的事务。 |'
- en: '| [SessionTransactionOrigin](#sqlalchemy.orm.SessionTransactionOrigin) | indicates
    the origin of a [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction").
    |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| [SessionTransactionOrigin](#sqlalchemy.orm.SessionTransactionOrigin) | 表示[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")的来源。 |'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A configurable [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    factory.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可配置的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")工厂。
- en: The [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    factory generates new [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects when called, creating them given the configurational arguments established
    here.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")工厂在调用时生成新的[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象，在此处建立的配置参数的基础上创建它们。'
- en: 'e.g.:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Context manager use is optional; otherwise, the returned [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object may be closed explicitly via the [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method. Using a `try:/finally:` block is optional,
    however will ensure that the close takes place even if there are database errors:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文管理器的使用是可选的；否则，通过[`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")方法可以显式关闭返回的[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象。使用`try:/finally:`块是可选的，但是会确保即使存在数据库错误，关闭也会发生：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    acts as a factory for [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects in the same way as an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") acts as a factory for [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects. In this way it also includes a [`sessionmaker.begin()`](#sqlalchemy.orm.sessionmaker.begin
    "sqlalchemy.orm.sessionmaker.begin") method, that provides a context manager which
    both begins and commits a transaction, as well as closes out the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") when complete, rolling back the transaction if any errors
    occur:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")充当[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")充当[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象的工厂的工厂。以这种方式，它还包括一个[`sessionmaker.begin()`](#sqlalchemy.orm.sessionmaker.begin
    "sqlalchemy.orm.sessionmaker.begin")方法，提供一个上下文管理器，该管理器既开始又提交事务，完成后关闭[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，如果出现任何错误，则回滚事务：'
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: New in version 1.4.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本1.4中新增。
- en: 'When calling upon [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    to construct a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    keyword arguments may also be passed to the method; these arguments will override
    that of the globally configured parameters. Below we use a [`sessionmaker`](#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") bound to a certain [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") to produce a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    that is instead bound to a specific [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") procured from that engine:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用[`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")来构造一个[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时，也可以传递关键字参数给方法；这些参数将覆盖全局配置的参数。下面我们使用一个绑定到某个[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的[`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")来生成一个[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，而该`Session`则绑定到从该引擎获取的特定[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")上：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The class also includes a method [`sessionmaker.configure()`](#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure"), which can be used to specify additional
    keyword arguments to the factory, which will take effect for subsequent [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects generated. This is usually used to associate
    one or more [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    objects with an existing [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    factory before it is first used:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 该类还包括一个方法[`sessionmaker.configure()`](#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure")，用于指定工厂的其他关键字参数，这些参数将对生成的后续[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象生效。通常用于在首次使用之前将一个或多个[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象与现有的[`sessionmaker`](#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")工厂关联起来：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: See also
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Opening and Closing a Session](session_basics.html#session-getting) - introductory
    text on creating sessions using [`sessionmaker`](#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[打开和关闭会话](session_basics.html#session-getting) - 关于使用[`sessionmaker`](#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")创建会话的介绍性文本。'
- en: '**Members**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__call__()](#sqlalchemy.orm.sessionmaker.__call__), [__init__()](#sqlalchemy.orm.sessionmaker.__init__),
    [begin()](#sqlalchemy.orm.sessionmaker.begin), [close_all()](#sqlalchemy.orm.sessionmaker.close_all),
    [configure()](#sqlalchemy.orm.sessionmaker.configure), [identity_key()](#sqlalchemy.orm.sessionmaker.identity_key),
    [object_session()](#sqlalchemy.orm.sessionmaker.object_session)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[__call__()](#sqlalchemy.orm.sessionmaker.__call__), [__init__()](#sqlalchemy.orm.sessionmaker.__init__),
    [begin()](#sqlalchemy.orm.sessionmaker.begin), [close_all()](#sqlalchemy.orm.sessionmaker.close_all),
    [configure()](#sqlalchemy.orm.sessionmaker.configure), [identity_key()](#sqlalchemy.orm.sessionmaker.identity_key),
    [object_session()](#sqlalchemy.orm.sessionmaker.object_session)'
- en: '**Class signature**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    (`sqlalchemy.orm.session._SessionClassMethods`, `typing.Generic`)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")（`sqlalchemy.orm.session._SessionClassMethods`,
    `typing.Generic`）
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Produce a new [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object using the configuration established in this [`sessionmaker`](#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用在这个[`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")中建立的配置生成一个新的[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象。
- en: 'In Python, the `__call__` method is invoked on an object when it is “called”
    in the same way as a function:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，当对象“被调用”时，会调用`__call__`方法，其方式与函数相同：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Construct a new [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker").
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")。
- en: All arguments here except for `class_` correspond to arguments accepted by [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") directly. See the [`Session.__init__()`](#sqlalchemy.orm.Session.__init__
    "sqlalchemy.orm.Session.__init__") docstring for more details on parameters.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的所有参数，除了`class_`之外，都与[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")直接接受的参数相对应。有关参数的更多详细信息，请参阅[`Session.__init__()`](#sqlalchemy.orm.Session.__init__
    "sqlalchemy.orm.Session.__init__")文档字符串。
- en: 'Parameters:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – a [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or other `Connectable` with which newly created [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects will be associated.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")或其他`Connectable`，新创建的[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象将与之关联。'
- en: '`class_` – class to use in order to create new [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects. Defaults to [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_` – 用于创建新的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的类。默认为[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。'
- en: '`autoflush` –'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoflush` –'
- en: The autoflush setting to use with newly created [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于新创建的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的自动刷新设置。
- en: See also
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Flushing](session_basics.html#session-flushing) - additional background on
    autoflush'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[刷新](session_basics.html#session-flushing) - 关于自动刷新的额外背景信息'
- en: '`expire_on_commit=True` – the [`Session.expire_on_commit`](#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") setting to use with newly created [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expire_on_commit=True` – 用于新创建的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的[`Session.expire_on_commit`](#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session")设置。'
- en: '`info` – optional dictionary of information that will be available via [`Session.info`](#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info"). Note this dictionary is *updated*, not replaced,
    when the `info` parameter is specified to the specific [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") construction operation.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选信息字典，将通过[`Session.info`](#sqlalchemy.orm.Session.info "sqlalchemy.orm.Session.info")可用。请注意，当指定`info`参数进行特定[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")构造操作时，此字典将被*更新*，而不是替换。'
- en: '`**kw` – all other keyword arguments are passed to the constructor of newly
    created [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") objects.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 所有其他关键字参数都传递给新创建的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的构造函数。'
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Produce a context manager that both provides a new [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") as well as a transaction that commits.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个上下文管理器，既提供一个新的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")，又提供一个提交的事务。
- en: 'e.g.:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: New in version 1.4.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.close_all`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.orm.session._SessionClassMethods.close_all` *方法的* `sqlalchemy.orm.session._SessionClassMethods`'
- en: Close *all* sessions in memory.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭内存中的*所有*会话。
- en: 'Deprecated since version 1.3: The [`Session.close_all()`](#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all") method is deprecated and will be removed in
    a future release. Please refer to `close_all_sessions()`.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.3起已弃用：[`Session.close_all()`](#sqlalchemy.orm.Session.close_all "sqlalchemy.orm.Session.close_all")方法已弃用，并将在将来的版本中删除。请参考`close_all_sessions()`。
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: (Re)configure the arguments for this sessionmaker.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: (重新)配置此sessionmaker的参数。
- en: 'e.g.:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.identity_key`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.orm.session._SessionClassMethods.identity_key` *方法的* `sqlalchemy.orm.session._SessionClassMethods`'
- en: Return an identity key.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个标识键。
- en: This is an alias of [`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key "sqlalchemy.orm.util.identity_key")的别名。
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.object_session`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.orm.session._SessionClassMethods.object_session` *方法的* `sqlalchemy.orm.session._SessionClassMethods`'
- en: Return the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") to
    which an object belongs.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个对象所属的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: This is an alias of [`object_session()`](#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session").
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`object_session()`](#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session")的别名。
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Represents a call to the [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method, as passed to the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 表示对[`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")方法的调用，作为传递给[`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件钩子的参数。
- en: New in version 1.4.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4中的新功能。
- en: See also
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Execute Events](session_events.html#session-execute-events) - top level documentation
    on how to use [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[执行事件](session_events.html#session-execute-events) - 如何使用[`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")的顶级文档。'
- en: '**Members**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.orm.ORMExecuteState.__init__), [all_mappers](#sqlalchemy.orm.ORMExecuteState.all_mappers),
    [bind_arguments](#sqlalchemy.orm.ORMExecuteState.bind_arguments), [bind_mapper](#sqlalchemy.orm.ORMExecuteState.bind_mapper),
    [execution_options](#sqlalchemy.orm.ORMExecuteState.execution_options), [invoke_statement()](#sqlalchemy.orm.ORMExecuteState.invoke_statement),
    [is_column_load](#sqlalchemy.orm.ORMExecuteState.is_column_load), [is_delete](#sqlalchemy.orm.ORMExecuteState.is_delete),
    [is_executemany](#sqlalchemy.orm.ORMExecuteState.is_executemany), [is_from_statement](#sqlalchemy.orm.ORMExecuteState.is_from_statement),
    [is_insert](#sqlalchemy.orm.ORMExecuteState.is_insert), [is_orm_statement](#sqlalchemy.orm.ORMExecuteState.is_orm_statement),
    [is_relationship_load](#sqlalchemy.orm.ORMExecuteState.is_relationship_load),
    [is_select](#sqlalchemy.orm.ORMExecuteState.is_select), [is_update](#sqlalchemy.orm.ORMExecuteState.is_update),
    [lazy_loaded_from](#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from), [load_options](#sqlalchemy.orm.ORMExecuteState.load_options),
    [loader_strategy_path](#sqlalchemy.orm.ORMExecuteState.loader_strategy_path),
    [local_execution_options](#sqlalchemy.orm.ORMExecuteState.local_execution_options),
    [parameters](#sqlalchemy.orm.ORMExecuteState.parameters), [session](#sqlalchemy.orm.ORMExecuteState.session),
    [statement](#sqlalchemy.orm.ORMExecuteState.statement), [update_delete_options](#sqlalchemy.orm.ORMExecuteState.update_delete_options),
    [update_execution_options()](#sqlalchemy.orm.ORMExecuteState.update_execution_options),
    [user_defined_options](#sqlalchemy.orm.ORMExecuteState.user_defined_options)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.orm.ORMExecuteState.__init__), [all_mappers](#sqlalchemy.orm.ORMExecuteState.all_mappers),
    [bind_arguments](#sqlalchemy.orm.ORMExecuteState.bind_arguments), [bind_mapper](#sqlalchemy.orm.ORMExecuteState.bind_mapper),
    [execution_options](#sqlalchemy.orm.ORMExecuteState.execution_options), [invoke_statement()](#sqlalchemy.orm.ORMExecuteState.invoke_statement),
    [is_column_load](#sqlalchemy.orm.ORMExecuteState.is_column_load), [is_delete](#sqlalchemy.orm.ORMExecuteState.is_delete),
    [is_executemany](#sqlalchemy.orm.ORMExecuteState.is_executemany), [is_from_statement](#sqlalchemy.orm.ORMExecuteState.is_from_statement),
    [is_insert](#sqlalchemy.orm.ORMExecuteState.is_insert), [is_orm_statement](#sqlalchemy.orm.ORMExecuteState.is_orm_statement),
    [is_relationship_load](#sqlalchemy.orm.ORMExecuteState.is_relationship_load),
    [is_select](#sqlalchemy.orm.ORMExecuteState.is_select), [is_update](#sqlalchemy.orm.ORMExecuteState.is_update),
    [lazy_loaded_from](#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from), [load_options](#sqlalchemy.orm.ORMExecuteState.load_options),
    [loader_strategy_path](#sqlalchemy.orm.ORMExecuteState.loader_strategy_path),
    [local_execution_options](#sqlalchemy.orm.ORMExecuteState.local_execution_options),
    [parameters](#sqlalchemy.orm.ORMExecuteState.parameters), [session](#sqlalchemy.orm.ORMExecuteState.session),
    [statement](#sqlalchemy.orm.ORMExecuteState.statement), [update_delete_options](#sqlalchemy.orm.ORMExecuteState.update_delete_options),
    [update_execution_options()](#sqlalchemy.orm.ORMExecuteState.update_execution_options),
    [user_defined_options](#sqlalchemy.orm.ORMExecuteState.user_defined_options)'
- en: '**Class signature**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    (`sqlalchemy.util.langhelpers.MemoizedSlots`)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    (`sqlalchemy.util.langhelpers.MemoizedSlots`)
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Construct a new [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState").
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")。
- en: this object is constructed internally.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象是在内部构造的。
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Return a sequence of all [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects that are involved at the top level of this statement.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此语句顶层涉及的所有[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象的序列。
- en: By “top level” we mean those [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects that would be represented in the result set rows
    for a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    query, or for a [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") or [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") query, the mapper that is the main subject
    of the UPDATE or DELETE.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: “顶级”指的是那些在[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")查询的结果集行中表示的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象，或者在[`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")或[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")查询中，是UPDATE或DELETE的主体。
- en: New in version 1.4.0b2.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.0b2中的新内容。
- en: See also
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[`ORMExecuteState.bind_mapper`](#sqlalchemy.orm.ORMExecuteState.bind_mapper
    "sqlalchemy.orm.ORMExecuteState.bind_mapper")'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ORMExecuteState.bind_mapper`](#sqlalchemy.orm.ORMExecuteState.bind_mapper
    "sqlalchemy.orm.ORMExecuteState.bind_mapper")'
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The dictionary passed as the [`Session.execute.bind_arguments`](#sqlalchemy.orm.Session.execute.params.bind_arguments
    "sqlalchemy.orm.Session.execute") dictionary.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 字典作为 [`Session.execute.bind_arguments`](#sqlalchemy.orm.Session.execute.params.bind_arguments
    "sqlalchemy.orm.Session.execute") 字典传递。
- en: This dictionary may be used by extensions to [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to pass arguments that will assist in determining amongst
    a set of database connections which one should be used to invoke this statement.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此字典可由扩展用于 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 以传递将有助于确定一组数据库连接中的哪一个应该用于调用此语句的参数。
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Return the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    that is the primary “bind” mapper.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 返回是主“绑定”映射器的 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。
- en: For an [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    object invoking an ORM statement, that is, the [`ORMExecuteState.is_orm_statement`](#sqlalchemy.orm.ORMExecuteState.is_orm_statement
    "sqlalchemy.orm.ORMExecuteState.is_orm_statement") attribute is `True`, this attribute
    will return the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    that is considered to be the “primary” mapper of the statement. The term “bind
    mapper” refers to the fact that a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object may be “bound” to multiple [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects keyed to mapped classes, and the “bind mapper”
    determines which of those [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects would be selected.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对于调用 ORM 语句的 [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    对象，即 [`ORMExecuteState.is_orm_statement`](#sqlalchemy.orm.ORMExecuteState.is_orm_statement
    "sqlalchemy.orm.ORMExecuteState.is_orm_statement") 属性为 `True` 的情况，此属性将返回被视为语句的“主”映射器。术语“绑定映射器”指的是
    [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 对象可能“绑定”到多个映射类键入的多个
    [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    对象，并且“绑定映射器”确定将选择哪个 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象。
- en: For a statement that is invoked against a single mapped class, [`ORMExecuteState.bind_mapper`](#sqlalchemy.orm.ORMExecuteState.bind_mapper
    "sqlalchemy.orm.ORMExecuteState.bind_mapper") is intended to be a reliable way
    of getting this mapper.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于针对单个映射类调用的语句，[`ORMExecuteState.bind_mapper`](#sqlalchemy.orm.ORMExecuteState.bind_mapper
    "sqlalchemy.orm.ORMExecuteState.bind_mapper") 旨在是获取此映射器的可靠方法。
- en: New in version 1.4.0b2.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.0b2 中的新功能。
- en: See also
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ORMExecuteState.all_mappers`](#sqlalchemy.orm.ORMExecuteState.all_mappers
    "sqlalchemy.orm.ORMExecuteState.all_mappers")'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ORMExecuteState.all_mappers`](#sqlalchemy.orm.ORMExecuteState.all_mappers
    "sqlalchemy.orm.ORMExecuteState.all_mappers")'
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The complete dictionary of current execution options.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当前执行选项的完整字典。
- en: This is a merge of the statement level options with the locally passed execution
    options.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是语句级选项与本地传递的执行选项的合并。
- en: See also
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ORMExecuteState.local_execution_options`](#sqlalchemy.orm.ORMExecuteState.local_execution_options
    "sqlalchemy.orm.ORMExecuteState.local_execution_options")'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ORMExecuteState.local_execution_options`](#sqlalchemy.orm.ORMExecuteState.local_execution_options
    "sqlalchemy.orm.ORMExecuteState.local_execution_options")'
- en: '[`Executable.execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 执行选项](queryguide/api.html#orm-queryguide-execution-options)'
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Execute the statement represented by this [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState"), without re-invoking events that have already
    proceeded.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 执行由此 [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    表示的语句，而不重新调用已经进行过的事件。
- en: This method essentially performs a re-entrant execution of the current statement
    for which the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event is being currently invoked.
    The use case for this is for event handlers that want to override how the ultimate
    [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object is returned, such as for schemes that retrieve results from an offline
    cache or which concatenate results from multiple executions.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法本质上执行当前语句的可重入执行，即当前调用 [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") 事件。这样做的用例是为了事件处理程序想要重写如何返回最终 [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象，比如从离线缓存检索结果或者将结果从多次执行中连接起来的方案。
- en: When the [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object is returned by the actual handler function within [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") and is propagated to the calling
    [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    method, the remainder of the [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method is preempted and the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object is returned to the caller of [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") immediately.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当实际处理程序函数在 [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") 中返回 [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象，并且传播到调用 [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 方法的地方时，[`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 方法的其余部分将被抢占，并且 [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象将立即返回给 [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 的调用者。
- en: 'Parameters:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`statement` – optional statement to be invoked, in place of the statement currently
    represented by [`ORMExecuteState.statement`](#sqlalchemy.orm.ORMExecuteState.statement
    "sqlalchemy.orm.ORMExecuteState.statement").'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` – 可选的语句，用于代替当前由 [`ORMExecuteState.statement`](#sqlalchemy.orm.ORMExecuteState.statement
    "sqlalchemy.orm.ORMExecuteState.statement") 表示的语句。'
- en: '`params` –'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params` –'
- en: optional dictionary of parameters or list of parameters which will be merged
    into the existing [`ORMExecuteState.parameters`](#sqlalchemy.orm.ORMExecuteState.parameters
    "sqlalchemy.orm.ORMExecuteState.parameters") of this [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState").
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的参数字典或参数列表将合并到此 [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    的现有 [`ORMExecuteState.parameters`](#sqlalchemy.orm.ORMExecuteState.parameters
    "sqlalchemy.orm.ORMExecuteState.parameters") 中。
- en: 'Changed in version 2.0: a list of parameter dictionaries is accepted for executemany
    executions.'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0 版更改：接受参数字典列表进行 executemany 执行。
- en: '`execution_options` – optional dictionary of execution options will be merged
    into the existing [`ORMExecuteState.execution_options`](#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options") of this [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState").'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` – 可选的执行选项字典将合并到此 [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState") 的现有 [`ORMExecuteState.execution_options`](#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options") 中。'
- en: '`bind_arguments` – optional dictionary of bind_arguments which will be merged
    amongst the current [`ORMExecuteState.bind_arguments`](#sqlalchemy.orm.ORMExecuteState.bind_arguments
    "sqlalchemy.orm.ORMExecuteState.bind_arguments") of this [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState").'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind_arguments` – 可选的 bind_arguments 字典将在此 [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState") 的当前 [`ORMExecuteState.bind_arguments`](#sqlalchemy.orm.ORMExecuteState.bind_arguments
    "sqlalchemy.orm.ORMExecuteState.bind_arguments") 中合并。'
- en: 'Returns:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object with ORM-level results.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一个带有 ORM 级结果的 [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象。
- en: See also
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 另见
- en: '[Re-Executing Statements](session_events.html#do-orm-execute-re-executing)
    - background and examples on the appropriate usage of [`ORMExecuteState.invoke_statement()`](#sqlalchemy.orm.ORMExecuteState.invoke_statement
    "sqlalchemy.orm.ORMExecuteState.invoke_statement").'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新执行语句](session_events.html#do-orm-execute-re-executing) - 关于 [`ORMExecuteState.invoke_statement()`](#sqlalchemy.orm.ORMExecuteState.invoke_statement
    "sqlalchemy.orm.ORMExecuteState.invoke_statement") 的适当用法的背景和示例。'
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Return True if the operation is refreshing column-oriented attributes on an
    existing ORM object.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作是刷新现有 ORM 对象上的基于列的属性，则返回 True。
- en: This occurs during operations such as [`Session.refresh()`](#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh"), as well as when an attribute deferred by [`defer()`](queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") is being loaded, or an attribute that was expired either
    directly by [`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")
    or via a commit operation is being loaded.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在诸如 [`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    的操作期间发生，以及当由 [`defer()`](queryguide/columns.html#sqlalchemy.orm.defer "sqlalchemy.orm.defer")
    推迟的属性正在加载时，或者由 [`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")
    直接或通过提交操作而过期的属性正在加载时。
- en: Handlers will very likely not want to add any options to queries when such an
    operation is occurring as the query should be a straight primary key fetch which
    should not have any additional WHERE criteria, and loader options travelling with
    the instance will have already been added to the query.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序在进行此类操作时很可能不希望向查询添加任何选项，因为查询应该是直接的主键获取，不应该有任何额外的 WHERE 条件，并且实例旅行的加载器选项已经添加到查询中。
- en: New in version 1.4.0b2.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.0b2 中的新功能。
- en: See also
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ORMExecuteState.is_relationship_load`](#sqlalchemy.orm.ORMExecuteState.is_relationship_load
    "sqlalchemy.orm.ORMExecuteState.is_relationship_load")'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ORMExecuteState.is_relationship_load`](#sqlalchemy.orm.ORMExecuteState.is_relationship_load
    "sqlalchemy.orm.ORMExecuteState.is_relationship_load")'
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: return True if this is a DELETE operation.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是一个 DELETE 操作，则返回 True。
- en: 'Changed in version 2.0.30: - the attribute is also True for a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") construct that is itself against
    a [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    construct, such as `select(Entity).from_statement(delete(..))`'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.30 版本中的更改：- 该属性对 [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") 构造也是真的，该构造本身针对 [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") 构造，例如 `select(Entity).from_statement(delete(..))`
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: return True if the parameters are a multi-element list of dictionaries with
    more than one dictionary.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果参数是一个包含多个字典且字典数量大于一个的列表，则返回 True。
- en: New in version 2.0.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0 中的新功能。
- en: '[PRE26]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: return True if this operation is a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") operation.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此操作是 [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") 操作，则返回 True。
- en: This is independent from [`ORMExecuteState.is_select`](#sqlalchemy.orm.ORMExecuteState.is_select
    "sqlalchemy.orm.ORMExecuteState.is_select"), as a `select().from_statement()`
    construct can be used with INSERT/UPDATE/DELETE RETURNING types of statements
    as well. [`ORMExecuteState.is_select`](#sqlalchemy.orm.ORMExecuteState.is_select
    "sqlalchemy.orm.ORMExecuteState.is_select") will only be set if the [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") is itself against a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这与 [`ORMExecuteState.is_select`](#sqlalchemy.orm.ORMExecuteState.is_select "sqlalchemy.orm.ORMExecuteState.is_select")
    独立，因为 `select().from_statement()` 构造也可以与 INSERT/UPDATE/DELETE RETURNING 类型的语句一起使用。[`ORMExecuteState.is_select`](#sqlalchemy.orm.ORMExecuteState.is_select
    "sqlalchemy.orm.ORMExecuteState.is_select") 仅在 [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") 本身针对 [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造时设置。
- en: New in version 2.0.30.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.30 中的新功能。
- en: '[PRE27]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: return True if this is an INSERT operation.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是一个 INSERT 操作，则返回 True。
- en: 'Changed in version 2.0.30: - the attribute is also True for a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") construct that is itself against
    a [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct, such as `select(Entity).from_statement(insert(..))`'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在2.0.30版本中更改： - 该属性对[`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement")构造也为True，该构造本身针对[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造，例如`select(Entity).from_statement(insert(..))`
- en: '[PRE28]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: return True if the operation is an ORM statement.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作是ORM语句，则返回True。
- en: This indicates that the select(), insert(), update(), or delete() being invoked
    contains ORM entities as subjects. For a statement that does not have ORM entities
    and instead refers only to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") metadata, it is invoked as a Core SQL statement and
    no ORM-level automation takes place.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示所调用的select()、insert()、update()或delete()包含ORM实体作为主体。对于没有ORM实体，而只引用[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")元数据的语句，它被调用为核心SQL语句，并且不发生ORM级别的自动化。
- en: '[PRE29]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Return True if this load is loading objects on behalf of a relationship.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此加载正在代表关系加载对象，则返回True。
- en: This means, the loader in effect is either a LazyLoader, SelectInLoader, SubqueryLoader,
    or similar, and the entire SELECT statement being emitted is on behalf of a relationship
    load.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，加载程序实际上是一个LazyLoader、SelectInLoader、SubqueryLoader或类似的加载程序，并且整个发出的SELECT语句都是代表关系加载的。
- en: Handlers will very likely not want to add any options to queries when such an
    operation is occurring, as loader options are already capable of being propagated
    to relationship loaders and should be already present.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 处理程序很可能不希望在发生此类操作时向查询添加任何选项，因为加载程序选项已经能够传播到关系加载程序，并且应已存在。
- en: See also
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ORMExecuteState.is_column_load`](#sqlalchemy.orm.ORMExecuteState.is_column_load
    "sqlalchemy.orm.ORMExecuteState.is_column_load")'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ORMExecuteState.is_column_load`](#sqlalchemy.orm.ORMExecuteState.is_column_load
    "sqlalchemy.orm.ORMExecuteState.is_column_load")'
- en: '[PRE30]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: return True if this is a SELECT operation.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是一个SELECT操作，则返回True。
- en: 'Changed in version 2.0.30: - the attribute is also True for a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") construct that is itself against
    a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct, such as `select(Entity).from_statement(select(..))`'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在2.0.30版本中更改： - 该属性对[`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement")构造也为True，该构造本身针对[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造，例如`select(Entity).from_statement(select(..))`
- en: '[PRE31]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: return True if this is an UPDATE operation.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是一个UPDATE操作，则返回True。
- en: 'Changed in version 2.0.30: - the attribute is also True for a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") construct that is itself against
    a [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct, such as `select(Entity).from_statement(update(..))`'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在2.0.30版本中更改： - 该属性对[`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement")构造也为True，该构造本身针对[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造，例如`select(Entity).from_statement(update(..))`
- en: '[PRE32]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: An [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    that is using this statement execution for a lazy load operation.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 正在使用此语句执行进行延迟加载操作的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。
- en: The primary rationale for this attribute is to support the horizontal sharding
    extension, where it is available within specific query execution time hooks created
    by this extension. To that end, the attribute is only intended to be meaningful
    at **query execution time**, and importantly not any time prior to that, including
    query compilation time.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性的主要理由是支持水平分片扩展，在此扩展创建的特定查询执行时间钩子中可用。为此，该属性仅打算在**查询执行时间**具有意义，而且重要的是不是在此之前的任何时间，包括查询编译时间。
- en: '[PRE33]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Return the load_options that will be used for this execution.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 返回将用于此执行的`load_options`。
- en: '[PRE34]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Return the `PathRegistry` for the current load path.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前加载路径的`PathRegistry`。
- en: This object represents the “path” in a query along relationships when a particular
    object or collection is being loaded.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象表示查询中关系的“路径”，当加载特定对象或集合时。
- en: '[PRE35]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Dictionary view of the execution options passed to the [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    方法传递的执行选项的字典视图。'
- en: This does not include options that may be associated with the statement being
    invoked.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这不包括与被调用语句相关的选项。
- en: See also
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ORMExecuteState.execution_options`](#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options")'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ORMExecuteState.execution_options`](#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options")'
- en: '[PRE36]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Dictionary of parameters that was passed to [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给 [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    方法的参数字典。
- en: '[PRE37]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") in use.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 正在使用的 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: '[PRE38]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The SQL statement being invoked.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 被调用的 SQL 语句。
- en: For an ORM selection as would be retrieved from [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), this is an instance of [`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") that was generated from the ORM query.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像从 [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    检索到的 ORM 选择，这是从 ORM 查询生成的 [`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 的一个实例。
- en: '[PRE39]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Return the update_delete_options that will be used for this execution.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 返回将用于此执行的 update_delete_options。
- en: '[PRE40]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Update the local execution options with new values.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新值更新本地执行选项。
- en: '[PRE41]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The sequence of `UserDefinedOptions` that have been associated with the statement
    being invoked.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 与被调用语句关联的 `UserDefinedOptions` 序列。
- en: '[PRE42]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Manages persistence operations for ORM-mapped objects.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 管理 ORM 映射对象的持久化操作。
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") is **not safe
    for use in concurrent threads.**. See [Is the Session thread-safe? Is AsyncSession
    safe to share in concurrent tasks?](session_basics.html#session-faq-threadsafe)
    for background.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") **不适用于并发线程**。有关详情，请参阅[会话是否线程安全？
    AsyncSession 是否安全可在并发任务中共享？](session_basics.html#session-faq-threadsafe)。'
- en: The Session’s usage paradigm is described at [Using the Session](session.html).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Session 的使用范例请参见[使用 Session](session.html)。
- en: '**Members**'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.orm.Session.__init__), [add()](#sqlalchemy.orm.Session.add),
    [add_all()](#sqlalchemy.orm.Session.add_all), [begin()](#sqlalchemy.orm.Session.begin),
    [begin_nested()](#sqlalchemy.orm.Session.begin_nested), [bind_mapper()](#sqlalchemy.orm.Session.bind_mapper),
    [bind_table()](#sqlalchemy.orm.Session.bind_table), [bulk_insert_mappings()](#sqlalchemy.orm.Session.bulk_insert_mappings),
    [bulk_save_objects()](#sqlalchemy.orm.Session.bulk_save_objects), [bulk_update_mappings()](#sqlalchemy.orm.Session.bulk_update_mappings),
    [close()](#sqlalchemy.orm.Session.close), [close_all()](#sqlalchemy.orm.Session.close_all),
    [commit()](#sqlalchemy.orm.Session.commit), [connection()](#sqlalchemy.orm.Session.connection),
    [delete()](#sqlalchemy.orm.Session.delete), [deleted](#sqlalchemy.orm.Session.deleted),
    [dirty](#sqlalchemy.orm.Session.dirty), [enable_relationship_loading()](#sqlalchemy.orm.Session.enable_relationship_loading),
    [execute()](#sqlalchemy.orm.Session.execute), [expire()](#sqlalchemy.orm.Session.expire),
    [expire_all()](#sqlalchemy.orm.Session.expire_all), [expunge()](#sqlalchemy.orm.Session.expunge),
    [expunge_all()](#sqlalchemy.orm.Session.expunge_all), [flush()](#sqlalchemy.orm.Session.flush),
    [get()](#sqlalchemy.orm.Session.get), [get_bind()](#sqlalchemy.orm.Session.get_bind),
    [get_nested_transaction()](#sqlalchemy.orm.Session.get_nested_transaction), [get_one()](#sqlalchemy.orm.Session.get_one),
    [get_transaction()](#sqlalchemy.orm.Session.get_transaction), [identity_key()](#sqlalchemy.orm.Session.identity_key),
    [identity_map](#sqlalchemy.orm.Session.identity_map), [in_nested_transaction()](#sqlalchemy.orm.Session.in_nested_transaction),
    [in_transaction()](#sqlalchemy.orm.Session.in_transaction), [info](#sqlalchemy.orm.Session.info),
    [invalidate()](#sqlalchemy.orm.Session.invalidate), [is_active](#sqlalchemy.orm.Session.is_active),
    [is_modified()](#sqlalchemy.orm.Session.is_modified), [merge()](#sqlalchemy.orm.Session.merge),
    [new](#sqlalchemy.orm.Session.new), [no_autoflush](#sqlalchemy.orm.Session.no_autoflush),
    [object_session()](#sqlalchemy.orm.Session.object_session), [prepare()](#sqlalchemy.orm.Session.prepare),
    [query()](#sqlalchemy.orm.Session.query), [refresh()](#sqlalchemy.orm.Session.refresh),
    [reset()](#sqlalchemy.orm.Session.reset), [rollback()](#sqlalchemy.orm.Session.rollback),
    [scalar()](#sqlalchemy.orm.Session.scalar), [scalars()](#sqlalchemy.orm.Session.scalars)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.orm.Session.__init__), [add()](#sqlalchemy.orm.Session.add),
    [add_all()](#sqlalchemy.orm.Session.add_all), [begin()](#sqlalchemy.orm.Session.begin),
    [begin_nested()](#sqlalchemy.orm.Session.begin_nested), [bind_mapper()](#sqlalchemy.orm.Session.bind_mapper),
    [bind_table()](#sqlalchemy.orm.Session.bind_table), [bulk_insert_mappings()](#sqlalchemy.orm.Session.bulk_insert_mappings),
    [bulk_save_objects()](#sqlalchemy.orm.Session.bulk_save_objects), [bulk_update_mappings()](#sqlalchemy.orm.Session.bulk_update_mappings),
    [close()](#sqlalchemy.orm.Session.close), [close_all()](#sqlalchemy.orm.Session.close_all),
    [commit()](#sqlalchemy.orm.Session.commit), [connection()](#sqlalchemy.orm.Session.connection),
    [delete()](#sqlalchemy.orm.Session.delete), [deleted](#sqlalchemy.orm.Session.deleted),
    [dirty](#sqlalchemy.orm.Session.dirty), [enable_relationship_loading()](#sqlalchemy.orm.Session.enable_relationship_loading),
    [execute()](#sqlalchemy.orm.Session.execute), [expire()](#sqlalchemy.orm.Session.expire),
    [expire_all()](#sqlalchemy.orm.Session.expire_all), [expunge()](#sqlalchemy.orm.Session.expunge),
    [expunge_all()](#sqlalchemy.orm.Session.expunge_all), [flush()](#sqlalchemy.orm.Session.flush),
    [get()](#sqlalchemy.orm.Session.get), [get_bind()](#sqlalchemy.orm.Session.get_bind),
    [get_nested_transaction()](#sqlalchemy.orm.Session.get_nested_transaction), [get_one()](#sqlalchemy.orm.Session.get_one),
    [get_transaction()](#sqlalchemy.orm.Session.get_transaction), [identity_key()](#sqlalchemy.orm.Session.identity_key),
    [identity_map](#sqlalchemy.orm.Session.identity_map), [in_nested_transaction()](#sqlalchemy.orm.Session.in_nested_transaction),
    [in_transaction()](#sqlalchemy.orm.Session.in_transaction), [info](#sqlalchemy.orm.Session.info),
    [invalidate()](#sqlalchemy.orm.Session.invalidate), [is_active](#sqlalchemy.orm.Session.is_active),
    [is_modified()](#sqlalchemy.orm.Session.is_modified), [merge()](#sqlalchemy.orm.Session.merge),
    [new](#sqlalchemy.orm.Session.new), [no_autoflush](#sqlalchemy.orm.Session.no_autoflush),
    [object_session()](#sqlalchemy.orm.Session.object_session), [prepare()](#sqlalchemy.orm.Session.prepare),
    [query()](#sqlalchemy.orm.Session.query), [refresh()](#sqlalchemy.orm.Session.refresh),
    [reset()](#sqlalchemy.orm.Session.reset), [rollback()](#sqlalchemy.orm.Session.rollback),
    [scalar()](#sqlalchemy.orm.Session.scalar), [scalars()](#sqlalchemy.orm.Session.scalars)'
- en: '**Class signature**'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    (`sqlalchemy.orm.session._SessionClassMethods`, `sqlalchemy.event.registry.EventTarget`)
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    (`sqlalchemy.orm.session._SessionClassMethods`, `sqlalchemy.event.registry.EventTarget`)
- en: '[PRE43]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Construct a new [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: See also the [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    function which is used to generate a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")-producing
    callable with a given set of arguments.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 还请参阅 [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    函数，该函数用于生成具有给定参数集的产生 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    的可调用对象。
- en: 'Parameters:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`autoflush` –'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoflush` –'
- en: When `True`, all query operations will issue a [`Session.flush()`](#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") call to this `Session` before proceeding. This
    is a convenience feature so that [`Session.flush()`](#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") need not be called repeatedly in order for database
    queries to retrieve results.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为`True`时，所有查询操作将在继续之前对此`Session`发出一个[`Session.flush()`](#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")调用。这是一个方便的功能，使得不需要重复调用[`Session.flush()`](#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")以便数据库查询检索结果。
- en: See also
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Flushing](session_basics.html#session-flushing) - additional background on
    autoflush'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[刷新](session_basics.html#session-flushing) - 自动刷新的额外背景'
- en: '`autobegin` –'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autobegin` –'
- en: Automatically start transactions (i.e. equivalent to invoking [`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")) when database access is requested by an operation.
    Defaults to `True`. Set to `False` to prevent a [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") from implicitly beginning transactions after construction,
    as well as after any of the [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback"), [`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit"), or [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") methods are called.
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当请求由操作请求数据库访问时，自动启动事务（即相当于调用[`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")）。默认为`True`。将其设置为`False`以防止[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")在构造后隐式开始事务，以及在调用任何[`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")、[`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")或[`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")方法后隐式开始事务。
- en: New in version 2.0.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.0版中的新功能。
- en: See also
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Disabling Autobegin to Prevent Implicit Transactions](session_basics.html#session-autobegin-disable)'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[禁用自动启动以防止隐式事务](session_basics.html#session-autobegin-disable)'
- en: '`bind` – An optional [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") to which this `Session` should be bound. When
    specified, all SQL operations performed by this session will execute via this
    connectable.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 此`Session`应绑定到的可选[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。当指定时，此会话执行的所有 SQL 操作都将通过此连接执行。'
- en: '`binds` –'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binds` –'
- en: 'A dictionary which may specify any number of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects as the source of connectivity for SQL
    operations on a per-entity basis. The keys of the dictionary consist of any series
    of mapped classes, arbitrary Python classes that are bases for mapped classes,
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects and [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects. The values of the dictionary are then instances of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or less commonly [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects. Operations which proceed relative to
    a particular mapped class will consult this dictionary for the closest matching
    entity in order to determine which [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") should be used for a particular SQL operation. The
    complete heuristics for resolution are described at [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind"). Usage looks like:'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字典，可以指定任意数量的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")或[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象作为每个实体连接的源。字典的键由任何一系列映射类、任意的用作映射类基础的 Python 类、[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象和[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象组成。然后字典的值是[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或较少常见的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象的实例。针对特定映射类进行的操作将查询此字典，以确定用于特定 SQL 操作的最接近匹配实体为何。解析的完整启发式方法在[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")中描述。用法如下：
- en: '[PRE44]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: See also
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[分区策略（例如每个会话的多个数据库后端）](persistence_techniques.html#session-partitioning)'
- en: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
- en: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
- en: '[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")'
- en: '`class_` – Specify an alternate class other than `sqlalchemy.orm.session.Session`
    which should be used by the returned class. This is the only argument that is
    local to the [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    function, and is not sent directly to the constructor for `Session`.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_` – 指定除了 `sqlalchemy.orm.session.Session` 之外的另一个类，该类应该由返回的类使用。 这是唯一一个本地于
    [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker") 函数的参数，并且不直接发送到
    `Session` 的构造函数。'
- en: '`enable_baked_queries` –'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enable_baked_queries` –'
- en: legacy; defaults to `True`. A parameter consumed by the [`sqlalchemy.ext.baked`](extensions/baked.html#module-sqlalchemy.ext.baked
    "sqlalchemy.ext.baked") extension to determine if “baked queries” should be cached,
    as is the normal operation of this extension. When set to `False`, caching as
    used by this particular extension is disabled.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 经典； 默认为 `True`。 由 [`sqlalchemy.ext.baked`](extensions/baked.html#module-sqlalchemy.ext.baked
    "sqlalchemy.ext.baked") 扩展消耗的一个参数，用于确定是否应该缓存“烘焙查询”，正如该扩展的正常操作一样。 当设置为 `False`
    时，该特定扩展所使用的缓存被禁用。
- en: 'Changed in version 1.4: The `sqlalchemy.ext.baked` extension is legacy and
    is not used by any of SQLAlchemy’s internals. This flag therefore only affects
    applications that are making explicit use of this extension within their own code.'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.4 开始更改： `sqlalchemy.ext.baked` 扩展是遗留的，不被 SQLAlchemy 的任何内部使用。 因此，该标志仅影响在其自己的代码中明确使用此扩展的应用程序。
- en: '`expire_on_commit` –'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expire_on_commit` –'
- en: Defaults to `True`. When `True`, all instances will be fully expired after each
    [`commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit"),
    so that all attribute/object access subsequent to a completed transaction will
    load from the most recent database state.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 `True`。 当为 `True` 时，每次 [`commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    后所有实例都将完全过期，以便在完成事务后的所有属性/对象访问从最新的数据库状态加载。
- en: See also
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参阅
- en: ''
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Committing](session_basics.html#session-committing)'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[提交](session_basics.html#session-committing)'
- en: '`future` –'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`future` –'
- en: Deprecated; this flag is always True.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已弃用； 此标志始终为 True。
- en: See also
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQLAlchemy 2.0 - Major Migration Guide](../changelog/migration_20.html)'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQLAlchemy 2.0 - 主要迁移指南](../changelog/migration_20.html)'
- en: '`info` – optional dictionary of arbitrary data to be associated with this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). Is available via the [`Session.info`](#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info") attribute. Note the dictionary is copied at construction
    time so that modifications to the per- [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    dictionary will be local to that [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选的与此 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    关联的任意数据的字典。 可通过 [`Session.info`](#sqlalchemy.orm.Session.info "sqlalchemy.orm.Session.info")
    属性访问。 请注意，该字典在构造时被复制，因此对每个 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    字典的修改将局限于该 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '`query_cls` – Class which should be used to create new Query objects, as returned
    by the [`Session.query()`](#sqlalchemy.orm.Session.query "sqlalchemy.orm.Session.query")
    method. Defaults to [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query").'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query_cls` – 应该用于创建新的查询对象的类，由 [`Session.query()`](#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") 方法返回。 默认为 [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")。'
- en: '`twophase` – When `True`, all transactions will be started as a “two phase”
    transaction, i.e. using the “two phase” semantics of the database in use along
    with an XID. During a [`commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit"),
    after [`flush()`](#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush")
    has been issued for all attached databases, the [`TwoPhaseTransaction.prepare()`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") method on each database’s [`TwoPhaseTransaction`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction") will be called. This allows each database
    to roll back the entire transaction, before each transaction is committed.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`twophase` – 当为`True`时，所有事务都将作为“两阶段”事务启动，即使用正在使用的数据库的“两阶段”语义以及XID。在每个附加数据库上发出了所有附加数据库的[`flush()`](#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")之后，在[`commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")期间，将调用每个数据库的[`TwoPhaseTransaction`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction")的[`TwoPhaseTransaction.prepare()`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare")方法。这允许每个数据库在提交每个事务之前回滚整个事务。'
- en: '`autocommit` – the “autocommit” keyword is present for backwards compatibility
    but must remain at its default value of `False`.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autocommit` – “autocommit”关键字出现是为了向后兼容，但必须保持其默认值为`False`。'
- en: '`join_transaction_mode` –'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`join_transaction_mode` –'
- en: Describes the transactional behavior to take when a given bind is a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") that has already begun a transaction outside the
    scope of this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"); in
    other words the [`Connection.in_transaction()`](../core/connections.html#sqlalchemy.engine.Connection.in_transaction
    "sqlalchemy.engine.Connection.in_transaction") method returns True.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 描述了在给定绑定是已经在此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")范围之外开始事务的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")时要采取的事务行为；换句话说，[`Connection.in_transaction()`](../core/connections.html#sqlalchemy.engine.Connection.in_transaction
    "sqlalchemy.engine.Connection.in_transaction")方法返回True。
- en: 'The following behaviors only take effect when the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") **actually makes use of the connection given**; that
    is, a method such as [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute"),
    [`Session.connection()`](#sqlalchemy.orm.Session.connection "sqlalchemy.orm.Session.connection"),
    etc. are actually invoked:'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下行为仅在[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")**实际使用给定的连接**时才生效；也就是说，诸如[`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")、[`Session.connection()`](#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection")等方法实际上被调用：
- en: '`"conditional_savepoint"` - this is the default. if the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is begun within a transaction but does not have
    a SAVEPOINT, then `"rollback_only"` is used. If the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is additionally within a SAVEPOINT, in other words
    [`Connection.in_nested_transaction()`](../core/connections.html#sqlalchemy.engine.Connection.in_nested_transaction
    "sqlalchemy.engine.Connection.in_nested_transaction") method returns True, then
    `"create_savepoint"` is used.'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"conditional_savepoint"` - 这是默认值。如果给定的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")在事务中开始但没有保存点，则使用`"rollback_only"`。如果[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")此外还在保存点中，换句话说，[`Connection.in_nested_transaction()`](../core/connections.html#sqlalchemy.engine.Connection.in_nested_transaction
    "sqlalchemy.engine.Connection.in_nested_transaction")方法返回True，则使用`"create_savepoint"`。'
- en: '`"conditional_savepoint"` behavior attempts to make use of savepoints in order
    to keep the state of the existing transaction unchanged, but only if there is
    already a savepoint in progress; otherwise, it is not assumed that the backend
    in use has adequate support for SAVEPOINT, as availability of this feature varies.
    `"conditional_savepoint"` also seeks to establish approximate backwards compatibility
    with previous [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") behavior,
    for applications that are not setting a specific mode. It is recommended that
    one of the explicit settings be used.'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`"conditional_savepoint"` 行为试图利用SAVEPOINT以保持现有事务的状态不变，但只有在已经存在SAVEPOINT的情况下才会这样做；否则，不假定正在使用的后端具有足够的SAVEPOINT支持，因为此功能的可用性会有所变化。
    `"conditional_savepoint"` 还试图与之前的 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    行为建立大致的向后兼容性，适用于未设置特定模式的应用程序。建议使用其中一种显式设置。'
- en: '`"create_savepoint"` - the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will use [`Connection.begin_nested()`](../core/connections.html#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") in all cases to create its own transaction.
    This transaction by its nature rides “on top” of any existing transaction that’s
    opened on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"); if the underlying database and the driver in
    use has full, non-broken support for SAVEPOINT, the external transaction will
    remain unaffected throughout the lifespan of the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"create_savepoint"` - [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    将在所有情况下使用 [`Connection.begin_nested()`](../core/connections.html#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") 来创建自己的事务。该事务本质上“在顶部”上使用给定 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 上已打开的任何现有事务；如果底层数据库和正在使用的驱动程序完全且不破损地支持SAVEPOINT，则外部事务将在
    [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 的生命周期内保持不受影响。'
- en: The `"create_savepoint"` mode is the most useful for integrating a [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") into a test suite where an externally initiated transaction
    should remain unaffected; however, it relies on proper SAVEPOINT support from
    the underlying driver and database.
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`"create_savepoint"` 模式对于将 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    集成到测试套件中并使外部启动的事务保持不受影响是最有用的；但是，它依赖于底层驱动程序和数据库对SAVEPOINT的正确支持。'
- en: Tip
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: When using SQLite, the SQLite driver included through Python 3.11 does not handle
    SAVEPOINTs correctly in all cases without workarounds. See the sections [Serializable
    isolation / Savepoints / Transactional DDL](../dialects/sqlite.html#pysqlite-serializable)
    and [Serializable isolation / Savepoints / Transactional DDL (asyncio version)](../dialects/sqlite.html#aiosqlite-serializable)
    for details on current workarounds.
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当使用SQLite时，Python 3.11 中包含的SQLite驱动程序在某些情况下未正确处理SAVEPOINTs，需要使用解决方法。详见 [Serializable
    isolation / Savepoints / Transactional DDL](../dialects/sqlite.html#pysqlite-serializable)
    和 [Serializable isolation / Savepoints / Transactional DDL (asyncio version)](../dialects/sqlite.html#aiosqlite-serializable)
    部分。
- en: '`"control_fully"` - the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will take control of the given transaction as its own; [`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") will call `.commit()` on the transaction, [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") will call `.rollback()` on the transaction,
    [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    will call `.rollback` on the transaction.'
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"control_fully"` - [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    将控制给定事务作为自己的事务； [`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    将在事务上调用`.commit()`， [`Session.rollback()`](#sqlalchemy.orm.Session.rollback "sqlalchemy.orm.Session.rollback")
    将在事务上调用`.rollback()`， [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    将调用事务上的`.rollback`。'
- en: Tip
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: This mode of use is equivalent to how SQLAlchemy 1.4 would handle a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") given with an existing SAVEPOINT (i.e. [`Connection.begin_nested()`](../core/connections.html#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested")); the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") would take full control of the existing SAVEPOINT.
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此使用模式等同于SQLAlchemy 1.4处理具有现有SAVEPOINT的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的方式（即[`Connection.begin_nested()`](../core/connections.html#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested")）; [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")将完全控制现有的SAVEPOINT。
- en: '`"rollback_only"` - the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will take control of the given transaction for `.rollback()` calls only; `.commit()`
    calls will not be propagated to the given transaction. `.close()` calls will have
    no effect on the given transaction.'
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"rollback_only"` - [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")仅会接管给定事务的`.rollback()`调用；`.commit()`调用不会传播到给定事务。`.close()`调用不会对给定事务产生影响。'
- en: Tip
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: This mode of use is equivalent to how SQLAlchemy 1.4 would handle a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") given with an existing regular database transaction
    (i.e. [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")); the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") would propagate [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") calls to the underlying transaction, but not
    [`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    or [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    calls.
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此使用模式等同于SQLAlchemy 1.4处理具有现有常规数据库事务的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的方式（即[`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")）；[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")将传播[`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")调用到底层事务，但不会传播[`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")或[`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")调用。
- en: New in version 2.0.0rc1.
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自2.0.0rc1版本新增。
- en: '`close_resets_only` –'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`close_resets_only` -'
- en: Defaults to `True`. Determines if the session should reset itself after calling
    `.close()` or should pass in a no longer usable state, disabling re-use.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为`True`。确定会话在调用`.close()`后是否应该重置自身，还是应该处于不再可用的状态，禁用重用。
- en: 'New in version 2.0.22: added flag `close_resets_only`. A future SQLAlchemy
    version may change the default value of this flag to `False`.'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自2.0.22版本新增：添加标志`close_resets_only`。未来的SQLAlchemy版本可能会将此标志的默认值更改为`False`。
- en: See also
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Closing](session_basics.html#session-closing) - Detail on the semantics of
    [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关闭](session_basics.html#session-closing) - 关于[`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")和[`Session.reset()`](#sqlalchemy.orm.Session.reset
    "sqlalchemy.orm.Session.reset")语义的详细信息。'
- en: '[PRE45]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Place an object into this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个对象放入此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中。
- en: Objects that are in the [transient](../glossary.html#term-transient) state when
    passed to the [`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    method will move to the [pending](../glossary.html#term-pending) state, until
    the next flush, at which point they will move to the [persistent](../glossary.html#term-persistent)
    state.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给[`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")方法时处于[瞬时](../glossary.html#term-transient)状态的对象将移动到[挂起](../glossary.html#term-pending)状态，直到下一次刷新，然后它们将转移到[持久化](../glossary.html#term-persistent)状态。
- en: Objects that are in the [detached](../glossary.html#term-detached) state when
    passed to the [`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    method will move to the [persistent](../glossary.html#term-persistent) state directly.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给[`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")方法时处于[分离](../glossary.html#term-detached)状态的对象将直接转移到[持久化](../glossary.html#term-persistent)状态。
- en: If the transaction used by the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is rolled back, objects which were transient when they were passed to [`Session.add()`](#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") will be moved back to the [transient](../glossary.html#term-transient)
    state, and will no longer be present within this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")使用的事务被回滚，那些在传递给[`Session.add()`](#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add")时处于瞬态的对象将会被移回到[瞬态](../glossary.html#term-transient)状态，并且不再存在于这个[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。
- en: See also
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.add_all()`](#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.add_all()`](#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
- en: '[Adding New or Existing Items](session_basics.html#session-adding) - at [Basics
    of Using a Session](session_basics.html#id1)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加新项目或现有项目](session_basics.html#session-adding) - 在[使用会话的基础知识](session_basics.html#id1)'
- en: '[PRE46]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Add the given collection of instances to this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的实例集合添加到此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中。
- en: See the documentation for [`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    for a general behavioral description.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")的文档以获取一般行为描述。
- en: See also
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
- en: '[Adding New or Existing Items](session_basics.html#session-adding) - at [Basics
    of Using a Session](session_basics.html#id1)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加新项目或现有项目](session_basics.html#session-adding) - 在[使用会话的基础知识](session_basics.html#id1)'
- en: '[PRE47]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Begin a transaction, or nested transaction, on this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), if one is not already begun.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")上开始事务或嵌套事务（如果尚未开始）。
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") object features
    **autobegin** behavior, so that normally it is not necessary to call the [`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") method explicitly. However, it may be used in
    order to control the scope of when the transactional state is begun.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象具有**autobegin**行为，因此通常不需要显式调用[`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")方法。但是，它可以用来控制何时开始事务状态的范围。'
- en: When used to begin the outermost transaction, an error is raised if this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is already inside of a transaction.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 当用于开始最外层事务时，如果此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")已经处于事务中，则会引发错误。
- en: 'Parameters:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**nested** – if True, begins a SAVEPOINT transaction and is equivalent to calling
    [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested").
    For documentation on SAVEPOINT transactions, please see [Using SAVEPOINT](session_transaction.html#session-begin-nested).'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '**nested** – 如果为True，则开始一个SAVEPOINT事务，并等效于调用[`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")。有关SAVEPOINT事务的文档，请参阅[使用SAVEPOINT](session_transaction.html#session-begin-nested)。'
- en: 'Returns:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    object. Note that [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    acts as a Python context manager, allowing [`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") to be used in a “with” block. See [Explicit Begin](session_transaction.html#session-explicit-begin)
    for an example.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")对象。注意[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")充当Python上下文管理器，允许在“with”块中使用[`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")。请参阅[显式开始](session_transaction.html#session-explicit-begin)以获取示例。'
- en: See also
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Auto Begin](session_basics.html#session-autobegin)'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '[自动开始](session_basics.html#session-autobegin)'
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '[管理事务](session_transaction.html#unitofwork-transaction)'
- en: '[`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")'
- en: '[PRE48]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Begin a “nested” transaction on this Session, e.g. SAVEPOINT.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`Session`上开始“嵌套”事务，例如SAVEPOINT。
- en: The target database(s) and associated drivers must support SQL SAVEPOINT for
    this method to function correctly.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 目标数据库和相关驱动程序必须支持SQL SAVEPOINT，以使此方法正常工作。
- en: For documentation on SAVEPOINT transactions, please see [Using SAVEPOINT](session_transaction.html#session-begin-nested).
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 SAVEPOINT 事务的文档，请参阅 [使用 SAVEPOINT](session_transaction.html#session-begin-nested)。
- en: 'Returns:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    object. Note that [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    acts as a context manager, allowing [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") to be used in a “with” block. See [Using
    SAVEPOINT](session_transaction.html#session-begin-nested) for a usage example.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    对象。请注意，[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    作为上下文管理器，允许在“with”块中使用 [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")。请参阅 [使用 SAVEPOINT](session_transaction.html#session-begin-nested)
    获取使用示例。'
- en: See also
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using SAVEPOINT](session_transaction.html#session-begin-nested)'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 SAVEPOINT](session_transaction.html#session-begin-nested)'
- en: '[Serializable isolation / Savepoints / Transactional DDL](../dialects/sqlite.html#pysqlite-serializable)
    - special workarounds required with the SQLite driver in order for SAVEPOINT to
    work correctly. For asyncio use cases, see the section [Serializable isolation
    / Savepoints / Transactional DDL (asyncio version)](../dialects/sqlite.html#aiosqlite-serializable).'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '[可串行化隔离 / Savepoints / 事务性 DDL](../dialects/sqlite.html#pysqlite-serializable)
    - 使用 SQLite 驱动程序时，为使 SAVEPOINT 正常工作需要特殊的解决方法。对于 asyncio 案例，请参阅 [可串行化隔离 / Savepoints
    / 事务性 DDL（asyncio 版本）](../dialects/sqlite.html#aiosqlite-serializable) 部分。'
- en: '[PRE49]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Associate a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    or arbitrary Python class with a “bind”, e.g. an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 将 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    或任意 Python 类与“bind”关联，例如一个 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 或 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。
- en: The given entity is added to a lookup used by the [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的实体被添加到 [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    方法使用的查找中。
- en: 'Parameters:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    object, or an instance of a mapped class, or any Python class that is the base
    of a set of mapped classes.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 一个 [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    对象，或者一个映射类的实例，或者任何作为一组映射类基础的 Python 类。'
- en: '`bind` – an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    或 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    对象。'
- en: See also
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '[分区策略（例如，每个 Session 多个数据库后端）](persistence_techniques.html#session-partitioning)'
- en: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
- en: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
- en: '[PRE50]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Associate a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    with a “bind”, e.g. an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 将 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    与“bind”关联，例如一个 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    或 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")。
- en: The given [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    is added to a lookup used by the [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    被添加到 [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    方法使用的查找中。
- en: 'Parameters:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table` – a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, which is typically the target of an ORM mapping, or is present within
    a selectable that is mapped.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table` – 一个 [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    对象，通常是 ORM 映射的目标，或者存在于可选择的映射中。'
- en: '`bind` – an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object.'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` - 一个[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")或[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。'
- en: See also
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '[分区策略（例如每个Session的多个数据库后端）](persistence_techniques.html#session-partitioning)'
- en: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
- en: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
- en: '[PRE51]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Perform a bulk insert of the given list of mapping dictionaries.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 执行给定映射字典列表的批量插入。
- en: Legacy Feature
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 传统特性
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
    The 2.0 API shares implementation details with this method and adds new features
    as well.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法是SQLAlchemy 2.0系列的一个传统特性。对于现代的批量插入和更新，请参见[ORM批量插入语句](queryguide/dml.html#orm-queryguide-bulk-insert)和[ORM按主键批量更新](queryguide/dml.html#orm-queryguide-bulk-update)部分。2.0
    API共享了与该方法的实现细节，并添加了新的特性。
- en: 'Parameters:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – a mapped class, or the actual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object, representing the single kind of object represented
    within the mapping list.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` - 一个映射类，或者实际的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象，表示映射列表中所代表的单一对象种类。'
- en: '`mappings` – a sequence of dictionaries, each one containing the state of the
    mapped row to be inserted, in terms of the attribute names on the mapped class.
    If the mapping refers to multiple tables, such as a joined-inheritance mapping,
    each dictionary must contain all keys to be populated into all tables.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mappings` - 一系列字典，每个字典包含要插入的映射行的状态，以映射类上的属性名称表示。如果映射涉及多个表，例如连接继承映射，则每个字典必须包含要填充到所有表中的所有键。'
- en: '`return_defaults` –'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_defaults` -'
- en: when True, the INSERT process will be altered to ensure that newly generated
    primary key values will be fetched. The rationale for this parameter is typically
    to enable [Joined Table Inheritance](inheritance.html#joined-inheritance) mappings
    to be bulk inserted.
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为True时，INSERT过程将被修改以确保新生成的主键值将被获取。该参数的理由通常是为了使[连接表继承](inheritance.html#joined-inheritance)映射能够批量插入。
- en: Note
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: for backends that don’t support RETURNING, the [`Session.bulk_insert_mappings.return_defaults`](#sqlalchemy.orm.Session.bulk_insert_mappings.params.return_defaults
    "sqlalchemy.orm.Session.bulk_insert_mappings") parameter can significantly decrease
    performance as INSERT statements can no longer be batched. See [“Insert Many Values”
    Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    for background on which backends are affected.
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于不支持RETURNING的后端，[`Session.bulk_insert_mappings.return_defaults`](#sqlalchemy.orm.Session.bulk_insert_mappings.params.return_defaults
    "sqlalchemy.orm.Session.bulk_insert_mappings")参数可能会显著降低性能，因为INSERT语句无法再批量处理。有关受影响的后端的背景信息，请参阅[INSERT语句的“插入多个值”行为](../core/connections.html#engine-insertmanyvalues)。
- en: '`render_nulls` –'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render_nulls` -'
- en: When True, a value of `None` will result in a NULL value being included in the
    INSERT statement, rather than the column being omitted from the INSERT. This allows
    all the rows being INSERTed to have the identical set of columns which allows
    the full set of rows to be batched to the DBAPI. Normally, each column-set that
    contains a different combination of NULL values than the previous row must omit
    a different series of columns from the rendered INSERT statement, which means
    it must be emitted as a separate statement. By passing this flag, the full set
    of rows are guaranteed to be batchable into one batch; the cost however is that
    server-side defaults which are invoked by an omitted column will be skipped, so
    care must be taken to ensure that these are not necessary.
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为True时，`None`值将导致在INSERT语句中包含一个NULL值，而不是将列从INSERT中省略。这允许所有被INSERT的行具有相同的列集，从而允许将完整的行集批量发送到DBAPI。通常，每个包含与上一行不同的NULL值组合的列集必须从渲染的INSERT语句中省略不同的列系列，这意味着必须作为单独的语句发出。通过传递此标志，可以确保将完整的行集批量处理为一个批次；但成本是，通过省略列调用的服务器端默认值将被跳过，因此必须注意确保这些不是必需的。
- en: Warning
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: When this flag is set, **server side default SQL values will not be invoked**
    for those columns that are inserted as NULL; the NULL value will be sent explicitly.
    Care must be taken to ensure that no server-side default functions need to be
    invoked for the operation as a whole.
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当设置此标志时，**不会调用服务器端默认的SQL值**，对于那些作为NULL插入的列；NULL值将被显式发送。必须注意确保整个操作不需要调用服务器端默认函数。
- en: See also
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '[启用ORM的INSERT、UPDATE和DELETE语句](queryguide/dml.html)'
- en: '[`Session.bulk_save_objects()`](#sqlalchemy.orm.Session.bulk_save_objects "sqlalchemy.orm.Session.bulk_save_objects")'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_save_objects()`](#sqlalchemy.orm.Session.bulk_save_objects "sqlalchemy.orm.Session.bulk_save_objects")'
- en: '[`Session.bulk_update_mappings()`](#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_update_mappings()`](#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
- en: '[PRE52]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Perform a bulk save of the given list of objects.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 对给定对象列表执行批量保存。
- en: Legacy Feature
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 传统功能
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法是SQLAlchemy 2.0系列的传统功能。对于现代的批量INSERT和UPDATE，请参见[ORM批量INSERT语句](queryguide/dml.html#orm-queryguide-bulk-insert)和[ORM按主键批量UPDATE](queryguide/dml.html#orm-queryguide-bulk-update)部分。
- en: For general INSERT and UPDATE of existing ORM mapped objects, prefer standard
    [unit of work](../glossary.html#term-unit-of-work) data management patterns, introduced
    in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)
    at [Data Manipulation with the ORM](../tutorial/orm_data_manipulation.html#tutorial-orm-data-manipulation).
    SQLAlchemy 2.0 now uses [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    with modern dialects which solves previous issues of bulk INSERT slowness.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一般的INSERT和UPDATE现有ORM映射对象，建议使用标准的[工作单元](../glossary.html#term-unit-of-work)数据管理模式，介绍在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中的[ORM数据操作](../tutorial/orm_data_manipulation.html#tutorial-orm-data-manipulation)。SQLAlchemy
    2.0现在使用现代方言的[“Insert Many Values”行为用于INSERT语句](../core/connections.html#engine-insertmanyvalues)，解决了以前批量INSERT速度慢的问题。
- en: 'Parameters:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`objects` –'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`objects` –'
- en: a sequence of mapped object instances. The mapped objects are persisted as is,
    and are **not** associated with the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    afterwards.
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 映射对象实例的序列。映射对象按原样持久化，并且之后**不**与[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")关联。
- en: For each object, whether the object is sent as an INSERT or an UPDATE is dependent
    on the same rules used by the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    in traditional operation; if the object has the `InstanceState.key` attribute
    set, then the object is assumed to be “detached” and will result in an UPDATE.
    Otherwise, an INSERT is used.
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于每个对象，无论对象是作为INSERT还是UPDATE发送的，都取决于传统操作中[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")使用的相同规则；如果对象具有`InstanceState.key`属性设置，则假定对象为“分离”，将导致UPDATE。否则，将使用INSERT。
- en: In the case of an UPDATE, statements are grouped based on which attributes have
    changed, and are thus to be the subject of each SET clause. If `update_changed_only`
    is False, then all attributes present within each object are applied to the UPDATE
    statement, which may help in allowing the statements to be grouped together into
    a larger executemany(), and will also reduce the overhead of checking history
    on attributes.
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在UPDATE的情况下，语句根据哪些属性已更改而分组，并因此成为每个SET子句的主题。如果`update_changed_only`为False，则每个对象中存在的所有属性都将应用于UPDATE语句，这有助于将语句组合成更大的executemany()，并且还将减少检查属性历史的开销。
- en: '`return_defaults` – when True, rows that are missing values which generate
    defaults, namely integer primary key defaults and sequences, will be inserted
    `one at a time`, so that the primary key value is available. In particular this
    will allow joined-inheritance and other multi-table mappings to insert correctly
    without the need to provide primary key values ahead of time; however, [`Session.bulk_save_objects.return_defaults`](#sqlalchemy.orm.Session.bulk_save_objects.params.return_defaults
    "sqlalchemy.orm.Session.bulk_save_objects") `greatly reduces the performance gains`
    of the method overall. It is strongly advised to please use the standard [`Session.add_all()`](#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all") approach.'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_defaults` - 当为True时，缺少生成默认值的值的行，即整数主键默认值和序列，将逐个插入，以便主键值可用。特别是，这将允许加入继承和其他多表映射正确插入，而无需提前提供主键值；但是，[`Session.bulk_save_objects.return_defaults`](#sqlalchemy.orm.Session.bulk_save_objects.params.return_defaults
    "sqlalchemy.orm.Session.bulk_save_objects")会大大降低该方法的性能增益。强烈建议使用标准的[`Session.add_all()`](#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all")方法。'
- en: '`update_changed_only` – when True, UPDATE statements are rendered based on
    those attributes in each state that have logged changes. When False, all attributes
    present are rendered into the SET clause with the exception of primary key attributes.'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update_changed_only` - 当为True时，根据每个状态中已记录更改的属性来渲染UPDATE语句。当为False时，所有存在的属性都将渲染到SET子句中，除了主键属性。'
- en: '`preserve_order` – when True, the order of inserts and updates matches exactly
    the order in which the objects are given. When False, common types of objects
    are grouped into inserts and updates, to allow for more batching opportunities.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preserve_order` - 当为True时，插入和更新的顺序与给定对象的顺序完全匹配。当为False时，常见类型的对象被分组为插入和更新，以便提供更多的批处理机会。'
- en: See also
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM启用的INSERT、UPDATE和DELETE语句](queryguide/dml.html)'
- en: '[`Session.bulk_insert_mappings()`](#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_insert_mappings()`](#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
- en: '[`Session.bulk_update_mappings()`](#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_update_mappings()`](#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
- en: '[PRE53]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Perform a bulk update of the given list of mapping dictionaries.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 对给定的映射字典列表执行批量更新。
- en: Legacy Feature
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 传统特性
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
    The 2.0 API shares implementation details with this method and adds new features
    as well.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法是SQLAlchemy 2.0系列的一个传统特性。对于现代的批量INSERT和UPDATE，请参见[ORM批量INSERT语句](queryguide/dml.html#orm-queryguide-bulk-insert)和[ORM按主键批量UPDATE](queryguide/dml.html#orm-queryguide-bulk-update)部分。2.0
    API与此方法共享实现细节，并添加了新功能。
- en: 'Parameters:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – a mapped class, or the actual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object, representing the single kind of object represented
    within the mapping list.'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` - 一个映射类，或者实际的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象，表示映射列表中表示的单一对象类型。'
- en: '`mappings` – a sequence of dictionaries, each one containing the state of the
    mapped row to be updated, in terms of the attribute names on the mapped class.
    If the mapping refers to multiple tables, such as a joined-inheritance mapping,
    each dictionary may contain keys corresponding to all tables. All those keys which
    are present and are not part of the primary key are applied to the SET clause
    of the UPDATE statement; the primary key values, which are required, are applied
    to the WHERE clause.'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mappings` - 一个字典序列，每个字典包含要更新的映射行的状态，以映射类上的属性名称表示。如果映射涉及多个表，比如联接继承映射，每个字典可能包含与所有表对应的键。所有存在且不是主键的键将应用于
    UPDATE 语句的 SET 子句；需要的主键值将应用于 WHERE 子句。'
- en: See also
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM-Enabled INSERT、UPDATE 和 DELETE 语句](queryguide/dml.html)'
- en: '[`Session.bulk_insert_mappings()`](#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_insert_mappings()`](#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
- en: '[`Session.bulk_save_objects()`](#sqlalchemy.orm.Session.bulk_save_objects "sqlalchemy.orm.Session.bulk_save_objects")'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_save_objects()`](#sqlalchemy.orm.Session.bulk_save_objects "sqlalchemy.orm.Session.bulk_save_objects")'
- en: '[PRE54]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Close out the transactional resources and ORM objects used by this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 结束由此 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 使用的事务资源和
    ORM 对象。
- en: This expunges all ORM objects associated with this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), ends any transaction in progress and [releases](../glossary.html#term-releases)
    any [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    objects which this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    itself has checked out from associated [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects. The operation then leaves the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in a state which it may be used again.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 这会清除与此 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 关联的所有 ORM
    对象，结束任何正在进行的事务，并[释放](../glossary.html#term-releases)此 [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 从相关 [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象中检出的任何 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") 对象。然后，该操作将 [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 置于可以再次使用的状态。
- en: Tip
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: In the default running mode the [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method **does not prevent the Session from being
    used again**. The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    itself does not actually have a distinct “closed” state; it merely means the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will release all database connections and ORM objects.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认运行模式下，[`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    方法**不会阻止该 Session 再次使用**。 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    本身实际上并没有一个独立的“关闭”状态；它只是意味着 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    将释放所有数据库连接和 ORM 对象。
- en: Setting the parameter [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") to `False` will instead make the `close` final, meaning
    that any further action on the session will be forbidden.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 将参数 [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") 设置为 `False` 将使 `close` 最终化，这意味着会禁止对会话的任何进一步操作。
- en: 'Changed in version 1.4: The [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method does not immediately create a new [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object; instead, the new [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is created only if the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is used again for a database operation.'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 从 1.4 版本开始变更：[`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    方法不会立即创建一个新的 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    对象；相反，只有在再次使用 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 进行数据库操作时才会创建新的
    [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")。
- en: See also
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Closing](session_basics.html#session-closing) - detail on the semantics of
    [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '[关闭](session_basics.html#session-closing) - 关于[`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")和[`Session.reset()`](#sqlalchemy.orm.Session.reset
    "sqlalchemy.orm.Session.reset")语义的详细信息。'
- en: '[`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - a similar method that behaves like `close()` with the parameter [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") set to `True`.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - 一种类似的方法，其行为类似于`close()`，参数为[`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")设置为`True`。'
- en: '[PRE55]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.close_all`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.orm.session._SessionClassMethods.close_all` *方法的* `sqlalchemy.orm.session._SessionClassMethods`'
- en: Close *all* sessions in memory.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭*所有*内存中的会话。
- en: 'Deprecated since version 1.3: The [`Session.close_all()`](#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all") method is deprecated and will be removed in
    a future release. Please refer to `close_all_sessions()`.'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.3起已弃用：[`Session.close_all()`](#sqlalchemy.orm.Session.close_all "sqlalchemy.orm.Session.close_all")方法已弃用，将在将来的版本中删除。请参考`close_all_sessions()`。
- en: '[PRE56]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Flush pending changes and commit the current transaction.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新待处理的更改并提交当前事务。
- en: When the COMMIT operation is complete, all objects are fully [expired](../glossary.html#term-expired),
    erasing their internal contents, which will be automatically re-loaded when the
    objects are next accessed. In the interim, these objects are in an expired state
    and will not function if they are [detached](../glossary.html#term-detached) from
    the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"). Additionally,
    this re-load operation is not supported when using asyncio-oriented APIs. The
    [`Session.expire_on_commit`](#sqlalchemy.orm.Session.params.expire_on_commit "sqlalchemy.orm.Session")
    parameter may be used to disable this behavior.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 当COMMIT操作完成时，所有对象都完全[过期](../glossary.html#term-expired)，擦除其内部内容，当下次访问这些对象时，将自动重新加载。在此期间，这些对象处于过期状态，并且如果从[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中[分离](../glossary.html#term-detached)出来，则不会起作用。此外，当使用基于asyncio的API时，不支持此重新加载操作。[`Session.expire_on_commit`](#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session")参数可用于禁用此行为。
- en: When there is no transaction in place for the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), indicating that no operations were invoked on this
    [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") since the previous
    call to [`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit"),
    the method will begin and commit an internal-only “logical” transaction, that
    does not normally affect the database unless pending flush changes were detected,
    but will still invoke event handlers and object expiration rules.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中没有事务时，表示自上次调用[`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")以来没有对此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")执行任何操作时，该方法将开始并提交一个仅内部的“逻辑”事务，通常不会影响数据库，除非检测到有待提交的刷新更改，但仍然会调用事件处理程序和对象过期规则。
- en: The outermost database transaction is committed unconditionally, automatically
    releasing any SAVEPOINTs in effect.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 最外层的数据库事务会无条件提交，自动释放任何生效的SAVEPOINT。
- en: See also
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Committing](session_basics.html#session-committing)'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '[提交](session_basics.html#session-committing)'
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '[管理事务](session_transaction.html#unitofwork-transaction)'
- en: '[Preventing Implicit IO when Using AsyncSession](extensions/asyncio.html#asyncio-orm-avoid-lazyloads)'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '[在使用AsyncSession时避免隐式IO](extensions/asyncio.html#asyncio-orm-avoid-lazyloads)'
- en: '[PRE57]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Return a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object corresponding to this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s transactional state.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个与该[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的事务状态对应的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。
- en: Either the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") corresponding to the current transaction is returned,
    or if no transaction is in progress, a new one is begun and the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") returned (note that no transactional state is
    established with the DBAPI until the first SQL statement is emitted).
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前事务对应的 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，或者如果没有进行中的事务，则开始新的事务并返回 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")（请注意，在第一个 SQL 语句被发出之前，与 DBAPI 之间不会建立事务状态）。
- en: Ambiguity in multi-bind or unbound [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects can be resolved through any of the optional keyword arguments. This ultimately
    makes usage of the [`get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method for resolution.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 多重绑定或未绑定的 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 对象中的歧义可以通过任何可选关键字参数解决。最终将使用
    [`get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    方法进行解决。
- en: 'Parameters:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind_arguments` – dictionary of bind arguments. May include “mapper”, “bind”,
    “clause”, other custom arguments that are passed to [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind").'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind_arguments` – 绑定参数字典。可能包括“mapper”，“bind”，“clause”等其他传递给 [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") 的自定义参数。'
- en: '`execution_options` –'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` –'
- en: a dictionary of execution options that will be passed to [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), **when the connection is first
    procured only**. If the connection is already present within the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), a warning is emitted and the arguments are ignored.
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个执行选项字典，当首次获得连接时将传递给 [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")。如果连接已经存在于 [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 中，将发出警告并忽略参数。
- en: See also
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Setting Transaction Isolation Levels / DBAPI AUTOCOMMIT](session_transaction.html#session-transaction-isolation)'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别 / DBAPI AUTOCOMMIT](session_transaction.html#session-transaction-isolation)'
- en: '[PRE58]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Mark an instance as deleted.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例标记为已删除。
- en: The object is assumed to be either [persistent](../glossary.html#term-persistent)
    or [detached](../glossary.html#term-detached) when passed; after the method is
    called, the object will remain in the [persistent](../glossary.html#term-persistent)
    state until the next flush proceeds. During this time, the object will also be
    a member of the [`Session.deleted`](#sqlalchemy.orm.Session.deleted "sqlalchemy.orm.Session.deleted")
    collection.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 假设传入的对象在调用该方法后处于 [持久化](../glossary.html#term-persistent) 或 [分离](../glossary.html#term-detached)
    状态；在此方法被调用后，对象将保持 [持久化](../glossary.html#term-persistent) 状态，直到下一次刷新操作进行。在此期间，该对象也将是
    [`Session.deleted`](#sqlalchemy.orm.Session.deleted "sqlalchemy.orm.Session.deleted")
    集合的成员。
- en: When the next flush proceeds, the object will move to the [deleted](../glossary.html#term-deleted)
    state, indicating a `DELETE` statement was emitted for its row within the current
    transaction. When the transaction is successfully committed, the deleted object
    is moved to the [detached](../glossary.html#term-detached) state and is no longer
    present within this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 当下一次刷新操作进行时，对象将移动到 [已删除](../glossary.html#term-deleted) 状态，表示在当前事务中为其行发出了 `DELETE`
    语句。当事务成功提交时，已删除对象将移动到 [分离](../glossary.html#term-detached) 状态，并且不再存在于此 [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 中。
- en: See also
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Deleting](session_basics.html#session-deleting) - at [Basics of Using a Session](session_basics.html#id1)'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '[删除](session_basics.html#session-deleting) - 在 [使用会话的基础知识](session_basics.html#id1)'
- en: '[PRE59]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The set of all instances marked as ‘deleted’ within this `Session`
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 所有在此 `Session` 中标记为 ‘deleted’ 的实例集合。
- en: '[PRE60]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The set of all persistent instances considered dirty.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 所有被认为是脏的持久化实例集合。
- en: 'E.g.:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE61]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Instances are considered dirty when they were modified but not deleted.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 当实例被修改但未删除时被视为脏。
- en: Note that this ‘dirty’ calculation is ‘optimistic’; most attribute-setting or
    collection modification operations will mark an instance as ‘dirty’ and place
    it in this set, even if there is no net change to the attribute’s value. At flush
    time, the value of each attribute is compared to its previously saved value, and
    if there’s no net change, no SQL operation will occur (this is a more expensive
    operation so it’s only done at flush time).
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此“脏”计算是“乐观”的；大多数属性设置或集合修改操作都将将实例标记为“脏”，并将其放入此集合中，即使属性的值没有净变化。在刷新时，将每个属性的值与其先前保存的值进行比较，如果没有净变化，则不会执行任何SQL操作（这是一项更昂贵的操作，因此仅在刷新时执行）。
- en: To check if an instance has actionable net changes to its attributes, use the
    [`Session.is_modified()`](#sqlalchemy.orm.Session.is_modified "sqlalchemy.orm.Session.is_modified")
    method.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查实例是否有可操作的净变化来修改其属性，请使用[`Session.is_modified()`](#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified")方法。
- en: '[PRE62]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Associate an object with this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    for related object loading.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 将对象与此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")关联以进行相关对象加载。
- en: Warning
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '[`enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") exists to serve special
    use cases and is not recommended for general use.'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '[`enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading")存在以服务于特殊用例，并不建议用于一般用途。'
- en: Accesses of attributes mapped with [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") will attempt to load a value from the database
    using this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") as the
    source of connectivity. The values will be loaded based on foreign key and primary
    key values present on this object - if not present, then those relationships will
    be unavailable.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")映射的属性的访问将尝试使用此[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")作为连接源从数据库加载值。值将根据此对象上存在的外键和主键值加载 - 如果不存在，则这些关系将不可用。
- en: The object will be attached to this session, but will **not** participate in
    any persistence operations; its state for almost all purposes will remain either
    “transient” or “detached”, except for the case of relationship loading.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 对象将附加到此会话，但**不会**参与任何持久性操作；它的状态对于几乎所有目的都将保持“瞬态”或“分离”，除了关系加载的情况。
- en: Also note that backrefs will often not work as expected. Altering a relationship-bound
    attribute on the target object may not fire off a backref event, if the effective
    value is what was already loaded from a foreign-key-holding value.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，反向引用通常不会按预期工作。如果目标对象上的关系绑定属性发生更改，则可能不会触发反向引用事件，如果有效值已从保存外键值的值中加载，则不会触发事件。
- en: The [`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") method is similar to the
    `load_on_pending` flag on [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). Unlike that flag, [`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") allows an object to remain
    transient while still being able to load related items.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading")方法类似于[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上的`load_on_pending`标志。与该标志不同，[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading")允许对象保持瞬态，同时仍然能够加载相关项目。'
- en: To make a transient object associated with a [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") via [`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") pending, add it to the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") using [`Session.add()`](#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") normally. If the object instead represents an existing
    identity in the database, it should be merged using [`Session.merge()`](#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge").
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 要使一个临时对象与[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")相关联，可以通过[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading")将其添加到[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。如果该对象代表数据库中现有的标识，则应使用[`Session.merge()`](#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")进行合并。
- en: '[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") does not improve behavior
    when the ORM is used normally - object references should be constructed at the
    object level, not at the foreign key level, so that they are present in an ordinary
    way before flush() proceeds. This method is not intended for general use.'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 当ORM正常使用时，[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading")不会改善行为 - 对象引用应该在对象级别而不是在外键级别构建，以便它们在flush()继续之前以普通方式存在。此方法不适用于一般用途。
- en: See also
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`relationship.load_on_pending`](relationship_api.html#sqlalchemy.orm.relationship.params.load_on_pending
    "sqlalchemy.orm.relationship") - this flag allows per-relationship loading of
    many-to-ones on items that are pending.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '[`relationship.load_on_pending`](relationship_api.html#sqlalchemy.orm.relationship.params.load_on_pending
    "sqlalchemy.orm.relationship") - 此标志允许在待处理项目上对多对一进行每关系加载。'
- en: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - allows for an object to be added
    to a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") without SQL
    emitted, which then will unexpire attributes on access.'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - 允许将对象添加到[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中而不发出SQL，然后在访��时取消过期属性。'
- en: '[PRE63]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Execute a SQL expression construct.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 执行一个SQL表达式构造。
- en: Returns a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object representing results of the statement execution.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个代表语句执行结果的[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象。
- en: 'E.g.:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE64]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The API contract of [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    is similar to that of [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), the [2.0 style](../glossary.html#term-2.0-style)
    version of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")的API契约类似于[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")的契约，是[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的[2.0风格](../glossary.html#term-2.0-style)版本。'
- en: 'Changed in version 1.4: the [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method is now the primary point of ORM statement
    execution when using [2.0 style](../glossary.html#term-2.0-style) ORM usage.'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：当使用[2.0风格](../glossary.html#term-2.0-style)的ORM用法时，[`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法现在是ORM语句执行的主要点。
- en: 'Parameters:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`statement` – An executable statement (i.e. an [`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") expression such as [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")).'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` – 一个可执行的语句（即一个[`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")表达式，如[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")）。'
- en: '`params` – Optional dictionary, or list of dictionaries, containing bound parameter
    values. If a single dictionary, single-row execution occurs; if a list of dictionaries,
    an “executemany” will be invoked. The keys in each dictionary must correspond
    to parameter names present in the statement.'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params` – 可选字典，或包含绑定参数值的字典列表。如果是单个字典，则执行单行; 如果是字典列表，则将调用“executemany”。每个字典中的键必须与语句中存在的参数名称相对应。'
- en: '`execution_options` –'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` –'
- en: optional dictionary of execution options, which will be associated with the
    statement execution. This dictionary can provide a subset of the options that
    are accepted by [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), and may also provide additional
    options understood only in an ORM context.
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的执行选项字典，将与语句执行相关联。此字典可以提供[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")接受的选项的子集，并且还可以提供仅在ORM上下文中理解的其他选项。
- en: See also
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)
    - ORM-specific execution options'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM执行选项](queryguide/api.html#orm-queryguide-execution-options) - ORM特定的执行选项'
- en: '`bind_arguments` – dictionary of additional arguments to determine the bind.
    May include “mapper”, “bind”, or other custom arguments. Contents of this dictionary
    are passed to the [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method.'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind_arguments` – 用于确定绑定的其他参数字典。可以包括“mapper”，“bind”或其他自定义参数。此字典的内容将传递给[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法。'
- en: 'Returns:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象。
- en: '[PRE65]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Expire the attributes on an instance.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 使实例上的属性过期。
- en: Marks the attributes of an instance as out of date. When an expired attribute
    is next accessed, a query will be issued to the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s current transactional context in order to load
    all expired attributes for the given instance. Note that a highly isolated transaction
    will return the same values as were previously read in that same transaction,
    regardless of changes in database state outside of that transaction.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 标记实例的属性为过期。下次访问过期属性时，将向[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的当前事务上下文发出查询，以加载给定实例的所有过期属性。请注意，高度隔离的事务将返回与该事务中先前读取的相同值，而不管该事务外的数据库状态发生了什么变化。
- en: To expire all objects in the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    simultaneously, use [`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all").
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时使[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中的所有对象过期，请使用[`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all")。
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") object’s default
    behavior is to expire all state whenever the [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") or [`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") methods are called, so that new state can be
    loaded for the new transaction. For this reason, calling [`Session.expire()`](#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire") only makes sense for the specific case that a
    non-ORM SQL statement was emitted in the current transaction.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用[`Session.rollback()`](#sqlalchemy.orm.Session.rollback "sqlalchemy.orm.Session.rollback")或[`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")方法时，[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的默认行为是使所有状态过期，以便为新事务加载新状态。因此，仅在当前事务中发出非ORM
    SQL语句的特定情况下调用[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")才有意义。
- en: 'Parameters:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – The instance to be refreshed.'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 要刷新的实例。'
- en: '`attribute_names` – optional list of string attribute names indicating a subset
    of attributes to be expired.'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attribute_names` – 可选的字符串属性名称列表，指示要过期的属性子集。'
- en: See also
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新/过期](session_state_management.html#session-expire) - 入门材料'
- en: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
- en: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '[PRE66]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Expires all persistent instances within this Session.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 使此会话中的所有持久实例过期。
- en: When any attributes on a persistent instance is next accessed, a query will
    be issued using the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s current transactional context in order to load all expired attributes
    for the given instance. Note that a highly isolated transaction will return the
    same values as were previously read in that same transaction, regardless of changes
    in database state outside of that transaction.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 下次访问持久实例上的任何属性时，将使用[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的当前事务上下文发出查询，以加载给定实例的所有过期属性。请注意，高度隔离的事务将返回与之前在同一事务中读取的相同值，而不考虑该事务之外的数据库状态的更改。
- en: To expire individual objects and individual attributes on those objects, use
    [`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire").
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 要使个别对象和这些对象上的个别属性过期，请使用[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")。
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") object’s default
    behavior is to expire all state whenever the [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") or [`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") methods are called, so that new state can be
    loaded for the new transaction. For this reason, calling [`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all") is not usually needed, assuming the transaction
    is isolated.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用[`Session.rollback()`](#sqlalchemy.orm.Session.rollback "sqlalchemy.orm.Session.rollback")或[`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")方法时，默认情况下，[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象会将所有状态过期，以便为新的事务加载新的状态。因此，通常不需要调用[`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all")，假设事务是隔离的。
- en: See also
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新 / 过期](session_state_management.html#session-expire) - 入门材料'
- en: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
- en: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '[PRE67]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Remove the instance from this `Session`.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个`Session`中移除实例。
- en: This will free all internal references to the instance. Cascading will be applied
    according to the *expunge* cascade rule.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 这将释放对该实例的所有内部引用。根据*expunge*级联规则将应用级联。
- en: '[PRE68]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Remove all object instances from this `Session`.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个`Session`中移除所有对象实例。
- en: This is equivalent to calling `expunge(obj)` on all objects in this `Session`.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于在这个`Session`中调用`expunge(obj)`来移除所有对象。
- en: '[PRE69]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Flush all the object changes to the database.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新所有对象更改到数据库。
- en: Writes out all pending object creations, deletions and modifications to the
    database as INSERTs, DELETEs, UPDATEs, etc. Operations are automatically ordered
    by the Session’s unit of work dependency solver.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有待定的对象创建、删除和修改写入数据库，作为INSERT、DELETE、UPDATE等操作。操作会自动按照会话的工作单元依赖解决器进行排序。
- en: Database operations will be issued in the current transactional context and
    do not affect the state of the transaction, unless an error occurs, in which case
    the entire transaction is rolled back. You may flush() as often as you like within
    a transaction to move changes from Python to the database’s transaction buffer.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库操作将在当前事务上下文中发出，并且不会影响事务的状态，除非发生错误，此时整个事务都会回滚。在事务中随时可以刷新（flush()）以将更改从Python移动到数据库的事务缓冲区。
- en: 'Parameters:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**objects** –'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '**对象** –'
- en: Optional; restricts the flush operation to operate only on elements that are
    in the given collection.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 可选；限制刷新操作仅对给定集合中存在的元素进行操作。
- en: This feature is for an extremely narrow set of use cases where particular objects
    may need to be operated upon before the full flush() occurs. It is not intended
    for general use.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能适用于极少数情况，特定对象可能需要在完全刷新（flush()）之前进行操作。它不适用于一般用途。
- en: '[PRE70]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 返回基于给定主键标识符的实例，如果找不到则返回`None`。
- en: 'E.g.:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE71]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'New in version 1.4: Added [`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get"),
    which is moved from the now legacy [`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") method.'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始：添加了[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")，该方法已从现在过时的[`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get")方法中移动。
- en: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    is special in that it provides direct access to the identity map of the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). If the given primary key identifier is present in the
    local identity map, the object is returned directly from this collection and no
    SQL is emitted, unless the object has been marked fully expired. If not present,
    a SELECT is performed in order to locate the object.'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")是特殊的，因为它直接提供了对[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的标识映射的访问。如果给定的主键标识符存在于本地标识映射中，则直接从该集合返回对象，而不会发出任何SQL，除非对象已被标记为完全过期。如果不存在，则执行SELECT以定位对象。'
- en: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    also will perform a check if the object is present in the identity map and marked
    as expired - a SELECT is emitted to refresh the object as well as to ensure that
    the row is still present. If not, [`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") is raised.'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")还将执行检查，如果对象存在于标识映射中并标记为过期，则发出SELECT以刷新对象以及确保行仍然存在。如果不存在，则引发[`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError")。'
- en: 'Parameters:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`entity` – a mapped class or [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") indicating the type of entity to be loaded.'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entity` – 表示要加载的实体类型的映射类或[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")。'
- en: '`ident` –'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ident` –'
- en: A scalar, tuple, or dictionary representing the primary key. For a composite
    (e.g. multiple column) primary key, a tuple or dictionary should be passed.
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 表示主键的标量、元组或字典。对于复合（例如，多列）主键，应传递元组或字典。
- en: 'For a single-column primary key, the scalar calling form is typically the most
    expedient. If the primary key of a row is the value “5”, the call looks like:'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于单列主键，标量调用形式通常是最方便的。如果行的主键是值“5”，调用如下所示：
- en: '[PRE72]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The tuple form contains primary key values typically in the order in which
    they correspond to the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object’s primary key columns, or if the [`Mapper.primary_key`](mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") configuration parameter were used, in the order used
    for that parameter. For example, if the primary key of a row is represented by
    the integer digits “5, 10” the call would look like:'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 元组形式包含主键值，通常按照它们与映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象的主键列对应的顺序排列，或者如果使用了[`Mapper.primary_key`](mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper")配置参数，则按照该参数的顺序排列。例如，如果行的主键由整数数字“5，10”表示，则调用如下所示：
- en: '[PRE73]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The dictionary form should include as keys the mapped attribute names corresponding
    to each element of the primary key. If the mapped class has the attributes `id`,
    `version_id` as the attributes which store the object’s primary key value, the
    call would look like:'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字典形式应包含作为主键每个元素相应的映射属性名称的键。如果映射类具有存储对象主键值的属性`id`、`version_id`，则调用如下所示：
- en: '[PRE74]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '`options` – optional sequence of loader options which will be applied to the
    query, if one is emitted.'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options` – 可选的加载器选项序列，将应用于查询（如果有的话）。'
- en: '`populate_existing` – causes the method to unconditionally emit a SQL query
    and refresh the object with the newly loaded data, regardless of whether or not
    the object is already present.'
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`populate_existing` – 导致该方法无条件地发出SQL查询，并使用新加载的数据刷新对象，无论对象是否已存在。'
- en: '`with_for_update` – optional boolean `True` indicating FOR UPDATE should be
    used, or may be a dictionary containing flags to indicate a more specific set
    of FOR UPDATE flags for the SELECT; flags should match the parameters of [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Supersedes the [`Session.refresh.lockmode`](#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") parameter.'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_for_update` – 可选的布尔值`True`，表示应使用FOR UPDATE，或者可以是一个包含用于指示SELECT的更具体的一组FOR
    UPDATE标志的字典；标志应与[`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")参数的参数相匹配。取代[`Session.refresh.lockmode`](#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh")参数。'
- en: '`execution_options` –'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` –'
- en: optional dictionary of execution options, which will be associated with the
    query execution if one is emitted. This dictionary can provide a subset of the
    options that are accepted by [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), and may also provide additional
    options understood only in an ORM context.
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的执行选项字典，如果发出了查询执行，则将其与查询执行相关联。该字典可以提供[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")接受的选项的子集，并且还可以提供只有在ORM上下文中理解的其他选项。
- en: New in version 1.4.29.
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.4.29版中新增。
- en: See also
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)
    - ORM-specific execution options'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM执行选项](queryguide/api.html#orm-queryguide-execution-options) - ORM特定的执行选项'
- en: '`bind_arguments` –'
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind_arguments` –'
- en: dictionary of additional arguments to determine the bind. May include “mapper”,
    “bind”, or other custom arguments. Contents of this dictionary are passed to the
    [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method.
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于确定绑定的其他参数的字典。可能包括“mapper”、“bind”或其他自定义参数。该字典的内容将传递给[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法。
- en: 'Returns:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The object instance, or `None`.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 对象实例，或`None`。
- en: '[PRE75]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Return a “bind” to which this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is bound.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")绑定到的“bind”。
- en: The “bind” is usually an instance of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), except in the case where the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has been explicitly bound directly to a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: “bind”通常是[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的实例，除非[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")已被明确地直接绑定到[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的情况。
- en: For a multiply-bound or unbound [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    the `mapper` or `clause` arguments are used to determine the appropriate bind
    to return.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多次绑定或未绑定的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")，使用`mapper`或`clause`参数来确定返回的适当绑定。
- en: Note that the “mapper” argument is usually present when [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") is called via an ORM operation such as a [`Session.query()`](#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"), each individual INSERT/UPDATE/DELETE operation
    within a [`Session.flush()`](#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush"),
    call, etc.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 注意当通过ORM操作调用[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")时通常存在“mapper”参数，例如[`Session.query()`](#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query")中的每个个体INSERT/UPDATE/DELETE操作，[`Session.flush()`](#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")调用等。
- en: 'The order of resolution is:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 解析顺序为：
- en: if mapper given and [`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")
    is present, locate a bind based first on the mapper in use, then on the mapped
    class in use, then on any base classes that are present in the `__mro__` of the
    mapped class, from more specific superclasses to more general.
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果给定了`mapper`并且[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")存在，则首先基于正在使用的映射器，然后基于正在使用的映射类，然后基于映射类的`__mro__`中存在的任何基类，从更具体的超类到更一般的类来定位一个绑定。
- en: if clause given and `Session.binds` is present, locate a bind based on [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects found in the given clause present in `Session.binds`.
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果给定了条件并且`Session.binds`存在，则基于`Session.binds`中的给定条件中找到的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象定位绑定。
- en: if `Session.binds` is present, return that.
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`Session.binds`存在，则返回该绑定。
- en: if clause given, attempt to return a bind linked to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the clause.
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果给定了条件，则尝试返回与该条件最终关联的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")绑定。
- en: if mapper given, attempt to return a bind linked to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other selectable to which the mapper is mapped.
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提供了映射器，尝试返回与最终与该映射器映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或其他可选择对象关联的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")绑定。
- en: No bind can be found, [`UnboundExecutionError`](../core/exceptions.html#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError") is raised.
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果找不到绑定，则会引发[`UnboundExecutionError`](../core/exceptions.html#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError")。
- en: Note that the [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method can be overridden on a user-defined subclass of [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to provide any kind of bind resolution scheme. See the
    example at [Custom Vertical Partitioning](persistence_techniques.html#session-custom-partitioning).
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")方法可以在[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的用户定义子类上被重写，以提供任何类型的绑定解析方案。请参阅[自定义垂直分区](persistence_techniques.html#session-custom-partitioning)中的示例。
- en: 'Parameters:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – Optional mapped class or corresponding [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") instance. The bind can be derived from a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") first by consulting the “binds” map associated with this
    [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"), and secondly by
    consulting the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    associated with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    to which the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    is mapped for a bind.'
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 可选的映射类或相应的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")实例。绑定可以首先从此[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")关联的“绑定”映射中派生，其次是从该[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")映射到的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")关联的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")中派生。'
- en: '`clause` – A [`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") (i.e. [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text"), etc.). If the `mapper` argument is not present
    or could not produce a bind, the given expression construct will be searched for
    a bound element, typically a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") associated with bound [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").'
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clause` – 一个[`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")（即[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")，[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")等）。如果`mapper`参数不存在或无法生成绑定，则将搜索给定的表达式构造，通常是与绑定的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")关联的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。'
- en: See also
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '[分区策略（例如每个会话的多个数据库后端）](persistence_techniques.html#session-partitioning)'
- en: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
- en: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
- en: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
- en: '[PRE76]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Return the current nested transaction in progress, if any.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 返回正在进行的当前嵌套事务（如果有）。
- en: New in version 1.4.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: '[PRE77]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Return exactly one instance based on the given primary key identifier, or raise
    an exception if not found.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的主键标识符返回精确的一个实例，如果未找到则引发异常。
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查询未选择任何行，则引发`sqlalchemy.orm.exc.NoResultFound`。
- en: For a detailed documentation of the arguments see the method [`Session.get()`](#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get").
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 有关参数的详细文档，请参阅方法[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")。
- en: New in version 2.0.22.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.22 中新增。
- en: 'Returns:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The object instance.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 对象实例。
- en: See also
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - equivalent method that instead'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - 相当的方法，代替'
- en: returns `None` if no row was found with the provided primary key
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未找到具有提供的主键的行，则返回`None`。
- en: '[PRE78]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Return the current root transaction in progress, if any.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 返回正在进行的当前根事务（如果有）。
- en: New in version 1.4.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: '[PRE79]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.identity_key`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.orm.session._SessionClassMethods.identity_key` *的方法* `sqlalchemy.orm.session._SessionClassMethods`'
- en: Return an identity key.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个标识键。
- en: This is an alias of [`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 [`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key "sqlalchemy.orm.util.identity_key")
    的别名。
- en: '[PRE80]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: A mapping of object identities to objects themselves.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 对象标识到对象本身的映射。
- en: Iterating through `Session.identity_map.values()` provides access to the full
    set of persistent objects (i.e., those that have row identity) currently in the
    session.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`Session.identity_map.values()`迭代提供对当前会话中当前持久对象（即具有行标识的对象）的完整集合的访问。
- en: See also
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key "sqlalchemy.orm.util.identity_key")
    - helper function to produce the keys used in this dictionary.'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '[`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key "sqlalchemy.orm.util.identity_key")
    - 辅助函数，用于生成此字典中使用的键。'
- en: '[PRE81]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Return True if this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    has begun a nested transaction, e.g. SAVEPOINT.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 已开始嵌套事务（例如，SAVEPOINT），则返回
    True。
- en: New in version 1.4.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: '[PRE82]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: Return True if this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    has begun a transaction.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 已开始事务，则返回
    True。
- en: New in version 1.4.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中新增。
- en: See also
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.is_active`](#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.is_active`](#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")'
- en: '[PRE83]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: A user-modifiable dictionary.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用户可修改的字典。
- en: The initial value of this dictionary can be populated using the `info` argument
    to the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") constructor
    or [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    constructor or factory methods. The dictionary here is always local to this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and can be modified independently of all other [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 此字典的初始值可以使用 `info` 参数来填充到 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    构造函数或 [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    构造函数或工厂方法中。此处的字典始终局限于此 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    并且可以独立于所有其他 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 对象进行修改。
- en: '[PRE84]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Close this Session, using connection invalidation.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此会话，使用连接失效。
- en: This is a variant of [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    that will additionally ensure that the [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method will be called on each [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object that is currently in use for a transaction
    (typically there is only one connection unless the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is used with multiple engines).
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    的变体，还将确保对每个当前用于事务的 [`Connection`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") 对象调用 [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") 方法（通常只有一个连接，除非 [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 与多个引擎一起使用）。
- en: This can be called when the database is known to be in a state where the connections
    are no longer safe to be used.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 当已知数据库处于不再安全使用连接的状态时，可以调用此方法。
- en: 'Below illustrates a scenario when using [gevent](https://www.gevent.org/),
    which can produce `Timeout` exceptions that may mean the underlying connection
    should be discarded:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了在使用 [gevent](https://www.gevent.org/) 时可能出现的可导致底层连接应被丢弃的 `Timeout` 异常情况：
- en: '[PRE85]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: The method additionally does everything that [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") does, including that all ORM objects are expunged.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法还会执行 [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    所做的所有操作，包括清除所有 ORM 对象。
- en: '[PRE86]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: True if this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") not
    in “partial rollback” state.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 未处于“部分回滚”状态，则返回
    True。
- en: 'Changed in version 1.4: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    no longer begins a new transaction immediately, so this attribute will be False
    when the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") is first
    instantiated.'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的更改：[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 不再立即开始新事务，因此当首次实例化
    [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 时，此属性将为 False。
- en: “partial rollback” state typically indicates that the flush process of the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has failed, and that the [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method must be emitted in order to fully roll
    back the transaction.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: “部分回滚”状态通常表示 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 的刷新过程失败，并且必须发出
    [`Session.rollback()`](#sqlalchemy.orm.Session.rollback "sqlalchemy.orm.Session.rollback")
    方法以完全回滚事务。
- en: If this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") is not
    in a transaction at all, the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will autobegin when it is first used, so in this case [`Session.is_active`](#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") will return True.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 未处于事务中，则当首次使用时，[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 将自动开始，因此在这种情况下，[`Session.is_active`](#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") 将返回 True。
- en: Otherwise, if this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is within a transaction, and that transaction has not been rolled back internally,
    the [`Session.is_active`](#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will also return True.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，如果此 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 处于事务中，并且该事务尚未在内部回滚，则
    [`Session.is_active`](#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    也将返回 True。
- en: See also
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[“This Session’s transaction has been rolled back due to a previous exception
    during flush.” (or similar)](../faq/sessions.html#faq-session-rollback)'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '[“由于刷新期间的先前异常，此会话的事务已回滚。”（或类似内容）](../faq/sessions.html#faq-session-rollback)'
- en: '[`Session.in_transaction()`](#sqlalchemy.orm.Session.in_transaction "sqlalchemy.orm.Session.in_transaction")'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.in_transaction()`](#sqlalchemy.orm.Session.in_transaction "sqlalchemy.orm.Session.in_transaction")'
- en: '[PRE87]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Return `True` if the given instance has locally modified attributes.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定实例具有本地修改的属性，则返回 `True`。
- en: This method retrieves the history for each instrumented attribute on the instance
    and performs a comparison of the current value to its previously committed value,
    if any.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法检索实例上每个受仪器化的属性的历史记录，并将当前值与其先前提交的值进行比较（如果有）。
- en: It is in effect a more expensive and accurate version of checking for the given
    instance in the [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")
    collection; a full test for each attribute’s net “dirty” status is performed.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这是检查 [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")
    集合中给定实例的更昂贵和准确的版本；对每个属性的净“脏”状态进行全面测试。
- en: 'E.g.:'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE88]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'A few caveats to this method apply:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有一些注意事项：
- en: Instances present in the [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")
    collection may report `False` when tested with this method. This is because the
    object may have received change events via attribute mutation, thus placing it
    in [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty"),
    but ultimately the state is the same as that loaded from the database, resulting
    in no net change here.
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")
    集合中存在的实例在使用此方法进行测试时可能会报告 `False`。这是因为对象可能通过属性突变接收到更改事件，从而将其置于 [`Session.dirty`](#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") 中，但最终状态与从数据库加载的状态相同，在这里没有净更改。
- en: Scalar attributes may not have recorded the previously set value when a new
    value was applied, if the attribute was not loaded, or was expired, at the time
    the new value was received - in these cases, the attribute is assumed to have
    a change, even if there is ultimately no net change against its database value.
    SQLAlchemy in most cases does not need the “old” value when a set event occurs,
    so it skips the expense of a SQL call if the old value isn’t present, based on
    the assumption that an UPDATE of the scalar value is usually needed, and in those
    few cases where it isn’t, is less expensive on average than issuing a defensive
    SELECT.
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当新值被应用时，标量属性可能没有记录先前设置的值，如果在接收新值时该属性未加载或已过期，则假定该属性有一个更改，即使最终对其数据库值没有净更改也是如此。在这些情况下，即使最终没有针对数据库值的净更改，也假定该属性有一个更改。在大多数情况下，当发生
    set 事件时，SQLAlchemy 不需要“旧”值，因此如果旧值不存在，则跳过 SQL 调用的开销，这是基于标量值通常需要 UPDATE 的假设，并且在那几种情况下它不需要的情况下，平均比发出防御性的
    SELECT 更便宜。
- en: The “old” value is fetched unconditionally upon set only if the attribute container
    has the `active_history` flag set to `True`. This flag is set typically for primary
    key attributes and scalar object references that are not a simple many-to-one.
    To set this flag for any arbitrary mapped column, use the `active_history` argument
    with [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property").
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅当属性容器的 `active_history` 标志设置为 `True` 时，才无条件地在 set 时获取“旧”值。这个标志通常设置为主键属性和不是简单多对一的标量对象引用。要为任意映射列设置此标志，请使用
    [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    的 `active_history` 参数。
- en: 'Parameters:'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – mapped instance to be tested for pending changes.'
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 被测试的映射实例。'
- en: '`include_collections` – Indicates if multivalued collections should be included
    in the operation. Setting this to `False` is a way to detect only local-column
    based properties (i.e. scalar columns or many-to-one foreign keys) that would
    result in an UPDATE for this instance upon flush.'
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_collections` – 表示是否应包含多值集合在操作中。将其设置为 `False` 是一种检测仅基于本地列的属性（即标量列或多对一外键），这些属性会导致此实例在刷新时进行
    UPDATE 的方法。'
- en: '[PRE89]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Copy the state of a given instance into a corresponding instance within this
    [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定实例的状态复制到此 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 中的相应实例。
- en: '[`Session.merge()`](#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    examines the primary key attributes of the source instance, and attempts to reconcile
    it with an instance of the same primary key in the session. If not found locally,
    it attempts to load the object from the database based on primary key, and if
    none can be located, creates a new instance. The state of each attribute on the
    source instance is then copied to the target instance. The resulting target instance
    is then returned by the method; the original source instance is left unmodified,
    and un-associated with the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    if not already.'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.merge()`](#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")检查源实例的主键属性，并尝试将其与会话中具有相同主键的实例进行协调。如果在本地找不到，则尝试根据主键从数据库加载对象，如果找不到，则创建一个新实例。然后将源实例上的每个属性的状态复制到目标实例。然后该方法返回生成的目标实例；原始源实例保持不变，并且如果尚未与[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")相关联，则不与之相关联。'
- en: This operation cascades to associated instances if the association is mapped
    with `cascade="merge"`.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 如果关联使用`cascade="merge"`进行映射，则此操作会级联到关联的实例。
- en: See [Merging](session_state_management.html#unitofwork-merging) for a detailed
    discussion of merging.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 有关合并的详细讨论，请参见[合并](session_state_management.html#unitofwork-merging)。
- en: 'Parameters:'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – Instance to be merged.'
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 要合并的实例。'
- en: '`load` –'
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`load` –'
- en: Boolean, when False, [`merge()`](#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    switches into a “high performance” mode which causes it to forego emitting history
    events as well as all database access. This flag is used for cases such as transferring
    graphs of objects into a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    from a second level cache, or to transfer just-loaded objects into the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") owned by a worker thread or process without re-querying
    the database.
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值，当为False时，[`merge()`](#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")切换到“高性能”模式，使其放弃发出历史事件以及所有数据库访问。此标志用于诸如将对象图传输到从第二级缓存中的[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中，或者将刚加载的对象传输到由工作线程或进程拥有的[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中，而无需重新查询数据库的情况。
- en: The `load=False` use case adds the caveat that the given object has to be in
    a “clean” state, that is, has no pending changes to be flushed - even if the incoming
    object is detached from any [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    This is so that when the merge operation populates local attributes and cascades
    to related objects and collections, the values can be “stamped” onto the target
    object as is, without generating any history or attribute events, and without
    the need to reconcile the incoming data with any existing related objects or collections
    that might not be loaded. The resulting objects from `load=False` are always produced
    as “clean”, so it is only appropriate that the given objects should be “clean”
    as well, else this suggests a mis-use of the method.
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`load=False`用例增加了这样一个警告，即给定对象必须处于“干净”状态，也就是说，没有要刷新的挂起更改-即使传入对象已从任何[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")分离。这样，当合并操作填充本地属性并级联到相关对象和集合时，值可以原样“打印”到目标对象上，而不会生成任何历史记录或属性事件，并且无需将传入数据与可能未加载的任何现有相关对象或集合进行协调。来自`load=False`的结果对象始终生成为“干净”，因此只有给定对象也应该是“干净”的，否则这表明方法的错误使用。'
- en: '`options` –'
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options` –'
- en: optional sequence of loader options which will be applied to the [`Session.get()`](#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") method when the merge operation loads the existing
    version of the object from the database.
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在合并操作从数据库加载对象的现有版本时，会将一系列可选的加载器选项应用于[`Session.get()`](#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get")方法。
- en: New in version 1.4.24.
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本1.4.24中的新功能。
- en: See also
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - provides for an alternative means
    of “merging” a single object into the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - 提供了一种将单个对象“合并”到[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中的替代方法'
- en: '[PRE90]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: The set of all instances marked as ‘new’ within this `Session`.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`Session`中标记为“new”的所有实例的集合。
- en: '[PRE91]'
  id: totrans-596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Return a context manager that disables autoflush.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个禁用自动刷新的上下文管理器。
- en: 'e.g.:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE92]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Operations that proceed within the `with:` block will not be subject to flushes
    occurring upon query access. This is useful when initializing a series of objects
    which involve existing database queries, where the uncompleted object should not
    yet be flushed.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `with:` 块内进行的操作不会受到在查询访问时发生的刷新的影响。当初始化一系列涉及现有数据库查询的对象时，尚未完成的对象不应立即被刷新时，这是有用的。
- en: '[PRE93]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.object_session`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.orm.session._SessionClassMethods.object_session` *方法的* `sqlalchemy.orm.session._SessionClassMethods`'
- en: Return the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") to
    which an object belongs.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个对象所属的 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: This is an alias of [`object_session()`](#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session").
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 [`object_session()`](#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session")
    的别名。
- en: '[PRE94]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Prepare the current transaction in progress for two phase commit.
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 准备当前进行中的事务以进行两阶段提交。
- en: If no transaction is in progress, this method raises an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError").
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有进行事务，则此方法会引发一个 [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: Only root transactions of two phase sessions can be prepared. If the current
    transaction is not such, an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 仅两阶段会话的根事务可以被准备。如果当前事务不是这样的事务，则会引发一个 [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: '[PRE95]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Return a new [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object corresponding to this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个与此 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 对应的新 [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象。
- en: Note that the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object is legacy as of SQLAlchemy 2.0; the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct is now used to construct ORM queries.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象自 SQLAlchemy 2.0 起已被视为遗留；现在使用 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造 ORM 查询。
- en: See also
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)'
- en: '[ORM Querying Guide](queryguide/index.html)'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 查询指南](queryguide/index.html)'
- en: '[Legacy Query API](queryguide/query.html) - legacy API doc'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '[遗留查询 API](queryguide/query.html) - 遗留 API 文档'
- en: '[PRE96]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Expire and refresh attributes on the given instance.
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 使给定实例的属性过期并刷新。
- en: The selected attributes will first be expired as they would when using [`Session.expire()`](#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire"); then a SELECT statement will be issued to the
    database to refresh column-oriented attributes with the current value available
    in the current transaction.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 首先将选定的属性作为当使用 [`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")
    时会过期的那样进行过期处理；然后将发出 SELECT 语句到数据库，以使用当前事务中可用的当前值刷新基于列的属性。
- en: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    oriented attributes will also be immediately loaded if they were already eagerly
    loaded on the object, using the same eager loading strategy that they were loaded
    with originally.'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象已经被急切加载，那么 [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 定向属性也将立即被加载，使用它们最初加载时使用的急切加载策略。
- en: 'New in version 1.4: - the [`Session.refresh()`](#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method can also refresh eagerly loaded attributes.'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能：- [`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    方法也可以刷新急切加载的属性。
- en: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    oriented attributes that would normally load using the `select` (or “lazy”) loader
    strategy will also load **if they are named explicitly in the attribute_names
    collection**, emitting a SELECT statement for the attribute using the `immediate`
    loader strategy. If lazy-loaded relationships are not named in [`Session.refresh.attribute_names`](#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh"), then they remain as “lazy loaded” attributes
    and are not implicitly refreshed.'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    导向属性通常会使用 `select`（或“延迟加载”）加载策略，如果它们在 `attribute_names` 集合中被明确命名，也会加载**，使用 `immediate`
    加载策略对属性发出 SELECT 语句。如果惰性加载的关系未在[`Session.refresh.attribute_names`](#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh")中命名，则它们保持为“惰性加载”属性，不会被隐式刷新。'
- en: 'Changed in version 2.0.4: The [`Session.refresh()`](#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method will now refresh lazy-loaded [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") oriented attributes for those which are named explicitly
    in the [`Session.refresh.attribute_names`](#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") collection.'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2.0.4 中更改：[`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    方法现在将刷新那些在[`Session.refresh.attribute_names`](#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh")集合中明确命名的惰性加载的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 导向属性。
- en: Tip
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: While the [`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    method is capable of refreshing both column and relationship oriented attributes,
    its primary focus is on refreshing of local column-oriented attributes on a single
    instance. For more open ended “refresh” functionality, including the ability to
    refresh the attributes on many objects at once while having explicit control over
    relationship loader strategies, use the [populate existing](queryguide/api.html#orm-queryguide-populate-existing)
    feature instead.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 [`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    方法能够刷新列和关系导向的属性，但其主要重点是在单个实例上刷新本地列导向的属性。要获得更开放的“刷新”功能，包括能够同时刷新许多对象的属性并明确控制关系加载策略，请使用
    [populate existing](queryguide/api.html#orm-queryguide-populate-existing) 功能。
- en: Note that a highly isolated transaction will return the same values as were
    previously read in that same transaction, regardless of changes in database state
    outside of that transaction. Refreshing attributes usually only makes sense at
    the start of a transaction where database rows have not yet been accessed.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，高度隔离的事务将返回与在同一事务中先前读取的值相同的值，而不管该事务之外的数据库状态是否发生了变化。通常仅在事务开始时，尚未访问数据库行时刷新属性才有意义。
- en: 'Parameters:'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`attribute_names` – optional. An iterable collection of string attribute names
    indicating a subset of attributes to be refreshed.'
  id: totrans-627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attribute_names` – 可选。一个字符串属性名称的可迭代集合，指示要刷新的属性的子集。'
- en: '`with_for_update` – optional boolean `True` indicating FOR UPDATE should be
    used, or may be a dictionary containing flags to indicate a more specific set
    of FOR UPDATE flags for the SELECT; flags should match the parameters of [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Supersedes the [`Session.refresh.lockmode`](#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") parameter.'
  id: totrans-628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_for_update` – 可选布尔值 `True`，指示是否应使用 FOR UPDATE，或者可能是一个包含标志的字典，用于指示更具体的
    FOR UPDATE 标志集合用于 SELECT；标志应该与 [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update") 的参数匹配。取代[`Session.refresh.lockmode`](#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") 参数。'
- en: See also
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新/过期](session_state_management.html#session-expire) - 初级材料'
- en: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all "sqlalchemy.orm.Session.expire_all")'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all "sqlalchemy.orm.Session.expire_all")'
- en: '[Populate Existing](queryguide/api.html#orm-queryguide-populate-existing) -
    allows any ORM query to refresh objects as they would be loaded normally.'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '[填充现有对象](queryguide/api.html#orm-queryguide-populate-existing) - 允许任何 ORM 查询刷新对象，就像它们通常加载的那样。'
- en: '[PRE97]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Close out the transactional resources and ORM objects used by this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), resetting the session to its initial state.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")使用的事务资源和 ORM
    对象，将会话重置为其初始状态。
- en: This method provides for same “reset-only” behavior that the [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method has provided historically, where the state
    of the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") is reset
    as though the object were brand new, and ready to be used again. This method may
    then be useful for [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects which set [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") to `False`, so that “reset only” behavior is still available.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法提供了与[`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")方法在历史上提供的相同的“仅重置”行为，其中[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的状态被重置，就像对象是全新的一样，准备好再次使用。然后，此方法可能对将[`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")设置为`False`的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象有用，以便仍然可以使用“仅重置”行为。
- en: New in version 2.0.22.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.22。
- en: See also
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Closing](session_basics.html#session-closing) - detail on the semantics of
    [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '[关闭](session_basics.html#session-closing) - 详细介绍了 [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") 和 [`Session.reset()`](#sqlalchemy.orm.Session.reset
    "sqlalchemy.orm.Session.reset") 的语义。'
- en: '[`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - a similar method will additionally prevent re-use of the Session when the parameter
    [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") is set to `False`.'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - 当参数 [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") 设置为 `False` 时，此类方法还将阻止会话的重复使用。'
- en: '[PRE98]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Rollback the current transaction in progress.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚当前进行中的事务。
- en: If no transaction is in progress, this method is a pass-through.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有进行中的事务，则此方法是一个直通方法。
- en: The method always rolls back the topmost database transaction, discarding any
    nested transactions that may be in progress.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法始终回滚最顶层的数据库事务，丢弃可能正在进行的任何嵌套事务。
- en: See also
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Rolling Back](session_basics.html#session-rollback)'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: '[回滚](session_basics.html#session-rollback)'
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: '[事务管理](session_transaction.html#unitofwork-transaction)'
- en: '[PRE99]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Execute a statement and return a scalar result.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 执行一条语句并返回一个标量结果。
- en: Usage and parameters are the same as that of [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"); the return result is a scalar Python value.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 用法和参数与[`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")相同；返回结果是一个标量
    Python 值。
- en: '[PRE100]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Execute a statement and return the results as scalars.
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 执行一条语句并将结果作为标量返回。
- en: Usage and parameters are the same as that of [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"); the return result is a [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") filtering object which will return single elements
    rather than [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 用法和参数与[`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")相同；返回结果是一个[`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")过滤对象，它将返回单个元素而不是[`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: 'Returns:'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    object
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")对象
- en: 'New in version 1.4.24: Added [`Session.scalars()`](#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.24 中添加：[`Session.scalars()`](#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
- en: 'New in version 1.4.26: Added [`scoped_session.scalars()`](contextual.html#sqlalchemy.orm.scoped_session.scalars
    "sqlalchemy.orm.scoped_session.scalars")'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.26 中添加：[`scoped_session.scalars()`](contextual.html#sqlalchemy.orm.scoped_session.scalars
    "sqlalchemy.orm.scoped_session.scalars")
- en: See also
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Selecting ORM Entities](queryguide/select.html#orm-queryguide-select-orm-entities)
    - contrasts the behavior of [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") to [`Session.scalars()`](#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: '[选择 ORM 实体](queryguide/select.html#orm-queryguide-select-orm-entities) - 将
    [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    的行为与 [`Session.scalars()`](#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    进行对比'
- en: '[PRE101]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: A [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")-level transaction.
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 级别的事务。
- en: '[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    is produced from the [`Session.begin()`](#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")
    and [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")
    methods. It’s largely an internal object that in modern use provides a context
    manager for session transactions.'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    是由 [`Session.begin()`](#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")
    和 [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")
    方法生成的。它在现代用法中主要是一个内部对象，为会话事务提供上下文管理器。'
- en: 'Documentation on interacting with [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is at: [Managing Transactions](session_transaction.html#unitofwork-transaction).'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    交互的文档位于：[管理事务](session_transaction.html#unitofwork-transaction)。
- en: 'Changed in version 1.4: The scoping and API methods to work with the [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object directly have been simplified.'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4更改：直接处理 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    对象的范围和API方法已经简化。
- en: See also
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: '[管理事务](session_transaction.html#unitofwork-transaction)'
- en: '[`Session.begin()`](#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.begin()`](#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")'
- en: '[`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")'
- en: '[`Session.rollback()`](#sqlalchemy.orm.Session.rollback "sqlalchemy.orm.Session.rollback")'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.rollback()`](#sqlalchemy.orm.Session.rollback "sqlalchemy.orm.Session.rollback")'
- en: '[`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")'
- en: '[`Session.in_transaction()`](#sqlalchemy.orm.Session.in_transaction "sqlalchemy.orm.Session.in_transaction")'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.in_transaction()`](#sqlalchemy.orm.Session.in_transaction "sqlalchemy.orm.Session.in_transaction")'
- en: '[`Session.in_nested_transaction()`](#sqlalchemy.orm.Session.in_nested_transaction
    "sqlalchemy.orm.Session.in_nested_transaction")'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.in_nested_transaction()`](#sqlalchemy.orm.Session.in_nested_transaction
    "sqlalchemy.orm.Session.in_nested_transaction")'
- en: '[`Session.get_transaction()`](#sqlalchemy.orm.Session.get_transaction "sqlalchemy.orm.Session.get_transaction")'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get_transaction()`](#sqlalchemy.orm.Session.get_transaction "sqlalchemy.orm.Session.get_transaction")'
- en: '[`Session.get_nested_transaction()`](#sqlalchemy.orm.Session.get_nested_transaction
    "sqlalchemy.orm.Session.get_nested_transaction")'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get_nested_transaction()`](#sqlalchemy.orm.Session.get_nested_transaction
    "sqlalchemy.orm.Session.get_nested_transaction")'
- en: '**Members**'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[nested](#sqlalchemy.orm.SessionTransaction.nested), [origin](#sqlalchemy.orm.SessionTransaction.origin),
    [parent](#sqlalchemy.orm.SessionTransaction.parent)'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: '[嵌套](#sqlalchemy.orm.SessionTransaction.nested), [原始](#sqlalchemy.orm.SessionTransaction.origin),
    [父级](#sqlalchemy.orm.SessionTransaction.parent)'
- en: '**Class signature**'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") (`sqlalchemy.orm.state_changes._StateChange`,
    `sqlalchemy.engine.util.TransactionalContext`)
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    (`sqlalchemy.orm.state_changes._StateChange`, `sqlalchemy.engine.util.TransactionalContext`)
- en: '[PRE102]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Indicates if this is a nested, or SAVEPOINT, transaction.
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 指示这是否为嵌套或SAVEPOINT事务。
- en: When [`SessionTransaction.nested`](#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested") is True, it is expected that [`SessionTransaction.parent`](#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent") will be present as well, linking to
    the enclosing [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction").
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`SessionTransaction.nested`](#sqlalchemy.orm.SessionTransaction.nested "sqlalchemy.orm.SessionTransaction.nested")
    为 True 时，预计 [`SessionTransaction.parent`](#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent") 也会出现，链接到封闭的 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")。
- en: See also
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`SessionTransaction.origin`](#sqlalchemy.orm.SessionTransaction.origin "sqlalchemy.orm.SessionTransaction.origin")'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionTransaction.origin`](#sqlalchemy.orm.SessionTransaction.origin "sqlalchemy.orm.SessionTransaction.origin")'
- en: '[PRE103]'
  id: totrans-684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: Origin of this [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction").
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    的来源。
- en: Refers to a [`SessionTransactionOrigin`](#sqlalchemy.orm.SessionTransactionOrigin
    "sqlalchemy.orm.SessionTransactionOrigin") instance which is an enumeration indicating
    the source event that led to constructing this [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 指的是一个 [`SessionTransactionOrigin`](#sqlalchemy.orm.SessionTransactionOrigin
    "sqlalchemy.orm.SessionTransactionOrigin") 实例，该实例是指导致构造此 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") 的源事件的枚举。
- en: New in version 2.0.
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中添加。
- en: '[PRE104]'
  id: totrans-688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: The parent [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    of this [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction").
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    的父级 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")。
- en: If this attribute is `None`, indicates this [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is at the top of the stack, and corresponds
    to a real “COMMIT”/”ROLLBACK” block. If non-`None`, then this is either a “subtransaction”
    (an internal marker object used by the flush process) or a “nested” / SAVEPOINT
    transaction. If the [`SessionTransaction.nested`](#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested") attribute is `True`, then this is
    a SAVEPOINT, and if `False`, indicates this a subtransaction.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此属性为 `None`，表示此 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") 位于堆栈顶部，并且对应于真实的 “COMMIT”/”ROLLBACK” 块。如果非
    `None`，则这是一个 “子事务”（由刷新进程使用的内部标记对象）或 “嵌套” / SAVEPOINT 事务。如果 [`SessionTransaction.nested`](#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested") 属性为 `True`，则这是一个 SAVEPOINT，如果为 `False`，表示这是一个子事务。
- en: '[PRE105]'
  id: totrans-691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: indicates the origin of a [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 表示[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")的来源。
- en: This enumeration is present on the [`SessionTransaction.origin`](#sqlalchemy.orm.SessionTransaction.origin
    "sqlalchemy.orm.SessionTransaction.origin") attribute of any [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 此枚举存在于任何 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    对象的 [`SessionTransaction.origin`](#sqlalchemy.orm.SessionTransaction.origin "sqlalchemy.orm.SessionTransaction.origin")
    属性上。
- en: New in version 2.0.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中添加。
- en: '**Members**'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[AUTOBEGIN](#sqlalchemy.orm.SessionTransactionOrigin.AUTOBEGIN), [BEGIN](#sqlalchemy.orm.SessionTransactionOrigin.BEGIN),
    [BEGIN_NESTED](#sqlalchemy.orm.SessionTransactionOrigin.BEGIN_NESTED), [SUBTRANSACTION](#sqlalchemy.orm.SessionTransactionOrigin.SUBTRANSACTION)'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: '[AUTOBEGIN](#sqlalchemy.orm.SessionTransactionOrigin.AUTOBEGIN), [BEGIN](#sqlalchemy.orm.SessionTransactionOrigin.BEGIN),
    [BEGIN_NESTED](#sqlalchemy.orm.SessionTransactionOrigin.BEGIN_NESTED), [SUBTRANSACTION](#sqlalchemy.orm.SessionTransactionOrigin.SUBTRANSACTION)'
- en: '**Class signature**'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.SessionTransactionOrigin`](#sqlalchemy.orm.SessionTransactionOrigin
    "sqlalchemy.orm.SessionTransactionOrigin") (`enum.Enum`)
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.SessionTransactionOrigin`](#sqlalchemy.orm.SessionTransactionOrigin
    "sqlalchemy.orm.SessionTransactionOrigin") (`enum.Enum`)
- en: '[PRE106]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: transaction were started by autobegin
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 通过自动开始开始的事务
- en: '[PRE107]'
  id: totrans-701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: transaction were started by calling [`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用 [`Session.begin()`](#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")
    开始事务。
- en: '[PRE108]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: tranaction were started by [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")
    开始事务。
- en: '[PRE109]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: transaction is an internal “subtransaction”
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 事务是内部的 “子事务”
- en: Session Utilities
  id: totrans-707
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 会话工具
- en: '| Object Name | Description |'
  id: totrans-708
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-709
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [close_all_sessions](#sqlalchemy.orm.close_all_sessions)() | Close all sessions
    in memory. |'
  id: totrans-710
  prefs: []
  type: TYPE_TB
  zh: '| [close_all_sessions](#sqlalchemy.orm.close_all_sessions)() | 关闭内存中的所有会话。
    |'
- en: '| [make_transient](#sqlalchemy.orm.make_transient)(instance) | Alter the state
    of the given instance so that it is [transient](../glossary.html#term-transient).
    |'
  id: totrans-711
  prefs: []
  type: TYPE_TB
  zh: '| [make_transient](#sqlalchemy.orm.make_transient)(instance) | 修改给定实例的状态，使其为[瞬态](../glossary.html#term-transient)。
    |'
- en: '| [make_transient_to_detached](#sqlalchemy.orm.make_transient_to_detached)(instance)
    | Make the given transient instance [detached](../glossary.html#term-detached).
    |'
  id: totrans-712
  prefs: []
  type: TYPE_TB
  zh: '| [make_transient_to_detached](#sqlalchemy.orm.make_transient_to_detached)(instance)
    | 使给定的瞬态实例成为[脱离的](../glossary.html#term-detached)。 |'
- en: '| [object_session](#sqlalchemy.orm.object_session)(instance) | Return the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to which the given instance belongs. |'
  id: totrans-713
  prefs: []
  type: TYPE_TB
  zh: '| [object_session](#sqlalchemy.orm.object_session)(instance) | 返回给定实例所属的 [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。 |'
- en: '| [was_deleted](#sqlalchemy.orm.util.was_deleted)(object_) | Return True if
    the given object was deleted within a session flush. |'
  id: totrans-714
  prefs: []
  type: TYPE_TB
  zh: '| [was_deleted](#sqlalchemy.orm.util.was_deleted)(object_) | 如果给定对象在会话刷新中被删除，则返回
    True。 |'
- en: '[PRE110]'
  id: totrans-715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Close all sessions in memory.
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭内存中的所有会话。
- en: This function consults a global registry of all [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects and calls [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") on them, which resets them to a clean state.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数会查询所有 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 对象的全局注册表，并对它们调用
    [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    ，将它们重置为干净的状态。
- en: This function is not for general use but may be useful for test suites within
    the teardown scheme.
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数不适用于一般用途，但在拆卸方案中的测试套件中可能有用。
- en: New in version 1.3.
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3 中的新功能。
- en: '[PRE111]'
  id: totrans-720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Alter the state of the given instance so that it is [transient](../glossary.html#term-transient).
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 改变给定实例的状态，使其成为[瞬态的](../glossary.html#term-transient)。
- en: Note
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")
    is a special-case function for advanced use cases only.'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")
    是仅用于高级用例的特殊情况函数。'
- en: The given mapped instance is assumed to be in the [persistent](../glossary.html#term-persistent)
    or [detached](../glossary.html#term-detached) state. The function will remove
    its association with any [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    as well as its [`InstanceState.identity`](internals.html#sqlalchemy.orm.InstanceState.identity
    "sqlalchemy.orm.InstanceState.identity"). The effect is that the object will behave
    as though it were newly constructed, except retaining any attribute / collection
    values that were loaded at the time of the call. The [`InstanceState.deleted`](internals.html#sqlalchemy.orm.InstanceState.deleted
    "sqlalchemy.orm.InstanceState.deleted") flag is also reset if this object had
    been deleted as a result of using [`Session.delete()`](#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete").
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 假定给定的映射实例处于[持久的](../glossary.html#term-persistent)或[脱离的](../glossary.html#term-detached)状态。
    该函数将删除其与任何 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 的关联以及其
    [`InstanceState.identity`](internals.html#sqlalchemy.orm.InstanceState.identity
    "sqlalchemy.orm.InstanceState.identity")。 其效果是对象将表现得像它是新构造的，除了保留在调用时加载的任何属性/集合值。
    如果此对象已因使用 [`Session.delete()`](#sqlalchemy.orm.Session.delete "sqlalchemy.orm.Session.delete")
    而被删除，则还将重置 [`InstanceState.deleted`](internals.html#sqlalchemy.orm.InstanceState.deleted
    "sqlalchemy.orm.InstanceState.deleted") 标志。
- en: Warning
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")
    does **not** “unexpire” or otherwise eagerly load ORM-mapped attributes that are
    not currently loaded at the time the function is called. This includes attributes
    which:'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")
    **不**“取消过期”或以其他方式急切加载目前未加载的 ORM 映射属性。 这包括：'
- en: were expired via [`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")
  id: totrans-727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 [`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")
    过期
- en: were expired as the natural effect of committing a session transaction, e.g.
    [`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
  id: totrans-728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于提交会话事务的自然效果，会话过期，例如 [`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
- en: are normally [lazy loaded](../glossary.html#term-lazy-loaded) but are not currently
    loaded
  id: totrans-729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常是[惰性加载](../glossary.html#term-lazy-loaded)，但目前未加载
- en: are “deferred” (see [Limiting which Columns Load with Column Deferral](queryguide/columns.html#orm-queryguide-column-deferral))
    and are not yet loaded
  id: totrans-730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是“延迟加载”（参见 [限制哪些列与列延迟加载](queryguide/columns.html#orm-queryguide-column-deferral)）并且尚未加载
- en: were not present in the query which loaded this object, such as that which is
    common in joined table inheritance and other scenarios.
  id: totrans-731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在加载此对象的查询中不存在，例如，在连接表继承和其他场景中常见的情况下。
- en: After [`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")
    is called, unloaded attributes such as those above will normally resolve to the
    value `None` when accessed, or an empty collection for a collection-oriented attribute.
    As the object is transient and un-associated with any database identity, it will
    no longer retrieve these values.
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")之后，通常会解析为`None`的未加载属性，例如上面的属性，或者是针对集合导向属性的空集合。
    由于对象是临时的，并且与任何数据库标识都没有关联，因此将不再检索这些值。
- en: See also
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached")'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached")'
- en: '[PRE112]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Make the given transient instance [detached](../glossary.html#term-detached).
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 使给定的临时实例[脱离](../glossary.html#term-detached)。
- en: Note
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") is a special-case function for advanced
    use cases only.'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached")是一个仅用于高级用例的特殊情况函数。'
- en: All attribute history on the given instance will be reset as though the instance
    were freshly loaded from a query. Missing attributes will be marked as expired.
    The primary key attributes of the object, which are required, will be made into
    the “key” of the instance.
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: 给定实例的所有属性历史记录都将被重置，就好像该实例是从查询中新加载的一样。 缺少的属性将被标记为过期。 对象的主键属性将被制成实例的“键”，这些主键属性是必需的。
- en: The object can then be added to a session, or merged possibly with the load=False
    flag, at which point it will look as if it were loaded that way, without emitting
    SQL.
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以将对象添加到会话中，或者可能与load=False标志合并，此时它看起来就像是以这种方式加载的，而不会发出SQL。
- en: This is a special use case function that differs from a normal call to [`Session.merge()`](#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") in that a given persistent state can be manufactured
    without any SQL calls.
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个特殊的用例函数，它与对[`Session.merge()`](#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")的普通调用不同，因为可以在不进行任何SQL调用的情况下制造给定的持久状态。
- en: See also
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")'
- en: '[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading")'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading")'
- en: '[PRE113]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Return the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") to
    which the given instance belongs.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定实例所属的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: This is essentially the same as the [`InstanceState.session`](internals.html#sqlalchemy.orm.InstanceState.session
    "sqlalchemy.orm.InstanceState.session") accessor. See that attribute for details.
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上与[`InstanceState.session`](internals.html#sqlalchemy.orm.InstanceState.session
    "sqlalchemy.orm.InstanceState.session")访问器相同。 有关详细信息，请参阅该属性。
- en: '[PRE114]'
  id: totrans-748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Return True if the given object was deleted within a session flush.
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定对象在会话刷新时被删除，则返回True。
- en: This is regardless of whether or not the object is persistent or detached.
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 无论对象是否持久还是分离，都是如此。
- en: See also
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`InstanceState.was_deleted`](internals.html#sqlalchemy.orm.InstanceState.was_deleted
    "sqlalchemy.orm.InstanceState.was_deleted")'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceState.was_deleted`](internals.html#sqlalchemy.orm.InstanceState.was_deleted
    "sqlalchemy.orm.InstanceState.was_deleted")'
- en: Attribute and State Management Utilities
  id: totrans-753
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性和状态管理工具
- en: These functions are provided by the SQLAlchemy attribute instrumentation API
    to provide a detailed interface for dealing with instances, attribute values,
    and history. Some of them are useful when constructing event listener functions,
    such as those described in [ORM Events](events.html).
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数由SQLAlchemy属性检测API提供，用于提供详细的接口来处理实例、属性值和历史记录。 在构建事件监听器函数时，其中一些函数非常有用，例如在[ORM事件](events.html)中描述的函数。
- en: '| Object Name | Description |'
  id: totrans-755
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-756
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [del_attribute](#sqlalchemy.orm.attributes.del_attribute)(instance, key)
    | Delete the value of an attribute, firing history events. |'
  id: totrans-757
  prefs: []
  type: TYPE_TB
  zh: '| [del_attribute](#sqlalchemy.orm.attributes.del_attribute)(instance, key)
    | 删除属性的值，并触发历史事件。 |'
- en: '| [flag_dirty](#sqlalchemy.orm.attributes.flag_dirty)(instance) | Mark an instance
    as ‘dirty’ without any specific attribute mentioned. |'
  id: totrans-758
  prefs: []
  type: TYPE_TB
  zh: '| [flag_dirty](#sqlalchemy.orm.attributes.flag_dirty)(instance) | 标记一个实例为“脏”，而不具体提到任何属性。
    |'
- en: '| [flag_modified](#sqlalchemy.orm.attributes.flag_modified)(instance, key)
    | Mark an attribute on an instance as ‘modified’. |'
  id: totrans-759
  prefs: []
  type: TYPE_TB
  zh: '| [flag_modified](#sqlalchemy.orm.attributes.flag_modified)(instance, key)
    | 将实例上的属性标记为“修改”。 |'
- en: '| [get_attribute](#sqlalchemy.orm.attributes.get_attribute)(instance, key)
    | Get the value of an attribute, firing any callables required. |'
  id: totrans-760
  prefs: []
  type: TYPE_TB
  zh: '| [get_attribute](#sqlalchemy.orm.attributes.get_attribute)(instance, key)
    | 获取属性的值，触发任何所需的可调用对象。 |'
- en: '| [get_history](#sqlalchemy.orm.attributes.get_history)(obj, key[, passive])
    | Return a [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    record for the given object and attribute key. |'
  id: totrans-761
  prefs: []
  type: TYPE_TB
  zh: '| [get_history](#sqlalchemy.orm.attributes.get_history)(obj, key[, passive])
    | 为给定对象和属性键返回一个[`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    记录。 |'
- en: '| [History](#sqlalchemy.orm.attributes.History) | A 3-tuple of added, unchanged
    and deleted values, representing the changes which have occurred on an instrumented
    attribute. |'
  id: totrans-762
  prefs: []
  type: TYPE_TB
  zh: '| [History](#sqlalchemy.orm.attributes.History) | 添加、未更改和已删除值的三元组，表示在工具化属性上发生的更改。
    |'
- en: '| [init_collection](#sqlalchemy.orm.attributes.init_collection)(obj, key) |
    Initialize a collection attribute and return the collection adapter. |'
  id: totrans-763
  prefs: []
  type: TYPE_TB
  zh: '| [init_collection](#sqlalchemy.orm.attributes.init_collection)(obj, key) |
    初始化集合属性并返回集合适配器。 |'
- en: '| [instance_state](#sqlalchemy.orm.attributes.instance_state) | Return the
    [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    for a given mapped object. |'
  id: totrans-764
  prefs: []
  type: TYPE_TB
  zh: '| [instance_state](#sqlalchemy.orm.attributes.instance_state) | 返回给定映射对象的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。 |'
- en: '| [is_instrumented](#sqlalchemy.orm.instrumentation.is_instrumented)(instance,
    key) | Return True if the given attribute on the given instance is instrumented
    by the attributes package. |'
  id: totrans-765
  prefs: []
  type: TYPE_TB
  zh: '| [is_instrumented](#sqlalchemy.orm.instrumentation.is_instrumented)(instance,
    key) | 如果给定实例的给定属性由 attributes 包进行了工具化，则返回 True。 |'
- en: '| [object_state](#sqlalchemy.orm.util.object_state)(instance) | Given an object,
    return the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    associated with the object. |'
  id: totrans-766
  prefs: []
  type: TYPE_TB
  zh: '| [object_state](#sqlalchemy.orm.util.object_state)(instance) | 给定一个对象，返回与该对象关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。 |'
- en: '| [set_attribute](#sqlalchemy.orm.attributes.set_attribute)(instance, key,
    value[, initiator]) | Set the value of an attribute, firing history events. |'
  id: totrans-767
  prefs: []
  type: TYPE_TB
  zh: '| [set_attribute](#sqlalchemy.orm.attributes.set_attribute)(instance, key,
    value[, initiator]) | 设置属性的值，触发历史事件。 |'
- en: '| [set_committed_value](#sqlalchemy.orm.attributes.set_committed_value)(instance,
    key, value) | Set the value of an attribute with no history events. |'
  id: totrans-768
  prefs: []
  type: TYPE_TB
  zh: '| [set_committed_value](#sqlalchemy.orm.attributes.set_committed_value)(instance,
    key, value) | 设置属性的值，没有历史事件。 |'
- en: '[PRE115]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Given an object, return the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") associated with the object.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个对象，返回与该对象关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。
- en: Raises [`sqlalchemy.orm.exc.UnmappedInstanceError`](exceptions.html#sqlalchemy.orm.exc.UnmappedInstanceError
    "sqlalchemy.orm.exc.UnmappedInstanceError") if no mapping is configured.
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有配置映射，则会引发[`sqlalchemy.orm.exc.UnmappedInstanceError`](exceptions.html#sqlalchemy.orm.exc.UnmappedInstanceError
    "sqlalchemy.orm.exc.UnmappedInstanceError")。
- en: 'Equivalent functionality is available via the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function as:'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    函数可以获得等效功能，如下所示：
- en: '[PRE116]'
  id: totrans-773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Using the inspection system will raise [`sqlalchemy.exc.NoInspectionAvailable`](../core/exceptions.html#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable") if the instance is not part of a mapping.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 使用检查系统将会在实例不属于映射的情况下引发[`sqlalchemy.exc.NoInspectionAvailable`](../core/exceptions.html#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable")。
- en: '[PRE117]'
  id: totrans-775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Delete the value of an attribute, firing history events.
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 删除属性的值，触发历史事件。
- en: This function may be used regardless of instrumentation applied directly to
    the class, i.e. no descriptors are required. Custom attribute management schemes
    will need to make usage of this method to establish attribute state as understood
    by SQLAlchemy.
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: 无论直接应用于类的工具化如何，都可以使用此函数，即不需要描述符。自定义属性管理方案将需要使用此方法来建立由 SQLAlchemy 理解的属性状态。
- en: '[PRE118]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Get the value of an attribute, firing any callables required.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: 获取属性的值，触发任何所需的可调用对象。
- en: This function may be used regardless of instrumentation applied directly to
    the class, i.e. no descriptors are required. Custom attribute management schemes
    will need to make usage of this method to make usage of attribute state as understood
    by SQLAlchemy.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 无论直接应用于类的仪器是什么，都可以使用此函数，即不需要描述符。自定义属性管理方案将需要使用此方法来使用SQLAlchemy理解的属性状态。
- en: '[PRE119]'
  id: totrans-781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: Return a [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    record for the given object and attribute key.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定对象和属性键的[`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")记录。
- en: This is the **pre-flush** history for a given attribute, which is reset each
    time the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") flushes
    changes to the current database transaction.
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 这是给定属性的**预刷新**历史记录，每次[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")刷新对当前数据库事务进行更改时都会重置。
- en: Note
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Prefer to use the [`AttributeState.history`](internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history") and [`AttributeState.load_history()`](internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history") accessors to retrieve the [`History`](#sqlalchemy.orm.attributes.History
    "sqlalchemy.orm.attributes.History") for instance attributes.
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 优先使用[`AttributeState.history`](internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history")和[`AttributeState.load_history()`](internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history")访问器来检索实例属性的[`History`](#sqlalchemy.orm.attributes.History
    "sqlalchemy.orm.attributes.History")。
- en: 'Parameters:'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`obj` – an object whose class is instrumented by the attributes package.'
  id: totrans-787
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj` - 其类由属性包装的对象。'
- en: '`key` – string attribute name.'
  id: totrans-788
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` - 字符串属性名称。'
- en: '`passive` – indicates loading behavior for the attribute if the value is not
    already present. This is a bitflag attribute, which defaults to the symbol `PASSIVE_OFF`
    indicating all necessary SQL should be emitted.'
  id: totrans-789
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`passive` - 如果值尚不存在，则指示属性的加载行为。这是一个比特标志属性，默认为符号`PASSIVE_OFF`，表示应发出所有必要的SQL。'
- en: See also
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`AttributeState.history`](internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history")'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeState.history`](internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history")'
- en: '[`AttributeState.load_history()`](internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history") - retrieve history using loader
    callables if the value is not locally present.'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeState.load_history()`](internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history") - 如果值未在本地存在，则使用加载器可调用检索历史记录。'
- en: '[PRE120]'
  id: totrans-793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Initialize a collection attribute and return the collection adapter.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化集合属性并返回集合适配器。
- en: 'This function is used to provide direct access to collection internals for
    a previously unloaded attribute. e.g.:'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数用于为先前未加载的属性提供直接访问集合内部。例如：
- en: '[PRE121]'
  id: totrans-796
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: For an easier way to do the above, see [`set_committed_value()`](#sqlalchemy.orm.attributes.set_committed_value
    "sqlalchemy.orm.attributes.set_committed_value").
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 要更轻松地执行上述操作，请参见[`set_committed_value()`](#sqlalchemy.orm.attributes.set_committed_value
    "sqlalchemy.orm.attributes.set_committed_value")。
- en: 'Parameters:'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`obj` – a mapped object'
  id: totrans-799
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj` - 一个映射对象'
- en: '`key` – string attribute name where the collection is located.'
  id: totrans-800
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` - 集合所在的字符串属性名称。'
- en: '[PRE122]'
  id: totrans-801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Mark an attribute on an instance as ‘modified’.
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例上的属性标记为“修改”。
- en: This sets the ‘modified’ flag on the instance and establishes an unconditional
    change event for the given attribute. The attribute must have a value present,
    else an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised.
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在实例上设置“修改”标志，并为给定属性建立一个无条件的更改事件。属性必须有一个值存在，否则会引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: To mark an object “dirty” without referring to any specific attribute so that
    it is considered within a flush, use the [`flag_dirty()`](#sqlalchemy.orm.attributes.flag_dirty
    "sqlalchemy.orm.attributes.flag_dirty") call.
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 要将对象标记为“脏”，而不引用任何特定属性，以便在刷新时将其视为“脏”，请使用[`flag_dirty()`](#sqlalchemy.orm.attributes.flag_dirty
    "sqlalchemy.orm.attributes.flag_dirty")调用。
- en: See also
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`flag_dirty()`](#sqlalchemy.orm.attributes.flag_dirty "sqlalchemy.orm.attributes.flag_dirty")'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: '[`flag_dirty()`](#sqlalchemy.orm.attributes.flag_dirty "sqlalchemy.orm.attributes.flag_dirty")'
- en: '[PRE123]'
  id: totrans-807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Mark an instance as ‘dirty’ without any specific attribute mentioned.
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例标记为“脏”，而不提及任何特定属性。
- en: This is a special operation that will allow the object to travel through the
    flush process for interception by events such as [`SessionEvents.before_flush()`](events.html#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush"). Note that no SQL will be emitted
    in the flush process for an object that has no changes, even if marked dirty via
    this method. However, a [`SessionEvents.before_flush()`](events.html#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") handler will be able to see the object
    in the [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")
    collection and may establish changes on it, which will then be included in the
    SQL emitted.
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个特殊操作，将允许对象通过刷新过程，以便被[`SessionEvents.before_flush()`](events.html#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")等事件拦截。请注意，对于没有更改的对象，在刷新过程中不会发出任何SQL，即使通过此方法标记为脏。但是，[`SessionEvents.before_flush()`](events.html#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")处理程序将能够在[`Session.dirty`](#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty")集合中看到对象，并可能对其进行更改，然后将其包含在发出的SQL中。
- en: New in version 1.2.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.2中的新功能。
- en: See also
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`flag_modified()`](#sqlalchemy.orm.attributes.flag_modified "sqlalchemy.orm.attributes.flag_modified")'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: '[`flag_modified()`](#sqlalchemy.orm.attributes.flag_modified "sqlalchemy.orm.attributes.flag_modified")'
- en: '[PRE124]'
  id: totrans-813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Return the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    for a given mapped object.
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定映射对象的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")。
- en: This function is the internal version of [`object_state()`](#sqlalchemy.orm.util.object_state
    "sqlalchemy.orm.util.object_state"). The [`object_state()`](#sqlalchemy.orm.util.object_state
    "sqlalchemy.orm.util.object_state") and/or the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function is preferred here as they each emit an informative
    exception if the given object is not mapped.
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数是[`object_state()`](#sqlalchemy.orm.util.object_state "sqlalchemy.orm.util.object_state")的内部版本。在这里，建议使用[`object_state()`](#sqlalchemy.orm.util.object_state
    "sqlalchemy.orm.util.object_state")和/或[`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect")函数，因为它们会在给定对象未映射时分别发出信息性异常。
- en: '[PRE125]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Return True if the given attribute on the given instance is instrumented by
    the attributes package.
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定实例上的给定属性由属性包进行了仪器化，则返回True。
- en: This function may be used regardless of instrumentation applied directly to
    the class, i.e. no descriptors are required.
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 无论直接应用于类的仪器化如何，都可以使用此函数，即不需要描述符。
- en: '[PRE126]'
  id: totrans-819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Set the value of an attribute, firing history events.
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: 设置属性的值，触发历史事件。
- en: This function may be used regardless of instrumentation applied directly to
    the class, i.e. no descriptors are required. Custom attribute management schemes
    will need to make usage of this method to establish attribute state as understood
    by SQLAlchemy.
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 无论直接应用于类的仪器化如何，都可以使用此函数，即不需要描述符。自定义属性管理方案将需要使用此方法来建立SQLAlchemy理解的属性状态。
- en: 'Parameters:'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – the object that will be modified'
  id: totrans-823
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 将被修改的对象'
- en: '`key` – string name of the attribute'
  id: totrans-824
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` – 属性的字符串名称'
- en: '`value` – value to assign'
  id: totrans-825
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 要分配的值'
- en: '`initiator` –'
  id: totrans-826
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initiator` –'
- en: an instance of `Event` that would have been propagated from a previous event
    listener. This argument is used when the [`set_attribute()`](#sqlalchemy.orm.attributes.set_attribute
    "sqlalchemy.orm.attributes.set_attribute") function is being used within an existing
    event listening function where an `Event` object is being supplied; the object
    may be used to track the origin of the chain of events.
  id: totrans-827
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个`Event`的实例，可能已从先前的事件侦听器传播。当在现有事件侦听函数中使用[`set_attribute()`](#sqlalchemy.orm.attributes.set_attribute
    "sqlalchemy.orm.attributes.set_attribute")函数时，会使用此参数；该对象可用于跟踪事件链的起源。
- en: New in version 1.2.3.
  id: totrans-828
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本1.2.3中的新功能。
- en: '[PRE127]'
  id: totrans-829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Set the value of an attribute with no history events.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 设置没有历史事件的属性的值。
- en: Cancels any previous history present. The value should be a scalar value for
    scalar-holding attributes, or an iterable for any collection-holding attribute.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 取消任何先前存在的历史。对于持有标量属性的属性，值应为标量值，对于任何持有集合属性的属性，值应为可迭代对象。
- en: This is the same underlying method used when a lazy loader fires off and loads
    additional data from the database. In particular, this method can be used by application
    code which has loaded additional attributes or collections through separate queries,
    which can then be attached to an instance as though it were part of its original
    loaded state.
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 当惰性加载程序触发并从数据库加载附加数据时，使用的是相同的基础方法。特别是，此方法可被应用代码使用，通过单独的查询加载了额外的属性或集合，然后将其附加到实例，就好像它是其原始加载状态的一部分。
- en: '[PRE128]'
  id: totrans-833
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: A 3-tuple of added, unchanged and deleted values, representing the changes which
    have occurred on an instrumented attribute.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 一个由添加、未更改和删除值组成的3元组，表示在受监控属性上发生的更改。
- en: 'The easiest way to get a [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    object for a particular attribute on an object is to use the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function:'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 获取对象上特定属性的[`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")对象的最简单方法是使用[`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect")函数：
- en: '[PRE129]'
  id: totrans-836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Each tuple member is an iterable sequence:'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 每个元组成员都是一个可迭代序列：
- en: '`added` - the collection of items added to the attribute (the first tuple element).'
  id: totrans-838
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`added` - 添加到属性中的项目集合（第一个元组元素）。'
- en: '`unchanged` - the collection of items that have not changed on the attribute
    (the second tuple element).'
  id: totrans-839
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unchanged` - 未更改属性上的项目集合（第二个元组元素）。'
- en: '`deleted` - the collection of items that have been removed from the attribute
    (the third tuple element).'
  id: totrans-840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deleted` - 从属性中删除的项目集合（第三个元组元素）。'
- en: '**Members**'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[added](#sqlalchemy.orm.attributes.History.added), [deleted](#sqlalchemy.orm.attributes.History.deleted),
    [empty()](#sqlalchemy.orm.attributes.History.empty), [has_changes()](#sqlalchemy.orm.attributes.History.has_changes),
    [non_added()](#sqlalchemy.orm.attributes.History.non_added), [non_deleted()](#sqlalchemy.orm.attributes.History.non_deleted),
    [sum()](#sqlalchemy.orm.attributes.History.sum), [unchanged](#sqlalchemy.orm.attributes.History.unchanged)'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: '[added](#sqlalchemy.orm.attributes.History.added), [deleted](#sqlalchemy.orm.attributes.History.deleted),
    [empty()](#sqlalchemy.orm.attributes.History.empty), [has_changes()](#sqlalchemy.orm.attributes.History.has_changes),
    [non_added()](#sqlalchemy.orm.attributes.History.non_added), [non_deleted()](#sqlalchemy.orm.attributes.History.non_deleted),
    [sum()](#sqlalchemy.orm.attributes.History.sum), [unchanged](#sqlalchemy.orm.attributes.History.unchanged)'
- en: '**Class signature**'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.orm.History` (`builtins.tuple`)
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 类`sqlalchemy.orm.History`（`builtins.tuple`）
- en: '[PRE130]'
  id: totrans-845
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: Alias for field number 0
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 字段0的别名
- en: '[PRE131]'
  id: totrans-847
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Alias for field number 2
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 字段2的别名
- en: '[PRE132]'
  id: totrans-849
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: Return True if this [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    has no changes and no existing, unchanged state.
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")没有更改和现有的未更改状态，则返回True。
- en: '[PRE133]'
  id: totrans-851
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Return True if this [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    has changes.
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")有更改，则返回True。
- en: '[PRE134]'
  id: totrans-853
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: Return a collection of unchanged + deleted.
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个未更改+删除的集合。
- en: '[PRE135]'
  id: totrans-855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Return a collection of added + unchanged.
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个添加+未更改的集合。
- en: '[PRE136]'
  id: totrans-857
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: Return a collection of added + unchanged + deleted.
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个添加+未更改+删除的集合。
- en: '[PRE137]'
  id: totrans-859
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: Alias for field number 1
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 字段1的别名
- en: Session and sessionmaker()
  id: totrans-861
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Session和sessionmaker()
- en: '| Object Name | Description |'
  id: totrans-862
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-863
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [ORMExecuteState](#sqlalchemy.orm.ORMExecuteState) | Represents a call to
    the [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    method, as passed to the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook. |'
  id: totrans-864
  prefs: []
  type: TYPE_TB
  zh: '| [ORMExecuteState](#sqlalchemy.orm.ORMExecuteState) | 表示对[`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法的调用，作为传递给[`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件钩子。 |'
- en: '| [Session](#sqlalchemy.orm.Session) | Manages persistence operations for ORM-mapped
    objects. |'
  id: totrans-865
  prefs: []
  type: TYPE_TB
  zh: '| [Session](#sqlalchemy.orm.Session) | 管理ORM映射对象的持久性操作。 |'
- en: '| [sessionmaker](#sqlalchemy.orm.sessionmaker) | A configurable [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") factory. |'
  id: totrans-866
  prefs: []
  type: TYPE_TB
  zh: '| [sessionmaker](#sqlalchemy.orm.sessionmaker) | 一个可配置的[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")工厂。 |'
- en: '| [SessionTransaction](#sqlalchemy.orm.SessionTransaction) | A [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")-level transaction. |'
  id: totrans-867
  prefs: []
  type: TYPE_TB
  zh: '| [SessionTransaction](#sqlalchemy.orm.SessionTransaction) | 一个[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")级事务。 |'
- en: '| [SessionTransactionOrigin](#sqlalchemy.orm.SessionTransactionOrigin) | indicates
    the origin of a [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction").
    |'
  id: totrans-868
  prefs: []
  type: TYPE_TB
  zh: '| [SessionTransactionOrigin](#sqlalchemy.orm.SessionTransactionOrigin) | 表示[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")的来源。 |'
- en: '[PRE138]'
  id: totrans-869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: A configurable [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    factory.
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 可配置的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")工厂。
- en: The [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    factory generates new [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects when called, creating them given the configurational arguments established
    here.
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用[`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")工厂时，会根据此处设定的配置参数生成新的[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象。
- en: 'e.g.:'
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE139]'
  id: totrans-873
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'Context manager use is optional; otherwise, the returned [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object may be closed explicitly via the [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method. Using a `try:/finally:` block is optional,
    however will ensure that the close takes place even if there are database errors:'
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文管理器的使用是可选的；否则，返回的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象可以通过[`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")方法显式关闭。使用`try:/finally:`块是可选的，但是会确保即使出现数据库错误也会执行关闭操作：
- en: '[PRE140]'
  id: totrans-875
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    acts as a factory for [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects in the same way as an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") acts as a factory for [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects. In this way it also includes a [`sessionmaker.begin()`](#sqlalchemy.orm.sessionmaker.begin
    "sqlalchemy.orm.sessionmaker.begin") method, that provides a context manager which
    both begins and commits a transaction, as well as closes out the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") when complete, rolling back the transaction if any errors
    occur:'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")的作用类似于[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象的工厂。通过这种方式，它还包括一个[`sessionmaker.begin()`](#sqlalchemy.orm.sessionmaker.begin
    "sqlalchemy.orm.sessionmaker.begin")方法，提供一个上下文管理器，既开始又提交事务，并在完成时关闭[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，如果发生任何错误则回滚事务：'
- en: '[PRE141]'
  id: totrans-877
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: New in version 1.4.
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4版本中新增。
- en: 'When calling upon [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    to construct a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    keyword arguments may also be passed to the method; these arguments will override
    that of the globally configured parameters. Below we use a [`sessionmaker`](#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") bound to a certain [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") to produce a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    that is instead bound to a specific [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") procured from that engine:'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用[`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")构造[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时，也可以传递关键字参数给该方法；这些参数将覆盖全局配置的参数。下面我们使用一个绑定到特定[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的[`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")来生成一个与该引擎提供的特定[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")绑定的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")：
- en: '[PRE142]'
  id: totrans-880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'The class also includes a method [`sessionmaker.configure()`](#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure"), which can be used to specify additional
    keyword arguments to the factory, which will take effect for subsequent [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects generated. This is usually used to associate
    one or more [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    objects with an existing [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    factory before it is first used:'
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 该类还包括一个[`sessionmaker.configure()`](#sqlalchemy.orm.sessionmaker.configure "sqlalchemy.orm.sessionmaker.configure")
    方法，该方法可用于指定工厂的额外关键字参数，这些参数将对后续生成的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象生效。通常用于在首次使用之前将一个或多个[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") 对象与现有的[`sessionmaker`](#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") 工厂关联起来：
- en: '[PRE143]'
  id: totrans-882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: See also
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Opening and Closing a Session](session_basics.html#session-getting) - introductory
    text on creating sessions using [`sessionmaker`](#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").'
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: '[打开和关闭会话](session_basics.html#session-getting) - 使用[`sessionmaker`](#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") 创建会话的简介文本。'
- en: '**Members**'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__call__()](#sqlalchemy.orm.sessionmaker.__call__), [__init__()](#sqlalchemy.orm.sessionmaker.__init__),
    [begin()](#sqlalchemy.orm.sessionmaker.begin), [close_all()](#sqlalchemy.orm.sessionmaker.close_all),
    [configure()](#sqlalchemy.orm.sessionmaker.configure), [identity_key()](#sqlalchemy.orm.sessionmaker.identity_key),
    [object_session()](#sqlalchemy.orm.sessionmaker.object_session)'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: '[__call__()](#sqlalchemy.orm.sessionmaker.__call__), [__init__()](#sqlalchemy.orm.sessionmaker.__init__),
    [begin()](#sqlalchemy.orm.sessionmaker.begin), [close_all()](#sqlalchemy.orm.sessionmaker.close_all),
    [configure()](#sqlalchemy.orm.sessionmaker.configure), [identity_key()](#sqlalchemy.orm.sessionmaker.identity_key),
    [object_session()](#sqlalchemy.orm.sessionmaker.object_session)'
- en: '**Class signature**'
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    (`sqlalchemy.orm.session._SessionClassMethods`, `typing.Generic`)
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    (`sqlalchemy.orm.session._SessionClassMethods`, `typing.Generic`)
- en: '[PRE144]'
  id: totrans-889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: Produce a new [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object using the configuration established in this [`sessionmaker`](#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker").
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此[`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    中建立的配置生成新的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 对象。
- en: 'In Python, the `__call__` method is invoked on an object when it is “called”
    in the same way as a function:'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，当对象“调用”方式与函数相同时，将调用对象上的`__call__`方法：
- en: '[PRE145]'
  id: totrans-892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: Construct a new [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker").
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")。
- en: All arguments here except for `class_` correspond to arguments accepted by [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") directly. See the [`Session.__init__()`](#sqlalchemy.orm.Session.__init__
    "sqlalchemy.orm.Session.__init__") docstring for more details on parameters.
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的所有参数，除了`class_`，都对应于直接由[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    接受的参数。有关参数的更多详细信息，请参阅[`Session.__init__()`](#sqlalchemy.orm.Session.__init__ "sqlalchemy.orm.Session.__init__")
    文档字符串。
- en: 'Parameters:'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind` – a [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or other `Connectable` with which newly created [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects will be associated.'
  id: totrans-897
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 与新创建的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象关联的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    或其他 `Connectable`。'
- en: '`class_` – class to use in order to create new [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects. Defaults to [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-898
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_` – 用于创建新的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象的类。默认为[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '`autoflush` –'
  id: totrans-899
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoflush` –'
- en: The autoflush setting to use with newly created [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  id: totrans-900
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与新创建的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 对象一起使用的自动刷新设置。
- en: See also
  id: totrans-901
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Flushing](session_basics.html#session-flushing) - additional background on
    autoflush'
  id: totrans-902
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[刷新](session_basics.html#session-flushing) - 关于自动刷新的额外背景信息'
- en: '`expire_on_commit=True` – the [`Session.expire_on_commit`](#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") setting to use with newly created [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.'
  id: totrans-903
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expire_on_commit=True` – 与新创建的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象一起使用的[`Session.expire_on_commit`](#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session") 设置。'
- en: '`info` – optional dictionary of information that will be available via [`Session.info`](#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info"). Note this dictionary is *updated*, not replaced,
    when the `info` parameter is specified to the specific [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") construction operation.'
  id: totrans-904
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选字典，可以通过[`Session.info`](#sqlalchemy.orm.Session.info "sqlalchemy.orm.Session.info")访问。请注意，当`info`参数被指定给特定的[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")构造操作时，此字典会被*更新*而不是被替换。'
- en: '`**kw` – all other keyword arguments are passed to the constructor of newly
    created [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") objects.'
  id: totrans-905
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**kw` – 所有其他关键字参数都将传递给新创建的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的构造函数。'
- en: '[PRE147]'
  id: totrans-906
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: Produce a context manager that both provides a new [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") as well as a transaction that commits.
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个上下文管理器，既提供一个新的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")又提供一个提交的事务。
- en: 'e.g.:'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE148]'
  id: totrans-909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: New in version 1.4.
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起新增。
- en: '[PRE149]'
  id: totrans-911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.close_all`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.orm.session._SessionClassMethods.close_all` *方法的* `sqlalchemy.orm.session._SessionClassMethods`'
- en: Close *all* sessions in memory.
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭*所有*内存中的会话。
- en: 'Deprecated since version 1.3: The [`Session.close_all()`](#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all") method is deprecated and will be removed in
    a future release. Please refer to `close_all_sessions()`.'
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.3起弃用：[`Session.close_all()`](#sqlalchemy.orm.Session.close_all "sqlalchemy.orm.Session.close_all")方法已弃用，将在将来的版本中删除。请参考`close_all_sessions()`。
- en: '[PRE150]'
  id: totrans-915
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: (Re)configure the arguments for this sessionmaker.
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: (重新)配置此sessionmaker的参数。
- en: 'e.g.:'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE151]'
  id: totrans-918
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-919
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.identity_key`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.orm.session._SessionClassMethods.identity_key` *方法的* `sqlalchemy.orm.session._SessionClassMethods`'
- en: Return an identity key.
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个标识键。
- en: This is an alias of [`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key "sqlalchemy.orm.util.identity_key")的别名。
- en: '[PRE153]'
  id: totrans-923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.object_session`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.orm.session._SessionClassMethods.object_session` *方法的* `sqlalchemy.orm.session._SessionClassMethods`'
- en: Return the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") to
    which an object belongs.
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 返回对象所属的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: This is an alias of [`object_session()`](#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session").
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`object_session()`](#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session")的别名。
- en: '[PRE154]'
  id: totrans-927
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: Represents a call to the [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method, as passed to the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event hook.
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
  zh: 表示对[`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")方法的调用，如传递给[`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件挂钩。
- en: New in version 1.4.
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 自版本1.4起新增。
- en: See also
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Execute Events](session_events.html#session-execute-events) - top level documentation
    on how to use [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: '[执行事件](session_events.html#session-execute-events) - 如何使用[`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")的顶级文档'
- en: '**Members**'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.orm.ORMExecuteState.__init__), [all_mappers](#sqlalchemy.orm.ORMExecuteState.all_mappers),
    [bind_arguments](#sqlalchemy.orm.ORMExecuteState.bind_arguments), [bind_mapper](#sqlalchemy.orm.ORMExecuteState.bind_mapper),
    [execution_options](#sqlalchemy.orm.ORMExecuteState.execution_options), [invoke_statement()](#sqlalchemy.orm.ORMExecuteState.invoke_statement),
    [is_column_load](#sqlalchemy.orm.ORMExecuteState.is_column_load), [is_delete](#sqlalchemy.orm.ORMExecuteState.is_delete),
    [is_executemany](#sqlalchemy.orm.ORMExecuteState.is_executemany), [is_from_statement](#sqlalchemy.orm.ORMExecuteState.is_from_statement),
    [is_insert](#sqlalchemy.orm.ORMExecuteState.is_insert), [is_orm_statement](#sqlalchemy.orm.ORMExecuteState.is_orm_statement),
    [is_relationship_load](#sqlalchemy.orm.ORMExecuteState.is_relationship_load),
    [is_select](#sqlalchemy.orm.ORMExecuteState.is_select), [is_update](#sqlalchemy.orm.ORMExecuteState.is_update),
    [lazy_loaded_from](#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from), [load_options](#sqlalchemy.orm.ORMExecuteState.load_options),
    [loader_strategy_path](#sqlalchemy.orm.ORMExecuteState.loader_strategy_path),
    [local_execution_options](#sqlalchemy.orm.ORMExecuteState.local_execution_options),
    [parameters](#sqlalchemy.orm.ORMExecuteState.parameters), [session](#sqlalchemy.orm.ORMExecuteState.session),
    [statement](#sqlalchemy.orm.ORMExecuteState.statement), [update_delete_options](#sqlalchemy.orm.ORMExecuteState.update_delete_options),
    [update_execution_options()](#sqlalchemy.orm.ORMExecuteState.update_execution_options),
    [user_defined_options](#sqlalchemy.orm.ORMExecuteState.user_defined_options)'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.orm.ORMExecuteState.__init__), [all_mappers](#sqlalchemy.orm.ORMExecuteState.all_mappers),
    [bind_arguments](#sqlalchemy.orm.ORMExecuteState.bind_arguments), [bind_mapper](#sqlalchemy.orm.ORMExecuteState.bind_mapper),
    [execution_options](#sqlalchemy.orm.ORMExecuteState.execution_options), [invoke_statement()](#sqlalchemy.orm.ORMExecuteState.invoke_statement),
    [is_column_load](#sqlalchemy.orm.ORMExecuteState.is_column_load), [is_delete](#sqlalchemy.orm.ORMExecuteState.is_delete),
    [is_executemany](#sqlalchemy.orm.ORMExecuteState.is_executemany), [is_from_statement](#sqlalchemy.orm.ORMExecuteState.is_from_statement),
    [is_insert](#sqlalchemy.orm.ORMExecuteState.is_insert), [is_orm_statement](#sqlalchemy.orm.ORMExecuteState.is_orm_statement),
    [is_relationship_load](#sqlalchemy.orm.ORMExecuteState.is_relationship_load),
    [is_select](#sqlalchemy.orm.ORMExecuteState.is_select), [is_update](#sqlalchemy.orm.ORMExecuteState.is_update),
    [lazy_loaded_from](#sqlalchemy.orm.ORMExecuteState.lazy_loaded_from), [load_options](#sqlalchemy.orm.ORMExecuteState.load_options),
    [loader_strategy_path](#sqlalchemy.orm.ORMExecuteState.loader_strategy_path),
    [local_execution_options](#sqlalchemy.orm.ORMExecuteState.local_execution_options),
    [parameters](#sqlalchemy.orm.ORMExecuteState.parameters), [session](#sqlalchemy.orm.ORMExecuteState.session),
    [statement](#sqlalchemy.orm.ORMExecuteState.statement), [update_delete_options](#sqlalchemy.orm.ORMExecuteState.update_delete_options),
    [update_execution_options()](#sqlalchemy.orm.ORMExecuteState.update_execution_options),
    [user_defined_options](#sqlalchemy.orm.ORMExecuteState.user_defined_options)'
- en: '**Class signature**'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    (`sqlalchemy.util.langhelpers.MemoizedSlots`)
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    (`sqlalchemy.util.langhelpers.MemoizedSlots`)
- en: '[PRE155]'
  id: totrans-936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: Construct a new [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState").
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")。
- en: this object is constructed internally.
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象在内部构造。
- en: '[PRE156]'
  id: totrans-939
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: Return a sequence of all [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects that are involved at the top level of this statement.
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含此语句顶层涉及的所有[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象的序列。
- en: By “top level” we mean those [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects that would be represented in the result set rows
    for a [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    query, or for a [`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") or [`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") query, the mapper that is the main subject
    of the UPDATE or DELETE.
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 所谓“顶层”是指那些在[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")查询的结果集行中表示的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象，或者对于[`update()`](../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")或[`delete()`](../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")查询，即 UPDATE 或 DELETE 的主要主题的映射器。
- en: New in version 1.4.0b2.
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.0b2 中的新内容。
- en: See also
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ORMExecuteState.bind_mapper`](#sqlalchemy.orm.ORMExecuteState.bind_mapper
    "sqlalchemy.orm.ORMExecuteState.bind_mapper")'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ORMExecuteState.bind_mapper`](#sqlalchemy.orm.ORMExecuteState.bind_mapper
    "sqlalchemy.orm.ORMExecuteState.bind_mapper")'
- en: '[PRE157]'
  id: totrans-945
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: The dictionary passed as the [`Session.execute.bind_arguments`](#sqlalchemy.orm.Session.execute.params.bind_arguments
    "sqlalchemy.orm.Session.execute") dictionary.
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: 作为[`Session.execute.bind_arguments`](#sqlalchemy.orm.Session.execute.params.bind_arguments
    "sqlalchemy.orm.Session.execute")字典传递的字典。
- en: This dictionary may be used by extensions to [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to pass arguments that will assist in determining amongst
    a set of database connections which one should be used to invoke this statement.
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: 此字典可供[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的扩展使用，以传递将帮助确定在一组数据库连接中应使用哪一个来调用此语句的参数。
- en: '[PRE158]'
  id: totrans-948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Return the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    that is the primary “bind” mapper.
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: 返回主要的“bind”映射器[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。
- en: For an [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")
    object invoking an ORM statement, that is, the [`ORMExecuteState.is_orm_statement`](#sqlalchemy.orm.ORMExecuteState.is_orm_statement
    "sqlalchemy.orm.ORMExecuteState.is_orm_statement") attribute is `True`, this attribute
    will return the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    that is considered to be the “primary” mapper of the statement. The term “bind
    mapper” refers to the fact that a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object may be “bound” to multiple [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects keyed to mapped classes, and the “bind mapper”
    determines which of those [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects would be selected.
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 对于调用ORM语句的[`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")对象，即[`ORMExecuteState.is_orm_statement`](#sqlalchemy.orm.ORMExecuteState.is_orm_statement
    "sqlalchemy.orm.ORMExecuteState.is_orm_statement")属性为`True`，此属性将返回被认为是语句的“主要”映射器的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")。术语“bind mapper”指的是[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象可能被“绑定”到多个映射类键到映射类的多个[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象，并且“bind mapper”确定哪些[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象将被选择。
- en: For a statement that is invoked against a single mapped class, [`ORMExecuteState.bind_mapper`](#sqlalchemy.orm.ORMExecuteState.bind_mapper
    "sqlalchemy.orm.ORMExecuteState.bind_mapper") is intended to be a reliable way
    of getting this mapper.
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 对于针对单个映射类调用的语句，[`ORMExecuteState.bind_mapper`](#sqlalchemy.orm.ORMExecuteState.bind_mapper
    "sqlalchemy.orm.ORMExecuteState.bind_mapper") 旨在是一种可靠的方式来获取此映射器。
- en: New in version 1.4.0b2.
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.4.0b2中的新功能。
- en: See also
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ORMExecuteState.all_mappers`](#sqlalchemy.orm.ORMExecuteState.all_mappers
    "sqlalchemy.orm.ORMExecuteState.all_mappers")'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ORMExecuteState.all_mappers`](#sqlalchemy.orm.ORMExecuteState.all_mappers
    "sqlalchemy.orm.ORMExecuteState.all_mappers")'
- en: '[PRE159]'
  id: totrans-955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: The complete dictionary of current execution options.
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: 当前执行选项的完整字典。
- en: This is a merge of the statement level options with the locally passed execution
    options.
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 这是语句级选项与本地传递的执行选项的合并。
- en: See also
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ORMExecuteState.local_execution_options`](#sqlalchemy.orm.ORMExecuteState.local_execution_options
    "sqlalchemy.orm.ORMExecuteState.local_execution_options")'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ORMExecuteState.local_execution_options`](#sqlalchemy.orm.ORMExecuteState.local_execution_options
    "sqlalchemy.orm.ORMExecuteState.local_execution_options")'
- en: '[`Executable.execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Executable.execution_options()`](../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")'
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)'
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 执行选项](queryguide/api.html#orm-queryguide-execution-options)'
- en: '[PRE160]'
  id: totrans-962
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Execute the statement represented by this [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState"), without re-invoking events that have already
    proceeded.
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
  zh: 执行由此[`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")表示的语句，而不重新调用已经进行的事件。
- en: This method essentially performs a re-entrant execution of the current statement
    for which the [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event is being currently invoked.
    The use case for this is for event handlers that want to override how the ultimate
    [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object is returned, such as for schemes that retrieve results from an offline
    cache or which concatenate results from multiple executions.
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法实质上执行当前语句的可重入执行，当前正在调用[`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件。这样做的用例是为了事件处理程序想要覆盖最终[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象返回方式，比如从离线缓存中检索结果或者从多次执行中连接结果的方案。
- en: When the [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object is returned by the actual handler function within [`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") and is propagated to the calling
    [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    method, the remainder of the [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method is preempted and the [`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object is returned to the caller of [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") immediately.
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: 当实际处理程序函数在[`SessionEvents.do_orm_execute()`](events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")中返回[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象，并传播到调用的[`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法时，[`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法的其余部分被抢占，[`Result`](../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象立即返回给[`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")的调用者。
- en: 'Parameters:'
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`statement` – optional statement to be invoked, in place of the statement currently
    represented by [`ORMExecuteState.statement`](#sqlalchemy.orm.ORMExecuteState.statement
    "sqlalchemy.orm.ORMExecuteState.statement").'
  id: totrans-967
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` – 可选的要调用的语句，代替当前由[`ORMExecuteState.statement`](#sqlalchemy.orm.ORMExecuteState.statement
    "sqlalchemy.orm.ORMExecuteState.statement")表示的语句。'
- en: '`params` –'
  id: totrans-968
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params` –'
- en: optional dictionary of parameters or list of parameters which will be merged
    into the existing [`ORMExecuteState.parameters`](#sqlalchemy.orm.ORMExecuteState.parameters
    "sqlalchemy.orm.ORMExecuteState.parameters") of this [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState").
  id: totrans-969
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的参数字典或参数列表，将合并到此[`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState "sqlalchemy.orm.ORMExecuteState")的现有[`ORMExecuteState.parameters`](#sqlalchemy.orm.ORMExecuteState.parameters
    "sqlalchemy.orm.ORMExecuteState.parameters")中。
- en: 'Changed in version 2.0: a list of parameter dictionaries is accepted for executemany
    executions.'
  id: totrans-970
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本2.0开始更改：接受参数字典列表进行executemany执行。
- en: '`execution_options` – optional dictionary of execution options will be merged
    into the existing [`ORMExecuteState.execution_options`](#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options") of this [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState").'
  id: totrans-971
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` – 可选的执行选项字典将合并到此[`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState")的现有[`ORMExecuteState.execution_options`](#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options")中。'
- en: '`bind_arguments` – optional dictionary of bind_arguments which will be merged
    amongst the current [`ORMExecuteState.bind_arguments`](#sqlalchemy.orm.ORMExecuteState.bind_arguments
    "sqlalchemy.orm.ORMExecuteState.bind_arguments") of this [`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState").'
  id: totrans-972
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind_arguments` – 可选的绑定参数字典，将在此[`ORMExecuteState`](#sqlalchemy.orm.ORMExecuteState
    "sqlalchemy.orm.ORMExecuteState")的当前[`ORMExecuteState.bind_arguments`](#sqlalchemy.orm.ORMExecuteState.bind_arguments
    "sqlalchemy.orm.ORMExecuteState.bind_arguments")中合并。'
- en: 'Returns:'
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: 返回值：
- en: a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object with ORM-level results.
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
  zh: 一个带有ORM级别结果的[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象。
- en: See also
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Re-Executing Statements](session_events.html#do-orm-execute-re-executing)
    - background and examples on the appropriate usage of [`ORMExecuteState.invoke_statement()`](#sqlalchemy.orm.ORMExecuteState.invoke_statement
    "sqlalchemy.orm.ORMExecuteState.invoke_statement").'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: '[重新执行语句](session_events.html#do-orm-execute-re-executing) - 关于适当使用 [`ORMExecuteState.invoke_statement()`](#sqlalchemy.orm.ORMExecuteState.invoke_statement
    "sqlalchemy.orm.ORMExecuteState.invoke_statement") 的背景和示例。'
- en: '[PRE161]'
  id: totrans-977
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: Return True if the operation is refreshing column-oriented attributes on an
    existing ORM object.
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作是刷新现有 ORM 对象上的面向列的属性，则返回 True。
- en: This occurs during operations such as [`Session.refresh()`](#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh"), as well as when an attribute deferred by [`defer()`](queryguide/columns.html#sqlalchemy.orm.defer
    "sqlalchemy.orm.defer") is being loaded, or an attribute that was expired either
    directly by [`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")
    or via a commit operation is being loaded.
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: 在诸如 [`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    之类的操作期间发生，以及在加载由 [`defer()`](queryguide/columns.html#sqlalchemy.orm.defer "sqlalchemy.orm.defer")
    推迟的属性时，或者正在加载已由 [`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")
    直接或通过提交操作过期的属性时。
- en: Handlers will very likely not want to add any options to queries when such an
    operation is occurring as the query should be a straight primary key fetch which
    should not have any additional WHERE criteria, and loader options travelling with
    the instance will have already been added to the query.
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生此类操作时，处理程序很可能不希望向查询添加任何选项，因为查询应该是一个直接的主键获取，不应该有任何额外的 WHERE 条件，并且随实例传递的加载器选项已经添加到查询中。
- en: New in version 1.4.0b2.
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.0b2 中新增。
- en: See also
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ORMExecuteState.is_relationship_load`](#sqlalchemy.orm.ORMExecuteState.is_relationship_load
    "sqlalchemy.orm.ORMExecuteState.is_relationship_load")'
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ORMExecuteState.is_relationship_load`](#sqlalchemy.orm.ORMExecuteState.is_relationship_load
    "sqlalchemy.orm.ORMExecuteState.is_relationship_load")'
- en: '[PRE162]'
  id: totrans-984
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: return True if this is a DELETE operation.
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是一个 DELETE 操作，则返回 True。
- en: 'Changed in version 2.0.30: - the attribute is also True for a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") construct that is itself against
    a [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete "sqlalchemy.sql.expression.Delete")
    construct, such as `select(Entity).from_statement(delete(..))`'
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 2.0.30 中更改：- 该属性对于自身针对 [`Delete`](../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") 构造的 [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") 构造也为 True，例如 `select(Entity).from_statement(delete(..))`
- en: '[PRE163]'
  id: totrans-987
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: return True if the parameters are a multi-element list of dictionaries with
    more than one dictionary.
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: 如果参数是一个多元素字典列表，并且有多个字典，则返回 True。
- en: New in version 2.0.
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: '[PRE164]'
  id: totrans-990
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: return True if this operation is a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") operation.
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: ��果这是一个 [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") 操作，则返回 True。
- en: This is independent from [`ORMExecuteState.is_select`](#sqlalchemy.orm.ORMExecuteState.is_select
    "sqlalchemy.orm.ORMExecuteState.is_select"), as a `select().from_statement()`
    construct can be used with INSERT/UPDATE/DELETE RETURNING types of statements
    as well. [`ORMExecuteState.is_select`](#sqlalchemy.orm.ORMExecuteState.is_select
    "sqlalchemy.orm.ORMExecuteState.is_select") will only be set if the [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") is itself against a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") construct.
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
  zh: 这与 [`ORMExecuteState.is_select`](#sqlalchemy.orm.ORMExecuteState.is_select "sqlalchemy.orm.ORMExecuteState.is_select")
    独立，因为 `select().from_statement()` 构造也可以与 INSERT/UPDATE/DELETE RETURNING 类型的语句一起使用。只有在
    [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") 本身针对 [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造时，才会设置 [`ORMExecuteState.is_select`](#sqlalchemy.orm.ORMExecuteState.is_select
    "sqlalchemy.orm.ORMExecuteState.is_select")。
- en: New in version 2.0.30.
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.30 中新增。
- en: '[PRE165]'
  id: totrans-994
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: return True if this is an INSERT operation.
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是一个 INSERT 操作，则返回 True。
- en: 'Changed in version 2.0.30: - the attribute is also True for a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") construct that is itself against
    a [`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert "sqlalchemy.sql.expression.Insert")
    construct, such as `select(Entity).from_statement(insert(..))`'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本2.0.30中更改：- 对于[`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement")构造本身针对[`Insert`](../core/dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert")构造，例如`select(Entity).from_statement(insert(..))`，该属性也为True
- en: '[PRE166]'
  id: totrans-997
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: return True if the operation is an ORM statement.
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作是ORM语句，则返回True。
- en: This indicates that the select(), insert(), update(), or delete() being invoked
    contains ORM entities as subjects. For a statement that does not have ORM entities
    and instead refers only to [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") metadata, it is invoked as a Core SQL statement and
    no ORM-level automation takes place.
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明调用select()、insert()、update()或delete()包含ORM实体作为主题。对于不包含ORM实体而仅引用[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")元数据的语句，它被调用为核心SQL语句，并且不会发生ORM级别的自动化。
- en: '[PRE167]'
  id: totrans-1000
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: Return True if this load is loading objects on behalf of a relationship.
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此加载正在代表关系加载对象，则返回 True。
- en: This means, the loader in effect is either a LazyLoader, SelectInLoader, SubqueryLoader,
    or similar, and the entire SELECT statement being emitted is on behalf of a relationship
    load.
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，实际上加载程序是一个LazyLoader、SelectInLoader、SubqueryLoader或类似的加载程序，并且整个SELECT语句是代表一个关系加载发出的。
- en: Handlers will very likely not want to add any options to queries when such an
    operation is occurring, as loader options are already capable of being propagated
    to relationship loaders and should be already present.
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生此类操作时，处理程序很可能不希望向查询添加任何选项，因为加载程序选项已经能够传播到关系加载程序并且应该已经存在。
- en: See also
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ORMExecuteState.is_column_load`](#sqlalchemy.orm.ORMExecuteState.is_column_load
    "sqlalchemy.orm.ORMExecuteState.is_column_load")'
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ORMExecuteState.is_column_load`](#sqlalchemy.orm.ORMExecuteState.is_column_load
    "sqlalchemy.orm.ORMExecuteState.is_column_load")'
- en: '[PRE168]'
  id: totrans-1006
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: return True if this is a SELECT operation.
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是一个选择操作，则返回 True。
- en: 'Changed in version 2.0.30: - the attribute is also True for a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") construct that is itself against
    a [`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct, such as `select(Entity).from_statement(select(..))`'
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本2.0.30中更改：- 对于[`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement")构造本身针对[`Select`](../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造，例如`select(Entity).from_statement(select(..))`，该属性也为True
- en: '[PRE169]'
  id: totrans-1009
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: return True if this is an UPDATE operation.
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是一个更新操作，则返回 True。
- en: 'Changed in version 2.0.30: - the attribute is also True for a [`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement") construct that is itself against
    a [`Update`](../core/dml.html#sqlalchemy.sql.expression.Update "sqlalchemy.sql.expression.Update")
    construct, such as `select(Entity).from_statement(update(..))`'
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本2.0.30中更改：- 对于[`Select.from_statement()`](../core/selectable.html#sqlalchemy.sql.expression.Select.from_statement
    "sqlalchemy.sql.expression.Select.from_statement")构造本身针对[`Update`](../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")构造，例如`select(Entity).from_statement(update(..))`，该属性也为True
- en: '[PRE170]'
  id: totrans-1012
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: An [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    that is using this statement execution for a lazy load operation.
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此语句执行进行惰性加载操作的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。
- en: The primary rationale for this attribute is to support the horizontal sharding
    extension, where it is available within specific query execution time hooks created
    by this extension. To that end, the attribute is only intended to be meaningful
    at **query execution time**, and importantly not any time prior to that, including
    query compilation time.
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性的主要原因是支持水平分片扩展，该扩展在此扩展创建的特定查询执行时间挂钩中可用。为此，该属性仅打算在**查询执行时间**有意义，并且重要的是不包括任何之前的时间，包括查询编译时间。
- en: '[PRE171]'
  id: totrans-1015
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: Return the load_options that will be used for this execution.
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
  zh: 返回将用于此执行的load_options。
- en: '[PRE172]'
  id: totrans-1017
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: Return the `PathRegistry` for the current load path.
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前加载路径的`PathRegistry`。
- en: This object represents the “path” in a query along relationships when a particular
    object or collection is being loaded.
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象表示在查询中沿着关系的“路径”时，加载特定对象或集合的情况。
- en: '[PRE173]'
  id: totrans-1020
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: Dictionary view of the execution options passed to the [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method.
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给[`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")方法的执行选项的字典视图。
- en: This does not include options that may be associated with the statement being
    invoked.
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: 此处不包括与所调用语句相关的选项。
- en: See also
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`ORMExecuteState.execution_options`](#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options")'
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ORMExecuteState.execution_options`](#sqlalchemy.orm.ORMExecuteState.execution_options
    "sqlalchemy.orm.ORMExecuteState.execution_options")'
- en: '[PRE174]'
  id: totrans-1025
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: Dictionary of parameters that was passed to [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute").
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
  zh: 传递给[`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")的参数字典。
- en: '[PRE175]'
  id: totrans-1027
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") in use.
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 正在使用的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: '[PRE176]'
  id: totrans-1029
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: The SQL statement being invoked.
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: 所调用的SQL语句。
- en: For an ORM selection as would be retrieved from [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query"), this is an instance of [`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") that was generated from the ORM query.
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: 对于从[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")检索的ORM选择，这是从ORM查询生成的[`select`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")的一个实例。
- en: '[PRE177]'
  id: totrans-1032
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: Return the update_delete_options that will be used for this execution.
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: 返回将用于此执行的update_delete_options。
- en: '[PRE178]'
  id: totrans-1034
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: Update the local execution options with new values.
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新值更新本地执行选项。
- en: '[PRE179]'
  id: totrans-1036
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: The sequence of `UserDefinedOptions` that have been associated with the statement
    being invoked.
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 已与所调用语句相关联的`UserDefinedOptions`序列。
- en: '[PRE180]'
  id: totrans-1038
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: Manages persistence operations for ORM-mapped objects.
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: 管理ORM映射对象的持久性操作。
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") is **not safe
    for use in concurrent threads.**. See [Is the Session thread-safe? Is AsyncSession
    safe to share in concurrent tasks?](session_basics.html#session-faq-threadsafe)
    for background.
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")**不适合在并发线程中使用**。请参阅[Session线程安全吗？AsyncSession在并发任务中安全共享吗？](session_basics.html#session-faq-threadsafe)了解背景信息。'
- en: The Session’s usage paradigm is described at [Using the Session](session.html).
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Session的使用范例，请参阅[使用Session](session.html)。
- en: '**Members**'
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.orm.Session.__init__), [add()](#sqlalchemy.orm.Session.add),
    [add_all()](#sqlalchemy.orm.Session.add_all), [begin()](#sqlalchemy.orm.Session.begin),
    [begin_nested()](#sqlalchemy.orm.Session.begin_nested), [bind_mapper()](#sqlalchemy.orm.Session.bind_mapper),
    [bind_table()](#sqlalchemy.orm.Session.bind_table), [bulk_insert_mappings()](#sqlalchemy.orm.Session.bulk_insert_mappings),
    [bulk_save_objects()](#sqlalchemy.orm.Session.bulk_save_objects), [bulk_update_mappings()](#sqlalchemy.orm.Session.bulk_update_mappings),
    [close()](#sqlalchemy.orm.Session.close), [close_all()](#sqlalchemy.orm.Session.close_all),
    [commit()](#sqlalchemy.orm.Session.commit), [connection()](#sqlalchemy.orm.Session.connection),
    [delete()](#sqlalchemy.orm.Session.delete), [deleted](#sqlalchemy.orm.Session.deleted),
    [dirty](#sqlalchemy.orm.Session.dirty), [enable_relationship_loading()](#sqlalchemy.orm.Session.enable_relationship_loading),
    [execute()](#sqlalchemy.orm.Session.execute), [expire()](#sqlalchemy.orm.Session.expire),
    [expire_all()](#sqlalchemy.orm.Session.expire_all), [expunge()](#sqlalchemy.orm.Session.expunge),
    [expunge_all()](#sqlalchemy.orm.Session.expunge_all), [flush()](#sqlalchemy.orm.Session.flush),
    [get()](#sqlalchemy.orm.Session.get), [get_bind()](#sqlalchemy.orm.Session.get_bind),
    [get_nested_transaction()](#sqlalchemy.orm.Session.get_nested_transaction), [get_one()](#sqlalchemy.orm.Session.get_one),
    [get_transaction()](#sqlalchemy.orm.Session.get_transaction), [identity_key()](#sqlalchemy.orm.Session.identity_key),
    [identity_map](#sqlalchemy.orm.Session.identity_map), [in_nested_transaction()](#sqlalchemy.orm.Session.in_nested_transaction),
    [in_transaction()](#sqlalchemy.orm.Session.in_transaction), [info](#sqlalchemy.orm.Session.info),
    [invalidate()](#sqlalchemy.orm.Session.invalidate), [is_active](#sqlalchemy.orm.Session.is_active),
    [is_modified()](#sqlalchemy.orm.Session.is_modified), [merge()](#sqlalchemy.orm.Session.merge),
    [new](#sqlalchemy.orm.Session.new), [no_autoflush](#sqlalchemy.orm.Session.no_autoflush),
    [object_session()](#sqlalchemy.orm.Session.object_session), [prepare()](#sqlalchemy.orm.Session.prepare),
    [query()](#sqlalchemy.orm.Session.query), [refresh()](#sqlalchemy.orm.Session.refresh),
    [reset()](#sqlalchemy.orm.Session.reset), [rollback()](#sqlalchemy.orm.Session.rollback),
    [scalar()](#sqlalchemy.orm.Session.scalar), [scalars()](#sqlalchemy.orm.Session.scalars)'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.orm.Session.__init__), [add()](#sqlalchemy.orm.Session.add),
    [add_all()](#sqlalchemy.orm.Session.add_all), [begin()](#sqlalchemy.orm.Session.begin),
    [begin_nested()](#sqlalchemy.orm.Session.begin_nested), [bind_mapper()](#sqlalchemy.orm.Session.bind_mapper),
    [bind_table()](#sqlalchemy.orm.Session.bind_table), [bulk_insert_mappings()](#sqlalchemy.orm.Session.bulk_insert_mappings),
    [bulk_save_objects()](#sqlalchemy.orm.Session.bulk_save_objects), [bulk_update_mappings()](#sqlalchemy.orm.Session.bulk_update_mappings),
    [close()](#sqlalchemy.orm.Session.close), [close_all()](#sqlalchemy.orm.Session.close_all),
    [commit()](#sqlalchemy.orm.Session.commit), [connection()](#sqlalchemy.orm.Session.connection),
    [delete()](#sqlalchemy.orm.Session.delete), [deleted](#sqlalchemy.orm.Session.deleted),
    [dirty](#sqlalchemy.orm.Session.dirty), [enable_relationship_loading()](#sqlalchemy.orm.Session.enable_relationship_loading),
    [execute()](#sqlalchemy.orm.Session.execute), [expire()](#sqlalchemy.orm.Session.expire),
    [expire_all()](#sqlalchemy.orm.Session.expire_all), [expunge()](#sqlalchemy.orm.Session.expunge),
    [expunge_all()](#sqlalchemy.orm.Session.expunge_all), [flush()](#sqlalchemy.orm.Session.flush),
    [get()](#sqlalchemy.orm.Session.get), [get_bind()](#sqlalchemy.orm.Session.get_bind),
    [get_nested_transaction()](#sqlalchemy.orm.Session.get_nested_transaction), [get_one()](#sqlalchemy.orm.Session.get_one),
    [get_transaction()](#sqlalchemy.orm.Session.get_transaction), [identity_key()](#sqlalchemy.orm.Session.identity_key),
    [identity_map](#sqlalchemy.orm.Session.identity_map), [in_nested_transaction()](#sqlalchemy.orm.Session.in_nested_transaction),
    [in_transaction()](#sqlalchemy.orm.Session.in_transaction), [info](#sqlalchemy.orm.Session.info),
    [invalidate()](#sqlalchemy.orm.Session.invalidate), [is_active](#sqlalchemy.orm.Session.is_active),
    [is_modified()](#sqlalchemy.orm.Session.is_modified), [merge()](#sqlalchemy.orm.Session.merge),
    [new](#sqlalchemy.orm.Session.new), [no_autoflush](#sqlalchemy.orm.Session.no_autoflush),
    [object_session()](#sqlalchemy.orm.Session.object_session), [prepare()](#sqlalchemy.orm.Session.prepare),
    [query()](#sqlalchemy.orm.Session.query), [refresh()](#sqlalchemy.orm.Session.refresh),
    [reset()](#sqlalchemy.orm.Session.reset), [rollback()](#sqlalchemy.orm.Session.rollback),
    [scalar()](#sqlalchemy.orm.Session.scalar), [scalars()](#sqlalchemy.orm.Session.scalars)'
- en: '**Class signature**'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    (`sqlalchemy.orm.session._SessionClassMethods`, `sqlalchemy.event.registry.EventTarget`)
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    (`sqlalchemy.orm.session._SessionClassMethods`, `sqlalchemy.event.registry.EventTarget`)
- en: '[PRE181]'
  id: totrans-1046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: Construct a new [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: See also the [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    function which is used to generate a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")-producing
    callable with a given set of arguments.
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见[`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")函数，该函数用于生成带有给定参数集的[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")产生的可调用对象。
- en: 'Parameters:'
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`autoflush` –'
  id: totrans-1050
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autoflush` –'
- en: When `True`, all query operations will issue a [`Session.flush()`](#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") call to this `Session` before proceeding. This
    is a convenience feature so that [`Session.flush()`](#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush") need not be called repeatedly in order for database
    queries to retrieve results.
  id: totrans-1051
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为`True`时，所有查询操作将在继续之前对此`Session`执行[`Session.flush()`](#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")调用。这是一个方便的特性，使得不需要反复调用[`Session.flush()`](#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")以便数据库查询检索结果。
- en: See also
  id: totrans-1052
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Flushing](session_basics.html#session-flushing) - additional background on
    autoflush'
  id: totrans-1053
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[刷新](session_basics.html#session-flushing) - 关于自动刷新的额外背景信息'
- en: '`autobegin` –'
  id: totrans-1054
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autobegin` –'
- en: Automatically start transactions (i.e. equivalent to invoking [`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")) when database access is requested by an operation.
    Defaults to `True`. Set to `False` to prevent a [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") from implicitly beginning transactions after construction,
    as well as after any of the [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback"), [`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit"), or [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") methods are called.
  id: totrans-1055
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在请求操作时自动启动事务（即等同于调用[`Session.begin()`](#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")）
    。默认为`True`。设置为`False`以防止[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")在构造之后以及在调用任何
    [`Session.rollback()`](#sqlalchemy.orm.Session.rollback "sqlalchemy.orm.Session.rollback")、[`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") 或 [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") 方法之后隐式开始事务。
- en: New in version 2.0.
  id: totrans-1056
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从 2.0 版本开始新增。
- en: See also
  id: totrans-1057
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Disabling Autobegin to Prevent Implicit Transactions](session_basics.html#session-autobegin-disable)'
  id: totrans-1058
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[禁用 Autobegin 以防止隐式事务](session_basics.html#session-autobegin-disable)'
- en: '`bind` – An optional [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") to which this `Session` should be bound. When
    specified, all SQL operations performed by this session will execute via this
    connectable.'
  id: totrans-1059
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 可选的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")或[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，应该绑定到此`Session`。指定时，此会话执行的所有 SQL 操作将通过此可连接对象执行。'
- en: '`binds` –'
  id: totrans-1060
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binds` –'
- en: 'A dictionary which may specify any number of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects as the source of connectivity for SQL
    operations on a per-entity basis. The keys of the dictionary consist of any series
    of mapped classes, arbitrary Python classes that are bases for mapped classes,
    [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    objects and [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    objects. The values of the dictionary are then instances of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or less commonly [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") objects. Operations which proceed relative to
    a particular mapped class will consult this dictionary for the closest matching
    entity in order to determine which [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") should be used for a particular SQL operation. The
    complete heuristics for resolution are described at [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind"). Usage looks like:'
  id: totrans-1061
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个字典，可能指定任意数量的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")或[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象作为 SQL 操作的连接源，以实体为单位。字典的键由任何一系列映射类、任意 Python
    类（作为映射类的基类）、[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象和[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象组成。然后，字典的值是[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")的实例，或者较少见的是[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。针对特定映射类进行的操作将查阅此字典，以确定哪个[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")应该用于特定的 SQL 操作。解析的完整启发式描述在[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")中。用法示例如下：
- en: '[PRE182]'
  id: totrans-1062
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: See also
  id: totrans-1063
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  id: totrans-1064
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[分区策略（例如，每个会话多个数据库后端）](persistence_techniques.html#session-partitioning)'
- en: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
  id: totrans-1065
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
- en: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
  id: totrans-1066
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
- en: '[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")'
  id: totrans-1067
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")'
- en: '`class_` – Specify an alternate class other than `sqlalchemy.orm.session.Session`
    which should be used by the returned class. This is the only argument that is
    local to the [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    function, and is not sent directly to the constructor for `Session`.'
  id: totrans-1068
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_` – 指定除了 `sqlalchemy.orm.session.Session` 外应该由返回的类使用的替代类。这是唯一作为 [`sessionmaker`](#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") 函数本地的参数，并且不直接发送到 `Session` 的构造函数。'
- en: '`enable_baked_queries` –'
  id: totrans-1069
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enable_baked_queries` –'
- en: legacy; defaults to `True`. A parameter consumed by the [`sqlalchemy.ext.baked`](extensions/baked.html#module-sqlalchemy.ext.baked
    "sqlalchemy.ext.baked") extension to determine if “baked queries” should be cached,
    as is the normal operation of this extension. When set to `False`, caching as
    used by this particular extension is disabled.
  id: totrans-1070
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 遗留；默认为 `True`。由 [`sqlalchemy.ext.baked`](extensions/baked.html#module-sqlalchemy.ext.baked
    "sqlalchemy.ext.baked") 扩展使用的参数，用于确定是否应缓存“烘焙查询”，如此扩展的正常操作所用。当设置为 `False` 时，此特定扩展使用的缓存被禁用。
- en: 'Changed in version 1.4: The `sqlalchemy.ext.baked` extension is legacy and
    is not used by any of SQLAlchemy’s internals. This flag therefore only affects
    applications that are making explicit use of this extension within their own code.'
  id: totrans-1071
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本 1.4 起更改：`sqlalchemy.ext.baked` 扩展是遗留的，并且没有被 SQLAlchemy 的任何内部使用。因此，此标志仅影响明确在其自己的代码中使用此扩展的应用程序。
- en: '`expire_on_commit` –'
  id: totrans-1072
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expire_on_commit` –'
- en: Defaults to `True`. When `True`, all instances will be fully expired after each
    [`commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit"),
    so that all attribute/object access subsequent to a completed transaction will
    load from the most recent database state.
  id: totrans-1073
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 `True`。当为 `True` 时，每次 [`commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    后所有实例都将完全过期，以便在完成事务后的所有属性/对象访问加载最新的数据库状态。
- en: See also
  id: totrans-1074
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 另请参见
- en: ''
  id: totrans-1075
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Committing](session_basics.html#session-committing)'
  id: totrans-1076
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[提交](session_basics.html#session-committing)'
- en: '`future` –'
  id: totrans-1077
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`future` –'
- en: Deprecated; this flag is always True.
  id: totrans-1078
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 已弃用；此标志始终为 True。
- en: See also
  id: totrans-1079
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[SQLAlchemy 2.0 - Major Migration Guide](../changelog/migration_20.html)'
  id: totrans-1080
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[SQLAlchemy 2.0 - 主要迁移指南](../changelog/migration_20.html)'
- en: '`info` – optional dictionary of arbitrary data to be associated with this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). Is available via the [`Session.info`](#sqlalchemy.orm.Session.info
    "sqlalchemy.orm.Session.info") attribute. Note the dictionary is copied at construction
    time so that modifications to the per- [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    dictionary will be local to that [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").'
  id: totrans-1081
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info` – 可选字典，与此 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    关联的任意数据。可通过 [`Session.info`](#sqlalchemy.orm.Session.info "sqlalchemy.orm.Session.info")
    属性访问。请注意，字典在构造时被复制，因此对每个 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    字典的修改将局限于该 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。'
- en: '`query_cls` – Class which should be used to create new Query objects, as returned
    by the [`Session.query()`](#sqlalchemy.orm.Session.query "sqlalchemy.orm.Session.query")
    method. Defaults to [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query").'
  id: totrans-1082
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query_cls` – 应该用于创建新的查询对象的类，由 [`Session.query()`](#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query") 方法返回。默认为 [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")。'
- en: '`twophase` – When `True`, all transactions will be started as a “two phase”
    transaction, i.e. using the “two phase” semantics of the database in use along
    with an XID. During a [`commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit"),
    after [`flush()`](#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush")
    has been issued for all attached databases, the [`TwoPhaseTransaction.prepare()`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") method on each database’s [`TwoPhaseTransaction`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction") will be called. This allows each database
    to roll back the entire transaction, before each transaction is committed.'
  id: totrans-1083
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`twophase` – 当设置为`True`时，所有事务都将作为“两阶段”事务启动，即使用正在使用的数据库的“两阶段”语义以及一个XID。在[`commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")之后，对所有已附加数据库发出[`flush()`](#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")后，将调用每个数据库的[`TwoPhaseTransaction.prepare()`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare")方法的[`TwoPhaseTransaction`](../core/connections.html#sqlalchemy.engine.TwoPhaseTransaction
    "sqlalchemy.engine.TwoPhaseTransaction")。这允许每个数据库在提交每个事务之前回滚整个事务。'
- en: '`autocommit` – the “autocommit” keyword is present for backwards compatibility
    but must remain at its default value of `False`.'
  id: totrans-1084
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`autocommit` – “autocommit”关键字出现是为了向后兼容，但必须保持其默认值为`False`。'
- en: '`join_transaction_mode` –'
  id: totrans-1085
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`join_transaction_mode` –'
- en: Describes the transactional behavior to take when a given bind is a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") that has already begun a transaction outside the
    scope of this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"); in
    other words the [`Connection.in_transaction()`](../core/connections.html#sqlalchemy.engine.Connection.in_transaction
    "sqlalchemy.engine.Connection.in_transaction") method returns True.
  id: totrans-1086
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 描述了在给定绑定是[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")之外已经开始事务的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")时应采取的事务行为；换句话说，[`Connection.in_transaction()`](../core/connections.html#sqlalchemy.engine.Connection.in_transaction
    "sqlalchemy.engine.Connection.in_transaction")方法返回True。
- en: 'The following behaviors only take effect when the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") **actually makes use of the connection given**; that
    is, a method such as [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute"),
    [`Session.connection()`](#sqlalchemy.orm.Session.connection "sqlalchemy.orm.Session.connection"),
    etc. are actually invoked:'
  id: totrans-1087
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下行为仅在[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") **实际使用给定的连接**时才生效；也就是说，诸如[`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")、[`Session.connection()`](#sqlalchemy.orm.Session.connection
    "sqlalchemy.orm.Session.connection")等方法实际上被调用：
- en: '`"conditional_savepoint"` - this is the default. if the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is begun within a transaction but does not have
    a SAVEPOINT, then `"rollback_only"` is used. If the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is additionally within a SAVEPOINT, in other words
    [`Connection.in_nested_transaction()`](../core/connections.html#sqlalchemy.engine.Connection.in_nested_transaction
    "sqlalchemy.engine.Connection.in_nested_transaction") method returns True, then
    `"create_savepoint"` is used.'
  id: totrans-1088
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"conditional_savepoint"` - 这是默认行为。如果给定的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")在事务中开始但没有SAVEPOINT，则使用`"rollback_only"`。如果[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")此外还在SAVEPOINT中，换句话说，[`Connection.in_nested_transaction()`](../core/connections.html#sqlalchemy.engine.Connection.in_nested_transaction
    "sqlalchemy.engine.Connection.in_nested_transaction")方法返回True，则使用`"create_savepoint"`。'
- en: '`"conditional_savepoint"` behavior attempts to make use of savepoints in order
    to keep the state of the existing transaction unchanged, but only if there is
    already a savepoint in progress; otherwise, it is not assumed that the backend
    in use has adequate support for SAVEPOINT, as availability of this feature varies.
    `"conditional_savepoint"` also seeks to establish approximate backwards compatibility
    with previous [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") behavior,
    for applications that are not setting a specific mode. It is recommended that
    one of the explicit settings be used.'
  id: totrans-1089
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`"conditional_savepoint"` 行为试图利用保存点来保持现有事务的状态不变，但仅在已经存在保存点的情况下；否则，不假设所使用的后端具有足够的
    SAVEPOINT 支持，因为该功能的可用性有所不同。 `"conditional_savepoint"` 还试图与先前 [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 行为建立大致的向后兼容性，用于未设置特定模式的应用程序。建议使用其中一个明确的设置。'
- en: '`"create_savepoint"` - the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will use [`Connection.begin_nested()`](../core/connections.html#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") in all cases to create its own transaction.
    This transaction by its nature rides “on top” of any existing transaction that’s
    opened on the given [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection"); if the underlying database and the driver in
    use has full, non-broken support for SAVEPOINT, the external transaction will
    remain unaffected throughout the lifespan of the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").'
  id: totrans-1090
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"create_savepoint"` - [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    将在所有情况下使用 [`Connection.begin_nested()`](../core/connections.html#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested") 来创建自己的事务。这个事务本质上是“在顶部”的任何存在的事务之上打开的；如果底层数据库和正在使用的驱动程序完全支持
    SAVEPOINT，那么外部事务将在 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    生命周期内保持不受影响。'
- en: The `"create_savepoint"` mode is the most useful for integrating a [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") into a test suite where an externally initiated transaction
    should remain unaffected; however, it relies on proper SAVEPOINT support from
    the underlying driver and database.
  id: totrans-1091
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`"create_savepoint"` 模式对于将 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    集成到测试套件中并保持外部启动的事务不受影响最为有用；然而，它依赖于底层驱动程序和数据库的正确 SAVEPOINT 支持。'
- en: Tip
  id: totrans-1092
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: When using SQLite, the SQLite driver included through Python 3.11 does not handle
    SAVEPOINTs correctly in all cases without workarounds. See the sections [Serializable
    isolation / Savepoints / Transactional DDL](../dialects/sqlite.html#pysqlite-serializable)
    and [Serializable isolation / Savepoints / Transactional DDL (asyncio version)](../dialects/sqlite.html#aiosqlite-serializable)
    for details on current workarounds.
  id: totrans-1093
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 SQLite 时，Python 3.11 中包含的 SQLite 驱动在某些情况下不能正确处理 SAVEPOINTs，需要通过一些变通方法。请参阅[Serializable
    isolation / Savepoints / Transactional DDL](../dialects/sqlite.html#pysqlite-serializable)和[Serializable
    isolation / Savepoints / Transactional DDL（asyncio 版本）](../dialects/sqlite.html#aiosqlite-serializable)部分，了解当前的解决方法详情。
- en: '`"control_fully"` - the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will take control of the given transaction as its own; [`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") will call `.commit()` on the transaction, [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") will call `.rollback()` on the transaction,
    [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    will call `.rollback` on the transaction.'
  id: totrans-1094
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"control_fully"` - [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    将接管给定的事务作为自己的事务；[`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    将在事务上调用 `.commit()`，[`Session.rollback()`](#sqlalchemy.orm.Session.rollback "sqlalchemy.orm.Session.rollback")
    将在事务上调用 `.rollback()`，[`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    将调用事务的 `.rollback`。'
- en: Tip
  id: totrans-1095
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: This mode of use is equivalent to how SQLAlchemy 1.4 would handle a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") given with an existing SAVEPOINT (i.e. [`Connection.begin_nested()`](../core/connections.html#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested")); the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") would take full control of the existing SAVEPOINT.
  id: totrans-1096
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此使用模式相当于SQLAlchemy 1.4如何处理具有现有SAVEPOINT的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")（即[`Connection.begin_nested()`](../core/connections.html#sqlalchemy.engine.Connection.begin_nested
    "sqlalchemy.engine.Connection.begin_nested")）; [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")将完全控制现有SAVEPOINT。
- en: '`"rollback_only"` - the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will take control of the given transaction for `.rollback()` calls only; `.commit()`
    calls will not be propagated to the given transaction. `.close()` calls will have
    no effect on the given transaction.'
  id: totrans-1097
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"rollback_only"` - [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")将仅控制给定事务进行`.rollback()`调用；`.commit()`调用不会传播到给定事务。`.close()`调用对给定事务没有影响。'
- en: Tip
  id: totrans-1098
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: This mode of use is equivalent to how SQLAlchemy 1.4 would handle a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") given with an existing regular database transaction
    (i.e. [`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")); the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") would propagate [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") calls to the underlying transaction, but not
    [`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
    or [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    calls.
  id: totrans-1099
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此使用模式相当于SQLAlchemy 1.4如何处理具有现有常规数据库事务的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")（即[`Connection.begin()`](../core/connections.html#sqlalchemy.engine.Connection.begin
    "sqlalchemy.engine.Connection.begin")）; [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")将传播[`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")调用到底层事务，但不会传播[`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")或[`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")调用。
- en: New in version 2.0.0rc1.
  id: totrans-1100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在版本2.0.0rc1中新增。
- en: '`close_resets_only` –'
  id: totrans-1101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`close_resets_only` –'
- en: Defaults to `True`. Determines if the session should reset itself after calling
    `.close()` or should pass in a no longer usable state, disabling re-use.
  id: totrans-1102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为`True`。确定在调用`.close()`后会话是否应重置自身，或者应传入不再可用的状态，禁用重用。
- en: 'New in version 2.0.22: added flag `close_resets_only`. A future SQLAlchemy
    version may change the default value of this flag to `False`.'
  id: totrans-1103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本2.0.22中新增标志`close_resets_only`。将来的SQLAlchemy版本可能会将此标志的默认值更改为`False`。
- en: See also
  id: totrans-1104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Closing](session_basics.html#session-closing) - Detail on the semantics of
    [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  id: totrans-1105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[关闭](session_basics.html#session-closing) - 有关[`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")和[`Session.reset()`](#sqlalchemy.orm.Session.reset
    "sqlalchemy.orm.Session.reset")语义的详细信息。'
- en: '[PRE183]'
  id: totrans-1106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: Place an object into this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: 将对象放入此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: Objects that are in the [transient](../glossary.html#term-transient) state when
    passed to the [`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    method will move to the [pending](../glossary.html#term-pending) state, until
    the next flush, at which point they will move to the [persistent](../glossary.html#term-persistent)
    state.
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递给[`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")方法时处于[瞬态](../glossary.html#term-transient)状态的对象将转移到[挂起](../glossary.html#term-pending)状态，直到下一次刷新，然后它们将转移到[持久化](../glossary.html#term-persistent)状态。
- en: Objects that are in the [detached](../glossary.html#term-detached) state when
    passed to the [`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    method will move to the [persistent](../glossary.html#term-persistent) state directly.
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递给[`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")方法时处于[分离](../glossary.html#term-detached)状态的对象将直接转移到[持久化](../glossary.html#term-persistent)状态。
- en: If the transaction used by the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is rolled back, objects which were transient when they were passed to [`Session.add()`](#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") will be moved back to the [transient](../glossary.html#term-transient)
    state, and will no longer be present within this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")使用的事务被回滚，则在传递给[`Session.add()`](#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add")时是瞬时的对象将被移回[瞬时](../glossary.html#term-transient)状态，并且将不再存在于此[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。
- en: See also
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.add_all()`](#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.add_all()`](#sqlalchemy.orm.Session.add_all "sqlalchemy.orm.Session.add_all")'
- en: '[Adding New or Existing Items](session_basics.html#session-adding) - at [Basics
    of Using a Session](session_basics.html#id1)'
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加新项目或现有项目](session_basics.html#session-adding) - 在[使用会话的基础知识](session_basics.html#id1)中'
- en: '[PRE184]'
  id: totrans-1114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Add the given collection of instances to this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的实例集合添加到此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中。
- en: See the documentation for [`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")
    for a general behavioral description.
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")的文档以获取一般行为描述。
- en: See also
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.add()`](#sqlalchemy.orm.Session.add "sqlalchemy.orm.Session.add")'
- en: '[Adding New or Existing Items](session_basics.html#session-adding) - at [Basics
    of Using a Session](session_basics.html#id1)'
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
  zh: '[添加新项目或现有项目](session_basics.html#session-adding) - 在[使用会话的基础知识](session_basics.html#id1)中'
- en: '[PRE185]'
  id: totrans-1120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: Begin a transaction, or nested transaction, on this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), if one is not already begun.
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: 在此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")上开始事务或嵌套事务（如果尚未开始）。
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") object features
    **autobegin** behavior, so that normally it is not necessary to call the [`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") method explicitly. However, it may be used in
    order to control the scope of when the transactional state is begun.
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象具有**自动开始**行为，因此通常不需要显式调用[`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")方法。但是，可以用来控制事务状态开始的范围。'
- en: When used to begin the outermost transaction, an error is raised if this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is already inside of a transaction.
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
  zh: 当用于开始最外层事务时，如果此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")已经在事务中，则会引发错误。
- en: 'Parameters:'
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**nested** – if True, begins a SAVEPOINT transaction and is equivalent to calling
    [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested").
    For documentation on SAVEPOINT transactions, please see [Using SAVEPOINT](session_transaction.html#session-begin-nested).'
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
  zh: '**嵌套** - 如果为True，则开始一个SAVEPOINT事务，等效于调用[`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")。有关SAVEPOINT事务的文档，请参见[使用SAVEPOINT](session_transaction.html#session-begin-nested)。'
- en: 'Returns:'
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    object. Note that [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    acts as a Python context manager, allowing [`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin") to be used in a “with” block. See [Explicit Begin](session_transaction.html#session-explicit-begin)
    for an example.
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")对象。请注意，[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")充当Python上下文管理器，允许在“with”块中使用[`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")。请参见[显式开始](session_transaction.html#session-explicit-begin)以获取示例。'
- en: See also
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Auto Begin](session_basics.html#session-autobegin)'
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
  zh: '[自动开始](session_basics.html#session-autobegin)'
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: '[管理事务](session_transaction.html#unitofwork-transaction)'
- en: '[`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")'
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")'
- en: '[PRE186]'
  id: totrans-1132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: Begin a “nested” transaction on this Session, e.g. SAVEPOINT.
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
  zh: 在此会话上开始“嵌套”事务，例如SAVEPOINT。
- en: The target database(s) and associated drivers must support SQL SAVEPOINT for
    this method to function correctly.
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: 目标数据库和相关驱动程序必须支持SQL SAVEPOINT才能使此方法正常运行。
- en: For documentation on SAVEPOINT transactions, please see [Using SAVEPOINT](session_transaction.html#session-begin-nested).
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: 有关SAVEPOINT事务的文档，请参阅[使用SAVEPOINT](session_transaction.html#session-begin-nested)。
- en: 'Returns:'
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: the [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    object. Note that [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    acts as a context manager, allowing [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested") to be used in a “with” block. See [Using
    SAVEPOINT](session_transaction.html#session-begin-nested) for a usage example.
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")对象。请注意，[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")作为上下文管理器，允许在“with”块中使用[`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")。请参阅[使用SAVEPOINT](session_transaction.html#session-begin-nested)获取用法示例。'
- en: See also
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using SAVEPOINT](session_transaction.html#session-begin-nested)'
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用SAVEPOINT](session_transaction.html#session-begin-nested)'
- en: '[Serializable isolation / Savepoints / Transactional DDL](../dialects/sqlite.html#pysqlite-serializable)
    - special workarounds required with the SQLite driver in order for SAVEPOINT to
    work correctly. For asyncio use cases, see the section [Serializable isolation
    / Savepoints / Transactional DDL (asyncio version)](../dialects/sqlite.html#aiosqlite-serializable).'
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: '[可序列化隔离/保存点/事务性DDL](../dialects/sqlite.html#pysqlite-serializable) - 针对SQLite驱动程序需要特殊的解决方案，以使SAVEPOINT正常工作。对于asyncio用例，请参阅[可序列化隔离/保存点/事务性DDL（asyncio版本）](../dialects/sqlite.html#aiosqlite-serializable)部分。'
- en: '[PRE187]'
  id: totrans-1141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: Associate a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    or arbitrary Python class with a “bind”, e.g. an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: 将[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")或任意Python类与“bind”相关联，例如[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。
- en: The given entity is added to a lookup used by the [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method.
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的实体被添加到[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")方法使用的查找中。
- en: 'Parameters:'
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    object, or an instance of a mapped class, or any Python class that is the base
    of a set of mapped classes.'
  id: totrans-1145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 一个[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象，或者是一个映射类的实例，或者是任何作为一组映射类基类的Python类。'
- en: '`bind` – an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object.'
  id: totrans-1146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")或[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。'
- en: See also
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: '[分区策略（例如每个会话多个数据库后端）](persistence_techniques.html#session-partitioning)'
- en: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
- en: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
- en: '[PRE188]'
  id: totrans-1151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: Associate a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    with a “bind”, e.g. an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: 将[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")与“bind”相关联，例如[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")。
- en: The given [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    is added to a lookup used by the [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") method.
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")被添加到[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法使用的查找中。
- en: 'Parameters:'
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`table` – a [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object, which is typically the target of an ORM mapping, or is present within
    a selectable that is mapped.'
  id: totrans-1155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`table` – 一个[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象，通常是ORM映射的目标，或者存在于被映射的可选择性内。'
- en: '`bind` – an [`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    or [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object.'
  id: totrans-1156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind` – 一个[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")或[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。'
- en: See also
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: '[分区策略（例如每个Session多个数据库后端）](persistence_techniques.html#session-partitioning)'
- en: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
- en: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
- en: '[PRE189]'
  id: totrans-1161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: Perform a bulk insert of the given list of mapping dictionaries.
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: 对给定的映射字典列表执行批量插入。
- en: Legacy Feature
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: 旧特性
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
    The 2.0 API shares implementation details with this method and adds new features
    as well.
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法是SQLAlchemy 2.0系列的旧特性。对于现代的批量INSERT和UPDATE，请参阅[ORM批量INSERT语句](queryguide/dml.html#orm-queryguide-bulk-insert)和[ORM按主键批量UPDATE](queryguide/dml.html#orm-queryguide-bulk-update)部分。2.0
    API与此方法共享实现细节，并添加了新功能。
- en: 'Parameters:'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – a mapped class, or the actual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object, representing the single kind of object represented
    within the mapping list.'
  id: totrans-1166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 一个映射类，或者实际的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")对象，表示映射列表中表示的单一对象类型。'
- en: '`mappings` – a sequence of dictionaries, each one containing the state of the
    mapped row to be inserted, in terms of the attribute names on the mapped class.
    If the mapping refers to multiple tables, such as a joined-inheritance mapping,
    each dictionary must contain all keys to be populated into all tables.'
  id: totrans-1167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mappings` – 一个字典序列，每个字典包含要插入的映射行的状态，以映射类上的属性名称为准。如果映射涉及多个表，比如联合继承映射，每个字典必须包含要填充到所有表中的所有键。'
- en: '`return_defaults` –'
  id: totrans-1168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_defaults` –'
- en: when True, the INSERT process will be altered to ensure that newly generated
    primary key values will be fetched. The rationale for this parameter is typically
    to enable [Joined Table Inheritance](inheritance.html#joined-inheritance) mappings
    to be bulk inserted.
  id: totrans-1169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为True时，INSERT过程将被修改以确保新生成的主键值将被获取。通常此参数的理由是为了使[联合表继承](inheritance.html#joined-inheritance)映射能够进行批量插入。
- en: Note
  id: totrans-1170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: for backends that don’t support RETURNING, the [`Session.bulk_insert_mappings.return_defaults`](#sqlalchemy.orm.Session.bulk_insert_mappings.params.return_defaults
    "sqlalchemy.orm.Session.bulk_insert_mappings") parameter can significantly decrease
    performance as INSERT statements can no longer be batched. See [“Insert Many Values”
    Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    for background on which backends are affected.
  id: totrans-1171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于不支持RETURNING的后端，[`Session.bulk_insert_mappings.return_defaults`](#sqlalchemy.orm.Session.bulk_insert_mappings.params.return_defaults
    "sqlalchemy.orm.Session.bulk_insert_mappings")参数可以显著降低性能，因为INSERT语句不能再批量处理。请参阅[“插入多个值”行为对INSERT语句的影响](../core/connections.html#engine-insertmanyvalues)以了解哪些后端受到影响。
- en: '`render_nulls` –'
  id: totrans-1172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render_nulls` –'
- en: When True, a value of `None` will result in a NULL value being included in the
    INSERT statement, rather than the column being omitted from the INSERT. This allows
    all the rows being INSERTed to have the identical set of columns which allows
    the full set of rows to be batched to the DBAPI. Normally, each column-set that
    contains a different combination of NULL values than the previous row must omit
    a different series of columns from the rendered INSERT statement, which means
    it must be emitted as a separate statement. By passing this flag, the full set
    of rows are guaranteed to be batchable into one batch; the cost however is that
    server-side defaults which are invoked by an omitted column will be skipped, so
    care must be taken to ensure that these are not necessary.
  id: totrans-1173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为True时，`None`值将导致在INSERT语句中包含一个NULL值，而不是将列从INSERT中省略。这允许所有被INSERT的行具有相同的列集，从而允许将完整的行集批量发送到DBAPI。通常，每个包含与前一行不同的NULL值组合的列集必须从渲染的INSERT语句中省略不同的列系列，这意味着必须将其作为单独的语句发出。通过传递此标志，可以确保将完整的行集批量处理为一个批次；但成本是，通过省略的列调用的服务器端默认值将被跳过，因此必须确保这些不是必需的。
- en: Warning
  id: totrans-1174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告
- en: When this flag is set, **server side default SQL values will not be invoked**
    for those columns that are inserted as NULL; the NULL value will be sent explicitly.
    Care must be taken to ensure that no server-side default functions need to be
    invoked for the operation as a whole.
  id: totrans-1175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当设置了此标志时，**服务器端默认的SQL值不会被调用**，对于那些以NULL插入的列；NULL值将被显式发送。必须确保整个操作不需要调用任何服务器端默认函数。
- en: See also
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: '[启用ORM的INSERT、UPDATE和DELETE语句](queryguide/dml.html)'
- en: '[`Session.bulk_save_objects()`](#sqlalchemy.orm.Session.bulk_save_objects "sqlalchemy.orm.Session.bulk_save_objects")'
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_save_objects()`](#sqlalchemy.orm.Session.bulk_save_objects "sqlalchemy.orm.Session.bulk_save_objects")'
- en: '[`Session.bulk_update_mappings()`](#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_update_mappings()`](#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
- en: '[PRE190]'
  id: totrans-1180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: Perform a bulk save of the given list of objects.
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
  zh: 对给定对象列表执行批量保存。
- en: Legacy Feature
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: 旧特性
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法是SQLAlchemy 2.0系列的一个旧特性。对于现代的批量INSERT和UPDATE，请参阅[ORM批量INSERT语句](queryguide/dml.html#orm-queryguide-bulk-insert)和[按主键批量UPDATE](queryguide/dml.html#orm-queryguide-bulk-update)部分。
- en: For general INSERT and UPDATE of existing ORM mapped objects, prefer standard
    [unit of work](../glossary.html#term-unit-of-work) data management patterns, introduced
    in the [SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)
    at [Data Manipulation with the ORM](../tutorial/orm_data_manipulation.html#tutorial-orm-data-manipulation).
    SQLAlchemy 2.0 now uses [“Insert Many Values” Behavior for INSERT statements](../core/connections.html#engine-insertmanyvalues)
    with modern dialects which solves previous issues of bulk INSERT slowness.
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一般的INSERT和更新现有ORM映射对象，建议使用标准的[工作单元](../glossary.html#term-unit-of-work)数据管理模式，介绍在[SQLAlchemy统一教程](../tutorial/index.html#unified-tutorial)中的[ORM数据操作](../tutorial/orm_data_manipulation.html#tutorial-orm-data-manipulation)。SQLAlchemy
    2.0现在使用现代方言的[“插入多个值”行为用于INSERT语句](../core/connections.html#engine-insertmanyvalues)，解决了以前批量INSERT速度慢的问题。
- en: 'Parameters:'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`objects` –'
  id: totrans-1186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`objects` –'
- en: a sequence of mapped object instances. The mapped objects are persisted as is,
    and are **not** associated with the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    afterwards.
  id: totrans-1187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一系列映射对象实例。映射对象将按原样持久化，并且之后**不**与[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")关联。
- en: For each object, whether the object is sent as an INSERT or an UPDATE is dependent
    on the same rules used by the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    in traditional operation; if the object has the `InstanceState.key` attribute
    set, then the object is assumed to be “detached” and will result in an UPDATE.
    Otherwise, an INSERT is used.
  id: totrans-1188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于每个对象，对象是作为INSERT还是UPDATE发送取决于[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")在传统操作中使用的相同规则；如果对象具有`InstanceState.key`属性设置，则假定对象是“分离的”并将导致UPDATE。否则，将使用INSERT。
- en: In the case of an UPDATE, statements are grouped based on which attributes have
    changed, and are thus to be the subject of each SET clause. If `update_changed_only`
    is False, then all attributes present within each object are applied to the UPDATE
    statement, which may help in allowing the statements to be grouped together into
    a larger executemany(), and will also reduce the overhead of checking history
    on attributes.
  id: totrans-1189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在UPDATE的情况下，根据哪些属性已更改，语句将被分组，因此将成为每个SET子句的主题。如果`update_changed_only`为False，则将每个对象中存在的所有属性应用于UPDATE语句，这可能有助于将语句组合成更大的executemany()，并且还将减少检查属性历史记录的开销。
- en: '`return_defaults` – when True, rows that are missing values which generate
    defaults, namely integer primary key defaults and sequences, will be inserted
    `one at a time`, so that the primary key value is available. In particular this
    will allow joined-inheritance and other multi-table mappings to insert correctly
    without the need to provide primary key values ahead of time; however, [`Session.bulk_save_objects.return_defaults`](#sqlalchemy.orm.Session.bulk_save_objects.params.return_defaults
    "sqlalchemy.orm.Session.bulk_save_objects") `greatly reduces the performance gains`
    of the method overall. It is strongly advised to please use the standard [`Session.add_all()`](#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all") approach.'
  id: totrans-1190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_defaults` – 当为True时，缺少生成默认值的值的行，即整数主键默认值和序列，将逐个插入，以便主键值可用。特别是，这将允许联合继承和其他多表映射正确插入，而无需提前提供主键值；但是，[`Session.bulk_save_objects.return_defaults`](#sqlalchemy.orm.Session.bulk_save_objects.params.return_defaults
    "sqlalchemy.orm.Session.bulk_save_objects") `极大地降低了方法的性能收益`。强烈建议使用标准的[`Session.add_all()`](#sqlalchemy.orm.Session.add_all
    "sqlalchemy.orm.Session.add_all")方法。'
- en: '`update_changed_only` – when True, UPDATE statements are rendered based on
    those attributes in each state that have logged changes. When False, all attributes
    present are rendered into the SET clause with the exception of primary key attributes.'
  id: totrans-1191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update_changed_only` – 当为True时，根据每个状态中记录的更改的属性生成UPDATE语句。当为False时，除了主键属性之外，所有存在的属性都将生成到SET子句中。'
- en: '`preserve_order` – when True, the order of inserts and updates matches exactly
    the order in which the objects are given. When False, common types of objects
    are grouped into inserts and updates, to allow for more batching opportunities.'
  id: totrans-1192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preserve_order` – 当为True时，插入和更新的顺序与给定对象的顺序完全匹配。当为False时，常见类型的对象将分组为插入和更新，以允许更多的批处理机会。'
- en: See also
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM启用的INSERT、UPDATE和DELETE语句](queryguide/dml.html)'
- en: '[`Session.bulk_insert_mappings()`](#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_insert_mappings()`](#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
- en: '[`Session.bulk_update_mappings()`](#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_update_mappings()`](#sqlalchemy.orm.Session.bulk_update_mappings
    "sqlalchemy.orm.Session.bulk_update_mappings")'
- en: '[PRE191]'
  id: totrans-1197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: Perform a bulk update of the given list of mapping dictionaries.
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: 对给定的映射字典列表执行批量更新。
- en: Legacy Feature
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留特性
- en: This method is a legacy feature as of the 2.0 series of SQLAlchemy. For modern
    bulk INSERT and UPDATE, see the sections [ORM Bulk INSERT Statements](queryguide/dml.html#orm-queryguide-bulk-insert)
    and [ORM Bulk UPDATE by Primary Key](queryguide/dml.html#orm-queryguide-bulk-update).
    The 2.0 API shares implementation details with this method and adds new features
    as well.
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法是SQLAlchemy 2.0系列的遗留特性。有关现代批量INSERT和UPDATE，请参见[ORM批量INSERT语句](queryguide/dml.html#orm-queryguide-bulk-insert)和[ORM按主键批量UPDATE](queryguide/dml.html#orm-queryguide-bulk-update)章节。2.0
    API与该方法共享实现细节，并添加了新功能。
- en: 'Parameters:'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – a mapped class, or the actual [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") object, representing the single kind of object represented
    within the mapping list.'
  id: totrans-1202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 映射类，或者表示映射列表中所表示的单个对象的实际[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象。'
- en: '`mappings` – a sequence of dictionaries, each one containing the state of the
    mapped row to be updated, in terms of the attribute names on the mapped class.
    If the mapping refers to multiple tables, such as a joined-inheritance mapping,
    each dictionary may contain keys corresponding to all tables. All those keys which
    are present and are not part of the primary key are applied to the SET clause
    of the UPDATE statement; the primary key values, which are required, are applied
    to the WHERE clause.'
  id: totrans-1203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mappings` - 一个字典序列，每个字典包含要更新的映射行的状态，以映射类上的属性名称表示。如果映射涉及多个表，例如连接继承映射，每个字典可能包含与所有表对应的键。所有那些存在且不是主键的键将应用于UPDATE语句的SET子句；必需的主键值将应用于WHERE子句。'
- en: See also
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM-Enabled INSERT, UPDATE, and DELETE statements](queryguide/dml.html)'
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
  zh: '[启用ORM的INSERT、UPDATE和DELETE语句](queryguide/dml.html)'
- en: '[`Session.bulk_insert_mappings()`](#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_insert_mappings()`](#sqlalchemy.orm.Session.bulk_insert_mappings
    "sqlalchemy.orm.Session.bulk_insert_mappings")'
- en: '[`Session.bulk_save_objects()`](#sqlalchemy.orm.Session.bulk_save_objects "sqlalchemy.orm.Session.bulk_save_objects")'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bulk_save_objects()`](#sqlalchemy.orm.Session.bulk_save_objects "sqlalchemy.orm.Session.bulk_save_objects")'
- en: '[PRE192]'
  id: totrans-1208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Close out the transactional resources and ORM objects used by this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session").
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")使用的事务资源和ORM对象。
- en: This expunges all ORM objects associated with this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), ends any transaction in progress and [releases](../glossary.html#term-releases)
    any [`Connection`](../core/connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    objects which this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    itself has checked out from associated [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") objects. The operation then leaves the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in a state which it may be used again.
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: 这将清除与此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")关联的所有ORM对象，结束任何正在进行的事务，并释放此[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")自身从关联的[`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")对象中签出的任何[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。然后，该操作将使[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")处于可以再次使用的状态。
- en: Tip
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: In the default running mode the [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method **does not prevent the Session from being
    used again**. The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    itself does not actually have a distinct “closed” state; it merely means the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will release all database connections and ORM objects.
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认运行模式下，[`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")方法**不会阻止再次使用Session**。[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")本身实际上没有明确的“关闭”状态；它仅意味着[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")将释放所有数据库连接和ORM对象。
- en: Setting the parameter [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") to `False` will instead make the `close` final, meaning
    that any further action on the session will be forbidden.
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: 将参数[`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")设置为`False`将使`close`变为最终状态，这意味着对会话的任何进一步操作都将被禁止。
- en: 'Changed in version 1.4: The [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method does not immediately create a new [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object; instead, the new [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is created only if the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is used again for a database operation.'
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：[`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")方法不会立即创建新的[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")对象；相反，只有在再次为数据库操作使用[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时才会创建新的[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")。
- en: See also
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Closing](session_basics.html#session-closing) - detail on the semantics of
    [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: '[关闭会话](session_basics.html#session-closing) - 关于[`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")和[`Session.reset()`](#sqlalchemy.orm.Session.reset
    "sqlalchemy.orm.Session.reset")语义的详细信息。'
- en: '[`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - a similar method that behaves like `close()` with the parameter [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") set to `True`.'
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset")
    - 与参数[`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")设置为`True`的`close()`类似的方法。'
- en: '[PRE193]'
  id: totrans-1218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.close_all`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
  zh: '*从* `sqlalchemy.orm.session._SessionClassMethods.close_all` *方法继承*'
- en: Close *all* sessions in memory.
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭内存中的*所有*会话。
- en: 'Deprecated since version 1.3: The [`Session.close_all()`](#sqlalchemy.orm.Session.close_all
    "sqlalchemy.orm.Session.close_all") method is deprecated and will be removed in
    a future release. Please refer to `close_all_sessions()`.'
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.3开始已废弃：[`Session.close_all()`](#sqlalchemy.orm.Session.close_all "sqlalchemy.orm.Session.close_all")
    方法已被废弃，并将在将来的版本中删除。请参考 `close_all_sessions()`。
- en: '[PRE194]'
  id: totrans-1222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: Flush pending changes and commit the current transaction.
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: 刷新待定更改并提交当前事务。
- en: When the COMMIT operation is complete, all objects are fully [expired](../glossary.html#term-expired),
    erasing their internal contents, which will be automatically re-loaded when the
    objects are next accessed. In the interim, these objects are in an expired state
    and will not function if they are [detached](../glossary.html#term-detached) from
    the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"). Additionally,
    this re-load operation is not supported when using asyncio-oriented APIs. The
    [`Session.expire_on_commit`](#sqlalchemy.orm.Session.params.expire_on_commit "sqlalchemy.orm.Session")
    parameter may be used to disable this behavior.
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: 当 COMMIT 操作完成时，所有对象都将被完全[过期](../glossary.html#term-expired)，擦除其内部内容，下次访问这些对象时将自动重新加载。在此期间，这些对象处于过期状态，如果从[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中[分离](../glossary.html#term-detached)，则无法正常使用。此外，在使用基于
    asyncio 的 API 时不支持此重新加载操作。可以使用[`Session.expire_on_commit`](#sqlalchemy.orm.Session.params.expire_on_commit
    "sqlalchemy.orm.Session")参数来禁用此行为。
- en: When there is no transaction in place for the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), indicating that no operations were invoked on this
    [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") since the previous
    call to [`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit"),
    the method will begin and commit an internal-only “logical” transaction, that
    does not normally affect the database unless pending flush changes were detected,
    but will still invoke event handlers and object expiration rules.
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中没有事务时，表示自上次调用[`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")以来没有在此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")上调用任何操作，则该方法将开始并提交一个仅内部使用的“逻辑”事务，通常不会影响数据库，除非检测到待定刷新更改，但仍会调用事件处理程序和对象过期规则。
- en: The outermost database transaction is committed unconditionally, automatically
    releasing any SAVEPOINTs in effect.
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
  zh: 最外层的数据库事务会无条件提交，自动释放任何当前有效的 SAVEPOINT。
- en: See also
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Committing](session_basics.html#session-committing)'
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
  zh: '[提交](session_basics.html#session-committing)'
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: '[事务管理](session_transaction.html#unitofwork-transaction)'
- en: '[Preventing Implicit IO when Using AsyncSession](extensions/asyncio.html#asyncio-orm-avoid-lazyloads)'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: '[在使用 AsyncSession 时避免隐式 IO](extensions/asyncio.html#asyncio-orm-avoid-lazyloads)'
- en: '[PRE195]'
  id: totrans-1231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: Return a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object corresponding to this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s transactional state.
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的事务状态对应的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象。
- en: Either the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") corresponding to the current transaction is returned,
    or if no transaction is in progress, a new one is begun and the [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") returned (note that no transactional state is
    established with the DBAPI until the first SQL statement is emitted).
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 返回与当前事务对应的[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")，或者如果没有进行中的事务，则开始一个新事务并返回[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")（请注意，在发出第一条SQL语句之前，不会与DBAPI建立事务状态）。
- en: Ambiguity in multi-bind or unbound [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects can be resolved through any of the optional keyword arguments. This ultimately
    makes usage of the [`get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method for resolution.
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
  zh: 多绑定或未绑定的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象中的歧义可以通过任何可选关键字参数解决。最终，使用[`get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法进行解析。
- en: 'Parameters:'
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`bind_arguments` – dictionary of bind arguments. May include “mapper”, “bind”,
    “clause”, other custom arguments that are passed to [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind").'
  id: totrans-1236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind_arguments` – 绑定参数字典。可能包括“mapper”、“bind”、“clause”等传递给[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")的其他自定义参数。'
- en: '`execution_options` –'
  id: totrans-1237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` –'
- en: a dictionary of execution options that will be passed to [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), **when the connection is first
    procured only**. If the connection is already present within the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), a warning is emitted and the arguments are ignored.
  id: totrans-1238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个执行选项字典，将仅在首次获取连接时传递给[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")。如果连接已经存在于[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中，则会发出警告并忽略参数。
- en: See also
  id: totrans-1239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Setting Transaction Isolation Levels / DBAPI AUTOCOMMIT](session_transaction.html#session-transaction-isolation)'
  id: totrans-1240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[设置事务隔离级别 / DBAPI AUTOCOMMIT](session_transaction.html#session-transaction-isolation)'
- en: '[PRE196]'
  id: totrans-1241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: Mark an instance as deleted.
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例标记为已删除。
- en: The object is assumed to be either [persistent](../glossary.html#term-persistent)
    or [detached](../glossary.html#term-detached) when passed; after the method is
    called, the object will remain in the [persistent](../glossary.html#term-persistent)
    state until the next flush proceeds. During this time, the object will also be
    a member of the [`Session.deleted`](#sqlalchemy.orm.Session.deleted "sqlalchemy.orm.Session.deleted")
    collection.
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: 假定传递的对象在调用方法后将保持在[persistent](../glossary.html#term-persistent)或[detached](../glossary.html#term-detached)状态；在下次刷新之前，对象将保持在[persistent](../glossary.html#term-persistent)状态。在此期间，对象还将是[`Session.deleted`](#sqlalchemy.orm.Session.deleted
    "sqlalchemy.orm.Session.deleted")集合的成员。
- en: When the next flush proceeds, the object will move to the [deleted](../glossary.html#term-deleted)
    state, indicating a `DELETE` statement was emitted for its row within the current
    transaction. When the transaction is successfully committed, the deleted object
    is moved to the [detached](../glossary.html#term-detached) state and is no longer
    present within this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: 下次刷新时，对象将转移到[deleted](../glossary.html#term-deleted)状态，表示在当前事务中为其行发出了`DELETE`语句。当事务成功提交时，已删除的对象将移至[detached](../glossary.html#term-detached)状态，并不再存在于此[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。
- en: See also
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Deleting](session_basics.html#session-deleting) - at [Basics of Using a Session](session_basics.html#id1)'
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: '[删除](session_basics.html#session-deleting) - 在[使用会话的基础知识](session_basics.html#id1)'
- en: '[PRE197]'
  id: totrans-1247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: The set of all instances marked as ‘deleted’ within this `Session`
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`Session`中标记为‘deleted’的所有实例的集合
- en: '[PRE198]'
  id: totrans-1249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: The set of all persistent instances considered dirty.
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: 所有被视为脏数据的持久实例的集合。
- en: 'E.g.:'
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE199]'
  id: totrans-1252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: Instances are considered dirty when they were modified but not deleted.
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
  zh: 当实例被修改但未被删除时，被视为脏数据。
- en: Note that this ‘dirty’ calculation is ‘optimistic’; most attribute-setting or
    collection modification operations will mark an instance as ‘dirty’ and place
    it in this set, even if there is no net change to the attribute’s value. At flush
    time, the value of each attribute is compared to its previously saved value, and
    if there’s no net change, no SQL operation will occur (this is a more expensive
    operation so it’s only done at flush time).
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这种‘脏’计算是‘乐观的’；大多数属性设置或集合修改操作都会将实例标记为‘脏’并将其放入此集合中，即使属性的值没有净变化也是如此。在刷新时，将每个属性的值与其先前保存的值进行比较，如果没有净变化，则不会发生SQL操作（这是一种更昂贵的操作，因此只在刷新时执行）。
- en: To check if an instance has actionable net changes to its attributes, use the
    [`Session.is_modified()`](#sqlalchemy.orm.Session.is_modified "sqlalchemy.orm.Session.is_modified")
    method.
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查实例的属性是否具有可执行的净变化，请使用[`Session.is_modified()`](#sqlalchemy.orm.Session.is_modified
    "sqlalchemy.orm.Session.is_modified")方法。
- en: '[PRE200]'
  id: totrans-1256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: Associate an object with this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    for related object loading.
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: 将对象与此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")关联以加载相关对象。
- en: Warning
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '[`enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") exists to serve special
    use cases and is not recommended for general use.'
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
  zh: '[`enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading")存在于服务于特殊用例，并不建议一般使用。'
- en: Accesses of attributes mapped with [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") will attempt to load a value from the database
    using this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") as the
    source of connectivity. The values will be loaded based on foreign key and primary
    key values present on this object - if not present, then those relationships will
    be unavailable.
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: 通过[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")映射的属性访问将尝试使用此[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")作为连接的源来从数据库加载值。这些值将根据此对象上存在的外键和主键值进行加载 - 如果不存在，则这些关系将不可用。
- en: The object will be attached to this session, but will **not** participate in
    any persistence operations; its state for almost all purposes will remain either
    “transient” or “detached”, except for the case of relationship loading.
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
  zh: 对象将附加到此会话，但将**不会**参与任何持久化操作；对于几乎所有目的，其状态仍将保持“瞬态”或“分离”，除了关系加载的情况。
- en: Also note that backrefs will often not work as expected. Altering a relationship-bound
    attribute on the target object may not fire off a backref event, if the effective
    value is what was already loaded from a foreign-key-holding value.
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: 还请注意，反向引用通常不会按预期工作。在目标对象上修改与关系绑定的属性可能不会触发反向引用事件，如果有效值已从保存外键值中加载，则是如此。
- en: The [`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") method is similar to the
    `load_on_pending` flag on [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). Unlike that flag, [`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") allows an object to remain
    transient while still being able to load related items.
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading")方法类似于[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")上的`load_on_pending`标志。与该标志不同，[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading")允许对象保持瞬态状态，同时仍然能够加载相关项目。'
- en: To make a transient object associated with a [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") via [`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") pending, add it to the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") using [`Session.add()`](#sqlalchemy.orm.Session.add
    "sqlalchemy.orm.Session.add") normally. If the object instead represents an existing
    identity in the database, it should be merged using [`Session.merge()`](#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge").
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: 要使一个临时对象与[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")相关联，可以通过[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading")将其添加到[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。如果该对象代表数据库中现有的标识，则应使用[`Session.merge()`](#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge")进行合并。
- en: '[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading") does not improve behavior
    when the ORM is used normally - object references should be constructed at the
    object level, not at the foreign key level, so that they are present in an ordinary
    way before flush() proceeds. This method is not intended for general use.'
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading")在正常使用ORM时不会改善行为 - 对象引用应该在对象级别构建，而不是在外键级别构建，以便它们在flush()继续之前以普通方式存在。此方法不适用于一般用途。'
- en: See also
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`relationship.load_on_pending`](relationship_api.html#sqlalchemy.orm.relationship.params.load_on_pending
    "sqlalchemy.orm.relationship") - this flag allows per-relationship loading of
    many-to-ones on items that are pending.'
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: '[`relationship.load_on_pending`](relationship_api.html#sqlalchemy.orm.relationship.params.load_on_pending
    "sqlalchemy.orm.relationship") - 此标志允许在待处理项目上对多对一关系进行逐个加载。'
- en: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - allows for an object to be added
    to a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") without SQL
    emitted, which then will unexpire attributes on access.'
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
  zh: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - 允许将对象添加到[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中而不发出SQL，然后在访问时取消过期属性。'
- en: '[PRE201]'
  id: totrans-1269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: Execute a SQL expression construct.
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: 执行SQL表达式构造。
- en: Returns a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object representing results of the statement execution.
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
  zh: 返回代表语句执行结果的[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象。
- en: 'E.g.:'
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE202]'
  id: totrans-1273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: The API contract of [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    is similar to that of [`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute"), the [2.0 style](../glossary.html#term-2.0-style)
    version of [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")的API契约类似于[`Connection.execute()`](../core/connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute")的契约，是[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的[2.0风格](../glossary.html#term-2.0-style)版本。'
- en: 'Changed in version 1.4: the [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") method is now the primary point of ORM statement
    execution when using [2.0 style](../glossary.html#term-2.0-style) ORM usage.'
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：当使用[2.0风格](../glossary.html#term-2.0-style)的ORM用法时，[`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")方法现在是ORM语句执行的主要点。
- en: 'Parameters:'
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`statement` – An executable statement (i.e. an [`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable") expression such as [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")).'
  id: totrans-1277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`statement` – 可执行语句（即[`Executable`](../core/selectable.html#sqlalchemy.sql.expression.Executable
    "sqlalchemy.sql.expression.Executable")表达式，如[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")）。'
- en: '`params` – Optional dictionary, or list of dictionaries, containing bound parameter
    values. If a single dictionary, single-row execution occurs; if a list of dictionaries,
    an “executemany” will be invoked. The keys in each dictionary must correspond
    to parameter names present in the statement.'
  id: totrans-1278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params` – 可选字典，或包含绑定参数值的字典列表。如果是单个字典，则执行单行；如果是字典列表，则将调用“executemany”。每个字典中的键必须对应于语句中存在的参数名称。'
- en: '`execution_options` –'
  id: totrans-1279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` –'
- en: optional dictionary of execution options, which will be associated with the
    statement execution. This dictionary can provide a subset of the options that
    are accepted by [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), and may also provide additional
    options understood only in an ORM context.
  id: totrans-1280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的执行选项字典，将与语句执行关联起来。此字典可以提供[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")所接受的选项子集，也可以提供仅在ORM上下文中理解的附加选项。
- en: See also
  id: totrans-1281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)
    - ORM-specific execution options'
  id: totrans-1282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM执行选项](queryguide/api.html#orm-queryguide-execution-options) - ORM特定的执行选项'
- en: '`bind_arguments` – dictionary of additional arguments to determine the bind.
    May include “mapper”, “bind”, or other custom arguments. Contents of this dictionary
    are passed to the [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method.'
  id: totrans-1283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind_arguments` – 附加参数字典，用于确定绑定。可能包括“mapper”、“bind”或其他自定义参数。此字典的内容传递给[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法。'
- en: 'Returns:'
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object.
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Result`](../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")对象。
- en: '[PRE203]'
  id: totrans-1286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: Expire the attributes on an instance.
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
  zh: 使实例上的属性过期。
- en: Marks the attributes of an instance as out of date. When an expired attribute
    is next accessed, a query will be issued to the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object’s current transactional context in order to load
    all expired attributes for the given instance. Note that a highly isolated transaction
    will return the same values as were previously read in that same transaction,
    regardless of changes in database state outside of that transaction.
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例的属性标记为过时。下次访问过期属性时，将向[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的当前事务上下文发出查询，以便为给定实例加载所有过期属性。请注意，高度隔离的事务将返回与之前在同一事务中读取的相同值，而不管该事务之外的数据库状态如何更改。
- en: To expire all objects in the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    simultaneously, use [`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all").
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时使[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")中的所有对象过期，请使用[`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all")。
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") object’s default
    behavior is to expire all state whenever the [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") or [`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") methods are called, so that new state can be
    loaded for the new transaction. For this reason, calling [`Session.expire()`](#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire") only makes sense for the specific case that a
    non-ORM SQL statement was emitted in the current transaction.
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的默认行为是在调用[`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")或[`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")方法时使所有状态过期，以便为新事务加载新状态。因此，仅在当前事务中发出非ORM SQL语句的情况下调用[`Session.expire()`](#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire")才有意义。'
- en: 'Parameters:'
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – The instance to be refreshed.'
  id: totrans-1292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 要刷新的实例。'
- en: '`attribute_names` – optional list of string attribute names indicating a subset
    of attributes to be expired.'
  id: totrans-1293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attribute_names` – 可选的字符串属性名称列表，指示要过期的属性子集。'
- en: See also
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新/过期](session_state_management.html#session-expire) - 介绍性材料'
- en: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
- en: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '[PRE204]'
  id: totrans-1299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: Expires all persistent instances within this Session.
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
  zh: 使此会话中的所有持久实例过期。
- en: When any attributes on a persistent instance is next accessed, a query will
    be issued using the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object’s current transactional context in order to load all expired attributes
    for the given instance. Note that a highly isolated transaction will return the
    same values as were previously read in that same transaction, regardless of changes
    in database state outside of that transaction.
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
  zh: 当对持久实例上的任何属性进行下一次访问时，将使用[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的当前事务上下文发出查询，以加载给定实例的所有过期属性。请注意，高度隔离的事务将返回与之前在同一事务中读取的相同值，而不管事务外数据库状态的更改如何。
- en: To expire individual objects and individual attributes on those objects, use
    [`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire").
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
  zh: 要使单个对象及其上的单个属性过期，请使用[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")。
- en: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") object’s default
    behavior is to expire all state whenever the [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") or [`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit") methods are called, so that new state can be
    loaded for the new transaction. For this reason, calling [`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all") is not usually needed, assuming the transaction
    is isolated.
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用[`Session.rollback()`](#sqlalchemy.orm.Session.rollback "sqlalchemy.orm.Session.rollback")或[`Session.commit()`](#sqlalchemy.orm.Session.commit
    "sqlalchemy.orm.Session.commit")方法时，[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的默认行为是使所有状态过期，以便为新事务加载新状态。因此，通常不需要调用[`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all
    "sqlalchemy.orm.Session.expire_all")，假设事务是隔离的。
- en: See also
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新/过期](session_state_management.html#session-expire) - 简介材料'
- en: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")'
- en: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Query.populate_existing()`](queryguide/query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")'
- en: '[PRE205]'
  id: totrans-1309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: Remove the instance from this `Session`.
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: 从此`Session`中删除实例。
- en: This will free all internal references to the instance. Cascading will be applied
    according to the *expunge* cascade rule.
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
  zh: 这将释放所有对实例的内部引用。级联将根据*expunge*级联规则应用。
- en: '[PRE206]'
  id: totrans-1312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: Remove all object instances from this `Session`.
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: 从此`Session`中删除所有对象实例。
- en: This is equivalent to calling `expunge(obj)` on all objects in this `Session`.
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于在此`Session`中调用`expunge(obj)`以将所有对象从中清除。
- en: '[PRE207]'
  id: totrans-1315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: Flush all the object changes to the database.
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有对象更改刷新到数据库。
- en: Writes out all pending object creations, deletions and modifications to the
    database as INSERTs, DELETEs, UPDATEs, etc. Operations are automatically ordered
    by the Session’s unit of work dependency solver.
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有待处理的对象创建、删除和修改操作写入数据库，作为INSERTs、DELETEs、UPDATEs等。操作会自动按照会话的工作单元依赖解析器的顺序进行排序。
- en: Database operations will be issued in the current transactional context and
    do not affect the state of the transaction, unless an error occurs, in which case
    the entire transaction is rolled back. You may flush() as often as you like within
    a transaction to move changes from Python to the database’s transaction buffer.
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库操作将在当前事务上下文中发出，并且不会影响事务的状态，除非发生错误，在这种情况下将回滚整个事务。您可以在事务中随意刷新()，以将更改从Python移动到数据库的事务缓冲区。
- en: 'Parameters:'
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**objects** –'
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: '**objects** –'
- en: Optional; restricts the flush operation to operate only on elements that are
    in the given collection.
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
  zh: 可选；仅将刷新操作限制为仅操作给定集合中的元素。
- en: This feature is for an extremely narrow set of use cases where particular objects
    may need to be operated upon before the full flush() occurs. It is not intended
    for general use.
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能适用于极其狭窄的一组用例，其中特定对象可能需要在完全执行flush()之前操作。不适用于一般用途。
- en: '[PRE208]'
  id: totrans-1323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: Return an instance based on the given primary key identifier, or `None` if not
    found.
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的主键标识符返回一个实例，如果找不到则返回`None`。
- en: 'E.g.:'
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE209]'
  id: totrans-1326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: 'New in version 1.4: Added [`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get"),
    which is moved from the now legacy [`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get") method.'
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能：添加了[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")，该方法已从现已过时的[`Query.get()`](queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get")方法中移除。
- en: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    is special in that it provides direct access to the identity map of the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"). If the given primary key identifier is present in the
    local identity map, the object is returned directly from this collection and no
    SQL is emitted, unless the object has been marked fully expired. If not present,
    a SELECT is performed in order to locate the object.'
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    是特殊的，因为它直接提供对[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的标识映射的访问。如果给定的主键标识符存在于本地标识映射中，则直接从该集合返回对象，并且不会发出
    SQL，除非对象已被标记为完全过期。如果不存在，则执行 SELECT 来定位对象。'
- en: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    also will perform a check if the object is present in the identity map and marked
    as expired - a SELECT is emitted to refresh the object as well as to ensure that
    the row is still present. If not, [`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError") is raised.'
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    还会检查对象是否存在于标识映射中并标记为过期 - 会发出 SELECT 来刷新对象，并确保行仍然存在。如果不是，则引发 [`ObjectDeletedError`](exceptions.html#sqlalchemy.orm.exc.ObjectDeletedError
    "sqlalchemy.orm.exc.ObjectDeletedError")。'
- en: 'Parameters:'
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`entity` – a mapped class or [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") indicating the type of entity to be loaded.'
  id: totrans-1331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entity` – 表示要加载的实体类型的映射类或[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")。'
- en: '`ident` –'
  id: totrans-1332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ident` –'
- en: A scalar, tuple, or dictionary representing the primary key. For a composite
    (e.g. multiple column) primary key, a tuple or dictionary should be passed.
  id: totrans-1333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代表主键的标量、元组或字典。对于复合（例如多列）主键，应传递元组或字典。
- en: 'For a single-column primary key, the scalar calling form is typically the most
    expedient. If the primary key of a row is the value “5”, the call looks like:'
  id: totrans-1334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于单列主键，标量调用形式通常是最快捷的。如果行的主键值是“5”，则调用如下：
- en: '[PRE210]'
  id: totrans-1335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: 'The tuple form contains primary key values typically in the order in which
    they correspond to the mapped [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") object’s primary key columns, or if the [`Mapper.primary_key`](mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper") configuration parameter were used, in the order used
    for that parameter. For example, if the primary key of a row is represented by
    the integer digits “5, 10” the call would look like:'
  id: totrans-1336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 元组形式通常按照它们与映射的[`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")对象的主键列对应的顺序排列，或者如果使用了[`Mapper.primary_key`](mapping_api.html#sqlalchemy.orm.Mapper.params.primary_key
    "sqlalchemy.orm.Mapper")配置参数，则按照该参数的使用顺序排列。例如，如果一行的主键由整数数字“5, 10”表示，则调用将如下所示：
- en: '[PRE211]'
  id: totrans-1337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: 'The dictionary form should include as keys the mapped attribute names corresponding
    to each element of the primary key. If the mapped class has the attributes `id`,
    `version_id` as the attributes which store the object’s primary key value, the
    call would look like:'
  id: totrans-1338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 字典形式应该将每个主键元素对应的映射属性名称作为键。如果映射类具有存储对象主键值的属性`id`、`version_id`，则调用将如下所示：
- en: '[PRE212]'
  id: totrans-1339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '`options` – optional sequence of loader options which will be applied to the
    query, if one is emitted.'
  id: totrans-1340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options` – 可选的加载器选项序列，将应用于查询（如果发出了查询）。'
- en: '`populate_existing` – causes the method to unconditionally emit a SQL query
    and refresh the object with the newly loaded data, regardless of whether or not
    the object is already present.'
  id: totrans-1341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`populate_existing` – 导致该方法无条件地发出 SQL 查询并使用新加载的数据刷新对象，无论对象是否已存在。'
- en: '`with_for_update` – optional boolean `True` indicating FOR UPDATE should be
    used, or may be a dictionary containing flags to indicate a more specific set
    of FOR UPDATE flags for the SELECT; flags should match the parameters of [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Supersedes the [`Session.refresh.lockmode`](#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") parameter.'
  id: totrans-1342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_for_update` – 可选的布尔值`True`表示应该使用FOR UPDATE，或者可以是一个包含标志的字典，表示一个更具体的用于SELECT的FOR
    UPDATE标志集合；标志应该与[`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")的参数匹配。覆盖[`Session.refresh.lockmode`](#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh")参数。'
- en: '`execution_options` –'
  id: totrans-1343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execution_options` –'
- en: optional dictionary of execution options, which will be associated with the
    query execution if one is emitted. This dictionary can provide a subset of the
    options that are accepted by [`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"), and may also provide additional
    options understood only in an ORM context.
  id: totrans-1344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的执行选项字典，如果发出了查询执行，则将与之相关联。此字典可以提供由[`Connection.execution_options()`](../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")接受的选项的子集，并且还可以提供仅在ORM上下文中理解的其他选项。
- en: New in version 1.4.29.
  id: totrans-1345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本中的1.4.29。
- en: See also
  id: totrans-1346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[ORM Execution Options](queryguide/api.html#orm-queryguide-execution-options)
    - ORM-specific execution options'
  id: totrans-1347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM执行选项](queryguide/api.html#orm-queryguide-execution-options) - ORM特定的执行选项'
- en: '`bind_arguments` –'
  id: totrans-1348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bind_arguments` –'
- en: dictionary of additional arguments to determine the bind. May include “mapper”,
    “bind”, or other custom arguments. Contents of this dictionary are passed to the
    [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method.
  id: totrans-1349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用于确定绑定的其他参数的字典。可能包括“mapper”，“bind”或其他自定义参数。此字典的内容将传递给[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")方法。
- en: 'Returns:'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The object instance, or `None`.
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: 对象实例，或者`None`。
- en: '[PRE213]'
  id: totrans-1352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: Return a “bind” to which this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is bound.
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: 返回此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")所绑定到的“绑定”。
- en: The “bind” is usually an instance of [`Engine`](../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine"), except in the case where the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has been explicitly bound directly to a [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: “绑定”通常是[`Engine`](../core/connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")的一个实例，除非[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")已经被明确地直接绑定到一个[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")的情况除外。
- en: For a multiply-bound or unbound [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    the `mapper` or `clause` arguments are used to determine the appropriate bind
    to return.
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多次绑定或未绑定的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")，使用`mapper`或`clause`参数来确定返回的适当绑定。
- en: Note that the “mapper” argument is usually present when [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind") is called via an ORM operation such as a [`Session.query()`](#sqlalchemy.orm.Session.query
    "sqlalchemy.orm.Session.query"), each individual INSERT/UPDATE/DELETE operation
    within a [`Session.flush()`](#sqlalchemy.orm.Session.flush "sqlalchemy.orm.Session.flush"),
    call, etc.
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当通过ORM操作（例如[`Session.query()`](#sqlalchemy.orm.Session.query "sqlalchemy.orm.Session.query")、[`Session.flush()`](#sqlalchemy.orm.Session.flush
    "sqlalchemy.orm.Session.flush")调用等）调用[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind
    "sqlalchemy.orm.Session.get_bind")时，“mapper”参数通常存在。
- en: 'The order of resolution is:'
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: 解析的顺序是：
- en: if mapper given and [`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")
    is present, locate a bind based first on the mapper in use, then on the mapped
    class in use, then on any base classes that are present in the `__mro__` of the
    mapped class, from more specific superclasses to more general.
  id: totrans-1358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果提供了mapper并且[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")存在，则根据使用的mapper，然后根据使用的mapped类，然后根据mapped类的`__mro__`中存在的任何基类，从更具体的超类到更一般的超类来定位一个绑定。
- en: if clause given and `Session.binds` is present, locate a bind based on [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") objects found in the given clause present in `Session.binds`.
  id: totrans-1359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果给定了子句并且存在`Session.binds`，则基于`Session.binds`中存在的给定子句中找到的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")对象定位一个绑定。
- en: if `Session.binds` is present, return that.
  id: totrans-1360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果存在`Session.binds`，则返回该绑定。
- en: if clause given, attempt to return a bind linked to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the clause.
  id: totrans-1361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果给定了子句，则尝试返回与最终与子句关联的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")相关联的绑定。
- en: if mapper given, attempt to return a bind linked to the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData") ultimately associated with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or other selectable to which the mapper is mapped.
  id: totrans-1362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果给定了映射器，则尝试返回与最终与映射器映射到的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或其他可选择的绑定相关联的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")。
- en: No bind can be found, [`UnboundExecutionError`](../core/exceptions.html#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError") is raised.
  id: totrans-1363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找不到绑定时，将引发[`UnboundExecutionError`](../core/exceptions.html#sqlalchemy.exc.UnboundExecutionError
    "sqlalchemy.exc.UnboundExecutionError")。
- en: Note that the [`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    method can be overridden on a user-defined subclass of [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to provide any kind of bind resolution scheme. See the
    example at [Custom Vertical Partitioning](persistence_techniques.html#session-custom-partitioning).
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，[`Session.get_bind()`](#sqlalchemy.orm.Session.get_bind "sqlalchemy.orm.Session.get_bind")
    方法可以在用户定义的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")子类上被重写，以提供任何类型的绑定解析方案。请参见[自定义垂直分区](persistence_techniques.html#session-custom-partitioning)中的示例。
- en: 'Parameters:'
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`mapper` – Optional mapped class or corresponding [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") instance. The bind can be derived from a [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") first by consulting the “binds” map associated with this
    [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session"), and secondly by
    consulting the [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData "sqlalchemy.schema.MetaData")
    associated with the [`Table`](../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    to which the [`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    is mapped for a bind.'
  id: totrans-1366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` – 可选的映射类或对应的[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")实例。绑定可以首先从与此[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")关联的“binds”映射中派生[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")，其次通过查看与[`Mapper`](mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")映射到的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")相关联的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")来获取。'
- en: '`clause` – A [`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") (i.e. [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select"), [`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text"), etc.). If the `mapper` argument is not present
    or could not produce a bind, the given expression construct will be searched for
    a bound element, typically a [`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") associated with bound [`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData").'
  id: totrans-1367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clause` – 一个[`ClauseElement`](../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")（即[`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")，[`text()`](../core/sqlelement.html#sqlalchemy.sql.expression.text
    "sqlalchemy.sql.expression.text")等）。如果`mapper`参数不存在或无法生成绑定，则将搜索给定表达式构造的绑定元素，通常是与绑定的[`MetaData`](../core/metadata.html#sqlalchemy.schema.MetaData
    "sqlalchemy.schema.MetaData")相关联的[`Table`](../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")。'
- en: See also
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Partitioning Strategies (e.g. multiple database backends per Session)](persistence_techniques.html#session-partitioning)'
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: '[分区策略（例如每个Session多个数据库后���）](persistence_techniques.html#session-partitioning)'
- en: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session")'
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.binds`](#sqlalchemy.orm.Session.params.binds "sqlalchemy.orm.Session") '
- en: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bind_mapper()`](#sqlalchemy.orm.Session.bind_mapper "sqlalchemy.orm.Session.bind_mapper")'
- en: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.bind_table()`](#sqlalchemy.orm.Session.bind_table "sqlalchemy.orm.Session.bind_table")'
- en: '[PRE214]'
  id: totrans-1373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: Return the current nested transaction in progress, if any.
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前正在进行的嵌套事务，如果有的话。
- en: New in version 1.4.
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: '[PRE215]'
  id: totrans-1376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: Return exactly one instance based on the given primary key identifier, or raise
    an exception if not found.
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的主键标识符返回一个实例，如果未找到则引发异常。
- en: Raises `sqlalchemy.orm.exc.NoResultFound` if the query selects no rows.
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查询未选择任何行，则引发`sqlalchemy.orm.exc.NoResultFound`。
- en: For a detailed documentation of the arguments see the method [`Session.get()`](#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get").
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: 有关参数的详细文档，请参见方法[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")。
- en: New in version 2.0.22.
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.22 中的新功能。
- en: 'Returns:'
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: The object instance.
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
  zh: 对象实例。
- en: See also
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - equivalent method that instead'
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get()`](#sqlalchemy.orm.Session.get "sqlalchemy.orm.Session.get")
    - 相当的方法，而不是'
- en: returns `None` if no row was found with the provided primary key
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未找到具有提供的主键的行，则返回`None`。
- en: '[PRE216]'
  id: totrans-1386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: Return the current root transaction in progress, if any.
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前正在进行的根事务，如果有的话。
- en: New in version 1.4.
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: '[PRE217]'
  id: totrans-1389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.identity_key`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.orm.session._SessionClassMethods.identity_key` *方法的* `sqlalchemy.orm.session._SessionClassMethods`'
- en: Return an identity key.
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个标识键。
- en: This is an alias of [`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key
    "sqlalchemy.orm.util.identity_key").
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key "sqlalchemy.orm.util.identity_key")的别名。
- en: '[PRE218]'
  id: totrans-1393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: A mapping of object identities to objects themselves.
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: 对象标识与对象本身的映射。
- en: Iterating through `Session.identity_map.values()` provides access to the full
    set of persistent objects (i.e., those that have row identity) currently in the
    session.
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遍历`Session.identity_map.values()`可以访问当前会话中的所有持久对象的完整集合（即具有行标识的对象）。
- en: See also
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key "sqlalchemy.orm.util.identity_key")
    - helper function to produce the keys used in this dictionary.'
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: '[`identity_key()`](mapping_api.html#sqlalchemy.orm.util.identity_key "sqlalchemy.orm.util.identity_key")
    - 用于生成此字典中使用的键的辅助函数。'
- en: '[PRE219]'
  id: totrans-1398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: Return True if this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    has begun a nested transaction, e.g. SAVEPOINT.
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此`Session`已开始嵌套事务（例如 SAVEPOINT），则返回True。
- en: New in version 1.4.
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: '[PRE220]'
  id: totrans-1401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: Return True if this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    has begun a transaction.
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此`Session`已开始事务，则返回True。
- en: New in version 1.4.
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: See also
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`Session.is_active`](#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")'
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.is_active`](#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")'
- en: '[PRE221]'
  id: totrans-1406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: A user-modifiable dictionary.
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可修改的字典。
- en: The initial value of this dictionary can be populated using the `info` argument
    to the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") constructor
    or [`sessionmaker`](#sqlalchemy.orm.sessionmaker "sqlalchemy.orm.sessionmaker")
    constructor or factory methods. The dictionary here is always local to this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") and can be modified independently of all other [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects.
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: 此字典的初始值可以使用`Session`构造函数或`sessionmaker`构造函数或工厂方法的`info`参数进行填充。此处的字典始终局限于此`Session`，可以独立于所有其他`Session`对象进行修改。
- en: '[PRE222]'
  id: totrans-1409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: Close this Session, using connection invalidation.
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: 使用连接失效关闭此会话。
- en: This is a variant of [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    that will additionally ensure that the [`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate") method will be called on each [`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object that is currently in use for a transaction
    (typically there is only one connection unless the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is used with multiple engines).
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")的变体，还将确保在当前用于事务的每个[`Connection`](../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")对象上调用[`Connection.invalidate()`](../core/connections.html#sqlalchemy.engine.Connection.invalidate
    "sqlalchemy.engine.Connection.invalidate")方法（通常只有一个连接，除非[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")与多个引擎一起使用）。
- en: This can be called when the database is known to be in a state where the connections
    are no longer safe to be used.
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: 当已知数据库处于不再安全使用连接的状态时，可以调用此方法。
- en: 'Below illustrates a scenario when using [gevent](https://www.gevent.org/),
    which can produce `Timeout` exceptions that may mean the underlying connection
    should be discarded:'
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: 下面说明了使用[gevent](https://www.gevent.org/)时可能出现的`Timeout`异常的情况，这可能意味着应丢弃底层连接：
- en: '[PRE223]'
  id: totrans-1414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: The method additionally does everything that [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") does, including that all ORM objects are expunged.
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法还执行[`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")执行的所有操作，包括清除所有
    ORM 对象。
- en: '[PRE224]'
  id: totrans-1416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: True if this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") not
    in “partial rollback” state.
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")不处于“部分回滚”状态，则为
    True。
- en: 'Changed in version 1.4: The [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    no longer begins a new transaction immediately, so this attribute will be False
    when the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") is first
    instantiated.'
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中更改：[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 不再立即开始新事务，因此当首次实例化[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时，此属性将为 False。
- en: “partial rollback” state typically indicates that the flush process of the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") has failed, and that the [`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback") method must be emitted in order to fully roll
    back the transaction.
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: “部分回滚”状态通常表示[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的刷新过程失败，并且必须发出[`Session.rollback()`](#sqlalchemy.orm.Session.rollback
    "sqlalchemy.orm.Session.rollback")方法以完全回滚事务。
- en: If this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") is not
    in a transaction at all, the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    will autobegin when it is first used, so in this case [`Session.is_active`](#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active") will return True.
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")根本不处于事务中，则在首次使用时[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")将自动开始，因此在这种情况下[`Session.is_active`](#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")将返回 True。
- en: Otherwise, if this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    is within a transaction, and that transaction has not been rolled back internally,
    the [`Session.is_active`](#sqlalchemy.orm.Session.is_active "sqlalchemy.orm.Session.is_active")
    will also return True.
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，如果此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")在事务内，并且该事务尚未在内部回滚，则[`Session.is_active`](#sqlalchemy.orm.Session.is_active
    "sqlalchemy.orm.Session.is_active")也将返回 True。
- en: See also
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[“This Session’s transaction has been rolled back due to a previous exception
    during flush.” (or similar)](../faq/sessions.html#faq-session-rollback)'
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: '[“由于在刷新期间发生的先前异常，此会话的事务已回滚。”（或类似内容）](../faq/sessions.html#faq-session-rollback)'
- en: '[`Session.in_transaction()`](#sqlalchemy.orm.Session.in_transaction "sqlalchemy.orm.Session.in_transaction")'
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.in_transaction()`](#sqlalchemy.orm.Session.in_transaction "sqlalchemy.orm.Session.in_transaction")'
- en: '[PRE225]'
  id: totrans-1425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: Return `True` if the given instance has locally modified attributes.
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 `True` 如果给定的实例具有本地修改的属性。
- en: This method retrieves the history for each instrumented attribute on the instance
    and performs a comparison of the current value to its previously committed value,
    if any.
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法检索实例上每个受监视属性的历史记录，并将当前值与先前提交的值进行比较（如果有的话）。
- en: It is in effect a more expensive and accurate version of checking for the given
    instance in the [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")
    collection; a full test for each attribute’s net “dirty” status is performed.
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这是一种更昂贵和准确的版本，用于检查给定实例是否存在于 [`Session.dirty`](#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") 集合中；对每个属性的净“脏”状态进行了完整测试。
- en: 'E.g.:'
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE226]'
  id: totrans-1430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: 'A few caveats to this method apply:'
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有一些注意事项：
- en: Instances present in the [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")
    collection may report `False` when tested with this method. This is because the
    object may have received change events via attribute mutation, thus placing it
    in [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty"),
    but ultimately the state is the same as that loaded from the database, resulting
    in no net change here.
  id: totrans-1432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当测试使用此方法时，存在于 [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")
    集合中的实例可能会报告 `False`。这是因为对象可能已通过属性变化接收到更改事件，从而将其放置在 [`Session.dirty`](#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") 中，但最终状态与从数据库加载的状态相同，在这里没有净变化。
- en: Scalar attributes may not have recorded the previously set value when a new
    value was applied, if the attribute was not loaded, or was expired, at the time
    the new value was received - in these cases, the attribute is assumed to have
    a change, even if there is ultimately no net change against its database value.
    SQLAlchemy in most cases does not need the “old” value when a set event occurs,
    so it skips the expense of a SQL call if the old value isn’t present, based on
    the assumption that an UPDATE of the scalar value is usually needed, and in those
    few cases where it isn’t, is less expensive on average than issuing a defensive
    SELECT.
  id: totrans-1433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当新值被应用时，标量属性可能没有记录先前设置的值，如果属性在接收到新值时没有被加载或已过期，则假定属性发生了变化，即使最终与其数据库值相比没有净变化，在大多数情况下，当设置事件发生时，SQLAlchemy
    不需要“旧”值，因此，如果旧值不存在，则跳过发出 SQL 调用的开销，这是基于这样一个假设：通常需要更新标量值，并且在那些极少数情况下，其中不需要，平均而言，这比发出防御性
    SELECT 更便宜。
- en: The “old” value is fetched unconditionally upon set only if the attribute container
    has the `active_history` flag set to `True`. This flag is set typically for primary
    key attributes and scalar object references that are not a simple many-to-one.
    To set this flag for any arbitrary mapped column, use the `active_history` argument
    with [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property").
  id: totrans-1434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有当属性容器的 `active_history` 标志设置为 `True` 时，才无条件地在设置时获取“旧”值。此标志通常设置为主键属性和非简单一对多的标量对象引用。要为任意映射列设置此标志，请使用
    [`column_property()`](mapping_api.html#sqlalchemy.orm.column_property "sqlalchemy.orm.column_property")
    中的 `active_history` 参数。
- en: 'Parameters:'
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – mapped instance to be tested for pending changes.'
  id: totrans-1436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 要测试是否存在待处理更改的映射实例。'
- en: '`include_collections` – Indicates if multivalued collections should be included
    in the operation. Setting this to `False` is a way to detect only local-column
    based properties (i.e. scalar columns or many-to-one foreign keys) that would
    result in an UPDATE for this instance upon flush.'
  id: totrans-1437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_collections` – 指示是否应该在操作中包含多值集合。将其设置为 `False` 是一种检测仅基于本地列的属性（即标量列或一对多外键），这将导致此实例在刷新时进行更新。'
- en: '[PRE227]'
  id: totrans-1438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: Copy the state of a given instance into a corresponding instance within this
    [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定实例的状态复制到此 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 中对应的实例。
- en: '[`Session.merge()`](#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    examines the primary key attributes of the source instance, and attempts to reconcile
    it with an instance of the same primary key in the session. If not found locally,
    it attempts to load the object from the database based on primary key, and if
    none can be located, creates a new instance. The state of each attribute on the
    source instance is then copied to the target instance. The resulting target instance
    is then returned by the method; the original source instance is left unmodified,
    and un-associated with the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    if not already.'
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.merge()`](#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    检查源实例的主键属性，并尝试将其与会话中具有相同主键的实例进行协调。如果在本地找不到，则尝试根据主键从数据库加载对象，如果找不到，则创建一个新实例。然后将源实例上的每个属性的状态复制到目标实例。然后，该方法返回结果目标实例；原始源实例保持不变，并且如果尚未与[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 关联，则不与其关联。'
- en: This operation cascades to associated instances if the association is mapped
    with `cascade="merge"`.
  id: totrans-1441
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作级联到相关实例，如果关联使用 `cascade="merge"` 进行映射。
- en: See [Merging](session_state_management.html#unitofwork-merging) for a detailed
    discussion of merging.
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
  zh: 有关合并的详细讨论，请参见[合并](session_state_management.html#unitofwork-merging)。
- en: 'Parameters:'
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – Instance to be merged.'
  id: totrans-1444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 要合并的实例。'
- en: '`load` –'
  id: totrans-1445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`load` –'
- en: Boolean, when False, [`merge()`](#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    switches into a “high performance” mode which causes it to forego emitting history
    events as well as all database access. This flag is used for cases such as transferring
    graphs of objects into a [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    from a second level cache, or to transfer just-loaded objects into the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") owned by a worker thread or process without re-querying
    the database.
  id: totrans-1446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 布尔值，当为 False 时，[`merge()`](#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    切换到“高性能”模式，导致它放弃发出历史事件以及所有数据库访问。此标志用于将对象图传输到从第二级缓存中的[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 中，或者将刚加载的对象传输到由工作线程或进程拥有的[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 中，而无需重新查询数据库。
- en: The `load=False` use case adds the caveat that the given object has to be in
    a “clean” state, that is, has no pending changes to be flushed - even if the incoming
    object is detached from any [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    This is so that when the merge operation populates local attributes and cascades
    to related objects and collections, the values can be “stamped” onto the target
    object as is, without generating any history or attribute events, and without
    the need to reconcile the incoming data with any existing related objects or collections
    that might not be loaded. The resulting objects from `load=False` are always produced
    as “clean”, so it is only appropriate that the given objects should be “clean”
    as well, else this suggests a mis-use of the method.
  id: totrans-1447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`load=False` 的使用情况添加了一个警告，即给定对象必须处于“干净”的状态，即没有任何待冲刷的更改 - 即使传入的对象是从任何一个[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 分离出来的。这样，当合并操作填充本地属性并级联到相关对象和集合时，值可以“按原样”放置到目标对象上，而不会生成任何历史或属性事件，并且无需将传入的数据与可能未加载的任何现有相关对象或集合进行协调。`load=False`
    生成的结果对象始终为“干净”，因此只有给定对象也应为“干净”，否则这表明方法的错误使用。'
- en: '`options` –'
  id: totrans-1448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options` –'
- en: optional sequence of loader options which will be applied to the [`Session.get()`](#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") method when the merge operation loads the existing
    version of the object from the database.
  id: totrans-1449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可选的加载器选项序列，在合并操作从数据库加载对象的现有版本时将应用于[`Session.get()`](#sqlalchemy.orm.Session.get
    "sqlalchemy.orm.Session.get") 方法。
- en: New in version 1.4.24.
  id: totrans-1450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.4.24 中新增。
- en: See also
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - provides for an alternative means
    of “merging” a single object into the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")'
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
  zh: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") - 提供了将单个对象“合并”到[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 的另一种方法。'
- en: '[PRE228]'
  id: totrans-1453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: The set of all instances marked as ‘new’ within this `Session`.
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`Session`中标记为“新”的所有实例的集合。
- en: '[PRE229]'
  id: totrans-1455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: Return a context manager that disables autoflush.
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个禁用自动冲刷的上下文管理器。
- en: 'e.g.:'
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE230]'
  id: totrans-1458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: Operations that proceed within the `with:` block will not be subject to flushes
    occurring upon query access. This is useful when initializing a series of objects
    which involve existing database queries, where the uncompleted object should not
    yet be flushed.
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `with:` 块内进行的操作不会受到查询访问时发生的 flush 的影响。这在初始化一系列涉及现有数据库查询的对象时很有用，此时尚未完成的对象不应立即被
    flush。
- en: '[PRE231]'
  id: totrans-1460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '*inherited from the* `sqlalchemy.orm.session._SessionClassMethods.object_session`
    *method of* `sqlalchemy.orm.session._SessionClassMethods`'
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: '*继承自* `sqlalchemy.orm.session._SessionClassMethods` *的* `sqlalchemy.orm.session._SessionClassMethods.object_session`
    *方法*'
- en: Return the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") to
    which an object belongs.
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个对象所属的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: This is an alias of [`object_session()`](#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session").
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 [`object_session()`](#sqlalchemy.orm.object_session "sqlalchemy.orm.object_session")
    方法的别名。
- en: '[PRE232]'
  id: totrans-1464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: Prepare the current transaction in progress for two phase commit.
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: 准备进行中的当前事务以进行两阶段提交。
- en: If no transaction is in progress, this method raises an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError").
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有进行中的事务，则此方法会引发一个[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: Only root transactions of two phase sessions can be prepared. If the current
    transaction is not such, an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised.
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
  zh: 仅两阶段会话的根事务才能被准备。如果当前事务不是这样的事务，则会引发 [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: '[PRE233]'
  id: totrans-1468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: Return a new [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object corresponding to this [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个与此 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 对应的新 [`Query`](queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象。
- en: Note that the [`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object is legacy as of SQLAlchemy 2.0; the [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct is now used to construct ORM queries.
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[`Query`](queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象在 SQLAlchemy 2.0 中已经是遗留的；现在使用 [`select()`](../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造 ORM 查询。
- en: See also
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[SQLAlchemy Unified Tutorial](../tutorial/index.html#unified-tutorial)'
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQLAlchemy 统一教程](../tutorial/index.html#unified-tutorial)'
- en: '[ORM Querying Guide](queryguide/index.html)'
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 查询指南](queryguide/index.html)'
- en: '[Legacy Query API](queryguide/query.html) - legacy API doc'
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: '[旧版查询 API](queryguide/query.html) - 旧版 API 文档'
- en: '[PRE234]'
  id: totrans-1475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: Expire and refresh attributes on the given instance.
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
  zh: 过期并刷新给定实例上的属性。
- en: The selected attributes will first be expired as they would when using [`Session.expire()`](#sqlalchemy.orm.Session.expire
    "sqlalchemy.orm.Session.expire"); then a SELECT statement will be issued to the
    database to refresh column-oriented attributes with the current value available
    in the current transaction.
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
  zh: 选定的属性将首先被过期，就像使用 [`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")
    时一样；然后会向数据库发出 SELECT 语句，以当前事务中可用的当前值刷新基于列的属性。
- en: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    oriented attributes will also be immediately loaded if they were already eagerly
    loaded on the object, using the same eager loading strategy that they were loaded
    with originally.'
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
  zh: 如果对象已经急加载，那么以[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")为导向的属性也将立即加载，使用最初加载时的相同的急加载策略。
- en: 'New in version 1.4: - the [`Session.refresh()`](#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method can also refresh eagerly loaded attributes.'
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4 版本新增：- [`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    方法还可以立即刷新急加载的属性。
- en: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")
    oriented attributes that would normally load using the `select` (or “lazy”) loader
    strategy will also load **if they are named explicitly in the attribute_names
    collection**, emitting a SELECT statement for the attribute using the `immediate`
    loader strategy. If lazy-loaded relationships are not named in [`Session.refresh.attribute_names`](#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh"), then they remain as “lazy loaded” attributes
    and are not implicitly refreshed.'
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
  zh: '[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship "sqlalchemy.orm.relationship")定向属性通常使用`select`（或“lazy”）加载器策略将在属性名称集合中明确命名时也会加载**，使用`immediate`加载器策略发出用于属性的SELECT语句。如果惰性加载的关系未在[`Session.refresh.attribute_names`](#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh")中命名，则它们将保持为“惰性加载”属性，并且不会被隐式刷新。'
- en: 'Changed in version 2.0.4: The [`Session.refresh()`](#sqlalchemy.orm.Session.refresh
    "sqlalchemy.orm.Session.refresh") method will now refresh lazy-loaded [`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") oriented attributes for those which are named explicitly
    in the [`Session.refresh.attribute_names`](#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh") collection.'
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本2.0.4开始更改：[`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")方法现在将刷新在[`Session.refresh.attribute_names`](#sqlalchemy.orm.Session.refresh.params.attribute_names
    "sqlalchemy.orm.Session.refresh")集合中明确命名的惰性加载的[`relationship()`](relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")定向属性。
- en: Tip
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: While the [`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")
    method is capable of refreshing both column and relationship oriented attributes,
    its primary focus is on refreshing of local column-oriented attributes on a single
    instance. For more open ended “refresh” functionality, including the ability to
    refresh the attributes on many objects at once while having explicit control over
    relationship loader strategies, use the [populate existing](queryguide/api.html#orm-queryguide-populate-existing)
    feature instead.
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然[`Session.refresh()`](#sqlalchemy.orm.Session.refresh "sqlalchemy.orm.Session.refresh")方法能够刷新列和关系定向属性，但其主要重点是刷新单个实例上的本地列定向属性。对于更开放的“刷新”功能，包括能够同时刷新多个对象的属性并明确控制关系加载器策略，请改用[填充现有](queryguide/api.html#orm-queryguide-populate-existing)功能。
- en: Note that a highly isolated transaction will return the same values as were
    previously read in that same transaction, regardless of changes in database state
    outside of that transaction. Refreshing attributes usually only makes sense at
    the start of a transaction where database rows have not yet been accessed.
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，高度隔离的事务将返回与先前在该事务中读取的相同值，而不考虑该事务之外数据库状态的更改。通常只在事务开始时数据库行尚未被访问时刷新属性才有意义。
- en: 'Parameters:'
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`attribute_names` – optional. An iterable collection of string attribute names
    indicating a subset of attributes to be refreshed.'
  id: totrans-1486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attribute_names` – 可选。一个包含字符串属性名称的可迭代集合，指示要刷新的属性子集。'
- en: '`with_for_update` – optional boolean `True` indicating FOR UPDATE should be
    used, or may be a dictionary containing flags to indicate a more specific set
    of FOR UPDATE flags for the SELECT; flags should match the parameters of [`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update"). Supersedes the [`Session.refresh.lockmode`](#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh") parameter.'
  id: totrans-1487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_for_update` – 可选布尔值`True`表示应使用FOR UPDATE，或者可以是一个包含标志的字典，指示用于SELECT的更具体的FOR
    UPDATE标志集；标志应与[`Query.with_for_update()`](queryguide/query.html#sqlalchemy.orm.Query.with_for_update
    "sqlalchemy.orm.Query.with_for_update")参数匹配。取代[`Session.refresh.lockmode`](#sqlalchemy.orm.Session.refresh.params.lockmode
    "sqlalchemy.orm.Session.refresh")参数。'
- en: See also
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Refreshing / Expiring](session_state_management.html#session-expire) - introductory
    material'
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新/过期](session_state_management.html#session-expire) - 入门材料'
- en: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")'
- en: '[`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all "sqlalchemy.orm.Session.expire_all")'
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.expire_all()`](#sqlalchemy.orm.Session.expire_all "sqlalchemy.orm.Session.expire_all")'
- en: '[Populate Existing](queryguide/api.html#orm-queryguide-populate-existing) -
    allows any ORM query to refresh objects as they would be loaded normally.'
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
  zh: '[填充现有对象](queryguide/api.html#orm-queryguide-populate-existing) - 允许任何 ORM 查询刷新对象，就像它们通常加载的那样。'
- en: '[PRE235]'
  id: totrans-1493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: Close out the transactional resources and ORM objects used by this [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), resetting the session to its initial state.
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭事务资源和此[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")使用的 ORM
    对象，将会重置会话到其初始状态。
- en: This method provides for same “reset-only” behavior that the [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") method has provided historically, where the state
    of the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") is reset
    as though the object were brand new, and ready to be used again. This method may
    then be useful for [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects which set [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") to `False`, so that “reset only” behavior is still available.
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法提供了与[`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")方法历史上提供的相同“仅重置”行为，其中[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的状态被重置，就像对象是全新的一样，并且可以再次使用。然后，此方法可能对将[`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")设置为`False`的[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象有用，以便仍然可以使用“仅重置”行为。
- en: New in version 2.0.22.
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0.22 中新增。
- en: See also
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Closing](session_basics.html#session-closing) - detail on the semantics of
    [`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    and [`Session.reset()`](#sqlalchemy.orm.Session.reset "sqlalchemy.orm.Session.reset").'
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: '[关闭操作](session_basics.html#session-closing) - 关于[`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")和[`Session.reset()`](#sqlalchemy.orm.Session.reset
    "sqlalchemy.orm.Session.reset")语义的详细信息。'
- en: '[`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - a similar method will additionally prevent re-use of the Session when the parameter
    [`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session") is set to `False`.'
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.close()`](#sqlalchemy.orm.Session.close "sqlalchemy.orm.Session.close")
    - 当参数[`Session.close_resets_only`](#sqlalchemy.orm.Session.params.close_resets_only
    "sqlalchemy.orm.Session")设置为`False`时，类似的方法还会阻止重复使用`Session`。'
- en: '[PRE236]'
  id: totrans-1500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: Rollback the current transaction in progress.
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚当前进行中的事务。
- en: If no transaction is in progress, this method is a pass-through.
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有进行中的事务，则此方法是一个传递方法。
- en: The method always rolls back the topmost database transaction, discarding any
    nested transactions that may be in progress.
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法始终回滚最顶层的数据库事务，丢弃可能正在进行的任何嵌套事务。
- en: See also
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Rolling Back](session_basics.html#session-rollback)'
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
  zh: '[回滚操作](session_basics.html#session-rollback)'
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
  zh: '[事务管理](session_transaction.html#unitofwork-transaction)'
- en: '[PRE237]'
  id: totrans-1507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: Execute a statement and return a scalar result.
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并返回标量结果。
- en: Usage and parameters are the same as that of [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"); the return result is a scalar Python value.
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
  zh: 使用和参数与[`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")相同；返回结果是一个标量
    Python 值。
- en: '[PRE238]'
  id: totrans-1510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: Execute a statement and return the results as scalars.
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
  zh: 执行语句并将结果作为标量返回。
- en: Usage and parameters are the same as that of [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute"); the return result is a [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult") filtering object which will return single elements
    rather than [`Row`](../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    objects.
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
  zh: 使用和参数与[`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")相同；返回结果是一个过滤对象[`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult
    "sqlalchemy.engine.ScalarResult")，它将返回单个元素而不是[`Row`](../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")对象。
- en: 'Returns:'
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: a [`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")
    object
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`ScalarResult`](../core/connections.html#sqlalchemy.engine.ScalarResult "sqlalchemy.engine.ScalarResult")对象
- en: 'New in version 1.4.24: Added [`Session.scalars()`](#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")'
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.24 中新增：添加[`Session.scalars()`](#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
- en: 'New in version 1.4.26: Added [`scoped_session.scalars()`](contextual.html#sqlalchemy.orm.scoped_session.scalars
    "sqlalchemy.orm.scoped_session.scalars")'
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4.26 中新增：添加[`scoped_session.scalars()`](contextual.html#sqlalchemy.orm.scoped_session.scalars
    "sqlalchemy.orm.scoped_session.scalars")
- en: See also
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Selecting ORM Entities](queryguide/select.html#orm-queryguide-select-orm-entities)
    - contrasts the behavior of [`Session.execute()`](#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") to [`Session.scalars()`](#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")'
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
  zh: '[选择 ORM 实体](queryguide/select.html#orm-queryguide-select-orm-entities) - 对比
    [`Session.execute()`](#sqlalchemy.orm.Session.execute "sqlalchemy.orm.Session.execute")
    和 [`Session.scalars()`](#sqlalchemy.orm.Session.scalars "sqlalchemy.orm.Session.scalars")
    的行为'
- en: '[PRE239]'
  id: totrans-1519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: A [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")-level transaction.
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") 级别的事务。
- en: '[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    is produced from the [`Session.begin()`](#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")
    and [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")
    methods. It’s largely an internal object that in modern use provides a context
    manager for session transactions.'
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    是从 [`Session.begin()`](#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")
    和 [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")
    方法中生成的。它在现代用法中主要是一个为会话事务提供上下文管理器的内部对象。'
- en: 'Documentation on interacting with [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is at: [Managing Transactions](session_transaction.html#unitofwork-transaction).'
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: 与 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    交互的文档位于：[管理事务](session_transaction.html#unitofwork-transaction)。
- en: 'Changed in version 1.4: The scoping and API methods to work with the [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object directly have been simplified.'
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4 中更改：与 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    对象直接交互的作用域和 API 方法已经简化。
- en: See also
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Managing Transactions](session_transaction.html#unitofwork-transaction)'
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: '[管理事务](session_transaction.html#unitofwork-transaction)'
- en: '[`Session.begin()`](#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")'
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.begin()`](#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")'
- en: '[`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")'
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")'
- en: '[`Session.rollback()`](#sqlalchemy.orm.Session.rollback "sqlalchemy.orm.Session.rollback")'
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.rollback()`](#sqlalchemy.orm.Session.rollback "sqlalchemy.orm.Session.rollback")'
- en: '[`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")'
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")'
- en: '[`Session.in_transaction()`](#sqlalchemy.orm.Session.in_transaction "sqlalchemy.orm.Session.in_transaction")'
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.in_transaction()`](#sqlalchemy.orm.Session.in_transaction "sqlalchemy.orm.Session.in_transaction")'
- en: '[`Session.in_nested_transaction()`](#sqlalchemy.orm.Session.in_nested_transaction
    "sqlalchemy.orm.Session.in_nested_transaction")'
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.in_nested_transaction()`](#sqlalchemy.orm.Session.in_nested_transaction
    "sqlalchemy.orm.Session.in_nested_transaction")'
- en: '[`Session.get_transaction()`](#sqlalchemy.orm.Session.get_transaction "sqlalchemy.orm.Session.get_transaction")'
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get_transaction()`](#sqlalchemy.orm.Session.get_transaction "sqlalchemy.orm.Session.get_transaction")'
- en: '[`Session.get_nested_transaction()`](#sqlalchemy.orm.Session.get_nested_transaction
    "sqlalchemy.orm.Session.get_nested_transaction")'
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.get_nested_transaction()`](#sqlalchemy.orm.Session.get_nested_transaction
    "sqlalchemy.orm.Session.get_nested_transaction")'
- en: '**Members**'
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[nested](#sqlalchemy.orm.SessionTransaction.nested), [origin](#sqlalchemy.orm.SessionTransaction.origin),
    [parent](#sqlalchemy.orm.SessionTransaction.parent)'
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
  zh: '[嵌套](#sqlalchemy.orm.SessionTransaction.nested), [origin](#sqlalchemy.orm.SessionTransaction.origin),
    [父级](#sqlalchemy.orm.SessionTransaction.parent)'
- en: '**Class signature**'
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") (`sqlalchemy.orm.state_changes._StateChange`,
    `sqlalchemy.engine.util.TransactionalContext`)
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    (`sqlalchemy.orm.state_changes._StateChange`, `sqlalchemy.engine.util.TransactionalContext`)
- en: '[PRE240]'
  id: totrans-1538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: Indicates if this is a nested, or SAVEPOINT, transaction.
  id: totrans-1539
  prefs: []
  type: TYPE_NORMAL
  zh: 指示此事务是否为嵌套或 SAVEPOINT 事务。
- en: When [`SessionTransaction.nested`](#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested") is True, it is expected that [`SessionTransaction.parent`](#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent") will be present as well, linking to
    the enclosing [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction").
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`SessionTransaction.nested`](#sqlalchemy.orm.SessionTransaction.nested "sqlalchemy.orm.SessionTransaction.nested")
    为 True 时，预期 [`SessionTransaction.parent`](#sqlalchemy.orm.SessionTransaction.parent
    "sqlalchemy.orm.SessionTransaction.parent") 也将出现，并链接到封闭的 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction")。
- en: See also
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`SessionTransaction.origin`](#sqlalchemy.orm.SessionTransaction.origin "sqlalchemy.orm.SessionTransaction.origin")'
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SessionTransaction.origin`](#sqlalchemy.orm.SessionTransaction.origin "sqlalchemy.orm.SessionTransaction.origin")'
- en: '[PRE241]'
  id: totrans-1543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: Origin of this [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction").
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    的来源。
- en: Refers to a [`SessionTransactionOrigin`](#sqlalchemy.orm.SessionTransactionOrigin
    "sqlalchemy.orm.SessionTransactionOrigin") instance which is an enumeration indicating
    the source event that led to constructing this [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
  zh: 指的是一个 [`SessionTransactionOrigin`](#sqlalchemy.orm.SessionTransactionOrigin
    "sqlalchemy.orm.SessionTransactionOrigin") 实例，它是一个枚举，指示导致构建此 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") 的源事件。
- en: New in version 2.0.
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: '[PRE242]'
  id: totrans-1547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: The parent [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    of this [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction").
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    的父 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")。
- en: If this attribute is `None`, indicates this [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") is at the top of the stack, and corresponds
    to a real “COMMIT”/”ROLLBACK” block. If non-`None`, then this is either a “subtransaction”
    (an internal marker object used by the flush process) or a “nested” / SAVEPOINT
    transaction. If the [`SessionTransaction.nested`](#sqlalchemy.orm.SessionTransaction.nested
    "sqlalchemy.orm.SessionTransaction.nested") attribute is `True`, then this is
    a SAVEPOINT, and if `False`, indicates this a subtransaction.
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此属性为 `None`，表示此 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") 处于堆栈顶部，并对应于真实的“COMMIT”/“ROLLBACK”块。 如果非 `None`，则这是一个“子事务”（刷新过程中使用的内部标记对象）或“嵌套”/保存点事��。
    如果 [`SessionTransaction.nested`](#sqlalchemy.orm.SessionTransaction.nested "sqlalchemy.orm.SessionTransaction.nested")
    属性为 `True`，则这是一个保存点，如果为 `False`，则表示这是一个子事务。
- en: '[PRE243]'
  id: totrans-1550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: indicates the origin of a [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction").
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
  zh: 指示 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    的来源。
- en: This enumeration is present on the [`SessionTransaction.origin`](#sqlalchemy.orm.SessionTransaction.origin
    "sqlalchemy.orm.SessionTransaction.origin") attribute of any [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction
    "sqlalchemy.orm.SessionTransaction") object.
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: 此枚举存在于任何 [`SessionTransaction`](#sqlalchemy.orm.SessionTransaction "sqlalchemy.orm.SessionTransaction")
    对象的 [`SessionTransaction.origin`](#sqlalchemy.orm.SessionTransaction.origin "sqlalchemy.orm.SessionTransaction.origin")
    属性上。
- en: New in version 2.0.
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 2.0 中新增。
- en: '**Members**'
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[AUTOBEGIN](#sqlalchemy.orm.SessionTransactionOrigin.AUTOBEGIN), [BEGIN](#sqlalchemy.orm.SessionTransactionOrigin.BEGIN),
    [BEGIN_NESTED](#sqlalchemy.orm.SessionTransactionOrigin.BEGIN_NESTED), [SUBTRANSACTION](#sqlalchemy.orm.SessionTransactionOrigin.SUBTRANSACTION)'
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: '[AUTOBEGIN](#sqlalchemy.orm.SessionTransactionOrigin.AUTOBEGIN), [BEGIN](#sqlalchemy.orm.SessionTransactionOrigin.BEGIN),
    [BEGIN_NESTED](#sqlalchemy.orm.SessionTransactionOrigin.BEGIN_NESTED), [SUBTRANSACTION](#sqlalchemy.orm.SessionTransactionOrigin.SUBTRANSACTION)'
- en: '**Class signature**'
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.SessionTransactionOrigin`](#sqlalchemy.orm.SessionTransactionOrigin
    "sqlalchemy.orm.SessionTransactionOrigin") (`enum.Enum`)
  id: totrans-1557
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.SessionTransactionOrigin`](#sqlalchemy.orm.SessionTransactionOrigin
    "sqlalchemy.orm.SessionTransactionOrigin") (`enum.Enum`)
- en: '[PRE244]'
  id: totrans-1558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: transaction were started by autobegin
  id: totrans-1559
  prefs: []
  type: TYPE_NORMAL
  zh: 事务是由 autobegin 启动的。
- en: '[PRE245]'
  id: totrans-1560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: transaction were started by calling [`Session.begin()`](#sqlalchemy.orm.Session.begin
    "sqlalchemy.orm.Session.begin")
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: 事务是通过调用 [`Session.begin()`](#sqlalchemy.orm.Session.begin "sqlalchemy.orm.Session.begin")
    开始的。
- en: '[PRE246]'
  id: totrans-1562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: tranaction were started by [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested
    "sqlalchemy.orm.Session.begin_nested")
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: 事务是通过 [`Session.begin_nested()`](#sqlalchemy.orm.Session.begin_nested "sqlalchemy.orm.Session.begin_nested")
    开始的。
- en: '[PRE247]'
  id: totrans-1564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: transaction is an internal “subtransaction”
  id: totrans-1565
  prefs: []
  type: TYPE_NORMAL
  zh: 事务是一个内部的“子事务”。
- en: Session Utilities
  id: totrans-1566
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 会话工具
- en: '| Object Name | Description |'
  id: totrans-1567
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1568
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [close_all_sessions](#sqlalchemy.orm.close_all_sessions)() | Close all sessions
    in memory. |'
  id: totrans-1569
  prefs: []
  type: TYPE_TB
  zh: '| [close_all_sessions](#sqlalchemy.orm.close_all_sessions)() | 关闭内存中的所有会话。
    |'
- en: '| [make_transient](#sqlalchemy.orm.make_transient)(instance) | Alter the state
    of the given instance so that it is [transient](../glossary.html#term-transient).
    |'
  id: totrans-1570
  prefs: []
  type: TYPE_TB
  zh: '| [make_transient](#sqlalchemy.orm.make_transient)(instance) | 更改给定实例的状态，使其成为[瞬态](../glossary.html#term-transient)。
    |'
- en: '| [make_transient_to_detached](#sqlalchemy.orm.make_transient_to_detached)(instance)
    | Make the given transient instance [detached](../glossary.html#term-detached).
    |'
  id: totrans-1571
  prefs: []
  type: TYPE_TB
  zh: '| [make_transient_to_detached](#sqlalchemy.orm.make_transient_to_detached)(instance)
    | 使给定的瞬态实例[分离](../glossary.html#term-detached)。 |'
- en: '| [object_session](#sqlalchemy.orm.object_session)(instance) | Return the [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to which the given instance belongs. |'
  id: totrans-1572
  prefs: []
  type: TYPE_TB
  zh: '| [object_session](#sqlalchemy.orm.object_session)(instance) | 返回给定实例所属的[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")。 |'
- en: '| [was_deleted](#sqlalchemy.orm.util.was_deleted)(object_) | Return True if
    the given object was deleted within a session flush. |'
  id: totrans-1573
  prefs: []
  type: TYPE_TB
  zh: '| [was_deleted](#sqlalchemy.orm.util.was_deleted)(object_) | 如果给定对象在会话刷新中被删除，则返回True。
    |'
- en: '[PRE248]'
  id: totrans-1574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: Close all sessions in memory.
  id: totrans-1575
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭内存中的所有会话。
- en: This function consults a global registry of all [`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects and calls [`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close") on them, which resets them to a clean state.
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数查询所有[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象的全局注册表，并调用[`Session.close()`](#sqlalchemy.orm.Session.close
    "sqlalchemy.orm.Session.close")关闭它们，将它们重置为干净状态。
- en: This function is not for general use but may be useful for test suites within
    the teardown scheme.
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数不适用于一般用途，但可能对拆卸方案中的测试套件有用。
- en: New in version 1.3.
  id: totrans-1578
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3中的新功能。
- en: '[PRE249]'
  id: totrans-1579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: Alter the state of the given instance so that it is [transient](../glossary.html#term-transient).
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
  zh: 更改给定实例的状态，使其为[瞬态](../glossary.html#term-transient)。
- en: Note
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")
    is a special-case function for advanced use cases only.'
  id: totrans-1582
  prefs: []
  type: TYPE_NORMAL
  zh: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")是仅适用于高级用例的特殊函数。'
- en: The given mapped instance is assumed to be in the [persistent](../glossary.html#term-persistent)
    or [detached](../glossary.html#term-detached) state. The function will remove
    its association with any [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    as well as its [`InstanceState.identity`](internals.html#sqlalchemy.orm.InstanceState.identity
    "sqlalchemy.orm.InstanceState.identity"). The effect is that the object will behave
    as though it were newly constructed, except retaining any attribute / collection
    values that were loaded at the time of the call. The [`InstanceState.deleted`](internals.html#sqlalchemy.orm.InstanceState.deleted
    "sqlalchemy.orm.InstanceState.deleted") flag is also reset if this object had
    been deleted as a result of using [`Session.delete()`](#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete").
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
  zh: 假定给定的映射实例处于[持久](../glossary.html#term-persistent)或[分离](../glossary.html#term-detached)状态。该函数将删除其与任何[`Session`](#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的关联以及其[`InstanceState.identity`](internals.html#sqlalchemy.orm.InstanceState.identity
    "sqlalchemy.orm.InstanceState.identity")。其效果是对象将表现得像是新构造的，但保留在调用时加载的任何属性/集合值。如果此对象曾因使用[`Session.delete()`](#sqlalchemy.orm.Session.delete
    "sqlalchemy.orm.Session.delete")而被删除，则[`InstanceState.deleted`](internals.html#sqlalchemy.orm.InstanceState.deleted
    "sqlalchemy.orm.InstanceState.deleted")标志也将被重置。
- en: Warning
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")
    does **not** “unexpire” or otherwise eagerly load ORM-mapped attributes that are
    not currently loaded at the time the function is called. This includes attributes
    which:'
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
  zh: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")
    **不** “取消过期”或以其他方式急切加载在调用函数时尚未加载的ORM映射属性。这包括：'
- en: were expired via [`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")
  id: totrans-1586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过[`Session.expire()`](#sqlalchemy.orm.Session.expire "sqlalchemy.orm.Session.expire")过期
- en: were expired as the natural effect of committing a session transaction, e.g.
    [`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
  id: totrans-1587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为提交会话事务的自然效果而过期，例如[`Session.commit()`](#sqlalchemy.orm.Session.commit "sqlalchemy.orm.Session.commit")
- en: are normally [lazy loaded](../glossary.html#term-lazy-loaded) but are not currently
    loaded
  id: totrans-1588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常是[延迟加载](../glossary.html#term-lazy-loaded)，但目前尚未加载
- en: are “deferred” (see [Limiting which Columns Load with Column Deferral](queryguide/columns.html#orm-queryguide-column-deferral))
    and are not yet loaded
  id: totrans-1589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被“延迟加载”（参见[限制加载的列与列延迟](queryguide/columns.html#orm-queryguide-column-deferral)）且尚未加载
- en: were not present in the query which loaded this object, such as that which is
    common in joined table inheritance and other scenarios.
  id: totrans-1590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在加载此对象的查询中不存在，例如在联接表继承和其他场景中常见的情况。
- en: After [`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")
    is called, unloaded attributes such as those above will normally resolve to the
    value `None` when accessed, or an empty collection for a collection-oriented attribute.
    As the object is transient and un-associated with any database identity, it will
    no longer retrieve these values.
  id: totrans-1591
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 [`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")
    后，像上面这样未加载的属性通常在访问时将解析为值 `None`，或者对于集合定向属性为一个空集合。由于对象是瞬态的，并且未关联任何数据库标识，因此它将不再检索这些值。
- en: See also
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached")'
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached")'
- en: '[PRE250]'
  id: totrans-1594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: Make the given transient instance [detached](../glossary.html#term-detached).
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: 使给定的瞬态实例 [分离](../glossary.html#term-detached)。
- en: Note
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") is a special-case function for advanced
    use cases only.'
  id: totrans-1597
  prefs: []
  type: TYPE_NORMAL
  zh: '[`make_transient_to_detached()`](#sqlalchemy.orm.make_transient_to_detached
    "sqlalchemy.orm.make_transient_to_detached") 是一个仅限于高级用例的特殊情况函数。'
- en: All attribute history on the given instance will be reset as though the instance
    were freshly loaded from a query. Missing attributes will be marked as expired.
    The primary key attributes of the object, which are required, will be made into
    the “key” of the instance.
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定实例上的所有属性历史都将被重置，就像实例是从查询中新加载的一样。丢失的属性将被标记为过期。对象的主键属性将被制作为实例的“键”，这些主键属性是必需的。
- en: The object can then be added to a session, or merged possibly with the load=False
    flag, at which point it will look as if it were loaded that way, without emitting
    SQL.
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对象可以被添加到一个会话中，或者可能与 load=False 标志合并，此时它将看起来像是以这种方式加载，而不发出 SQL。
- en: This is a special use case function that differs from a normal call to [`Session.merge()`](#sqlalchemy.orm.Session.merge
    "sqlalchemy.orm.Session.merge") in that a given persistent state can be manufactured
    without any SQL calls.
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个特殊的用例函数，与对 [`Session.merge()`](#sqlalchemy.orm.Session.merge "sqlalchemy.orm.Session.merge")
    的正常调用不同，因为可以制造给定的持久状态而不进行任何 SQL 调用。
- en: See also
  id: totrans-1601
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")'
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
  zh: '[`make_transient()`](#sqlalchemy.orm.make_transient "sqlalchemy.orm.make_transient")'
- en: '[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading")'
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Session.enable_relationship_loading()`](#sqlalchemy.orm.Session.enable_relationship_loading
    "sqlalchemy.orm.Session.enable_relationship_loading")'
- en: '[PRE251]'
  id: totrans-1604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: Return the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") to
    which the given instance belongs.
  id: totrans-1605
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定实例所属的 [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")。
- en: This is essentially the same as the [`InstanceState.session`](internals.html#sqlalchemy.orm.InstanceState.session
    "sqlalchemy.orm.InstanceState.session") accessor. See that attribute for details.
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
  zh: 这与 [`InstanceState.session`](internals.html#sqlalchemy.orm.InstanceState.session
    "sqlalchemy.orm.InstanceState.session") 访问器本质上是相同的。有关详细信息，请参阅该属性。
- en: '[PRE252]'
  id: totrans-1607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: Return True if the given object was deleted within a session flush.
  id: totrans-1608
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 True，如果给定的对象在会话刷新内被删除。
- en: This is regardless of whether or not the object is persistent or detached.
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
  zh: 不管对象是持久的还是分离的，都是如此。
- en: See also
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`InstanceState.was_deleted`](internals.html#sqlalchemy.orm.InstanceState.was_deleted
    "sqlalchemy.orm.InstanceState.was_deleted")'
  id: totrans-1611
  prefs: []
  type: TYPE_NORMAL
  zh: '[`InstanceState.was_deleted`](internals.html#sqlalchemy.orm.InstanceState.was_deleted
    "sqlalchemy.orm.InstanceState.was_deleted")'
- en: Attribute and State Management Utilities
  id: totrans-1612
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性和状态管理实用程序
- en: These functions are provided by the SQLAlchemy attribute instrumentation API
    to provide a detailed interface for dealing with instances, attribute values,
    and history. Some of them are useful when constructing event listener functions,
    such as those described in [ORM Events](events.html).
  id: totrans-1613
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数由 SQLAlchemy 属性调制 API 提供，以提供一个详细的接口来处理实例、属性值和历史。当构造事件监听函数时，其中一些函数是有用的，比如
    [ORM 事件](events.html) 中描述的那些函数。
- en: '| Object Name | Description |'
  id: totrans-1614
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-1615
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [del_attribute](#sqlalchemy.orm.attributes.del_attribute)(instance, key)
    | Delete the value of an attribute, firing history events. |'
  id: totrans-1616
  prefs: []
  type: TYPE_TB
  zh: '| [del_attribute](#sqlalchemy.orm.attributes.del_attribute)(instance, key)
    | 删除属性的值，触发历史事件。 |'
- en: '| [flag_dirty](#sqlalchemy.orm.attributes.flag_dirty)(instance) | Mark an instance
    as ‘dirty’ without any specific attribute mentioned. |'
  id: totrans-1617
  prefs: []
  type: TYPE_TB
  zh: '| [flag_dirty](#sqlalchemy.orm.attributes.flag_dirty)(instance) | 标记一个实例为“脏”状态，而不需要特定的属性名称。
    |'
- en: '| [flag_modified](#sqlalchemy.orm.attributes.flag_modified)(instance, key)
    | Mark an attribute on an instance as ‘modified’. |'
  id: totrans-1618
  prefs: []
  type: TYPE_TB
  zh: '| [flag_modified](#sqlalchemy.orm.attributes.flag_modified)(instance, key)
    | 将实例上的属性标记为“已修改”。 |'
- en: '| [get_attribute](#sqlalchemy.orm.attributes.get_attribute)(instance, key)
    | Get the value of an attribute, firing any callables required. |'
  id: totrans-1619
  prefs: []
  type: TYPE_TB
  zh: '| [get_attribute](#sqlalchemy.orm.attributes.get_attribute)(instance, key)
    | 获取属性的值，触发任何所需的可调用函数。 |'
- en: '| [get_history](#sqlalchemy.orm.attributes.get_history)(obj, key[, passive])
    | Return a [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    record for the given object and attribute key. |'
  id: totrans-1620
  prefs: []
  type: TYPE_TB
  zh: '| [get_history](#sqlalchemy.orm.attributes.get_history)(obj, key[, passive])
    | 返回给定对象和属性键的[`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")记录。
    |'
- en: '| [History](#sqlalchemy.orm.attributes.History) | A 3-tuple of added, unchanged
    and deleted values, representing the changes which have occurred on an instrumented
    attribute. |'
  id: totrans-1621
  prefs: []
  type: TYPE_TB
  zh: '| [History](#sqlalchemy.orm.attributes.History) | 已添加、未更改和已删除值的3元组，表示在受监控属性上发生的更改。
    |'
- en: '| [init_collection](#sqlalchemy.orm.attributes.init_collection)(obj, key) |
    Initialize a collection attribute and return the collection adapter. |'
  id: totrans-1622
  prefs: []
  type: TYPE_TB
  zh: '| [init_collection](#sqlalchemy.orm.attributes.init_collection)(obj, key) |
    初始化一个集合属性并返回集合适配器。 |'
- en: '| [instance_state](#sqlalchemy.orm.attributes.instance_state) | Return the
    [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    for a given mapped object. |'
  id: totrans-1623
  prefs: []
  type: TYPE_TB
  zh: '| [instance_state](#sqlalchemy.orm.attributes.instance_state) | 返回给定映射对象的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。 |'
- en: '| [is_instrumented](#sqlalchemy.orm.instrumentation.is_instrumented)(instance,
    key) | Return True if the given attribute on the given instance is instrumented
    by the attributes package. |'
  id: totrans-1624
  prefs: []
  type: TYPE_TB
  zh: '| [is_instrumented](#sqlalchemy.orm.instrumentation.is_instrumented)(instance,
    key) | 如果给定实例上的给定属性由attributes包进行了插装，则返回True。 |'
- en: '| [object_state](#sqlalchemy.orm.util.object_state)(instance) | Given an object,
    return the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    associated with the object. |'
  id: totrans-1625
  prefs: []
  type: TYPE_TB
  zh: '| [object_state](#sqlalchemy.orm.util.object_state)(instance) | 给定一个对象，返回与该对象关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。 |'
- en: '| [set_attribute](#sqlalchemy.orm.attributes.set_attribute)(instance, key,
    value[, initiator]) | Set the value of an attribute, firing history events. |'
  id: totrans-1626
  prefs: []
  type: TYPE_TB
  zh: '| [set_attribute](#sqlalchemy.orm.attributes.set_attribute)(instance, key,
    value[, initiator]) | 设置属性的值，触发历史事件。 |'
- en: '| [set_committed_value](#sqlalchemy.orm.attributes.set_committed_value)(instance,
    key, value) | Set the value of an attribute with no history events. |'
  id: totrans-1627
  prefs: []
  type: TYPE_TB
  zh: '| [set_committed_value](#sqlalchemy.orm.attributes.set_committed_value)(instance,
    key, value) | 设置属性的值，不触发历史事件。 |'
- en: '[PRE253]'
  id: totrans-1628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: Given an object, return the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState") associated with the object.
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个对象，返回与该对象关联的[`InstanceState`](internals.html#sqlalchemy.orm.InstanceState
    "sqlalchemy.orm.InstanceState")。
- en: Raises [`sqlalchemy.orm.exc.UnmappedInstanceError`](exceptions.html#sqlalchemy.orm.exc.UnmappedInstanceError
    "sqlalchemy.orm.exc.UnmappedInstanceError") if no mapping is configured.
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未配置映射，则引发[`sqlalchemy.orm.exc.UnmappedInstanceError`](exceptions.html#sqlalchemy.orm.exc.UnmappedInstanceError
    "sqlalchemy.orm.exc.UnmappedInstanceError")。
- en: 'Equivalent functionality is available via the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function as:'
  id: totrans-1631
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的功能可以通过[`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")函数获得，如下所示：
- en: '[PRE254]'
  id: totrans-1632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: Using the inspection system will raise [`sqlalchemy.exc.NoInspectionAvailable`](../core/exceptions.html#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable") if the instance is not part of a mapping.
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: 使用检查系统将在实例不属于映射的情况下引发[`sqlalchemy.exc.NoInspectionAvailable`](../core/exceptions.html#sqlalchemy.exc.NoInspectionAvailable
    "sqlalchemy.exc.NoInspectionAvailable")。
- en: '[PRE255]'
  id: totrans-1634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: Delete the value of an attribute, firing history events.
  id: totrans-1635
  prefs: []
  type: TYPE_NORMAL
  zh: 删除属性的值，触发历史事件。
- en: This function may be used regardless of instrumentation applied directly to
    the class, i.e. no descriptors are required. Custom attribute management schemes
    will need to make usage of this method to establish attribute state as understood
    by SQLAlchemy.
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
  zh: 无论直接应用于类的插装如何，都可以使用此函数，即不需要描述符。自定义属性管理方案将需要使用此方法来建立由SQLAlchemy理解的属性状态。
- en: '[PRE256]'
  id: totrans-1637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: Get the value of an attribute, firing any callables required.
  id: totrans-1638
  prefs: []
  type: TYPE_NORMAL
  zh: 获取属性的值，触发任何所需的可调用函数。
- en: This function may be used regardless of instrumentation applied directly to
    the class, i.e. no descriptors are required. Custom attribute management schemes
    will need to make usage of this method to make usage of attribute state as understood
    by SQLAlchemy.
  id: totrans-1639
  prefs: []
  type: TYPE_NORMAL
  zh: 无论直接应用于类的仪器，都可以使用此功能，即不需要描述符。自定义属性管理方案将需要使用此方法来使用SQLAlchemy所理解的属性状态。
- en: '[PRE257]'
  id: totrans-1640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: Return a [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    record for the given object and attribute key.
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定对象和属性键的[`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")记录。
- en: This is the **pre-flush** history for a given attribute, which is reset each
    time the [`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session") flushes
    changes to the current database transaction.
  id: totrans-1642
  prefs: []
  type: TYPE_NORMAL
  zh: 这是给定属性的**预刷新**历史记录，每次[`Session`](#sqlalchemy.orm.Session "sqlalchemy.orm.Session")刷新更改到当前数据库事务时都会重置它。
- en: Note
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Prefer to use the [`AttributeState.history`](internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history") and [`AttributeState.load_history()`](internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history") accessors to retrieve the [`History`](#sqlalchemy.orm.attributes.History
    "sqlalchemy.orm.attributes.History") for instance attributes.
  id: totrans-1644
  prefs: []
  type: TYPE_NORMAL
  zh: 首选使用[`AttributeState.history`](internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history")和[`AttributeState.load_history()`](internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history")访问器来检索实例属性的[`History`](#sqlalchemy.orm.attributes.History
    "sqlalchemy.orm.attributes.History")。
- en: 'Parameters:'
  id: totrans-1645
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`obj` – an object whose class is instrumented by the attributes package.'
  id: totrans-1646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj` – 一个其类由属性包仪器化的对象。'
- en: '`key` – string attribute name.'
  id: totrans-1647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` – 字符串属性名称。'
- en: '`passive` – indicates loading behavior for the attribute if the value is not
    already present. This is a bitflag attribute, which defaults to the symbol `PASSIVE_OFF`
    indicating all necessary SQL should be emitted.'
  id: totrans-1648
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`passive` – 如果值尚不存在，则指示属性的加载行为。这是一个位标志属性，默认为`PASSIVE_OFF`，表示应发出所有必要的SQL。'
- en: See also
  id: totrans-1649
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`AttributeState.history`](internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history")'
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeState.history`](internals.html#sqlalchemy.orm.AttributeState.history
    "sqlalchemy.orm.AttributeState.history")'
- en: '[`AttributeState.load_history()`](internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history") - retrieve history using loader
    callables if the value is not locally present.'
  id: totrans-1651
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AttributeState.load_history()`](internals.html#sqlalchemy.orm.AttributeState.load_history
    "sqlalchemy.orm.AttributeState.load_history") - 如果值在本地不存在，则使用加载器可调用检索历史。'
- en: '[PRE258]'
  id: totrans-1652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: Initialize a collection attribute and return the collection adapter.
  id: totrans-1653
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化一个集合属性并返回集合适配器。
- en: 'This function is used to provide direct access to collection internals for
    a previously unloaded attribute. e.g.:'
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数用于为先前未加载的属性提供直接访问集合内部。例如：
- en: '[PRE259]'
  id: totrans-1655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: For an easier way to do the above, see [`set_committed_value()`](#sqlalchemy.orm.attributes.set_committed_value
    "sqlalchemy.orm.attributes.set_committed_value").
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
  zh: 对于执行上述操作的更简单方法，请参见[`set_committed_value()`](#sqlalchemy.orm.attributes.set_committed_value
    "sqlalchemy.orm.attributes.set_committed_value")。
- en: 'Parameters:'
  id: totrans-1657
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`obj` – a mapped object'
  id: totrans-1658
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj` – 一个映射对象'
- en: '`key` – string attribute name where the collection is located.'
  id: totrans-1659
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` – 集合所在的字符串属性名称。'
- en: '[PRE260]'
  id: totrans-1660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: Mark an attribute on an instance as ‘modified’.
  id: totrans-1661
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例上的属性标记为“已修改”。
- en: This sets the ‘modified’ flag on the instance and establishes an unconditional
    change event for the given attribute. The attribute must have a value present,
    else an [`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError") is raised.
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
  zh: 这会在实例上设置“已修改”标志，并为给定属性建立一个无条件的更改事件。属性必须具有值，否则会引发[`InvalidRequestError`](../core/exceptions.html#sqlalchemy.exc.InvalidRequestError
    "sqlalchemy.exc.InvalidRequestError")。
- en: To mark an object “dirty” without referring to any specific attribute so that
    it is considered within a flush, use the [`flag_dirty()`](#sqlalchemy.orm.attributes.flag_dirty
    "sqlalchemy.orm.attributes.flag_dirty") call.
  id: totrans-1663
  prefs: []
  type: TYPE_NORMAL
  zh: 要标记一个对象为“脏”，而不引用任何特定属性，以便在刷新时考虑到它，使用[`flag_dirty()`](#sqlalchemy.orm.attributes.flag_dirty
    "sqlalchemy.orm.attributes.flag_dirty")调用。
- en: See also
  id: totrans-1664
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`flag_dirty()`](#sqlalchemy.orm.attributes.flag_dirty "sqlalchemy.orm.attributes.flag_dirty")'
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
  zh: '[`flag_dirty()`](#sqlalchemy.orm.attributes.flag_dirty "sqlalchemy.orm.attributes.flag_dirty")'
- en: '[PRE261]'
  id: totrans-1666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: Mark an instance as ‘dirty’ without any specific attribute mentioned.
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
  zh: 将实例标记为“脏”，而不提及任何特定属性。
- en: This is a special operation that will allow the object to travel through the
    flush process for interception by events such as [`SessionEvents.before_flush()`](events.html#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush"). Note that no SQL will be emitted
    in the flush process for an object that has no changes, even if marked dirty via
    this method. However, a [`SessionEvents.before_flush()`](events.html#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") handler will be able to see the object
    in the [`Session.dirty`](#sqlalchemy.orm.Session.dirty "sqlalchemy.orm.Session.dirty")
    collection and may establish changes on it, which will then be included in the
    SQL emitted.
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个特殊操作，允许对象通过刷新流程进行拦截，例如 [`SessionEvents.before_flush()`](events.html#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush")。请注意，对于没有更改的对象，在刷新过程中不会发出任何 SQL，即使通过此方法标记为脏。但是，[`SessionEvents.before_flush()`](events.html#sqlalchemy.orm.SessionEvents.before_flush
    "sqlalchemy.orm.SessionEvents.before_flush") 处理程序将能够在 [`Session.dirty`](#sqlalchemy.orm.Session.dirty
    "sqlalchemy.orm.Session.dirty") 集合中看到对象，并可能对其进行更改，然后这些更改将包含在发出的 SQL 中。
- en: New in version 1.2.
  id: totrans-1669
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.2 版新功能。
- en: See also
  id: totrans-1670
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`flag_modified()`](#sqlalchemy.orm.attributes.flag_modified "sqlalchemy.orm.attributes.flag_modified")'
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
  zh: '[`flag_modified()`](#sqlalchemy.orm.attributes.flag_modified "sqlalchemy.orm.attributes.flag_modified")'
- en: '[PRE262]'
  id: totrans-1672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: Return the [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")
    for a given mapped object.
  id: totrans-1673
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定映射对象的 [`InstanceState`](internals.html#sqlalchemy.orm.InstanceState "sqlalchemy.orm.InstanceState")。
- en: This function is the internal version of [`object_state()`](#sqlalchemy.orm.util.object_state
    "sqlalchemy.orm.util.object_state"). The [`object_state()`](#sqlalchemy.orm.util.object_state
    "sqlalchemy.orm.util.object_state") and/or the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function is preferred here as they each emit an informative
    exception if the given object is not mapped.
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数是 [`object_state()`](#sqlalchemy.orm.util.object_state "sqlalchemy.orm.util.object_state")
    的内部版本。此处推荐使用 [`object_state()`](#sqlalchemy.orm.util.object_state "sqlalchemy.orm.util.object_state")
    和/或 [`inspect()`](../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    函数，因为它们会在给定对象未映射时各自发出信息丰富的异常。
- en: '[PRE263]'
  id: totrans-1675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: Return True if the given attribute on the given instance is instrumented by
    the attributes package.
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
  zh: 如果给定实例上的给定属性由 attributes 包进行仪器化，则返回 True。
- en: This function may be used regardless of instrumentation applied directly to
    the class, i.e. no descriptors are required.
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
  zh: 无论直接应用于类的仪器如何，都可以使用此函数，即不需要描述符。
- en: '[PRE264]'
  id: totrans-1678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: Set the value of an attribute, firing history events.
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
  zh: 设置属性的值，并触发历史事件。
- en: This function may be used regardless of instrumentation applied directly to
    the class, i.e. no descriptors are required. Custom attribute management schemes
    will need to make usage of this method to establish attribute state as understood
    by SQLAlchemy.
  id: totrans-1680
  prefs: []
  type: TYPE_NORMAL
  zh: 无论直接应用于类的仪器如何，都可以使用此函数，即不需要描述符。自定义属性管理方案将需要使用此方法来建立由 SQLAlchemy 理解的属性状态。
- en: 'Parameters:'
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – the object that will be modified'
  id: totrans-1682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 将要修改的对象'
- en: '`key` – string name of the attribute'
  id: totrans-1683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key` – 属性的字符串名称'
- en: '`value` – value to assign'
  id: totrans-1684
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` – 要分配的值'
- en: '`initiator` –'
  id: totrans-1685
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initiator` –'
- en: an instance of `Event` that would have been propagated from a previous event
    listener. This argument is used when the [`set_attribute()`](#sqlalchemy.orm.attributes.set_attribute
    "sqlalchemy.orm.attributes.set_attribute") function is being used within an existing
    event listening function where an `Event` object is being supplied; the object
    may be used to track the origin of the chain of events.
  id: totrans-1686
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个 `Event` 的实例，可能已从前一个事件侦听器传播。当在现有事件侦听器函数中使用 [`set_attribute()`](#sqlalchemy.orm.attributes.set_attribute
    "sqlalchemy.orm.attributes.set_attribute") 函数时，其中提供了一个 `Event` 对象；该对象可用于跟踪事件链的来源。
- en: New in version 1.2.3.
  id: totrans-1687
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 自 1.2.3 版新功能。
- en: '[PRE265]'
  id: totrans-1688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: Set the value of an attribute with no history events.
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
  zh: 设置没有历史事件的属性值。
- en: Cancels any previous history present. The value should be a scalar value for
    scalar-holding attributes, or an iterable for any collection-holding attribute.
  id: totrans-1690
  prefs: []
  type: TYPE_NORMAL
  zh: 取消任何先前存在的历史。值应为标量值（对于保存标量的属性）或可迭代对象（对于任何保存集合的属性）。
- en: This is the same underlying method used when a lazy loader fires off and loads
    additional data from the database. In particular, this method can be used by application
    code which has loaded additional attributes or collections through separate queries,
    which can then be attached to an instance as though it were part of its original
    loaded state.
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
  zh: 当惰性加载器触发并从数据库加载附加数据时，使用的是相同的基础方法。特别是，该方法可被应用代码使用，通过单独的查询加载了额外的属性或集合，然后可以将其附加到实例上，就像它是其原始加载状态的一部分一样。
- en: '[PRE266]'
  id: totrans-1692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: A 3-tuple of added, unchanged and deleted values, representing the changes which
    have occurred on an instrumented attribute.
  id: totrans-1693
  prefs: []
  type: TYPE_NORMAL
  zh: 一个由添加、未更改和已删除值组成的3元组，表示在一个被检测的属性上发生的变化。
- en: 'The easiest way to get a [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    object for a particular attribute on an object is to use the [`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function:'
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
  zh: 获取对象上特定属性的[`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")对象的最简单方法是使用[`inspect()`](../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect")函数：
- en: '[PRE267]'
  id: totrans-1695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: 'Each tuple member is an iterable sequence:'
  id: totrans-1696
  prefs: []
  type: TYPE_NORMAL
  zh: 每个元组成员都是一个可迭代序列：
- en: '`added` - the collection of items added to the attribute (the first tuple element).'
  id: totrans-1697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`added` - 添加到属性的项目的集合（第一个元组元素）。'
- en: '`unchanged` - the collection of items that have not changed on the attribute
    (the second tuple element).'
  id: totrans-1698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unchanged` - 在属性上没有更改的项目的集合（第二个元组元素）。'
- en: '`deleted` - the collection of items that have been removed from the attribute
    (the third tuple element).'
  id: totrans-1699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deleted` - 从属性中删除的项目的集合（第三个元组元素）。'
- en: '**Members**'
  id: totrans-1700
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[added](#sqlalchemy.orm.attributes.History.added), [deleted](#sqlalchemy.orm.attributes.History.deleted),
    [empty()](#sqlalchemy.orm.attributes.History.empty), [has_changes()](#sqlalchemy.orm.attributes.History.has_changes),
    [non_added()](#sqlalchemy.orm.attributes.History.non_added), [non_deleted()](#sqlalchemy.orm.attributes.History.non_deleted),
    [sum()](#sqlalchemy.orm.attributes.History.sum), [unchanged](#sqlalchemy.orm.attributes.History.unchanged)'
  id: totrans-1701
  prefs: []
  type: TYPE_NORMAL
  zh: '[added](#sqlalchemy.orm.attributes.History.added), [deleted](#sqlalchemy.orm.attributes.History.deleted),
    [empty()](#sqlalchemy.orm.attributes.History.empty), [has_changes()](#sqlalchemy.orm.attributes.History.has_changes),
    [non_added()](#sqlalchemy.orm.attributes.History.non_added), [non_deleted()](#sqlalchemy.orm.attributes.History.non_deleted),
    [sum()](#sqlalchemy.orm.attributes.History.sum), [unchanged](#sqlalchemy.orm.attributes.History.unchanged)'
- en: '**Class signature**'
  id: totrans-1702
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.orm.History` (`builtins.tuple`)
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
  zh: 类`sqlalchemy.orm.History`（`builtins.tuple`）
- en: '[PRE268]'
  id: totrans-1704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: Alias for field number 0
  id: totrans-1705
  prefs: []
  type: TYPE_NORMAL
  zh: 字段编号 0 的别名
- en: '[PRE269]'
  id: totrans-1706
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: Alias for field number 2
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
  zh: 字段编号 2 的别名
- en: '[PRE270]'
  id: totrans-1708
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: Return True if this [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    has no changes and no existing, unchanged state.
  id: totrans-1709
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个[`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")没有更改并且没有现有的未更改状态，则返回True。
- en: '[PRE271]'
  id: totrans-1710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: Return True if this [`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")
    has changes.
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个[`History`](#sqlalchemy.orm.attributes.History "sqlalchemy.orm.attributes.History")有更改，则返回True。
- en: '[PRE272]'
  id: totrans-1712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: Return a collection of unchanged + deleted.
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
  zh: 返回未更改 + 已删除的集合。
- en: '[PRE273]'
  id: totrans-1714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: Return a collection of added + unchanged.
  id: totrans-1715
  prefs: []
  type: TYPE_NORMAL
  zh: 返回已添加 + 未更改的集合。
- en: '[PRE274]'
  id: totrans-1716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: Return a collection of added + unchanged + deleted.
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: 返回已添加 + 未更改 + 已删除的集合。
- en: '[PRE275]'
  id: totrans-1718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: Alias for field number 1
  id: totrans-1719
  prefs: []
  type: TYPE_NORMAL
  zh: 字段编号 1 的别名
