- en: Baked Queries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 烘焙查询
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/baked.html](https://docs.sqlalchemy.org/en/20/orm/extensions/baked.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/extensions/baked.html](https://docs.sqlalchemy.org/en/20/orm/extensions/baked.html)
- en: '`baked` provides an alternative creational pattern for [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query") objects, which allows for caching of the object’s
    construction and string-compilation steps. This means that for a particular [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query") building scenario that is used more than once, all
    of the Python function invocation involved in building the query from its initial
    construction up through generating a SQL string will only occur **once**, rather
    than for each time that query is built up and executed.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '`baked`为[`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.query.Query")对象提供了一种替代的创建模式，允许缓存对象的构建和字符串编译步骤。这意味着对于一个特定的[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query")构建场景，如果该场景被多次使用，那么从初始构建查询到生成SQL字符串所涉及的所有Python函数调用将只会发生**一次**，而不是每次构建和执行查询时都会发生。'
- en: The rationale for this system is to greatly reduce Python interpreter overhead
    for everything that occurs **before the SQL is emitted**. The caching of the “baked”
    system does **not** in any way reduce SQL calls or cache the **return results**
    from the database. A technique that demonstrates the caching of the SQL calls
    and result sets themselves is available in [Dogpile Caching](../examples.html#examples-caching).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这个系统的理念是极大地减少Python解释器在**发出SQL之前**发生的一切的开销。 “baked”系统的缓存**不会**以任何方式减少SQL调用或缓存来自数据库的**返回结果**。一个展示SQL调用和结果集本身缓存的技术在[Dogpile
    Caching](../examples.html#examples-caching)中可用。
- en: 'Deprecated since version 1.4: SQLAlchemy 1.4 and 2.0 feature an all-new direct
    query caching system that removes the need for the [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") system. Caching is now transparently active
    for all Core and ORM queries with no action taken by the user, using the system
    described at [SQL Compilation Caching](../../core/connections.html#sql-caching).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始弃用：SQLAlchemy 1.4和2.0具有全新的直接查询缓存系统，不再需要[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")系统。现在，对于所有Core和ORM查询，缓存现在是透明激活的，用户不需要采取任何操作，使用在[SQL
    Compilation Caching](../../core/connections.html#sql-caching)中描述的系统。
- en: Deep Alchemy
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 深度炼金术
- en: The [`sqlalchemy.ext.baked`](#module-sqlalchemy.ext.baked "sqlalchemy.ext.baked")
    extension is **not for beginners**. Using it correctly requires a good high level
    understanding of how SQLAlchemy, the database driver, and the backend database
    interact with each other. This extension presents a very specific kind of optimization
    that is not ordinarily needed. As noted above, it **does not cache queries**,
    only the string formulation of the SQL itself.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[`sqlalchemy.ext.baked`](#module-sqlalchemy.ext.baked "sqlalchemy.ext.baked")扩展**不适合初学者**。正确使用它需要对SQLAlchemy、数据库驱动程序以及后端数据库之间的交互有很好的高级理解。这个扩展提供了一种非常特定的优化，通常是不需要的。如上所述，它**不会缓存查询**，只会缓存SQL本身的字符串形式。'
- en: Synopsis
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概要
- en: 'Usage of the baked system starts by producing a so-called “bakery”, which represents
    storage for a particular series of query objects:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用baked系统的开始是生成所谓的“面包店”，它代表了一系列特定查询对象的存储：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The above “bakery” will store cached data in an LRU cache that defaults to 200
    elements, noting that an ORM query will typically contain one entry for the ORM
    query as invoked, as well as one entry per database dialect for the SQL string.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的“面包店”将缓存数据存储在一个默认为200个元素的LRU缓存中，需要注意的是ORM查询通常会包含一个用于调用ORM查询的条目，以及每个数据库方言的SQL字符串的一个条目。
- en: 'The bakery allows us to build up a [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query") object by specifying its construction as a series
    of Python callables, which are typically lambdas. For succinct usage, it overrides
    the `+=` operator so that a typical query build-up looks like the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 该面包店允许我们通过指定其构造方式为一系列Python可调用对象（通常为lambda函数）来构建一个[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query")对象。为了简洁使用，它重写了`+=`运算符，使得典型的查询构建看起来像下面这样：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Following are some observations about the above code:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于上述代码的一些观察：
- en: The `baked_query` object is an instance of [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery"). This object is essentially the “builder” for
    a real orm [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.query.Query")
    object, but it is not itself the *actual* [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query") object.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`baked_query` 对象是 [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")
    的一个实例。该对象本质上是一个真正的 orm [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query") 对象的“构建者”，但它本身并不是*实际的* [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query") 对象。'
- en: The actual [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.query.Query")
    object is not built at all, until the very end of the function when `Result.all()`
    is called.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实际的 [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.query.Query")
    对象根本没有构建，直到在函数的最后调用 `Result.all()` 时。
- en: The steps that are added to the `baked_query` object are all expressed as Python
    functions, typically lambdas. The first lambda given to the [`bakery()`](#sqlalchemy.ext.baked.bakery
    "sqlalchemy.ext.baked.bakery") function receives a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") as its argument. The remaining lambdas each receive
    a [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.query.Query")
    as their argument.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加到 `baked_query` 对象的步骤都表示为 Python 函数，通常是 lambda。传递给 [`bakery()`](#sqlalchemy.ext.baked.bakery
    "sqlalchemy.ext.baked.bakery") 函数的第一个 lambda 接收一个 [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 作为其参数。其余的 lambda 每个接收一个 [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query") 作为其参数。
- en: In the above code, even though our application may call upon `search_for_user()`
    many times, and even though within each invocation we build up an entirely new
    [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")
    object, *all of the lambdas are only called once*. Each lambda is **never** called
    a second time for as long as this query is cached in the bakery.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上述代码中，即使我们的应用程序可能多次调用 `search_for_user()`，即使在每次调用中我们都建立一个全新的 [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") 对象，*所有的 lambda 只调用一次*。只要此查询在烘培中被缓存，每个 lambda
    在此期间**都不会**被第二次调用。
- en: 'The caching is achieved by storing references to the **lambda objects themselves**
    in order to formulate a cache key; that is, the fact that the Python interpreter
    assigns an in-Python identity to these functions is what determines how to identify
    the query on successive runs. For those invocations of `search_for_user()` where
    the `email` parameter is specified, the callable `lambda q: q.filter(User.email
    == bindparam(''email''))` will be part of the cache key that’s retrieved; when
    `email` is `None`, this callable is not part of the cache key.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '缓存是通过存储**lambda 对象本身**的引用来实现的，以便构建缓存键；也就是说，Python 解释器将这些函数分配为 Python 标识，这决定了如何在后续运行中识别查询。对于那些指定了
    `email` 参数的 `search_for_user()` 调用，可调用的 `lambda q: q.filter(User.email == bindparam(''email''))`
    将成为被检索到的缓存键的一部分；当 `email` 为 `None` 时，这个可调用函数不会成为缓存键的一部分。'
- en: Because the lambdas are all called only once, it is essential that no variables
    which may change across calls are referenced **within** the lambdas; instead,
    assuming these are values to be bound into the SQL string, we use [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") to construct named parameters, where we
    apply their actual values later using `Result.params()`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于 lambda 都只调用一次，因此在 lambda 内部**不得**引用可能跨调用改变的变量；相反，假设这些是要绑定到 SQL 字符串中的值，我们使用
    [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 构建命名参数，稍后使用 `Result.params()` 应用它们的实际值。
- en: Performance
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能
- en: 'The baked query probably looks a little odd, a little bit awkward and a little
    bit verbose. However, the savings in Python performance for a query which is invoked
    lots of times in an application are very dramatic. The example suite `short_selects`
    demonstrated in [Performance](../examples.html#examples-performance) illustrates
    a comparison of queries which each return only one row, such as the following
    regular query:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 烘焙查询可能看起来有些奇怪、有些笨拙、有些冗长。然而，对于在应用程序中多次调用的查询，Python 性能的节约非常显著。在 [性能](../examples.html#examples-performance)
    中演示的示例套件 `short_selects` 说明了查询的比较，每个查询仅返回一行，如下所示的常规查询：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'compared to the equivalent “baked” query:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 相比于等效的“烘焙”查询：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The difference in Python function call count for an iteration of 10000 calls
    to each block are:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个块的10000次调用的Python函数调用计数的差异为：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In terms of number of seconds on a powerful laptop, this comes out as:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以强大的笔记本电脑上的秒数来看，这是这样的：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that this test very intentionally features queries that only return one
    row. For queries that return many rows, the performance advantage of the baked
    query will have less and less of an impact, proportional to the time spent fetching
    rows. It is critical to keep in mind that the **baked query feature only applies
    to building the query itself, not the fetching of results**. Using the baked feature
    is by no means a guarantee to a much faster application; it is only a potentially
    useful feature for those applications that have been measured as being impacted
    by this particular form of overhead.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此测试非常有意地包含了仅返回一行的查询。对于返回许多行的查询，烘焙查询的性能优势将越来越小，与获取行所花费的时间成比例。必须牢记的是，**烘焙查询功能仅适用于构建查询本身，而不适用于获取结果**。使用烘焙特性绝不是对更快应用程序的担保；它只是一种潜在有用的功能，适用于那些已经被证明受到这种特定形式的开销影响的应用程序。
- en: Rationale
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理由
- en: 'The “lambda” approach above is a superset of what would be a more traditional
    “parameterized” approach. Suppose we wished to build a simple system where we
    build a [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.query.Query")
    just once, then store it in a dictionary for re-use. This is possible right now
    by just building up the query, and removing its [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") by calling `my_cached_query = query.with_session(None)`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上述“lambda”方法是更传统的“参数化”方法的一个超集。假设我们希望构建一个简单的系统，在该系统中我们仅构建一次[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query")，然后将其存储在字典中以供重复使用。现在就可以通过简单地构建查询并通过调用`my_cached_query
    = query.with_session(None)`来移除其[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")来实现这一点：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The above approach gets us a very minimal performance benefit. By re-using a
    [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.query.Query"),
    we save on the Python work within the `session.query(Model)` constructor as well
    as calling upon `filter(Model.id == bindparam('id'))`, which will skip for us
    the building up of the Core expression as well as sending it to [`Query.filter()`](../queryguide/query.html#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter"). However, the approach still regenerates the full
    [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object every time when [`Query.all()`](../queryguide/query.html#sqlalchemy.orm.Query.all
    "sqlalchemy.orm.Query.all") is called and additionally this brand new [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") is sent off to the string compilation step
    every time, which for a simple case like the above is probably about 70% of the
    overhead.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法为我们带来了非常小的性能优势。通过重用[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query")，我们节省了`session.query(Model)`构造函数内部的Python工作以及调用`filter(Model.id
    == bindparam('id'))`，这将跳过为我们构建核心表达式以及将其发送到[`Query.filter()`](../queryguide/query.html#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter")的过程。然而，该方法仍然每次调用[`Query.all()`](../queryguide/query.html#sqlalchemy.orm.Query.all
    "sqlalchemy.orm.Query.all")时重新生成完整的[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")对象，并且每次都将此全新的[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")发送到字符串编译步骤，对于像上面这样的简单情况，这可能约占开销的70%。
- en: 'To reduce the additional overhead, we need some more specialized logic, some
    way to memoize the construction of the select object and the construction of the
    SQL. There is an example of this on the wiki in the section [BakedQuery](https://bitbucket.org/zzzeek/sqlalchemy/wiki/UsageRecipes/BakedQuery),
    a precursor to this feature, however in that system, we aren’t caching the *construction*
    of the query. In order to remove all the overhead, we need to cache both the construction
    of the query as well as the SQL compilation. Let’s assume we adapted the recipe
    in this way and made ourselves a method `.bake()` that pre-compiles the SQL for
    the query, producing a new object that can be invoked with minimal overhead. Our
    example becomes:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少额外的开销，我们需要一些更专门的逻辑，一些记忆构造选择对象和 SQL 构造的方法。在维基百科的 [BakedQuery](https://bitbucket.org/zzzeek/sqlalchemy/wiki/UsageRecipes/BakedQuery)
    部分有一个示例，这是这个特性的前身，但在那个系统中，我们没有缓存查询的*构造*。为了去除所有开销，我们需要缓存查询的构造以及 SQL 编译。假设我们按照这种方式调整了配方，并制作了一个
    `.bake()` 方法，用于预编译查询的 SQL，生成一个可以以最小开销调用的新对象。我们的例子变成了：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Above, we’ve fixed the performance situation, but we still have this string
    cache key to deal with.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述例子中，我们已经解决了性能问题，但我们仍然需要处理这个字符串缓存键。
- en: 'We can use the “bakery” approach to re-frame the above in a way that looks
    less unusual than the “building up lambdas” approach, and more like a simple improvement
    upon the simple “reuse a query” approach:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用“面包店”方法来重新构建上面的内容，使其看起来不像“逐步建立lambda”方法那样不寻常，而更像是对简单“重用查询”方法的简单改进：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Above, we use the “baked” system in a manner that is very similar to the simplistic
    “cache a query” system. However, it uses two fewer lines of code, does not need
    to manufacture a cache key of “my_key”, and also includes the same feature as
    our custom “bake” function that caches 100% of the Python invocation work from
    the constructor of the query, to the filter call, to the production of the [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object, to the string compilation step.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们使用“烘焙”系统的方式与简单的“缓存查询”系统非常相似。但是，它使用了两行代码少，不需要制造一个“my_key”的缓存键，还包括与我们自定义的“烘焙”函数相同的功能，该函数从查询的构造函数到过滤器调用再到[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")对象的生成，再到字符串编译步骤，都缓存了 100% 的 Python 调用工作。
- en: 'From the above, if we ask ourselves, “what if lookup needs to make conditional
    decisions as to the structure of the query?”, this is where hopefully it becomes
    apparent why “baked” is the way it is. Instead of a parameterized query building
    off from exactly one function (which is how we thought baked might work originally),
    we can build it from *any number* of functions. Consider our naive example, if
    we needed to have an additional clause in our query on a conditional basis:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的内容，如果我们问自己，“如果查找需要根据查询结构做条件决策怎么办？”，这就是为什么“烘焙”是这样的方式的地方。我们可以从*任意数量*的函数构建参数化查询，而不是从一个函数（这是我们最初认为烘焙可能的工作方式）开始。考虑我们的简单例子，如果我们需要在条件基础上在查询中添加一个附加子句：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Our “simple” parameterized system must now be tasked with generating cache
    keys which take into account whether or not the “include_frobnizzle” flag was
    passed, as the presence of this flag means that the generated SQL would be entirely
    different. It should be apparent that as the complexity of query building goes
    up, the task of caching these queries becomes burdensome very quickly. We can
    convert the above example into a direct use of “bakery” as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的“简单”参数化系统现在必须负责生成考虑到“include_frobnizzle”标志是否已传递的缓存键，因为此标志的存在意味着生成的 SQL 将完全不同。很明显，随着查询构建复杂性的提高，缓存这些查询的任务会非常快地变得繁重。我们可以将上述示例转换为以下对“面包店”直接使用：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Above, we again cache not just the query object but all the work it needs to
    do in order to generate SQL. We also no longer need to deal with making sure we
    generate a cache key that accurately takes into account all of the structural
    modifications we’ve made; this is now handled automatically and without the chance
    of mistakes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们再次缓存的不仅是查询对象，还有它需要执行的所有工作以生成 SQL。我们也不再需要处理确保生成准确考虑到我们所做的所有结构修改的缓存键；这现在是自动处理的，而且没有错误的机会。
- en: 'This code sample is a few lines shorter than the naive example, removes the
    need to deal with cache keys, and has the vast performance benefits of the full
    so-called “baked” feature. But still a little verbose! Hence we take methods like
    [`BakedQuery.add_criteria()`](#sqlalchemy.ext.baked.BakedQuery.add_criteria "sqlalchemy.ext.baked.BakedQuery.add_criteria")
    and [`BakedQuery.with_criteria()`](#sqlalchemy.ext.baked.BakedQuery.with_criteria
    "sqlalchemy.ext.baked.BakedQuery.with_criteria") and shorten them into operators,
    and encourage (though certainly not require!) using simple lambdas, only as a
    means to reduce verbosity:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码示例比朴素示例少了几行代码，消除了处理缓存键的需求，并且具有完整的所谓“已烘焙”功能的巨大性能优势。但仍然有点啰嗦！因此，我们将像[`BakedQuery.add_criteria()`](#sqlalchemy.ext.baked.BakedQuery.add_criteria
    "sqlalchemy.ext.baked.BakedQuery.add_criteria")和[`BakedQuery.with_criteria()`](#sqlalchemy.ext.baked.BakedQuery.with_criteria
    "sqlalchemy.ext.baked.BakedQuery.with_criteria")这样的方法简化为操作符，并鼓励（尽管绝对不是必需的！）使用简单的
    lambda 函数，仅作为减少冗长性的手段：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Where above, the approach is simpler to implement and much more similar in code
    flow to what a non-cached querying function would look like, hence making code
    easier to port.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述情况中，该方法更容易实现，并且在代码流程上更类似于非缓存查询函数的情况，因此使代码更易于移植。
- en: The above description is essentially a summary of the design process used to
    arrive at the current “baked” approach. Starting from the “normal” approaches,
    the additional issues of cache key construction and management, removal of all
    redundant Python execution, and queries built up with conditionals needed to be
    addressed, leading to the final approach.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 上述描述本质上是对到达当前“已烘焙”方法的设计过程的总结。从“正常”方法开始，还需要解决缓存键的构建和管理、移除所有冗余的 Python 执行以及需要使用条件构建的查询等附加问题，从而导致了最终的方法。
- en: Special Query Techniques
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊查询技术
- en: This section will describe some techniques for specific query situations.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将描述一些特定查询情况下的技术。
- en: '### Using IN expressions'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 IN 表达式'
- en: 'The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") method in SQLAlchemy historically
    renders a variable set of bound parameters based on the list of items that’s passed
    to the method. This doesn’t work for baked queries as the length of that list
    can change on different calls. To solve this problem, the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") parameter supports a late-rendered IN expression
    that is safe to be cached inside of baked query. The actual list of elements is
    rendered at statement execution time, rather than at statement compilation time:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 中的[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")方法在历史上基于传递给方法的项目列表呈现一个可变的绑定参数集。对于已烘焙的查询，这不起作用，因为该列表的长度可能在不同的调用中发生变化。为了解决这个问题，[`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")参数支持一个延迟呈现的 IN 表达式，在烘焙查询内安全地进行缓存。实际元素列表在语句执行时呈现，而不是在语句编译时：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: See also
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅下文
- en: '[`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")'
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: Using Subqueries
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用子查询
- en: 'When using [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    objects, it is often needed that one [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object is used to generate a subquery within another.
    In the case where the [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") is currently in baked form, an interim method may be used
    to retrieve the [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, using the [`BakedQuery.to_query()`](#sqlalchemy.ext.baked.BakedQuery.to_query
    "sqlalchemy.ext.baked.BakedQuery.to_query") method. This method is passed the
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    or [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    that is the argument to the lambda callable used to generate a particular step
    of the baked query:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象时，通常需要一个[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象用于在另一个查询中生成子查询。在[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")目前处于烘焙形式的情况下，可以使用一个临时方法来检索[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，使用[`BakedQuery.to_query()`](#sqlalchemy.ext.baked.BakedQuery.to_query
    "sqlalchemy.ext.baked.BakedQuery.to_query")方法。此方法传递给生成烘焙查询特定步骤的lambda可调用参数的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")或[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: New in version 1.3.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3中的新功能。
- en: '### Using the before_compile event'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用before_compile事件'
- en: 'As of SQLAlchemy 1.3.11, the use of the [`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event against a particular [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") will disallow the baked query system from caching the
    query, if the event hook returns a new [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object that is different from the one passed in. This
    is so that the [`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") hook may be invoked against a particular
    [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    every time it is used, to accommodate for hooks that alter the query differently
    each time. To allow a [`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") to alter a [`sqlalchemy.orm.Query()`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object, but still to allow the result to be cached, the
    event can be registered passing the `bake_ok=True` flag:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从SQLAlchemy 1.3.11开始，针对特定[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")使用[`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件将禁止烘焙查询系统缓存查询，如果事件挂钩返回一个与传入的不同的新[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象。这样，[`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")挂钩可以在每次使用特定[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")时被调用，以适应每次以不同方式修改查询的挂钩。要允许[`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")修改[`sqlalchemy.orm.Query()`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，但仍然允许结果被缓存，可以注册传递`bake_ok=True`标志的事件：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The above strategy is appropriate for an event that will modify a given [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in exactly the same way every time, not dependent on specific
    parameters or external state that changes.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上述策略适用于每次都以完全相同方式修改给定[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的事件，不依赖于特定参数或外部状态的更改。
- en: 'New in version 1.3.11: - added the “bake_ok” flag to the [`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event and disallowed caching via
    the “baked” extension from occurring for event handlers that return a new [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object if this flag is not set.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3.11中的新功能：- 在[`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件中添加了“bake_ok”标志，并且如果此标志未设置，则不允许通过“baked”扩展进行缓存以发生对返回新[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的事件处理程序。
- en: Disabling Baked Queries Session-wide
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用全局会话烘焙查询
- en: 'The flag [`Session.enable_baked_queries`](../session_api.html#sqlalchemy.orm.Session.params.enable_baked_queries
    "sqlalchemy.orm.Session") may be set to False, causing all baked queries to not
    use the cache when used against that [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 标志[`Session.enable_baked_queries`](../session_api.html#sqlalchemy.orm.Session.params.enable_baked_queries
    "sqlalchemy.orm.Session")可以设置为False，导致所有烘焙查询在针对该[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")使用时不使用缓存：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Like all session flags, it is also accepted by factory objects like [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") and methods like [`sessionmaker.configure()`](../session_api.html#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure").
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 像所有会话标志一样，它也被工厂对象（如[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")）和方法（如[`sessionmaker.configure()`](../session_api.html#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure")）接受。
- en: The immediate rationale for this flag is so that an application which is seeing
    issues potentially due to cache key conflicts from user-defined baked queries
    or other baked query issues can turn the behavior off, in order to identify or
    eliminate baked queries as the cause of an issue.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此标志的直接理由是，一个应用程序如果出现问题，可能是由于用户定义的烘焙查询或其他烘焙查询问题导致的缓存键冲突，可以关闭该行为，以确定或排除烘焙查询作为问题原因。
- en: New in version 1.2.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.2中的新功能。
- en: Lazy Loading Integration
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 惰性加载集成
- en: 'Changed in version 1.4: As of SQLAlchemy 1.4, the “baked query” system is no
    longer part of the relationship loading system. The [native caching](../../core/connections.html#sql-caching)
    system is used instead.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始更改：从SQLAlchemy 1.4开始，“烘焙查询”系统不再是关系加载系统的一部分。而是改用[本地缓存](../../core/connections.html#sql-caching)系统。
- en: API Documentation
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API文档
- en: '| Object Name | Description |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [BakedQuery](#sqlalchemy.ext.baked.BakedQuery) | A builder object for [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query") objects. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| [BakedQuery](#sqlalchemy.ext.baked.BakedQuery) | 用于构建[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query")对象的构建器对象。 |'
- en: '| [bakery](#sqlalchemy.ext.baked.bakery) | Construct a new bakery. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [bakery](#sqlalchemy.ext.baked.bakery) | 构建一个新的烘焙坊。 |'
- en: '| [Bakery](#sqlalchemy.ext.baked.Bakery) | Callable which returns a [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery"). |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [Bakery](#sqlalchemy.ext.baked.Bakery) | 返回一个[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")的可调用对象。 |'
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Construct a new bakery.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的烘焙坊。
- en: 'Returns:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: an instance of [`Bakery`](#sqlalchemy.ext.baked.Bakery "sqlalchemy.ext.baked.Bakery")
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Bakery`](#sqlalchemy.ext.baked.Bakery "sqlalchemy.ext.baked.Bakery")的实例。
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Members**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[add_criteria()](#sqlalchemy.ext.baked.BakedQuery.add_criteria), [bakery()](#sqlalchemy.ext.baked.BakedQuery.bakery),
    [for_session()](#sqlalchemy.ext.baked.BakedQuery.for_session), [spoil()](#sqlalchemy.ext.baked.BakedQuery.spoil),
    [to_query()](#sqlalchemy.ext.baked.BakedQuery.to_query), [with_criteria()](#sqlalchemy.ext.baked.BakedQuery.with_criteria)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[add_criteria()](#sqlalchemy.ext.baked.BakedQuery.add_criteria), [bakery()](#sqlalchemy.ext.baked.BakedQuery.bakery),
    [for_session()](#sqlalchemy.ext.baked.BakedQuery.for_session), [spoil()](#sqlalchemy.ext.baked.BakedQuery.spoil),
    [to_query()](#sqlalchemy.ext.baked.BakedQuery.to_query), [with_criteria()](#sqlalchemy.ext.baked.BakedQuery.with_criteria)'
- en: A builder object for [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query") objects.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 用于构建[`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.query.Query")对象的构建器对象。
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Add a criteria function to this [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery").
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 向这个[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")添加一个条件函数。
- en: This is equivalent to using the `+=` operator to modify a [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") in-place.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用`+=`运算符就地修改[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")。
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Construct a new bakery.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的烘焙坊。
- en: 'Returns:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: an instance of [`Bakery`](#sqlalchemy.ext.baked.Bakery "sqlalchemy.ext.baked.Bakery")
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Bakery`](#sqlalchemy.ext.baked.Bakery "sqlalchemy.ext.baked.Bakery")的实例。
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Return a `Result` object for this [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery").
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")返回一个`Result`对象。
- en: This is equivalent to calling the [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") as a Python callable, e.g. `result = my_baked_query(session)`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于将[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")作��Python可调用对象调用，例如`result
    = my_baked_query(session)`。
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Cancel any query caching that will occur on this BakedQuery object.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 取消在此`BakedQuery`对象上发生的任何查询缓存。
- en: The BakedQuery can continue to be used normally, however additional creational
    functions will not be cached; they will be called on every invocation.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`BakedQuery`可以继续正常使用，但是附加的创建函数不会被缓存；它们将在每次调用时被调用。'
- en: This is to support the case where a particular step in constructing a baked
    query disqualifies the query from being cacheable, such as a variant that relies
    upon some uncacheable value.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了支持在构建烘焙查询的特定步骤中，某些使查询无法缓存的情况，例如依赖于某些不可缓存值的变体。
- en: 'Parameters:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**full** – if False, only functions added to this [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") object subsequent to the spoil step will be
    non-cached; the state of the [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")
    up until this point will be pulled from the cache. If True, then the entire [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object is built from scratch each time, with all creational
    functions being called on each invocation.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**full** – 如果为False，则仅在破坏步骤之后添加到此[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")对象的函数将不被缓存；直到此时为止的[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")的状态将从缓存中拉取。如果为True，则每次完全从头构建整个[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，每次调用都会调用所有创建函数。'
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Return the [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object for use as a subquery.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 返回作为子查询使用的[`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象。
- en: 'This method should be used within the lambda callable being used to generate
    a step of an enclosing [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery").
    The parameter should normally be the [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object that is passed to the lambda:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法应在用于生成封闭的[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")步骤的lambda可调用对象内部使用。参数通常应该是传递给lambda的[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象：
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the case where the subquery is used in the first callable against a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is also accepted:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在子查询用于第一个针对[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的可调用对象时，也接受[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")：
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Parameters:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**query_or_session** –'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**query_or_session** –'
- en: a [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object or a class [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object, that is assumed to be within the context of an enclosing [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") callable.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象或一个类[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象，假设它在封闭的[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")可调用对象的上下文中。
- en: New in version 1.3.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3中的新功能。
- en: '[PRE25]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Add a criteria function to a [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") cloned from this one.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 向从此克隆的[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")添加一个条件函数。
- en: This is equivalent to using the `+` operator to produce a new [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") with modifications.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用`+`运算符产生一个具有修改的新[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")。
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Callable which returns a [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery").
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个返回[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")的可调用对象。
- en: This object is returned by the class method [`BakedQuery.bakery()`](#sqlalchemy.ext.baked.BakedQuery.bakery
    "sqlalchemy.ext.baked.BakedQuery.bakery"). It exists as an object so that the
    “cache” can be easily inspected.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象由类方法[`BakedQuery.bakery()`](#sqlalchemy.ext.baked.BakedQuery.bakery "sqlalchemy.ext.baked.BakedQuery.bakery")返回。它存在为了便于检查“缓存”。
- en: New in version 1.2.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.2中的新功能。
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Invokes a [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")
    against a [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")发起一个[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")的调用。
- en: The `Result` object is where the actual [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query") object gets created, or retrieved from the cache,
    against a target [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    and is then invoked for results.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`Result`对象是实际创建或从缓存中检索的针对目标[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query")对象，并且然后为结果调用。'
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Return all rows.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 返回所有行。
- en: Equivalent to [`Query.all()`](../queryguide/query.html#sqlalchemy.orm.Query.all
    "sqlalchemy.orm.Query.all").
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 等效于[`Query.all()`](../queryguide/query.html#sqlalchemy.orm.Query.all "sqlalchemy.orm.Query.all")。
- en: '[PRE29]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: return the ‘count’.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 返回‘count’。
- en: Equivalent to [`Query.count()`](../queryguide/query.html#sqlalchemy.orm.Query.count
    "sqlalchemy.orm.Query.count").
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 等效于[`Query.count()`](../queryguide/query.html#sqlalchemy.orm.Query.count "sqlalchemy.orm.Query.count")。
- en: Note this uses a subquery to ensure an accurate count regardless of the structure
    of the original statement.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这使用子查询确保准确计算，而不管原始语句的结构如何。
- en: '[PRE30]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Return the first row.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 返回第一行。
- en: Equivalent to [`Query.first()`](../queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first").
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 等效于[`Query.first()`](../queryguide/query.html#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")。
- en: '[PRE31]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Retrieve an object based on identity.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 根据标识检索对象。
- en: Equivalent to [`Query.get()`](../queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get").
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 等效于[`Query.get()`](../queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")。
- en: '[PRE32]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Return exactly one result or raise an exception.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 返回确切的一个结果或引发异常。
- en: Equivalent to [`Query.one()`](../queryguide/query.html#sqlalchemy.orm.Query.one
    "sqlalchemy.orm.Query.one").
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 等效于[`Query.one()`](../queryguide/query.html#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one")。
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Return one or zero results, or raise an exception for multiple rows.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个或零个结果，或者对于多行引发异常。
- en: Equivalent to [`Query.one_or_none()`](../queryguide/query.html#sqlalchemy.orm.Query.one_or_none
    "sqlalchemy.orm.Query.one_or_none").
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 等效于[`Query.one_or_none()`](../queryguide/query.html#sqlalchemy.orm.Query.one_or_none
    "sqlalchemy.orm.Query.one_or_none")。
- en: '[PRE34]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Specify parameters to be replaced into the string SQL statement.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 指定要替换为字符串 SQL 语句的参数。
- en: '[PRE35]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Return the first element of the first result or None if no rows present. If
    multiple rows are returned, raises MultipleResultsFound.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 返回第一个结果的第一个元素，如果没有行，则返回 None。如果返回多行，则引发MultipleResultsFound异常。
- en: Equivalent to [`Query.scalar()`](../queryguide/query.html#sqlalchemy.orm.Query.scalar
    "sqlalchemy.orm.Query.scalar").
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 等效于[`Query.scalar()`](../queryguide/query.html#sqlalchemy.orm.Query.scalar "sqlalchemy.orm.Query.scalar")。
- en: '[PRE36]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Add a criteria function that will be applied post-cache.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个将在缓存后应用的条件函数。
- en: This adds a function that will be run against the [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object after it is retrieved from the cache. This currently
    includes **only** the [`Query.params()`](../queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params") and [`Query.execution_options()`](../queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options") methods.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加一个函数，该函数将针对从缓存中检索的[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象运行。目前仅包括[`Query.params()`](../queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params")和[`Query.execution_options()`](../queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options")方法。
- en: Warning
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '`Result.with_post_criteria()` functions are applied to the [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object **after** the query’s SQL statement object has
    been retrieved from the cache. Only [`Query.params()`](../queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params") and [`Query.execution_options()`](../queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options") methods should be used.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`Result.with_post_criteria()`函数应用于[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象**之后**查询的 SQL 语句对象已从缓存中检索。只应使用[`Query.params()`](../queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params")和[`Query.execution_options()`](../queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options")方法。'
- en: New in version 1.2.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.2中新增。
- en: Synopsis
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概要
- en: 'Usage of the baked system starts by producing a so-called “bakery”, which represents
    storage for a particular series of query objects:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 使用烘焙系统的方法是首先生成所谓的“烘焙坊”，该坊代表一系列特定的查询对象的存储：
- en: '[PRE37]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The above “bakery” will store cached data in an LRU cache that defaults to 200
    elements, noting that an ORM query will typically contain one entry for the ORM
    query as invoked, as well as one entry per database dialect for the SQL string.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 上述“面包店”将在默认为200个元素的LRU缓存中存储缓存数据，需要注意的是，ORM查询通常会包含一个为调用的ORM查询条目，以及每个数据库方言的SQL字符串的条目。
- en: 'The bakery allows us to build up a [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query") object by specifying its construction as a series
    of Python callables, which are typically lambdas. For succinct usage, it overrides
    the `+=` operator so that a typical query build-up looks like the following:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 面包店允许我们通过指定其构造方式为一系列Python可调用对象来构建一个[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query")对象，这些对象通常是lambda表达式。为了简洁使用，它重写了`+=`运算符，使得典型的查询构建看起来像下面这样：
- en: '[PRE38]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Following are some observations about the above code:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于上述代码的一些观察：
- en: The `baked_query` object is an instance of [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery"). This object is essentially the “builder” for
    a real orm [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.query.Query")
    object, but it is not itself the *actual* [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query") object.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`baked_query`对象是[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")的一个实例。这个对象本质上是一个真正的orm
    [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.query.Query")对象的“构造器”，但它本身并不是*真正的*
    [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.query.Query")对象。'
- en: The actual [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.query.Query")
    object is not built at all, until the very end of the function when `Result.all()`
    is called.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实际的[`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.query.Query")对象根本没有构建，直到函数的最后一刻调用`Result.all()`时。
- en: The steps that are added to the `baked_query` object are all expressed as Python
    functions, typically lambdas. The first lambda given to the [`bakery()`](#sqlalchemy.ext.baked.bakery
    "sqlalchemy.ext.baked.bakery") function receives a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") as its argument. The remaining lambdas each receive
    a [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.query.Query")
    as their argument.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加到`baked_query`对象的步骤都表示为Python函数，通常是lambda函数。给[`bakery()`](#sqlalchemy.ext.baked.bakery
    "sqlalchemy.ext.baked.bakery")函数的第一个lambda函数以[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")作为其参数。其余的lambda函数每个都以[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query")作为其参数。
- en: In the above code, even though our application may call upon `search_for_user()`
    many times, and even though within each invocation we build up an entirely new
    [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")
    object, *all of the lambdas are only called once*. Each lambda is **never** called
    a second time for as long as this query is cached in the bakery.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上述代码中，即使我们的应用程序可能多次调用`search_for_user()`，即使在每次调用中我们都会构建一个全新的[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")对象，*所有的lambda函数只会被调用一次*。只要此查询被缓存在面包店中，每个lambda函数**永远**不会再次被调用。
- en: 'The caching is achieved by storing references to the **lambda objects themselves**
    in order to formulate a cache key; that is, the fact that the Python interpreter
    assigns an in-Python identity to these functions is what determines how to identify
    the query on successive runs. For those invocations of `search_for_user()` where
    the `email` parameter is specified, the callable `lambda q: q.filter(User.email
    == bindparam(''email''))` will be part of the cache key that’s retrieved; when
    `email` is `None`, this callable is not part of the cache key.'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '缓存是通过存储**lambda对象本身**的引用来实现的，以形成一个缓存键；也就是说，Python解释器将这些函数分配给Python标识符，这决定了如何在后续运行中识别查询。对于那些指定了`email`参数的`search_for_user()`调用，可调用对象`lambda
    q: q.filter(User.email == bindparam(''email''))`将成为检索到的缓存键的一部分；当`email`为`None`时，此可调用对象不会成为缓存键的一部分。'
- en: Because the lambdas are all called only once, it is essential that no variables
    which may change across calls are referenced **within** the lambdas; instead,
    assuming these are values to be bound into the SQL string, we use [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") to construct named parameters, where we
    apply their actual values later using `Result.params()`.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为 lambda 函数只被调用一次，所以至关重要的是在 lambda 函数**内部**不引用可能在调用之间更改的变量；相反，假设这些是要绑定到 SQL
    字符串中的值，我们使用 [`bindparam()`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") 来构造命名参数，在稍后使用 `Result.params()` 应用其实际值。
- en: Performance
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能
- en: 'The baked query probably looks a little odd, a little bit awkward and a little
    bit verbose. However, the savings in Python performance for a query which is invoked
    lots of times in an application are very dramatic. The example suite `short_selects`
    demonstrated in [Performance](../examples.html#examples-performance) illustrates
    a comparison of queries which each return only one row, such as the following
    regular query:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 烘焙查询可能看起来有点奇怪，有点笨拙，有点啰嗦。然而，在应用程序中调用多次的查询中，Python 性能的节约非常显著。在 [Performance](../examples.html#examples-performance)
    中演示的示例套件 `short_selects` 对比了每个仅返回一行的查询，例如以下常规查询：
- en: '[PRE39]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'compared to the equivalent “baked” query:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 与等效的“烘焙”查询相比：
- en: '[PRE40]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The difference in Python function call count for an iteration of 10000 calls
    to each block are:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 对于对每个块进行 10000 次调用的 Python 函数调用次数的差异为：
- en: '[PRE41]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In terms of number of seconds on a powerful laptop, this comes out as:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在一台性能强大的笔记本电脑上，这在秒数上表现如下：
- en: '[PRE42]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note that this test very intentionally features queries that only return one
    row. For queries that return many rows, the performance advantage of the baked
    query will have less and less of an impact, proportional to the time spent fetching
    rows. It is critical to keep in mind that the **baked query feature only applies
    to building the query itself, not the fetching of results**. Using the baked feature
    is by no means a guarantee to a much faster application; it is only a potentially
    useful feature for those applications that have been measured as being impacted
    by this particular form of overhead.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个测试非常有意地包含了只返回一行的查询。对于返回许多行的查询，烘焙查询的性能优势将逐渐减少，与获取行所花费的时间成比例。必须牢记的是，**烘焙查询功能仅适用于构建查询本身，而不适用于获取结果**。使用烘焙功能绝不是使应用程序更快的保证；它只是一个可能有用的功能，适用于那些已经被测量为受到这种特定形式的开销影响的应用程序。
- en: Rationale
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理念
- en: 'The “lambda” approach above is a superset of what would be a more traditional
    “parameterized” approach. Suppose we wished to build a simple system where we
    build a [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.query.Query")
    just once, then store it in a dictionary for re-use. This is possible right now
    by just building up the query, and removing its [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") by calling `my_cached_query = query.with_session(None)`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的“lambda”方法是更传统的“参数化”方法的超集。假设我们希望构建一个简单的系统，在这个系统中我们只需构建一个[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query")，然后将其存储在字典中以便重复使用。现在，我们可以通过构建查询，然后通过调用 `my_cached_query
    = query.with_session(None)` 来移除其[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")来实现这一点：
- en: '[PRE43]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The above approach gets us a very minimal performance benefit. By re-using a
    [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.query.Query"),
    we save on the Python work within the `session.query(Model)` constructor as well
    as calling upon `filter(Model.id == bindparam('id'))`, which will skip for us
    the building up of the Core expression as well as sending it to [`Query.filter()`](../queryguide/query.html#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter"). However, the approach still regenerates the full
    [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    object every time when [`Query.all()`](../queryguide/query.html#sqlalchemy.orm.Query.all
    "sqlalchemy.orm.Query.all") is called and additionally this brand new [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") is sent off to the string compilation step
    every time, which for a simple case like the above is probably about 70% of the
    overhead.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法只能带来非常微小的性能提升。通过重用[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query")，我们可以节省在`session.query(Model)`构造函数内部的 Python 工作以及调用`filter(Model.id
    == bindparam('id'))`时所需的工作，这将为我们跳过 Core 表达式的构建以及将其发送到[`Query.filter()`](../queryguide/query.html#sqlalchemy.orm.Query.filter
    "sqlalchemy.orm.Query.filter")。然而，该方法仍然在每次调用[`Query.all()`](../queryguide/query.html#sqlalchemy.orm.Query.all
    "sqlalchemy.orm.Query.all")时重新生成完整的[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")对象，并且每次还会将这个全新的[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")对象发送到字符串编译步骤中，对于像上面这样的简单情况，这可能占据了大约 70% 的开销。
- en: 'To reduce the additional overhead, we need some more specialized logic, some
    way to memoize the construction of the select object and the construction of the
    SQL. There is an example of this on the wiki in the section [BakedQuery](https://bitbucket.org/zzzeek/sqlalchemy/wiki/UsageRecipes/BakedQuery),
    a precursor to this feature, however in that system, we aren’t caching the *construction*
    of the query. In order to remove all the overhead, we need to cache both the construction
    of the query as well as the SQL compilation. Let’s assume we adapted the recipe
    in this way and made ourselves a method `.bake()` that pre-compiles the SQL for
    the query, producing a new object that can be invoked with minimal overhead. Our
    example becomes:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少额外的开销，我们需要一些更专门的逻辑，一种记忆构建选择对象和构建 SQL 的方法。在维基中的[BakedQuery](https://bitbucket.org/zzzeek/sqlalchemy/wiki/UsageRecipes/BakedQuery)部分有一个例子，这是该功能的前身，但在那个系统中，我们没有缓存查询的*构建*。为了消除所有开销，我们需要缓存查询的构建以及
    SQL 编译。假设我们按照这种方式调整了配方，并制作了一个`.bake()`方法，用于预先编译查询的 SQL，生成一个可以以最小开销调用的新对象。我们的例子变成了：
- en: '[PRE44]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Above, we’ve fixed the performance situation, but we still have this string
    cache key to deal with.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我们已经解决了性能问题，但我们仍然需要处理这个字符串缓存键。
- en: 'We can use the “bakery” approach to re-frame the above in a way that looks
    less unusual than the “building up lambdas” approach, and more like a simple improvement
    upon the simple “reuse a query” approach:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用“面包房”方法来重新构建上述方法，使其看起来不像“构建 lambda”方法那样不寻常，而更像是对简单“重用查询”的简单改进：
- en: '[PRE45]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Above, we use the “baked” system in a manner that is very similar to the simplistic
    “cache a query” system. However, it uses two fewer lines of code, does not need
    to manufacture a cache key of “my_key”, and also includes the same feature as
    our custom “bake” function that caches 100% of the Python invocation work from
    the constructor of the query, to the filter call, to the production of the [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object, to the string compilation step.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，我们使用“baked”系统的方式与简单的“缓存查询”系统非常相似。但是，它使用了两行更少的代码，不需要制造一个“my_key”的缓存键，而且还包含了与我们自定义的“bake”函数相同的功能，该函数缓存了查询构造函数，筛选调用，生成[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")对象以及字符串编译步骤的 100% Python 调用工作。
- en: 'From the above, if we ask ourselves, “what if lookup needs to make conditional
    decisions as to the structure of the query?”, this is where hopefully it becomes
    apparent why “baked” is the way it is. Instead of a parameterized query building
    off from exactly one function (which is how we thought baked might work originally),
    we can build it from *any number* of functions. Consider our naive example, if
    we needed to have an additional clause in our query on a conditional basis:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的内容中，如果我们问自己，“如果查找需要根据查询结构做条件决策，会怎样？”，这就是为什么“烘焙”是这样的方式的原因。我们可以从*任意数量*的函数构建参数化查询，而不是从一个函数构建（这是我们最初认为烘焙可能起作用的方式）。考虑我们的简单示例，如果我们需要在查询中有一个额外的条件子句：
- en: '[PRE46]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Our “simple” parameterized system must now be tasked with generating cache
    keys which take into account whether or not the “include_frobnizzle” flag was
    passed, as the presence of this flag means that the generated SQL would be entirely
    different. It should be apparent that as the complexity of query building goes
    up, the task of caching these queries becomes burdensome very quickly. We can
    convert the above example into a direct use of “bakery” as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的“简单”参数化系统现在必须负责生成缓存键，考虑到是否传递了“include_frobnizzle”标志，因为该标志的存在意味着生成的SQL将完全不同。很明显，随着查询构建的复杂性增加，缓存这些查询的任务会很快变得繁重。我们可以将上面的示例转换为直接使用“bakery”如下：
- en: '[PRE47]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Above, we again cache not just the query object but all the work it needs to
    do in order to generate SQL. We also no longer need to deal with making sure we
    generate a cache key that accurately takes into account all of the structural
    modifications we’ve made; this is now handled automatically and without the chance
    of mistakes.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的情况下，我们不仅缓存查询对象，还缓存生成SQL所需的所有工作。我们也不再需要处理确保生成准确考虑到我们所做的所有结构修改的缓存键；这现在是自动处理的，而且没有错误的机会。
- en: 'This code sample is a few lines shorter than the naive example, removes the
    need to deal with cache keys, and has the vast performance benefits of the full
    so-called “baked” feature. But still a little verbose! Hence we take methods like
    [`BakedQuery.add_criteria()`](#sqlalchemy.ext.baked.BakedQuery.add_criteria "sqlalchemy.ext.baked.BakedQuery.add_criteria")
    and [`BakedQuery.with_criteria()`](#sqlalchemy.ext.baked.BakedQuery.with_criteria
    "sqlalchemy.ext.baked.BakedQuery.with_criteria") and shorten them into operators,
    and encourage (though certainly not require!) using simple lambdas, only as a
    means to reduce verbosity:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码示例比简单示例少了几行，消除了处理缓存键的需要，并具有完整的所谓“烘焙”功能的巨大性能优势。但仍然有点冗长！因此，我们将像[`BakedQuery.add_criteria()`](#sqlalchemy.ext.baked.BakedQuery.add_criteria
    "sqlalchemy.ext.baked.BakedQuery.add_criteria")和[`BakedQuery.with_criteria()`](#sqlalchemy.ext.baked.BakedQuery.with_criteria
    "sqlalchemy.ext.baked.BakedQuery.with_criteria")这样的方法缩短为运算符，并鼓励（尽管当然不是必须！）使用简单的lambda表达式，只是为了减少冗长：
- en: '[PRE48]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Where above, the approach is simpler to implement and much more similar in code
    flow to what a non-cached querying function would look like, hence making code
    easier to port.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的情况下，这种方法更容易实现，并且在代码流程上更类似于非缓存查询函数的代码，因此使得代码更容易移植。
- en: The above description is essentially a summary of the design process used to
    arrive at the current “baked” approach. Starting from the “normal” approaches,
    the additional issues of cache key construction and management, removal of all
    redundant Python execution, and queries built up with conditionals needed to be
    addressed, leading to the final approach.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 上述描述基本上是到达当前“烘焙”方法的设计过程的总结。从“正常”方法开始，缓存键构建和管理的额外问题，消除所有多余的Python执行以及需要处理条件构建的查询都需要解决，最终导致了最终方法。
- en: Special Query Techniques
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊查询技术
- en: This section will describe some techniques for specific query situations.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分将描述一些特定查询情况下的技术。
- en: '### Using IN expressions'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用IN表达式'
- en: 'The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") method in SQLAlchemy historically
    renders a variable set of bound parameters based on the list of items that’s passed
    to the method. This doesn’t work for baked queries as the length of that list
    can change on different calls. To solve this problem, the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") parameter supports a late-rendered IN expression
    that is safe to be cached inside of baked query. The actual list of elements is
    rendered at statement execution time, rather than at statement compilation time:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在SQLAlchemy中，[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 方法在历史上基于传递给方法的项目列表渲染一组变量绑定参数。这对于烘焙查询不起作用，因为该列表的长度可能在不同调用时发生变化。为了解决这个问题，[`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") 参数支持一个延迟渲染的IN表达式，可以安全地缓存在烘焙查询内部。实际元素列表在语句执行时渲染，而不是在语句编译时：
- en: '[PRE49]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: See also
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")'
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: Using Subqueries
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用子查询
- en: 'When using [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    objects, it is often needed that one [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object is used to generate a subquery within another.
    In the case where the [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") is currently in baked form, an interim method may be used
    to retrieve the [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, using the [`BakedQuery.to_query()`](#sqlalchemy.ext.baked.BakedQuery.to_query
    "sqlalchemy.ext.baked.BakedQuery.to_query") method. This method is passed the
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    or [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    that is the argument to the lambda callable used to generate a particular step
    of the baked query:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用[`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象时，通常需要一个[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象用于在另一个内部生成子查询。在[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")当前处于烘焙形式的情况下，可以使用一个中间方法来检索[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，使用[`BakedQuery.to_query()`](#sqlalchemy.ext.baked.BakedQuery.to_query
    "sqlalchemy.ext.baked.BakedQuery.to_query")方法。该方法传递给生成烘焙查询特定步骤的lambda可调用参数的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")或[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")：
- en: '[PRE50]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: New in version 1.3.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 版本1.3中新增。
- en: '### Using the before_compile event'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用before_compile事件'
- en: 'As of SQLAlchemy 1.3.11, the use of the [`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event against a particular [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") will disallow the baked query system from caching the
    query, if the event hook returns a new [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object that is different from the one passed in. This
    is so that the [`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") hook may be invoked against a particular
    [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    every time it is used, to accommodate for hooks that alter the query differently
    each time. To allow a [`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") to alter a [`sqlalchemy.orm.Query()`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object, but still to allow the result to be cached, the
    event can be registered passing the `bake_ok=True` flag:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 自 SQLAlchemy 1.3.11 起，针对特定的 [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 使用 [`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") 事件将禁止烘焙查询系统缓存查询，如果事件挂钩返回一个与传入的不同的新
    [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    对象。这样，每次使用特定的 [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    都可以调用 [`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") 钩子，以适应每次更改查询的钩子。要允许 [`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") 修改 [`sqlalchemy.orm.Query()`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象，但仍然允许结果被缓存，可以注册事件并传递 `bake_ok=True` 标志：
- en: '[PRE51]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The above strategy is appropriate for an event that will modify a given [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in exactly the same way every time, not dependent on specific
    parameters or external state that changes.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 上述策略适用于每次以完全相同方式修改给定的 [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 的事件，不依赖于特定参数或更改的外部状态。
- en: 'New in version 1.3.11: - added the “bake_ok” flag to the [`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event and disallowed caching via
    the “baked” extension from occurring for event handlers that return a new [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object if this flag is not set.  ### Using IN expressions'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '新版本 1.3.11 中添加了 `bake_ok` 标志到 [`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") 事件，并且如果此标志未设置，则不允许为返回新 [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象的事件处理程序通过“烘焙”扩展进行缓存。  ### 使用 IN 表达式'
- en: 'The [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") method in SQLAlchemy historically
    renders a variable set of bound parameters based on the list of items that’s passed
    to the method. This doesn’t work for baked queries as the length of that list
    can change on different calls. To solve this problem, the [`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") parameter supports a late-rendered IN expression
    that is safe to be cached inside of baked query. The actual list of elements is
    rendered at statement execution time, rather than at statement compilation time:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: SQLAlchemy 中的 [`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_") 方法在历史上根据传递给方法的项目列表呈现一组变量绑定参数。对于烘焙查询，这不起作用，因为该列表的长度可以在不同的调用中改变。为解决此问题，[`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam") 参数支持在烘焙查询中安全缓存的延迟呈现 IN 表达式。实际元素列表在语句执行时呈现，而不是在语句编译时：
- en: '[PRE52]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: See also
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '[`bindparam.expanding`](../../core/sqlelement.html#sqlalchemy.sql.expression.bindparam.params.expanding
    "sqlalchemy.sql.expression.bindparam")'
- en: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[`ColumnOperators.in_()`](../../core/sqlelement.html#sqlalchemy.sql.expression.ColumnOperators.in_
    "sqlalchemy.sql.expression.ColumnOperators.in_")'
- en: Using Subqueries
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用子查询
- en: 'When using [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    objects, it is often needed that one [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object is used to generate a subquery within another.
    In the case where the [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") is currently in baked form, an interim method may be used
    to retrieve the [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object, using the [`BakedQuery.to_query()`](#sqlalchemy.ext.baked.BakedQuery.to_query
    "sqlalchemy.ext.baked.BakedQuery.to_query") method. This method is passed the
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    or [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    that is the argument to the lambda callable used to generate a particular step
    of the baked query:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象时，通常需要一个[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象用于在另一个查询中生成子查询。在当前[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")处于烘焙形式时，可能需要使用一个临时方法来检索[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，该方法使用[`BakedQuery.to_query()`](#sqlalchemy.ext.baked.BakedQuery.to_query
    "sqlalchemy.ext.baked.BakedQuery.to_query")方法。此方法传递给用于生成烘焙查询特定步骤的 lambda 可调用的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")或[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")参数：
- en: '[PRE53]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: New in version 1.3.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.3。
- en: '### Using the before_compile event'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 before_compile 事件'
- en: 'As of SQLAlchemy 1.3.11, the use of the [`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event against a particular [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") will disallow the baked query system from caching the
    query, if the event hook returns a new [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object that is different from the one passed in. This
    is so that the [`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") hook may be invoked against a particular
    [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    every time it is used, to accommodate for hooks that alter the query differently
    each time. To allow a [`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") to alter a [`sqlalchemy.orm.Query()`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object, but still to allow the result to be cached, the
    event can be registered passing the `bake_ok=True` flag:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 从 SQLAlchemy 1.3.11 开始，针对特定[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")使用[`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件将阻止烘焙查询系统缓存查询，如果事件钩子返回一个与传入的不同的新[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象。这是为了每次使用时都可以调用特定[`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")钩子，以适应每次都以不同方式修改查询的钩子。要允许[`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")修改[`sqlalchemy.orm.Query()`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，但仍然允许结果被缓存，可以注册事件并传递`bake_ok=True`标志：
- en: '[PRE54]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: The above strategy is appropriate for an event that will modify a given [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") in exactly the same way every time, not dependent on specific
    parameters or external state that changes.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 以上策略适用于每次都会以完全相同方式修改给定的[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")的事件，不依赖于特定参数或会发生变化的外部状态。
- en: 'New in version 1.3.11: - added the “bake_ok” flag to the [`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile") event and disallowed caching via
    the “baked” extension from occurring for event handlers that return a new [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object if this flag is not set.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.3.11 中新增：- 在[`QueryEvents.before_compile()`](../events.html#sqlalchemy.orm.QueryEvents.before_compile
    "sqlalchemy.orm.QueryEvents.before_compile")事件中添加了“bake_ok”标志，并且如果未设置此标志，则禁止通过“baked”扩展对返回新的[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象的事件处理程序进行缓存。
- en: Disabling Baked Queries Session-wide
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用全局 Baked 查询
- en: 'The flag [`Session.enable_baked_queries`](../session_api.html#sqlalchemy.orm.Session.params.enable_baked_queries
    "sqlalchemy.orm.Session") may be set to False, causing all baked queries to not
    use the cache when used against that [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"):'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 标志[`Session.enable_baked_queries`](../session_api.html#sqlalchemy.orm.Session.params.enable_baked_queries
    "sqlalchemy.orm.Session")可以设置为 False，导致所有烘焙查询在用于该[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")时不使用缓存：
- en: '[PRE55]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Like all session flags, it is also accepted by factory objects like [`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker") and methods like [`sessionmaker.configure()`](../session_api.html#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure").
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有会话标志一样，它也被工厂对象如[`sessionmaker`](../session_api.html#sqlalchemy.orm.sessionmaker
    "sqlalchemy.orm.sessionmaker")和方法如[`sessionmaker.configure()`](../session_api.html#sqlalchemy.orm.sessionmaker.configure
    "sqlalchemy.orm.sessionmaker.configure")所接受。
- en: The immediate rationale for this flag is so that an application which is seeing
    issues potentially due to cache key conflicts from user-defined baked queries
    or other baked query issues can turn the behavior off, in order to identify or
    eliminate baked queries as the cause of an issue.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 此标志的直接理由是，应用程序可能由于用户定义的烘焙查询或其他烘焙查询问题而看到问题，可以将行为关闭，以识别或排除烘焙查询作为问题的原因。
- en: New in version 1.2.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.2 中的新功能。
- en: Lazy Loading Integration
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 惰性加载集成
- en: 'Changed in version 1.4: As of SQLAlchemy 1.4, the “baked query” system is no
    longer part of the relationship loading system. The [native caching](../../core/connections.html#sql-caching)
    system is used instead.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 1.4 起更改：自 SQLAlchemy 1.4 起，“烘焙查询”系统不再是关系加载系统的一部分。取而代之的是使用[本地缓存](../../core/connections.html#sql-caching)系统。
- en: API Documentation
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API 文档
- en: '| Object Name | Description |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [BakedQuery](#sqlalchemy.ext.baked.BakedQuery) | A builder object for [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query") objects. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| [BakedQuery](#sqlalchemy.ext.baked.BakedQuery) | 用于[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query")对象的构建器对象。 |'
- en: '| [bakery](#sqlalchemy.ext.baked.bakery) | Construct a new bakery. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| [bakery](#sqlalchemy.ext.baked.bakery) | 构建一个新的面包店。 |'
- en: '| [Bakery](#sqlalchemy.ext.baked.Bakery) | Callable which returns a [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery"). |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| [Bakery](#sqlalchemy.ext.baked.Bakery) | 返回一个[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")的可调用对象。 |'
- en: '[PRE56]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Construct a new bakery.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的面包店。
- en: 'Returns:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: an instance of [`Bakery`](#sqlalchemy.ext.baked.Bakery "sqlalchemy.ext.baked.Bakery")
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Bakery`](#sqlalchemy.ext.baked.Bakery "sqlalchemy.ext.baked.Bakery")的实例
- en: '[PRE57]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '**Members**'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[add_criteria()](#sqlalchemy.ext.baked.BakedQuery.add_criteria), [bakery()](#sqlalchemy.ext.baked.BakedQuery.bakery),
    [for_session()](#sqlalchemy.ext.baked.BakedQuery.for_session), [spoil()](#sqlalchemy.ext.baked.BakedQuery.spoil),
    [to_query()](#sqlalchemy.ext.baked.BakedQuery.to_query), [with_criteria()](#sqlalchemy.ext.baked.BakedQuery.with_criteria)'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '[add_criteria()](#sqlalchemy.ext.baked.BakedQuery.add_criteria), [bakery()](#sqlalchemy.ext.baked.BakedQuery.bakery),
    [for_session()](#sqlalchemy.ext.baked.BakedQuery.for_session), [spoil()](#sqlalchemy.ext.baked.BakedQuery.spoil),
    [to_query()](#sqlalchemy.ext.baked.BakedQuery.to_query), [with_criteria()](#sqlalchemy.ext.baked.BakedQuery.with_criteria)'
- en: A builder object for [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query") objects.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 用于[`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.query.Query")对象的构建器对象。
- en: '[PRE58]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Add a criteria function to this [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery").
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 为此[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")添加一个条件函数。
- en: This is equivalent to using the `+=` operator to modify a [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") in-place.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用 `+=` 运算符就地修改[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")。
- en: '[PRE59]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Construct a new bakery.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的面包店。
- en: 'Returns:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 返回：
- en: an instance of [`Bakery`](#sqlalchemy.ext.baked.Bakery "sqlalchemy.ext.baked.Bakery")
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Bakery`](#sqlalchemy.ext.baked.Bakery "sqlalchemy.ext.baked.Bakery")的实例
- en: '[PRE60]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Return a `Result` object for this [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery").
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 为此[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")返回一个`Result`对象。
- en: This is equivalent to calling the [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") as a Python callable, e.g. `result = my_baked_query(session)`.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于将[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")作为
    Python 可调用对象调用，例如 `result = my_baked_query(session)`。
- en: '[PRE61]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Cancel any query caching that will occur on this BakedQuery object.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 取消此`BakedQuery`对象上将发生的任何查询缓存。
- en: The BakedQuery can continue to be used normally, however additional creational
    functions will not be cached; they will be called on every invocation.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`BakedQuery`仍然可以正常使用，但是额外的创建函数不会被缓存；它们将在每次调用时被调用。'
- en: This is to support the case where a particular step in constructing a baked
    query disqualifies the query from being cacheable, such as a variant that relies
    upon some uncacheable value.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了支持构建烘焙查询的特定步骤使查询无法缓存的情况，例如依赖于某些不可缓存值的变体。
- en: 'Parameters:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**full** – if False, only functions added to this [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") object subsequent to the spoil step will be
    non-cached; the state of the [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")
    up until this point will be pulled from the cache. If True, then the entire [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object is built from scratch each time, with all creational
    functions being called on each invocation.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '**full** – 如果为 False，则仅在 spoil 步骤之后添加到此[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")对象的函数将不被缓存；直到此点为止的[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")状态将从缓存中提取。如果为 True，则每次都会从头开始构建整个[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象，每次调用都会调用所有创建函数。'
- en: '[PRE62]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Return the [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object for use as a subquery.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 返回用作子查询的[`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象。
- en: 'This method should be used within the lambda callable being used to generate
    a step of an enclosing [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery").
    The parameter should normally be the [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object that is passed to the lambda:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法应在用于生成封闭[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")步骤的
    lambda 可调用内使用。参数通常应为传递给 lambda 的[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象：
- en: '[PRE63]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'In the case where the subquery is used in the first callable against a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"), the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") is also accepted:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个可调用中使用子查询针对[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的情况下，也接受[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")：
- en: '[PRE64]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Parameters:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '**query_or_session** –'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '**query_or_session** –'
- en: a [`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object or a class [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    object, that is assumed to be within the context of an enclosing [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") callable.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象或一个类[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象，假定在封闭[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")可调用的上下文中。
- en: New in version 1.3.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.3 中新增。
- en: '[PRE65]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Add a criteria function to a [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") cloned from this one.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 向从此克隆的[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")添加一个条件函数。
- en: This is equivalent to using the `+` operator to produce a new [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery") with modifications.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用`+`运算符生成具有修改的新[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")。
- en: '[PRE66]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Callable which returns a [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery").
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个返回[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")的可调用对象。
- en: This object is returned by the class method [`BakedQuery.bakery()`](#sqlalchemy.ext.baked.BakedQuery.bakery
    "sqlalchemy.ext.baked.BakedQuery.bakery"). It exists as an object so that the
    “cache” can be easily inspected.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 此对象由类方法[`BakedQuery.bakery()`](#sqlalchemy.ext.baked.BakedQuery.bakery "sqlalchemy.ext.baked.BakedQuery.bakery")返回。它作为一个对象存在，以便可以轻松检查“缓存”。
- en: New in version 1.2.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.2 中新增。
- en: '[PRE67]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Invokes a [`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery "sqlalchemy.ext.baked.BakedQuery")
    against a [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 针对[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")调用[`BakedQuery`](#sqlalchemy.ext.baked.BakedQuery
    "sqlalchemy.ext.baked.BakedQuery")。
- en: The `Result` object is where the actual [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query") object gets created, or retrieved from the cache,
    against a target [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session"),
    and is then invoked for results.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`Result` 对象是实际创建或从缓存中检索到的[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.query.Query")对象，针对目标[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")进行调用以获取结果。'
- en: '[PRE68]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Return all rows.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 返回所有行。
- en: Equivalent to [`Query.all()`](../queryguide/query.html#sqlalchemy.orm.Query.all
    "sqlalchemy.orm.Query.all").
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Query.all()`](../queryguide/query.html#sqlalchemy.orm.Query.all "sqlalchemy.orm.Query.all")。
- en: '[PRE69]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: return the ‘count’.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 返回‘count’。
- en: Equivalent to [`Query.count()`](../queryguide/query.html#sqlalchemy.orm.Query.count
    "sqlalchemy.orm.Query.count").
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Query.count()`](../queryguide/query.html#sqlalchemy.orm.Query.count "sqlalchemy.orm.Query.count")。
- en: Note this uses a subquery to ensure an accurate count regardless of the structure
    of the original statement.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这使用子查询来确保准确计数，而不考虑原始语句的结构。
- en: '[PRE70]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Return the first row.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 返回第一行。
- en: Equivalent to [`Query.first()`](../queryguide/query.html#sqlalchemy.orm.Query.first
    "sqlalchemy.orm.Query.first").
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Query.first()`](../queryguide/query.html#sqlalchemy.orm.Query.first "sqlalchemy.orm.Query.first")。
- en: '[PRE71]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Retrieve an object based on identity.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 根据标识检索对象。
- en: Equivalent to [`Query.get()`](../queryguide/query.html#sqlalchemy.orm.Query.get
    "sqlalchemy.orm.Query.get").
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Query.get()`](../queryguide/query.html#sqlalchemy.orm.Query.get "sqlalchemy.orm.Query.get")。
- en: '[PRE72]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Return exactly one result or raise an exception.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 返回确切的一个结果或引发异常。
- en: Equivalent to [`Query.one()`](../queryguide/query.html#sqlalchemy.orm.Query.one
    "sqlalchemy.orm.Query.one").
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Query.one()`](../queryguide/query.html#sqlalchemy.orm.Query.one "sqlalchemy.orm.Query.one")。
- en: '[PRE73]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Return one or zero results, or raise an exception for multiple rows.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个或零个结果，或者对于多行会引发异常。
- en: Equivalent to [`Query.one_or_none()`](../queryguide/query.html#sqlalchemy.orm.Query.one_or_none
    "sqlalchemy.orm.Query.one_or_none").
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Query.one_or_none()`](../queryguide/query.html#sqlalchemy.orm.Query.one_or_none
    "sqlalchemy.orm.Query.one_or_none")。
- en: '[PRE74]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Specify parameters to be replaced into the string SQL statement.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 指定要替换到字符串 SQL 语句中的参数。
- en: '[PRE75]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Return the first element of the first result or None if no rows present. If
    multiple rows are returned, raises MultipleResultsFound.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 返回第一个结果的第一个元素，如果没有行则返回 None。如果返回多行，则引发 MultipleResultsFound 异常。
- en: Equivalent to [`Query.scalar()`](../queryguide/query.html#sqlalchemy.orm.Query.scalar
    "sqlalchemy.orm.Query.scalar").
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 等同于[`Query.scalar()`](../queryguide/query.html#sqlalchemy.orm.Query.scalar "sqlalchemy.orm.Query.scalar")。
- en: '[PRE76]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Add a criteria function that will be applied post-cache.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个将在缓存后应用的条件函数。
- en: This adds a function that will be run against the [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object after it is retrieved from the cache. This currently
    includes **only** the [`Query.params()`](../queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params") and [`Query.execution_options()`](../queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options") methods.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 这添加了一个将在从缓存中检索到的[`Query`](../queryguide/query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象上运行的函数。目前仅包括[`Query.params()`](../queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params")和[`Query.execution_options()`](../queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options")方法。
- en: Warning
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '`Result.with_post_criteria()` functions are applied to the [`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object **after** the query’s SQL statement object has
    been retrieved from the cache. Only [`Query.params()`](../queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params") and [`Query.execution_options()`](../queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options") methods should be used.'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`Result.with_post_criteria()` 函数应用于查询的[`Query`](../queryguide/query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象**之后**查询的 SQL 语句对象已从缓存中检索。只应使用[`Query.params()`](../queryguide/query.html#sqlalchemy.orm.Query.params
    "sqlalchemy.orm.Query.params")和[`Query.execution_options()`](../queryguide/query.html#sqlalchemy.orm.Query.execution_options
    "sqlalchemy.orm.Query.execution_options")方法。'
- en: New in version 1.2.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.2 中新增。
