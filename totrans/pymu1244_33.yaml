- en: IRect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/irect.html](https://pymupdf.readthedocs.io/en/latest/irect.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: IRect is a rectangular bounding box, very similar to [Rect](rect.html#rect),
    except that all corner coordinates are integers. IRect is used to specify an area
    of pixels, e.g. to receive image data during rendering. Otherwise, e.g. considerations
    concerning emptiness and validity of rectangles also apply to this class. Methods
    and attributes have the same names, and in many cases are implemented by re-using
    the respective [Rect](rect.html#rect) counterparts.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Attribute / Method** | **Short Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.contains()`](#IRect.contains "IRect.contains") | checks containment
    of another object |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.get_area()`](#IRect.get_area "IRect.get_area") | calculate rectangle
    area |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.intersect()`](#IRect.intersect "IRect.intersect") | common part with
    another rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.intersects()`](#IRect.intersects "IRect.intersects") | checks for
    non-empty intersection |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.morph()`](#IRect.morph "IRect.morph") | transform with a point and
    a matrix |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.torect()`](#IRect.torect "IRect.torect") | matrix that transforms
    to another rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.norm()`](#IRect.norm "IRect.norm") | the Euclidean norm |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.normalize()`](#IRect.normalize "IRect.normalize") | makes a rectangle
    finite |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.bottom_left`](#IRect.bottom_left "IRect.bottom_left") | bottom left
    point, synonym *bl* |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.bottom_right`](#IRect.bottom_right "IRect.bottom_right") | bottom
    right point, synonym *br* |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.height`](#IRect.height "IRect.height") | height of the rectangle
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.is_empty`](#IRect.is_empty "IRect.is_empty") | whether rectangle
    is empty |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.is_infinite`](#IRect.is_infinite "IRect.is_infinite") | whether rectangle
    is infinite |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.rect`](#IRect.rect "IRect.rect") | the [Rect](rect.html#rect) equivalent
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.top_left`](#IRect.top_left "IRect.top_left") | top left point, synonym
    *tl* |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.top_right`](#IRect.top_right "IRect.top_right") | top_right point,
    synonym *tr* |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.quad`](#IRect.quad "IRect.quad") | [Quad](quad.html#quad) made from
    rectangle corners |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.width`](#IRect.width "IRect.width") | width of the rectangle |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.x0`](#IRect.x0 "IRect.x0") | X-coordinate of the top left corner
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.x1`](#IRect.x1 "IRect.x1") | X-coordinate of the bottom right corner
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.y0`](#IRect.y0 "IRect.y0") | Y-coordinate of the top left corner
    |'
  prefs: []
  type: TYPE_TB
- en: '| [`IRect.y1`](#IRect.y1 "IRect.y1") | Y-coordinate of the bottom right corner
    |'
  prefs: []
  type: TYPE_TB
- en: '**Class API**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Overloaded constructors. Also see examples below and those for the [Rect](rect.html#rect)
    class.
  prefs: []
  type: TYPE_NORMAL
- en: If another irect is specified, a **new copy** will be made.
  prefs: []
  type: TYPE_NORMAL
- en: If sequence is specified, it must be a Python sequence type of 4 numbers (see
    [Using Python Sequences as Arguments in PyMuPDF](app3.html#sequencetypes)). Non-integer
    numbers will be truncated, non-numeric values will raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: The other parameters mean integer coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Calculates the area of the rectangle and, with no parameter, equals *abs(IRect)*.
    Like an empty rectangle, the area of an infinite rectangle is also zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**unit** (*str*) – Specify required unit: respective squares of “px” (pixels,
    default), “in” (inches), “cm” (centimeters), or “mm” (millimeters).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: float
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The intersection (common rectangular area) of the current rectangle and *ir*
    is calculated and replaces the current rectangle. If either rectangle is empty,
    the result is also empty. If either rectangle is infinite, the other one is taken
    as the result – and hence also infinite if both rectangles were infinite.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ir** (*rect_like*) – Second rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Checks whether *x* is contained in the rectangle. It may be [`rect_like`](glossary.html#rect_like
    "rect_like"), [`point_like`](glossary.html#point_like "point_like") or a number.
    If *x* is an empty rectangle, this is always true. Conversely, if the rectangle
    is empty this is always *False*, if *x* is not an empty rectangle and not a number.
    If *x* is a number, it will be checked to be one of the four components. *x in
    irect* and *irect.contains(x)* are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**x** ([IRect](#irect) or [Rect](rect.html#rect) or [Point](point.html#point)
    or int) – the object to check.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Checks whether the rectangle and the [`rect_like`](glossary.html#rect_like "rect_like")
    “r” contain a common non-empty [IRect](#irect). This will always be *False* if
    either is infinite or empty.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**r** (*rect_like*) – the rectangle to check.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.19.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compute the matrix which transforms this rectangle to a given one. See [`Rect.torect()`](rect.html#Rect.torect
    "Rect.torect").
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**rect** (*rect_like*) – the target rectangle. Must not be empty or infinite.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Matrix](matrix.html#matrix)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a matrix `mat` such that `self * mat = rect`. Can for example be used to transform
    between the page and the pixmap coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.17.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return a new quad after applying a matrix to it using a fixed point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**fixpoint** (*point_like*) – the fixed point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**matrix** (*matrix_like*) – the matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a new [Quad](quad.html#quad). This a wrapper of the same-named quad method.
    If infinite, the infinite quad is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.16.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return the Euclidean norm of the rectangle treated as a vector of four numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Make the rectangle finite. This is done by shuffling rectangle corners. After
    this, the bottom right corner will indeed be south-eastern to the top left one.
    See [Rect](rect.html#rect) for a more details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Equals *Point(x0, y0)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Equals *Point(x1, y0)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Equals *Point(x0, y1)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Equals *Point(x1, y1)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Point](point.html#point)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The [Rect](rect.html#rect) with the same coordinates as floats.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The quadrilateral *Quad(irect.tl, irect.tr, irect.bl, irect.br)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Quad](quad.html#quad)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Contains the width of the bounding box. Equals *abs(x1 - x0)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Contains the height of the bounding box. Equals *abs(y1 - y0)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: X-coordinate of the left corners.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Y-coordinate of the top corners.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: X-coordinate of the right corners.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Y-coordinate of the bottom corners.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: int
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '*True* if rectangle is infinite, *False* otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '*True* if rectangle is empty, *False* otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type:'
  prefs: []
  type: TYPE_NORMAL
- en: bool
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This class adheres to the Python sequence protocol, so components can be accessed
    via their index, too. Also refer to [Using Python Sequences as Arguments in PyMuPDF](app3.html#sequencetypes).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rectangles can be used with arithmetic operators – see chapter [Operator Algebra
    for Geometry Objects](algebra.html#algebra).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
