- en: Change Log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://pymupdf.readthedocs.io/en/latest/changes.html](https://pymupdf.readthedocs.io/en/latest/changes.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Changes in version 1.24.4 (2024-05-16)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** [3418](https://github.com/pymupdf/PyMuPDF/issues/3418): Re-introduced
    bug, text align add_redact_annot'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Fixed** [3472](https://github.com/pymupdf/PyMuPDF/issues/3472): insert_pdf
    gives SystemError'
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed sysinstall test failing to remove all of prior installation before new
    install.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed `utils.do_links()` crash.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Correct [TextPage](textpage.html#textpage) creation Code.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Unified various diagnostics.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix bug in `page_merge()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.24.3 (2024-05-09)**'
  prefs: []
  type: TYPE_NORMAL
- en: The Python module is now called `pymupdf`. `fitz` is still supported for backwards
    compatibility.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use MuPDF-1.24.2.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixed issues:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3357](https://github.com/pymupdf/PyMuPDF/issues/3357): PyMuPDF==1.24.0
    will hanging when using page.get_text(“text”)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3376](https://github.com/pymupdf/PyMuPDF/issues/3376): Redacting
    results are not as expected in 1.24.x.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3379](https://github.com/pymupdf/PyMuPDF/issues/3379): Documentation
    mismatch for get_text_blocks return value order.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3381](https://github.com/pymupdf/PyMuPDF/issues/3381): Contents
    stream contains floats in scientific notation'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3402](https://github.com/pymupdf/PyMuPDF/issues/3402): Cannot add
    Widgets containing inter-field-calculation JavaScript'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3414](https://github.com/pymupdf/PyMuPDF/issues/3414): missing attribute
    set_dpi()'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3430](https://github.com/pymupdf/PyMuPDF/issues/3430): page.get_text()
    cause process freeze with certain pdf on v1.24.2'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New/modified methods:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.remove_rotation()`](page.html#Page.remove_rotation "Page.remove_rotation"):
    new, set page rotation to zero while keeping appearance.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed some problems when checking for PDF properties.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixed pip builds from sdist (see discussion [3360](https://github.com/pymupdf/PyMuPDF/discussions/3360):
    Alpine linux docker build failing “No matching distribution found for pymupdfb==1.24.1”).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.24.2 (2024-04-17)**'
  prefs: []
  type: TYPE_NORMAL
- en: Removed obsolete classic implementation from releases (previously available
    as module `fitz_old`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixed issues:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3331](https://github.com/pymupdf/PyMuPDF/issues/3331): Document.pages()
    is incorrectly type-hinted'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3354](https://github.com/pymupdf/PyMuPDF/issues/3354): PyMuPDF==1.24.1:
    AttributeError: property ‘metadata’ of ‘Document’ object has no setter'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New/modified methods:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Document.bake()`](document.html#Document.bake "Document.bake"): new, make
    annotations / fields permanent content.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.cluster_drawings()`](page.html#Page.cluster_drawings "Page.cluster_drawings"):
    new, identifies drawing items (i.e. vector graphics or line-art) that belong together
    based on their geometrical vicinity.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.apply_redactions()`](page.html#Page.apply_redactions "Page.apply_redactions"):
    added new parameter [`text`](xml-class.html#Xml.text "Xml.text").'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Document.subset_fonts()`](document.html#Document.subset_fonts "Document.subset_fonts"):
    use MuPDF’s `pdf_subset_fonts()` instead of PyMuPDF code.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The [Document](document.html#document) class now supports page numbers specified
    as slices.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid causing MuPDF warnings.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.24.1 (2024-04-02)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fixed issues:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3278](https://github.com/pymupdf/PyMuPDF/issues/3278): apply_redactions
    moves some unredacted text'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3301](https://github.com/pymupdf/PyMuPDF/issues/3301): Be more permissive
    when classifying links as kind LINK_URI'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3306](https://github.com/pymupdf/PyMuPDF/issues/3306): Text containing
    capital ‘ET’ not appearing as annotation'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use MuPDF-1.24.1.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Support ObjStm Compression. Methods [`Document.save()`](document.html#Document.save
    "Document.save"), [`Document.ez_save()`](document.html#Document.ez_save "Document.ez_save")
    and `Document.write()` now support new parameters `use_objstm`, compression_effort`
    and `preserve_metadata`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.24.0 (2024-03-21)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fixed issues:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3281](https://github.com/pymupdf/PyMuPDF/issues/3281): Preparing
    metadata (pyproject.toml) did not run successfully'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3279](https://github.com/pymupdf/PyMuPDF/issues/3279): PyMuPDF no
    longer builds in Alpine Linux'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3257](https://github.com/pymupdf/PyMuPDF/issues/3257): apply_redactions()
    deleting text outside of annoted box'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3216](https://github.com/pymupdf/PyMuPDF/issues/3216): AttributeError:
    ‘Annot’ object has no attribute ‘__del__’'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3207](https://github.com/pymupdf/PyMuPDF/issues/3207): get_drawings’s
    items is missing line from h path operator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3201](https://github.com/pymupdf/PyMuPDF/issues/3201): Memory leaks
    when merging PDFs'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3197](https://github.com/pymupdf/PyMuPDF/issues/3197): page.get_text()
    returns hexadecimal text for some characters'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3196](https://github.com/pymupdf/PyMuPDF/issues/3196): Remove text
    not working in 1.23.25 version vs 1.20.2'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3172](https://github.com/pymupdf/PyMuPDF/issues/3172): PDF’s 45º
    lines dissapearing in png conversion'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3135](https://github.com/pymupdf/PyMuPDF/issues/3135): Do not log
    warnings to stdout'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3125](https://github.com/pymupdf/PyMuPDF/issues/3125): get_pixmap
    method stuck on one page and runs forever'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2964](https://github.com/pymupdf/PyMuPDF/issues/2964): There is
    an issue with the image generated by the page.get_pixmap() function'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use MuPDF-1.24.0.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add support for redacting vector graphics.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Several fixes for table module
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add new method for outputting the table as a markdown string.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Address errors in computing the table header object:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We now allow None as the cell value, because this will be resolved where needed
    (e.g. in the pandas DataFrame).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: We previously tried to enforce rect-like tuples in all header cell bboxes, however
    this fails for tables with all-None columns. This fix enables this and constructs
    an empty string in the corresponding cell string.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: We now correctly include start / stop points of lines in the bbox of the clustered
    graphic. We previously joined the line’s rectangle - which had no effect because
    this is always empty.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Improved exception text if we fail to open document.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed build with new libclang 18.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.26 (2024-02-29)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fixed issues:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3199](https://github.com/pymupdf/PyMuPDF/issues/3199): Add entry_points
    to setuptools configuration to provide command-line console scripts'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3209](https://github.com/pymupdf/PyMuPDF/issues/3209): Empty vertices
    in ink annotation'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Improvements to table detection:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved check for empty tables, fixes bugs when determining table headers.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved computation of enveloping vector graphic rectangles.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ignore more meaningless “pseudo” tables
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Install command-line ‘pymupdf’ command that runs fitz/__main__.py.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t overwrite MuPDF’s config.h when building on non-Windows.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix [Story](story-class.html#story) constructor’s [Archive](archive-class.html#archive)
    arg to match docs - now accepts a single [Archive](archive-class.html#archive)
    constructor arg.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not include MuPDF source in sdist; will be downloaded automatically when
    building.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.25 (2024-02-20)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fixed issues:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3182](https://github.com/pymupdf/PyMuPDF/issues/3182): Pixmap.invert_irect
    argument type error'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3186](https://github.com/pymupdf/PyMuPDF/issues/3186): extractText()
    extracts broken text from pdf'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3191](https://github.com/pymupdf/PyMuPDF/issues/3191): Error on
    .find_tables()'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When building, be able to specify python-config directly, with environment variable
    `PIPCL_PYTHON_CONFIG`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.24 (2024-02-19)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fixed issues:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3148](https://github.com/pymupdf/PyMuPDF/issues/3148): Table extraction
    - vertical text not handled correctly'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3179](https://github.com/pymupdf/PyMuPDF/issues/3179): Table Detection:
    Incorrect Separation of Vector Graphics Clusters'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3180](https://github.com/pymupdf/PyMuPDF/issues/3180): Cannot show
    optional content group: AttributeError: module ‘fitz.mupdf’ has no attribute ‘pdf_array_push_drop’'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be able to test system install using `sudo pip install` instead of a venv.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.23 (2024-02-18)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fixed issues:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3126](https://github.com/pymupdf/PyMuPDF/issues/3126): Initialising
    Archive with a pathlib.Path fails.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3131](https://github.com/pymupdf/PyMuPDF/issues/3131): Calling the
    next attribute of an Annot raises a “No attribute .parent” warning'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3134](https://github.com/pymupdf/PyMuPDF/issues/3134): Using an
    IRect as clip parameter in Page.get_pixmap no longer works since 1.23.9'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3140](https://github.com/pymupdf/PyMuPDF/issues/3140): PDF document
    stays in use after closing'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3150](https://github.com/pymupdf/PyMuPDF/issues/3150): doc.select()
    hangs on this doc.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3163](https://github.com/pymupdf/PyMuPDF/issues/3163): AssertionError
    on using fitz.IRect'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3177](https://github.com/pymupdf/PyMuPDF/issues/3177): fitz.Pixmap(None,
    pix) Unrecognised args for constructing Pixmap'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved ``Document.select() by using new MuPDF function `pdf_rearrange_pages()``.
    This is a more complete (and faster) implementation of what needs to be done here
    in that not only pages will be rearranged, but also consequential changes will
    be made to the table of contents, links to removed pages and affected entries
    in the Optional Content definitions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`TextWriter.appendv()`](textwriter.html#TextWriter.appendv "TextWriter.appendv"):
    added `small_caps` arg.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed some valgrind errors with MuPDF master.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed `Document.insert_image()` when build with MuPDF master.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.22 (2024-02-12)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fixed issues:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3143](https://github.com/pymupdf/PyMuPDF/issues/3143): Difference
    in decoding of OCGs names between doc.get_ocgs() and page.get_drawings()'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3139](https://github.com/pymupdf/PyMuPDF/issues/3139): Pixmap resizing
    needs positional arg “clip” - even if None.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed the use of MuPDF function `fz_image_size()` from PyMuPDF.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.21 (2024-02-01)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fixed issues:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixed bug in set_xml_metadata(), PR [`3112 https://github.com/pymupdf/PyMuPDF/pull/3112>`_](#id352):
    Fix pdf_add_stream metadata error'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed lack of `.parent` member in [TextPage](textpage.html#textpage) from `Annot.get_textpage()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in [`Page.add_widget()`](page.html#Page.add_widget "Page.add_widget").
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.20 (2024-01-29)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3100](https://github.com/pymupdf/PyMuPDF/issues/3100): Wrong internal
    property accessed in get_xml_metadata'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Significantly improved speed of [`Document.get_toc()`](document.html#Document.get_toc
    "Document.get_toc").
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.19 (2024-01-25)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3087](https://github.com/pymupdf/PyMuPDF/issues/3087): Exception
    in insert_image with mask specified'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3094](https://github.com/pymupdf/PyMuPDF/issues/3094): TypeError:
    ‘<’ not supported between instances of ‘FzLocation’ and ‘int’ in doc.delete_pages'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When finding tables:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow addition of user-defined “virtual” vector graphics when finding tables.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Confirm that the enveloping bboxes of vector graphics are inside the clip rectangle.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid slow finding of rectangle intersections.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added [`Font.bbox`](font.html#Font.bbox "Font.bbox") property.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.18 (2024-01-23)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3081](https://github.com/pymupdf/PyMuPDF/issues/3081): doc.close()
    not closing the document'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduced size of sdist to fit on pypi.org (by reducing size of two test files).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix [`Annot.file_info()`](annot.html#Annot.file_info "Annot.file_info") if no
    `Desc` item.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.17 (2024-01-22)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3062](https://github.com/pymupdf/PyMuPDF/issues/3062): page_rotation_reset
    does not return page to original rotation'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3070](https://github.com/pymupdf/PyMuPDF/issues/3070): update_link():
    AttributeError: ‘Page’ object has no attribute ‘super’'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixed bug in [`Page.links()`](page.html#Page.links "Page.links") (PR #3075).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug in [`Page.get_bboxlog()`](functions.html#Page.get_bboxlog "Page.get_bboxlog")
    with layers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add support for timeouts in scripts/ and tests/run_compound.py.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.16 (2024-01-18)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3058](https://github.com/pymupdf/PyMuPDF/issues/3058): Pixmap created
    from CMYK JPEG delivers RGB format'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In table detection strategy “lines_strict”, exclude fill-only vector graphics.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed sysinstall test failure.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In documentation, update feature matrix with item about text writing.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.15 (2024-01-16)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3050](https://github.com/pymupdf/PyMuPDF/issues/3050): python3.9
    pix.set_pixel has something wrong in c.append( ord(i))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved docs for Page.find_tables().
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.14 (2024-01-15)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3038](https://github.com/pymupdf/PyMuPDF/issues/3038): JM_pixmap_from_display_list
    > Assertion Error : Checking for wrong type'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3039](https://github.com/pymupdf/PyMuPDF/issues/3039): Issue with
    doc.close() not closing the document in PyMuPDF'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure valid “re” rectangles in [`Page.get_drawings()`](page.html#Page.get_drawings
    "Page.get_drawings") with derotated pages.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.13 (2024-01-15)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2979](https://github.com/pymupdf/PyMuPDF/issues/2979): list index
    out of range in to_pandas()'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3001](https://github.com/pymupdf/PyMuPDF/issues/3001): Calling find_tables()
    on one document alters the bounding boxes of a subsequent document'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed [`Rect.height`](rect.html#Rect.height "Rect.height") and [`Rect.width`](rect.html#Rect.width
    "Rect.width") to never return negative values.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed `TextPage.extractIMGINFO()`’s returned `dictkey_yres` value.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.12 (2024-01-12)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** [3027](https://github.com/pymupdf/PyMuPDF/issues/3027): Page.get_text
    throws Attribute Error for ‘parent’'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.11 (2024-01-12)**'
  prefs: []
  type: TYPE_NORMAL
- en: Fixed some Pixmap construction bugs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed Pixmap.yres().
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.10 (2024-01-12)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [3020](https://github.com/pymupdf/PyMuPDF/issues/3020): Can’t resize
    a PixMap'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed Page.delete_image().
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.9 (2024-01-11)**'
  prefs: []
  type: TYPE_NORMAL
- en: Default to new “rebased” implementation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The old “classic” implementation is available with `import fitz_old as fitz`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information about why we are changing to the rebased implementation,
    see: [https://github.com/pymupdf/PyMuPDF/discussions/2680](https://github.com/pymupdf/PyMuPDF/discussions/2680)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use MuPDF-1.23.9.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes (rebased implementation only):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2911](https://github.com/pymupdf/PyMuPDF/issues/2911): Page.derotation_matrix
    returns a tuple instead of a Matrix with rebased implementation'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2919](https://github.com/pymupdf/PyMuPDF/issues/2919): Rebased version:
    KeyError in resolve_names when merging pdfs'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2922](https://github.com/pymupdf/PyMuPDF/issues/2922): New feature
    that allows inserting named-destination links doesn’t work'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2943](https://github.com/pymupdf/PyMuPDF/issues/2943): ZeroDivisionError:
    float division by zero when use apply_redactions()'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2950](https://github.com/pymupdf/PyMuPDF/issues/2950): Shelling
    out to pip during tests is problematic'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2954](https://github.com/pymupdf/PyMuPDF/issues/2954): Replacement
    unicode character in text extraction'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2957](https://github.com/pymupdf/PyMuPDF/issues/2957): apply_redactions()
    moving text'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2961](https://github.com/pymupdf/PyMuPDF/issues/2961): Passing a
    string as a page number raises IndexError instead of TypeError.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2969](https://github.com/pymupdf/PyMuPDF/issues/2969): annot.next
    throws AttributeError'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2978](https://github.com/pymupdf/PyMuPDF/issues/2978): 1.23.9rc1:
    module ‘fitz.mupdf’ has no attribute ‘fz_copy_pixmap_rect’'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2907](https://github.com/pymupdf/PyMuPDF/issues/2907): segfault
    trying to call clean_contents on certain pdfs with python 3.12'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2905](https://github.com/pymupdf/PyMuPDF/issues/2905): SystemError:
    <built-in function TextPage_extractIMGINFO> returned a result with an exception
    set'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2742](https://github.com/pymupdf/PyMuPDF/issues/2742): Segmentation
    Fault when inserting three (but not two) copies of the same source page into one
    destination page'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add optional setting of opacity to [`Page.insert_htmlbox()`](page.html#Page.insert_htmlbox
    "Page.insert_htmlbox").
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixed issue with add_redact_annot() mentioned in #2934.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed [`Page.rotation()`](page.html#Page.rotation "Page.rotation") to return
    0 for non-PDF documents instead of raising an exception.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed internal quad detection to cope with any Python sequence.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed rebased `fitz.pymupdf_version_tuple` - was previously set to mupdf version.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved support for Linux system installs, including adding regular testing
    on Github.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add missing `flake8` to `scripts/gh_release.py:test_packages`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use newly public functions in MuPDF-1.23.8.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved `scripts/test.py` to help investigation of MuPDF issues.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.8 (2023-12-19)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bug fixes (rebased implementation only):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2634](https://github.com/pymupdf/PyMuPDF/issues/2634): get_toc and
    set_toc do not behave consistently for rotated pages'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2861](https://github.com/pymupdf/PyMuPDF/issues/2861): AttributeError
    in getLinkDict during PDF Merge'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2871](https://github.com/pymupdf/PyMuPDF/issues/2871): KeyError
    in getLinkDict during PDF merge'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2886](https://github.com/pymupdf/PyMuPDF/issues/2886): Error in
    Skeleton for Named Link Destinations'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes (rebased and classic implementations):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2885](https://github.com/pymupdf/PyMuPDF/issues/2885): pymupdf find
    tables too slow'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rebased implementation:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Page.insert_htmlbox()`](page.html#Page.insert_htmlbox "Page.insert_htmlbox"):
    new, much more powerful alternative to [`Page.insert_textbox()`](page.html#Page.insert_textbox
    "Page.insert_textbox") or [`TextWriter.fill_textbox()`](textwriter.html#TextWriter.fill_textbox
    "TextWriter.fill_textbox"), using [Story](story-class.html#story).'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Story.fit*()`: new methods for fitting a Story into an expanded rect.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Story.write_with_links()`](story-class.html#Story.write_with_links "Story.write_with_links"):
    add support for external links.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Document.language()`: fixed to use MuPDF’s new `mupdf.fz_string_from_text_language2()`.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Document.subset_fonts()`](document.html#Document.subset_fonts "Document.subset_fonts")
    - fixed.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed internal `Archive._add_treeitem()` method.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed `fitz_new.__doc__` to contain PyMuPDF and Python version information,
    and OS name.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed use of `(*args, **kwargs)` in API, we now specify keyword args explicitly.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Work with new MuPDF Python exception classes.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed bug where [`button_states()`](widget.html#Widget.button_states "Widget.button_states")
    returns None when `/AP` points to an indirect object.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed pillow test to not ignore all errors, and install pillow when testing.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added test for `fitz.css_for_pymupdf_font()` (uses package `pymupdf-fonts`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplified Github Actions test specifications.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Updated `tests/README.md`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.7 (2023-11-30)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bug fixes in rebased implementation, not fixed in classic implementation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2232](https://github.com/pymupdf/PyMuPDF/issues/2232): Geometry
    helper classes should support keyword arguments'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2788](https://github.com/pymupdf/PyMuPDF/issues/2788): Problem with
    get_toc in pymupdf 1.23.6'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2791](https://github.com/pymupdf/PyMuPDF/issues/2791): Experiencing
    small memory leak in save()'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes (rebased and classic implementations):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2736](https://github.com/pymupdf/PyMuPDF/issues/2736): Failure when
    set cropbox with mediabox negative value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2749](https://github.com/pymupdf/PyMuPDF/issues/2749): RuntimeError:
    cycle in structure tree'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2753](https://github.com/pymupdf/PyMuPDF/issues/2753): Story.write_with_links
    will ignore everything after the first “page break” in the HTML.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2812](https://github.com/pymupdf/PyMuPDF/issues/2812): find_tables
    on landscape page generates reversed text'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2829](https://github.com/pymupdf/PyMuPDF/issues/2829): [cannot create
    /Annot for kind] is still printed despite #2345 is closed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2841](https://github.com/pymupdf/PyMuPDF/issues/2841): Unexpected
    KeyError when using scrub with fitz_new'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use MuPDF-1.23.7.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rebased implementation:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added flake8 code checking to test suite, and made various fixes.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable diagnostics during Document constructor to match classic implementation.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additional fix to [2553](https://github.com/pymupdf/PyMuPDF/issues/2553): Invalid
    characters in versions >= 1.22'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixed [MuPDF Bug 707324](https://bugs.ghostscript.com/show_bug.cgi?id=707324):
    Story: HTML table row background color repeated incorrectly'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `scripts/test.py`, for simple build+test of PyMuPDF git checkout.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `fitz.pymupdf_version_tuple`, e.g. `(1, 23, 6)`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Restored mistakenly-reverted fix for [2345](https://github.com/pymupdf/PyMuPDF/issues/2345):
    Turn off print statements in utils.py'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Include any trailing `... repeated <N> times...` text in warnings returned by
    [`mupdf_warnings()`](tools.html#Tools.mupdf_warnings "Tools.mupdf_warnings") (rebased
    only).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.6 (2023-11-06)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2553](https://github.com/pymupdf/PyMuPDF/issues/2553): Invalid characters
    in versions >= 1.22'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2608](https://github.com/pymupdf/PyMuPDF/issues/2608): Incorrect
    utf32 text extraction (high & low surrogates are split)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2710](https://github.com/pymupdf/PyMuPDF/issues/2710): page.rect
    and text location wrong / differing from older version'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2774](https://github.com/pymupdf/PyMuPDF/issues/2774): wrong encoding
    for “?” character when sort=True'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2775](https://github.com/pymupdf/PyMuPDF/issues/2775): fitz_new
    does not work with python3.10 or earlier'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2777](https://github.com/pymupdf/PyMuPDF/issues/2777): With fitz_new,
    wrong type for Page.mediabox'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use MuPDF-1.23.5.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added Document.resolve_names() (rebased implementation only).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.5 (2023-10-11)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2341](https://github.com/pymupdf/PyMuPDF/issues/2341): Handling
    negative values in the zoom section for LINK_GOTO in linkDest'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2522](https://github.com/pymupdf/PyMuPDF/issues/2522): Typo in set_layer()
    - NameError: name ‘f’ is not defined'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2548](https://github.com/pymupdf/PyMuPDF/issues/2548): Fitz freezes
    on some PDFs when calling the fitz.Page.get_text_blocks method.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2596](https://github.com/pymupdf/PyMuPDF/issues/2596): save(garbage=3)
    breaks get_pixmap() with side effect'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2635](https://github.com/pymupdf/PyMuPDF/issues/2635): “clean=True”
    makes objects invisible in the pdf'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2637](https://github.com/pymupdf/PyMuPDF/issues/2637): Page.insert_textbox
    incorrectly handles the last word if it starts a new line'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2699](https://github.com/pymupdf/PyMuPDF/issues/2699): extract paragraph
    with below table'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2703](https://github.com/pymupdf/PyMuPDF/issues/2703): Wrong fontsize
    calculation in corner cases (“page.get_texttrace()”)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2710](https://github.com/pymupdf/PyMuPDF/issues/2710): page.rect
    and text location wrong / differing from older version'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2723](https://github.com/pymupdf/PyMuPDF/issues/2723): When will
    a Python 3.12 wheel be available?'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2730](https://github.com/pymupdf/PyMuPDF/issues/2730): persistent
    get_text() formatting'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use MuPDF-1.23.4.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix optimisation flags with system installs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed the problem that the clip parameter does not take effect during table
    recognition
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Support Pillow mode “RGBa”
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Support extra word delimiters
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Support checking valid PDF name objects
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.4 (2023-09-26)**'
  prefs: []
  type: TYPE_NORMAL
- en: Improved build instructions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed Tesseract in rebased implementation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improvements to build/install with system MuPDF.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed Pyodide builds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed rebased bug in _insert_image().
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2556](https://github.com/pymupdf/PyMuPDF/issues/2556): Segmentation
    fault at caling get_cdrawings(extended=True)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2637](https://github.com/pymupdf/PyMuPDF/issues/2637): Page.insert_textbox
    incorrectly handles the last word if it starts a new line'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2683](https://github.com/pymupdf/PyMuPDF/issues/2683): Windows sdist
    build failure - non-quoting of path and using UNIX which command'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2691](https://github.com/pymupdf/PyMuPDF/issues/2691): Page.get_textpage_ocr()
    bug in rebased fitz_new version'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [2692](https://github.com/pymupdf/PyMuPDF/issues/2692): Page.get_pixmap(clip=Rect())
    bug in rebased fitz_new version'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.3 (2023-08-31)**'
  prefs: []
  type: TYPE_NORMAL
- en: Fixed use of Tesseract for OCR.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.2 (2023-08-28)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** [#2613](https://github.com/pymupdf/PyMuPDF/issues/2613): release
    1.23.0 not MacOS-arm64 compatible'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.1 (2023-08-24)**'
  prefs: []
  type: TYPE_NORMAL
- en: Updated README and package summary description.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fixed a problem on some Linux installations with Python-3.10 (and possibly
    earlier versions) where `import fitz` failed with `ImportError: libcrypt.so.2:
    cannot open shared object file: No such file or directory`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed `incompatible architecture` error on MacOS arm64.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed installation warning from Poetry about missing entry in wheels’ RECORD
    files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.23.0 (2023-08-22)**'
  prefs: []
  type: TYPE_NORMAL
- en: Add method [`find_tables()`](page.html#Page.find_tables "Page.find_tables")
    to the [Page](page.html#page) object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This allows locating tables on any supported document page, and extracting table
    content by cell.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New “rebased” implementation of PyMuPDF.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rebased implementation is available as Python module `fitz_new`. It can
    be used as a drop-in replacement with `import fitz_new as fitz`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Python-independent MuPDF libraries are now in a second wheel called `PyMuPDFb`
    that will be automatically installed by pip.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is to save space on pypi.org - a full release only needs one `PyMuPDFb`
    wheel for each OS.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2542](https://github.com/pymupdf/PyMuPDF/issues/2542): fitz.utils.scrub
    AttributeError Annot object has no attribute fileUpd inside'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2533](https://github.com/pymupdf/PyMuPDF/issues/2533): get_texttrace
    returned a incorrect character bbox'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2537](https://github.com/pymupdf/PyMuPDF/issues/2537): Validation
    when setting a grouped RadioButton throws a RuntimeError: path to ‘V’ has indirects'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dropped support for Python-3.7.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix for wrong page / annot `/Contents` cleaning.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We need to set `pdf_filter_options::no_update` to zero.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Added new function get_tessdata().
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cope with problem `/Annot` arrays.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When copying page annotations in method Document.insert_pdf we previously did
    not check the validity of members of the `/Annots` array. For faulty members (like
    null or non-dictionary items) this could cause unnecessary exceptions. This fix
    implements more checks and skips such array items.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Additional annotation type checks.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We did not previously check for annotation type when getting / setting annotation
    border properties. This is now checked in accordance with MuPDF.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Increase fault tolerance.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid exceptions in method [`insert_pdf()`](document.html#Document.insert_pdf
    "Document.insert_pdf") when source pages contains invalid items in the `/Annots`
    array.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Return empty border dict for applicable annots.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We previously were returning a non-empty border dictionary even for non-applicable
    annotation types. We now return the empty dictionary `{}` in these cases. This
    requires some corresponding changes in the annotation `.update()` method, namely
    for dashes and border width.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Restrict [`set_rect`](annot.html#Annot.set_rect "Annot.set_rect") to applicable
    annot types.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We were insufficiently excluding non-applicable annotation types from [`set_rect()`](annot.html#Annot.set_rect
    "Annot.set_rect") method. We now let MuPDF catch unsupported annotations and return
    `False` in these cases.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Wrong fontsize computation in `page.get_texttrace()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When computing the font size we were using the final text transformation matrix,
    where we should have taken `span->trm` instead. This is corrected here.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Updates to cope with changes to latest MuPDF.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pdf_lookup_anchor()` has been removed.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Update fill_textbox to better respect rect.width
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The function norm_words in fill_textbox had a bug in its last loop, appending
    n+1 characters when actually measuring width of n characters. It led to a bug
    in fill_texbox when you tried to write a single word mostly composed of “wide”
    letters (M,m, W, w…), causing the written text to exceed the given rect.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The fix was just to replace n+1 by n.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Add [`script_focus`](widget.html#Widget.script_focus "Widget.script_focus")
    and [`script_blur`](widget.html#Widget.script_blur "Widget.script_blur") options
    to widget.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.22.5 (2023-06-21)**'
  prefs: []
  type: TYPE_NORMAL
- en: This release uses `MuPDF-1.22.2`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2365](https://github.com/pymupdf/PyMuPDF/issues/2365): Incorrect
    dictionary values for type “fs” drawings.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2391](https://github.com/pymupdf/PyMuPDF/issues/2391): Check box
    automatically uncheck when we update same checkbox more than 1 times.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2400](https://github.com/pymupdf/PyMuPDF/issues/2400): Gaps within
    text of same line not filled with spaces.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2404](https://github.com/pymupdf/PyMuPDF/issues/2404): Blacklining
    an image in PDF won’t remove underlying content in version 1.22.X.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2430](https://github.com/pymupdf/PyMuPDF/issues/2430): Incorrectly
    reducing ref count of Py_None.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2450](https://github.com/pymupdf/PyMuPDF/issues/2450): Empty fill
    color and fill opacity for paths with fill and stroke operations with 1.22.*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2462](https://github.com/pymupdf/PyMuPDF/issues/2462): Error at
    “get_drawing(extended=True )”'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2468](https://github.com/pymupdf/PyMuPDF/issues/2468): Decode error
    when trying to get drawings'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2710](https://github.com/pymupdf/PyMuPDF/issues/2710): page.rect
    and text location wrong / differing from older version'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2723](https://github.com/pymupdf/PyMuPDF/issues/2723): When will
    a Python 3.12 wheel be available?'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** Annotations now support “cloudy” borders. The [`Annot.border`](annot.html#Annot.border
    "Annot.border") property has the new item `clouds`, and method [`Annot.set_border()`](annot.html#Annot.set_border
    "Annot.set_border") supports the corresponding `clouds` argument.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** Radio button widgets in the same RB group are now consistently
    updated **if the group is defined in the standard way**.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** Support for the `/Locked` key in PDF Optional Content. This array
    inside the catalog entry `/OCProperties` can now be extracted and set.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** Support for new parameter `tessdata` in OCR functions. New function
    [`get_tessdata()`](functions.html#get_tessdata "get_tessdata") locates the language
    support folder if Tesseract is installed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.22.3 (2023-05-10)**'
  prefs: []
  type: TYPE_NORMAL
- en: This release uses `MuPDF-1.22.0`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2333](https://github.com/pymupdf/PyMuPDF/issues/2333): Unable to
    set any of button radio group in form'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.22.2 (2023-04-26)**'
  prefs: []
  type: TYPE_NORMAL
- en: This release uses `MuPDF-1.22.0`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2369](https://github.com/pymupdf/PyMuPDF/issues/2369): Image extraction
    bugs with newer versions'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.22.1 (2023-04-18)**'
  prefs: []
  type: TYPE_NORMAL
- en: This release uses `MuPDF-1.22.0`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2345](https://github.com/pymupdf/PyMuPDF/issues/2345): Turn off
    print statements in utils.py'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2348](https://github.com/pymupdf/PyMuPDF/issues/2348): extract_image
    returns an extension “flate” instead of “png”'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2350](https://github.com/pymupdf/PyMuPDF/issues/2350): Can not
    make widget (checkbox) to read-only by adding flags PDF_FIELD_IS_READ_ONLY'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2355](https://github.com/pymupdf/PyMuPDF/issues/2355): 1.22.0 error
    when using get_toc (AttributeError: ‘SwigPyObject’ object has no attribute)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in version 1.22.0 (2023-04-14)**'
  prefs: []
  type: TYPE_NORMAL
- en: This release uses `MuPDF-1.22.0`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Behavioural changes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text extraction now includes glyphs that overlap with clip rect; previously
    they were included only if they were entirely contained within the clip rect.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1763](https://github.com/pymupdf/PyMuPDF/issues/1763): Interactive(smartform)
    form PDF calculation not working in pymupdf'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1995](https://github.com/pymupdf/PyMuPDF/issues/1995): RuntimeError:
    image is too high for a long paged pdf file when trying'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2093](https://github.com/pymupdf/PyMuPDF/issues/2093): Image in
    pdf changes color after applying redactions'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2108](https://github.com/pymupdf/PyMuPDF/issues/2108): Redaction
    removing more text than expected'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2141](https://github.com/pymupdf/PyMuPDF/issues/2141): Failed to
    read JPX header when trying to get blocks'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2144](https://github.com/pymupdf/PyMuPDF/issues/2144): Replace
    image throws an error'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2146](https://github.com/pymupdf/PyMuPDF/issues/2146): Wrong Handling
    of Reference Count of “None” Object'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2161](https://github.com/pymupdf/PyMuPDF/issues/2161): Support
    adding images as pages directly'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2168](https://github.com/pymupdf/PyMuPDF/issues/2168): `page.add_highlight_annot(start=pointa,
    stop=pointb)` not working'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2173](https://github.com/pymupdf/PyMuPDF/issues/2173): Double free
    of `Colorspace` used in `Pixmap`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2179](https://github.com/pymupdf/PyMuPDF/issues/2179): Incorrect
    documentation for `pixmap.tint_with()`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2208](https://github.com/pymupdf/PyMuPDF/issues/2208): Pushbutton
    widget appears as check box'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2210](https://github.com/pymupdf/PyMuPDF/issues/2210): `apply_redactions()`
    move pdf text to right after redaction'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2220](https://github.com/pymupdf/PyMuPDF/issues/2220): `Page.delete_image()`
    | object has no attribute `is_image`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2228](https://github.com/pymupdf/PyMuPDF/issues/2228): open some
    pdf cost too much time'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2238](https://github.com/pymupdf/PyMuPDF/issues/2238): Bug - can
    not extract data from file in the newest version 1.21.1'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2242](https://github.com/pymupdf/PyMuPDF/issues/2242): Python quits
    silently in `Story.element_positions()` if callback function prototype is wrong'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2246](https://github.com/pymupdf/PyMuPDF/issues/2246): TextWriter
    write text in a wrong position'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2248](https://github.com/pymupdf/PyMuPDF/issues/2248): After redacting
    the content, the position of the remaining text changes'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2250](https://github.com/pymupdf/PyMuPDF/issues/2250): docs: unclear
    or broken link in page.rst'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2251](https://github.com/pymupdf/PyMuPDF/issues/2251): mupdf_display_errors
    does not apply to Pixmap when loading broken image'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2270](https://github.com/pymupdf/PyMuPDF/issues/2270): `Annot.get_text("words")`
    - doesn’t return the first line of words'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2275](https://github.com/pymupdf/PyMuPDF/issues/2275): insert_image:
    document that rotations are counterclockwise'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2278](https://github.com/pymupdf/PyMuPDF/issues/2278): Can not
    make widget (checkbox) to read-only by adding flags PDF_FIELD_IS_READ_ONLY'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2290](https://github.com/pymupdf/PyMuPDF/issues/2290): Different
    image format/data from Page.get_text(“dict”) and Fitz.get_page_images()'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2293](https://github.com/pymupdf/PyMuPDF/issues/2293): 68 failed
    tests when installing from sdist on my box'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2300](https://github.com/pymupdf/PyMuPDF/issues/2300): Too much
    recursion in tree (parents), makes program terminate'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2322](https://github.com/pymupdf/PyMuPDF/issues/2322): add_highlight_annot
    using clip generates “A Number is Out of Range” error in PDF'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add key “/AS (Yes)” to the underlying annot object of a selected button form
    field.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove unused `Document` methods `has_xref_streams()` and `has_old_style_xrefs()`
    as MuPDF equivalents have been removed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add new `Document` methods and properties for getting/setting `/PageMode`, `/PageLayout`
    and `/MarkInfo`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: New `Document` property `version_count`, which contains the number of incremental
    saves plus one.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: New `Document` property `is_fast_webaccess` which tells whether the document
    is linearized.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DocumentWriter` is now a context manager.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add support for `Pixmap` JPEG output.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add support for drawing rectangles with rounded corners.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_drawings()`: added optional `extended` arg.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed issue where trace devices’ state was not being initialised correctly;
    data returned from things like `fitz.Page.get_texttrace()` might be slightly altered,
    e.g. `linewidth` values.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Output warning to `stderr` if it looks like we are being used with current directory
    containing an invalid `fitz/` directory, because this can break import of `fitz`
    module. For example this happens if one attempts to use `fitz` when current directory
    is a PyMuPDF checkout.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Documentation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'General rework:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduces a new home page and new table of contents.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Structural update to include new About section.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparison & performance graphing.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Includes performance methodology in appendix.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates conf.py to understand single back-ticks as code.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Converts double back-ticks to single back-ticks.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Removes redundant files.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve `insert_file()` documentation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_bboxlog()`: aded optional `layers` to `get_bboxlog()`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Page.get_texttrace()`: add new dictionary key `layer`, name of Optional Content
    Group.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mention use of Python venv in installation documentation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Added missing fix for #2057 to release 1.21.1’s changelog.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixes many links to the PyMuPDF-Utilities repo scripts.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid duplication of `changes.txt` and `docs/changes.rst`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `pyproject.toml` file to improve builds using pip etc.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in Version 1.21.1 (2022-12-13)**'
  prefs: []
  type: TYPE_NORMAL
- en: This release uses `MuPDF-1.21.1`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2110](https://github.com/pymupdf/PyMuPDF/issues/2110): Fully embedded
    font is extracted only partially if it occupies more than one object'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2094](https://github.com/pymupdf/PyMuPDF/issues/2094): Rectangle
    Detection Logic'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2088](https://github.com/pymupdf/PyMuPDF/issues/2088): Destination
    point not set for named links in toc'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2087](https://github.com/pymupdf/PyMuPDF/issues/2087): Image with
    Filter “[/FlateDecode/JPXDecode]” not extracted'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2086](https://github.com/pymupdf/PyMuPDF/issues/2086): Document.save()
    owner_pw & user_pw has buffer overflow bug'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2076](https://github.com/pymupdf/PyMuPDF/issues/2076): Segfault
    in fitz.py'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2057](https://github.com/pymupdf/PyMuPDF/issues/2057): Document.save
    garbage parameter not working in PyMuPDF 1.21.0'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2051](https://github.com/pymupdf/PyMuPDF/issues/2051): Missing
    DPI Parameter'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2048](https://github.com/pymupdf/PyMuPDF/issues/2048): Invalid
    size of TextPage and bbox with newest version 1.21.0'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2045](https://github.com/pymupdf/PyMuPDF/issues/2045): SystemError:
    <built-in function Page_get_texttrace> returned a result with an error set'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2039](https://github.com/pymupdf/PyMuPDF/issues/2039): 1.21.0 fails
    to build against system libmupdf'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2036](https://github.com/pymupdf/PyMuPDF/issues/2036): Archive::Archive
    defined twice'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swallow “&zoom=nan” in link uri strings.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add new Page utility methods `Page.replace_image()` and `Page.delete_image()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Documentation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#2040](https://github.com/pymupdf/PyMuPDF/issues/2040): Added note about test
    failure with non-default build of MuPDF, to `tests/README.md`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#2037](https://github.com/pymupdf/PyMuPDF/issues/2037): In `docs/installation.rst`,
    mention incompatibility with chocolatey.org on Windows.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#2061](https://github.com/pymupdf/PyMuPDF/issues/2061): Fixed description
    of `Annot.file_info`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#2065](https://github.com/pymupdf/PyMuPDF/issues/2065): Show how to insert
    internal PDF link.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved description of building from source without an sdist.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added information about running tests.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[#2084](https://github.com/pymupdf/PyMuPDF/issues/2084): Fixed broken link
    to PyMuPDF-Utilities.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in Version 1.21.0 (2022-11-8)**'
  prefs: []
  type: TYPE_NORMAL
- en: This release uses `MuPDF-1.21.0`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New feature: Stories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added wheels for Python-3.11.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1701](https://github.com/pymupdf/PyMuPDF/issues/1701): Broken custom
    image insertion.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1854](https://github.com/pymupdf/PyMuPDF/issues/1854): [`Document.delete_pages()`](document.html#Document.delete_pages
    "Document.delete_pages") declines keyword arguments.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1868](https://github.com/pymupdf/PyMuPDF/issues/1868): Access Violation
    Error at `page.apply_redactions()`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1909](https://github.com/pymupdf/PyMuPDF/issues/1909): Adding text
    with `fontname="Helvetica"` can silently fail.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1913](https://github.com/pymupdf/PyMuPDF/issues/1913): [`draw_rect()`](page.html#Page.draw_rect
    "Page.draw_rect"): does not respect width if color is not specified.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1917](https://github.com/pymupdf/PyMuPDF/issues/1917): [`subset_fonts()`](document.html#Document.subset_fonts
    "Document.subset_fonts"): make it possible to silence the stdout.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1936](https://github.com/pymupdf/PyMuPDF/issues/1936): Rectangle
    detection can be incorrect producing wrong output.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1945](https://github.com/pymupdf/PyMuPDF/issues/1945): Segmentation
    fault when saving with `clean=True`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1965](https://github.com/pymupdf/PyMuPDF/issues/1965): [`pdfocr_save()`](pixmap.html#Pixmap.pdfocr_save
    "Pixmap.pdfocr_save") Hard Crash.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1971](https://github.com/pymupdf/PyMuPDF/issues/1971): Segmentation
    fault when using [`get_drawings()`](page.html#Page.get_drawings "Page.get_drawings").'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1946](https://github.com/pymupdf/PyMuPDF/issues/1946): `block_no`
    and `block_type` switched in [`get_text()`](annot.html#Annot.get_text "Annot.get_text")
    docs.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#2013](https://github.com/pymupdf/PyMuPDF/issues/2013): AttributeError:
    ‘Widget’ object has no attribute ‘_annot’ in delete widget.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Misc changes to core code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed various compiler warnings and a sequence-point bug.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added support for Memento builds.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed leaks detected by Memento in test suite.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed handling of exceptions in set_name() and set_rect().
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow build with latest MuPDF, for regular testing of PyMuPDF master.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cope with new MuPDF exceptions when setting rect for some Annot types.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduced cosmetic differences between MuPDF’s config.h and PyMuPDF’s _config.h.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cope with various changes to MuPDF API.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed various broken links and typos in docs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mention install of `swig-python` on MacOS for #875.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Added (untested) wheels for macos-arm64.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in Version 1.20.2**'
  prefs: []
  type: TYPE_NORMAL
- en: This release uses `MuPDF-1.20.3`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1787](https://github.com/pymupdf/PyMuPDF/issues/1787). Fix linking
    issues on Unix systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1824](https://github.com/pymupdf/PyMuPDF/issues/1824). SegFault
    when applying redactions overlapping a transparent image. (Fixed in `MuPDF-1.20.3`.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Improvements to documentation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved information about building from source in `docs/installation.rst`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Clarified memory allocation setting [PRE0].
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed link to PDF Reference manual in `docs/app3.rst`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed building of html documentation on OpenBSD.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Moved old `docs/faq.rst` into separate `docs/recipes-*` files.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Removed some unused files and directories:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`installation/`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docs/wheelnames.txt`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes in Version 1.20.1**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** [#1724](https://github.com/pymupdf/PyMuPDF/issues/1724). Fix for
    building on FreeBSD.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1771](https://github.com/pymupdf/PyMuPDF/issues/1771). [`linkDest()`](linkdest.html#linkDest
    "linkDest") had a broken call to `re.match()`, introduced in 1.20.0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1751](https://github.com/pymupdf/PyMuPDF/issues/1751). [`get_drawings()`](page.html#Page.get_drawings
    "Page.get_drawings") and [`get_cdrawings()`](page.html#Page.get_cdrawings "Page.get_cdrawings")
    previously always returned with `closePath=False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1645](https://github.com/pymupdf/PyMuPDF/issues/1645). Default
    FreeText annotation text color is now black.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Improvements to sphinx-generated documentation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use readthedocs theme with enhancements.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Renamed the `.txt` files to have `.rst` suffixes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.20.0**'
  prefs: []
  type: TYPE_NORMAL
- en: This release uses `MuPDF-1.20.0`, released 2022-06-15.
  prefs: []
  type: TYPE_NORMAL
- en: Cope with new MuPDF link uri format, changed from `#<int>,<int>,<int>` to `#page=<int>&zoom=<float>,<float>,<float>`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In `tests/test_insertpdf.py`, use new reference output `joined-1.20.pdf`. We
    also check that new output values are approximately the same as the old ones.
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1738](https://github.com/pymupdf/PyMuPDF/issues/1738). Leak of
    `pdf_graft_map`. Also fixed a SEGV issue that this seemed to expose, caused by
    incorrect freeing of underlying fz_document.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1733](https://github.com/pymupdf/PyMuPDF/issues/1733). Fixed ownership
    of `Annotation.get_pixmap()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changes to build/release process:'
  prefs: []
  type: TYPE_NORMAL
- en: If pip builds from source because an appropriate wheel is not available, we
    no longer require MuPDF to be pre-installed. Instead the required MuPDF source
    is embedded in the sdist and automatically built into PyMuPDF.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various changes to `setup.py` to download the required MuPDF release as required.
    See comments at start of setup.py for details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added `.github/workflows/build_wheels.yml` to control building of wheels on
    Github.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.19.6**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** [#1620](https://github.com/pymupdf/PyMuPDF/issues/1620). The [TextPage](textpage.html#textpage)
    created by [`Page.get_textpage()`](page.html#Page.get_textpage "Page.get_textpage")
    will now be freed correctly (removed memory leak).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1601](https://github.com/pymupdf/PyMuPDF/issues/1601). Document
    open errors should now be more concise and easier to interpret. In the course
    of this, two PyMuPDF-specific Python exceptions have been **added:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EmptyFileError` – raised when trying to create a [Document](document.html#document)
    (`fitz.open()`) from an empty file or zero-length memory.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '`FileDataError` – raised when MuPDF encounters irrecoverable document structure
    issues.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Page.load_widget()`](page.html#Page.load_widget "Page.load_widget")
    given a PDF field’s xref.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** Dictionary [`pdfcolor`](functions.html#pdfcolor "pdfcolor") which
    provide the about 500 colors defined as PDF color values with the lower case color
    name as key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** algebra functionality to the [Quad](quad.html#quad) class. These
    objects can now also be added and subtracted among themselves, and be multiplied
    by numbers and matrices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** new constants defining the default text extraction flags for more
    comfortable handling. Their naming convention is like [`TEXTFLAGS_WORDS`](vars.html#TEXTFLAGS_WORDS
    "TEXTFLAGS_WORDS") for `page.get_text("words")`. See [Text Extraction Flags Defaults](app1.html#text-extraction-flags).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Page.annots()`](page.html#Page.annots "Page.annots") and [`Page.widgets()`](page.html#Page.widgets
    "Page.widgets") to detect and prevent reloading the page (illegally) inside the
    iterator loops via [`Document.reload_page()`](document.html#Document.reload_page
    "Document.reload_page"). Doing this brings down the interpretor. Documented clean
    ways to do annotation and widget mass updates within properly designed loops.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** several internal utility functions to become standalone (“SWIG
    inline”) as opposed to be part of the [Tools](tools.html#tools) class. This, among
    other things, increases the performance of geometry object creation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Document.update_stream()`](document.html#Document.update_stream
    "Document.update_stream") to always accept stream updates - whether or not the
    dictionary object behind the xref already is a stream. Thus the former `new` parameter
    is now ignored and will be removed in v1.20.0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.19.5**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** [#1518](https://github.com/pymupdf/PyMuPDF/issues/1518). A limited
    “fix”: in some cases, rectangles and quadrupels were not correctly encoded to
    support re-drawing by [Shape](shape.html#shape).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1521](https://github.com/pymupdf/PyMuPDF/issues/1521). This had
    the same ultimate reason behind issue #1510.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1513](https://github.com/pymupdf/PyMuPDF/issues/1513). Some Optional
    Content functions did not support non-ASCII characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1510](https://github.com/pymupdf/PyMuPDF/issues/1510). Support
    more soft-mask image subtypes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1507](https://github.com/pymupdf/PyMuPDF/issues/1507). Immunize
    against items in the outlines chain, that are `"null"` objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** re-opened [#1417](https://github.com/pymupdf/PyMuPDF/issues/1417).
    (“too many open files”). This was due to insufficient calls to MuPDF’s `fz_drop_document()`.
    This also fixes [#1550](https://github.com/pymupdf/PyMuPDF/issues/1550).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** several undocumented issues in relation to incorrectly setting the
    text span origin [`point_like`](glossary.html#point_like "point_like").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** undocumented error computing the character bbox in method [`Page.get_texttrace()`](functions.html#Page.get_texttrace
    "Page.get_texttrace") when text is **flipped** (as opposed to just rotated).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** items to the dictionary returned by `image_properties()`: `orientation`
    and `transform` report the natural image orientation (EXIF data).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** method [`Document.xref_copy()`](document.html#Document.xref_copy
    "Document.xref_copy"). It will make a given target PDF object an exact copy of
    a source object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.19.4**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** [#1505](https://github.com/pymupdf/PyMuPDF/issues/1505). Immunize
    against circular outline items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1484](https://github.com/pymupdf/PyMuPDF/issues/1484). Correct
    CropBox coordinates are now returned in all situations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1479](https://github.com/pymupdf/PyMuPDF/issues/1479).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1474](https://github.com/pymupdf/PyMuPDF/issues/1474). TextPage
    objects are now properly deleted again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [Page](page.html#page) methods and attributes for PDF `/ArtBox`,
    `/BleedBox`, `/TrimBox`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** global attribute [`TESSDATA_PREFIX`](functions.html#TESSDATA_PREFIX
    "TESSDATA_PREFIX") for easy checking of OCR support.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Document.xref_set_key()`](document.html#Document.xref_set_key
    "Document.xref_set_key") such that dictionary keys will physically be removed
    if set to value `"null"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Document.extract_font()`](document.html#Document.extract_font
    "Document.extract_font") to optionally return a dictionary (instead of a tuple).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.19.3**'
  prefs: []
  type: TYPE_NORMAL
- en: This patch version implements minor improvements for [Pixmap](pixmap.html#pixmap)
    and also some important fixes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** [#1351](https://github.com/pymupdf/PyMuPDF/discussions/1351). Reverted
    code that introduced the memory growth in v1.18.15.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1417](https://github.com/pymupdf/PyMuPDF/discussions/1417). Developped
    circumvention for growth of open file handles using [`Document.insert_pdf()`](document.html#Document.insert_pdf
    "Document.insert_pdf").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1418](https://github.com/pymupdf/PyMuPDF/discussions/1418). Developped
    circumvention for memory growth using [`Document.insert_pdf()`](document.html#Document.insert_pdf
    "Document.insert_pdf").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1430](https://github.com/pymupdf/PyMuPDF/discussions/1430). Developped
    circumvention for mass pixmap generations of document pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1433](https://github.com/pymupdf/PyMuPDF/discussions/1433). Solves
    a bbox error for some Type 3 font in PyMuPDF text processing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Pixmap.color_topusage()`](pixmap.html#Pixmap.color_topusage "Pixmap.color_topusage")
    to determine the share of the most frequently used color. Solves [#1397](https://github.com/pymupdf/PyMuPDF/discussions/1397).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Pixmap.warp()`](pixmap.html#Pixmap.warp "Pixmap.warp") which makes
    a new pixmap from a given arbitrary convex quad inside the pixmap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Annot.irt_xref`](annot.html#Annot.irt_xref "Annot.irt_xref") and
    [`Annot.set_irt_xref()`](annot.html#Annot.set_irt_xref "Annot.set_irt_xref") to
    inquire or set the `/IRT` (“In Responde To”) property of an annotation. Implements
    [#1450](https://github.com/pymupdf/PyMuPDF/discussions/1450).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Rect.torect()`](rect.html#Rect.torect "Rect.torect") and [`IRect.torect()`](irect.html#IRect.torect
    "IRect.torect") which compute a matrix that transforms to a given other rectangle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Pixmap.color_count()`](pixmap.html#Pixmap.color_count "Pixmap.color_count")
    to also return the count of each color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Page.get_texttrace()`](functions.html#Page.get_texttrace "Page.get_texttrace")
    to also return correct span and character bboxes if `span["dir"] != (1, 0)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.19.2**'
  prefs: []
  type: TYPE_NORMAL
- en: This patch version implements minor improvements for [`Page.get_drawings()`](page.html#Page.get_drawings
    "Page.get_drawings") and also some important fixes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** [#1388](https://github.com/pymupdf/PyMuPDF/discussions/1388). Fixed
    intermittent memory corruption when insert or updating annotations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1375](https://github.com/pymupdf/PyMuPDF/discussions/1375). Inconsistencies
    between line numbers as returned by the “words” and the “dict” options of [`Page.get_text()`](page.html#Page.get_text
    "Page.get_text") have been corrected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1364](https://github.com/pymupdf/PyMuPDF/issues/1342). The check
    for being a `"rawdict"` span in [`recover_span_quad()`](functions.html#recover_span_quad
    "recover_span_quad") now works correctly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1342](https://github.com/pymupdf/PyMuPDF/issues/1364). Corrected
    the check for rectangle infiniteness in [`Page.show_pdf_page()`](page.html#Page.show_pdf_page
    "Page.show_pdf_page").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Page.get_drawings()`](page.html#Page.get_drawings "Page.get_drawings"),
    [`Page.get_cdrawings()`](page.html#Page.get_cdrawings "Page.get_cdrawings") to
    return an indicator on the area orientation covered by a rectangle. This implements
    [#1355](https://github.com/pymupdf/PyMuPDF/issues/1355). Also, the recognition
    rate for rectangles and quads has been significantly improved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** all text search and extraction methods to set the new `flags` option
    `TEXT_MEDIABOX_CLIP` to ON by default. That bit causes the automatic suppression
    of all characters that are completely outside a page’s mediabox (in as far as
    that notion is supported for a document type). This eliminates the need for using
    `clip=page.rect` or similar for omitting text outside the visible area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** parameter `"dpi"` to [`Page.get_pixmap()`](page.html#Page.get_pixmap
    "Page.get_pixmap") and [`Annot.get_pixmap()`](annot.html#Annot.get_pixmap "Annot.get_pixmap").
    When given, parameter `"matrix"` is ignored, and a [Pixmap](pixmap.html#pixmap)
    with the desired dots per inch is created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** attributes [`Pixmap.is_monochrome`](pixmap.html#Pixmap.is_monochrome
    "Pixmap.is_monochrome") and [`Pixmap.is_unicolor`](pixmap.html#Pixmap.is_unicolor
    "Pixmap.is_unicolor") allowing fast checks of pixmap properties. Addresses [#1397](https://github.com/pymupdf/PyMuPDF/discussions/1397).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** method [`Pixmap.color_count()`](pixmap.html#Pixmap.color_count "Pixmap.color_count")
    to determine the unique colors in the pixmap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** boolean parameter `"compress"` to PDF document method [`Document.update_stream()`](document.html#Document.update_stream
    "Document.update_stream"). Addresses / enables solution for [#1408](https://github.com/pymupdf/PyMuPDF/discussions/1408).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.19.1**'
  prefs: []
  type: TYPE_NORMAL
- en: This is the first patch version to support MuPDF v1.19.0\. Apart from one bug
    fix, it includes important improvements for OCR support and the option to **sort
    extracted text** to the standard reading order “from top-left to bottom-right”.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** [#1328](https://github.com/pymupdf/PyMuPDF/issues/1328). “words”
    text extraction again returns correct `(x0, y0)` coordinates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Page.get_textpage_ocr()`](page.html#Page.get_textpage_ocr "Page.get_textpage_ocr"):
    it now supports parameter `dpi` to control OCR quality. It is also possible to
    choose whether the **full page** should be OCRed or **only the images displayed**
    by the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Page.get_drawings()`](page.html#Page.get_drawings "Page.get_drawings")
    and [`Page.get_cdrawings()`](page.html#Page.get_cdrawings "Page.get_cdrawings")
    to automatically convert colors to RGB color tuples. Implements [#1332](https://github.com/pymupdf/PyMuPDF/discussions/1332).
    Similar change was applied to [`Page.get_texttrace()`](functions.html#Page.get_texttrace
    "Page.get_texttrace").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Page.get_text()`](page.html#Page.get_text "Page.get_text") to
    support a parameter `sort`. If set to `True` the output is conveniently sorted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.19.0**'
  prefs: []
  type: TYPE_NORMAL
- en: This is the first version supporting MuPDF 1.19.*, published 2021-10-05\. It
    introduces many new features compared to the previous version 1.18.*.
  prefs: []
  type: TYPE_NORMAL
- en: PyMuPDF has now picked up integrated Tesseract OCR support, which was already
    present in MuPDF v1.18.0.
  prefs: []
  type: TYPE_NORMAL
- en: Supported images can be OCRed via their [Pixmap](pixmap.html#pixmap) which results
    in a 1-page PDF with a text layer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All supported document pages (i.e. not only PDFs), can be OCRed using specialized
    text extraction methods. The result is a mixture of standard and OCR text (depending
    on which part of the page was deemed to require OCRing) that can be searched and
    extracted without restrictions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All this requires an independent installation of Tesseract. MuPDF actually (only)
    needs the location of Tesseract’s `"tessdata"` folder, where its language support
    data are stored. This location must be available as environment variable `TESSDATA_PREFIX`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new MuPDF feature is **journalling PDF updates**, which is also supported
    by this PyMuPDF version. Changes may be logged, rolled back or replayed, allowing
    to implement a whole new level of control over PDF document integrity – similar
    to functions present in modern database systems.
  prefs: []
  type: TYPE_NORMAL
- en: A third feature (unrelated to the new MuPDF version) includes the ability to
    detect when page **objects cover or hide each other**. It is now e.g. possible
    to see that text is covered by a drawing or an image.
  prefs: []
  type: TYPE_NORMAL
- en: '**Changed** terminology and meaning of important geometry concepts: Rectangles
    are now characterized as *finite*, *valid* or *empty*, while the definitions of
    these terms have also changed. Rectangles specifically are now thought of being
    “open”: not all corners and sides are considered part of the retangle. Please
    do read the [Rect](rect.html#rect) section for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** new parameter `"no_new_id"` to [`Document.save()`](document.html#Document.save
    "Document.save") / [`Document.tobytes()`](document.html#Document.tobytes "Document.tobytes")
    methods. Use it to suppress updating the second item of the document `/ID` which
    in PDF indicates that the original file has been updated. If the PDF has no `/ID`
    at all yet, then no new one will be created either.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** a **journalling facility** for PDF updates. This allows logging changes,
    undoing or redoing them, or saving the journal for later use. Refer to [`Document.journal_enable()`](document.html#Document.journal_enable
    "Document.journal_enable") and friends.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** new [Pixmap](pixmap.html#pixmap) methods [`Pixmap.pdfocr_save()`](pixmap.html#Pixmap.pdfocr_save
    "Pixmap.pdfocr_save") and [`Pixmap.pdfocr_tobytes()`](pixmap.html#Pixmap.pdfocr_tobytes
    "Pixmap.pdfocr_tobytes"), which generate a 1-page PDF containing the pixmap as
    PNG image with OCR text layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Page.get_textpage_ocr()`](page.html#Page.get_textpage_ocr "Page.get_textpage_ocr")
    which executes optical character recognition for the page, then extracts the results
    and stores them together with “normal” page content in a [TextPage](textpage.html#textpage).
    Use or reuse this object in subsequent text extractions and text searches to avoid
    multiple efforts. The existing text search and text extraction methods have been
    extended to support a separately created textpage – see next item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** a new parameter `textpage` to text extraction and text search methods.
    This allows reuse of a previously created [TextPage](textpage.html#textpage) and
    thus achieves significant runtime benefits – which is especially important for
    the new OCR features. But “normal” text extractions can definitely also benefit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Page.get_texttrace()`](functions.html#Page.get_texttrace "Page.get_texttrace"),
    a technical method delivering low-level text character properties. It was present
    before as a private method, but the author felt it now is mature enough to be
    officially available. It specifically includes a “sequence number” which indicates
    the page appearance build operation that painted the text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Page.get_bboxlog()`](functions.html#Page.get_bboxlog "Page.get_bboxlog")
    which delivers the list of rectangles of page objects like text, images or drawings.
    Its significance lies in its sequence: rectangles intersecting areas with a lower
    index are covering or hiding them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** methods [`Page.get_drawings()`](page.html#Page.get_drawings "Page.get_drawings")
    and [`Page.get_cdrawings()`](page.html#Page.get_cdrawings "Page.get_cdrawings")
    to include a “sequence number” indicating the page appearance build operation
    that created the drawing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1311](https://github.com/pymupdf/PyMuPDF/issues/1311). Field values
    in comboboxes should now be handled correctly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1290](https://github.com/pymupdf/PyMuPDF/issues/1290). Error was
    caused by incorrect rectangle emptiness check, which is fixed due to new geometry
    logic of this version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1286](https://github.com/pymupdf/PyMuPDF/issues/1286). Text alignment
    for redact annotations is working again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1287](https://github.com/pymupdf/PyMuPDF/issues/1287). Infinite
    loop issue for non-Windows systems when applying some redactions has been resolved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** [#1284](https://github.com/pymupdf/PyMuPDF/issues/1284). Text layout
    destruction after applying redactions in some cases has been resolved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.18 / 1.18.19**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1266](https://github.com/pymupdf/PyMuPDF/issues/1266). Failure
    to set [`Pixmap.samples`](pixmap.html#Pixmap.samples "Pixmap.samples") in important
    cases, was hotfixed in a new version 1.18.19.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1257](https://github.com/pymupdf/PyMuPDF/issues/1257). Removing
    the read-only flag from PDF fields is now possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1252](https://github.com/pymupdf/PyMuPDF/issues/1252). Now
    correctly specifying the `zoom` value for PDF link annotations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1244](https://github.com/pymupdf/PyMuPDF/issues/1244). Now
    correctly computing the transform matrix in `Page.get_image__bbox()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1241](https://github.com/pymupdf/PyMuPDF/issues/1241). Prevent
    returning artifact characters in [`Page.get_textbox()`](page.html#Page.get_textbox
    "Page.get_textbox"), which happened in certain constellations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1234](https://github.com/pymupdf/PyMuPDF/issues/1234). Avoid
    creating infinite rectangles in corner cases – [`Page.get_drawings()`](page.html#Page.get_drawings
    "Page.get_drawings"), [`Page.get_cdrawings()`](page.html#Page.get_cdrawings "Page.get_cdrawings").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** test data and test scripts to the source PyPI source distribution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.17**'
  prefs: []
  type: TYPE_NORMAL
- en: Focus of this version are major performance improvements of selected functions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1199](https://github.com/pymupdf/PyMuPDF/issues/1199). Using
    a non-existing page number in [`Document.get_page_images()`](document.html#Document.get_page_images
    "Document.get_page_images") and friends will no longer lead to segfaults.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Page.get_drawings()`](page.html#Page.get_drawings "Page.get_drawings")
    to now differentiate between “stroke”, “fill” and combined paths. Paths containing
    more than one rectangle (i.e. “re” items) are now supported. Extracting “clipped”
    paths is now available as an option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Page.get_cdrawings()`](page.html#Page.get_cdrawings "Page.get_cdrawings"),
    performance-optimized version of [`Page.get_drawings()`](page.html#Page.get_drawings
    "Page.get_drawings").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Pixmap.samples_mv`](pixmap.html#Pixmap.samples_mv "Pixmap.samples_mv"),
    *memoryview* of a pixmap’s pixel area. Does not copy and thus always accesses
    the current state of that area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Pixmap.samples_ptr`](pixmap.html#Pixmap.samples_ptr "Pixmap.samples_ptr"),
    Python “pointer” to a pixmap’s pixel area. Allows much faster creation (factor
    800+) of Qt images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.16**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1184](https://github.com/pymupdf/PyMuPDF/issues/1184). Existing
    PDF widget fonts in a PDF are now accepted (i.e. not forcedly changed to a Base-14
    font).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1154](https://github.com/pymupdf/PyMuPDF/issues/1154). Text
    search hits should now be correct when `clip` is specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1152](https://github.com/pymupdf/PyMuPDF/issues/1152).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1146](https://github.com/pymupdf/PyMuPDF/issues/1146).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Link.flags`](link.html#Link.flags "Link.flags") and [`Link.set_flags()`](link.html#Link.set_flags
    "Link.set_flags") to the [Link](link.html#link) class. Implements enhancement
    requests [#1187](https://github.com/pymupdf/PyMuPDF/issues/1187).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** option to *simulate* [`TextWriter.fill_textbox()`](textwriter.html#TextWriter.fill_textbox
    "TextWriter.fill_textbox") output for predicting the number of lines, that a given
    text would occupy in the textbox.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** text output support as subcommand `gettext` to the `fitz` CLI module.
    Most importantly, original **physical text layout** reproduction is now supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.15**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1088](https://github.com/pymupdf/PyMuPDF/issues/1088). Removing
    an annotation’s fill color should now work again both ways, using the `fill_color=[]`
    argument in [`Annot.update()`](annot.html#Annot.update "Annot.update") as well
    as `fill=[]` in [`Annot.set_colors()`](annot.html#Annot.set_colors "Annot.set_colors").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1081](https://github.com/pymupdf/PyMuPDF/issues/1081). [`Document.subset_fonts()`](document.html#Document.subset_fonts
    "Document.subset_fonts"): fixed an error which created wrong character widths
    for some fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1078](https://github.com/pymupdf/PyMuPDF/issues/1078). [`Page.get_text()`](page.html#Page.get_text
    "Page.get_text") and other methods related to text extraction: changed the default
    value of the [TextPage](textpage.html#textpage) `flags` parameter. All whitespace
    and `ligatures` are now preserved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1085](https://github.com/pymupdf/PyMuPDF/issues/1085). The
    old *snake_cased* alias of `fitz.detTextlength` is now defined correctly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Document.subset_fonts()`](document.html#Document.subset_fonts
    "Document.subset_fonts") will now correctly prefix font subsets with an appropriate
    six letter uppercase tag, complying with the PDF specification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** new method [`Widget.button_states()`](widget.html#Widget.button_states
    "Widget.button_states") which returns the possible values that a button-type field
    can have when being set to “on” or “off”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** support of text with **Small Capital** letters to the [Font](font.html#font)
    and [TextWriter](textwriter.html#textwriter) classes. This is reflected by an
    additional bool parameter `small_caps` in various of their methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.14**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Finished** implementing new, “snake_cased” names for methods and properties,
    that were “camelCased” and awkward in many aspects. At the end of this documentation,
    there is section [Deprecated Names](znames.html#deprecated) with more background
    and a mapping of old to new names.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1053](https://github.com/pymupdf/PyMuPDF/issues/1053). [`Page.insert_image()`](page.html#Page.insert_image
    "Page.insert_image"): when given, include image mask in the hash computation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1043](https://github.com/pymupdf/PyMuPDF/issues/1043). Added
    `Pixmap.getPNGdata` to the aliases of [`Pixmap.tobytes()`](pixmap.html#Pixmap.tobytes
    "Pixmap.tobytes").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** an internal error when computing the enveloping rectangle of drawn
    paths as returned by [`Page.get_drawings()`](page.html#Page.get_drawings "Page.get_drawings").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** an internal error occasionally causing loops when outputting text
    via [`TextWriter.fill_textbox()`](textwriter.html#TextWriter.fill_textbox "TextWriter.fill_textbox").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Font.char_lengths()`](font.html#Font.char_lengths "Font.char_lengths"),
    which returns a tuple of character widths of a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** more ways to specify pages in [`Document.delete_pages()`](document.html#Document.delete_pages
    "Document.delete_pages"). Now a sequence (list, tuple or range) can be specified,
    and the Python `del` statement can be used. In the latter case, Python `slices`
    are also accepted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Document.del_toc_item()`](document.html#Document.del_toc_item
    "Document.del_toc_item"), which disables a single item of the TOC: previously,
    the title text was removed. Instead, now the complete item will be shown grayed-out
    by supporting viewers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.13**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#1014](https://github.com/pymupdf/PyMuPDF/issues/1014).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** an internal memory leak when computing image bboxes – [`Page.get_image_bbox()`](page.html#Page.get_image_bbox
    "Page.get_image_bbox").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** support for low-level access and modification of the PDF trailer.
    Applies to [`Document.xref_get_keys()`](document.html#Document.xref_get_keys "Document.xref_get_keys"),
    [`Document.xref_get_key()`](document.html#Document.xref_get_key "Document.xref_get_key"),
    and [`Document.xref_set_key()`](document.html#Document.xref_set_key "Document.xref_set_key").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** documentation for maintaining private entries in PDF metadata.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** documentation for handling transparent image insertions, [`Page.insert_image()`](page.html#Page.insert_image
    "Page.insert_image").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Page.get_image_rects()`](page.html#Page.get_image_rects "Page.get_image_rects"),
    an improved version of [`Page.get_image_bbox()`](page.html#Page.get_image_bbox
    "Page.get_image_bbox").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Document.delete_pages()`](document.html#Document.delete_pages
    "Document.delete_pages") to support various ways of specifying pages to delete.
    Implements [#1042](https://github.com/pymupdf/PyMuPDF/issues/1042).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image")
    to also accept the xref of an existing image in the file. This allows “copying”
    images between pages, and extremely fast mutiple insertions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image")
    to also accept the integer parameter `alpha`. To be used for performance improvements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Pixmap.set_alpha()`](pixmap.html#Pixmap.set_alpha "Pixmap.set_alpha")
    to support new parameters for pre-multiplying colors with their alpha values and
    setting a specific color to fully transparent (e.g. white).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Document.embfile_add()`](document.html#Document.embfile_add "Document.embfile_add")
    to automatically set creation and modification date-time. Correspondingly, [`Document.embfile_upd()`](document.html#Document.embfile_upd
    "Document.embfile_upd") automatically maintains modification date-time (`/ModDate`
    PDF key), and [`Document.embfile_info()`](document.html#Document.embfile_info
    "Document.embfile_info") correspondingly reports these data. In addition, the
    embedded file’s associated “collection item” is included via its [`xref`](glossary.html#xref
    "xref"). This supports the development of PDF portfolio applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.11 / 1.18.12**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#972](https://github.com/pymupdf/PyMuPDF/issues/972). Improved
    layout of source distribution material.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#962](https://github.com/pymupdf/PyMuPDF/issues/962). Stabilized
    Linux distribution detection for generating PyMuPDF from sources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added:** [`Page.get_xobjects()`](page.html#Page.get_xobjects "Page.get_xobjects")
    delivers the result of [`Document.get_page_xobjects()`](document.html#Document.get_page_xobjects
    "Document.get_page_xobjects").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added:** [`Page.get_image_info()`](page.html#Page.get_image_info "Page.get_image_info")
    delivers meta information for all images shown on the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added:** `Tools.mupdf_display_warnings()` allows setting on / off the display
    of MuPDF-generated warnings. The default is off.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added:** [`Document.ez_save()`](document.html#Document.ez_save "Document.ez_save")
    convenience alias of [`Document.save()`](document.html#Document.save "Document.save")
    with some different defaults.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed:** Image extractions of document pages now also contain the image’s
    **transformation matrix**. This concerns [`Page.get_image_bbox()`](page.html#Page.get_image_bbox
    "Page.get_image_bbox") and the DICT, JSON, RAWDICT, and RAWJSON variants of [`Page.get_text()`](page.html#Page.get_text
    "Page.get_text").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.10**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#941](https://github.com/pymupdf/PyMuPDF/issues/941). Added
    old aliases for [`DisplayList.get_pixmap()`](displaylist.html#DisplayList.get_pixmap
    "DisplayList.get_pixmap") and [`DisplayList.get_textpage()`](displaylist.html#DisplayList.get_textpage
    "DisplayList.get_textpage").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#929](https://github.com/pymupdf/PyMuPDF/issues/929). Stabilized
    removal of JavaScript objects with [`Document.scrub()`](document.html#Document.scrub
    "Document.scrub").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#927](https://github.com/pymupdf/PyMuPDF/issues/927). Removed
    a loop in the reworked [`TextWriter.fill_textbox()`](textwriter.html#TextWriter.fill_textbox
    "TextWriter.fill_textbox").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Document.xref_get_keys()`](document.html#Document.xref_get_keys
    "Document.xref_get_keys") and [`Document.xref_get_key()`](document.html#Document.xref_get_key
    "Document.xref_get_key") to also allow accessing the PDF trailer dictionary. This
    can be done by using `-1` as the xref number argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** a number of functions for reconstructing the quads for text lines,
    spans and characters extracted by [`Page.get_text()`](page.html#Page.get_text
    "Page.get_text") options “dict” and “rawdict”. See [`recover_quad()`](functions.html#recover_quad
    "recover_quad") and friends.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Tools.unset_quad_corrections()`](tools.html#Tools.unset_quad_corrections
    "Tools.unset_quad_corrections") to suppress character quad corrections (occasionally
    required for erroneous fonts).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.9**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#888](https://github.com/pymupdf/PyMuPDF/issues/888). Removed
    ambiguous statements concerning PyMuPDF’s license, which is now clearly stated
    to be GNU AGPL V3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#895](https://github.com/pymupdf/PyMuPDF/issues/895).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#896](https://github.com/pymupdf/PyMuPDF/issues/896). Since
    v1.17.6 PyMuPDF suppresses the font subset tags and only reports the base fontname
    in text extraction outputs “dict” / “json” / “rawdict” / “rawjson”. Now a new
    global parameter can request the old behaviour, [`Tools.set_subset_fontnames()`](tools.html#Tools.set_subset_fontnames
    "Tools.set_subset_fontnames").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#885](https://github.com/pymupdf/PyMuPDF/issues/885). Pixmap
    creation now also works with filenames given as `pathlib.Paths`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Document.subset_fonts()`](document.html#Document.subset_fonts
    "Document.subset_fonts"): Text is **not rewritten** any more and should therefore
    **retain all its origial properties** – like being hidden or being controlled
    by Optional Content mechanisms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [TextWriter](textwriter.html#textwriter) output to also accept
    text in right to left mode (Arabian, Hebrew): [`TextWriter.fill_textbox()`](textwriter.html#TextWriter.fill_textbox
    "TextWriter.fill_textbox"), [`TextWriter.append()`](textwriter.html#TextWriter.append
    "TextWriter.append"). These methods now accept a new boolean parameter `right_to_left`,
    which is *False* by default. Implements [#897](https://github.com/pymupdf/PyMuPDF/issues/897).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`TextWriter.fill_textbox()`](textwriter.html#TextWriter.fill_textbox
    "TextWriter.fill_textbox") to return all lines of text, that did not fit in the
    given rectangle. Also changed the default of the `warn` parameter to no longer
    print a warning message in overflow situations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** a utility function [`recover_quad()`](functions.html#recover_quad
    "recover_quad"), which computes the quadrilateral of a span. This function can
    be used for correctly marking text extracted with the “dict” or “rawdict” options
    of [`Page.get_text()`](page.html#Page.get_text "Page.get_text").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.8**'
  prefs: []
  type: TYPE_NORMAL
- en: This is a bug fix version only. We are publishing early because of the potentially
    widely used functions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#881](https://github.com/pymupdf/PyMuPDF/issues/881). Fixed
    a memory leak in [`Page.insert_image()`](page.html#Page.insert_image "Page.insert_image")
    when inserting images from files or memory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#878](https://github.com/pymupdf/PyMuPDF/issues/878). `pathlib.Path`
    objects should now correctly handle file path hierarchies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.7**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** an experimental [`Document.subset_fonts()`](document.html#Document.subset_fonts
    "Document.subset_fonts") which reduces the size of eligible fonts based on their
    use by text in the PDF. Implements [#855](https://github.com/pymupdf/PyMuPDF/discussions/855).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implemented** request [#870](https://github.com/pymupdf/PyMuPDF/pull/870):
    [`Document.convert_to_pdf()`](document.html#Document.convert_to_pdf "Document.convert_to_pdf")
    now also supports PDF documents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Renamed** `Document.write` to [`Document.tobytes()`](document.html#Document.tobytes
    "Document.tobytes") for greater clarity. But the deprecated name remains available
    for some time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implemented** request [#843](https://github.com/pymupdf/PyMuPDF/Discussions/843):
    [`Document.tobytes()`](document.html#Document.tobytes "Document.tobytes") now
    supports linearized PDF output. [`Document.save()`](document.html#Document.save
    "Document.save") now also supports writing to Python **file objects**. In addition,
    the open function now also supports Python file objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#844](https://github.com/pymupdf/PyMuPDF/issues/844).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#838](https://github.com/pymupdf/PyMuPDF/issues/838).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#823](https://github.com/pymupdf/PyMuPDF/issues/823). More
    logic for better support of OCRed text output (Tesseract, ABBYY).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#818](https://github.com/pymupdf/PyMuPDF/issues/818).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#814](https://github.com/pymupdf/PyMuPDF/issues/814).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Document.get_page_labels()`](document.html#Document.get_page_labels
    "Document.get_page_labels") which returns a list of page label definitions of
    a PDF.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Document.has_annots()`](document.html#Document.has_annots "Document.has_annots")
    and [`Document.has_links()`](document.html#Document.has_links "Document.has_links")
    to check whether these object types are present anywhere in a PDF.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** expert low-level functions to simplify inquiry and modification of
    PDF object sources: [`Document.xref_get_keys()`](document.html#Document.xref_get_keys
    "Document.xref_get_keys") lists the keys of object [`xref`](glossary.html#xref
    "xref"), [`Document.xref_get_key()`](document.html#Document.xref_get_key "Document.xref_get_key")
    returns type and content of a key, and [`Document.xref_set_key()`](document.html#Document.xref_set_key
    "Document.xref_set_key") modifies the key’s value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** parameter `thumbnails` to [`Document.scrub()`](document.html#Document.scrub
    "Document.scrub") to also allow removing page thumbnail images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improved** documentation for how to add valid text marker annotations for
    non-horizontal text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We continued the process of renaming methods and properties from *“mixedCase”*
    to *“snake_case”*. Documentation usually mentions the new names only, but old,
    deprecated names remain available for some time.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.6**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#812](https://github.com/pymupdf/PyMuPDF/issues/812).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#793](https://github.com/pymupdf/PyMuPDF/issues/793). Invalid
    document metadata previously prevented opening some documents at all. This error
    has been removed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#792](https://github.com/pymupdf/PyMuPDF/issues/792). Text
    search and text extraction will make no rectangle containment checks at all if
    the default `clip=None` is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#785](https://github.com/pymupdf/PyMuPDF/issues/785).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#780](https://github.com/pymupdf/PyMuPDF/issues/780). Corrected
    a parameter check error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#779](https://github.com/pymupdf/PyMuPDF/issues/779). Fixed
    typo'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** an option to set the desired line height for text boxes. Implements
    [#804](https://github.com/pymupdf/PyMuPDF/issues/804).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** text position retrieval to better cope with Tesseract’s glyphless
    font. Implements [#803](https://github.com/pymupdf/PyMuPDF/issues/803).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** an option to choose the prefix of new annotations, fields and links
    for providing unique annotation ids. Implements request [#807](https://github.com/pymupdf/PyMuPDF/issues/807).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** getting and setting color and text properties for Table of Contents
    items for PDFs. Implements [#779](https://github.com/pymupdf/PyMuPDF/issues/779).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** PDF page label handling: [`Page.get_label()`](page.html#Page.get_label
    "Page.get_label") returns the page label, [`Document.get_page_numbers()`](document.html#Document.get_page_numbers
    "Document.get_page_numbers") return all page numbers having a specified label,
    and [`Document.set_page_labels()`](document.html#Document.set_page_labels "Document.set_page_labels")
    adds or updates a PDF’s page label definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This version introduces **Python type hinting**. The goal is to provide each
    parameter and the return value of all functions and methods with type information.
    This still is work in progress although the majority of functions has already
    been handled.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.5**'
  prefs: []
  type: TYPE_NORMAL
- en: Apart from several fixes, this version also focusses on several minor, but important
    feature improvements. Among the latter is a more precise computation of proper
    line heights and insertion points for writing / inserting text. As opposed to
    using font-agnostic constants, these values are now taken from the font’s properties.
  prefs: []
  type: TYPE_NORMAL
- en: Also note that this is the first version which does no longer provide pregenerated
    wheels for Python versions older than 3.6\. PIP also discontinues support for
    these by end of this year 2020.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#771](https://github.com/pymupdf/PyMuPDF/issues/771). By using
    “small glyph heights” option, the full page text can be extracted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#768](https://github.com/pymupdf/PyMuPDF/issues/768).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#750](https://github.com/pymupdf/PyMuPDF/issues/750).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#739](https://github.com/pymupdf/PyMuPDF/issues/739). The
    “dict”, “rawdict” and corresponding JSON output variants now have two new *span*
    keys: `"ascender"` and `"descender"`. These floats represent special font properties
    which can be used to compute bboxes of spans or characters of **exactly fontsize
    height** (as opposed to the default line height). An example algorithm is shown
    in section “Span Dictionary” [here](https://pymupdf.readthedocs.io/en/latest/textpage.html#dictionary-structure-of-extractdict-and-extractrawdict).
    Also improved the detection and correction of ill-specified ascender / descender
    values encountered in some fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** a new, experimental [`Tools.set_small_glyph_heights()`](tools.html#Tools.set_small_glyph_heights
    "Tools.set_small_glyph_heights") – also in response to issue [#739](https://github.com/pymupdf/PyMuPDF/issues/739).
    This method sets or unsets a global parameter to **always compute bboxes with
    fontsize height**. If “on”, text searching and all text extractions will returned
    rectangles, bboxes and quads with a smaller height.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#728](https://github.com/pymupdf/PyMuPDF/issues/728).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** fill color logic of ‘Polyline’ annotations: this parameter now
    only pertains to line end symbols – the annotation itself can no longer have a
    fill color. Also addresses issue [#727](https://github.com/pymupdf/PyMuPDF/issues/727).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Page.getImageBbox()` to also compute the bbox if the image is
    contained in an XObject.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Shape.insertTextbox()`, resp. `Page.insertTextbox()`, resp. `TextWriter.fillTextbox()`
    to respect font’s properties “ascender” / “descender” when computing line height
    and insertion point. This should no longer lead to line overlaps for multi-line
    output. These methods used to ignore font specifics and used constant values instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.4**'
  prefs: []
  type: TYPE_NORMAL
- en: This version adds several features to support PDF Optional Content. Among other
    things, this includes OCMDs (Optional Content Membership Dictionaries) with the
    full scope of *“visibility expressions”* (PDF key `/VE`), text insertions (including
    the [TextWriter](textwriter.html#textwriter) class) and drawings.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#727](https://github.com/pymupdf/PyMuPDF/issues/727). Freetext
    annotations now support an uncolored rectangle when `fill_color=None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#726](https://github.com/pymupdf/PyMuPDF/issues/726). UTF-8
    encoding errors are now handled for HTML / XML `Page.getText()` output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#724](https://github.com/pymupdf/PyMuPDF/issues/724). Empty
    values are no longer stored in the PDF /Info metadata dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** new methods [`Document.set_oc()`](document.html#Document.set_oc "Document.set_oc")
    and [`Document.get_oc()`](document.html#Document.get_oc "Document.get_oc") to
    set or get optional content references for **existing** image and form XObjects.
    These methods are similar to the same-named methods of [Annot](annot.html#annot).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Document.set_ocmd()`](document.html#Document.set_ocmd "Document.set_ocmd"),
    [`Document.get_ocmd()`](document.html#Document.get_ocmd "Document.get_ocmd") for
    handling OCMDs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** **Optional Content** support for text insertion and drawing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** new method `Page.deleteWidget()`, which deletes a form field from
    a page. This is analogous to deleting annotations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** support for Popup annotations. This includes defining the Popup rectangle
    and setting the Popup to open or closed. Methods / attributes [`Annot.set_popup()`](annot.html#Annot.set_popup
    "Annot.set_popup"), [`Annot.set_open()`](annot.html#Annot.set_open "Annot.set_open"),
    [`Annot.has_popup`](annot.html#Annot.has_popup "Annot.has_popup"), [`Annot.is_open`](annot.html#Annot.is_open
    "Annot.is_open"), [`Annot.popup_rect`](annot.html#Annot.popup_rect "Annot.popup_rect"),
    [`Annot.popup_xref`](annot.html#Annot.popup_xref "Annot.popup_xref").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **naming of methods and attributes** in PyMuPDF is far from being satisfactory:
    we have *CamelCases*, *mixedCases* and *lower_case_with_underscores* all over
    the place. With the [Annot](annot.html#annot) as the first candidate, we have
    started an activity to clean this up step by step, converting to lower case with
    underscores for methods and attributes while keeping UPPERCASE for the constants.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Old names will remain available to prevent code breaks, but they will no longer
    be mentioned in the documentation.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: New methods and attributes of all classes will be named according to the new
    standard.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.3**'
  prefs: []
  type: TYPE_NORMAL
- en: As a major new feature, this version introduces support for PDF’s **Optional
    Content** concept.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#714](https://github.com/pymupdf/PyMuPDF/issues/714).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#711](https://github.com/pymupdf/PyMuPDF/issues/711).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#707](https://github.com/pymupdf/PyMuPDF/issues/707): if a
    PDF user password, but no owner password is supplied nor present, then the user
    password is also used as the owner password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** `expand` and `deflate` parameters of methods [`Document.save()`](document.html#Document.save
    "Document.save") and `Document.write()`. Individual image and font compression
    should now finally work. Addresses issue [#713](https://github.com/pymupdf/PyMuPDF/issues/713).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** a support of PDF optional content. This includes several new [Document](document.html#document)
    methods for inquiring and setting optional content status and adding optional
    content configurations and groups. In addition, images, form XObjects and annotations
    now can be bound to optional content specifications. **Resolved** issue [#709](https://github.com/pymupdf/PyMuPDF/issues/709).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.2**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This version contains some interesting improvements for text searching: any
    number of search hits is now returned and the **hit_max** parameter was removed.
    The new **clip** parameter in addition allows to restrict the search area. Searching
    now detects hyphenations at line breaks and accordingly finds hyphenated words.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#575](https://github.com/pymupdf/PyMuPDF/issues/575): if using
    `quads=False` in text searching, then overlapping rectangles on the same line
    are joined. Previously, parts of the search string, which belonged to different
    “marked content” items, each generated their own rectangle – just as if occurring
    on separate lines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Document.isRepaired`, which is true if the PDF was repaired on open.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Document.setXmlMetadata()` which either updates or creates PDF XML
    metadata. Implements issue [#691](https://github.com/pymupdf/PyMuPDF/issues/691).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Document.getXmlMetadata()` returns PDF XML metadata.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** creation of PDF documents: they will now always carry a PDF identification
    (`/ID` field) in the document trailer. Implements issue [#691](https://github.com/pymupdf/PyMuPDF/issues/691).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Page.searchFor()`: a new parameter `clip` is accepted to restrict
    the search to this rectangle. Correspondingly, the attribute [`TextPage.rect`](textpage.html#TextPage.rect
    "TextPage.rect") is now respected by [`TextPage.search()`](textpage.html#TextPage.search
    "TextPage.search").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** parameter `hit_max` in `Page.searchFor()` and [`TextPage.search()`](textpage.html#TextPage.search
    "TextPage.search") is now obsolete: methods will return all hits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** character **selection criteria** in `Page.getText()`: a character
    is now considered to be part of a `clip` if its bbox is fully contained. Before
    this, a non-empty intersection was sufficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Document.scrub()`](document.html#Document.scrub "Document.scrub")
    to support a new option `redact_images`. This addresses issue [#697](https://github.com/pymupdf/PyMuPDF/issues/697).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.1**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#692](https://github.com/pymupdf/PyMuPDF/issues/692). PyMuPDF
    now detects and recovers from more cyclic resource dependencies in PDF pages and
    for the first time reports them in the MuPDF warnings store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#686](https://github.com/pymupdf/PyMuPDF/issues/686).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** opacity options for the [Shape](shape.html#shape) class: Stroke and
    fill colors can now be set to some transparency value. This means that all [Page](page.html#page)
    draw methods, methods `Page.insertText()`, `Page.insertTextbox()`, [`Shape.finish()`](shape.html#Shape.finish
    "Shape.finish"), `Shape.insertText()`, and `Shape.insertTextbox()` support two
    new parameters: *stroke_opacity* and *fill_opacity*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** new parameter `mask` to `Page.insertImage()` for optionally providing
    an external image mask. Resolves issue [#685](https://github.com/pymupdf/PyMuPDF/issues/685).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Annot.soundGet()` for extracting the sound of an audio annotation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.18.0**'
  prefs: []
  type: TYPE_NORMAL
- en: This is the first PyMuPDF version supporting MuPDF v1.18\. The focus here is
    on extending PyMuPDF’s own functionality – apart from bug fixing. Subsequent PyMuPDF
    patches may address features new in MuPDF.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#519](https://github.com/pymupdf/PyMuPDF/issues/519). This
    upstream bug occurred occasionally for some pages only and seems to be fixed now:
    page layout should no longer be ruined in these cases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#675](https://github.com/pymupdf/PyMuPDF/issues/675).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unsuccessful storage allocations should now always lead to exceptions (circumvention
    of an upstream bug intermittently crashing the interpreter).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pixmap](pixmap.html#pixmap) size is now based on `size_t` instead of `int`
    in C and should be correct even for extremely large pixmaps.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#668](https://github.com/pymupdf/PyMuPDF/issues/668). Specification
    of dashes for PDF drawing insertion should now correctly reflect the PDF spec.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#669](https://github.com/pymupdf/PyMuPDF/issues/669). A major
    source of memory leakage in `Page.insert_pdf()` has been removed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** keyword *“images”* to [`Page.apply_redactions()`](page.html#Page.apply_redactions
    "Page.apply_redactions") for fine-controlling the handling of images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Annot.getText()` and `Annot.getTextbox()`, which offer the same
    functionality as the [Page](page.html#page) versions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** key *“number”* to the block dictionaries of `Page.getText()` / `Annot.getText()`
    for options “dict” and “rawdict”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`glyph_name_to_unicode()`](functions.html#glyph_name_to_unicode
    "glyph_name_to_unicode") and [`unicode_to_glyph_name()`](functions.html#unicode_to_glyph_name
    "unicode_to_glyph_name"). Both functions do not really connect to a specific font
    and are now independently available, too. The data are now based on the [Adobe
    Glyph List](https://github.com/adobe-type-tools/agl-aglfn/blob/master/glyphlist.txt).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** convenience functions [`adobe_glyph_names()`](functions.html#adobe_glyph_names
    "adobe_glyph_names") and [`adobe_glyph_unicodes()`](functions.html#adobe_glyph_unicodes
    "adobe_glyph_unicodes") which return the respective available data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Page.getDrawings()` which returns details of drawing operations
    on a document page. Works for all document types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved performance of [`Document.insert_pdf()`](document.html#Document.insert_pdf
    "Document.insert_pdf"). Multiple object copies are now also suppressed across
    multiple separate insertions from the same source. This saves time, memory and
    target file size. Previously this mechanism was only active within each single
    method execution. The feature can also be suppressed with the new method bool
    parameter *final=1*, which is the default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For PNG images created from pixmaps, the resolution (dpi) is now automatically
    set from the respective [`Pixmap.xres`](pixmap.html#Pixmap.xres "Pixmap.xres")
    and [`Pixmap.yres`](pixmap.html#Pixmap.yres "Pixmap.yres") values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.17.7**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#651](https://github.com/pymupdf/PyMuPDF/issues/651). An upstream
    bug causing interpreter crashes in corner case redaction processings was fixed
    by backporting MuPDF changes from their development repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#645](https://github.com/pymupdf/PyMuPDF/issues/645). Pixmap
    top-left coordinates can be set (again) by their own method, [`Pixmap.set_origin()`](pixmap.html#Pixmap.set_origin
    "Pixmap.set_origin").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#622](https://github.com/pymupdf/PyMuPDF/issues/622). `Page.insertImage()`
    again accepts a [`rect_like`](glossary.html#rect_like "rect_like") parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** severeal new methods to improve and speed-up table of contents (TOC)
    handling. Among other things, TOC items can now changed or deleted individually
    – without always replacing the complete TOC. Furthermore, access to some PDF page
    attributes is now possible without first **loading** the page. This has a very
    significant impact on the performance of TOC manipulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** an option to [`Document.insert_pdf()`](document.html#Document.insert_pdf
    "Document.insert_pdf") which allows displaying progress messages. Adresses [#640](https://github.com/pymupdf/PyMuPDF/issues/640).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Page.getTextbox()` which extracts text contained in a rectangle.
    In many cases, this should obsolete writing your own script for this type of thing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** new `clip` parameter to `Page.getText()` to simplify and speed up
    text extraction of page sub areas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`TextWriter.appendv()`](textwriter.html#TextWriter.appendv "TextWriter.appendv")
    to add text in **vertical write mode**. Addresses issue [#653](https://github.com/pymupdf/PyMuPDF/issues/653)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.17.6**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#605](https://github.com/pymupdf/PyMuPDF/issues/605)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#600](https://github.com/pymupdf/PyMuPDF/issues/600) – text
    should now be correctly positioned also for pages with a CropBox smaller than
    MediaBox.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** text span dictionary key `origin` which contains the lower left coordinate
    of the first character in that span.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** attribute [`Font.buffer`](font.html#Font.buffer "Font.buffer"), a
    *bytes* copy of the font file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** parameter *sanitize* to `Page.cleanContents()`. Allows switching
    of sanitization, so only syntax cleaning will be done.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.17.5**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#561](https://github.com/pymupdf/PyMuPDF/issues/561) – second
    go: certain [TextWriter](textwriter.html#textwriter) usages with many alternating
    fonts did not work correctly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#566](https://github.com/pymupdf/PyMuPDF/issues/566).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#568](https://github.com/pymupdf/PyMuPDF/issues/568).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** – opacity is now correctly taken from the [TextWriter](textwriter.html#textwriter)
    object, if not given in `TextWriter.writeText()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** a new global attribute [`fitz_fontdescriptors`](functions.html#fitz_fontdescriptors
    "fitz_fontdescriptors"). Contains information about usable fonts from repository
    [pymupdf-fonts](https://github.com/pymupdf/pymupdf-fonts).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Font.valid_codepoints()`](font.html#Font.valid_codepoints "Font.valid_codepoints")
    which returns an array of unicode codepoints for which the font has a glyph.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** option `text_as_path` to `Page.getSVGimage()`. this implements [#580](https://github.com/pymupdf/PyMuPDF/issues/580).
    Generates much smaller SVG files with parseable text if set to *False*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.17.4**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#561](https://github.com/pymupdf/PyMuPDF/issues/561). Handling
    of more than 10 [Font](font.html#font) objects on one page should now work correctly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#562](https://github.com/pymupdf/PyMuPDF/issues/562). Annotation
    pixmaps are no longer derived from the page pixmap, thus avoiding unintended inclusion
    of page content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#559](https://github.com/pymupdf/PyMuPDF/issues/559). This
    **MuPDF** bug is being temporarily fixed with a pre-version of MuPDF’s next release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** utility function `repair_mono_font()` for correcting displayed character
    spacing for some mono-spaced fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** utility method [`Document.need_appearances()`](document.html#Document.need_appearances
    "Document.need_appearances") for fine-controlling Form PDF behavior. Addresses
    issue [#563](https://github.com/pymupdf/PyMuPDF/issues/563).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** utility function [`sRGB_to_pdf()`](functions.html#sRGB_to_pdf "sRGB_to_pdf")
    to recover the PDF color triple for a given color integer in sRGB format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** utility function [`sRGB_to_rgb()`](functions.html#sRGB_to_rgb "sRGB_to_rgb")
    to recover the (R, G, B) color triple for a given color integer in sRGB format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** utility function [`make_table()`](functions.html#make_table "make_table")
    which delivers table cells for a given rectangle and desired numbers of columns
    and rows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** support for optional fonts in repository [pymupdf-fonts](https://github.com/pymupdf/pymupdf-fonts).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.17.3**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** an undocumented issue, which prevented fully cleaning a PDF page
    when using `Page.cleanContents()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#540](https://github.com/pymupdf/PyMuPDF/issues/540). Text
    extraction for EPUB should again work correctly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#548](https://github.com/pymupdf/PyMuPDF/issues/548). Documentation
    now includes `LINK_NAMED`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** new parameter to control start of text in `TextWriter.fillTextbox()`.
    Implements [#549](https://github.com/pymupdf/PyMuPDF/issues/549).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** documentation of [`Page.add_redact_annot()`](page.html#Page.add_redact_annot
    "Page.add_redact_annot") to explain the usage of non-builtin fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.17.2**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#533](https://github.com/pymupdf/PyMuPDF/issues/533).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** options to modify ‘Redact’ annotation appearance. Implements [#535](https://github.com/pymupdf/PyMuPDF/issues/535).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.17.1**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#520](https://github.com/pymupdf/PyMuPDF/issues/520).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#525](https://github.com/pymupdf/PyMuPDF/issues/525). Vertices
    for ‘Ink’ annots should now be correct.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#524](https://github.com/pymupdf/PyMuPDF/issues/524). It is
    now possible to query and set rotation for applicable annotation types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also significantly improved inline documentation for better support of interactive
    help.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.17.0**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This version is based on MuPDF v1.17\. Following are highlights of new and
    changed features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** extended language support for annotations and widgets: a mixture
    of Latin, Greece, Russian, Chinese, Japanese and Korean characters can now be
    used in ‘FreeText’ annotations and text widgets. No special arrangement is required
    to use it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Faster page access is implemented for documents supporting a “chapter” structure.
    This applies to EPUB documents currently. This comes with several new [Document](document.html#document)
    methods and changes for `Document.loadPage()` and the “indexed” page access *doc[n]*:
    In addition to specifying a page number as before, a tuple *(chaper, pno)* can
    be specified to identify the desired page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed:** Improved support of redaction annotations: images overlapped by
    redactions are **permanantly modified** by erasing the overlap areas. Also links
    are removed if overlapped by redactions. This is now fully in sync with PDF specifications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changed** `TextWriter.writeText()` to support the *“morph”* parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** methods [`Rect.morph()`](rect.html#Rect.morph "Rect.morph"), [`IRect.morph()`](irect.html#IRect.morph
    "IRect.morph"), and [`Quad.morph()`](quad.html#Quad.morph "Quad.morph"), which
    return a new [Quad](quad.html#quad).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Page.add_freetext_annot()`](page.html#Page.add_freetext_annot
    "Page.add_freetext_annot") to support text alignment via a new *“align”* parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#508](https://github.com/pymupdf/PyMuPDF/issues/508). Improved
    image rectangle calculation to hopefully deliver correct values in most if not
    all cases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#502](https://github.com/pymupdf/PyMuPDF/issues/502).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#500](https://github.com/pymupdf/PyMuPDF/issues/500). `Document.convertToPDF()`
    should no longer cause memory leaks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#496](https://github.com/pymupdf/PyMuPDF/issues/496). Annotations
    and widgets / fields are now added or modified using the coordinates of the **unrotated
    page**. This behavior is now in sync with other methods modifying PDF pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Page.rotationMatrix` and `Page.derotationMatrix` to support coordinate
    transformations between the rotated and the original versions of a PDF page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Potential code breaking changes:'
  prefs: []
  type: TYPE_NORMAL
- en: The private method `Page._getTransformation()` has been removed. Use the public
    `Page.transformationMattrix` instead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.18**'
  prefs: []
  type: TYPE_NORMAL
- en: This version introduces several new features around PDF text output. The motivation
    is to simplify this task, while at the same time offering extending features.
  prefs: []
  type: TYPE_NORMAL
- en: One major achievement is using MuPDF’s capabilities to dynamically choosing
    fallback fonts whenever a character cannot be found in the current one. This seemlessly
    works for Base-14 fonts in combination with CJK fonts (China, Japan, Korea). So
    a text may contain **any combination of characters** from the Latin, Greek, Russian,
    Chinese, Japanese and Korean languages.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#493](https://github.com/pymupdf/PyMuPDF/issues/493). `Pixmap(doc,
    xref)` should now again correctly resemble the loaded image object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#488](https://github.com/pymupdf/PyMuPDF/issues/488). Widget
    names are now modifiable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** new class [Font](font.html#font) which represents a font.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** new class [TextWriter](textwriter.html#textwriter) which serves as
    a container for text to be written on a page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Page.writeText()` to write one or more [TextWriter](textwriter.html#textwriter)
    objects to the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.17**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#479](https://github.com/pymupdf/PyMuPDF/issues/479). PyMuPDF
    should now more correctly report image resolutions. This applies to both, images
    (either from images files or extracted from PDF documents) and pixmaps created
    from images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Pixmap.set_dpi()`](pixmap.html#Pixmap.set_dpi "Pixmap.set_dpi")
    which sets the image resolution in x and y directions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.16**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#477](https://github.com/pymupdf/PyMuPDF/issues/477).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#476](https://github.com/pymupdf/PyMuPDF/issues/476).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** annotation line end symbol coloring and fixed an error coloring
    the interior of ‘Polyline’ /’Polygon’ annotations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.14**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changed** text marker annotations to accept parameters beyond just quadrilaterals
    such that now **text lines between two given points can be marked**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Document.scrub()`](document.html#Document.scrub "Document.scrub")
    which **removes potentially sensitive data** from a PDF. Implements [#453](https://github.com/pymupdf/PyMuPDF/issues/453).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Annot.blendMode()` which returns the **blend mode** of annotations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Annot.setBlendMode()` to set the annotation’s blend mode. This resolves
    issue [#416](https://github.com/pymupdf/PyMuPDF/issues/416).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Annot.update()`](annot.html#Annot.update "Annot.update") to accept
    additional parameters for setting blend mode and opacity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** advanced graphics features to **control the anti-aliasing values**,
    [`Tools.set_aa_level()`](tools.html#Tools.set_aa_level "Tools.set_aa_level").
    Resolves [#467](https://github.com/pymupdf/PyMuPDF/issues/467)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#474](https://github.com/pymupdf/PyMuPDF/issues/474).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#466](https://github.com/pymupdf/PyMuPDF/issues/466).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.13**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** `Document.getPageXObjectList()` which returns a list of **Form XObjects**
    of the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Page.setMediaBox()` for changing the physical PDF page size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [Page](page.html#page) methods which have been internal before: `Page.cleanContents()`
    (= `Page._cleanContents()`), `Page.getContents()` (= `Page._getContents()`), `Page.getTransformation()`
    (= `Page._getTransformation()`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.12**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue [#447](https://github.com/pymupdf/PyMuPDF/issues/447)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#461](https://github.com/pymupdf/PyMuPDF/issues/461).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#397](https://github.com/pymupdf/PyMuPDF/issues/397).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue [#463](https://github.com/pymupdf/PyMuPDF/issues/463).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** JavaScript support to PDF form fields, thereby fixing [#454](https://github.com/pymupdf/PyMuPDF/issues/454).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** a new annotation method [`Annot.delete_responses()`](annot.html#Annot.delete_responses
    "Annot.delete_responses"), which removes ‘Popup’ and response annotations referring
    to the current one. Mainly serves data protection purposes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** a new form field method [`Widget.reset()`](widget.html#Widget.reset
    "Widget.reset"), which resets the field value to its default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** and extended handling of redactions: images and XObjects are removed
    if *contained* in a redaction rectangle. Any partial only overlaps will just be
    covered by the redaction background color. Now an *overlay* text can be specified
    to be inserted in the rectangle area to **take the place the deleted original**
    text. This resolves [#434](https://github.com/pymupdf/PyMuPDF/issues/434).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.11**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** Support for redaction annotations via method [`Page.add_redact_annot()`](page.html#Page.add_redact_annot
    "Page.add_redact_annot") and [`Page.apply_redactions()`](page.html#Page.apply_redactions
    "Page.apply_redactions").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue #426 (“PolygonAnnotation in 1.16.10 version”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** documentation only issues [#443](https://github.com/pymupdf/PyMuPDF/issues/443)
    and [#444](https://github.com/pymupdf/PyMuPDF/issues/444).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.10**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue #421 (“annot.set_rect(rect) has no effect on text Annotation”)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue #417 (“Strange behavior for page.deleteAnnot on 1.16.9 compare
    to 1.13.20”)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue #415 (“Annot.setOpacity throws mupdf warnings”)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** all “add annotation / widget” methods to store a unique name in
    the */NM* PDF key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Annot.setInfo()` to also accept direct parameters in addition
    to a dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Annot.info`](annot.html#Annot.info "Annot.info") to now also
    show the annotation’s unique id (*/NM* PDF key) if present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Page.annot_names()`](page.html#Page.annot_names "Page.annot_names")
    which returns a list of all annotation names (*/NM* keys).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Page.load_annot()`](page.html#Page.load_annot "Page.load_annot")
    which loads an annotation given its unique id (*/NM* key).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Document.reload_page()`](document.html#Document.reload_page "Document.reload_page")
    which provides a new copy of a page after finishing any pending updates to it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.9**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** #412 (“Feature Request: Allow controlling whether TOC entries should
    be collapsed”)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** #411 (“Seg Fault with page.firstWidget”)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** #407 (“Annot.setOpacity trouble”)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** methods `Annot.setBorder()`, `Annot.setColors()`, `Link.setBorder()`,
    and `Link.setColors()` to also accept direct parameters, and not just cumbersome
    dictionaries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.8**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** several new methods to the [Document](document.html#document) class,
    which make dealing with PDF low-level structures easier. I also decided to provide
    them as “normal” methods (as opposed to private ones starting with an underscore
    “_”). These are `Document.xrefObject()`, `Document.xrefStream()`, `Document.xrefStreamRaw()`,
    `Document.PDFTrailer()`, `Document.PDFCatalog()`, `Document.metadataXML()`, `Document.updateObject()`,
    `Document.updateStream()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Tools.mupdf_disply_errors()` which sets the display of mupdf errors
    on *sys.stderr*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** a commandline facility. This a major new feature: you can now invoke
    several utility functions via *“python -m fitz …”*. It should obsolete the need
    for many of the most trivial scripts. Please refer to [Command line interface](module.html#module).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.7**'
  prefs: []
  type: TYPE_NORMAL
- en: Minor changes to better synchronize the binary image streams of [TextPage](textpage.html#textpage)
    image blocks and `Document.extractImage()` images.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue #394 (“PyMuPDF Segfaults when using TOOLS.mupdf_warnings()”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** redirection of MuPDF error messages: apart from writing them to
    Python *sys.stderr*, they are now also stored with the MuPDF warnings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Tools.mupdf_warnings()`](tools.html#Tools.mupdf_warnings "Tools.mupdf_warnings")
    to automatically empty the store (if not deactivated via a parameter).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Page.getImageBbox()` to return an **infinite rectangle** if the
    image could not be located on the page – instead of raising an exception.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.6**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue #390 (“Incomplete deletion of annotations”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Page.searchFor()` / `Document.searchPageFor()` to also support
    the *flags* parameter, which controls the data included in a [TextPage](textpage.html#textpage).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Document.getPageImageList()`, `Document.getPageFontList()` and
    their [Page](page.html#page) counterparts to support a new parameter *full*. If
    true, the returned items will contain the [`xref`](glossary.html#xref "xref")
    of the *Form XObject* where the font or image is referenced.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.5**'
  prefs: []
  type: TYPE_NORMAL
- en: More performance improvements for text extraction.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** second part of issue #381 (see item in v1.16.4).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Page.getTextPage()`, so it is no longer required to create an intermediate
    display list for text extractions. Page level wrappers for text extraction and
    text searching are now based on this, which should improve performance by ca.
    5%.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.4**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue #381 (“TextPage.extractDICT … failed … after upgrading … to
    1.16.3”)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** method [`Document.pages()`](document.html#Document.pages "Document.pages")
    which delivers a generator iterator over a page range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** method [`Page.links()`](page.html#Page.links "Page.links") which
    delivers a generator iterator over the links of a page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** method [`Page.annots()`](page.html#Page.annots "Page.annots") which
    delivers a generator iterator over the annotations of a page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** method [`Page.widgets()`](page.html#Page.widgets "Page.widgets")
    which delivers a generator iterator over the form fields of a page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Document.is_form_pdf`](document.html#Document.is_form_pdf "Document.is_form_pdf")
    to now contain the number of widgets, and *False* if not a PDF or this number
    is zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.3**'
  prefs: []
  type: TYPE_NORMAL
- en: Minor changes compared to version 1.16.2\. The code of the “dict” and “rawdict”
    variants of `Page.getText()` has been ported to C which has greatly improved their
    performance. This improvement is mostly noticeable with text-oriented documents,
    where they now should execute almost two times faster.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue #369 (“mupdf: cmsCreateTransform failed”) by removing ICC colorspace
    support.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Page.getText()` to accept additional keywords “blocks” and “words”.
    These will deliver the results of `Page.getTextBlocks()` and `Page.getTextWords()`,
    respectively. So all text extraction methods are now available via a uniform API.
    Correspondingly, there are now new methods [`TextPage.extractBLOCKS()`](textpage.html#TextPage.extractBLOCKS
    "TextPage.extractBLOCKS") and `TextPage.extractWords()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Page.getText()` to default bit indicator *TEXT_INHIBIT_SPACES*
    to **off**. Insertion of additional spaces is **not suppressed** by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.2**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changed** text extraction methods of [Page](page.html#page) to allow detail
    control of the amount of extracted data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`planish_line()`](functions.html#planish_line "planish_line") which
    maps a given line (defined as a pair of points) to the x-axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** an issue (w/o Github number) which brought down the interpreter when
    encountering certain non-UTF-8 encodable characters while using `Page.getText()`
    with te “dict” option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue #362 (“Memory Leak with getText(‘rawDICT’)”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.1**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** property [`Quad.is_convex`](quad.html#Quad.is_convex "Quad.is_convex")
    which checks whether a line is contained in the quad if it connects two points
    of it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Document.insert_pdf()`](document.html#Document.insert_pdf "Document.insert_pdf")
    to now allow dropping or including links and annotations independently during
    the copy. Fixes issue #352 (“Corrupt PDF data and …”), which seemed to intermittently
    occur when using the method for some problematic PDF files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** a bug which, in matrix division using the syntax *“m1/m2”*, caused
    matrix *“m1”* to be **replaced** by the result instead of delivering a new matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue #354 (“SyntaxWarning with Python 3.8”). We now always use *“==”*
    for literals (instead of the *“is”* Python keyword).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue #353 (“mupdf version check”), to no longer refuse the import
    when there are only patch level deviations from MuPDF.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.16.0**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This major new version of MuPDF comes with several nice new or changed features.
    Some of them imply programming API changes, however. This is a synopsis of what
    has changed:'
  prefs: []
  type: TYPE_NORMAL
- en: PDF document encryption and decryption is now **fully supported**. This includes
    setting **permissions**, **passwords** (user and owner passwords) and the desired
    encryption method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In response to the new encryption features, PyMuPDF returns an integer (ie.
    a combination of bits) for document permissions, and no longer a dictionary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirection of MuPDF errors and warnings is now natively supported. PyMuPDF
    redirects error messages from MuPDF to *sys.stderr* and no longer buffers them.
    Warnings continue to be buffered and will not be displayed. Functions exist to
    access and reset the warnings buffer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Annotations are now **only supported for PDF**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Annotations and widgets (form fields) are now **separate object chains** on
    a page (although widgets technically still **are** PDF annotations). This means,
    that you will **never encounter widgets** when using `Page.firstAnnot` or [`Annot.next()`](annot.html#Annot.next
    "Annot.next"). You must use `Page.firstWidget` and [`Widget.next()`](widget.html#Widget.next
    "Widget.next") to access form fields.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As part of MuPDF’s changes regarding widgets, only the following four fonts
    are supported, when **adding** or **changing** form fields: **Courier, Helvetica,
    Times-Roman** and **ZapfDingBats**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'List of change details:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** [`Document.can_save_incrementally()`](document.html#Document.can_save_incrementally
    "Document.can_save_incrementally") which checks conditions that are preventing
    use of option *incremental=True* of [`Document.save()`](document.html#Document.save
    "Document.save").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Page.firstWidget` which points to the first field on a page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Page.getImageBbox()` which returns the rectangle occupied by an
    image shown on the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Annot.setName()` which lets you change the (icon) name field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** outputting the text color in `Page.getText()`: the *“dict”*, *“rawdict”*
    and *“xml”* options now also show the color in sRGB format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Document.permissions`](document.html#Document.permissions "Document.permissions")
    to now contain an integer of bool indicators – was a dictionary before.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Document.save()`](document.html#Document.save "Document.save"),
    `Document.write()`, which now fully support password-based decryption and encryption
    of PDF files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed the names of all Python constants** related to annotations and widgets.
    Please make sure to consult the **Constants and Enumerations** chapter if your
    script is dealing with these two classes. This decision goes back to the dropped
    support for non-PDF annotations. The **old names** (starting with “ANNOT_*” or
    “WIDGET_*”) will be available as deprecated synonyms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** font support for widgets: only *Cour* (Courier), *Helv* (Helvetica,
    default), *TiRo* (Times-Roman) and *ZaDb* (ZapfDingBats) are accepted when **adding
    or changing** form fields. Only the plain versions are possible – not their italic
    or bold variations. **Reading** widgets, however will show its original font.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** the name of the warnings buffer to [`Tools.mupdf_warnings()`](tools.html#Tools.mupdf_warnings
    "Tools.mupdf_warnings") and the function to empty this buffer is now called [`Tools.reset_mupdf_warnings()`](tools.html#Tools.reset_mupdf_warnings
    "Tools.reset_mupdf_warnings").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Page.getPixmap()`, [`Document.get_page_pixmap()`](document.html#Document.get_page_pixmap
    "Document.get_page_pixmap"): a new bool argument *annots* can now be used to **suppress
    the rendering of annotations** on the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Page.add_file_annot()`](page.html#Page.add_file_annot "Page.add_file_annot")
    and [`Page.add_text_annot()`](page.html#Page.add_text_annot "Page.add_text_annot")
    to enable setting an icon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Removed** widget-related methods and attributes from the [Annot](annot.html#annot)
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Removed** [Document](document.html#document) attributes *openErrCode*, *openErrMsg*,
    and [Tools](tools.html#tools) attributes / methods *stderr*, *reset_stderr*, *stdout*,
    and *reset_stdout*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Removed** **thirdparty zlib** dependency in PyMuPDF: there are now compression
    functions available in MuPDF. Source installers of PyMuPDF may now omit this extra
    installation step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No version published for MuPDF v1.15.0**'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.20 / 1.14.21**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changed** text marker annotations to support multiple rectangles / quadrilaterals.
    This fixes issue #341 (“Question : How to addhighlight so that a string spread
    across more than a line is covered by one highlight?”) and similar (#285).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue #331 (“Importing PyMuPDF changes warning filtering behaviour
    globally”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.19**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue #319 (“InsertText function error when use custom font”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** new method [`Document.get_sigflags()`](document.html#Document.get_sigflags
    "Document.get_sigflags") which returns information on whether a PDF is signed.
    Resolves issue #326 (“How to detect signature in a form pdf?”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.17**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** `Document.fullcopyPage()` to make full page copies within a PDF (not
    just copied references as `Document.copyPage()` does).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Page.getPixmap()`, [`Document.get_page_pixmap()`](document.html#Document.get_page_pixmap
    "Document.get_page_pixmap") now use *alpha=False* as default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** text extraction: the span dictionary now (again) contains its rectangle
    under the *bbox* key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Document.movePage()` and `Document.copyPage()` to use direct functions
    instead of wrapping [`Document.select()`](document.html#Document.select "Document.select")
    – similar to [`Document.delete_page()`](document.html#Document.delete_page "Document.delete_page")
    in v1.14.16.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.16**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changed** [Document](document.html#document) methods around PDF */EmbeddedFiles*
    to no longer use MuPDF’s “portfolio” functions. That support will be dropped in
    MuPDF v1.15 – therefore another solution was required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Document.embfile_Count()` to be a function (was an attribute).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** new method `Document.embfile_Names()` which returns a list of names
    of embedded files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Document.delete_page()`](document.html#Document.delete_page "Document.delete_page")
    and [`Document.delete_pages()`](document.html#Document.delete_pages "Document.delete_pages")
    to internally no longer use [`Document.select()`](document.html#Document.select
    "Document.select"), but instead use functions to perform the deletion directly.
    As it has turned out, the [`Document.select()`](document.html#Document.select
    "Document.select") method yields invalid outline trees (tables of content) for
    very complex PDFs and sophisticated use of annotations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.15**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issues #301 (“Line cap and Line join”), #300 (“How to draw a shape
    without outlines”) and #298 (“utils.updateRect exception”). These bugs pertain
    to drawing shapes with PyMuPDF. Drawing shapes without any border is fully supported.
    Line cap styles and line line join style are now differentiated and support all
    possible PDF values (0, 1, 2) instead of just being a bool. The previous parameter
    *roundCap* is deprecated in favor of *lineCap* and *lineJoin* and will be deleted
    in the next release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue #290 (“Memory Leak with getText(‘rawDICT’)”). This bug caused
    memory not being (completely) freed after invoking the “dict”, “rawdict” and “json”
    versions of `Page.getText()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.14**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** new low-level function `ImageProperties()` to determine a number
    of characteristics for an image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** new low-level function [`Document.is_stream()`](functions.html#Document.is_stream
    "Document.is_stream"), which checks whether an object is of stream type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** low-level functions `Document._getXrefString()` and `Document._getTrailerString()`
    now by default return object definitions in a formatted form which makes parsing
    easy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.13**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changed** methods working with binary input: while ever supporting bytes
    and bytearray objects, they now also accept *io.BytesIO* input, using their *getvalue()*
    method. This pertains to document creation, embedded files, FileAttachment annotations,
    pixmap creation and others. Fixes issue #274 (“Segfault when using BytesIO as
    a stream for insertImage”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue #278 (“Is insertImage(keep_proportion=True) broken?”). Images
    are now correctly presented when keeping aspect ratio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.12**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changed** the draw methods of [Page](page.html#page) and [Shape](shape.html#shape)
    to support not only RGB, but also GRAY and CMYK colorspaces. This solves issue
    #270 (“Is there a way to use CMYK color to draw shapes?”). This change also applies
    to text insertion methods of [Shape](shape.html#shape), resp. [Page](page.html#page).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue #269 (“AttributeError in Document.insert_page()”), which occurred
    when using [`Document.insert_page()`](document.html#Document.insert_page "Document.insert_page")
    with text insertion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.11**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changed** [`Page.show_pdf_page()`](page.html#Page.show_pdf_page "Page.show_pdf_page")
    to always position the source rectangle centered in the target. This method now
    also supports **rotation by arbitrary angles**. The argument *reuse_xref* has
    been deprecated: prevention of duplicates is now **handled internally**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Page.insertImage()` to support rotated display of the image and
    keeping the aspect ratio. Only rotations by multiples of 90 degrees are supported
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue #265 (“TypeError: insertText() got an unexpected keyword argument
    ‘idx’”). This issue only occurred when using [`Document.insert_page()`](document.html#Document.insert_page
    "Document.insert_page") with also inserting text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.10**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changed** [`Page.show_pdf_page()`](page.html#Page.show_pdf_page "Page.show_pdf_page")
    to support rotation of the source rectangle. Fixes #261 (“Cannot rotate insterted
    pages”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** a bug in `Page.insertImage()` which prevented insertion of multiple
    images provided as streams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.9**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** new low-level method `Document._getTrailerString()`, which returns
    the trailer object of a PDF. This is much like `Document._getXrefString()` except
    that the PDF trailer has no / needs no [`xref`](glossary.html#xref "xref") to
    identify it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** new parameters for text insertion methods. You can now set stroke
    and fill colors of glyphs (text characters) independently, as well as the thickness
    of the glyph border. A new parameter *render_mode* controls the use of these colors,
    and whether the text should be visible at all.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue #258 (“Copying image streams to new PDF without size increase”):
    For JPX images embedded in a PDF, `Document.extractImage()` will now return them
    in their original format. Previously, the MuPDF base library was used, which returns
    them in PNG format (entailing a massive size increase).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue #259 (“Morphing text to fit inside rect”). Clarified use of
    [`get_text_length()`](functions.html#get_text_length "get_text_length") and removed
    extra line breaks for long words.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.8**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** [`Pixmap.set_rect()`](pixmap.html#Pixmap.set_rect "Pixmap.set_rect")
    to change the pixel values in a rectangle. This is also an alternative to setting
    the color of a complete pixmap ([`Pixmap.clear_with()`](pixmap.html#Pixmap.clear_with
    "Pixmap.clear_with")).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** an image extraction issue with JBIG2 (monochrome) encoded PDF images.
    The issue occurred in `Page.getText()` (parameters “dict” and “rawdict”) and in
    `Document.extractImage()` methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** an issue with not correctly clearing a non-alpha [Pixmap](pixmap.html#pixmap)
    ([`Pixmap.clear_with()`](pixmap.html#Pixmap.clear_with "Pixmap.clear_with")).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** an issue with not correctly inverting colors of a non-alpha [Pixmap](pixmap.html#pixmap)
    ([`Pixmap.invert_irect()`](pixmap.html#Pixmap.invert_irect "Pixmap.invert_irect")).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.7**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** [`Pixmap.set_pixel()`](pixmap.html#Pixmap.set_pixel "Pixmap.set_pixel")
    to change one pixel value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** documentation for image conversion in the [FAQ](faq.html#faq).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** new function [`get_text_length()`](functions.html#get_text_length
    "get_text_length") to determine the string length for a given font.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** Postscript image output (changed [`Pixmap.save()`](pixmap.html#Pixmap.save
    "Pixmap.save") and [`Pixmap.tobytes()`](pixmap.html#Pixmap.tobytes "Pixmap.tobytes")).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Pixmap.save()`](pixmap.html#Pixmap.save "Pixmap.save") and [`Pixmap.tobytes()`](pixmap.html#Pixmap.tobytes
    "Pixmap.tobytes") to ensure valid combinations of colorspace, alpha and output
    format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Pixmap.save()`](pixmap.html#Pixmap.save "Pixmap.save"): the desired
    format is now inferred from the filename.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** FreeText annotations can now have a transparent background - see
    [`Annot.update()`](annot.html#Annot.update "Annot.update").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.5**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changed:** [Shape](shape.html#shape) methods now strictly use the transformation
    matrix of the [Page](page.html#page) – instead of “manually” calculating locations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** method [`Pixmap.pixel()`](pixmap.html#Pixmap.pixel "Pixmap.pixel")
    which returns the pixel value (a list) for given pixel coordinates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** method [`Pixmap.tobytes()`](pixmap.html#Pixmap.tobytes "Pixmap.tobytes")
    which returns a bytes object representing the pixmap in a variety of formats.
    Previously, this could be done for PNG outputs only ([`Pixmap.tobytes()`](pixmap.html#Pixmap.tobytes
    "Pixmap.tobytes")).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed:** output of methods [`Pixmap.save()`](pixmap.html#Pixmap.save "Pixmap.save")
    and (the new) [`Pixmap.tobytes()`](pixmap.html#Pixmap.tobytes "Pixmap.tobytes")
    may now also be PSD (Adobe Photoshop Document).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** method `Shape.drawQuad()` which draws a [Quad](quad.html#quad). This
    actually is a shorthand for a `Shape.drawPolyline()` with the edges of the quad.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** method `Shape.drawOval()`: the argument can now be **either** a
    rectangle ([`rect_like`](glossary.html#rect_like "rect_like")) **or** a quadrilateral
    ([`quad_like`](glossary.html#quad_like "quad_like")).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.4**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixes** issue #239 “Annotation coordinate consistency”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.3**'
  prefs: []
  type: TYPE_NORMAL
- en: This patch version contains minor bug fixes and CJK font output support.
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** support for the four CJK fonts as PyMuPDF generated text output.
    This pertains to methods `Page.insertFont()`, `Shape.insertText()`, `Shape.insertTextbox()`,
    and corresponding [Page](page.html#page) methods. The new fonts are available
    under “reserved” fontnames “china-t” (traditional Chinese), “china-s” (simplified
    Chinese), “japan” (Japanese), and “korea” (Korean).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** full support for the built-in fonts ‘Symbol’ and ‘Zapfdingbats’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed:** The 14 standard fonts can now each be referenced by a 4-letter
    abbreviation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.1**'
  prefs: []
  type: TYPE_NORMAL
- en: This patch version contains minor performance improvements.
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** support for [Document](document.html#document) filenames given as
    *pathlib* object by using the Python *str()* function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.14.0**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To support MuPDF v1.14.0, massive changes were required in PyMuPDF – most of
    them purely technical, with little visibility to developers. But there are also
    quite a lot of interesting new and improved features. Following are the details:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** “ink” annotation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** “rubber stamp” annotation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** “squiggly” text marker annotation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** new class [Quad](quad.html#quad) (quadrilateral or tetragon) – which
    represents a general four-sided shape in the plane. The special subtype of rectangular,
    non-empty tetragons is used in text marker annotations and as returned objects
    in text search methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** a new option “decrypt” to [`Document.save()`](document.html#Document.save
    "Document.save") and `Document.write()`. Now you can **keep encryption** when
    saving a password protected PDF.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** suppression and redirection of unsolicited messages issued by the
    underlying C-library MuPDF. Consult [Redirecting Error and Warning Messages](app3.html#redirectmessages)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed:** Changes to annotations now **always require** [`Annot.update()`](annot.html#Annot.update
    "Annot.update") to become effective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** free text annotations to support the full Latin character set and
    range of appearance options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** text searching, `Page.searchFor()`, to optionally return [Quad](quad.html#quad)
    instead [Rect](rect.html#rect) objects surrounding each search hit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** plain text output: we now add a *n* to each line if it does not
    itself end with this character.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue 211 (“Something wrong in the doc”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue 213 (“Rewritten outline is displayed only by mupdf-based applications”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue 214 (“PDF decryption GONE!”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue 215 (“Formatting of links added with pyMuPDF”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue 217 (“extraction through json is failing for my pdf”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Behind the curtain, we have changed the implementation of geometry objects:
    they now purely exist in Python and no longer have “shadow” twins on the C-level
    (in MuPDF). This has improved processing speed in that area by more than a factor
    of two.'
  prefs: []
  type: TYPE_NORMAL
- en: Because of the same reason, most methods involving geometry parameters now also
    accept the corresponding Python sequence. For example, in method *“page.show_pdf_page(rect,
    …)”* parameter *rect* may now be any [`rect_like`](glossary.html#rect_like "rect_like")
    sequence.
  prefs: []
  type: TYPE_NORMAL
- en: We also invested considerable effort to further extend and improve the [FAQ](faq.html#faq)
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.13.19**'
  prefs: []
  type: TYPE_NORMAL
- en: This version contains some technical / performance improvements and bug fixes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Changed** memory management: for Python 3 builds, Python memory management
    is exclusively used across all C-level code (i.e. no more native *malloc()* in
    MuPDF code or PyMuPDF interface code). This leads to improved memory usage profiles
    and also some runtime improvements: we have seen > 2% shorter runtimes for text
    extractions and pixmap creations (on Windows machines only to date).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** an error occurring in Python 2.7, which crashed the interpreter when
    using [`TextPage.extractRAWDICT()`](textpage.html#TextPage.extractRAWDICT "TextPage.extractRAWDICT")
    (= *Page.getText(“rawdict”)*).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** an error occurring in Python 2.7, when creating link destinations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extended** the [FAQ](faq.html#faq) chapter with more examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.13.18**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** method [`TextPage.extractRAWDICT()`](textpage.html#TextPage.extractRAWDICT
    "TextPage.extractRAWDICT"), and a corresponding new string parameter “rawdict”
    to method `Page.getText()`. It extracts text and images from a page in Python
    *dict* form like [`TextPage.extractDICT()`](textpage.html#TextPage.extractDICT
    "TextPage.extractDICT"), but with the detail level of [`TextPage.extractXML()`](textpage.html#TextPage.extractXML
    "TextPage.extractXML"), which is position information down to each single character.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.13.17**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** an error that intermittently caused an exception in [`Page.show_pdf_page()`](page.html#Page.show_pdf_page
    "Page.show_pdf_page"), when pages from many different source PDFs were shown.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** method `Document.extractImage()` to now return more meta information
    about the extracted imgage. Also, its performance has been greatly improved. Several
    demo scripts have been changed to make use of this method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** method `Document._getXrefStream()` to now return *None* if the
    object is no stream and no longer raise an exception if otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** method `Document._deleteObject()` which deletes a PDF object identified
    by its [`xref`](glossary.html#xref "xref"). Only to be used by the experienced
    PDF expert.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** a method [`paper_rect()`](functions.html#paper_rect "paper_rect")
    which returns a [Rect](rect.html#rect) for a supplied paper format string. Example:
    *fitz.paper_rect(“letter”) = fitz.Rect(0.0, 0.0, 612.0, 792.0)*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** a [FAQ](faq.html#faq) chapter to this document.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.13.16**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** support for correctly setting transparency (opacity) for certain
    annotation types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** a tool property ([`Tools.fitz_config`](tools.html#Tools.fitz_config
    "Tools.fitz_config")) showing the configuration of this PyMuPDF version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue #193 (‘insertText(overlay=False) gives “cannot resize a buffer
    with shared storage” error’) by avoiding read-only buffers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.13.15**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue #189 (“cannot find builtin CJK font”), so we are supporting
    builtin CJK fonts now (CJK = China, Japan, Korea). This should lead to correctly
    generated pixmaps for documents using these languages. This change has consequences
    for our binary file size: it will now range between 8 and 10 MB, depending on
    the OS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue #191 (“Jupyter notebook kernel dies after ca. 40 pages”), which
    occurred when modifying the contents of an annotation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.13.14**'
  prefs: []
  type: TYPE_NORMAL
- en: This patch version contains several improvements, mainly for annotations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Changed** `Annot.lineEnds` is now a list of two integers representing the
    line end symbols. Previously was a *dict* of strings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** support of line end symbols for applicable annotations. PyMuPDF now
    can generate these annotations including the line end symbols.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Annot.setLineEnds()` adds line end symbols to applicable annotation
    types (‘Line’, ‘PolyLine’, ‘Polygon’).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** technical implementation of `Page.insertImage()` and [`Page.show_pdf_page()`](page.html#Page.show_pdf_page
    "Page.show_pdf_page"): they now create there own contents objects, thereby avoiding
    changes of potentially large streams with consequential compression / decompression
    efforts and high change volumes with incremental updates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.13.13**'
  prefs: []
  type: TYPE_NORMAL
- en: This patch version contains several improvements for embedded files and file
    attachment annotations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** `Document.embfile_Upd()` which allows changing **file content and
    metadata** of an embedded file. It supersedes the old method `Document.embfile_SetInfo()`
    (which will be deleted in a future version). Content is automatically compressed
    and metadata may be unicode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Document.embfile_Add()` to now automatically compress file content.
    Accompanying metadata can now be unicode (had to be ASCII in the past).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Document.embfile_Del()` to now automatically delete **all entries**
    having the supplied identifying name. The return code is now an integer count
    of the removed entries (was *None* previously).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** embedded file methods to now also accept or show the PDF unicode
    filename as additional parameter *ufilename*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [`Page.add_file_annot()`](page.html#Page.add_file_annot "Page.add_file_annot")
    which adds a new file attachment annotation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Annot.fileUpd()` (file attachment annot) to now also accept the
    PDF unicode *ufilename* parameter. The description parameter *desc* correctly
    works with unicode. Furthermore, **all** parameters are optional, so metadata
    may be changed without also replacing the file content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** `Annot.fileInfo()` (file attachment annot) to now also show the
    PDF unicode filename as parameter *ufilename*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue #180 (“page.getText(output=’dict’) return invalid bbox”) to
    now also work for vertical text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issue #185 (“Can’t render the annotations created by PyMuPDF”). The
    issue’s cause was the minimalistic MuPDF approach when creating annotations. Several
    annotation types have no */AP* (“appearance”) object when created by MuPDF functions.
    MuPDF, SumatraPDF and hence also PyMuPDF cannot render annotations without such
    an object. This fix now ensures, that an appearance object is always created together
    with the annotation itself. We still do not support line end styles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.13.12**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed** issue #180 (“page.getText(output=’dict’) return invalid bbox”). Note
    that this is a circumvention of an MuPDF error, which generates zero-height character
    rectangles in some cases. When this happens, this fix ensures a bbox height of
    at least fontsize.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** for ListBox and ComboBox widgets, the attribute list of selectable
    values has been renamed to [`Widget.choice_values`](widget.html#Widget.choice_values
    "Widget.choice_values").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** when adding widgets, any missing of the [PDF Base 14 Fonts](app3.html#base-14-fonts)
    is automatically added to the PDF. Widget text fonts can now also be chosen from
    existing widget fonts. Any specified field values are now honored and lead to
    a field with a preset value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Annot.updateWidget()` which allows changing existing form fields
    – including the field value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.13.11**'
  prefs: []
  type: TYPE_NORMAL
- en: 'While the preceeding patch subversions only contained various fixes, this version
    again introduces major new features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** basic support for PDF widget annotations. You can now add PDF form
    fields of types Text, CheckBox, ListBox and ComboBox. Where necessary, the PDF
    is tranformed to a Form PDF with the first added widget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fixed** issues #176 (“wrong file embedding”), #177 (“segment fault when invoking
    page.getText()”)and #179 (“Segmentation fault using page.getLinks() on encrypted
    PDF”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.13.7**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Added** support of variable page sizes for reflowable documents (e-books,
    HTML, etc.): new parameters *rect* and *fontsize* in [Document](document.html#document)
    creation (open), and as a separate method [`Document.layout()`](document.html#Document.layout
    "Document.layout").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** [Annot](annot.html#annot) creation of many annotations types: sticky
    notes, free text, circle, rectangle, line, polygon, polyline and text markers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** support of annotation transparency ([`Annot.opacity`](annot.html#Annot.opacity
    "Annot.opacity"), `Annot.setOpacity()`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** [`Annot.vertices`](annot.html#Annot.vertices "Annot.vertices"):
    point coordinates are now grouped as pairs of floats (no longer as separate floats).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changed** annotation colors dictionary: the two keys are now named *“stroke”*
    (formerly *“common”*) and *“fill”*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Added** `Document.isDirty` which is *True* if a PDF has been changed in this
    session. Reset to *False* on each [`Document.save()`](document.html#Document.save
    "Document.save") or `Document.write()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.13.6**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fix #173: for memory-resident documents, ensure the stream object will not
    be garbage-collected by Python before document is closed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.13.5**'
  prefs: []
  type: TYPE_NORMAL
- en: New low-level method `Page._setContents()` defines an object given by its [`xref`](glossary.html#xref
    "xref") to serve as the [`contents`](glossary.html#contents "contents") object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changed and extended PDF form field support: the attribute *widget_text* has
    been renamed to `Annot.widget_value`. Values of all form field types (except signatures)
    are now supported. A new attribute `Annot.widget_choices` contains the selectable
    values of listboxes and comboboxes. All these attributes now contain *None* if
    no value is present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.13.4**'
  prefs: []
  type: TYPE_NORMAL
- en: '`Document.convertToPDF()` now supports page ranges, reverted page sequences
    and page rotation. If the document already is a PDF, an exception is raised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixed a bug (introduced with v1.13.0) that prevented `Page.insertImage()` for
    transparent images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.13.3**'
  prefs: []
  type: TYPE_NORMAL
- en: Introduces a way to convert **any MuPDF supported document** to a PDF. If you
    ever wanted PDF versions of your XPS, EPUB, CBZ or FB2 files – here is a way to
    do this.
  prefs: []
  type: TYPE_NORMAL
- en: '`Document.convertToPDF()` returns a Python *bytes* object in PDF format. Can
    be opened like normal in PyMuPDF, or be written to disk with the *“.pdf”* extension.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.13.2**'
  prefs: []
  type: TYPE_NORMAL
- en: The major enhancement is PDF form field support. Form fields are annotations
    of type *(19, ‘Widget’)*. There is a new document method to check whether a PDF
    is a form. The [Annot](annot.html#annot) class has new properties describing field
    details.
  prefs: []
  type: TYPE_NORMAL
- en: '[`Document.is_form_pdf`](document.html#Document.is_form_pdf "Document.is_form_pdf")
    is true if object type */AcroForm* and at least one form field exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Annot.widget_type`, `Annot.widget_text` and `Annot.widget_name` contain the
    details of a form field (i.e. a “Widget” annotation).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.13.1**'
  prefs: []
  type: TYPE_NORMAL
- en: '[`TextPage.extractDICT()`](textpage.html#TextPage.extractDICT "TextPage.extractDICT")
    is a new method to extract the contents of a document page (text and images).
    All document types are supported as with the other [TextPage](textpage.html#textpage)
    *extract*()* methods. The returned object is a dictionary of nested lists and
    other dictionaries, and **exactly equal** to the JSON-deserialization of the old
    [`TextPage.extractJSON()`](textpage.html#TextPage.extractJSON "TextPage.extractJSON").
    The difference is that the result is created directly – no JSON module is used.
    Because the user needs no JSON module to interpet the information, it should be
    easier to use, and also have a better performance, because it contains images
    in their original **binary format** – they need not be base64-decoded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Page.getText()` correspondingly supports the new parameter value *“dict”*
    to invoke the above method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`TextPage.extractJSON()`](textpage.html#TextPage.extractJSON "TextPage.extractJSON")
    (resp. *Page.getText(“json”)*) is still supported for convenience, but its use
    is expected to decline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.13.0**'
  prefs: []
  type: TYPE_NORMAL
- en: This version is based on MuPDF v1.13.0\. This release is “primarily a bug fix
    release”.
  prefs: []
  type: TYPE_NORMAL
- en: In PyMuPDF, we are also doing some bug fixes while introducing minor enhancements.
    There only very minimal changes to the user’s API.
  prefs: []
  type: TYPE_NORMAL
- en: '[Document](document.html#document) construction is more flexible: the new *filetype*
    parameter allows setting the document type. If specified, any extension in the
    filename will be ignored. More completely addresses [issue #156](https://github.com/pymupdf/PyMuPDF/issues/156).
    As part of this, the documentation has been reworked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changes to [Pixmap](pixmap.html#pixmap) constructors:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Colorspace conversion no longer allows dropping the alpha channel: source and
    target **alpha will now always be the same**. We have seen exceptions and even
    interpreter crashes when using *alpha = 0*.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As a replacement, the simple pixmap copy lets you choose the target alpha.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Document.save()`](document.html#Document.save "Document.save") again offers
    the full garbage collection range 0 thru 4\. Because of a bug in [`xref`](glossary.html#xref
    "xref") maintenance, we had to temporarily enforce *garbage > 1*. Finally resolves
    [issue #148](https://github.com/pymupdf/PyMuPDF/issues/148).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`Document.save()`](document.html#Document.save "Document.save") now offers
    to “prettify” PDF source via an additional argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Page.insertImage()` has the additional *stream* -parameter, specifying a memory
    area holding an image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Issue with garbled PNGs on Linux systems has been resolved ([“Problem writing
    PNG” #133)](https://github.com/pymupdf/PyMuPDF/issues/133).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.12.4**'
  prefs: []
  type: TYPE_NORMAL
- en: This is an extension of 1.12.3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fix of [issue #147](https://github.com/pymupdf/PyMuPDF/issues/147): methods
    `Document.getPageFontlist()` and `Document.getPageImagelist()` now also show fonts
    and images contained in [`resources`](glossary.html#resources "resources") nested
    via “Form XObjects”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Temporary fix of [issue #148](https://github.com/pymupdf/PyMuPDF/issues/148):
    Saving to new PDF files will now automatically use *garbage = 2* if a lower value
    is given. Final fix is to be expected with MuPDF’s next version. At that point
    we will remove this circumvention.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventive fix of illegally using stencil / image mask pixmaps in some methods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Method `Document.getPageFontlist()` now includes the encoding name for each
    font in the list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Method `Document.getPageImagelist()` now includes the decode method name for
    each image in the list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.12.3**'
  prefs: []
  type: TYPE_NORMAL
- en: This is an extension of 1.12.2.
  prefs: []
  type: TYPE_NORMAL
- en: Many functions now return *None* instead of *0*, if the result has no other
    meaning than just indicating successful execution ([`Document.close()`](document.html#Document.close
    "Document.close"), [`Document.save()`](document.html#Document.save "Document.save"),
    [`Document.select()`](document.html#Document.select "Document.select"), [`Pixmap.save()`](pixmap.html#Pixmap.save
    "Pixmap.save") and many others).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.12.2**'
  prefs: []
  type: TYPE_NORMAL
- en: This is an extension of 1.12.1.
  prefs: []
  type: TYPE_NORMAL
- en: Method [`Page.show_pdf_page()`](page.html#Page.show_pdf_page "Page.show_pdf_page")
    now accepts the new *clip* argument. This specifies an area of the source page
    to which the display should be restricted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New `Page.CropBox` and `Page.MediaBox` have been included for convenience.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.12.1**'
  prefs: []
  type: TYPE_NORMAL
- en: This is an extension of version 1.12.0.
  prefs: []
  type: TYPE_NORMAL
- en: New method [`Page.show_pdf_page()`](page.html#Page.show_pdf_page "Page.show_pdf_page")
    displays another’s PDF page. This is a **vector** image and therefore remains
    precise across zooming. Both involved documents must be PDF.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New method `Page.getSVGimage()` creates an SVG image from the page. In contrast
    to the raster image of a pixmap, this is a vector image format. The return is
    a unicode text string, which can be saved in a *.svg* file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Method `Page.getTextBlocks()` now accepts an additional bool parameter “images”.
    If set to true (default is false), image blocks (metadata only) are included in
    the produced list and thus allow detecting areas with rendered images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minor bug fixes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “text” result of `Page.getText()` concatenates all lines within a block using
    a single space character. MuPDF’s original uses “\n” instead, producing a rather
    ragged output.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New properties of [Page](page.html#page) objects `Page.MediaBoxSize` and `Page.CropBoxPosition`
    provide more information about a page’s dimensions. For non-PDF files (and for
    most PDF files, too) these will be equal to `Page.rect.bottom_right`, resp. `Page.rect.top_left`.
    For example, class [Shape](shape.html#shape) makes use of them to correctly position
    its items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.12.0**'
  prefs: []
  type: TYPE_NORMAL
- en: This version is based on and requires MuPDF v1.12.0\. The new MuPDF version
    contains quite a number of changes – most of them around text extraction. Some
    of the changes impact the programmer’s API.
  prefs: []
  type: TYPE_NORMAL
- en: '`Outline.saveText()` and `Outline.saveXML()` have been deleted without replacement.
    You probably haven’t used them much anyway. But if you are looking for a replacement:
    the output of [`Document.get_toc()`](document.html#Document.get_toc "Document.get_toc")
    can easily be used to produce something equivalent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class *TextSheet* does no longer exist.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text “spans” (one of the hierarchy levels of [TextPage](textpage.html#textpage))
    no longer contain positioning information (i.e. no “bbox” key). Instead, spans
    now provide the font information for its text. This impacts our JSON output variant.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTML output has improved very much: it now creates valid documents which can
    be displayed by browsers to produce a similar view as the original document.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a new output format XHTML, which provides text and images in a browser-readable
    format. The difference to HTML output is, that no effort is made to reproduce
    the original layout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All output formats of `Page.getText()` now support creating complete, valid
    documents, by wrapping them with appropriate header and trailer information. If
    you are interested in using the HTML output, please make sure to read [Controlling
    Quality of HTML Output](app1.html#htmlquality).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To support finding text positions, we have added special methods that don’t
    need detours like [`TextPage.extractJSON()`](textpage.html#TextPage.extractJSON
    "TextPage.extractJSON") or [`TextPage.extractXML()`](textpage.html#TextPage.extractXML
    "TextPage.extractXML"): use `Page.getTextBlocks()` or resp. `Page.getTextWords()`
    to create lists of text blocks or resp. words, which are accompanied by their
    rectangles. This should be much faster than the standard text extraction methods
    and also avoids using additional packages for interpreting their output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.11.2**'
  prefs: []
  type: TYPE_NORMAL
- en: This is an extension of v1.11.1.
  prefs: []
  type: TYPE_NORMAL
- en: New `Page.insertFont()` creates a PDF */Font* object and returns its object
    number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New `Document.extractFont()` extracts the content of an embedded font given
    its object number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Methods **FontList(…)** items no longer contain the PDF generation number. This
    value never had any significance. Instead, the font file extension is included
    (e.g. “pfa” for a “PostScript Font for ASCII”), which is more valuable information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fonts other than “simple fonts” (Type1) are now also supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New options to change [Pixmap](pixmap.html#pixmap) size:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Method [`Pixmap.shrink()`](pixmap.html#Pixmap.shrink "Pixmap.shrink") reduces
    the pixmap proportionally in place.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: A new [Pixmap](pixmap.html#pixmap) copy constructor allows scaling via setting
    target width and height.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.11.1**'
  prefs: []
  type: TYPE_NORMAL
- en: This is an extension of v1.11.0.
  prefs: []
  type: TYPE_NORMAL
- en: New class *Shape*. It facilitates and extends the creation of image shapes on
    PDF pages. It contains multiple methods for creating elementary shapes like lines,
    rectangles or circles, which can be combined into more complex ones and be given
    common properties like line width or colors. Combined shapes are handled as a
    unit and e.g. be “morphed” together. The class can accumulate multiple complex
    shapes and put them all in the page’s foreground or background – thus also reducing
    the number of updates to the page’s [`contents`](glossary.html#contents "contents")
    object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All *Page* draw methods now use the new *Shape* class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text insertion methods *insertText()* and *insertTextBox()* now support morphing
    in addition to text rotation. They have become part of the *Shape* class and thus
    allow text to be freely combined with graphics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new *Pixmap* constructor allows creating pixmap copies with an added alpha
    channel. A new method also allows directly manipulating alpha values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binary algebraic operations with geometry objects (matrices, rectangles and
    points) now generally also support lists or tuples as the second operand. You
    can add a tuple *(x, y)* of numbers to a [Point](point.html#point). In this context,
    such sequences are called “[`point_like`](glossary.html#point_like "point_like")”
    (resp. [`matrix_like`](glossary.html#matrix_like "matrix_like"), [`rect_like`](glossary.html#rect_like
    "rect_like")).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geometry objects now fully support in-place operators. For example, *p /= m*
    replaces point p with *p * 1/m* for a number, or *p * ~m* for a [`matrix_like`](glossary.html#matrix_like
    "matrix_like") object *m*. Similarly, if *r* is a rectangle, then *r |= (3, 4)*
    is the new rectangle that also includes *fitz.Point(3, 4)*, and *r &= (1, 2, 3,
    4)* is its intersection with *fitz.Rect(1, 2, 3, 4)*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.11.0**'
  prefs: []
  type: TYPE_NORMAL
- en: This version is based on and requires MuPDF v1.11.
  prefs: []
  type: TYPE_NORMAL
- en: 'Though MuPDF has declared it as being mostly a bug fix version, one major new
    feature is indeed contained: support of embedded files – also called portfolios
    or collections. We have extended PyMuPDF functionality to embrace this up to an
    extent just a little beyond the *mutool* utility as follows.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The *Document* class now support embedded files with several new methods and
    one new property:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*embfile_Info()* returns metadata information about an entry in the list of
    embedded files. This is more than *mutool* currently provides: it shows all the
    information that was used to embed the file (not just the entry’s name).'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*embfile_Get()* retrieves the (decompressed) content of an entry into a *bytes*
    buffer.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*embfile_Add(…)* inserts new content into the PDF portfolio. We (in contrast
    to *mutool*) **restrict** this to entries with a **new name** (no duplicate names
    allowed).'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*embfile_Del(…)* deletes an entry from the portfolio (function not offered
    in MuPDF).'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*embfile_SetInfo()* – changes filename or description of an embedded file.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*embfile_Count* – contains the number of embedded files.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Several enhancements deal with streamlining geometry objects. These are not
    connected to the new MuPDF version and most of them are also reflected in PyMuPDF
    v1.10.0\. Among them are new properties to identify the corners of rectangles
    by name (e.g. *Rect.bottom_right*) and new methods to deal with set-theoretic
    questions like *Rect.contains(x)* or *IRect.intersects(x)*. Special effort focussed
    on supporting more “Pythonic” language constructs: *if x in rect …* is equivalent
    to *rect.contains(x)*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [Rect](rect.html#rect) chapter now has more background on empty amd infinite
    rectangles and how we handle them. The handling itself was also updated for more
    consistency in this area.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have started basic support for **generation** of PDF content:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Document.insert_page()* adds a new page into a PDF, optionally containing
    some text.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Page.insertImage()* places a new image on a PDF page.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Page.insertText()* puts new text on an existing page'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: For **FileAttachment** annotations, content and name of the attached file can
    extracted and changed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.10.0**'
  prefs: []
  type: TYPE_NORMAL
- en: '**MuPDF v1.10 Impact**'
  prefs: []
  type: TYPE_NORMAL
- en: MuPDF version 1.10 has a significant impact on our bindings. Some of the changes
    also affect the API – in other words, **you** as a PyMuPDF user.
  prefs: []
  type: TYPE_NORMAL
- en: Link destination information has been reduced. Several properties of the *linkDest*
    class no longer contain valuable information. In fact, this class as a whole has
    been deleted from MuPDF’s library and we in PyMuPDF only maintain it to provide
    compatibilty to existing code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In an effort to minimize memory requirements, several improvements have been
    built into MuPDF v1.10:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new *config.h* file can be used to de-select unwanted features in the C base
    code. Using this feature we have been able to reduce the size of our binary *_fitz.o*
    / *_fitz.pyd* by about 50% (from 9 MB to 4.5 MB). When UPX-ing this, the size
    goes even further down to a very handy 2.3 MB.
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The alpha (transparency) channel for pixmaps is now optional. Letting alpha
    default to *False* significantly reduces pixmap sizes (by 20% – CMYK, 25% – RGB,
    50% – GRAY). Many *Pixmap* constructors therefore now accept an *alpha* boolean
    to control inclusion of this channel. Other pixmap constructors (e.g. those for
    file and image input) create pixmaps with no alpha alltogether. On the downside,
    save methods for pixmaps no longer accept a *savealpha* option: this channel will
    always be saved when present. To minimize code breaks, we have left this parameter
    in the call patterns – it will just be ignored.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '*DisplayList* and *TextPage* class constructors now **require the mediabox**
    of the page they are referring to (i.e. the *page.bound()* rectangle). There is
    no way to construct this information from other sources, therefore a source code
    change cannot be avoided in these cases. We assume however, that not many users
    are actually employing these rather low level classes explixitely. So the impact
    of that change should be minor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Other Changes compared to Version 1.9.3**'
  prefs: []
  type: TYPE_NORMAL
- en: The new [Document](document.html#document) method *write()* writes an opened
    PDF to memory (as opposed to a file, like *save()* does).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An annotation can now be scaled and moved around on its page. This is done by
    modifying its rectangle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Annotations can now be deleted. [Page](page.html#page) contains the new method
    *deleteAnnot()*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various annotation attributes can now be modified, e.g. content, dates, title
    (= author), border, colors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Method *Document.insert_pdf()* now also copies annotations of source pages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Pages* class has been deleted. As documents can now be accessed with page
    numbers as indices (like *doc[n] = doc.loadPage(n)*), and document object can
    be used as iterators, the benefit of this class was too low to maintain it. See
    the following comments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*loadPage(n)* / *doc[n]* now accept arbitrary integers to specify a page number,
    as long as *n < pageCount*. So, e.g. *doc[-500]* is always valid and will load
    page *(-500) % pageCount*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A document can now also be used as an iterator like this: *for page in doc:
    …<do something with “page”> …*. This will yield all pages of *doc* as *page*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [Pixmap](pixmap.html#pixmap) method *getSize()* has been replaced with property
    *size*. As before *Pixmap.size == len(Pixmap)* is true.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In response to transparency (alpha) being optional, several new parameters and
    properties have been added to [Pixmap](pixmap.html#pixmap) and [Colorspace](colorspace.html#colorspace)
    classes to support determining their characteristics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [Page](page.html#page) class now contains new properties *firstAnnot* and
    *firstLink* to provide starting points to the respective class chains, where *firstLink*
    is just a mnemonic synonym to method *loadLinks()* which continues to exist. Similarly,
    the new property *rect* is a synonym for method *bound()*, which also continues
    to exist.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pixmap](pixmap.html#pixmap) methods *samplesRGB()* and *samplesAlpha()* have
    been deleted because pixmaps can now be created without transparency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Rect](rect.html#rect) now has a property *irect* which is a synonym of method
    *round()*. Likewise, [IRect](irect.html#irect) now has property *rect* to deliver
    a [Rect](rect.html#rect) which has the same coordinates as floats values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document has the new method *searchPageFor()* to search for a text string. It
    works exactly like the corresponding *Page.searchFor()* with page number as additional
    parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.9.3**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This version is also based on MuPDF v1.9a. Changes compared to version 1.9.2:'
  prefs: []
  type: TYPE_NORMAL
- en: As a major enhancement, annotations are now supported in a similar way as links.
    Annotations can be displayed (as pixmaps) and their properties can be accessed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition to the document *select()* method, some simpler methods can now
    be used to manipulate a PDF:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*copyPage()* copies a page within a document.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*movePage()* is similar, but deletes the original.'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*delete_page()* deletes a page'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '*delete_pages()* deletes a page range'
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: '*rotation* or *setRotation()* access or change a PDF page’s rotation, respectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Available but undocumented before, [IRect](irect.html#irect), [Rect](rect.html#rect),
    [Point](point.html#point) and [Matrix](matrix.html#matrix) support the *len()*
    method and their coordinate properties can be accessed via indices, e.g. *IRect.x1
    == IRect[2]*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For convenience, documents now support simple indexing: *doc.loadPage(n) ==
    doc[n]*. The index may however be in range *-pageCount < n < pageCount*, such
    that *doc[-1]* is the last page of the document.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.9.2**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This version is also based on MuPDF v1.9a. Changes compared to version 1.9.1:'
  prefs: []
  type: TYPE_NORMAL
- en: '*fitz.open()* (no parameters) creates a new empty **PDF** document, i.e. if
    saved afterwards, it must be given a *.pdf* extension.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Document](document.html#document) now accepts all of the following formats
    (*Document* and *open* are synonyms):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*open()*,'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*open(filename)* (equivalent to *open(filename, None)*),'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*open(filetype, area)* (equivalent to *open(filetype, stream = area)*).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Type of memory area *stream* may be *bytes* or *bytearray*. Thus, e.g. *area
    = open(“file.pdf”, “rb”).read()* may be used directly (without first converting
    it to bytearray).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New method *Document.insert_pdf()* (PDFs only) inserts a range of pages from
    another PDF.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Document* objects doc now support the *len()* function: `len(doc) == doc.pageCount`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New method *Document.getPageImageList()* creates a list of images used on a
    page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New method *Document.getPageFontList()* creates a list of fonts referenced by
    a page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New pixmap constructor *fitz.Pixmap(doc, xref)* creates a pixmap based on an
    opened PDF document and an [`xref`](glossary.html#xref "xref") number of the image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New pixmap constructor *fitz.Pixmap(cspace, spix)* creates a pixmap as a copy
    of another one *spix* with the colorspace converted to *cspace*. This works for
    all colorspace combinations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pixmap constructor *fitz.Pixmap(colorspace, width, height, samples)* now allows
    *samples* to also be *bytes*, not only *bytearray*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Changes in Version 1.9.1**'
  prefs: []
  type: TYPE_NORMAL
- en: This version of PyMuPDF is based on MuPDF library source code version 1.9a published
    on April 21, 2016.
  prefs: []
  type: TYPE_NORMAL
- en: Please have a look at MuPDF’s website to see which changes and enhancements
    are contained herein.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changes in version 1.9.1 compared to version 1.8.0 are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: New methods *get_area()* for both *fitz.Rect* and *fitz.IRect*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pixmaps can now be created directly from files using the new constructor *fitz.Pixmap(filename)*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Pixmap constructor *fitz.Pixmap(image)* has been extended accordingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*fitz.Rect* can now be created with all possible combinations of points and
    coordinates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyMuPDF classes and methods now all contain __doc__ strings, most of them created
    by SWIG automatically. While the PyMuPDF documentation certainly is more detailed,
    this feature should help a lot when programming in Python-aware IDEs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new document method of *getPermits()* returns the permissions associated with
    the current access to the document (print, edit, annotate, copy), as a Python
    dictionary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The identity matrix *fitz.Identity* is now **immutable**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The new document method *select(list)* removes all pages from a document that
    are not contained in the list. Pages can also be duplicated and re-arranged.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Various improvements and new members in our demo and examples collections.
    Perhaps most prominently: *PDF_display* now supports scrolling with the mouse
    wheel, and there is a new example program *wxTableExtract* which allows to graphically
    identify and extract table data in documents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*fitz.open()* is now an alias of *fitz.Document()*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New pixmap method *tobytes()* which will return a bytearray formatted as a PNG
    image of the pixmap.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New pixmap method *samplesRGB()* providing a *samples* version with alpha bytes
    stripped off (RGB colorspaces only).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New pixmap method *samplesAlpha()* providing the alpha bytes only of the *samples*
    area.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New iterator *fitz.Pages(doc)* over a document’s set of pages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New matrix methods *invert()* (calculate inverted matrix), *concat()* (calculate
    matrix product), *pretranslate()* (perform a shift operation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New *IRect* methods *intersect()* (intersection with another rectangle), *translate()*
    (perform a shift operation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New *Rect* methods *intersect()* (intersection with another rectangle), *transform()*
    (transformation with a matrix), *include_point()* (enlarge rectangle to also contain
    a point), *include_rect()* (enlarge rectangle to also contain another one).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documented *Point.transform()* (transform a point with a matrix).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Matrix*, *IRect*, *Rect* and *Point* classes now support compact, algebraic
    formulations for manipulating such objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incremental saves for changes are possible now using the call pattern *doc.save(doc.name,
    incremental=True)*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A PDF’s metadata can now be deleted, set or changed by document method *set_metadata()*.
    Supports incremental saves.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A PDF’s bookmarks (or table of contents) can now be deleted, set or changed
    with the entries of a list using document method *set_toc(list)*. Supports incremental
    saves.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have any feedback on this page?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This software is provided AS-IS with no warranty, either express or implied.
    This software is distributed under license and may not be copied, modified or
    distributed except as expressly authorized under the terms of that license. Refer
    to licensing information at [artifex.com](https://www.artifex.com?utm_source=rtd-pymupdf&utm_medium=rtd&utm_content=footer-link)
    or contact Artifex Software Inc., 39 Mesa Street, Suite 108A, San Francisco CA
    94129, United States for further information.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation covers all versions up to 1.24.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[![Discord logo](../Images/66cbb5081103a580193aa66c87b90d9a.png)](https://discord.gg/TSpYGBW4eq)'
  prefs: []
  type: TYPE_NORMAL
