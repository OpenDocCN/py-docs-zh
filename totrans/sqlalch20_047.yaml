- en: ORM API Features for Querying
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于查询的 ORM API 功能
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/queryguide/api.html](https://docs.sqlalchemy.org/en/20/orm/queryguide/api.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://docs.sqlalchemy.org/en/20/orm/queryguide/api.html](https://docs.sqlalchemy.org/en/20/orm/queryguide/api.html)
- en: ORM Loader Options
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ORM 加载选项
- en: Loader options are objects which, when passed to the [`Select.options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.options
    "sqlalchemy.sql.expression.Select.options") method of a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object or similar SQL construct, affect the
    loading of both column and relationship-oriented attributes. The majority of loader
    options descend from the [`Load`](relationships.html#sqlalchemy.orm.Load "sqlalchemy.orm.Load")
    hierarchy. For a complete overview of using loader options, see the linked sections
    below.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 加载选项是一种对象，当传递给[`Select.options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.options
    "sqlalchemy.sql.expression.Select.options")方法的[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")对象或类似的 SQL 构造时，会影响列和关系属性的加载。大多数加载选项都来自于[`Load`](relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load")层次结构。有关使用加载选项的完整概述，请参阅下面的链接部分。
- en: See also
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column Loading Options](columns.html#loading-columns) - details mapper and
    loading options that affect how column and SQL-expression mapped attributes are
    loaded'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[列加载选项](columns.html#loading-columns) - 详细说明了影响列和 SQL 表达式映射属性加载方式的映射器和加载选项'
- en: '[Relationship Loading Techniques](relationships.html) - details relationship
    and loading options that affect how [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") mapped attributes are loaded'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[关系加载技术](relationships.html) - 详细说明了影响[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")映射属性加载方式的关系和加载选项'
- en: '## ORM Execution Options'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '## ORM 执行选项'
- en: ORM-level execution options are keyword options that may be associated with
    a statement execution using either the [`Session.execute.execution_options`](../session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute") parameter, which is a dictionary argument accepted
    by [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    methods such as [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") and [`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars"), or by associating them directly with the statement
    to be invoked itself using the [`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method, which accepts
    them as arbitrary keyword arguments.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 级别的执行选项是可以通过[`Session.execute.execution_options`](../session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")参数关联到语句执行的关键字选项，该参数是由[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")方法（例如[`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")和[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")）接受的字典参数，或者直接使用[`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")方法将其与要调用的语句直接关联起来，该方法接受它们作为任意关键字参数。
- en: ORM-level options are distinct from the Core level execution options documented
    at [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"). It’s important to note that
    the ORM options discussed below are **not** compatible with Core level methods
    [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") or [`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options"); the options are ignored at this
    level, even if the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is associated with the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in use.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: ORM级别的选项与Core级别的执行选项有所不同，Core级别的执行选项记录在[`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")。重要的是要注意，下面讨论的ORM选项与Core级别的方法[`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")或[`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options")**不**兼容；即使[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")与正在使用的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")关联，这些选项也会在此级别被忽略。
- en: Within this section, the [`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method style will be
    illustrated for examples.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个部分中，将展示[`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")方法的样式示例。
- en: '### Populate Existing'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '### 刷新现有对象'
- en: The `populate_existing` execution option ensures that, for all rows loaded,
    the corresponding instances in the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will be fully refreshed – erasing any existing data
    within the objects (including pending changes) and replacing with the data loaded
    from the result.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`populate_existing`执行选项确保对于加载的所有行，[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中对应的实例将完全被刷新 - 擦除对象中的任何现有数据（包括未决的更改），并用从结果加载的数据替换。'
- en: 'Example use looks like:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用法如下：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Normally, ORM objects are only loaded once, and if they are matched up to the
    primary key in a subsequent result row, the row is not applied to the object.
    This is both to preserve pending, unflushed changes on the object as well as to
    avoid the overhead and complexity of refreshing data which is already there. The
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    assumes a default working model of a highly isolated transaction, and to the degree
    that data is expected to change within the transaction outside of the local changes
    being made, those use cases would be handled using explicit steps such as this
    method.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，ORM对象只加载一次，如果它们在后续结果行中与主键匹配，则不会将该行应用于对象。这既是为了保留对象上未提交的更改，也是为了避免刷新已经存在的数据的开销和复杂性。[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")假设一个高度隔离的事务的默认工作模型，并且在事务中预期的数据发生变化程度超出正在进行的本地更改时，这些用例将使用显式步骤来处理，例如此方法。
- en: 'Using `populate_existing`, any set of objects that matches a query can be refreshed,
    and it also allows control over relationship loader options. E.g. to refresh an
    instance while also refreshing a related set of objects:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`populate_existing`，可以刷新与查询匹配的任何一组对象，并且还可以控制关系加载器选项。例如，要同时刷新一个实例和其相关对象集：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Another use case for `populate_existing` is in support of various attribute
    loading features that can change how an attribute is loaded on a per-query basis.
    Options for which this apply include:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`populate_existing`的另一个用例是支持各种属性加载功能，这些功能可以根据每个查询的情况改变如何加载属性。适用于此选项的选项包括：'
- en: The [`with_expression()`](columns.html#sqlalchemy.orm.with_expression "sqlalchemy.orm.with_expression")
    option
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`with_expression()`](columns.html#sqlalchemy.orm.with_expression "sqlalchemy.orm.with_expression")选项'
- en: The [`PropComparator.and_()`](../internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") method that can modify what a loader strategy
    loads
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PropComparator.and_()`](../internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") 方法可以修改加载器策略加载的内容'
- en: The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager "sqlalchemy.orm.contains_eager")
    option
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager "sqlalchemy.orm.contains_eager")
    选项'
- en: The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    选项'
- en: The [`load_only()`](columns.html#sqlalchemy.orm.load_only "sqlalchemy.orm.load_only")
    option to select what attributes to refresh
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`load_only()`](columns.html#sqlalchemy.orm.load_only "sqlalchemy.orm.load_only")
    选项来选择要刷新的属性'
- en: The `populate_existing` execution option is equvialent to the [`Query.populate_existing()`](query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") method in [1.x style](../../glossary.html#term-1.x-style)
    ORM queries.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`populate_existing` 执行选项相当于 [1.x 风格](../../glossary.html#term-1.x-style) ORM
    查询中的 [`Query.populate_existing()`](query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") 方法。'
- en: See also
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[I’m re-loading data with my Session but it isn’t seeing changes that I committed
    elsewhere](../../faq/sessions.html#faq-session-identity) - in [Frequently Asked
    Questions](../../faq/index.html)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[我使用 Session 重新加载数据，但它没有看到我在其他地方提交的更改](../../faq/sessions.html#faq-session-identity)
    - 在 [常见问题解答](../../faq/index.html)'
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    in the ORM [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    documentation  ### Autoflush'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新 / 过期](../session_state_management.html#session-expire) - 在 ORM [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 文档中 ### 自动刷新'
- en: 'This option, when passed as `False`, will cause the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to not invoke the “autoflush” step. It is equivalent
    to using the [`Session.no_autoflush`](../session_api.html#sqlalchemy.orm.Session.no_autoflush
    "sqlalchemy.orm.Session.no_autoflush") context manager to disable autoflush:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当作为 `False` 传递时，此选项将导致 [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 不调用 “自动刷新” 步骤。这相当于使用 [`Session.no_autoflush`](../session_api.html#sqlalchemy.orm.Session.no_autoflush
    "sqlalchemy.orm.Session.no_autoflush") 上下文管理器禁用自动刷新：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This option will also work on ORM-enabled [`Update`](../../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Delete`](../../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") queries.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项也适用于启用 ORM 的 [`Update`](../../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") 和 [`Delete`](../../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") 查询。
- en: The `autoflush` execution option is equvialent to the [`Query.autoflush()`](query.html#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush") method in [1.x style](../../glossary.html#term-1.x-style)
    ORM queries.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`autoflush` 执行选项相当于 [1.x 风格](../../glossary.html#term-1.x-style) ORM 查询中的 [`Query.autoflush()`](query.html#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush") 方法。'
- en: See also
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[Flushing](../session_basics.html#session-flushing)  ### Fetching Large Result
    Sets with Yield Per'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新](../session_basics.html#session-flushing)  ### 使用 Yield Per 获取大型结果集'
- en: The `yield_per` execution option is an integer value which will cause the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") to buffer only a limited number of rows and/or ORM
    objects at a time, before making data available to the client.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield_per` 执行选项是一个整数值，它将导致 [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 一次只缓冲有限数量的行和/或 ORM 对象，然后才将数据提供给客户端。'
- en: Normally, the ORM will fetch **all** rows immediately, constructing ORM objects
    for each and assembling those objects into a single buffer, before passing this
    buffer to the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object as a source of rows to be returned. The rationale
    for this behavior is to allow correct behavior for features such as joined eager
    loading, uniquifying of results, and the general case of result handling logic
    that relies upon the identity map maintaining a consistent state for every object
    in a result set as it is fetched.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，ORM会立即获取**所有**行，为每个行构造ORM对象，并将这些对象组装到单个缓冲区中，然后将此缓冲区作为要返回的行的来源传递给[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象。此行为的基本原理是允许对诸如联接急加载、结果唯一化以及依赖于标识映射为每个对象在结果集中被提取时保持一致状态的结果处理逻辑等功能的正确行为。
- en: The purpose of the `yield_per` option is to change this behavior so that the
    ORM result set is optimized for iteration through very large result sets (e.g.
    > 10K rows), where the user has determined that the above patterns don’t apply.
    When `yield_per` is used, the ORM will instead batch ORM results into sub-collections
    and yield rows from each sub-collection individually as the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object is iterated, so that the Python interpreter
    doesn’t need to declare very large areas of memory which is both time consuming
    and leads to excessive memory use. The option affects both the way the database
    cursor is used as well as how the ORM constructs rows and objects to be passed
    to the [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result").
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield_per`选项的目的是更改此行为，以使ORM结果集针对迭代非常大的结果集（例如> 10K行）进行了优化，其中用户已确定上述模式不适用。当使用`yield_per`时，ORM将将ORM结果批处理到子集合中，并在[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象被迭代时逐个从每个子集合中产生行，以便Python解释器无需声明非常大的内存区域，这既费时又导致内存使用过多。该选项影响数据库游标的使用方式以及ORM构造行和对象以传递给[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")的方式。'
- en: Tip
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: From the above, it follows that the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") must be consumed in an iterable fashion, that is,
    using iteration such as `for row in result` or using partial row methods such
    as [`Result.fetchmany()`](../../core/connections.html#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") or [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions"). Calling [`Result.all()`](../../core/connections.html#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all") will defeat the purpose of using `yield_per`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由上可知，[`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")必须以可迭代的方式被消耗，即使用迭代，如`for
    row in result`或使用部分行方法，如[`Result.fetchmany()`](../../core/connections.html#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany")或[`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")。调用[`Result.all()`](../../core/connections.html#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all")将失去使用`yield_per`的目的。
- en: Using `yield_per` is equivalent to making use of both the [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option, which selects
    for server side cursors to be used by the backend if supported, and the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method on the returned [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object, which establishes a fixed size of rows to
    be fetched as well as a corresponding limit to how many ORM objects will be constructed
    at once.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`yield_per`相当于同时使用[`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")执行选项，该选项选择在支持的情况下由后端使用服务器端游标，并且返回的[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象上的[`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法，该方法建立了要提取的行的固定大小以及一次构造的ORM对象的相应限制。
- en: Tip
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: '`yield_per` is now available as a Core execution option as well, described
    in detail at [Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results).
    This section details the use of `yield_per` as an execution option with an ORM
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    The option behaves as similarly as possible in both contexts.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`yield_per`也作为Core执行选项可用，详细描述在[使用服务器端游标（又名流式结果）](../../core/connections.html#engine-stream-results)。本节详细介绍了将`yield_per`作为ORM
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的执行选项的用法。该选项在两种情况下的行为尽可能相似。
- en: 'When used with the ORM, `yield_per` must be established either via the [`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method on the given
    statement or by passing it to the [`Session.execute.execution_options`](../session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute") parameter of [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") or other similar [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") method such as [`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars"). Typical use for fetching ORM objects is illustrated
    below:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当与ORM一起使用时，`yield_per`必须通过给定语句上的[`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")方法或通过将其传递给[`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")的[`Session.execute.execution_options`](../session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")参数来建立，或者通过其他类似的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")方法，例如[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")。下面是获取ORM对象的典型用法：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The above code is equivalent to the example below, which uses [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") and [`Connection.execution_options.max_row_buffer`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options") Core-level execution options
    in conjunction with the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method of [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码等同于下面的示例，该示例使用了[`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")和[`Connection.execution_options.max_row_buffer`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options") Core级别执行选项，以及[`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法的使用[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`yield_per` is also commonly used in combination with the [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") method, which will iterate rows in grouped
    partitions. The size of each partition defaults to the integer value passed to
    `yield_per`, as in the below example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield_per`也常与[`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")方法结合使用，该方法将对分组分区中的行进行迭代。每个分区的大小默认为传递给`yield_per`的整数值，如下例所示：'
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `yield_per` execution option **is not compatible** with [“subquery” eager
    loading](relationships.html#subquery-eager-loading) loading or [“joined” eager
    loading](relationships.html#joined-eager-loading) when using collections. It is
    potentially compatible with [“select in” eager loading](relationships.html#selectin-eager-loading)
    , provided the database driver supports multiple, independent cursors.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用集合时，`yield_per`执行选项**与**[“子查询”急加载](relationships.html#subquery-eager-loading)加载或[“连接”急加载](relationships.html#joined-eager-loading)**不兼容**。如果数据库驱动程序支持多个独立游标，则它可能与[“选择内”急加载](relationships.html#selectin-eager-loading)兼容。
- en: Additionally, the `yield_per` execution option is not compatible with the [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") method; as this method relies upon storing
    a complete set of identities for all rows, it would necessarily defeat the purpose
    of using `yield_per` which is to handle an arbitrarily large number of rows.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`yield_per`执行选项与[`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")方法不兼容；由于此方法依赖于为所有行存储完整的标识集，因此它必然会破坏使用`yield_per`的目的，即处理任意数量的行。
- en: 'Changed in version 1.4.6: An exception is raised when ORM rows are fetched
    from a [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object that makes use of the [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") filter, at the same time as the `yield_per`
    execution option is used.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.4.6版本更改：当从[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象中获取ORM行时，该对象使用[`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")过滤器，并同时使用`yield_per`执行选项时，会引发异常。
- en: When using the legacy [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object with [1.x style](../../glossary.html#term-1.x-style) ORM use, the [`Query.yield_per()`](query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") method will have the same result as that of
    the `yield_per` execution option.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当在[1.x风格](../../glossary.html#term-1.x-style)ORM使用遗留[`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象时，[`Query.yield_per()`](query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")方法的结果与`yield_per`执行选项相同。
- en: See also
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)  ###
    Identity Token'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（又称流式结果）](../../core/connections.html#engine-stream-results) ### 身份令牌'
- en: Deep Alchemy
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 深层魔法
- en: This option is an advanced-use feature mostly intended to be used with the [Horizontal
    Sharding](../extensions/horizontal_shard.html) extension. For typical cases of
    loading objects with identical primary keys from different “shards” or partitions,
    consider using individual [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects per shard first.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项是一个高级功能，主要用于与[水平分片](../extensions/horizontal_shard.html)扩展一起使用。对于从不同“分片”或分区加载具有相同主键的对象的典型情况，请首先考虑每个分片使用单独的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象。
- en: The “identity token” is an arbitrary value that can be associated within the
    [identity key](../../glossary.html#term-identity-key) of newly loaded objects.
    This element exists first and foremost to support extensions which perform per-row
    “sharding”, where objects may be loaded from any number of replicas of a particular
    database table that nonetheless have overlapping primary key values. The primary
    consumer of “identity token” is the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension, which supplies a general framework for persisting objects among multiple
    “shards” of a particular database table.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: “身份令牌”是可以与新加载对象的[标识键](../../glossary.html#term-identity-key)相关联的任意值。此元素首先存在于支持按行“分片”的扩展中，其中对象可以从特定数据库表的任意数量的副本加载，尽管这些副本具有重叠的主键值。
    “身份令牌”的主要消费者是[水平分片](../extensions/horizontal_shard.html)扩展，它提供了一个在特定数据库表的多个“分片”之间持久化对象的通用框架。
- en: The `identity_token` execution option may be used on a per-query basis to directly
    affect this token. Using it directly, one can populate a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with multiple instances of an object that have the same
    primary key and source table, but different “identities”.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`identity_token`执行选项可以在每个查询的基础上直接影响此令牌。直接使用它，可以为[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")填充具有相同主键和源表但具有不同“标识”的对象的多个实例。'
- en: 'One such example is to populate a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with objects that come from same-named tables in different
    schemas, using the [Translation of Schema Names](../../core/connections.html#schema-translating)
    feature which can affect the choice of schema within the scope of queries. Given
    a mapping as:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个示例是使用[翻译模式名称](../../core/connections.html#schema-translating)功能，该功能可以影响查询范围内的模式选择，从具有相同名称的表中填充[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象。给定一个映射如下：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The default “schema” name for the class above is `None`, meaning, no schema
    qualification will be written into SQL statements. However, if we make use of
    [`Connection.execution_options.schema_translate_map`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options"), mapping `None` to an alternate
    schema, we can place instances of `MyTable` into two different schemas:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 上述类的默认“模式”名称是 `None`，这意味着 SQL 语句中不会写入模式限定符。但是，如果我们使用 [`Connection.execution_options.schema_translate_map`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options")，将 `None` 映射到替代模式，我们可以将 `MyTable`
    的实例放入两个不同的模式中：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The above two blocks create a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object linked to a different schema translate map each
    time, and an instance of `MyTable` is persisted into both `test_schema.my_table`
    as well as `test_schema_2.my_table`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上述两个块分别创建了一个与不同模式映射关联的 [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 对象，并且 `MyTable` 的一个实例被持久化到了 `test_schema.my_table` 和
    `test_schema_2.my_table` 中。
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects above are independent. If we wanted to persist both objects in one transaction,
    we would need to use the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension to do this.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象是独立的。如果我们想要在一个事务中持久化这两个对象，我们需要使用 [水平分片](../extensions/horizontal_shard.html)
    扩展来实现这一点。
- en: 'However, we can illustrate querying for these objects in one session as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们可以通过一个会话来说明对这些对象的查询，如下所示：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Both `obj1` and `obj2` are distinct from each other. However, they both refer
    to primary key id 1 for the `MyTable` class, yet are distinct. This is how the
    `identity_token` comes into play, which we can see in the inspection of each object,
    where we look at `InstanceState.key` to view the two distinct identity tokens:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`obj1` 和 `obj2` 都彼此不同。但是，它们都引用了 `MyTable` 类的主键 id 1，但是是不同的。这就是 `identity_token`
    发挥作用的方式，我们可以在检查每个对象时看到，其中我们查看 `InstanceState.key` 来查看两个不同的标识令牌：'
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The above logic takes place automatically when using the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 [水平分片](../extensions/horizontal_shard.html) 扩展时，上述逻辑会自动发生。
- en: 'New in version 2.0.0rc1: - added the `identity_token` ORM level execution option.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 2.0.0rc1 中的新功能：- 添加了 `identity_token` ORM 级别的执行选项。
- en: See also
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Horizontal Sharding](../examples.html#examples-sharding) - in the [ORM Examples](../examples.html)
    section. See the script `separate_schema_translates.py` for a demonstration of
    the above use case using the full sharding API.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[水平分片](../examples.html#examples-sharding) - 在 [ORM 示例](../examples.html) 部分。请参阅脚本
    `separate_schema_translates.py`，了解如何使用完整的分片 API 进行上述用例的演示。'
- en: '#### Inspecting entities and columns from ORM-enabled SELECT and DML statements'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 检查来自启用 ORM 的 SELECT 和 DML 语句的实体和列'
- en: The [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, as well as the [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") and [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") constructs (for the latter DML constructs,
    as of SQLAlchemy 1.4.33), all support the ability to inspect the entities in which
    these statements are created against, as well as the columns and datatypes that
    would be returned in a result set.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，以及 [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")、[`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 和 [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") 构造（对于后者的 DML 构造，在 SQLAlchemy 1.4.33 中），都支持检查这些语句所针对的实体，以及将在结果集中返回的列和数据类型。'
- en: 'For a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object, this information is available from
    the [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute. This attribute
    operates in the same way as the legacy [`Query.column_descriptions`](query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") attribute. The format returned is
    a list of dictionaries:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    对象，此信息可从 [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") 属性获取。此属性的操作方式与传统的 [`Query.column_descriptions`](query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") 属性相同。返回的格式是一个字典列表：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") is used with non-ORM objects
    such as plain [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Column`](../../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects, the entries will contain basic information about individual columns returned
    in all cases:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当与非 ORM 对象一起使用 [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") 时，诸如普通 [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或 [`Column`](../../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象，条目将在所有情况下包含有关返回的各个列的基本信息：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Changed in version 1.4.33: The [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute now returns
    a value when used against a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") that is not ORM-enabled. Previously, this
    would raise `NotImplementedError`.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本 1.4.33 中进行了更改：当对非 ORM 启用的 [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 使用 [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") 属性时，现在会返回一个值。以前会引发 `NotImplementedError`。
- en: 'For [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    and [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    constructs, there are two separate attributes. One is [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") which returns information
    about the primary ORM entity and database table which the DML construct would
    be affecting:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")、[`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 和 [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") 构造，有两个单独的属性。一个是 [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description")，它返回有关 DML 构造将影响的主要
    ORM 实体和数据库表的信息：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tip
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") includes an entry `"table"`
    which is actually the **table to be inserted, updated or deleted** by the statement,
    which is **not** always the same as the SQL “selectable” to which the class may
    be mapped. For example, in a joined-table inheritance scenario, `"table"` will
    refer to the local table for the given entity.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") 包括一个条目 `"table"`，实际上是语句中将要插入、更新或删除的**表**，这并不总是与该类可能被映射到的
    SQL “selectable” 相同。例如，在连接表继承方案中，`"table"` 将引用给定实体的本地表。'
- en: 'The other is [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") which delivers
    information about the columns present in the RETURNING collection in a manner
    roughly similar to that of [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions"):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个是[`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions")，它以与[`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions")大致相似的方式提供有关 RETURNING 集合中列的信息：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'New in version 1.4.33: Added the [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") and [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") attributes.  ####
    Additional ORM API Constructs'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '版本1.4.33中的新功能：增加了[`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description")和[`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions")属性。 ####
    其他 ORM API 结构'
- en: '| Object Name | Description |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [aliased](#sqlalchemy.orm.aliased)(element[, alias, name, flat, ...]) | Produce
    an alias of the given element, usually an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instance. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| [aliased](#sqlalchemy.orm.aliased)(element[, alias, name, flat, ...]) | 生成给定元素的别名，通常是一个[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")实例。 |'
- en: '| [AliasedClass](#sqlalchemy.orm.util.AliasedClass) | Represents an “aliased”
    form of a mapped class for usage with Query. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [AliasedClass](#sqlalchemy.orm.util.AliasedClass) | 代表用于 Query 的映射类的“别名”形式。
    |'
- en: '| [AliasedInsp](#sqlalchemy.orm.util.AliasedInsp) | Provide an inspection interface
    for an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| [AliasedInsp](#sqlalchemy.orm.util.AliasedInsp) | 为[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")对象提供检查接口。 |'
- en: '| [Bundle](#sqlalchemy.orm.Bundle) | A grouping of SQL expressions that are
    returned by a [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    under one namespace. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| [Bundle](#sqlalchemy.orm.Bundle) | 一组在一个命名空间下由[`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")返回的 SQL 表达式。 |'
- en: '| [join](#sqlalchemy.orm.join)(left, right[, onclause, isouter, ...]) | Produce
    an inner join between left and right clauses. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| [join](#sqlalchemy.orm.join)(left, right[, onclause, isouter, ...]) | 生成左右子句之间的内部连接。
    |'
- en: '| [outerjoin](#sqlalchemy.orm.outerjoin)(left, right[, onclause, full]) | Produce
    a left outer join between left and right clauses. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| [outerjoin](#sqlalchemy.orm.outerjoin)(left, right[, onclause, full]) | 生成左外连接
    left 和 right 子句之间的左外连接。 |'
- en: '| [with_loader_criteria](#sqlalchemy.orm.with_loader_criteria)(entity_or_base,
    where_criteria[, loader_only, include_aliases, ...]) | Add additional WHERE criteria
    to the load for all occurrences of a particular entity. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| [with_loader_criteria](#sqlalchemy.orm.with_loader_criteria)(entity_or_base,
    where_criteria[, loader_only, include_aliases, ...]) | 为特定实体的所有出现加载添加额外的 WHERE
    条件。 |'
- en: '| [with_parent](#sqlalchemy.orm.with_parent)(instance, prop[, from_entity])
    | Create filtering criterion that relates this query’s primary entity to the given
    related instance, using established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| [with_parent](#sqlalchemy.orm.with_parent)(instance, prop[, from_entity])
    | 创建将此查询的主实体与给定相关实例相关联的过滤条件，使用已建立的[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")配置。 |'
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Produce an alias of the given element, usually an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instance.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 生成给定元素的别名，通常是一个[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")实例。
- en: 'E.g.:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased") function
    is used to create an ad-hoc mapping of a mapped class to a new selectable. By
    default, a selectable is generated from the normally mapped selectable (typically
    a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    ) using the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method. However, [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") can also be used to link the class to a new [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") statement. Also, the [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") function is a variant of [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") that is intended to specify a so-called “polymorphic
    selectable”, that corresponds to the union of several joined-inheritance subclasses
    at once.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased") 函数用于将映射类的临时映射创建为新的可选项。默认情况下，从通常的映射可选项（通常是一个[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") ）使用[`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") 方法生成可选项。但是，[`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 也可以用于将类链接到新的[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 语句。此外，[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") 函数是[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    的一个变体，旨在指定所谓的“多态可选项”，它对应于一次连接继承多个子类的联合。'
- en: For convenience, the [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    function also accepts plain [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, such as a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct. In those cases, the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method is called on the object and
    the new [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object returned. The returned [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") is not ORM-mapped in this case.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased") 函数还接受普通的[`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 构造，例如[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或 [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造。在这些情况下，对象调用[`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") 方法，并返回新的[`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") 对象。在这种情况下，返回的[`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") 未在 ORM 中映射。
- en: See also
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Entity Aliases](../../tutorial/data_select.html#tutorial-orm-entity-aliases)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 实体别名](../../tutorial/data_select.html#tutorial-orm-entity-aliases) - 在
    [SQLAlchemy 统一教程](../../tutorial/index.html#unified-tutorial) 中'
- en: '[Selecting ORM Aliases](select.html#orm-queryguide-orm-aliases) - in the [ORM
    Querying Guide](index.html)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[选择 ORM 别名](select.html#orm-queryguide-orm-aliases) - 在 [ORM 查询指南](index.html)
    中'
- en: 'Parameters:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`element` – element to be aliased. Is normally a mapped class, but for convenience
    can also be a [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") element.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element` – 要别名化的元素。通常是一个映射类，但为了方便起见，也可以是一个[`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 元素。'
- en: '`alias` – Optional selectable unit to map the element to. This is usually used
    to link the object to a subquery, and should be an aliased select construct as
    one would produce from the [`Query.subquery()`](query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") method or the [`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery") or [`Select.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") methods of the [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alias` – 可选的可选择单元，用于将元素映射到。通常用于将对象链接到子查询，并且应该是一个别名选择构造，就像从 [`Query.subquery()`](query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") 方法或 [`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery") 或 [`Select.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") 方法的 [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造产生的一样。'
- en: '`name` – optional string name to use for the alias, if not specified by the
    `alias` parameter. The name, among other things, forms the attribute name that
    will be accessible via tuples returned by a [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. Not supported when creating aliases of [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") objects.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 用于别名的可选字符串名称，如果未由 `alias` 参数指定。名称，除其他外，形成了将通过 [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象返回的元组访问的属性名称。创建 [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") 对象的别名时不支持。'
- en: '`flat` – Boolean, will be passed through to the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") call so that aliases of [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") objects will alias the individual tables inside
    the join, rather than creating a subquery. This is generally supported by all
    modern databases with regards to right-nested joins and generally produces more
    efficient queries.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flat` – 布尔值，将传递给 [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") 调用，以便 [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") 对象的别名将别名加入联接内部的各个表，而不是创建子查询。这通常由所有现代数据库支持，关于右嵌套联接通常生成更有效的查询。'
- en: '`adapt_on_names` –'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`adapt_on_names` –'
- en: 'if True, more liberal “matching” will be used when mapping the mapped columns
    of the ORM entity to those of the given selectable - a name-based match will be
    performed if the given selectable doesn’t otherwise have a column that corresponds
    to one on the entity. The use case for this is when associating an entity with
    some derived selectable such as one that uses aggregate functions:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则在将 ORM 实体的映射列与给定可选择的映射时将使用更宽松的 “匹配” - 如果给定的可选择没有与实体上的列对应的列，则将执行基于名称的匹配。此用例是将实体与某些派生的可选择相关联，例如使用聚合函数的可选择：
- en: '[PRE16]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Above, functions on `aggregated_unit_price` which refer to `.price` will return
    the `func.sum(UnitPrice.price).label('price')` column, as it is matched on the
    name “price”. Ordinarily, the “price” function wouldn’t have any “column correspondence”
    to the actual `UnitPrice.price` column as it is not a proxy of the original.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面，对 `aggregated_unit_price` 上的函数引用 `.price` 将返回 `func.sum(UnitPrice.price).label('price')`
    列，因为它与名称 “price” 匹配。通常情况下，“price” 函数不会与实际的 `UnitPrice.price` 列有任何 “列对应”，因为它不是原始的代理。
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Represents an “aliased” form of a mapped class for usage with Query.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 表示用于 Query 的映射类的“别名”形式。
- en: The ORM equivalent of a [`alias()`](../../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") construct, this object mimics the mapped class
    using a `__getattr__` scheme and maintains a reference to a real [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 等效于 [`alias()`](../../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") 构造，此对象使用 `__getattr__` 方案模拟映射类，并维护对真实 [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") 对象的引用。
- en: 'A primary purpose of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    is to serve as an alternate within a SQL statement generated by the ORM, such
    that an existing mapped entity can be used in multiple contexts. A simple example:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")的一个主要目的是在ORM生成的SQL语句中作为一个替代，以便在多个上下文中使用现有映射实体。一个简单的例子：'
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    is also capable of mapping an existing mapped class to an entirely new selectable,
    provided this selectable is column- compatible with the existing mapped selectable,
    and it can also be configured in a mapping as the target of a [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). See the links below for examples.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")还能够将现有映射类映射到一个全新的可选择项，只要这个可选择项与现有映射可选择项兼容，并且还可以在映射中配置为[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的目标。查看下面的链接以获取示例。'
- en: The [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object is constructed typically using the [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function. It also is produced with additional configuration
    when using the [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") function.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通常使用[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")函数构造[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")对象。当使用[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")函数时，还会产生附加配置。
- en: The resulting object is an instance of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass"). This object implements an attribute scheme
    which produces the same attribute and method interface as the original mapped
    class, allowing [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    to be compatible with any attribute technique which works on the original class,
    including hybrid attributes (see [Hybrid Attributes](../extensions/hybrid.html)).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 结果对象是[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")的一个实例。该对象实现了一个属性方案，产生与原始映射类相同的属性和方法接口，允许[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")与在原始类上有效的任何属性技术兼容，包括混合属性（参见[混合属性](../extensions/hybrid.html)）。
- en: 'The [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    can be inspected for its underlying [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), aliased selectable, and other information using [`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect"):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用[`inspect()`](../../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")检查[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")的基础[`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")、别名可选择和其他信息：
- en: '[PRE19]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The resulting inspection object is an instance of [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp").
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 结果检查对象是[`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")的一个实例。
- en: See also
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")'
- en: '[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic "sqlalchemy.orm.with_polymorphic")'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic "sqlalchemy.orm.with_polymorphic")'
- en: '[Relationship to Aliased Class](../join_conditions.html#relationship-aliased-class)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[与别名类的关系](../join_conditions.html#relationship-aliased-class)'
- en: '[Row-Limited Relationships with Window Functions](../join_conditions.html#relationship-to-window-function)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用窗口函数限制行关系](../join_conditions.html#relationship-to-window-function)'
- en: '**Class signature**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.orm.AliasedClass` (`sqlalchemy.inspection.Inspectable`, `sqlalchemy.orm.ORMColumnsClauseRole`)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 类`sqlalchemy.orm.AliasedClass` (`sqlalchemy.inspection.Inspectable`, `sqlalchemy.orm.ORMColumnsClauseRole`)
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Provide an inspection interface for an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") object.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 为[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")对象提供检查接口。
- en: 'The [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    object is returned given an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") using the [`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")，使用
    [`inspect()`](../../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    函数将返回 [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    对象：
- en: '[PRE21]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Attributes on [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    include:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    的属性包括:'
- en: '`entity` - the [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    represented.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entity` - 所代表的 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")。'
- en: '`mapper` - the [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    mapping the underlying class.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` - 映射底层类的 [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。'
- en: '`selectable` - the [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") construct which ultimately represents an aliased
    [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectable` - 最终表示别名的 [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") 构造或 [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造。'
- en: '`name` - the name of the alias. Also is used as the attribute name when returned
    in a result tuple from [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query").'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` - 别名的名称。 在从 [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    中返回结果元组时，也用作属性名称。'
- en: '`with_polymorphic_mappers` - collection of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects indicating all those mappers expressed in the
    select construct for the [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass").'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_polymorphic_mappers` - 表示在 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") 的 select 构造中表达的所有那些映射器的集合。'
- en: '`polymorphic_on` - an alternate column or SQL expression which will be used
    as the “discriminator” for a polymorphic load.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`polymorphic_on` - 一个替代列或 SQL 表达式，将用作多态加载的“辨别器”。'
- en: See also
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Runtime Inspection API](../../core/inspection.html)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[运行时检查 API](../../core/inspection.html)'
- en: '**Class signature**'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.orm.AliasedInsp` (`sqlalchemy.orm.ORMEntityColumnsClauseRole`,
    `sqlalchemy.orm.ORMFromClauseRole`, [`sqlalchemy.sql.cache_key.HasCacheKey`](../../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey"), [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"), `sqlalchemy.util.langhelpers.MemoizedSlots`,
    `sqlalchemy.inspection.Inspectable`, `typing.Generic`)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.orm.AliasedInsp` (`sqlalchemy.orm.ORMEntityColumnsClauseRole`,
    `sqlalchemy.orm.ORMFromClauseRole`, [`sqlalchemy.sql.cache_key.HasCacheKey`](../../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey"), [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"), `sqlalchemy.util.langhelpers.MemoizedSlots`,
    `sqlalchemy.inspection.Inspectable`, `typing.Generic`)
- en: '[PRE22]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: A grouping of SQL expressions that are returned by a [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") under one namespace.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一组由 [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 在一个命名空间下返回的
    SQL 表达式。
- en: The [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") essentially allows
    nesting of the tuple-based results returned by a column-oriented [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. It also is extensible via simple subclassing,
    where the primary capability to override is that of how the set of expressions
    should be returned, allowing post-processing as well as custom return types, without
    involving ORM identity-mapped classes.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") 本质上允许列导向的 [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象返回的基于元组的结果嵌套。 它还可以通过简单的子类化进行扩展，其中主要的重写功能是如何返回表达式集，允许后处理以及自定义返回类型，而不涉及
    ORM 标识映射的类。'
- en: See also
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Grouping Selected Attributes with Bundles](select.html#bundles)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[属性捆绑](select.html#bundles)'
- en: '**Members**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.orm.Bundle.__init__), [c](#sqlalchemy.orm.Bundle.c),
    [columns](#sqlalchemy.orm.Bundle.columns), [create_row_processor()](#sqlalchemy.orm.Bundle.create_row_processor),
    [is_aliased_class](#sqlalchemy.orm.Bundle.is_aliased_class), [is_bundle](#sqlalchemy.orm.Bundle.is_bundle),
    [is_clause_element](#sqlalchemy.orm.Bundle.is_clause_element), [is_mapper](#sqlalchemy.orm.Bundle.is_mapper),
    [label()](#sqlalchemy.orm.Bundle.label), [single_entity](#sqlalchemy.orm.Bundle.single_entity)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.orm.Bundle.__init__), [c](#sqlalchemy.orm.Bundle.c),
    [columns](#sqlalchemy.orm.Bundle.columns), [create_row_processor()](#sqlalchemy.orm.Bundle.create_row_processor),
    [is_aliased_class](#sqlalchemy.orm.Bundle.is_aliased_class), [is_bundle](#sqlalchemy.orm.Bundle.is_bundle),
    [is_clause_element](#sqlalchemy.orm.Bundle.is_clause_element), [is_mapper](#sqlalchemy.orm.Bundle.is_mapper),
    [label()](#sqlalchemy.orm.Bundle.label), [single_entity](#sqlalchemy.orm.Bundle.single_entity)'
- en: '**Class signature**'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    (`sqlalchemy.orm.ORMColumnsClauseRole`, `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    `sqlalchemy.sql.cache_key.MemoizedHasCacheKey`, `sqlalchemy.inspection.Inspectable`,
    [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"))
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") (`sqlalchemy.orm.ORMColumnsClauseRole`,
    `sqlalchemy.sql.annotation.SupportsCloneAnnotations`, `sqlalchemy.sql.cache_key.MemoizedHasCacheKey`,
    `sqlalchemy.inspection.Inspectable`, [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"))
- en: '[PRE23]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Construct a new [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle").
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的[`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")。
- en: 'e.g.:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE24]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Parameters:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – name of the bundle.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – bundle的名称。'
- en: '`*exprs` – columns or SQL expressions comprising the bundle.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*exprs` – 组成bundle的列或SQL表达式。'
- en: '`single_entity=False` – if True, rows for this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") can be returned as a “single entity” outside of any enclosing
    tuple in the same manner as a mapped entity.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`single_entity=False` – 如果为True，则此[`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")的行可以像映射实体一样在任何封闭元组之外作为“单个实体”返回。'
- en: '[PRE25]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: An alias for [`Bundle.columns`](#sqlalchemy.orm.Bundle.columns "sqlalchemy.orm.Bundle.columns").
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Bundle.columns`](#sqlalchemy.orm.Bundle.columns "sqlalchemy.orm.Bundle.columns")的别名。'
- en: '[PRE26]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: A namespace of SQL expressions referred to by this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 被此[`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")引用的SQL表达式的命名空间。
- en: 'e.g.:'
  id: totrans-168
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 例如：
- en: ''
  id: totrans-169
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-170
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE27]'
- en: ''
  id: totrans-171
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Nesting of bundles is also supported:'
  id: totrans-172
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 还支持bundle的嵌套：
- en: ''
  id: totrans-173
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-174
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE28]'
- en: See also
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Bundle.c`](#sqlalchemy.orm.Bundle.c "sqlalchemy.orm.Bundle.c")'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Bundle.c`](#sqlalchemy.orm.Bundle.c "sqlalchemy.orm.Bundle.c")'
- en: '[PRE29]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Produce the “row processing” function for this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个[`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")生成“行处理”函数。
- en: May be overridden by subclasses to provide custom behaviors when results are
    fetched. The method is passed the statement object and a set of “row processor”
    functions at query execution time; these processor functions when given a result
    row will return the individual attribute value, which can then be adapted into
    any kind of return data structure.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 可以被子类覆盖以在获取结果时提供自定义行为。该方法在查询执行时传递语句对象和一组“行处理”函数；这些处理函数在给定结果行时将返回单个属性值，然后可以将其调整为任何返回数据结构。
- en: 'The example below illustrates replacing the usual [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") return structure with a straight Python dictionary:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了用直接的Python字典替换通常的[`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row")返回结构：
- en: '[PRE30]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'A result from the above [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    will return dictionary values:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")的结果将返回字典值：
- en: '[PRE31]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: True if this object is an instance of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")的实例，则为True。
- en: '[PRE33]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: True if this object is an instance of [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle").
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")的实例，则为True。
- en: '[PRE34]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: True if this object is an instance of [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")的实例，则为True。
- en: '[PRE35]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: True if this object is an instance of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")的实例，则为True。
- en: '[PRE36]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Provide a copy of this [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    passing a new label.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个传递新标签的此[`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")的副本。
- en: '[PRE37]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: If True, queries for a single Bundle will be returned as a single entity, rather
    than an element within a keyed tuple.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则单个Bundle的查询将作为单个实体返回，而不是作为键控元组中的元素。
- en: '[PRE38]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Add additional WHERE criteria to the load for all occurrences of a particular
    entity.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 为特定实体的所有出现添加额外的WHERE条件加载。
- en: New in version 1.4.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本1.4开始新添加的功能。
- en: The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option is intended to add limiting criteria to a particular kind of entity in
    a query, **globally**, meaning it will apply to the entity as it appears in the
    SELECT query as well as within any subqueries, join conditions, and relationship
    loads, including both eager and lazy loaders, without the need for it to be specified
    in any particular part of the query. The rendering logic uses the same system
    used by single table inheritance to ensure a certain discriminator is applied
    to a table.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")选项旨在向查询中的特定类型的实体**全局**添加限制条件，这意味着它将应用于实体在SELECT查询中的出现以及在任何子查询、联接条件和关系加载中，包括急切和延迟加载器，而无需在查询的任何特定部分指定它。渲染逻辑使用与单表继承相同的系统来确保某个鉴别器应用于表。'
- en: 'E.g., using [2.0-style](../../glossary.html#term-1) queries, we can limit the
    way the `User.addresses` collection is loaded, regardless of the kind of loading
    used:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用[2.0风格](../../glossary.html#term-1)的查询，我们可以限制`User.addresses`集合的加载方式，而不管使用的加载类型如何：
- en: '[PRE39]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Above, the “selectinload” for `User.addresses` will apply the given filtering
    criteria to the WHERE clause.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例中，“selectinload”对于`User.addresses`将将给定的过滤条件应用于WHERE子句。
- en: 'Another example, where the filtering will be applied to the ON clause of the
    join, in this example using [1.x style](../../glossary.html#term-1.x-style) queries:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个示例，其中过滤将应用于联接的ON子句，在本示例中使用[1.x风格](../../glossary.html#term-1.x-style)的查询：
- en: '[PRE40]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The primary purpose of [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is to use it in the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event handler to ensure that all
    occurrences of a particular entity are filtered in a certain way, such as filtering
    for access control roles. It also can be used to apply criteria to relationship
    loads. In the example below, we can apply a certain set of rules to all queries
    emitted by a particular [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"):'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")的主要目的是在[`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件处理程序中使用它，以确保特定实体的所有出现以某种方式进行过滤，例如过滤访问控制角色。它还可用于应用于关系加载的条件。在下面的示例中，我们可以将一组特定规则应用于由特定[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")发出的所有查询：'
- en: '[PRE41]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In the above example, the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event will intercept all queries
    emitted using the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    For those queries which are SELECT statements and are not attribute or relationship
    loads a custom [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option is added to the query. The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option will be used in the given statement
    and will also be automatically propagated to all relationship loads that descend
    from this query.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，[`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件将拦截使用[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")发出的所有查询。对于那些是SELECT语句且不是属性或关系加载的查询，会向查询添加自定义的[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项。[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项将在给定的语句中使用，并将自动传播到所有从此查询下降的关系加载。
- en: The criteria argument given is a `lambda` that accepts a `cls` argument. The
    given class will expand to include all mapped subclass and need not itself be
    a mapped class.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的criteria参数是一个接受`cls`参数的`lambda`。给定的类将扩展为包括所有映射的子类，而且本身不必是一个映射的类。
- en: Tip
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: When using [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option in conjunction with the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") loader option, it’s important to note that [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") only affects the part of the query that
    determines what SQL is rendered in terms of the WHERE and FROM clauses. The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option does not affect the rendering of the SELECT
    statement outside of the columns clause, so does not have any interaction with
    the [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option. However, the way things “work” is that [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") is meant to be used with a query that is already
    selecting from the additional entities in some way, where [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") can apply it’s additional criteria.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当与[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager "sqlalchemy.orm.contains_eager")加载选项一起使用[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项时，重要的是要注意[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")仅影响确定渲染的 SQL 的查询部分，涉及 WHERE 和 FROM 子句。[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")选项不会影响 SELECT 语句的渲染，除了列子句外，因此与[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项没有任何交互。然而，“工作”的方式是，[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")应该与某种方式已经从其他实体进行选择的查询一起使用，其中[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")可以应用其附加条件。
- en: 'In the example below, assuming a mapping relationship as `A -> A.bs -> B`,
    the given [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option will affect the way in which the JOIN is rendered:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的例子中，假设有一个映射关系如`A -> A.bs -> B`，给定的[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项将影响 JOIN 的渲染方式：
- en: '[PRE42]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Above, the given [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option will affect the ON clause of the
    JOIN that is specified by `.join(A.bs)`, so is applied as expected. The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option has the effect that columns from `B` are
    added to the columns clause:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，给定的[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")选项将影响由`.join(A.bs)`指定的
    JOIN 的 ON 子句，因此会按预期应用。[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")选项的效果是从`B`中添加列到列子句中：
- en: '[PRE43]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The use of the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option within the above statement has no effect
    on the behavior of the [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option. If the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option were omitted, the SQL would be the same
    as regards the FROM and WHERE clauses, where [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") continues to add its criteria to the ON
    clause of the JOIN. The addition of [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") only affects the columns clause, in that additional
    columns against `b` are added which are then consumed by the ORM to produce `B`
    instances.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述语句中使用[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")选项对[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项的行为没有影响。如果省略[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")选项，则 SQL 与 FROM 和 WHERE 子句的行为相同，其中[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")继续将其条件添加到 JOIN 的 ON 子句中。[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")的添加仅影响列子句，其中会添加针对`b`的额外列，然后 ORM 会使用它们生成`B`实例。
- en: Warning
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The use of a lambda inside of the call to [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is only invoked **once per unique class**.
    Custom functions should not be invoked within this lambda. See [Using Lambdas
    to add significant speed gains to statement production](../../core/connections.html#engine-lambda-caching)
    for an overview of the “lambda SQL” feature, which is for advanced use only.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在对[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")的调用中使用lambda表达式仅在**每个唯一类**中调用一次。自定义函数不应在此lambda内部调用。有关“lambda
    SQL”功能的概述，请参阅[使用Lambda将显著提速到语句生成](../../core/connections.html#engine-lambda-caching)，该功能仅供高级用户使用。
- en: 'Parameters:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`entity_or_base` – a mapped class, or a class that is a super class of a particular
    set of mapped classes, to which the rule will apply.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entity_or_base` - 映射类，或者一组特定映射类的超类，适用于规则的对象。'
- en: '`where_criteria` –'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`where_criteria` -'
- en: a Core SQL expression that applies limiting criteria. This may also be a “lambda:”
    or Python function that accepts a target class as an argument, when the given
    class is a base with many different mapped subclasses.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用限制条件的核心SQL表达式。这也可以是一个接受目标类作为参数的“lambda:”或Python函数，当给定类是一个具有许多不同映射子类的基类时。
- en: Note
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: To support pickling, use a module-level Python function to produce the SQL expression
    instead of a lambda or a fixed SQL expression, which tend to not be picklable.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了支持pickle，使用模块级Python函数生成SQL表达式，而不是lambda或固定的SQL表达式，后者往往不能pickle化。
- en: '`include_aliases` – if True, apply the rule to [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") constructs as well.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_aliases` - 如果为True，则将规则应用于[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")构造。'
- en: '`propagate_to_loaders` –'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propagate_to_loaders` -'
- en: defaults to True, apply to relationship loaders such as lazy loaders. This indicates
    that the option object itself including SQL expression is carried along with each
    loaded instance. Set to `False` to prevent the object from being assigned to individual
    instances.
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为True，适用于关系加载器，如延迟加载器。这表示选项对象本身包括SQL表达式随每个加载的实例一起传递。将其设置为`False`可防止将对象分配给单个实例。
- en: See also
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[ORM Query Events](../examples.html#examples-session-orm-events) - includes
    examples of using [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria").'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM查询事件](../examples.html#examples-session-orm-events) - 包含使用[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")的示例。'
- en: '[Adding global WHERE / ON criteria](../session_events.html#do-orm-execute-global-criteria)
    - basic example on how to combine [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") with the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event.'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[添加全局 WHERE / ON 条件](../session_events.html#do-orm-execute-global-criteria)
    - 结合[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")和[`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件的基本示例。'
- en: '`track_closure_variables` –'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`track_closure_variables` -'
- en: when False, closure variables inside of a lambda expression will not be used
    as part of any cache key. This allows more complex expressions to be used inside
    of a lambda expression but requires that the lambda ensures it returns the identical
    SQL every time given a particular class.
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为False时，lambda表达式内部的闭包变量将不会作为任何缓存键的一部分使用。这允许在lambda表达式内部使用更复杂的表达式，但要求lambda确保每次给定特定类时都返回相同的SQL。
- en: New in version 1.4.0b2.
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新功能于版本1.4.0b2中添加。
- en: '[PRE44]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Produce an inner join between left and right clauses.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 生成左右子句之间的内部连接。
- en: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") is an extension to the
    core join interface provided by [`join()`](../../core/selectable.html#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join"), where the left and right selectable may be
    not only core selectable objects such as [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), but also mapped classes or [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instances. The “on” clause can be a SQL expression
    or an ORM mapped attribute referencing a configured [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") 是对核心连接接口的扩展，由 [`join()`](../../core/selectable.html#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join") 提供，其中左右可选择的对象不仅可以是核心可选择的对象，如 [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，还可以是映射类或 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") 实例。 “on” 子句可以是 SQL 表达式，也可以是引用已配置的 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 的 ORM 映射属性。'
- en: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") is not commonly needed
    in modern usage, as its functionality is encapsulated within that of the [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Query.join()`](query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") methods. which feature a significant amount of automation
    beyond [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") by itself. Explicit
    use of [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") with ORM-enabled
    SELECT statements involves use of the [`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method, as in:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代用法中，通常不常需要 [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")，因为其功能已封装在
    [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") 和 [`Query.join()`](query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 方法中。 这些方法除了 [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")
    本身之外，还具有大量的自动化功能。 使用 ORM 启用的 SELECT 语句显式使用 [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")
    涉及使用 [`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 方法，如下所示：
- en: '[PRE45]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In modern SQLAlchemy the above join can be written more succinctly as:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代的 SQLAlchemy 中，上述连接可以更简洁地编写为：
- en: '[PRE46]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Warning
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: using [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") directly may not
    work properly with modern ORM options such as [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria"). It is strongly recommended to use the
    idiomatic join patterns provided by methods such as [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Select.join_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from") when creating ORM joins.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 直接使用 [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") 可能无法正确地处理现代 ORM
    选项，例如 [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")。
    强烈建议在创建 ORM 连接时使用像 [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") 和 [`Select.join_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from") 这样的方法提供的惯用连接模式。
- en: See also
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Joins](select.html#orm-queryguide-joins) - in the [ORM Querying Guide](index.html)
    for background on idiomatic ORM join patterns'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '[连接](select.html#orm-queryguide-joins) - 在[ORM 查询指南](index.html)中了解惯用的 ORM
    连接模式的背景'
- en: '[PRE47]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Produce a left outer join between left and right clauses.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧和右侧子句之间生成左外连接。
- en: This is the “outer join” version of the [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")
    function, featuring the same behavior except that an OUTER JOIN is generated.
    See that function’s documentation for other usage details.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") 函数的“外连接”版本，具有相同的行为，除了生成
    OUTER JOIN 外，还生成了其他用法详细信息，请参阅该函数的文档。
- en: '[PRE48]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Create filtering criterion that relates this query’s primary entity to the given
    related instance, using established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 创建将此查询的主要实体与给定的相关实例相关联的过滤标准，使用已建立的 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 配置。
- en: 'E.g.:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE49]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: The SQL rendered is the same as that rendered when a lazy loader would fire
    off from the given parent on that attribute, meaning that the appropriate state
    is taken from the parent object in Python without the need to render joins to
    the parent table in the rendered statement.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染的 SQL 与在给定父项上从该属性触发延迟加载时呈现的 SQL 相同，这意味着在 Python 中从父对象获取适当的状态而无需在呈现的语句中渲染对父表的连接。
- en: 'The given property may also make use of [`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") to indicate the left side of the criteria:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的属性还可以使用 [`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") 来指示条件的左侧：
- en: '[PRE50]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The above use is equivalent to using the `from_entity()` argument:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 上述用法相当于使用 `from_entity()` 参数：
- en: '[PRE51]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Parameters:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – An instance which has some [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 具有某些 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 的实例。'
- en: '`property` – Class-bound attribute, which indicates what relationship from
    the instance should be used to reconcile the parent/child relationship.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`property` – 类绑定的属性，指示应使用哪个实例的关系来协调父/子关系。'
- en: '`from_entity` –'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from_entity` –'
- en: Entity in which to consider as the left side. This defaults to the “zero” entity
    of the [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query") itself.
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要考虑为左侧的实体。默认为 [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    本身的“零”实体。
- en: New in version 1.2.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1.2 版中的新内容。
- en: ORM Loader Options
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ORM Loader 选项
- en: Loader options are objects which, when passed to the [`Select.options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.options
    "sqlalchemy.sql.expression.Select.options") method of a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object or similar SQL construct, affect the
    loading of both column and relationship-oriented attributes. The majority of loader
    options descend from the [`Load`](relationships.html#sqlalchemy.orm.Load "sqlalchemy.orm.Load")
    hierarchy. For a complete overview of using loader options, see the linked sections
    below.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: Loader 选项是对象，当传递给 [`Select.options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.options
    "sqlalchemy.sql.expression.Select.options") 方法时，影响了 [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 对象或类似的 SQL 结构的列和关系属性的加载。大多数 loader 选项都来自 [`Load`](relationships.html#sqlalchemy.orm.Load
    "sqlalchemy.orm.Load") 层次结构。有关使用 loader 选项的完整概述，请参阅下面的链接部分。
- en: See also
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Column Loading Options](columns.html#loading-columns) - details mapper and
    loading options that affect how column and SQL-expression mapped attributes are
    loaded'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[列加载选项](columns.html#loading-columns) - 详细介绍了影响如何加载列和 SQL 表达式映射属性的映射和加载选项'
- en: '[Relationship Loading Techniques](relationships.html) - details relationship
    and loading options that affect how [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") mapped attributes are loaded'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[关系加载技术](relationships.html) - 详细介绍了影响如何加载 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 映射属性的关系和加载选项'
- en: '## ORM Execution Options'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '## ORM 执行选项'
- en: ORM-level execution options are keyword options that may be associated with
    a statement execution using either the [`Session.execute.execution_options`](../session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute") parameter, which is a dictionary argument accepted
    by [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    methods such as [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") and [`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars"), or by associating them directly with the statement
    to be invoked itself using the [`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method, which accepts
    them as arbitrary keyword arguments.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: ORM级别的执行选项是关键字选项，可以通过[`Session.execute.execution_options`](../session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")参数与语句执行关联，该参数是由[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")方法（如[`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")和[`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars")）接受的字典参数，或者直接通过[`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")方法将它们与要调用的语句直接关联，该方法将它们作为任意关键字参数接受。
- en: ORM-level options are distinct from the Core level execution options documented
    at [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"). It’s important to note that
    the ORM options discussed below are **not** compatible with Core level methods
    [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") or [`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options"); the options are ignored at this
    level, even if the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is associated with the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in use.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: ORM级别的选项与[`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")中记录的核心级别执行选项不同。需要注意的是，下面讨论的ORM选项与核心级别方法[`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")或[`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options") **不**兼容；即使[`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine")或[`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection")与正在使用的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")相关联，这些选项在此级别将被忽略。
- en: Within this section, the [`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method style will be
    illustrated for examples.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，将演示[`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")方法的样式示例。
- en: '### Populate Existing'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '### 刷新现有数据'
- en: The `populate_existing` execution option ensures that, for all rows loaded,
    the corresponding instances in the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will be fully refreshed – erasing any existing data
    within the objects (including pending changes) and replacing with the data loaded
    from the result.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`populate_existing`执行选项确保对于加载的所有行，[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中对应的实例将被完全刷新 - 擦除对象中的任何现有数据（包括待定更改）并用从结果加载的数据替换。'
- en: 'Example use looks like:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用法如下：
- en: '[PRE52]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Normally, ORM objects are only loaded once, and if they are matched up to the
    primary key in a subsequent result row, the row is not applied to the object.
    This is both to preserve pending, unflushed changes on the object as well as to
    avoid the overhead and complexity of refreshing data which is already there. The
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    assumes a default working model of a highly isolated transaction, and to the degree
    that data is expected to change within the transaction outside of the local changes
    being made, those use cases would be handled using explicit steps such as this
    method.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，ORM 对象只加载一次，如果它们与后续结果行中的主键匹配，则不会将该行应用于对象。这既是为了保留对象上未决的未刷新更改，也是为了避免刷新已经存在的数据的开销和复杂性。
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    假定高度隔离的事务的默认工作模型，并且在预期事务内部的数据发生更改的程度上，会使用明确的步骤来处理那些使用情况，而不是正在进行的本地更改。
- en: 'Using `populate_existing`, any set of objects that matches a query can be refreshed,
    and it also allows control over relationship loader options. E.g. to refresh an
    instance while also refreshing a related set of objects:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `populate_existing`，可以刷新与查询匹配的任何一组对象，并且还可以控制关系加载器选项。例如，刷新一个实例同时也刷新相关的一组对象：
- en: '[PRE53]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Another use case for `populate_existing` is in support of various attribute
    loading features that can change how an attribute is loaded on a per-query basis.
    Options for which this apply include:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`populate_existing` 的另一个用例是支持各种属性加载功能，这些功能可以根据每个查询的情况改变属性的加载方式。适用于此选项的选项包括：'
- en: The [`with_expression()`](columns.html#sqlalchemy.orm.with_expression "sqlalchemy.orm.with_expression")
    option
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`with_expression()`](columns.html#sqlalchemy.orm.with_expression "sqlalchemy.orm.with_expression")
    选项'
- en: The [`PropComparator.and_()`](../internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") method that can modify what a loader strategy
    loads
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PropComparator.and_()`](../internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") 方法可以修改加载器策略加载的内容'
- en: The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager "sqlalchemy.orm.contains_eager")
    option
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager "sqlalchemy.orm.contains_eager")
    选项'
- en: The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    选项'
- en: The [`load_only()`](columns.html#sqlalchemy.orm.load_only "sqlalchemy.orm.load_only")
    option to select what attributes to refresh
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`load_only()`](columns.html#sqlalchemy.orm.load_only "sqlalchemy.orm.load_only")
    选项以选择要刷新的属性'
- en: The `populate_existing` execution option is equvialent to the [`Query.populate_existing()`](query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") method in [1.x style](../../glossary.html#term-1.x-style)
    ORM queries.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`populate_existing` 执行选项等效于 [1.x 风格](../../glossary.html#term-1.x-style) ORM
    查询中的 [`Query.populate_existing()`](query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") 方法。'
- en: See also
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[I’m re-loading data with my Session but it isn’t seeing changes that I committed
    elsewhere](../../faq/sessions.html#faq-session-identity) - in [Frequently Asked
    Questions](../../faq/index.html)'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '[我正在使用我的 Session 重新加载数据，但它没有看到我在其他地方提交的更改](../../faq/sessions.html#faq-session-identity)
    - 在[常见问题解答](../../faq/index.html)中'
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    in the ORM [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    documentation  ### Autoflush'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新/过期](../session_state_management.html#session-expire) - 在 ORM [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 文档中 ### 自动刷新'
- en: 'This option, when passed as `False`, will cause the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to not invoke the “autoflush” step. It is equivalent
    to using the [`Session.no_autoflush`](../session_api.html#sqlalchemy.orm.Session.no_autoflush
    "sqlalchemy.orm.Session.no_autoflush") context manager to disable autoflush:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递此选项为 `False` 时，将导致 [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 不调用“自动刷新”步骤。这相当于使用 [`Session.no_autoflush`](../session_api.html#sqlalchemy.orm.Session.no_autoflush
    "sqlalchemy.orm.Session.no_autoflush") 上下文管理器来禁用自动刷新：
- en: '[PRE54]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: This option will also work on ORM-enabled [`Update`](../../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Delete`](../../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") queries.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项还可用于启用 ORM 的 [`Update`](../../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") 和 [`Delete`](../../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") 查询。
- en: The `autoflush` execution option is equvialent to the [`Query.autoflush()`](query.html#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush") method in [1.x style](../../glossary.html#term-1.x-style)
    ORM queries.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`autoflush` 执行选项相当于 [1.x 风格](../../glossary.html#term-1.x-style) ORM 查询中的 [`Query.autoflush()`](query.html#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush") 方法。'
- en: See also
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Flushing](../session_basics.html#session-flushing)  ### Fetching Large Result
    Sets with Yield Per'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新](../session_basics.html#session-flushing)  ### 使用 Yield Per 获取大型结果集'
- en: The `yield_per` execution option is an integer value which will cause the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") to buffer only a limited number of rows and/or ORM
    objects at a time, before making data available to the client.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield_per` 执行选项是一个整数值，它将导致 [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 一次仅缓冲有限数量的行和/或 ORM 对象，然后将数据提供给客户端。'
- en: Normally, the ORM will fetch **all** rows immediately, constructing ORM objects
    for each and assembling those objects into a single buffer, before passing this
    buffer to the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object as a source of rows to be returned. The rationale
    for this behavior is to allow correct behavior for features such as joined eager
    loading, uniquifying of results, and the general case of result handling logic
    that relies upon the identity map maintaining a consistent state for every object
    in a result set as it is fetched.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，ORM 会立即获取**所有**行，为每个构造 ORM 对象，并将这些对象组装到一个单一的缓冲区中，然后将该缓冲区作为行的来源传递给 [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象以返回。此行为的理由是允许正确处理诸如联接急加载、结果唯一化以及依赖于标识映射在每个对象在被提取时保持一致状态的结果处理逻辑等功能的情况。
- en: The purpose of the `yield_per` option is to change this behavior so that the
    ORM result set is optimized for iteration through very large result sets (e.g.
    > 10K rows), where the user has determined that the above patterns don’t apply.
    When `yield_per` is used, the ORM will instead batch ORM results into sub-collections
    and yield rows from each sub-collection individually as the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object is iterated, so that the Python interpreter
    doesn’t need to declare very large areas of memory which is both time consuming
    and leads to excessive memory use. The option affects both the way the database
    cursor is used as well as how the ORM constructs rows and objects to be passed
    to the [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result").
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield_per` 选项的目的是更改此行为，使得 ORM 结果集针对迭代大型结果集（例如 > 10K 行）进行了优化，用户已确定上述模式不适用的情况。当使用
    `yield_per` 时，ORM 将会将 ORM 结果批量成子集合，并在迭代 [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象时单独从每个子集合中产生行，这样 Python 解释器就不需要声明非常大的内存区域，这既耗时又导致内存使用过多。该选项既影响数据库游标的使用方式，也影响
    ORM 构造要传递给 [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    的行和对象的方式。'
- en: Tip
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: From the above, it follows that the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") must be consumed in an iterable fashion, that is,
    using iteration such as `for row in result` or using partial row methods such
    as [`Result.fetchmany()`](../../core/connections.html#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") or [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions"). Calling [`Result.all()`](../../core/connections.html#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all") will defeat the purpose of using `yield_per`.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 由上可见，[`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    必须以可迭代的方式消耗，即使用诸如 `for row in result` 的迭代或使用部分行方法，如 [`Result.fetchmany()`](../../core/connections.html#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") 或 [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")。调用 [`Result.all()`](../../core/connections.html#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all") 将失去使用 `yield_per` 的目的。
- en: Using `yield_per` is equivalent to making use of both the [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option, which selects
    for server side cursors to be used by the backend if supported, and the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method on the returned [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object, which establishes a fixed size of rows to
    be fetched as well as a corresponding limit to how many ORM objects will be constructed
    at once.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`yield_per`等同于同时利用[`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options")执行选项，该选项在支持的情况下选择使用后端的服务器端游标，并且在返回的[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象上使用[`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法，该方法建立了要获取的行的固定大小以及一次构建多少个ORM对象的相应限制。
- en: Tip
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: '`yield_per` is now available as a Core execution option as well, described
    in detail at [Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results).
    This section details the use of `yield_per` as an execution option with an ORM
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    The option behaves as similarly as possible in both contexts.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield_per`现在也作为Core执行选项可用，详细描述在[使用服务器端游标（即流式结果）](../../core/connections.html#engine-stream-results)。本节详细介绍了将`yield_per`作为ORM
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")的执行选项的用法。该选项在两种情境下尽可能相似地行为。'
- en: 'When used with the ORM, `yield_per` must be established either via the [`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method on the given
    statement or by passing it to the [`Session.execute.execution_options`](../session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute") parameter of [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") or other similar [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") method such as [`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars"). Typical use for fetching ORM objects is illustrated
    below:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在与ORM一起使用时，`yield_per`必须通过给定语句上的[`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options")方法或通过将其传递给[`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute")或其他类似[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")方法的[`Session.execute.execution_options`](../session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute")参数来建立。获取ORM对象的典型用法如下所示：
- en: '[PRE55]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The above code is equivalent to the example below, which uses [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") and [`Connection.execution_options.max_row_buffer`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options") Core-level execution options
    in conjunction with the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method of [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"):'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码等同于下面的示例，该示例使用[`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options")和[`Connection.execution_options.max_row_buffer`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options") Core级别的执行选项，与[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")的[`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per")方法一起使用：
- en: '[PRE56]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '`yield_per` is also commonly used in combination with the [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") method, which will iterate rows in grouped
    partitions. The size of each partition defaults to the integer value passed to
    `yield_per`, as in the below example:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield_per`通常与[`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")方法结合使用，该方法将迭代分组分区中的行。每个分区的大小默认为传递给`yield_per`的整数值，如下例所示：'
- en: '[PRE57]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The `yield_per` execution option **is not compatible** with [“subquery” eager
    loading](relationships.html#subquery-eager-loading) loading or [“joined” eager
    loading](relationships.html#joined-eager-loading) when using collections. It is
    potentially compatible with [“select in” eager loading](relationships.html#selectin-eager-loading)
    , provided the database driver supports multiple, independent cursors.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用集合时，`yield_per`执行选项与[“子查询”急加载](relationships.html#subquery-eager-loading)或[“连接”急加载](relationships.html#joined-eager-loading)不兼容。对于[“select
    in”急加载](relationships.html#selectin-eager-loading)，只要数据库驱动程序支持多个独立游标，它就可能与之兼容。
- en: Additionally, the `yield_per` execution option is not compatible with the [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") method; as this method relies upon storing
    a complete set of identities for all rows, it would necessarily defeat the purpose
    of using `yield_per` which is to handle an arbitrarily large number of rows.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，`yield_per`执行选项与[`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")方法不兼容；由于此方法依赖于存储所有行的完整标识集，它必然会破坏使用`yield_per`的目的，即处理任意数量的行。
- en: 'Changed in version 1.4.6: An exception is raised when ORM rows are fetched
    from a [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object that makes use of the [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") filter, at the same time as the `yield_per`
    execution option is used.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.4.6版本更改：当从使用[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象获取ORM行时，如果同时使用了[`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")过滤器和`yield_per`执行选项，则会引发异常。
- en: When using the legacy [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object with [1.x style](../../glossary.html#term-1.x-style) ORM use, the [`Query.yield_per()`](query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") method will have the same result as that of
    the `yield_per` execution option.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用旧版 [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 对象和
    [1.x 样式](../../glossary.html#term-1.x-style) ORM 时，[`Query.yield_per()`](query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") 方法的结果与`yield_per`执行选项的结果相同。
- en: See also
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)  ###
    Identity Token'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（又名流式结果）](../../core/connections.html#engine-stream-results) ### 标识令牌'
- en: Deep Alchemy
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 深度炼金术
- en: This option is an advanced-use feature mostly intended to be used with the [Horizontal
    Sharding](../extensions/horizontal_shard.html) extension. For typical cases of
    loading objects with identical primary keys from different “shards” or partitions,
    consider using individual [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects per shard first.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项是一个高级特性，主要用于与[水平分片](../extensions/horizontal_shard.html)扩展一起使用。对于从不同“分片”或分区加载具有相同主键的对象的典型情况，请首先考虑每个分片使用单独的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象。
- en: The “identity token” is an arbitrary value that can be associated within the
    [identity key](../../glossary.html#term-identity-key) of newly loaded objects.
    This element exists first and foremost to support extensions which perform per-row
    “sharding”, where objects may be loaded from any number of replicas of a particular
    database table that nonetheless have overlapping primary key values. The primary
    consumer of “identity token” is the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension, which supplies a general framework for persisting objects among multiple
    “shards” of a particular database table.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: “标识令牌”是一个任意值，可以与新加载对象的[标识键](../../glossary.html#term-identity-key)相关联。这个元素首先存在于支持每行“分片”的扩展中，其中对象可以从特定数据库表的任意数量的副本中加载，尽管这些副本具有重叠的主键值。
    “标识令牌”的主要消费者是[Horizontal Sharding](../extensions/horizontal_shard.html)扩展，它提供了一个��用框架，用于在特定数据库表的多个“分片”之间持久化对象。
- en: The `identity_token` execution option may be used on a per-query basis to directly
    affect this token. Using it directly, one can populate a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with multiple instances of an object that have the same
    primary key and source table, but different “identities”.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`identity_token`执行选项可以在每个查询基础上直接影响此令牌的使用。直接使用它，可以将一个对象的多个实例填充到[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中，这些实例具有相同的主键和源表，但具有不同的“标识”。'
- en: 'One such example is to populate a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with objects that come from same-named tables in different
    schemas, using the [Translation of Schema Names](../../core/connections.html#schema-translating)
    feature which can affect the choice of schema within the scope of queries. Given
    a mapping as:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 一个这样的例子是使用[Schema名称翻译](../../core/connections.html#schema-translating)功能，该功能可以影响查询范围内的模式选择，从而将来自不同模式的同名表中的对象填充到[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")中。给定一个映射如下：
- en: '[PRE58]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The default “schema” name for the class above is `None`, meaning, no schema
    qualification will be written into SQL statements. However, if we make use of
    [`Connection.execution_options.schema_translate_map`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options"), mapping `None` to an alternate
    schema, we can place instances of `MyTable` into two different schemas:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 上述类的默认“模式”名称为`None`，意味着不会将模式限定写入SQL语句中。然而，如果我们利用[`Connection.execution_options.schema_translate_map`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options")，将`None`映射到替代模式，我们可以将`MyTable`的实例放入两个不同的模式中：
- en: '[PRE59]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The above two blocks create a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object linked to a different schema translate map each
    time, and an instance of `MyTable` is persisted into both `test_schema.my_table`
    as well as `test_schema_2.my_table`.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 上述两个块每次创建一个与不同模式转换映射相关联的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象，并将`MyTable`的实例持久化到`test_schema.my_table`和`test_schema_2.my_table`中。
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects above are independent. If we wanted to persist both objects in one transaction,
    we would need to use the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension to do this.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象是独立的。如果我们想要在一个事务中持久化这两个对象，我们需要使用[Horizontal
    Sharding](../extensions/horizontal_shard.html)扩展来实现。
- en: 'However, we can illustrate querying for these objects in one session as follows:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以在一个会话中演示查询这些对象的方法如下：
- en: '[PRE60]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Both `obj1` and `obj2` are distinct from each other. However, they both refer
    to primary key id 1 for the `MyTable` class, yet are distinct. This is how the
    `identity_token` comes into play, which we can see in the inspection of each object,
    where we look at `InstanceState.key` to view the two distinct identity tokens:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`obj1`和`obj2`彼此不同。然而，它们都指向`MyTable`类的主键id 1，但是它们是不同的。这就是`identity_token`发挥作用的地方，我们可以在每个对象的检查中看到它，在那里我们查看`InstanceState.key`以查看这两个不同的标识令牌：'
- en: '[PRE61]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The above logic takes place automatically when using the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用[Horizontal Sharding](../extensions/horizontal_shard.html)扩展时，上述逻辑会自动发生。
- en: 'New in version 2.0.0rc1: - added the `identity_token` ORM level execution option.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 2.0.0rc1版本中的新功能：- 添加了`identity_token`ORM级别执行选项。
- en: See also
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Horizontal Sharding](../examples.html#examples-sharding) - in the [ORM Examples](../examples.html)
    section. See the script `separate_schema_translates.py` for a demonstration of
    the above use case using the full sharding API.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '[水平分片](../examples.html#examples-sharding) - 在 [ORM 示例](../examples.html) 部分。请参阅脚本
    `separate_schema_translates.py`，了解使用完整分片 API 进行上述用例演示。'
- en: '#### Inspecting entities and columns from ORM-enabled SELECT and DML statements'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 检查启用 ORM 的 SELECT 和 DML 语句中的实体和列'
- en: The [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, as well as the [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") and [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") constructs (for the latter DML constructs,
    as of SQLAlchemy 1.4.33), all support the ability to inspect the entities in which
    these statements are created against, as well as the columns and datatypes that
    would be returned in a result set.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    结构以及 [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")、[`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 和 [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") 结构（自 SQLAlchemy 1.4.33 起，对于后三个 DML 结构）都支持检查这些语句所针对的实体，以及结果集中将返回的列和数据类型。'
- en: 'For a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object, this information is available from
    the [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute. This attribute
    operates in the same way as the legacy [`Query.column_descriptions`](query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") attribute. The format returned is
    a list of dictionaries:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    对象，此信息可以从 [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") 属性获取。该属性的操作方式与传统的 [`Query.column_descriptions`](query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") 属性相同。返回的格式是一个字典列表：
- en: '[PRE62]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'When [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") is used with non-ORM objects
    such as plain [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Column`](../../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects, the entries will contain basic information about individual columns returned
    in all cases:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 当与非 ORM 对象（如普通的 [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    或 [`Column`](../../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    对象）一起使用 [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") 时，所有情况下都会包含有关返回的各个列的基本信息：
- en: '[PRE63]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Changed in version 1.4.33: The [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute now returns
    a value when used against a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") that is not ORM-enabled. Previously, this
    would raise `NotImplementedError`.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 自 1.4.33 版更改：当对未启用 ORM 的 [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 使用 [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") 属性时，现在会返回一个值。之前会引发 `NotImplementedError`。
- en: 'For [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    and [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    constructs, there are two separate attributes. One is [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") which returns information
    about the primary ORM entity and database table which the DML construct would
    be affecting:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")、[`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")和[`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")构造，存在两个单独的属性。一个是[`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description")，它返回关于DML构造将影响的主ORM实体和数据库表的信息：
- en: '[PRE64]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Tip
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") includes an entry `"table"`
    which is actually the **table to be inserted, updated or deleted** by the statement,
    which is **not** always the same as the SQL “selectable” to which the class may
    be mapped. For example, in a joined-table inheritance scenario, `"table"` will
    refer to the local table for the given entity.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description")包括一个条目`"table"`，实际上是由语句插入、更新或删除的**表**，这与类可能映射到的SQL“selectable”不一定相同。例如，在连接表继承场景中，`"table"`将引用给定实体的本地表。'
- en: 'The other is [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") which delivers
    information about the columns present in the RETURNING collection in a manner
    roughly similar to that of [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions"):'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个是[`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions")，它以与[`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions")大致相似的方式提供了与RETURNING集合中存在的列有关的信息：
- en: '[PRE65]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'New in version 1.4.33: Added the [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") and [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") attributes.  ####
    Additional ORM API Constructs'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '新版本1.4.33中增加了[`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description")和[`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions")属性。  ####
    额外的 ORM API 构造'
- en: '| Object Name | Description |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [aliased](#sqlalchemy.orm.aliased)(element[, alias, name, flat, ...]) | Produce
    an alias of the given element, usually an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instance. |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| [aliased](#sqlalchemy.orm.aliased)(element[, alias, name, flat, ...]) | 生成给定元素的别名，通常是[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")实例。 |'
- en: '| [AliasedClass](#sqlalchemy.orm.util.AliasedClass) | Represents an “aliased”
    form of a mapped class for usage with Query. |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| [AliasedClass](#sqlalchemy.orm.util.AliasedClass) | 代表用于Query的映射类的“别名”形式。
    |'
- en: '| [AliasedInsp](#sqlalchemy.orm.util.AliasedInsp) | Provide an inspection interface
    for an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object. |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| [AliasedInsp](#sqlalchemy.orm.util.AliasedInsp) | 为[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")对象提供检查接口。 |'
- en: '| [Bundle](#sqlalchemy.orm.Bundle) | A grouping of SQL expressions that are
    returned by a [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    under one namespace. |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| [Bundle](#sqlalchemy.orm.Bundle) | 将由[`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")返回的SQL表达式分组到一个命名空间下。 |'
- en: '| [join](#sqlalchemy.orm.join)(left, right[, onclause, isouter, ...]) | Produce
    an inner join between left and right clauses. |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| [join](#sqlalchemy.orm.join)(left, right[, onclause, isouter, ...]) | 生成左右子句之间的内连接。
    |'
- en: '| [outerjoin](#sqlalchemy.orm.outerjoin)(left, right[, onclause, full]) | Produce
    a left outer join between left and right clauses. |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| [outerjoin](#sqlalchemy.orm.outerjoin)(left, right[, onclause, full]) | 在左右子句之间生成左外连接。
    |'
- en: '| [with_loader_criteria](#sqlalchemy.orm.with_loader_criteria)(entity_or_base,
    where_criteria[, loader_only, include_aliases, ...]) | Add additional WHERE criteria
    to the load for all occurrences of a particular entity. |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| [with_loader_criteria](#sqlalchemy.orm.with_loader_criteria)(entity_or_base,
    where_criteria[, loader_only, include_aliases, ...]) | 为特定实体的所有出现加载添加额外的WHERE条件。
    |'
- en: '| [with_parent](#sqlalchemy.orm.with_parent)(instance, prop[, from_entity])
    | Create filtering criterion that relates this query’s primary entity to the given
    related instance, using established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration. |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| [with_parent](#sqlalchemy.orm.with_parent)(instance, prop[, from_entity])
    | 创建过滤条件，将此查询的主实体与给定的相关实例关联起来，使用已建立的[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")配置。 |'
- en: '[PRE66]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Produce an alias of the given element, usually an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instance.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 创建给定元素的别名，通常是[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")实例。
- en: 'E.g.:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE67]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased") function
    is used to create an ad-hoc mapping of a mapped class to a new selectable. By
    default, a selectable is generated from the normally mapped selectable (typically
    a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    ) using the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method. However, [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") can also be used to link the class to a new [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") statement. Also, the [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") function is a variant of [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") that is intended to specify a so-called “polymorphic
    selectable”, that corresponds to the union of several joined-inheritance subclasses
    at once.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")函数用于创建一个映射类到新的可选项的临时映射。默认情况下，通过通常的映射可选项（通常是[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")）使用[`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")方法生成可选项。但是，[`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")也可以用于将类链接到新的[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")语句。此外，[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")函数是[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")的变体，旨在指定所谓的“多态可选项”，该可选项对应于一次性联接继承子类的联合。'
- en: For convenience, the [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    function also accepts plain [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, such as a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct. In those cases, the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method is called on the object and
    the new [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object returned. The returned [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") is not ORM-mapped in this case.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")函数也接受普通的[`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")构造，比如[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造。在这些情况下，对象会调用[`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")方法，并返回新的[`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")对象。在这种情况下，返回的[`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")不会被ORM映射。
- en: See also
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Entity Aliases](../../tutorial/data_select.html#tutorial-orm-entity-aliases)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 实体别名](../../tutorial/data_select.html#tutorial-orm-entity-aliases) - 在
    [SQLAlchemy 统一教程](../../tutorial/index.html#unified-tutorial) 中'
- en: '[Selecting ORM Aliases](select.html#orm-queryguide-orm-aliases) - in the [ORM
    Querying Guide](index.html)'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '[选择 ORM 别名](select.html#orm-queryguide-orm-aliases) - 在 [ORM 查询指南](index.html)
    中'
- en: 'Parameters:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`element` – element to be aliased. Is normally a mapped class, but for convenience
    can also be a [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") element.'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element` – 要别名的元素。通常是一个映射类，但为了方便，也可以是一个[`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")元素。'
- en: '`alias` – Optional selectable unit to map the element to. This is usually used
    to link the object to a subquery, and should be an aliased select construct as
    one would produce from the [`Query.subquery()`](query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") method or the [`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery") or [`Select.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") methods of the [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alias` – 可选的可选择单元，用于将元素映射到。通常用于将对象链接到子查询，并且应该是一个别名选择结构，就像从[`Query.subquery()`](query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery")方法或[`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery")或[`Select.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法生成的那样[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")结构。'
- en: '`name` – optional string name to use for the alias, if not specified by the
    `alias` parameter. The name, among other things, forms the attribute name that
    will be accessible via tuples returned by a [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. Not supported when creating aliases of [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") objects.'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – 如果未由`alias`参数指定，则使用的可选字符串名称。名称，除其他外，形成了通过[`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象返回的元组访问的属性名称。在创建[`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象的别名时不支持。'
- en: '`flat` – Boolean, will be passed through to the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") call so that aliases of [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") objects will alias the individual tables inside
    the join, rather than creating a subquery. This is generally supported by all
    modern databases with regards to right-nested joins and generally produces more
    efficient queries.'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flat` – 布尔值，将传递到[`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")调用，以便[`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象的别名将别名加入到连接内的单个表，而不是创建子查询。这通常由所有现代数据库支持，关于右嵌套连接，通常生成更有效的查询。'
- en: '`adapt_on_names` –'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`adapt_on_names` –'
- en: 'if True, more liberal “matching” will be used when mapping the mapped columns
    of the ORM entity to those of the given selectable - a name-based match will be
    performed if the given selectable doesn’t otherwise have a column that corresponds
    to one on the entity. The use case for this is when associating an entity with
    some derived selectable such as one that uses aggregate functions:'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则在将 ORM 实体的映射列映射到给定可选择的列时将使用更自由的“匹配” - 如果给定的可选择否则没有与实体上的列对应的列，则将执行基于名称的匹配。这种用例是当将实体与某个派生的可选择相关联时，例如使用聚合函数的可选择：
- en: '[PRE68]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Above, functions on `aggregated_unit_price` which refer to `.price` will return
    the `func.sum(UnitPrice.price).label('price')` column, as it is matched on the
    name “price”. Ordinarily, the “price” function wouldn’t have any “column correspondence”
    to the actual `UnitPrice.price` column as it is not a proxy of the original.
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上面，对`aggregated_unit_price`上的函数引用`.price`将返回`func.sum(UnitPrice.price).label('price')`列，因为它根据名称“price”进行匹配。通常，“price”函数不会与实际的`UnitPrice.price`列有任何“列对应”，因为它不是原始列的代理。
- en: '[PRE69]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Represents an “aliased” form of a mapped class for usage with Query.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 表示与查询一起使用的映射类的“别名”形式。
- en: The ORM equivalent of a [`alias()`](../../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") construct, this object mimics the mapped class
    using a `__getattr__` scheme and maintains a reference to a real [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 中 [`alias()`](../../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") 构造的等效对象，该对象使用 `__getattr__` 方案模仿映射类，并维护对真实
    [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    对象的引用。
- en: 'A primary purpose of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    is to serve as an alternate within a SQL statement generated by the ORM, such
    that an existing mapped entity can be used in multiple contexts. A simple example:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    的一个主要目的是在 ORM 生成的 SQL 语句中作为一个替代，以便一个现有的映射实体可以在多个上下文中使用。一个简单的例子：'
- en: '[PRE70]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    is also capable of mapping an existing mapped class to an entirely new selectable,
    provided this selectable is column- compatible with the existing mapped selectable,
    and it can also be configured in a mapping as the target of a [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). See the links below for examples.'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    还能够将现有的映射类映射到一个全新的可选择项，前提是该可选择项与现有的映射可选择项兼容，并且还可以在映射中配置为 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 的目标。请参见下面的链接以获取示例。'
- en: The [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object is constructed typically using the [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function. It also is produced with additional configuration
    when using the [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") function.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    对象通常使用 [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased") 函数构造。在使用
    [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic "sqlalchemy.orm.with_polymorphic")
    函数时，还会进行额外配置。'
- en: The resulting object is an instance of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass"). This object implements an attribute scheme
    which produces the same attribute and method interface as the original mapped
    class, allowing [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    to be compatible with any attribute technique which works on the original class,
    including hybrid attributes (see [Hybrid Attributes](../extensions/hybrid.html)).
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 结果对象是 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    的一个实例。该对象实现了一个属性方案，产生与原始映射类相同的属性和方法接口，允许 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") 与在原始类上工作的任何属性技术兼容，包括混合属性（参见 [混合属性](../extensions/hybrid.html)）。
- en: 'The [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    can be inspected for its underlying [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), aliased selectable, and other information using [`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect"):'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    可以通过 [`inspect()`](../../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    进行检查，以获取其底层的 [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")、别名可选择项和其他信息：'
- en: '[PRE71]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The resulting inspection object is an instance of [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp").
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 结果检查对象是 [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    的一个实例。
- en: See also
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")'
- en: '[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic "sqlalchemy.orm.with_polymorphic")'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic "sqlalchemy.orm.with_polymorphic")'
- en: '[Relationship to Aliased Class](../join_conditions.html#relationship-aliased-class)'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '[与别名类的关系](../join_conditions.html#relationship-aliased-class)'
- en: '[Row-Limited Relationships with Window Functions](../join_conditions.html#relationship-to-window-function)'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用窗口函数限制行关系](../join_conditions.html#relationship-to-window-function)'
- en: '**Class signature**'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.orm.AliasedClass` (`sqlalchemy.inspection.Inspectable`, `sqlalchemy.orm.ORMColumnsClauseRole`)
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.orm.AliasedClass` (`sqlalchemy.inspection.Inspectable`, `sqlalchemy.orm.ORMColumnsClauseRole`)
- en: '[PRE72]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Provide an inspection interface for an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") object.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 为[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")对象提供检查接口。
- en: 'The [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    object is returned given an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") using the [`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")，使用[`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect")函数将返回一个[`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")对象：
- en: '[PRE73]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Attributes on [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    include:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")上的属性包括：'
- en: '`entity` - the [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    represented.'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entity` - 表示的[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")。'
- en: '`mapper` - the [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    mapping the underlying class.'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` - 映射底层类的[`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。'
- en: '`selectable` - the [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") construct which ultimately represents an aliased
    [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct.'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectable` - 最终表示别名[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造的[`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")构造。'
- en: '`name` - the name of the alias. Also is used as the attribute name when returned
    in a result tuple from [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query").'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` - 别名的名称。 当从[`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")中的结果元组返回时，也用作属性名称。'
- en: '`with_polymorphic_mappers` - collection of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects indicating all those mappers expressed in the
    select construct for the [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass").'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_polymorphic_mappers` - 指示在 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") 的 select 构造中表达的所有这些映射器的集合。'
- en: '`polymorphic_on` - an alternate column or SQL expression which will be used
    as the “discriminator” for a polymorphic load.'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`polymorphic_on` - 一个备用的列或 SQL 表达式，将用作多态加载的“辨别器”。'
- en: See also
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Runtime Inspection API](../../core/inspection.html)'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '[运行时检查 API](../../core/inspection.html)'
- en: '**Class signature**'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.orm.AliasedInsp` (`sqlalchemy.orm.ORMEntityColumnsClauseRole`,
    `sqlalchemy.orm.ORMFromClauseRole`, [`sqlalchemy.sql.cache_key.HasCacheKey`](../../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey"), [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"), `sqlalchemy.util.langhelpers.MemoizedSlots`,
    `sqlalchemy.inspection.Inspectable`, `typing.Generic`)
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 类`sqlalchemy.orm.AliasedInsp` (`sqlalchemy.orm.ORMEntityColumnsClauseRole`,
    `sqlalchemy.orm.ORMFromClauseRole`, [`sqlalchemy.sql.cache_key.HasCacheKey`](../../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey"), [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"), `sqlalchemy.util.langhelpers.MemoizedSlots`,
    `sqlalchemy.inspection.Inspectable`, `typing.Generic`)
- en: '[PRE74]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: A grouping of SQL expressions that are returned by a [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") under one namespace.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 由[`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")在一个命名空间下返回的
    SQL 表达式的分组。
- en: The [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") essentially allows
    nesting of the tuple-based results returned by a column-oriented [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. It also is extensible via simple subclassing,
    where the primary capability to override is that of how the set of expressions
    should be returned, allowing post-processing as well as custom return types, without
    involving ORM identity-mapped classes.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")基本上允许对列导向的[`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象返回的基于元组的结果进行嵌套。 它还可以通过简单的子类化进行扩展，其中要覆盖的主要能力是如何返回表达式集，允许后处理以及自定义返回类型，而不涉及
    ORM 身份映射的类。'
- en: See also
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Grouping Selected Attributes with Bundles](select.html#bundles)'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Bundles 分组选择的属性](select.html#bundles)'
- en: '**Members**'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.orm.Bundle.__init__), [c](#sqlalchemy.orm.Bundle.c),
    [columns](#sqlalchemy.orm.Bundle.columns), [create_row_processor()](#sqlalchemy.orm.Bundle.create_row_processor),
    [is_aliased_class](#sqlalchemy.orm.Bundle.is_aliased_class), [is_bundle](#sqlalchemy.orm.Bundle.is_bundle),
    [is_clause_element](#sqlalchemy.orm.Bundle.is_clause_element), [is_mapper](#sqlalchemy.orm.Bundle.is_mapper),
    [label()](#sqlalchemy.orm.Bundle.label), [single_entity](#sqlalchemy.orm.Bundle.single_entity)'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.orm.Bundle.__init__), [c](#sqlalchemy.orm.Bundle.c),
    [columns](#sqlalchemy.orm.Bundle.columns), [create_row_processor()](#sqlalchemy.orm.Bundle.create_row_processor),
    [is_aliased_class](#sqlalchemy.orm.Bundle.is_aliased_class), [is_bundle](#sqlalchemy.orm.Bundle.is_bundle),
    [is_clause_element](#sqlalchemy.orm.Bundle.is_clause_element), [is_mapper](#sqlalchemy.orm.Bundle.is_mapper),
    [label()](#sqlalchemy.orm.Bundle.label), [single_entity](#sqlalchemy.orm.Bundle.single_entity)'
- en: '**Class signature**'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    (`sqlalchemy.orm.ORMColumnsClauseRole`, `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    `sqlalchemy.sql.cache_key.MemoizedHasCacheKey`, `sqlalchemy.inspection.Inspectable`,
    [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"))
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 类[`sqlalchemy.orm.Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") (`sqlalchemy.orm.ORMColumnsClauseRole`,
    `sqlalchemy.sql.annotation.SupportsCloneAnnotations`, `sqlalchemy.sql.cache_key.MemoizedHasCacheKey`,
    `sqlalchemy.inspection.Inspectable`, [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"))。
- en: '[PRE75]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Construct a new [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle").
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的[`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")。
- en: 'e.g.:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE76]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Parameters:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – name of the bundle.'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – bundle的名称。'
- en: '`*exprs` – columns or SQL expressions comprising the bundle.'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*exprs` – 组成bundle的列或SQL表达式。'
- en: '`single_entity=False` – if True, rows for this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") can be returned as a “single entity” outside of any enclosing
    tuple in the same manner as a mapped entity.'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`single_entity=False` – 如果为True，则此[`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")的行可以作为“单个实体”返回，而不是在与映射实体相同的元组中。'
- en: '[PRE77]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: An alias for [`Bundle.columns`](#sqlalchemy.orm.Bundle.columns "sqlalchemy.orm.Bundle.columns").
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Bundle.columns`](#sqlalchemy.orm.Bundle.columns "sqlalchemy.orm.Bundle.columns")的别名。'
- en: '[PRE78]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: A namespace of SQL expressions referred to by this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 被此[`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")引用的SQL表达式的命名空间。
- en: 'e.g.:'
  id: totrans-428
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 例如：
- en: ''
  id: totrans-429
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-430
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE79]'
- en: ''
  id: totrans-431
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Nesting of bundles is also supported:'
  id: totrans-432
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 也支持bundle的嵌套：
- en: ''
  id: totrans-433
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-434
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE80]'
- en: See also
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Bundle.c`](#sqlalchemy.orm.Bundle.c "sqlalchemy.orm.Bundle.c")'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Bundle.c`](#sqlalchemy.orm.Bundle.c "sqlalchemy.orm.Bundle.c")'
- en: '[PRE81]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Produce the “row processing” function for this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 为此[`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")生成“行处理”函数。
- en: May be overridden by subclasses to provide custom behaviors when results are
    fetched. The method is passed the statement object and a set of “row processor”
    functions at query execution time; these processor functions when given a result
    row will return the individual attribute value, which can then be adapted into
    any kind of return data structure.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 可以被子类覆盖以在获取结果时提供自定义行为。该方法在查询执行时传递给语句对象和一组“行处理”函数；这些处理函数在给定结果行时将返回单个属性值，然后可以将其调整为任何返回数据结构。
- en: 'The example below illustrates replacing the usual [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") return structure with a straight Python dictionary:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了将通常的[`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")返回结构替换为直接的Python字典：
- en: '[PRE82]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'A result from the above [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    will return dictionary values:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 上述[`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")的结果将返回字典值：
- en: '[PRE83]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: True if this object is an instance of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")的实例，则为True。
- en: '[PRE85]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: True if this object is an instance of [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle").
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")的实例，则为True。
- en: '[PRE86]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: True if this object is an instance of [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement")的实例，则为True。
- en: '[PRE87]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: True if this object is an instance of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是[`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")的实例，则为True。
- en: '[PRE88]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Provide a copy of this [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    passing a new label.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 提供一个传递了新标签的 [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") 的副本。
- en: '[PRE89]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: If True, queries for a single Bundle will be returned as a single entity, rather
    than an element within a keyed tuple.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则对于单个 Bundle 的查询将返回为单个实体，而不是在一个键元组中的元素。
- en: '[PRE90]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Add additional WHERE criteria to the load for all occurrences of a particular
    entity.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 为所有特定实体的加载添加额外的 WHERE 条件。
- en: New in version 1.4.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本 1.4 中的新功能。
- en: The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option is intended to add limiting criteria to a particular kind of entity in
    a query, **globally**, meaning it will apply to the entity as it appears in the
    SELECT query as well as within any subqueries, join conditions, and relationship
    loads, including both eager and lazy loaders, without the need for it to be specified
    in any particular part of the query. The rendering logic uses the same system
    used by single table inheritance to ensure a certain discriminator is applied
    to a table.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    选项旨在向查询中的特定类型的实体添加限制条件，**全局**地，这意味着它将应用于实体在 SELECT 查询中的出现方式以及任何子查询、连接条件和关系加载中，包括急切加载和延迟加载器，而无需在查询的任何特定部分中指定它。呈现逻辑使用与单表继承相同的系统来确保某个鉴别器应用于表。'
- en: 'E.g., using [2.0-style](../../glossary.html#term-1) queries, we can limit the
    way the `User.addresses` collection is loaded, regardless of the kind of loading
    used:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用 [2.0 样式](../../glossary.html#term-1) 查询，我们可以限制 `User.addresses` 集合的加载方式，而不管所使用的加载类型是什么：
- en: '[PRE91]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Above, the “selectinload” for `User.addresses` will apply the given filtering
    criteria to the WHERE clause.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 上面，“selectinload” 对于 `User.addresses` 将把给定的过滤条件应用于 WHERE 子句。
- en: 'Another example, where the filtering will be applied to the ON clause of the
    join, in this example using [1.x style](../../glossary.html#term-1.x-style) queries:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个示例，其中过滤将应用于连接的 ON 子句，在此示例中使用 [1.x 样式](../../glossary.html#term-1.x-style)
    查询：
- en: '[PRE92]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The primary purpose of [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is to use it in the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event handler to ensure that all
    occurrences of a particular entity are filtered in a certain way, such as filtering
    for access control roles. It also can be used to apply criteria to relationship
    loads. In the example below, we can apply a certain set of rules to all queries
    emitted by a particular [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"):'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    的主要目的是在 [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") 事件处理程序中使用它，以确保对特定实体的所有出现方式都以某种方式进行过滤，例如针对访问控制角色的过滤。它还可以用于将条件应用于关系加载。在下面的示例中，我们可以将一定的规则应用于特定
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    发出的所有查询：'
- en: '[PRE93]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: In the above example, the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event will intercept all queries
    emitted using the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    For those queries which are SELECT statements and are not attribute or relationship
    loads a custom [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option is added to the query. The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option will be used in the given statement
    and will also be automatically propagated to all relationship loads that descend
    from this query.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，[`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") 事件将拦截使用 [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 发出的所有查询。对于那些是 SELECT 语句且不是属性或关系加载的查询，会向查询中添加自定义 [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") 选项。[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") 选项将在给定的语句中使用，并将自动传播到所有从该查询继承的关系加载。
- en: The criteria argument given is a `lambda` that accepts a `cls` argument. The
    given class will expand to include all mapped subclass and need not itself be
    a mapped class.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的 criteria 参数是一个接受 `cls` 参数的 `lambda`。给定的类将扩展为包括所有映射的子类，它本身不需要是一个映射的类。
- en: Tip
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: When using [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option in conjunction with the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") loader option, it’s important to note that [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") only affects the part of the query that
    determines what SQL is rendered in terms of the WHERE and FROM clauses. The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option does not affect the rendering of the SELECT
    statement outside of the columns clause, so does not have any interaction with
    the [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option. However, the way things “work” is that [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") is meant to be used with a query that is already
    selecting from the additional entities in some way, where [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") can apply it’s additional criteria.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 在与[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager "sqlalchemy.orm.contains_eager")加载选项一起使用[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项时，重要的是要注意[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")仅影响决定渲染的SQL的部分查询，即WHERE和FROM子句。[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")选项不影响SELECT语句在列子句之外的渲染，因此与[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项没有任何交互。然而，事情的“运作方式”是，[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")旨在与某种方式已经从附加实体中进行选择的查询一起使用，其中[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")可以应用其附加条件。
- en: 'In the example below, assuming a mapping relationship as `A -> A.bs -> B`,
    the given [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option will affect the way in which the JOIN is rendered:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，假设有一个映射关系为`A -> A.bs -> B`，给定的[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项将影响JOIN的呈现方式：
- en: '[PRE94]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Above, the given [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option will affect the ON clause of the
    JOIN that is specified by `.join(A.bs)`, so is applied as expected. The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option has the effect that columns from `B` are
    added to the columns clause:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")选项将影响由`.join(A.bs)`指定的JOIN的ON子句，因此被如预期般应用。[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")选项的作用是将B的列添加到列子句中：
- en: '[PRE95]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: The use of the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option within the above statement has no effect
    on the behavior of the [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option. If the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option were omitted, the SQL would be the same
    as regards the FROM and WHERE clauses, where [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") continues to add its criteria to the ON
    clause of the JOIN. The addition of [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") only affects the columns clause, in that additional
    columns against `b` are added which are then consumed by the ORM to produce `B`
    instances.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述语句中使用[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")选项对[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项的行为没有影响。如果省略了[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")选项，那么SQL在FROM和WHERE子句方面的情况将与[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")继续将其条件添加到JOIN的ON子句中一样。[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")的添加仅影响列子句，即添加了针对b的附加列，然后ORM将其消耗以产生B实例。
- en: Warning
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The use of a lambda inside of the call to [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is only invoked **once per unique class**.
    Custom functions should not be invoked within this lambda. See [Using Lambdas
    to add significant speed gains to statement production](../../core/connections.html#engine-lambda-caching)
    for an overview of the “lambda SQL” feature, which is for advanced use only.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")时使用的lambda仅会被**每个唯一类**调用一次。自定义函数不应在此lambda内部调用。有关“lambda
    SQL”功能的概述，请参阅[使用Lambda将语句生成速度提升到显著水平](../../core/connections.html#engine-lambda-caching)，该功能仅适用于高级用途。
- en: 'Parameters:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`entity_or_base` – a mapped class, or a class that is a super class of a particular
    set of mapped classes, to which the rule will apply.'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entity_or_base` - 一个映射类，或者是一组特定映射类的超类，适用于该规则。'
- en: '`where_criteria` –'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`where_criteria` - '
- en: a Core SQL expression that applies limiting criteria. This may also be a “lambda:”
    or Python function that accepts a target class as an argument, when the given
    class is a base with many different mapped subclasses.
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个应用限制条件的核心SQL表达式。当给定类是具有许多不同映射子类的基类时，这也可以是“lambda:”或Python函数，它接受目标类作为参数。
- en: Note
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: To support pickling, use a module-level Python function to produce the SQL expression
    instead of a lambda or a fixed SQL expression, which tend to not be picklable.
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了支持pickle，应使用模块级别的Python函数来生成SQL表达式，而不是lambda或固定的SQL表达式，后者倾向于不可pickle。
- en: '`include_aliases` – if True, apply the rule to [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") constructs as well.'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_aliases` - 如果为True，则也将规则应用于[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")构造。'
- en: '`propagate_to_loaders` –'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propagate_to_loaders` - '
- en: defaults to True, apply to relationship loaders such as lazy loaders. This indicates
    that the option object itself including SQL expression is carried along with each
    loaded instance. Set to `False` to prevent the object from being assigned to individual
    instances.
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为True，适用于诸如延迟加载器之类的关系加载器。这表示选项对象本身包括SQL表达式与每个加载的实例一起传递。将其设置为`False`可防止将对象分配给单个实例。
- en: See also
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Query Events](../examples.html#examples-session-orm-events) - includes
    examples of using [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria").'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM查询事件](../examples.html#examples-session-orm-events) - 包括使用[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")的示例。'
- en: '[Adding global WHERE / ON criteria](../session_events.html#do-orm-execute-global-criteria)
    - basic example on how to combine [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") with the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event.'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[添加全局WHERE / ON条件](../session_events.html#do-orm-execute-global-criteria) -
    将[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")与[`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件相结合的基本示例。'
- en: '`track_closure_variables` –'
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`track_closure_variables` -'
- en: when False, closure variables inside of a lambda expression will not be used
    as part of any cache key. This allows more complex expressions to be used inside
    of a lambda expression but requires that the lambda ensures it returns the identical
    SQL every time given a particular class.
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当False时，lambda表达式内部的闭包变量将不会用作任何缓存键的一部分。这允许在lambda表达式内部使用更复杂的表达式，但需要lambda确保每次给定特定类时都返回相同的SQL。
- en: New in version 1.4.0b2.
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从版本1.4.0b2开始新增。
- en: '[PRE96]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: Produce an inner join between left and right clauses.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 生成左右子句之间的内部连接。
- en: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") is an extension to the
    core join interface provided by [`join()`](../../core/selectable.html#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join"), where the left and right selectable may be
    not only core selectable objects such as [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), but also mapped classes or [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instances. The “on” clause can be a SQL expression
    or an ORM mapped attribute referencing a configured [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") 是对由 [`join()`](../../core/selectable.html#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join") 提供的核心连接接口的扩展，其中左右可选择的对象不仅可以是核心可选择对象（如 [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")），还可以是映射类或 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") 实例。"on" 子句可以是 SQL 表达式，也可以是引用已配置的 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 的 ORM 映射属性。'
- en: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") is not commonly needed
    in modern usage, as its functionality is encapsulated within that of the [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Query.join()`](query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") methods. which feature a significant amount of automation
    beyond [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") by itself. Explicit
    use of [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") with ORM-enabled
    SELECT statements involves use of the [`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method, as in:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") 在现代用法中不常用，因为其功能已封装在
    [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") 和 [`Query.join()`](query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 方法中。这些方法的自动化程度远远超出了 [`join()`](#sqlalchemy.orm.join
    "sqlalchemy.orm.join") 本身。在启用 ORM 的 SELECT 语句中明确使用 [`join()`](#sqlalchemy.orm.join
    "sqlalchemy.orm.join")，需要使用 [`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 方法，示例如下：'
- en: '[PRE97]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'In modern SQLAlchemy the above join can be written more succinctly as:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代 SQLAlchemy 中，以上连接可以更简洁地写为：
- en: '[PRE98]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Warning
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: using [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") directly may not
    work properly with modern ORM options such as [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria"). It is strongly recommended to use the
    idiomatic join patterns provided by methods such as [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Select.join_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from") when creating ORM joins.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 直接使用 [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") 可能无法与现代 ORM 选项（如
    [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")）正常工作。强烈建议在创建
    ORM 连接时使用诸如 [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") 和 [`Select.join_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from") 等方法提供的惯用连接模式。
- en: See also
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Joins](select.html#orm-queryguide-joins) - in the [ORM Querying Guide](index.html)
    for background on idiomatic ORM join patterns'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '[连接](select.html#orm-queryguide-joins) - 在[ORM 查询指南](index.html)中了解惯用 ORM 连接模式的背景知识'
- en: '[PRE99]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Produce a left outer join between left and right clauses.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 在左右子句之间产生一个左外连接。
- en: This is the “outer join” version of the [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")
    function, featuring the same behavior except that an OUTER JOIN is generated.
    See that function’s documentation for other usage details.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") 函数的“外连接”版本，功能与其相同，只是生成了一个
    OUTER JOIN。请参阅该函数的文档以获取其他用法细节。
- en: '[PRE100]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Create filtering criterion that relates this query’s primary entity to the given
    related instance, using established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 创建将此查询的主实体与给定的相关实例相关联的过滤条件，使用已建立的 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 配置。
- en: 'E.g.:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE101]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: The SQL rendered is the same as that rendered when a lazy loader would fire
    off from the given parent on that attribute, meaning that the appropriate state
    is taken from the parent object in Python without the need to render joins to
    the parent table in the rendered statement.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染的 SQL 与在给定父对象上的属性上触发惰性加载器时渲染的 SQL 相同，这意味着适当的状态从 Python 中的父对象中获取，而不需要在渲染的语句中渲染到父表的连接。
- en: 'The given property may also make use of [`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") to indicate the left side of the criteria:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的属性也可以使用 [`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") 来指示条件的左侧：
- en: '[PRE102]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'The above use is equivalent to using the `from_entity()` argument:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 上述用法等同于使用 `from_entity()` 参数：
- en: '[PRE103]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Parameters:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – An instance which has some [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` - 具有一些 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 的实例。'
- en: '`property` – Class-bound attribute, which indicates what relationship from
    the instance should be used to reconcile the parent/child relationship.'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`property` - 类绑定属性，指示应从实例使用哪个关系来协调父/子关系。'
- en: '`from_entity` –'
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from_entity` -'
- en: Entity in which to consider as the left side. This defaults to the “zero” entity
    of the [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query") itself.
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要考虑为左侧的实体。这默认为 [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    本身的“零”实体。
- en: 'New in version 1.2.  ### Populate Existing'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.2 中的新功能。### Populate Existing
- en: The `populate_existing` execution option ensures that, for all rows loaded,
    the corresponding instances in the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will be fully refreshed – erasing any existing data
    within the objects (including pending changes) and replacing with the data loaded
    from the result.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '`populate_existing` 执行选项确保，对于加载的所有行，[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 中对应的实例将被完全刷新 - 擦除对象中的任何现有数据（包括未决更改），并用从结果加载的数据替换。'
- en: 'Example use looks like:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 示例用法如下：
- en: '[PRE104]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Normally, ORM objects are only loaded once, and if they are matched up to the
    primary key in a subsequent result row, the row is not applied to the object.
    This is both to preserve pending, unflushed changes on the object as well as to
    avoid the overhead and complexity of refreshing data which is already there. The
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    assumes a default working model of a highly isolated transaction, and to the degree
    that data is expected to change within the transaction outside of the local changes
    being made, those use cases would be handled using explicit steps such as this
    method.
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，ORM 对象只加载一次，如果它们与后续结果行中的主键匹配，那么该行不会应用于对象。这既是为了保留对象上未决的未刷新更改，也是为了避免刷新已经存在的数据的开销和复杂性。[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 假定高度隔离的事务的默认工作模型，并且在事务中预计数据会在本地更改之外发生变化的程度上，这些用例将使用显式步骤来处理，例如这种方法。
- en: 'Using `populate_existing`, any set of objects that matches a query can be refreshed,
    and it also allows control over relationship loader options. E.g. to refresh an
    instance while also refreshing a related set of objects:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `populate_existing`，任何与查询匹配的对象集合都可以刷新，并且还允许控制关系加载器选项。例如，刷新一个实例同时刷新一组相关对象：
- en: '[PRE105]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Another use case for `populate_existing` is in support of various attribute
    loading features that can change how an attribute is loaded on a per-query basis.
    Options for which this apply include:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '`populate_existing` 的另一个用例是支持各种属性加载功能，可以根据每个查询的情况更改如何加载属性。适用于此选项的选项包括：'
- en: The [`with_expression()`](columns.html#sqlalchemy.orm.with_expression "sqlalchemy.orm.with_expression")
    option
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`with_expression()`](columns.html#sqlalchemy.orm.with_expression "sqlalchemy.orm.with_expression")
    选项'
- en: The [`PropComparator.and_()`](../internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") method that can modify what a loader strategy
    loads
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`PropComparator.and_()`](../internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") 方法可以修改加载策略加载的内容'
- en: The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager "sqlalchemy.orm.contains_eager")
    option
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager "sqlalchemy.orm.contains_eager")
    选项'
- en: The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")选项'
- en: The [`load_only()`](columns.html#sqlalchemy.orm.load_only "sqlalchemy.orm.load_only")
    option to select what attributes to refresh
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`load_only()`](columns.html#sqlalchemy.orm.load_only "sqlalchemy.orm.load_only")选项用于选择要刷新的属性'
- en: The `populate_existing` execution option is equvialent to the [`Query.populate_existing()`](query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") method in [1.x style](../../glossary.html#term-1.x-style)
    ORM queries.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '`populate_existing`执行选项等同于[1.x风格](../../glossary.html#term-1.x-style)ORM查询中的[`Query.populate_existing()`](query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing")方法。'
- en: See also
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[I’m re-loading data with my Session but it isn’t seeing changes that I committed
    elsewhere](../../faq/sessions.html#faq-session-identity) - in [Frequently Asked
    Questions](../../faq/index.html)'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '[我正在使用我的Session重新加载数据，但它没有看到我在其他地方提交的更改](../../faq/sessions.html#faq-session-identity)
    - 在[常见问题解答](../../faq/index.html)中'
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    in the ORM [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    documentation'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新/过期](../session_state_management.html#session-expire) - 在ORM [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 文档中'
- en: '### Autoflush'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '### 自动刷新'
- en: 'This option, when passed as `False`, will cause the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to not invoke the “autoflush” step. It is equivalent
    to using the [`Session.no_autoflush`](../session_api.html#sqlalchemy.orm.Session.no_autoflush
    "sqlalchemy.orm.Session.no_autoflush") context manager to disable autoflush:'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 当传递为`False`时，此选项将导致[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")不调用“autoflush”步骤。这相当于使用[`Session.no_autoflush`](../session_api.html#sqlalchemy.orm.Session.no_autoflush
    "sqlalchemy.orm.Session.no_autoflush")上下文管理器来禁用自动刷新：
- en: '[PRE106]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: This option will also work on ORM-enabled [`Update`](../../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Delete`](../../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") queries.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项也适用于启用ORM的[`Update`](../../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update")和[`Delete`](../../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete")查询。
- en: The `autoflush` execution option is equvialent to the [`Query.autoflush()`](query.html#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush") method in [1.x style](../../glossary.html#term-1.x-style)
    ORM queries.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '`autoflush`执行选项等同于[1.x风格](../../glossary.html#term-1.x-style)ORM查询中的[`Query.autoflush()`](query.html#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush")方法。'
- en: See also
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Flushing](../session_basics.html#session-flushing)'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '[刷新](../session_basics.html#session-flushing)'
- en: '### Fetching Large Result Sets with Yield Per'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '### 使用 Yield Per 获取大型结果集'
- en: The `yield_per` execution option is an integer value which will cause the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") to buffer only a limited number of rows and/or ORM
    objects at a time, before making data available to the client.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield_per`执行选项是一个整数值，它将导致[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")一次仅缓冲有限数量的行和/或ORM对象，然后再将数据提供给客户端。'
- en: Normally, the ORM will fetch **all** rows immediately, constructing ORM objects
    for each and assembling those objects into a single buffer, before passing this
    buffer to the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object as a source of rows to be returned. The rationale
    for this behavior is to allow correct behavior for features such as joined eager
    loading, uniquifying of results, and the general case of result handling logic
    that relies upon the identity map maintaining a consistent state for every object
    in a result set as it is fetched.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，ORM会立即获取**所有**行，为每一行构建ORM对象，并将这些对象组装到一个单一缓冲区中，然后将此缓冲区传递给[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象作为要返回的行的来源。这种行为的理由是为了允许诸如连接的急切加载、结果的唯一化以及依赖于标识映射在获取时为结果集中的每个对象保持一致状态的结果处理逻辑等功能的正确行为。
- en: The purpose of the `yield_per` option is to change this behavior so that the
    ORM result set is optimized for iteration through very large result sets (e.g.
    > 10K rows), where the user has determined that the above patterns don’t apply.
    When `yield_per` is used, the ORM will instead batch ORM results into sub-collections
    and yield rows from each sub-collection individually as the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object is iterated, so that the Python interpreter
    doesn’t need to declare very large areas of memory which is both time consuming
    and leads to excessive memory use. The option affects both the way the database
    cursor is used as well as how the ORM constructs rows and objects to be passed
    to the [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result").
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield_per` 选项的目的是改变这种行为，使得 ORM 结果集对于迭代非常大的结果集（例如 > 10K 行）进行了优化，其中用户已确定上述模式不适用。当使用
    `yield_per` 时，ORM 将把 ORM 结果分批到子集合中，并在迭代 [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 对象时，从每个子集合中分别产生行，这样 Python 解释器就不需要声明非常大的内存区域，这既耗时又导致内存使用过多。该选项影响数据库游标的使用方式，以及
    ORM 构造行和对象以传递给 [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") 的方式。'
- en: Tip
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: From the above, it follows that the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") must be consumed in an iterable fashion, that is,
    using iteration such as `for row in result` or using partial row methods such
    as [`Result.fetchmany()`](../../core/connections.html#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") or [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions"). Calling [`Result.all()`](../../core/connections.html#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all") will defeat the purpose of using `yield_per`.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 由上可见，[`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    必须以可迭代的方式被消耗，即使用迭代（如 `for row in result`）或使用部分行方法（如 [`Result.fetchmany()`](../../core/connections.html#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") 或 [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions")）。调用 [`Result.all()`](../../core/connections.html#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all") 将使使用 `yield_per` 的目的失败。
- en: Using `yield_per` is equivalent to making use of both the [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option, which selects
    for server side cursors to be used by the backend if supported, and the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method on the returned [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object, which establishes a fixed size of rows to
    be fetched as well as a corresponding limit to how many ORM objects will be constructed
    at once.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `yield_per` 相当于同时利用了 [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 执行选项，如果支持的话，选择使用后端使用服务器端游标，并且在返回的
    [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    对象上使用 [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 方法，它建立了要提取的行的固定大小，以及一次构造多少个 ORM 对象的相应限制。
- en: Tip
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: '`yield_per` is now available as a Core execution option as well, described
    in detail at [Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results).
    This section details the use of `yield_per` as an execution option with an ORM
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    The option behaves as similarly as possible in both contexts.'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield_per` 现在也作为一个 Core 执行选项可用，详细描述请参阅 [使用服务器端游标（又名流式结果）](../../core/connections.html#engine-stream-results)。本节详细介绍了将
    `yield_per` 作为 ORM [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    的执行选项使用的方法。该选项在两种情境下尽可能地行为相似。'
- en: 'When used with the ORM, `yield_per` must be established either via the [`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method on the given
    statement or by passing it to the [`Session.execute.execution_options`](../session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute") parameter of [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") or other similar [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") method such as [`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars"). Typical use for fetching ORM objects is illustrated
    below:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 当与 ORM 一起使用时，`yield_per` 必须通过给定语句上的 [`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") 方法或通过将其传递给 [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") 或其他类似的 [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") 方法的 [`Session.execute.execution_options`](../session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute") 参数来建立。如下是用于获取 ORM 对象的典型用法：
- en: '[PRE107]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'The above code is equivalent to the example below, which uses [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") and [`Connection.execution_options.max_row_buffer`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options") Core-level execution options
    in conjunction with the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method of [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"):'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码等同于下面的示例，该示例使用了 [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") 和 [`Connection.execution_options.max_row_buffer`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options") 核心级别的执行选项，结合 [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") 方法：
- en: '[PRE108]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '`yield_per` is also commonly used in combination with the [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") method, which will iterate rows in grouped
    partitions. The size of each partition defaults to the integer value passed to
    `yield_per`, as in the below example:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield_per` 也常与 [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") 方法结合使用，该方法将在分组分区中迭代行。每个分区的大小默认为传递给 `yield_per`
    的整数值，如下例所示：'
- en: '[PRE109]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: The `yield_per` execution option **is not compatible** with [“subquery” eager
    loading](relationships.html#subquery-eager-loading) loading or [“joined” eager
    loading](relationships.html#joined-eager-loading) when using collections. It is
    potentially compatible with [“select in” eager loading](relationships.html#selectin-eager-loading)
    , provided the database driver supports multiple, independent cursors.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '`yield_per` 执行选项**不兼容**于使用集合时的 [“子查询”急切加载](relationships.html#subquery-eager-loading)
    或 [“连接”急切加载](relationships.html#joined-eager-loading)。如果数据库驱动程序支持多个独立的游标，则它可能与
    [“select in”急切加载](relationships.html#selectin-eager-loading) 兼容。'
- en: Additionally, the `yield_per` execution option is not compatible with the [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") method; as this method relies upon storing
    a complete set of identities for all rows, it would necessarily defeat the purpose
    of using `yield_per` which is to handle an arbitrarily large number of rows.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`yield_per` 执行选项不兼容于 [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") 方法；因为该方法依赖于为所有行存储完整的标识集，这必然会破坏使用 `yield_per`
    的目的，即处理任意大量的行。
- en: 'Changed in version 1.4.6: An exception is raised when ORM rows are fetched
    from a [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object that makes use of the [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") filter, at the same time as the `yield_per`
    execution option is used.'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 在版本1.4.6中更改：当使用[`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result")对象获取ORM行时，如果同时使用[`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique")过滤器以及`yield_per`执行选项，则会引发异常。
- en: When using the legacy [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object with [1.x style](../../glossary.html#term-1.x-style) ORM use, the [`Query.yield_per()`](query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") method will have the same result as that of
    the `yield_per` execution option.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用传统的[`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")对象进行[1.x
    style](../../glossary.html#term-1.x-style) ORM使用时，[`Query.yield_per()`](query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per")方法将与`yield_per`执行选项具有相同的结果。
- en: See also
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用服务器端游标（又名流式结果）](../../core/connections.html#engine-stream-results)'
- en: '### Identity Token'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '### 身份令牌'
- en: Deep Alchemy
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 深度炼金术
- en: This option is an advanced-use feature mostly intended to be used with the [Horizontal
    Sharding](../extensions/horizontal_shard.html) extension. For typical cases of
    loading objects with identical primary keys from different “shards” or partitions,
    consider using individual [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects per shard first.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项是一个高级使用功能，主要用于与[Horizontal Sharding](../extensions/horizontal_shard.html)扩展一起使用。对于从不同“shards”或分区加载具有相同主键的对象的典型情况，请首先考虑每个“shard”使用单独的[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")对象。
- en: The “identity token” is an arbitrary value that can be associated within the
    [identity key](../../glossary.html#term-identity-key) of newly loaded objects.
    This element exists first and foremost to support extensions which perform per-row
    “sharding”, where objects may be loaded from any number of replicas of a particular
    database table that nonetheless have overlapping primary key values. The primary
    consumer of “identity token” is the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension, which supplies a general framework for persisting objects among multiple
    “shards” of a particular database table.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: “身份令牌”是一个任意值，可以与新加载对象的[identity key](../../glossary.html#term-identity-key)相关联。此元素首先存在以支持执行按行“sharding”的扩展，其中对象可以从特定数据库表的任何数量的副本中加载，尽管它们具有重叠的主键值。
    “身份令牌”的主要消费者是[Horizontal Sharding](../extensions/horizontal_shard.html)扩展，它提供了一种在特定数据库表的多个“shards”之间持久化对象的通用框架。
- en: The `identity_token` execution option may be used on a per-query basis to directly
    affect this token. Using it directly, one can populate a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with multiple instances of an object that have the same
    primary key and source table, but different “identities”.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '`identity_token`执行选项可以根据每个查询直接影响此令牌。直接使用它，可以填充一个[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")的多个对象实例，这些对象具有相同的主键和来源表，但具有不同的“身份”。'
- en: 'One such example is to populate a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with objects that come from same-named tables in different
    schemas, using the [Translation of Schema Names](../../core/connections.html#schema-translating)
    feature which can affect the choice of schema within the scope of queries. Given
    a mapping as:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个示例是使用[Schema Names的翻译](../../core/connections.html#schema-translating)功能来填充一个[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")，该功能可以影响查询范围内架构的选择，对象来自不同模式中的同名表。给定映射如下：
- en: '[PRE110]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'The default “schema” name for the class above is `None`, meaning, no schema
    qualification will be written into SQL statements. However, if we make use of
    [`Connection.execution_options.schema_translate_map`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options"), mapping `None` to an alternate
    schema, we can place instances of `MyTable` into two different schemas:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 上述类的默认“模式”名称为 `None`，意味着不会在 SQL 语句中写入模式限定符。但是，如果我们使用[`Connection.execution_options.schema_translate_map`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options")，将 `None` 映射到另一个模式，我们可以将 `MyTable`
    的实例放入两个不同的模式中：
- en: '[PRE111]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: The above two blocks create a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object linked to a different schema translate map each
    time, and an instance of `MyTable` is persisted into both `test_schema.my_table`
    as well as `test_schema_2.my_table`.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 上述两个代码块创建一个[`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")对象，每次链接到不同的模式转换映射，并且
    `MyTable` 的实例被持久化到 `test_schema.my_table` 和 `test_schema_2.my_table`。
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects above are independent. If we wanted to persist both objects in one transaction,
    we would need to use the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension to do this.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的 [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    对象是独立的。如果我们想要在一个事务中持久化这两个对象，我们需要使用 [水平分片](../extensions/horizontal_shard.html)
    扩展来执行此操作。
- en: 'However, we can illustrate querying for these objects in one session as follows:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以在一个会话中演示查询这些对象的方法如下：
- en: '[PRE112]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'Both `obj1` and `obj2` are distinct from each other. However, they both refer
    to primary key id 1 for the `MyTable` class, yet are distinct. This is how the
    `identity_token` comes into play, which we can see in the inspection of each object,
    where we look at `InstanceState.key` to view the two distinct identity tokens:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '`obj1` 和 `obj2` 都彼此不同。但是，它们都指向 `MyTable` 类的主键 id 1，但是不同。这就是 `identity_token`
    起作用的方式，我们可以在每个对象的检查中看到，其中我们查看 `InstanceState.key` 来查看两个不同的身份令牌：'
- en: '[PRE113]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: The above logic takes place automatically when using the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 上述逻辑在使用 [水平分片](../extensions/horizontal_shard.html) 扩展时会自动进行。
- en: 'New in version 2.0.0rc1: - added the `identity_token` ORM level execution option.'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本 2.0.0rc1 开始新增： - 添加了 `identity_token` ORM 层执行选项。
- en: See also
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Horizontal Sharding](../examples.html#examples-sharding) - in the [ORM Examples](../examples.html)
    section. See the script `separate_schema_translates.py` for a demonstration of
    the above use case using the full sharding API.'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '[水平分片](../examples.html#examples-sharding) - 在 [ORM 示例](../examples.html) 部分。查看脚本
    `separate_schema_translates.py`，演示了使用完整分片 API 的上述用例。'
- en: '#### Inspecting entities and columns from ORM-enabled SELECT and DML statements'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 从启用 ORM 的 SELECT 和 DML 语句中检查实体和列'
- en: The [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, as well as the [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") and [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") constructs (for the latter DML constructs,
    as of SQLAlchemy 1.4.33), all support the ability to inspect the entities in which
    these statements are created against, as well as the columns and datatypes that
    would be returned in a result set.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，以及 [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")、[`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 和 [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") 构造（对于后两个 DML 构造，在 SQLAlchemy 1.4.33 中），都支持检查创建这些语句的实体，以及在结果集中返回的列和数据类型的能力。'
- en: 'For a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object, this information is available from
    the [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute. This attribute
    operates in the same way as the legacy [`Query.column_descriptions`](query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") attribute. The format returned is
    a list of dictionaries:'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")对象，此信息可从[`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions")属性中获取。此属性的操作方式与传统的[`Query.column_descriptions`](query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions")属性相同。返回的格式是一个字典列表：
- en: '[PRE114]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'When [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") is used with non-ORM objects
    such as plain [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Column`](../../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects, the entries will contain basic information about individual columns returned
    in all cases:'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 当[`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions")与非ORM对象一起使用，比如普通的[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或[`Column`](../../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column")对象时，所有情况下返回的条目将包含关于各个列的基本信息：
- en: '[PRE115]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'Changed in version 1.4.33: The [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute now returns
    a value when used against a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") that is not ORM-enabled. Previously, this
    would raise `NotImplementedError`.'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 1.4.33版本中的更改：当针对未启用ORM的[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")使用时，[`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions")属性现在会返回一个值。以前，这会引发`NotImplementedError`。
- en: 'For [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    and [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    constructs, there are two separate attributes. One is [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") which returns information
    about the primary ORM entity and database table which the DML construct would
    be affecting:'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")、[`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update")和[`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete")构造，有两个单独的属性。一个是[`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description")，它返回有关主要ORM实体和数据库表的信息，该信息会受到DML构造的影响：
- en: '[PRE116]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Tip
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") includes an entry `"table"`
    which is actually the **table to be inserted, updated or deleted** by the statement,
    which is **not** always the same as the SQL “selectable” to which the class may
    be mapped. For example, in a joined-table inheritance scenario, `"table"` will
    refer to the local table for the given entity.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description")包括一个条目`“table”`，它实际上是该语句要插入、更新或删除的**表**，这**并不总是**与类可能被映射到的SQL“selectable”相同。例如，在联接表继承场景中，`“table”`将引用给定实体的本地表。'
- en: 'The other is [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") which delivers
    information about the columns present in the RETURNING collection in a manner
    roughly similar to that of [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions"):'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个是 [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions")，它以与 [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") 类似的方式提供有关 RETURNING 集合中存在的列的信息：
- en: '[PRE117]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'New in version 1.4.33: Added the [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") and [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") attributes.  ####
    Additional ORM API Constructs'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '新版本 1.4.33 中新增：添加了 [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") 和 [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") 属性。  ####
    附加的 ORM API 构造'
- en: '| Object Name | Description |'
  id: totrans-599
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-600
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [aliased](#sqlalchemy.orm.aliased)(element[, alias, name, flat, ...]) | Produce
    an alias of the given element, usually an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instance. |'
  id: totrans-601
  prefs: []
  type: TYPE_TB
  zh: '| [aliased](#sqlalchemy.orm.aliased)(element[, alias, name, flat, ...]) | 生成给定元素的别名，通常是一个
    [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    实例。 |'
- en: '| [AliasedClass](#sqlalchemy.orm.util.AliasedClass) | Represents an “aliased”
    form of a mapped class for usage with Query. |'
  id: totrans-602
  prefs: []
  type: TYPE_TB
  zh: '| [AliasedClass](#sqlalchemy.orm.util.AliasedClass) | 代表一个与查询一起使用的映射类的“别名”形式。
    |'
- en: '| [AliasedInsp](#sqlalchemy.orm.util.AliasedInsp) | Provide an inspection interface
    for an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object. |'
  id: totrans-603
  prefs: []
  type: TYPE_TB
  zh: '| [AliasedInsp](#sqlalchemy.orm.util.AliasedInsp) | 为 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") 对象提供检查接口。 |'
- en: '| [Bundle](#sqlalchemy.orm.Bundle) | A grouping of SQL expressions that are
    returned by a [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    under one namespace. |'
  id: totrans-604
  prefs: []
  type: TYPE_TB
  zh: '| [Bundle](#sqlalchemy.orm.Bundle) | 一个由查询返回的 SQL 表达式的分组，位于一个命名空间下。 |'
- en: '| [join](#sqlalchemy.orm.join)(left, right[, onclause, isouter, ...]) | Produce
    an inner join between left and right clauses. |'
  id: totrans-605
  prefs: []
  type: TYPE_TB
  zh: '| [join](#sqlalchemy.orm.join)(left, right[, onclause, isouter, ...]) | 生成左右子句之间的内连接。
    |'
- en: '| [outerjoin](#sqlalchemy.orm.outerjoin)(left, right[, onclause, full]) | Produce
    a left outer join between left and right clauses. |'
  id: totrans-606
  prefs: []
  type: TYPE_TB
  zh: '| [outerjoin](#sqlalchemy.orm.outerjoin)(left, right[, onclause, full]) | 生成左外连接
    left 和 right 之间的连接。 |'
- en: '| [with_loader_criteria](#sqlalchemy.orm.with_loader_criteria)(entity_or_base,
    where_criteria[, loader_only, include_aliases, ...]) | Add additional WHERE criteria
    to the load for all occurrences of a particular entity. |'
  id: totrans-607
  prefs: []
  type: TYPE_TB
  zh: '| [with_loader_criteria](#sqlalchemy.orm.with_loader_criteria)(entity_or_base,
    where_criteria[, loader_only, include_aliases, ...]) | 为特定实体的所有出现加载时添加额外的 WHERE
    条件。 |'
- en: '| [with_parent](#sqlalchemy.orm.with_parent)(instance, prop[, from_entity])
    | Create filtering criterion that relates this query’s primary entity to the given
    related instance, using established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration. |'
  id: totrans-608
  prefs: []
  type: TYPE_TB
  zh: '| [with_parent](#sqlalchemy.orm.with_parent)(instance, prop[, from_entity])
    | 创建过滤条件，将此查询的主要实体与给定的相关实例相关联，使用已建立的 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 配置。 |'
- en: '[PRE118]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Produce an alias of the given element, usually an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instance.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 生成给定元素的别名，通常是一个 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    实例。
- en: 'E.g.:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE119]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: The [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased") function
    is used to create an ad-hoc mapping of a mapped class to a new selectable. By
    default, a selectable is generated from the normally mapped selectable (typically
    a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    ) using the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method. However, [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") can also be used to link the class to a new [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") statement. Also, the [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") function is a variant of [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") that is intended to specify a so-called “polymorphic
    selectable”, that corresponds to the union of several joined-inheritance subclasses
    at once.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased") 函数用于创建映射类到新可选择项的临时映射。默认情况下，从通常映射的可选择项（通常是一个
    [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    ）使用 [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") 方法生成可选择项。然而，[`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 还可以用于将类链接到新的 [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 语句。此外，[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") 函数是 [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    的变体，旨在指定所谓的“多态可选择项”，它对应于一次性联接继承子类的联合。'
- en: For convenience, the [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    function also accepts plain [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, such as a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct. In those cases, the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method is called on the object and
    the new [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object returned. The returned [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") is not ORM-mapped in this case.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased") 函数还接受纯粹的[`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 构造，比如[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或 [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造。在这些情况下，调用对象的 [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") 方法，并返回新的 [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") 对象。在这种情况下，返回的 [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") 对象不是ORM映射的。
- en: See also
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 参见
- en: '[ORM Entity Aliases](../../tutorial/data_select.html#tutorial-orm-entity-aliases)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM实体别名](../../tutorial/data_select.html#tutorial-orm-entity-aliases) - 在[SQLAlchemy统一教程](../../tutorial/index.html#unified-tutorial)'
- en: '[Selecting ORM Aliases](select.html#orm-queryguide-orm-aliases) - in the [ORM
    Querying Guide](index.html)'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: '[选择ORM别名](select.html#orm-queryguide-orm-aliases) - 在[ORM查询指南](index.html)'
- en: 'Parameters:'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`element` – element to be aliased. Is normally a mapped class, but for convenience
    can also be a [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") element.'
  id: totrans-619
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element` – 要别名的元素。通常是一个映射类，但为了方便，也可以是一个[`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") 元素。'
- en: '`alias` – Optional selectable unit to map the element to. This is usually used
    to link the object to a subquery, and should be an aliased select construct as
    one would produce from the [`Query.subquery()`](query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") method or the [`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery") or [`Select.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") methods of the [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct.'
  id: totrans-620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alias` - 可选的可选择单元，将元素映射到该单元。这通常用于将对象链接到子查询，并且应该是从 [`Query.subquery()`](query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") 方法或 [`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery") 或 [`Select.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") 方法以及 [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") 构造的结果中生成的别名选择构造。'
- en: '`name` – optional string name to use for the alias, if not specified by the
    `alias` parameter. The name, among other things, forms the attribute name that
    will be accessible via tuples returned by a [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. Not supported when creating aliases of [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") objects.'
  id: totrans-621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` - 如果未由 `alias` 参数指定，则用于别名的可选字符串名称。名称，除其他外，形成了通过 [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象返回的元组可访问的属性名。不支持创建 [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") 对象的别名时使用。'
- en: '`flat` – Boolean, will be passed through to the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") call so that aliases of [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") objects will alias the individual tables inside
    the join, rather than creating a subquery. This is generally supported by all
    modern databases with regards to right-nested joins and generally produces more
    efficient queries.'
  id: totrans-622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flat` - 布尔值，将传递给 [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") 调用，以便 [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") 对象的别名将别名内部的各个表，而不是创建子查询。这通常由所有现代数据库支持，关于右嵌套连接，通常会生成更有效的查询。'
- en: '`adapt_on_names` –'
  id: totrans-623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`adapt_on_names` -'
- en: 'if True, more liberal “matching” will be used when mapping the mapped columns
    of the ORM entity to those of the given selectable - a name-based match will be
    performed if the given selectable doesn’t otherwise have a column that corresponds
    to one on the entity. The use case for this is when associating an entity with
    some derived selectable such as one that uses aggregate functions:'
  id: totrans-624
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为 True，则在将 ORM 实体的映射列映射到给定可选择的列时，将使用更自由的“匹配” - 如果给定可选择的没有与实体上的列对应的列，则将执行基于名称的匹配。这种情况的用例是将实体与一些派生的可选择相关联，例如使用聚合函数的可选择：
- en: '[PRE120]'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Above, functions on `aggregated_unit_price` which refer to `.price` will return
    the `func.sum(UnitPrice.price).label('price')` column, as it is matched on the
    name “price”. Ordinarily, the “price” function wouldn’t have any “column correspondence”
    to the actual `UnitPrice.price` column as it is not a proxy of the original.
  id: totrans-626
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于 `aggregated_unit_price` 上的函数，引用 `.price` 的将返回 `func.sum(UnitPrice.price).label('price')`
    列，因为它与名称“price”匹配。通常，“price”函数不会与实际的 `UnitPrice.price` 列具有任何“列对应关系”，因为它不是原始列的代理。
- en: '[PRE121]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: Represents an “aliased” form of a mapped class for usage with Query.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 表示映射类的“别名”形式，用于与查询一起使用。
- en: The ORM equivalent of a [`alias()`](../../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") construct, this object mimics the mapped class
    using a `__getattr__` scheme and maintains a reference to a real [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: ORM 等效于 [`alias()`](../../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") 构造的对象，该对象使用 `__getattr__` 方案模拟映射类，并维护对实际 [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") 对象的引用。
- en: 'A primary purpose of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    is to serve as an alternate within a SQL statement generated by the ORM, such
    that an existing mapped entity can be used in multiple contexts. A simple example:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    的一个主要目的是在 ORM 生成的 SQL 语句中作为一个替代，以便一个现有的映射实体可以在多个上下文中使用。一个简单的例子：'
- en: '[PRE122]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    is also capable of mapping an existing mapped class to an entirely new selectable,
    provided this selectable is column- compatible with the existing mapped selectable,
    and it can also be configured in a mapping as the target of a [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). See the links below for examples.'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    还能够将一个现有的映射类映射到一个全新的可选项，前提是该可选项与现有的映射可选项兼容，并且还可以在映射中配置为 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 的目标。请参考下面的链接获取示例。'
- en: The [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object is constructed typically using the [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function. It also is produced with additional configuration
    when using the [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") function.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    对象通常使用 [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased") 函数构建。在使用
    [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic "sqlalchemy.orm.with_polymorphic")
    函数时，还可以进行附加配置。'
- en: The resulting object is an instance of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass"). This object implements an attribute scheme
    which produces the same attribute and method interface as the original mapped
    class, allowing [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    to be compatible with any attribute technique which works on the original class,
    including hybrid attributes (see [Hybrid Attributes](../extensions/hybrid.html)).
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 结果对象是 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    的一个实例。该对象实现了一个属性方案，生成与原始映射类相同的属性和方法接口，使得 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") 可与在原始类上有效的任何属性技术兼容，包括混合属性（参见 [混合属性](../extensions/hybrid.html)）。
- en: 'The [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    can be inspected for its underlying [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), aliased selectable, and other information using [`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect"):'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    可以通过 [`inspect()`](../../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    进行检查，以获取其底层的 [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")、别名可选项等信息：'
- en: '[PRE123]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: The resulting inspection object is an instance of [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp").
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 检查结果对象是 [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    的一个实例。
- en: See also
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")'
- en: '[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic "sqlalchemy.orm.with_polymorphic")'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic "sqlalchemy.orm.with_polymorphic")'
- en: '[Relationship to Aliased Class](../join_conditions.html#relationship-aliased-class)'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: '[与别名类的关系](../join_conditions.html#relationship-aliased-class)'
- en: '[Row-Limited Relationships with Window Functions](../join_conditions.html#relationship-to-window-function)'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用窗口函数限制行关系](../join_conditions.html#relationship-to-window-function)'
- en: '**Class signature**'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.orm.AliasedClass` (`sqlalchemy.inspection.Inspectable`, `sqlalchemy.orm.ORMColumnsClauseRole`)
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.orm.AliasedClass` (`sqlalchemy.inspection.Inspectable`, `sqlalchemy.orm.ORMColumnsClauseRole`)
- en: '[PRE124]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Provide an inspection interface for an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") object.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 为 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    对象提供检查接口。
- en: 'The [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    object is returned given an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") using the [`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function:'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 给定[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")，使用[`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect")函数返回[`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")对象：
- en: '[PRE125]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Attributes on [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    include:'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")的属性包括：'
- en: '`entity` - the [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    represented.'
  id: totrans-650
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entity` - 表示的[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")。'
- en: '`mapper` - the [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    mapping the underlying class.'
  id: totrans-651
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` - 映射底层类的[`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")。'
- en: '`selectable` - the [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") construct which ultimately represents an aliased
    [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct.'
  id: totrans-652
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectable` - 最终表示别名[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或[`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select")构造的[`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")构造。'
- en: '`name` - the name of the alias. Also is used as the attribute name when returned
    in a result tuple from [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query").'
  id: totrans-653
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` - 别名的名称。当从[`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")返回结果元组时，也用作属性名称。'
- en: '`with_polymorphic_mappers` - collection of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects indicating all those mappers expressed in the
    select construct for the [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass").'
  id: totrans-654
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_polymorphic_mappers` - 指示选择构造中表示所有这些映射的[`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper")对象集合，用于[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")。'
- en: '`polymorphic_on` - an alternate column or SQL expression which will be used
    as the “discriminator” for a polymorphic load.'
  id: totrans-655
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`polymorphic_on` - 用作多态加载的“鉴别器”的备用列或 SQL 表达式。'
- en: See also
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Runtime Inspection API](../../core/inspection.html)'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: '[运行时检查 API](../../core/inspection.html)'
- en: '**Class signature**'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.orm.AliasedInsp` (`sqlalchemy.orm.ORMEntityColumnsClauseRole`,
    `sqlalchemy.orm.ORMFromClauseRole`, [`sqlalchemy.sql.cache_key.HasCacheKey`](../../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey"), [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"), `sqlalchemy.util.langhelpers.MemoizedSlots`,
    `sqlalchemy.inspection.Inspectable`, `typing.Generic`)
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.orm.AliasedInsp` (`sqlalchemy.orm.ORMEntityColumnsClauseRole`,
    `sqlalchemy.orm.ORMFromClauseRole`, [`sqlalchemy.sql.cache_key.HasCacheKey`](../../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey"), [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"), `sqlalchemy.util.langhelpers.MemoizedSlots`,
    `sqlalchemy.inspection.Inspectable`, `typing.Generic`)
- en: '[PRE126]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: A grouping of SQL expressions that are returned by a [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") under one namespace.
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 由一个命名空间下的[`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")返回的
    SQL 表达式分组。
- en: The [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") essentially allows
    nesting of the tuple-based results returned by a column-oriented [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. It also is extensible via simple subclassing,
    where the primary capability to override is that of how the set of expressions
    should be returned, allowing post-processing as well as custom return types, without
    involving ORM identity-mapped classes.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")基本上允许通过简单的子类化来嵌套由基于列的[`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象返回的基于元组的结果。它还可以通过简单的子类化来扩展，其中要重写的主要功能是如何返回表达式集，允许进行后处理以及自定义返回类型，而无需涉及
    ORM 身份映射的类。'
- en: See also
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Grouping Selected Attributes with Bundles](select.html#bundles)'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Bundle 对选定的属性进行分组](select.html#bundles)'
- en: '**Members**'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.orm.Bundle.__init__), [c](#sqlalchemy.orm.Bundle.c),
    [columns](#sqlalchemy.orm.Bundle.columns), [create_row_processor()](#sqlalchemy.orm.Bundle.create_row_processor),
    [is_aliased_class](#sqlalchemy.orm.Bundle.is_aliased_class), [is_bundle](#sqlalchemy.orm.Bundle.is_bundle),
    [is_clause_element](#sqlalchemy.orm.Bundle.is_clause_element), [is_mapper](#sqlalchemy.orm.Bundle.is_mapper),
    [label()](#sqlalchemy.orm.Bundle.label), [single_entity](#sqlalchemy.orm.Bundle.single_entity)'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.orm.Bundle.__init__), [c](#sqlalchemy.orm.Bundle.c),
    [columns](#sqlalchemy.orm.Bundle.columns), [create_row_processor()](#sqlalchemy.orm.Bundle.create_row_processor),
    [is_aliased_class](#sqlalchemy.orm.Bundle.is_aliased_class), [is_bundle](#sqlalchemy.orm.Bundle.is_bundle),
    [is_clause_element](#sqlalchemy.orm.Bundle.is_clause_element), [is_mapper](#sqlalchemy.orm.Bundle.is_mapper),
    [label()](#sqlalchemy.orm.Bundle.label), [single_entity](#sqlalchemy.orm.Bundle.single_entity)'
- en: '**Class signature**'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    (`sqlalchemy.orm.ORMColumnsClauseRole`, `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    `sqlalchemy.sql.cache_key.MemoizedHasCacheKey`, `sqlalchemy.inspection.Inspectable`,
    [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"))
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: class [`sqlalchemy.orm.Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    (`sqlalchemy.orm.ORMColumnsClauseRole`, `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    `sqlalchemy.sql.cache_key.MemoizedHasCacheKey`, `sqlalchemy.inspection.Inspectable`,
    [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"))
- en: '[PRE127]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Construct a new [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle").
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个新的 [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")。
- en: 'e.g.:'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE128]'
  id: totrans-672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'Parameters:'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`name` – name of the bundle.'
  id: totrans-674
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – bundle 的名称。'
- en: '`*exprs` – columns or SQL expressions comprising the bundle.'
  id: totrans-675
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*exprs` – 组成 bundle 的列或 SQL 表达式。'
- en: '`single_entity=False` – if True, rows for this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") can be returned as a “single entity” outside of any enclosing
    tuple in the same manner as a mapped entity.'
  id: totrans-676
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`single_entity=False` – 如果为 True，则此 [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    的行可以作为“单个实体”返回，方式与映射实体相同，不在任何封闭元组之外。'
- en: '[PRE129]'
  id: totrans-677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: An alias for [`Bundle.columns`](#sqlalchemy.orm.Bundle.columns "sqlalchemy.orm.Bundle.columns").
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Bundle.columns`](#sqlalchemy.orm.Bundle.columns "sqlalchemy.orm.Bundle.columns")
    的别名。'
- en: '[PRE130]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: A namespace of SQL expressions referred to by this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") 所引用的 SQL 表达式的命名空间。
- en: 'e.g.:'
  id: totrans-681
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 例如：
- en: ''
  id: totrans-682
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE131]'
  id: totrans-683
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE131]'
- en: ''
  id: totrans-684
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Nesting of bundles is also supported:'
  id: totrans-685
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 还支持 bundle 的嵌套：
- en: ''
  id: totrans-686
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE132]'
  id: totrans-687
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE132]'
- en: See also
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`Bundle.c`](#sqlalchemy.orm.Bundle.c "sqlalchemy.orm.Bundle.c")'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Bundle.c`](#sqlalchemy.orm.Bundle.c "sqlalchemy.orm.Bundle.c")'
- en: '[PRE133]'
  id: totrans-690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Produce the “row processing” function for this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 生成此 [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") 的“行处理”函数。
- en: May be overridden by subclasses to provide custom behaviors when results are
    fetched. The method is passed the statement object and a set of “row processor”
    functions at query execution time; these processor functions when given a result
    row will return the individual attribute value, which can then be adapted into
    any kind of return data structure.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 可以被子类重写以在获取结果时提供自定义行为。该方法在查询执行时传递了语句对象和一组“行处理器”函数；这些处理器函数在给定结果行时将返回单个属性值，然后可以将其适应为任何类型的返回数据结构。
- en: 'The example below illustrates replacing the usual [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") return structure with a straight Python dictionary:'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了将通常的 [`Row`](../../core/connections.html#sqlalchemy.engine.Row "sqlalchemy.engine.Row")
    返回结构替换为直接的 Python 字典：
- en: '[PRE134]'
  id: totrans-694
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: 'A result from the above [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    will return dictionary values:'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") 的结果将返回字典值：
- en: '[PRE135]'
  id: totrans-696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: True if this object is an instance of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    的实例，则为 True。
- en: '[PRE137]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: True if this object is an instance of [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle").
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") 的实例，则为 True。
- en: '[PRE138]'
  id: totrans-701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: True if this object is an instance of [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 的实例，则为 True。
- en: '[PRE139]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: True if this object is an instance of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    的实例，则为 True。
- en: '[PRE140]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: Provide a copy of this [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    passing a new label.
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 提供此 [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") 的副本并传递一个新标签。
- en: '[PRE141]'
  id: totrans-707
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: If True, queries for a single Bundle will be returned as a single entity, rather
    than an element within a keyed tuple.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为True，则单个Bundle的查询将作为单个实体返回，而不是作为键元组中的元素。
- en: '[PRE142]'
  id: totrans-709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: Add additional WHERE criteria to the load for all occurrences of a particular
    entity.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 为特定实体的所有出现添加额外的WHERE条件。
- en: New in version 1.4.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 在1.4版本中新增。
- en: The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option is intended to add limiting criteria to a particular kind of entity in
    a query, **globally**, meaning it will apply to the entity as it appears in the
    SELECT query as well as within any subqueries, join conditions, and relationship
    loads, including both eager and lazy loaders, without the need for it to be specified
    in any particular part of the query. The rendering logic uses the same system
    used by single table inheritance to ensure a certain discriminator is applied
    to a table.
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: '[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")选项旨在向查询中的特定实体添加限制条件，**全局**地应用于实体在SELECT查询中的出现以及任何子查询、连接条件和关系加载中，包括急切加载和延迟加载器，而无需在查询的任何特定部分指定它。渲染逻辑使用与单表继承相同的系统，以确保某个鉴别器应用于表。'
- en: 'E.g., using [2.0-style](../../glossary.html#term-1) queries, we can limit the
    way the `User.addresses` collection is loaded, regardless of the kind of loading
    used:'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用[2.0风格](../../glossary.html#term-1)的查询，我们可以限制`User.addresses`集合的加载方式，无论使用何种加载方式：
- en: '[PRE143]'
  id: totrans-714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: Above, the “selectinload” for `User.addresses` will apply the given filtering
    criteria to the WHERE clause.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 上述对`User.addresses`的“selectinload”将把给定的过滤条件应用于WHERE子句。
- en: 'Another example, where the filtering will be applied to the ON clause of the
    join, in this example using [1.x style](../../glossary.html#term-1.x-style) queries:'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子，过滤将应用于连接的ON子句，在这个例子中使用[1.x风格](../../glossary.html#term-1.x-style)的查询：
- en: '[PRE144]'
  id: totrans-717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: 'The primary purpose of [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is to use it in the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event handler to ensure that all
    occurrences of a particular entity are filtered in a certain way, such as filtering
    for access control roles. It also can be used to apply criteria to relationship
    loads. In the example below, we can apply a certain set of rules to all queries
    emitted by a particular [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"):'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: '[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")的主要目的是在[`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件处理程序中使用它，以确保以某种方式过滤特定实体的所有出现，例如过滤访问控制角色。它还可以用于应用关系加载的条件。在下面的例子中，我们可以对特定[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")发出的所有查询应用一定的规则：'
- en: '[PRE145]'
  id: totrans-719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: In the above example, the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event will intercept all queries
    emitted using the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    For those queries which are SELECT statements and are not attribute or relationship
    loads a custom [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option is added to the query. The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option will be used in the given statement
    and will also be automatically propagated to all relationship loads that descend
    from this query.
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，[`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件将拦截使用[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")发出的所有查询。对于那些是SELECT语句且不是属性或关系加载的查询，将为查询添加自定义的[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项。[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项将用于给定语句，并将自动传播到所有从此查询派生的关系加载。
- en: The criteria argument given is a `lambda` that accepts a `cls` argument. The
    given class will expand to include all mapped subclass and need not itself be
    a mapped class.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的criteria参数是一个接受`cls`参数的`lambda`。给定的类将扩展以包括所有映射的子类，本身不必是一个映射的类。
- en: Tip
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: When using [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option in conjunction with the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") loader option, it’s important to note that [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") only affects the part of the query that
    determines what SQL is rendered in terms of the WHERE and FROM clauses. The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option does not affect the rendering of the SELECT
    statement outside of the columns clause, so does not have any interaction with
    the [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option. However, the way things “work” is that [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") is meant to be used with a query that is already
    selecting from the additional entities in some way, where [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") can apply it’s additional criteria.
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 当与[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")选项一起使用时，需要注意[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")仅影响查询中确定渲染的SQL的部分，即WHERE和FROM子句。[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")选项不会影响SELECT语句的渲染，除了列子句外的其他部分，因此与[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项没有任何交互。然而，“工作”的方式是[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")旨在与已经以某种方式从其他实体进行选择的查询一起使用，而[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")可以应用其额外的条件。
- en: 'In the example below, assuming a mapping relationship as `A -> A.bs -> B`,
    the given [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option will affect the way in which the JOIN is rendered:'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，假设一个映射关系为`A -> A.bs -> B`，给定的[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项将影响JOIN的渲染方式：
- en: '[PRE146]'
  id: totrans-725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: 'Above, the given [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option will affect the ON clause of the
    JOIN that is specified by `.join(A.bs)`, so is applied as expected. The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option has the effect that columns from `B` are
    added to the columns clause:'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，给定的[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")选项将影响由`.join(A.bs)`指定的JOIN的ON子句，因此会按预期应用。[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")选项会导致`B`的列被添加到列子句中：
- en: '[PRE147]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: The use of the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option within the above statement has no effect
    on the behavior of the [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option. If the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option were omitted, the SQL would be the same
    as regards the FROM and WHERE clauses, where [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") continues to add its criteria to the ON
    clause of the JOIN. The addition of [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") only affects the columns clause, in that additional
    columns against `b` are added which are then consumed by the ORM to produce `B`
    instances.
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述语句中使用[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")选项对[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项的行为没有影响。如果省略[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")选项，则SQL将与FROM和WHERE子句相关，而[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")将继续将其条件添加到JOIN的ON子句中。添加[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")仅会影响列子句，即会添加对`b`的额外列，然后ORM会使用这些列来生成`B`实例。
- en: Warning
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The use of a lambda inside of the call to [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is only invoked **once per unique class**.
    Custom functions should not be invoked within this lambda. See [Using Lambdas
    to add significant speed gains to statement production](../../core/connections.html#engine-lambda-caching)
    for an overview of the “lambda SQL” feature, which is for advanced use only.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    内部的 lambda 中，每个唯一类只调用一次 **lambda**。自定义函数不应在此 lambda 内部调用。有关“lambda SQL”功能的概述，请参阅[使用
    Lambda 为语句生成添加显著的速度增益](../../core/connections.html#engine-lambda-caching)，该功能仅供高级使用。
- en: 'Parameters:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`entity_or_base` – a mapped class, or a class that is a super class of a particular
    set of mapped classes, to which the rule will apply.'
  id: totrans-732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entity_or_base` – 一个映射类，或者是一组特定映射类的超类，规则将适用于这些类。'
- en: '`where_criteria` –'
  id: totrans-733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`where_criteria` –'
- en: a Core SQL expression that applies limiting criteria. This may also be a “lambda:”
    or Python function that accepts a target class as an argument, when the given
    class is a base with many different mapped subclasses.
  id: totrans-734
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个核心 SQL 表达式，应用限制条件。当给定类是具有许多不同映射子类的基类时，这也可以是“lambda:”或 Python 函数，接受目标类作为参数。
- en: Note
  id: totrans-735
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: To support pickling, use a module-level Python function to produce the SQL expression
    instead of a lambda or a fixed SQL expression, which tend to not be picklable.
  id: totrans-736
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了支持 pickling，使用模块级 Python 函数来生成 SQL 表达式，而不是 lambda 或固定的 SQL 表达式，后者往往不可 picklable。
- en: '`include_aliases` – if True, apply the rule to [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") constructs as well.'
  id: totrans-737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_aliases` – 如果为 True，则也将规则应用于 [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 构造。'
- en: '`propagate_to_loaders` –'
  id: totrans-738
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propagate_to_loaders` –'
- en: defaults to True, apply to relationship loaders such as lazy loaders. This indicates
    that the option object itself including SQL expression is carried along with each
    loaded instance. Set to `False` to prevent the object from being assigned to individual
    instances.
  id: totrans-739
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 True，适用于关系加载器，例如延迟加载器。这表示选项对象本身，包括 SQL 表达式，将与每个加载的实例一起传递。设置为 `False` 以防止对象分配给各个实例。
- en: See also
  id: totrans-740
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Query Events](../examples.html#examples-session-orm-events) - includes
    examples of using [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria").'
  id: totrans-741
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM 查询事件](../examples.html#examples-session-orm-events) - 包括使用 [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") 的示例。'
- en: '[Adding global WHERE / ON criteria](../session_events.html#do-orm-execute-global-criteria)
    - basic example on how to combine [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") with the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event.'
  id: totrans-742
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[添加全局 WHERE / ON 条件](../session_events.html#do-orm-execute-global-criteria)
    - 如何将 [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    与 [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") 事件结合的基本示例。'
- en: '`track_closure_variables` –'
  id: totrans-743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`track_closure_variables` –'
- en: when False, closure variables inside of a lambda expression will not be used
    as part of any cache key. This allows more complex expressions to be used inside
    of a lambda expression but requires that the lambda ensures it returns the identical
    SQL every time given a particular class.
  id: totrans-744
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 False 时，lambda 表达式内部的闭包变量不会用作任何缓存键的一部分。这允许在 lambda 表达式内部使用更复杂的表达式，但需要 lambda
    确保每次给定特定类时返回相同的 SQL。
- en: New in version 1.4.0b2.
  id: totrans-745
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.4.0b2 中新增。
- en: '[PRE148]'
  id: totrans-746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: Produce an inner join between left and right clauses.
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 生成左右子句之间的内部连接。
- en: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") is an extension to the
    core join interface provided by [`join()`](../../core/selectable.html#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join"), where the left and right selectable may be
    not only core selectable objects such as [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), but also mapped classes or [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instances. The “on” clause can be a SQL expression
    or an ORM mapped attribute referencing a configured [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")是对[`join()`](../../core/selectable.html#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join")提供的核心连接接口的扩展，其中左右可选择的对象不仅可以是核心可选择的对象，如[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，还可以是映射类或[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")实例。"on"子句可以是 SQL 表达式，也可以是引用已配置的[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的 ORM 映射属性。'
- en: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") is not commonly needed
    in modern usage, as its functionality is encapsulated within that of the [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Query.join()`](query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") methods. which feature a significant amount of automation
    beyond [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") by itself. Explicit
    use of [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") with ORM-enabled
    SELECT statements involves use of the [`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method, as in:'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") 在现代用法中通常不需要，因为其功能已经封装在[`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join")和[`Query.join()`](query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join")方法中。这些方法比单独使用[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")具有更多的自动化功能。在启用
    ORM 的 SELECT 语句中显式使用[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")，需要使用[`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from")方法，如下所示：'
- en: '[PRE149]'
  id: totrans-750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'In modern SQLAlchemy the above join can be written more succinctly as:'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代的 SQLAlchemy 中，上述连接可以更简洁地编写为：
- en: '[PRE150]'
  id: totrans-752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: Warning
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: using [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") directly may not
    work properly with modern ORM options such as [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria"). It is strongly recommended to use the
    idiomatic join patterns provided by methods such as [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Select.join_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from") when creating ORM joins.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 直接使用[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")可能无法与现代 ORM 选项（如[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")）正常工作。强烈建议在创建 ORM 连接时使用诸如[`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join")和[`Select.join_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from")等方法提供的惯用连接模式。
- en: See also
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Joins](select.html#orm-queryguide-joins) - in the [ORM Querying Guide](index.html)
    for background on idiomatic ORM join patterns'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: '[连接](select.html#orm-queryguide-joins) - 了解 ORM 连接模式的背景知识'
- en: '[PRE151]'
  id: totrans-757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: Produce a left outer join between left and right clauses.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 生成左外连接(left outer join)左边和右边子句之间的关联。
- en: This is the “outer join” version of the [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")
    function, featuring the same behavior except that an OUTER JOIN is generated.
    See that function’s documentation for other usage details.
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")函数的“外连接”版本，具有相同的行为，只是生成了
    OUTER JOIN。请参阅该函数的文档以获取其他用法细节。
- en: '[PRE152]'
  id: totrans-760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: Create filtering criterion that relates this query’s primary entity to the given
    related instance, using established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration.
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 创建过滤条件，将此查询的主实体与给定的相关实例相关联，使用已建立的[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")配置。
- en: 'E.g.:'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE153]'
  id: totrans-763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: The SQL rendered is the same as that rendered when a lazy loader would fire
    off from the given parent on that attribute, meaning that the appropriate state
    is taken from the parent object in Python without the need to render joins to
    the parent table in the rendered statement.
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染的SQL与在给定父对象上的惰性加载程序触发时所渲染的SQL相同，这意味着在Python中从父对象中取得适当的状态而无需将父表的联接渲染到渲染的语句中。
- en: 'The given property may also make use of [`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") to indicate the left side of the criteria:'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的属性也可以使用 [`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") 来指示条件的左侧：
- en: '[PRE154]'
  id: totrans-766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: 'The above use is equivalent to using the `from_entity()` argument:'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 上述用法等同于使用 `from_entity()` 参数：
- en: '[PRE155]'
  id: totrans-768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'Parameters:'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – An instance which has some [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  id: totrans-770
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 一个具有一些 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 的实例。'
- en: '`property` – Class-bound attribute, which indicates what relationship from
    the instance should be used to reconcile the parent/child relationship.'
  id: totrans-771
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`property` – 类绑定属性，表示应该使用实例中的哪种关系来协调父/子关系。'
- en: '`from_entity` –'
  id: totrans-772
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from_entity` –'
- en: Entity in which to consider as the left side. This defaults to the “zero” entity
    of the [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query") itself.
  id: totrans-773
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要考虑为左侧的实体。默认为 [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    本身的“零”实体。
- en: 'New in version 1.2.  #### Inspecting entities and columns from ORM-enabled
    SELECT and DML statements'
  id: totrans-774
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版1.2中新增。#### 从ORM启用的SELECT和DML语句中检查实体和列
- en: The [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, as well as the [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") and [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") constructs (for the latter DML constructs,
    as of SQLAlchemy 1.4.33), all support the ability to inspect the entities in which
    these statements are created against, as well as the columns and datatypes that
    would be returned in a result set.
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select "sqlalchemy.sql.expression.select")
    构造，以及 [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")、[`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 和 [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") 构造（对于后两个DML构造，在SQLAlchemy 1.4.33中），都支持检查这些语句所针对的实体，以及将在结果集中返回的列和数据类型。'
- en: 'For a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object, this information is available from
    the [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute. This attribute
    operates in the same way as the legacy [`Query.column_descriptions`](query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") attribute. The format returned is
    a list of dictionaries:'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    对象，此信息可从 [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") 属性获得。此属性的操作方式与传统的 [`Query.column_descriptions`](query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") 属性相同。返回的格式是一个字典列表：
- en: '[PRE156]'
  id: totrans-777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'When [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") is used with non-ORM objects
    such as plain [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Column`](../../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects, the entries will contain basic information about individual columns returned
    in all cases:'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 当 [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") 与非ORM对象一起使用，如普通的 [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") 或 [`Column`](../../core/metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column") 对象时，条目将在所有情况下包含有关返回的各个列的基本信息：
- en: '[PRE157]'
  id: totrans-779
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'Changed in version 1.4.33: The [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute now returns
    a value when used against a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") that is not ORM-enabled. Previously, this
    would raise `NotImplementedError`.'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.33 中的更改：当用于未启用 ORM 的 [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 时，[`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") 属性现在返回一个值。先前，这会引发 `NotImplementedError`。
- en: 'For [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    and [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    constructs, there are two separate attributes. One is [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") which returns information
    about the primary ORM entity and database table which the DML construct would
    be affecting:'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: 对于[`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert")，[`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") 和 [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") 构造，存在两个单独的属性。一个是[`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description")，它返回有关 DML 构造将影响的主要
    ORM 实体和数据库表的信息：
- en: '[PRE158]'
  id: totrans-782
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: Tip
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: Tip
- en: The [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") includes an entry `"table"`
    which is actually the **table to be inserted, updated or deleted** by the statement,
    which is **not** always the same as the SQL “selectable” to which the class may
    be mapped. For example, in a joined-table inheritance scenario, `"table"` will
    refer to the local table for the given entity.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: '[`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") 包括一个条目 `"table"`，实际上是语句要插入、更新或删除的**表**，这通常**不**与类可能被映射到的
    SQL "selectable" 相同。例如，在联合表继承场景中，`"table"` 将引用给定实体的本地表。'
- en: 'The other is [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") which delivers
    information about the columns present in the RETURNING collection in a manner
    roughly similar to that of [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions"):'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个是 [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions")，它以一种与[`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions")大致相似的方式提供了有关 RETURNING
    集合中存在的列的信息：
- en: '[PRE159]'
  id: totrans-786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'New in version 1.4.33: Added the [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") and [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") attributes.'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4.33 中的新内容：增加了 [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") 和 [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") 属性。
- en: '#### Additional ORM API Constructs'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: '#### 其他 ORM API 构造'
- en: '| Object Name | Description |'
  id: totrans-789
  prefs: []
  type: TYPE_TB
  zh: '| 对象名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-790
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| [aliased](#sqlalchemy.orm.aliased)(element[, alias, name, flat, ...]) | Produce
    an alias of the given element, usually an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instance. |'
  id: totrans-791
  prefs: []
  type: TYPE_TB
  zh: '| [aliased](#sqlalchemy.orm.aliased)(element[, alias, name, flat, ...]) | 生成给定元素的别名，通常是
    [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    实例。 |'
- en: '| [AliasedClass](#sqlalchemy.orm.util.AliasedClass) | Represents an “aliased”
    form of a mapped class for usage with Query. |'
  id: totrans-792
  prefs: []
  type: TYPE_TB
  zh: '| [AliasedClass](#sqlalchemy.orm.util.AliasedClass) | 代表映射类的“别名”形式，可用于查询。 |'
- en: '| [AliasedInsp](#sqlalchemy.orm.util.AliasedInsp) | Provide an inspection interface
    for an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object. |'
  id: totrans-793
  prefs: []
  type: TYPE_TB
  zh: '| [AliasedInsp](#sqlalchemy.orm.util.AliasedInsp) | 为[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")对象提供检查接口。 |'
- en: '| [Bundle](#sqlalchemy.orm.Bundle) | A grouping of SQL expressions that are
    returned by a [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    under one namespace. |'
  id: totrans-794
  prefs: []
  type: TYPE_TB
  zh: '| [Bundle](#sqlalchemy.orm.Bundle) | 由一个命名空间下的一个[`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")返回的SQL表达式组合。 |'
- en: '| [join](#sqlalchemy.orm.join)(left, right[, onclause, isouter, ...]) | Produce
    an inner join between left and right clauses. |'
  id: totrans-795
  prefs: []
  type: TYPE_TB
  zh: '| [join](#sqlalchemy.orm.join)(left, right[, onclause, isouter, ...]) | 在左右子句之间产生内连接。
    |'
- en: '| [outerjoin](#sqlalchemy.orm.outerjoin)(left, right[, onclause, full]) | Produce
    a left outer join between left and right clauses. |'
  id: totrans-796
  prefs: []
  type: TYPE_TB
  zh: '| [outerjoin](#sqlalchemy.orm.outerjoin)(left, right[, onclause, full]) | 在左右子句之间生成左外连接。
    |'
- en: '| [with_loader_criteria](#sqlalchemy.orm.with_loader_criteria)(entity_or_base,
    where_criteria[, loader_only, include_aliases, ...]) | Add additional WHERE criteria
    to the load for all occurrences of a particular entity. |'
  id: totrans-797
  prefs: []
  type: TYPE_TB
  zh: '| [with_loader_criteria](#sqlalchemy.orm.with_loader_criteria)(entity_or_base,
    where_criteria[, loader_only, include_aliases, ...]) | 为特定实体的所有出现添加额外的WHERE条件以加载。
    |'
- en: '| [with_parent](#sqlalchemy.orm.with_parent)(instance, prop[, from_entity])
    | Create filtering criterion that relates this query’s primary entity to the given
    related instance, using established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration. |'
  id: totrans-798
  prefs: []
  type: TYPE_TB
  zh: '| [with_parent](#sqlalchemy.orm.with_parent)(instance, prop[, from_entity])
    | 创建过滤条件，将此查询的主要实体与给定的相关实例关联起来，使用已建立的[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")配置。 |'
- en: '[PRE160]'
  id: totrans-799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: Produce an alias of the given element, usually an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instance.
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 生成给定元素的别名，通常是一个[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")实例。
- en: 'E.g.:'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE161]'
  id: totrans-802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: The [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased") function
    is used to create an ad-hoc mapping of a mapped class to a new selectable. By
    default, a selectable is generated from the normally mapped selectable (typically
    a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    ) using the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method. However, [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") can also be used to link the class to a new [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") statement. Also, the [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") function is a variant of [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") that is intended to specify a so-called “polymorphic
    selectable”, that corresponds to the union of several joined-inheritance subclasses
    at once.
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: '[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")函数用于创建将映射类映射到新可选择项的临时映射。
    默认情况下，可选择项是使用[`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")方法从通常映射的可选择项（通常是[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")）生成的。但是，[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")也可以用于将类链接到新的[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")语句。 此外，[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")函数是[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")的变体，旨在指定所谓的“多态可选择项”，该可选择项对应于一次性联接继承子类的联合。'
- en: For convenience, the [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    function also accepts plain [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, such as a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct. In those cases, the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method is called on the object and
    the new [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object returned. The returned [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") is not ORM-mapped in this case.
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 为方便起见，[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased") 函数还接受普通的[`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")构造，例如[`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")或[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造。在这些情况下，该对象上调用[`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")方法，并返回新的[`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")对象。在这种情况下，返回的[`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")不是 ORM 映射的。
- en: See also
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Entity Aliases](../../tutorial/data_select.html#tutorial-orm-entity-aliases)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: '[ORM 实体别名](../../tutorial/data_select.html#tutorial-orm-entity-aliases) - 在[SQLAlchemy
    统一教程](../../tutorial/index.html#unified-tutorial)中'
- en: '[Selecting ORM Aliases](select.html#orm-queryguide-orm-aliases) - in the [ORM
    Querying Guide](index.html)'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: '[选择 ORM 别名](select.html#orm-queryguide-orm-aliases) - 在[ORM 查询指南](index.html)中'
- en: 'Parameters:'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`element` – element to be aliased. Is normally a mapped class, but for convenience
    can also be a [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") element.'
  id: totrans-809
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`element` - 要别名化的元素。通常是一个映射的类，但出于方便起见，也可以是一个[`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause")元素。'
- en: '`alias` – Optional selectable unit to map the element to. This is usually used
    to link the object to a subquery, and should be an aliased select construct as
    one would produce from the [`Query.subquery()`](query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") method or the [`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery") or [`Select.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") methods of the [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct.'
  id: totrans-810
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alias` - 可选的可选择单元，将元素映射到该单元。这通常用于将对象链接到子查询，并且应该是一个别名选择构造，就像从[`Query.subquery()`](query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery")方法或[`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery")或[`Select.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias")方法从[`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select")构造中产生的那样。'
- en: '`name` – optional string name to use for the alias, if not specified by the
    `alias` parameter. The name, among other things, forms the attribute name that
    will be accessible via tuples returned by a [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. Not supported when creating aliases of [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") objects.'
  id: totrans-811
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` - 可选的字符串名称，用于别名，如果未由`alias`参数指定。该名称，除其他外，形成了由[`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query")对象返回的元组访问的属性名称。在创建[`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象的别名时不受支持。'
- en: '`flat` – Boolean, will be passed through to the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") call so that aliases of [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") objects will alias the individual tables inside
    the join, rather than creating a subquery. This is generally supported by all
    modern databases with regards to right-nested joins and generally produces more
    efficient queries.'
  id: totrans-812
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flat` – 布尔值，将传递给[`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias")调用，以便将[`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join")对象的别名别名为加入其中的各个表，而不是创建子查询。这通常由所有现代数据库支持，关于右嵌套连接通常会产生更有效的查询。'
- en: '`adapt_on_names` –'
  id: totrans-813
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`adapt_on_names` –'
- en: 'if True, more liberal “matching” will be used when mapping the mapped columns
    of the ORM entity to those of the given selectable - a name-based match will be
    performed if the given selectable doesn’t otherwise have a column that corresponds
    to one on the entity. The use case for this is when associating an entity with
    some derived selectable such as one that uses aggregate functions:'
  id: totrans-814
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果为True，则在将ORM实体的映射列与给定可选择的列进行映射时将使用更宽松的“匹配” - 如果给定的可选择没有与实体上的列对应的列，则将执行基于名称的匹配。这种用例是当将实体与一些派生可选择关联时，例如使用聚合函数的可选择：
- en: '[PRE162]'
  id: totrans-815
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Above, functions on `aggregated_unit_price` which refer to `.price` will return
    the `func.sum(UnitPrice.price).label('price')` column, as it is matched on the
    name “price”. Ordinarily, the “price” function wouldn’t have any “column correspondence”
    to the actual `UnitPrice.price` column as it is not a proxy of the original.
  id: totrans-816
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上面，对`aggregated_unit_price`上的函数引用`.price`将返回`func.sum(UnitPrice.price).label('price')`列，因为它与名称“price”匹配。通常情况下，“price”函数不会与实际的`UnitPrice.price`列有任何“列对应”，因为它不是原始列的代理。
- en: '[PRE163]'
  id: totrans-817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: Represents an “aliased” form of a mapped class for usage with Query.
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: 表示用于与查询一起使用的映射类的“别名”形式。
- en: The ORM equivalent of a [`alias()`](../../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") construct, this object mimics the mapped class
    using a `__getattr__` scheme and maintains a reference to a real [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object.
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: ORM中的[`alias()`](../../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias")构造的等价物，此对象使用`__getattr__`方案模仿映射类，并维护对真实[`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias")对象的引用。
- en: 'A primary purpose of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    is to serve as an alternate within a SQL statement generated by the ORM, such
    that an existing mapped entity can be used in multiple contexts. A simple example:'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")的一个主要目的是在ORM生成的SQL语句中作为一个替代品，使得现有的映射实体可以在多个上下文中使用。一个简单的例子：'
- en: '[PRE164]'
  id: totrans-821
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    is also capable of mapping an existing mapped class to an entirely new selectable,
    provided this selectable is column- compatible with the existing mapped selectable,
    and it can also be configured in a mapping as the target of a [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). See the links below for examples.'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")还能够将现有的映射类映射到一个全新的可选择项，只要此可选择项与现有的映射可选择项兼容，并且它还可以被配置为[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的目标。请参阅下面的链接获取示例。'
- en: The [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object is constructed typically using the [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function. It also is produced with additional configuration
    when using the [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") function.
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")对象通常使用[`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased")函数构造。当使用[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic")函数时，还会使用附加配置生成该对象。'
- en: The resulting object is an instance of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass"). This object implements an attribute scheme
    which produces the same attribute and method interface as the original mapped
    class, allowing [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    to be compatible with any attribute technique which works on the original class,
    including hybrid attributes (see [Hybrid Attributes](../extensions/hybrid.html)).
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 结果对象是 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    的一个实例。此对象实现了与原始映射类相同的属性和方法接口，允许 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") 兼容任何在原始类上工作的属性技术，包括混合属性（参见[混合属性](../extensions/hybrid.html)）。
- en: 'The [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    can be inspected for its underlying [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), aliased selectable, and other information using [`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect"):'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 [`inspect()`](../../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    检查 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    的底层 [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")、别名可选项和其他信息：
- en: '[PRE165]'
  id: totrans-826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: The resulting inspection object is an instance of [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp").
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 结果检查对象是 [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    的一个实例。
- en: See also
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: '[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")'
- en: '[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic "sqlalchemy.orm.with_polymorphic")'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: '[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic "sqlalchemy.orm.with_polymorphic")'
- en: '[Relationship to Aliased Class](../join_conditions.html#relationship-aliased-class)'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: '[与别名类的关系](../join_conditions.html#relationship-aliased-class)'
- en: '[Row-Limited Relationships with Window Functions](../join_conditions.html#relationship-to-window-function)'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: '[带窗口函数的行限制关系](../join_conditions.html#relationship-to-window-function)'
- en: '**Class signature**'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.orm.AliasedClass` (`sqlalchemy.inspection.Inspectable`, `sqlalchemy.orm.ORMColumnsClauseRole`)
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.orm.AliasedClass`（`sqlalchemy.inspection.Inspectable`，`sqlalchemy.orm.ORMColumnsClauseRole`）
- en: '[PRE166]'
  id: totrans-835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: Provide an inspection interface for an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") object.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 为 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    对象提供检查接口。
- en: 'The [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    object is returned given an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") using the [`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function:'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [`inspect()`](../../core/inspection.html#sqlalchemy.inspect "sqlalchemy.inspect")
    函数给定 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    返回 [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    对象：
- en: '[PRE167]'
  id: totrans-838
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: 'Attributes on [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    include:'
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: '[`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    上的属性包括：'
- en: '`entity` - the [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    represented.'
  id: totrans-840
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entity` - 代表的 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")。'
- en: '`mapper` - the [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    mapping the underlying class.'
  id: totrans-841
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapper` - [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    映射了底层类。'
- en: '`selectable` - the [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") construct which ultimately represents an aliased
    [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct.'
  id: totrans-842
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selectable` - 最终表示别名的 [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") 构造或 [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") 构造。'
- en: '`name` - the name of the alias. Also is used as the attribute name when returned
    in a result tuple from [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query").'
  id: totrans-843
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` - 别名的名称。当从 [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    中的结果元组中返回时，也用作属性名称。'
- en: '`with_polymorphic_mappers` - collection of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects indicating all those mappers expressed in the
    select construct for the [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass").'
  id: totrans-844
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`with_polymorphic_mappers` - 包含表示选择结构中所有那些表示的 [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") 对象的集合，用于 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass")。'
- en: '`polymorphic_on` - an alternate column or SQL expression which will be used
    as the “discriminator” for a polymorphic load.'
  id: totrans-845
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`polymorphic_on` - 作为多态加载的“鉴别器”使用的替代列或 SQL 表达式。'
- en: See also
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Runtime Inspection API](../../core/inspection.html)'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: '[运行时检测 API](../../core/inspection.html)'
- en: '**Class signature**'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class `sqlalchemy.orm.AliasedInsp` (`sqlalchemy.orm.ORMEntityColumnsClauseRole`,
    `sqlalchemy.orm.ORMFromClauseRole`, [`sqlalchemy.sql.cache_key.HasCacheKey`](../../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey"), [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"), `sqlalchemy.util.langhelpers.MemoizedSlots`,
    `sqlalchemy.inspection.Inspectable`, `typing.Generic`)
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `sqlalchemy.orm.AliasedInsp` (`sqlalchemy.orm.ORMEntityColumnsClauseRole`,
    `sqlalchemy.orm.ORMFromClauseRole`, [`sqlalchemy.sql.cache_key.HasCacheKey`](../../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey"), [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"), `sqlalchemy.util.langhelpers.MemoizedSlots`,
    `sqlalchemy.inspection.Inspectable`, `typing.Generic`)
- en: '[PRE168]'
  id: totrans-850
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: A grouping of SQL expressions that are returned by a [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") under one namespace.
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 一组由 [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query") 返回的 SQL
    表达式，在一个命名空间下。
- en: The [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") essentially allows
    nesting of the tuple-based results returned by a column-oriented [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. It also is extensible via simple subclassing,
    where the primary capability to override is that of how the set of expressions
    should be returned, allowing post-processing as well as custom return types, without
    involving ORM identity-mapped classes.
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") 实质上允许嵌套列导向 [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") 对象返回的基于元组的结果。它还可以通过简单的子类扩展，其中主要的重写功能是如何返回表达式集，允许后处理以及自定义返回类型，而不涉及
    ORM 身份映射类。'
- en: See also
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参见
- en: '[Grouping Selected Attributes with Bundles](select.html#bundles)'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Bundles 分组选择的属性](select.html#bundles)'
- en: '**Members**'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: '**成员**'
- en: '[__init__()](#sqlalchemy.orm.Bundle.__init__), [c](#sqlalchemy.orm.Bundle.c),
    [columns](#sqlalchemy.orm.Bundle.columns), [create_row_processor()](#sqlalchemy.orm.Bundle.create_row_processor),
    [is_aliased_class](#sqlalchemy.orm.Bundle.is_aliased_class), [is_bundle](#sqlalchemy.orm.Bundle.is_bundle),
    [is_clause_element](#sqlalchemy.orm.Bundle.is_clause_element), [is_mapper](#sqlalchemy.orm.Bundle.is_mapper),
    [label()](#sqlalchemy.orm.Bundle.label), [single_entity](#sqlalchemy.orm.Bundle.single_entity)'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: '[__init__()](#sqlalchemy.orm.Bundle.__init__), [c](#sqlalchemy.orm.Bundle.c),
    [columns](#sqlalchemy.orm.Bundle.columns), [create_row_processor()](#sqlalchemy.orm.Bundle.create_row_processor),
    [is_aliased_class](#sqlalchemy.orm.Bundle.is_aliased_class), [is_bundle](#sqlalchemy.orm.Bundle.is_bundle),
    [is_clause_element](#sqlalchemy.orm.Bundle.is_clause_element), [is_mapper](#sqlalchemy.orm.Bundle.is_mapper),
    [label()](#sqlalchemy.orm.Bundle.label), [single_entity](#sqlalchemy.orm.Bundle.single_entity)'
- en: '**Class signature**'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: '**类签名**'
- en: class [`sqlalchemy.orm.Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    (`sqlalchemy.orm.ORMColumnsClauseRole`, `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    `sqlalchemy.sql.cache_key.MemoizedHasCacheKey`, `sqlalchemy.inspection.Inspectable`,
    [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"))
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: 类 [`sqlalchemy.orm.Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    (`sqlalchemy.orm.ORMColumnsClauseRole`, `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    `sqlalchemy.sql.cache_key.MemoizedHasCacheKey`, `sqlalchemy.inspection.Inspectable`,
    [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"))
- en: '[PRE169]'
  id: totrans-859
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: Construct a new [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle").
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的 [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")。
- en: 'e.g.:'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE170]'
  id: totrans-862
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'Parameters:'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: '参数:'
- en: '`name` – name of the bundle.'
  id: totrans-864
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name` – bundle 的名称。'
- en: '`*exprs` – columns or SQL expressions comprising the bundle.'
  id: totrans-865
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`*exprs` – 组成 bundle 的列或 SQL 表达式。'
- en: '`single_entity=False` – if True, rows for this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") can be returned as a “single entity” outside of any enclosing
    tuple in the same manner as a mapped entity.'
  id: totrans-866
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`single_entity=False` – 如果为 True，则此 [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    的行可以像映射实体一样在任何封闭元组之外返回。'
- en: '[PRE171]'
  id: totrans-867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: An alias for [`Bundle.columns`](#sqlalchemy.orm.Bundle.columns "sqlalchemy.orm.Bundle.columns").
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Bundle.columns`](#sqlalchemy.orm.Bundle.columns "sqlalchemy.orm.Bundle.columns")
    的别名。'
- en: '[PRE172]'
  id: totrans-869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: A namespace of SQL expressions referred to by this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 此 [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") 引用的 SQL 表达式的命名空间。
- en: 'e.g.:'
  id: totrans-871
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 例如：
- en: ''
  id: totrans-872
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE173]'
  id: totrans-873
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE173]'
- en: ''
  id: totrans-874
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Nesting of bundles is also supported:'
  id: totrans-875
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 支持嵌套捆绑：
- en: ''
  id: totrans-876
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE174]'
  id: totrans-877
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE174]'
- en: See also
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见
- en: '[`Bundle.c`](#sqlalchemy.orm.Bundle.c "sqlalchemy.orm.Bundle.c")'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Bundle.c`](#sqlalchemy.orm.Bundle.c "sqlalchemy.orm.Bundle.c")'
- en: '[PRE175]'
  id: totrans-880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: Produce the “row processing” function for this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
  zh: 生成此 [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") 的“行处理”函数。
- en: May be overridden by subclasses to provide custom behaviors when results are
    fetched. The method is passed the statement object and a set of “row processor”
    functions at query execution time; these processor functions when given a result
    row will return the individual attribute value, which can then be adapted into
    any kind of return data structure.
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 可以被子类覆盖以在获取结果时提供自定义行为。 方法在查询执行时传递语句对象和一组“行处理”函数；给定结果行时，这些处理函数将返回单个属性值，然后可以将其调整为任何类型的返回数据结构。
- en: 'The example below illustrates replacing the usual [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") return structure with a straight Python dictionary:'
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例说明了用直接的 Python 字典替换通常的 [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") 返回结构：
- en: '[PRE176]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'A result from the above [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    will return dictionary values:'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") 的结果将返回字典值：
- en: '[PRE177]'
  id: totrans-886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-887
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: True if this object is an instance of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    的实例，则为 True。
- en: '[PRE179]'
  id: totrans-889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: True if this object is an instance of [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle").
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") 的实例，则为 True。
- en: '[PRE180]'
  id: totrans-891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: True if this object is an instance of [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") 的实例，则为 True。
- en: '[PRE181]'
  id: totrans-893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: True if this object is an instance of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此对象是 [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    的实例，则为 True。
- en: '[PRE182]'
  id: totrans-895
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: Provide a copy of this [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    passing a new label.
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
  zh: 提供此 [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") 的副本并传递一个新的标签。
- en: '[PRE183]'
  id: totrans-897
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: If True, queries for a single Bundle will be returned as a single entity, rather
    than an element within a keyed tuple.
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为 True，则查询单个 Bundle 将返回单个实体，而不是键入元组中的元素。
- en: '[PRE184]'
  id: totrans-899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: Add additional WHERE criteria to the load for all occurrences of a particular
    entity.
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 为特定实体的所有出现添加额外的 WHERE 条件到加载中。
- en: New in version 1.4.
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
  zh: 版本 1.4 中的新功能。
- en: The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option is intended to add limiting criteria to a particular kind of entity in
    a query, **globally**, meaning it will apply to the entity as it appears in the
    SELECT query as well as within any subqueries, join conditions, and relationship
    loads, including both eager and lazy loaders, without the need for it to be specified
    in any particular part of the query. The rendering logic uses the same system
    used by single table inheritance to ensure a certain discriminator is applied
    to a table.
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: '[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    选项旨在向查询中的特定类型的实体添加限制条件，**全局**，这意味着它将应用于实体在 SELECT 查询中出现的方式以及在任何子查询、连接条件和关系加载中，包括急切加载和惰性加载，而无需在查询的任何特定部分指定它。
    渲染逻辑使用与单表继承相同的系统来确保某个特定的鉴别器应用于表。'
- en: 'E.g., using [2.0-style](../../glossary.html#term-1) queries, we can limit the
    way the `User.addresses` collection is loaded, regardless of the kind of loading
    used:'
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用 [2.0 样式](../../glossary.html#term-1) 查询，我们可以限制 `User.addresses` 集合的加载方式，而不管使用的加载类型：
- en: '[PRE185]'
  id: totrans-904
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: Above, the “selectinload” for `User.addresses` will apply the given filtering
    criteria to the WHERE clause.
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 上述中，“selectinload” 用于 `User.addresses` 将应用给定的过滤条件到 WHERE 子句。
- en: 'Another example, where the filtering will be applied to the ON clause of the
    join, in this example using [1.x style](../../glossary.html#term-1.x-style) queries:'
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个示例，其中过滤将应用于连接的 ON 子句，在此示例中使用 [1.x 样式](../../glossary.html#term-1.x-style)
    查询：
- en: '[PRE186]'
  id: totrans-907
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: 'The primary purpose of [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is to use it in the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event handler to ensure that all
    occurrences of a particular entity are filtered in a certain way, such as filtering
    for access control roles. It also can be used to apply criteria to relationship
    loads. In the example below, we can apply a certain set of rules to all queries
    emitted by a particular [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"):'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: '[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")的主要目的是在[`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件处理程序中使用它，以确保特定实体的所有出现都以某种方式被过滤，例如，为访问控制角色过滤。它还可以用于应用条件于关系加载。在下面的示例中，我们可以将一组特定规则应用于特定[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")发出的所有查询：'
- en: '[PRE187]'
  id: totrans-909
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: In the above example, the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event will intercept all queries
    emitted using the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    For those queries which are SELECT statements and are not attribute or relationship
    loads a custom [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option is added to the query. The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option will be used in the given statement
    and will also be automatically propagated to all relationship loads that descend
    from this query.
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，[`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute")事件将拦截使用[`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session")发出的所有查询。对于那些是SELECT语句且不是属性或关系加载的查询，将为查询添加一个自定义的[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项。[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项将在给定语句中使用，并且还将自动传播到所有从此查询继承的关系加载中。
- en: The criteria argument given is a `lambda` that accepts a `cls` argument. The
    given class will expand to include all mapped subclass and need not itself be
    a mapped class.
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的criteria参数是一个接受cls参数的`lambda`。给定的类将扩展以包括所有映射的子类，本身不需要是映射的类。
- en: Tip
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: When using [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option in conjunction with the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") loader option, it’s important to note that [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") only affects the part of the query that
    determines what SQL is rendered in terms of the WHERE and FROM clauses. The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option does not affect the rendering of the SELECT
    statement outside of the columns clause, so does not have any interaction with
    the [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option. However, the way things “work” is that [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") is meant to be used with a query that is already
    selecting from the additional entities in some way, where [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") can apply it’s additional criteria.
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: 当在与[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager "sqlalchemy.orm.contains_eager")加载器选项一起使用[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项时，重要的是要注意，[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")仅影响决定以何种方式呈现SQL的查询的部分，这涉及WHERE和FROM子句。 [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")选项不影响SELECT语句在列之外的呈现，因此与[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")选项没有任何交互。但是，事情的“工作”方式是[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager")应该与某种已经选择额外实体的查询一起使用，而[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")可以应用其额外的条件。
- en: 'In the example below, assuming a mapping relationship as `A -> A.bs -> B`,
    the given [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option will affect the way in which the JOIN is rendered:'
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，假设映射关系为 `A -> A.bs -> B`，给定的 [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") 选项将影响 JOIN 的呈现方式：
- en: '[PRE188]'
  id: totrans-915
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: 'Above, the given [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option will affect the ON clause of the
    JOIN that is specified by `.join(A.bs)`, so is applied as expected. The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option has the effect that columns from `B` are
    added to the columns clause:'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，给定的 [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") 选项将影响由 `.join(A.bs)` 指定的 JOIN 的 ON 子句，因此按预期应用。[`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") 选项的效果是将 `B` 的列添加到列子句中：
- en: '[PRE189]'
  id: totrans-917
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: The use of the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option within the above statement has no effect
    on the behavior of the [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option. If the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option were omitted, the SQL would be the same
    as regards the FROM and WHERE clauses, where [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") continues to add its criteria to the ON
    clause of the JOIN. The addition of [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") only affects the columns clause, in that additional
    columns against `b` are added which are then consumed by the ORM to produce `B`
    instances.
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述语句中使用 [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") 选项对 [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") 选项的行为没有影响。如果省略了 [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") 选项，则 SQL 将与 FROM 和 WHERE 子句相同，其中 [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") 继续将其条件添加到 JOIN 的 ON 子句中。添加 [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") 只影响列子句，即添加了针对 `B` 的其他列，然后 ORM 消耗这些列以生成 `B` 实例。
- en: Warning
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The use of a lambda inside of the call to [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is only invoked **once per unique class**.
    Custom functions should not be invoked within this lambda. See [Using Lambdas
    to add significant speed gains to statement production](../../core/connections.html#engine-lambda-caching)
    for an overview of the “lambda SQL” feature, which is for advanced use only.
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: 在对 [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    的调用内部使用 lambda 只会 **对每个唯一类调用一次**。自定义函数不应在此 lambda 内调用。有关“lambda SQL”功能的概述，请参阅[使用
    Lambdas 为语句生成带来显著速度提升](../../core/connections.html#engine-lambda-caching)，这仅供高级使用。
- en: 'Parameters:'
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`entity_or_base` – a mapped class, or a class that is a super class of a particular
    set of mapped classes, to which the rule will apply.'
  id: totrans-922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`entity_or_base` – 映射类，或者是一组特定映射类的超类，将应用规则到其中。'
- en: '`where_criteria` –'
  id: totrans-923
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`where_criteria` –'
- en: a Core SQL expression that applies limiting criteria. This may also be a “lambda:”
    or Python function that accepts a target class as an argument, when the given
    class is a base with many different mapped subclasses.
  id: totrans-924
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 核心 SQL 表达式，应用限制条件。当给定类是一个具有许多不同映射子类的基类时，这也可以是一个“lambda:”或 Python 函数，接受目标类作为参数。
- en: Note
  id: totrans-925
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: To support pickling, use a module-level Python function to produce the SQL expression
    instead of a lambda or a fixed SQL expression, which tend to not be picklable.
  id: totrans-926
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了支持 pickle，使用模块级 Python 函数生成 SQL 表达式，而不是 lambda 或固定的 SQL 表达式，后者往往不可 picklable。
- en: '`include_aliases` – if True, apply the rule to [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") constructs as well.'
  id: totrans-927
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_aliases` – 如果为 True，则也将规则应用于 [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") 构造。'
- en: '`propagate_to_loaders` –'
  id: totrans-928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`propagate_to_loaders` –'
- en: defaults to True, apply to relationship loaders such as lazy loaders. This indicates
    that the option object itself including SQL expression is carried along with each
    loaded instance. Set to `False` to prevent the object from being assigned to individual
    instances.
  id: totrans-929
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认为 True，适用于关系加载器，如惰性加载器。这表示选项对象本身，包括 SQL 表达式，将随每个加载的实例一起传递。将其设置为 `False` 可防止将对象分配给各个实例。
- en: See also
  id: totrans-930
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[ORM Query Events](../examples.html#examples-session-orm-events) - includes
    examples of using [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria").'
  id: totrans-931
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ORM 查询事件](../examples.html#examples-session-orm-events) - 包括使用 [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") 的示例。'
- en: '[Adding global WHERE / ON criteria](../session_events.html#do-orm-execute-global-criteria)
    - basic example on how to combine [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") with the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event.'
  id: totrans-932
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[添加全局 WHERE / ON 条件](../session_events.html#do-orm-execute-global-criteria)
    - 如何将 [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    与 [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") 事件结合的基本示例。'
- en: '`track_closure_variables` –'
  id: totrans-933
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`track_closure_variables` -'
- en: when False, closure variables inside of a lambda expression will not be used
    as part of any cache key. This allows more complex expressions to be used inside
    of a lambda expression but requires that the lambda ensures it returns the identical
    SQL every time given a particular class.
  id: totrans-934
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当为 False 时，lambda 表达式中的闭包变量将不会作为任何缓存键的一部分。这允许在 lambda 表达式中使用更复杂的表达式，但要求 lambda
    确保每次给定特定类时返回相同的 SQL。
- en: New in version 1.4.0b2.
  id: totrans-935
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新版本 1.4.0b2 中新增。
- en: '[PRE190]'
  id: totrans-936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: Produce an inner join between left and right clauses.
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: 在左右子句之间产生内连接。
- en: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") is an extension to the
    core join interface provided by [`join()`](../../core/selectable.html#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join"), where the left and right selectable may be
    not only core selectable objects such as [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), but also mapped classes or [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instances. The “on” clause can be a SQL expression
    or an ORM mapped attribute referencing a configured [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
  zh: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") 是对 [`join()`](../../core/selectable.html#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join") 提供的核心连接接口的扩展，其中左右可选择的对象不仅可以是核心可选择对象，如 [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table")，还可以是映射类或 [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") 实例。"on" 子句可以是 SQL 表达式，也可以是引用已配置的 [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") 的 ORM 映射属性。'
- en: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") is not commonly needed
    in modern usage, as its functionality is encapsulated within that of the [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Query.join()`](query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") methods. which feature a significant amount of automation
    beyond [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") by itself. Explicit
    use of [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") with ORM-enabled
    SELECT statements involves use of the [`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method, as in:'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代用法中，通常不常用 [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")，因为其功能已封装在
    [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") 和 [`Query.join()`](query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") 方法中。这两种方法在自动化方面远远超出了 [`join()`](#sqlalchemy.orm.join
    "sqlalchemy.orm.join") 本身。在启用 ORM 的 SELECT 语句中显式使用 [`join()`](#sqlalchemy.orm.join
    "sqlalchemy.orm.join") 涉及使用 [`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") 方法，如下所示：
- en: '[PRE191]'
  id: totrans-940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: 'In modern SQLAlchemy the above join can be written more succinctly as:'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代 SQLAlchemy 中，上述连接可以更简洁地写为：
- en: '[PRE192]'
  id: totrans-942
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: Warning
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: using [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") directly may not
    work properly with modern ORM options such as [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria"). It is strongly recommended to use the
    idiomatic join patterns provided by methods such as [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Select.join_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from") when creating ORM joins.
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: 直接使用[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")可能无法与现代 ORM 选项（如[`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria")）正常工作。强烈建议在创建 ORM 连接时使用由[`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join")和[`Select.join_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from")等方法提供的成语连接模式。
- en: See also
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '[Joins](select.html#orm-queryguide-joins) - in the [ORM Querying Guide](index.html)
    for background on idiomatic ORM join patterns'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: '[连接](select.html#orm-queryguide-joins) - 在[ORM 查询指南](index.html)中了解成语连接模式的背景'
- en: '[PRE193]'
  id: totrans-947
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: Produce a left outer join between left and right clauses.
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧和右侧子句之间产生左外连接。
- en: This is the “outer join” version of the [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")
    function, featuring the same behavior except that an OUTER JOIN is generated.
    See that function’s documentation for other usage details.
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")函数的“外连接”版本，具有相同的行为，只是生成了一个外连接。有关其他用法细节，请参阅该函数的文档。
- en: '[PRE194]'
  id: totrans-950
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: Create filtering criterion that relates this query’s primary entity to the given
    related instance, using established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration.
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 创建过滤条件，将此查询的主实体与给定的相关实例关联起来，使用已建立的[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")配置。
- en: 'E.g.:'
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE195]'
  id: totrans-953
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: The SQL rendered is the same as that rendered when a lazy loader would fire
    off from the given parent on that attribute, meaning that the appropriate state
    is taken from the parent object in Python without the need to render joins to
    the parent table in the rendered statement.
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染的 SQL 与在给定父对象上的惰性加载器触发时渲染的 SQL 相同，这意味着在 Python 中从父对象中获取适当的状态而无需在渲染语句中渲染到父表的连接。
- en: 'The given property may also make use of [`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") to indicate the left side of the criteria:'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 给定属性还可以利用[`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type")指示条件的左侧：
- en: '[PRE196]'
  id: totrans-956
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: 'The above use is equivalent to using the `from_entity()` argument:'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
  zh: 上述用法等同于使用`from_entity()`参数：
- en: '[PRE197]'
  id: totrans-958
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: 'Parameters:'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：
- en: '`instance` – An instance which has some [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  id: totrans-960
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance` – 具有某些[`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship")的实例。'
- en: '`property` – Class-bound attribute, which indicates what relationship from
    the instance should be used to reconcile the parent/child relationship.'
  id: totrans-961
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`property` – 类绑定属性，指示应使用实例中的哪个关系来协调父/子关系。'
- en: '`from_entity` –'
  id: totrans-962
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`from_entity` –'
- en: Entity in which to consider as the left side. This defaults to the “zero” entity
    of the [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query") itself.
  id: totrans-963
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要考虑为左侧的实体。默认为[`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")本身的“零”实体。
- en: New in version 1.2.
  id: totrans-964
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 版本 1.2 中的新功能。
