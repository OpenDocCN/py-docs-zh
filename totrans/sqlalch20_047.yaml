- en: ORM API Features for Querying
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/orm/queryguide/api.html](https://docs.sqlalchemy.org/en/20/orm/queryguide/api.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ORM Loader Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Loader options are objects which, when passed to the [`Select.options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.options
    "sqlalchemy.sql.expression.Select.options") method of a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object or similar SQL construct, affect the
    loading of both column and relationship-oriented attributes. The majority of loader
    options descend from the [`Load`](relationships.html#sqlalchemy.orm.Load "sqlalchemy.orm.Load")
    hierarchy. For a complete overview of using loader options, see the linked sections
    below.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Column Loading Options](columns.html#loading-columns) - details mapper and
    loading options that affect how column and SQL-expression mapped attributes are
    loaded'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Relationship Loading Techniques](relationships.html) - details relationship
    and loading options that affect how [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") mapped attributes are loaded'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## ORM Execution Options'
  prefs: []
  type: TYPE_NORMAL
- en: ORM-level execution options are keyword options that may be associated with
    a statement execution using either the [`Session.execute.execution_options`](../session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute") parameter, which is a dictionary argument accepted
    by [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    methods such as [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") and [`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars"), or by associating them directly with the statement
    to be invoked itself using the [`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method, which accepts
    them as arbitrary keyword arguments.
  prefs: []
  type: TYPE_NORMAL
- en: ORM-level options are distinct from the Core level execution options documented
    at [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"). It’s important to note that
    the ORM options discussed below are **not** compatible with Core level methods
    [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") or [`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options"); the options are ignored at this
    level, even if the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is associated with the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in use.
  prefs: []
  type: TYPE_NORMAL
- en: Within this section, the [`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method style will be
    illustrated for examples.
  prefs: []
  type: TYPE_NORMAL
- en: '### Populate Existing'
  prefs: []
  type: TYPE_NORMAL
- en: The `populate_existing` execution option ensures that, for all rows loaded,
    the corresponding instances in the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will be fully refreshed – erasing any existing data
    within the objects (including pending changes) and replacing with the data loaded
    from the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example use looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Normally, ORM objects are only loaded once, and if they are matched up to the
    primary key in a subsequent result row, the row is not applied to the object.
    This is both to preserve pending, unflushed changes on the object as well as to
    avoid the overhead and complexity of refreshing data which is already there. The
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    assumes a default working model of a highly isolated transaction, and to the degree
    that data is expected to change within the transaction outside of the local changes
    being made, those use cases would be handled using explicit steps such as this
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `populate_existing`, any set of objects that matches a query can be refreshed,
    and it also allows control over relationship loader options. E.g. to refresh an
    instance while also refreshing a related set of objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Another use case for `populate_existing` is in support of various attribute
    loading features that can change how an attribute is loaded on a per-query basis.
    Options for which this apply include:'
  prefs: []
  type: TYPE_NORMAL
- en: The [`with_expression()`](columns.html#sqlalchemy.orm.with_expression "sqlalchemy.orm.with_expression")
    option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`PropComparator.and_()`](../internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") method that can modify what a loader strategy
    loads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager "sqlalchemy.orm.contains_eager")
    option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`load_only()`](columns.html#sqlalchemy.orm.load_only "sqlalchemy.orm.load_only")
    option to select what attributes to refresh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `populate_existing` execution option is equvialent to the [`Query.populate_existing()`](query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") method in [1.x style](../../glossary.html#term-1.x-style)
    ORM queries.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[I’m re-loading data with my Session but it isn’t seeing changes that I committed
    elsewhere](../../faq/sessions.html#faq-session-identity) - in [Frequently Asked
    Questions](../../faq/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    in the ORM [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    documentation  ### Autoflush'
  prefs: []
  type: TYPE_NORMAL
- en: 'This option, when passed as `False`, will cause the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to not invoke the “autoflush” step. It is equivalent
    to using the [`Session.no_autoflush`](../session_api.html#sqlalchemy.orm.Session.no_autoflush
    "sqlalchemy.orm.Session.no_autoflush") context manager to disable autoflush:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This option will also work on ORM-enabled [`Update`](../../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Delete`](../../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") queries.
  prefs: []
  type: TYPE_NORMAL
- en: The `autoflush` execution option is equvialent to the [`Query.autoflush()`](query.html#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush") method in [1.x style](../../glossary.html#term-1.x-style)
    ORM queries.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Flushing](../session_basics.html#session-flushing)  ### Fetching Large Result
    Sets with Yield Per'
  prefs: []
  type: TYPE_NORMAL
- en: The `yield_per` execution option is an integer value which will cause the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") to buffer only a limited number of rows and/or ORM
    objects at a time, before making data available to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, the ORM will fetch **all** rows immediately, constructing ORM objects
    for each and assembling those objects into a single buffer, before passing this
    buffer to the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object as a source of rows to be returned. The rationale
    for this behavior is to allow correct behavior for features such as joined eager
    loading, uniquifying of results, and the general case of result handling logic
    that relies upon the identity map maintaining a consistent state for every object
    in a result set as it is fetched.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of the `yield_per` option is to change this behavior so that the
    ORM result set is optimized for iteration through very large result sets (e.g.
    > 10K rows), where the user has determined that the above patterns don’t apply.
    When `yield_per` is used, the ORM will instead batch ORM results into sub-collections
    and yield rows from each sub-collection individually as the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object is iterated, so that the Python interpreter
    doesn’t need to declare very large areas of memory which is both time consuming
    and leads to excessive memory use. The option affects both the way the database
    cursor is used as well as how the ORM constructs rows and objects to be passed
    to the [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result").
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: From the above, it follows that the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") must be consumed in an iterable fashion, that is,
    using iteration such as `for row in result` or using partial row methods such
    as [`Result.fetchmany()`](../../core/connections.html#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") or [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions"). Calling [`Result.all()`](../../core/connections.html#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all") will defeat the purpose of using `yield_per`.
  prefs: []
  type: TYPE_NORMAL
- en: Using `yield_per` is equivalent to making use of both the [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option, which selects
    for server side cursors to be used by the backend if supported, and the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method on the returned [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object, which establishes a fixed size of rows to
    be fetched as well as a corresponding limit to how many ORM objects will be constructed
    at once.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: '`yield_per` is now available as a Core execution option as well, described
    in detail at [Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results).
    This section details the use of `yield_per` as an execution option with an ORM
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    The option behaves as similarly as possible in both contexts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When used with the ORM, `yield_per` must be established either via the [`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method on the given
    statement or by passing it to the [`Session.execute.execution_options`](../session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute") parameter of [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") or other similar [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") method such as [`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars"). Typical use for fetching ORM objects is illustrated
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The above code is equivalent to the example below, which uses [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") and [`Connection.execution_options.max_row_buffer`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options") Core-level execution options
    in conjunction with the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method of [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`yield_per` is also commonly used in combination with the [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") method, which will iterate rows in grouped
    partitions. The size of each partition defaults to the integer value passed to
    `yield_per`, as in the below example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `yield_per` execution option **is not compatible** with [“subquery” eager
    loading](relationships.html#subquery-eager-loading) loading or [“joined” eager
    loading](relationships.html#joined-eager-loading) when using collections. It is
    potentially compatible with [“select in” eager loading](relationships.html#selectin-eager-loading)
    , provided the database driver supports multiple, independent cursors.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the `yield_per` execution option is not compatible with the [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") method; as this method relies upon storing
    a complete set of identities for all rows, it would necessarily defeat the purpose
    of using `yield_per` which is to handle an arbitrarily large number of rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.6: An exception is raised when ORM rows are fetched
    from a [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object that makes use of the [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") filter, at the same time as the `yield_per`
    execution option is used.'
  prefs: []
  type: TYPE_NORMAL
- en: When using the legacy [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object with [1.x style](../../glossary.html#term-1.x-style) ORM use, the [`Query.yield_per()`](query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") method will have the same result as that of
    the `yield_per` execution option.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)  ###
    Identity Token'
  prefs: []
  type: TYPE_NORMAL
- en: Deep Alchemy
  prefs: []
  type: TYPE_NORMAL
- en: This option is an advanced-use feature mostly intended to be used with the [Horizontal
    Sharding](../extensions/horizontal_shard.html) extension. For typical cases of
    loading objects with identical primary keys from different “shards” or partitions,
    consider using individual [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects per shard first.
  prefs: []
  type: TYPE_NORMAL
- en: The “identity token” is an arbitrary value that can be associated within the
    [identity key](../../glossary.html#term-identity-key) of newly loaded objects.
    This element exists first and foremost to support extensions which perform per-row
    “sharding”, where objects may be loaded from any number of replicas of a particular
    database table that nonetheless have overlapping primary key values. The primary
    consumer of “identity token” is the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension, which supplies a general framework for persisting objects among multiple
    “shards” of a particular database table.
  prefs: []
  type: TYPE_NORMAL
- en: The `identity_token` execution option may be used on a per-query basis to directly
    affect this token. Using it directly, one can populate a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with multiple instances of an object that have the same
    primary key and source table, but different “identities”.
  prefs: []
  type: TYPE_NORMAL
- en: 'One such example is to populate a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with objects that come from same-named tables in different
    schemas, using the [Translation of Schema Names](../../core/connections.html#schema-translating)
    feature which can affect the choice of schema within the scope of queries. Given
    a mapping as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The default “schema” name for the class above is `None`, meaning, no schema
    qualification will be written into SQL statements. However, if we make use of
    [`Connection.execution_options.schema_translate_map`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options"), mapping `None` to an alternate
    schema, we can place instances of `MyTable` into two different schemas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The above two blocks create a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object linked to a different schema translate map each
    time, and an instance of `MyTable` is persisted into both `test_schema.my_table`
    as well as `test_schema_2.my_table`.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects above are independent. If we wanted to persist both objects in one transaction,
    we would need to use the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we can illustrate querying for these objects in one session as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Both `obj1` and `obj2` are distinct from each other. However, they both refer
    to primary key id 1 for the `MyTable` class, yet are distinct. This is how the
    `identity_token` comes into play, which we can see in the inspection of each object,
    where we look at `InstanceState.key` to view the two distinct identity tokens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The above logic takes place automatically when using the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0.0rc1: - added the `identity_token` ORM level execution option.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Horizontal Sharding](../examples.html#examples-sharding) - in the [ORM Examples](../examples.html)
    section. See the script `separate_schema_translates.py` for a demonstration of
    the above use case using the full sharding API.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### Inspecting entities and columns from ORM-enabled SELECT and DML statements'
  prefs: []
  type: TYPE_NORMAL
- en: The [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, as well as the [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") and [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") constructs (for the latter DML constructs,
    as of SQLAlchemy 1.4.33), all support the ability to inspect the entities in which
    these statements are created against, as well as the columns and datatypes that
    would be returned in a result set.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object, this information is available from
    the [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute. This attribute
    operates in the same way as the legacy [`Query.column_descriptions`](query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") attribute. The format returned is
    a list of dictionaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") is used with non-ORM objects
    such as plain [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Column`](../../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects, the entries will contain basic information about individual columns returned
    in all cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.4.33: The [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute now returns
    a value when used against a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") that is not ORM-enabled. Previously, this
    would raise `NotImplementedError`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    and [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    constructs, there are two separate attributes. One is [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") which returns information
    about the primary ORM entity and database table which the DML construct would
    be affecting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") includes an entry `"table"`
    which is actually the **table to be inserted, updated or deleted** by the statement,
    which is **not** always the same as the SQL “selectable” to which the class may
    be mapped. For example, in a joined-table inheritance scenario, `"table"` will
    refer to the local table for the given entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other is [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") which delivers
    information about the columns present in the RETURNING collection in a manner
    roughly similar to that of [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.4.33: Added the [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") and [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") attributes.  ####
    Additional ORM API Constructs'
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [aliased](#sqlalchemy.orm.aliased)(element[, alias, name, flat, ...]) | Produce
    an alias of the given element, usually an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [AliasedClass](#sqlalchemy.orm.util.AliasedClass) | Represents an “aliased”
    form of a mapped class for usage with Query. |'
  prefs: []
  type: TYPE_TB
- en: '| [AliasedInsp](#sqlalchemy.orm.util.AliasedInsp) | Provide an inspection interface
    for an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object. |'
  prefs: []
  type: TYPE_TB
- en: '| [Bundle](#sqlalchemy.orm.Bundle) | A grouping of SQL expressions that are
    returned by a [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    under one namespace. |'
  prefs: []
  type: TYPE_TB
- en: '| [join](#sqlalchemy.orm.join)(left, right[, onclause, isouter, ...]) | Produce
    an inner join between left and right clauses. |'
  prefs: []
  type: TYPE_TB
- en: '| [outerjoin](#sqlalchemy.orm.outerjoin)(left, right[, onclause, full]) | Produce
    a left outer join between left and right clauses. |'
  prefs: []
  type: TYPE_TB
- en: '| [with_loader_criteria](#sqlalchemy.orm.with_loader_criteria)(entity_or_base,
    where_criteria[, loader_only, include_aliases, ...]) | Add additional WHERE criteria
    to the load for all occurrences of a particular entity. |'
  prefs: []
  type: TYPE_TB
- en: '| [with_parent](#sqlalchemy.orm.with_parent)(instance, prop[, from_entity])
    | Create filtering criterion that relates this query’s primary entity to the given
    related instance, using established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Produce an alias of the given element, usually an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased") function
    is used to create an ad-hoc mapping of a mapped class to a new selectable. By
    default, a selectable is generated from the normally mapped selectable (typically
    a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    ) using the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method. However, [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") can also be used to link the class to a new [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") statement. Also, the [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") function is a variant of [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") that is intended to specify a so-called “polymorphic
    selectable”, that corresponds to the union of several joined-inheritance subclasses
    at once.
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, the [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    function also accepts plain [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, such as a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct. In those cases, the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method is called on the object and
    the new [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object returned. The returned [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") is not ORM-mapped in this case.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Entity Aliases](../../tutorial/data_select.html#tutorial-orm-entity-aliases)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Selecting ORM Aliases](select.html#orm-queryguide-orm-aliases) - in the [ORM
    Querying Guide](index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`element` – element to be aliased. Is normally a mapped class, but for convenience
    can also be a [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alias` – Optional selectable unit to map the element to. This is usually used
    to link the object to a subquery, and should be an aliased select construct as
    one would produce from the [`Query.subquery()`](query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") method or the [`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery") or [`Select.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") methods of the [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – optional string name to use for the alias, if not specified by the
    `alias` parameter. The name, among other things, forms the attribute name that
    will be accessible via tuples returned by a [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. Not supported when creating aliases of [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flat` – Boolean, will be passed through to the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") call so that aliases of [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") objects will alias the individual tables inside
    the join, rather than creating a subquery. This is generally supported by all
    modern databases with regards to right-nested joins and generally produces more
    efficient queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adapt_on_names` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'if True, more liberal “matching” will be used when mapping the mapped columns
    of the ORM entity to those of the given selectable - a name-based match will be
    performed if the given selectable doesn’t otherwise have a column that corresponds
    to one on the entity. The use case for this is when associating an entity with
    some derived selectable such as one that uses aggregate functions:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Above, functions on `aggregated_unit_price` which refer to `.price` will return
    the `func.sum(UnitPrice.price).label('price')` column, as it is matched on the
    name “price”. Ordinarily, the “price” function wouldn’t have any “column correspondence”
    to the actual `UnitPrice.price` column as it is not a proxy of the original.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Represents an “aliased” form of a mapped class for usage with Query.
  prefs: []
  type: TYPE_NORMAL
- en: The ORM equivalent of a [`alias()`](../../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") construct, this object mimics the mapped class
    using a `__getattr__` scheme and maintains a reference to a real [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'A primary purpose of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    is to serve as an alternate within a SQL statement generated by the ORM, such
    that an existing mapped entity can be used in multiple contexts. A simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    is also capable of mapping an existing mapped class to an entirely new selectable,
    provided this selectable is column- compatible with the existing mapped selectable,
    and it can also be configured in a mapping as the target of a [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). See the links below for examples.'
  prefs: []
  type: TYPE_NORMAL
- en: The [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object is constructed typically using the [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function. It also is produced with additional configuration
    when using the [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") function.
  prefs: []
  type: TYPE_NORMAL
- en: The resulting object is an instance of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass"). This object implements an attribute scheme
    which produces the same attribute and method interface as the original mapped
    class, allowing [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    to be compatible with any attribute technique which works on the original class,
    including hybrid attributes (see [Hybrid Attributes](../extensions/hybrid.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    can be inspected for its underlying [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), aliased selectable, and other information using [`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The resulting inspection object is an instance of [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic "sqlalchemy.orm.with_polymorphic")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Relationship to Aliased Class](../join_conditions.html#relationship-aliased-class)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Row-Limited Relationships with Window Functions](../join_conditions.html#relationship-to-window-function)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class `sqlalchemy.orm.AliasedClass` (`sqlalchemy.inspection.Inspectable`, `sqlalchemy.orm.ORMColumnsClauseRole`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Provide an inspection interface for an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    object is returned given an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") using the [`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes on [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`entity` - the [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    represented.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mapper` - the [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    mapping the underlying class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`selectable` - the [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") construct which ultimately represents an aliased
    [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` - the name of the alias. Also is used as the attribute name when returned
    in a result tuple from [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_polymorphic_mappers` - collection of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects indicating all those mappers expressed in the
    select construct for the [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polymorphic_on` - an alternate column or SQL expression which will be used
    as the “discriminator” for a polymorphic load.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Runtime Inspection API](../../core/inspection.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class `sqlalchemy.orm.AliasedInsp` (`sqlalchemy.orm.ORMEntityColumnsClauseRole`,
    `sqlalchemy.orm.ORMFromClauseRole`, [`sqlalchemy.sql.cache_key.HasCacheKey`](../../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey"), [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"), `sqlalchemy.util.langhelpers.MemoizedSlots`,
    `sqlalchemy.inspection.Inspectable`, `typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: A grouping of SQL expressions that are returned by a [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") under one namespace.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") essentially allows
    nesting of the tuple-based results returned by a column-oriented [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. It also is extensible via simple subclassing,
    where the primary capability to override is that of how the set of expressions
    should be returned, allowing post-processing as well as custom return types, without
    involving ORM identity-mapped classes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Grouping Selected Attributes with Bundles](select.html#bundles)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.orm.Bundle.__init__), [c](#sqlalchemy.orm.Bundle.c),
    [columns](#sqlalchemy.orm.Bundle.columns), [create_row_processor()](#sqlalchemy.orm.Bundle.create_row_processor),
    [is_aliased_class](#sqlalchemy.orm.Bundle.is_aliased_class), [is_bundle](#sqlalchemy.orm.Bundle.is_bundle),
    [is_clause_element](#sqlalchemy.orm.Bundle.is_clause_element), [is_mapper](#sqlalchemy.orm.Bundle.is_mapper),
    [label()](#sqlalchemy.orm.Bundle.label), [single_entity](#sqlalchemy.orm.Bundle.single_entity)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    (`sqlalchemy.orm.ORMColumnsClauseRole`, `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    `sqlalchemy.sql.cache_key.MemoizedHasCacheKey`, `sqlalchemy.inspection.Inspectable`,
    [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – name of the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*exprs` – columns or SQL expressions comprising the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`single_entity=False` – if True, rows for this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") can be returned as a “single entity” outside of any enclosing
    tuple in the same manner as a mapped entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: An alias for [`Bundle.columns`](#sqlalchemy.orm.Bundle.columns "sqlalchemy.orm.Bundle.columns").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: A namespace of SQL expressions referred to by this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Nesting of bundles is also supported:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Bundle.c`](#sqlalchemy.orm.Bundle.c "sqlalchemy.orm.Bundle.c")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Produce the “row processing” function for this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: May be overridden by subclasses to provide custom behaviors when results are
    fetched. The method is passed the statement object and a set of “row processor”
    functions at query execution time; these processor functions when given a result
    row will return the individual attribute value, which can then be adapted into
    any kind of return data structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example below illustrates replacing the usual [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") return structure with a straight Python dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'A result from the above [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    will return dictionary values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Provide a copy of this [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    passing a new label.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: If True, queries for a single Bundle will be returned as a single entity, rather
    than an element within a keyed tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Add additional WHERE criteria to the load for all occurrences of a particular
    entity.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option is intended to add limiting criteria to a particular kind of entity in
    a query, **globally**, meaning it will apply to the entity as it appears in the
    SELECT query as well as within any subqueries, join conditions, and relationship
    loads, including both eager and lazy loaders, without the need for it to be specified
    in any particular part of the query. The rendering logic uses the same system
    used by single table inheritance to ensure a certain discriminator is applied
    to a table.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g., using [2.0-style](../../glossary.html#term-1) queries, we can limit the
    way the `User.addresses` collection is loaded, regardless of the kind of loading
    used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Above, the “selectinload” for `User.addresses` will apply the given filtering
    criteria to the WHERE clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another example, where the filtering will be applied to the ON clause of the
    join, in this example using [1.x style](../../glossary.html#term-1.x-style) queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The primary purpose of [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is to use it in the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event handler to ensure that all
    occurrences of a particular entity are filtered in a certain way, such as filtering
    for access control roles. It also can be used to apply criteria to relationship
    loads. In the example below, we can apply a certain set of rules to all queries
    emitted by a particular [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event will intercept all queries
    emitted using the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    For those queries which are SELECT statements and are not attribute or relationship
    loads a custom [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option is added to the query. The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option will be used in the given statement
    and will also be automatically propagated to all relationship loads that descend
    from this query.
  prefs: []
  type: TYPE_NORMAL
- en: The criteria argument given is a `lambda` that accepts a `cls` argument. The
    given class will expand to include all mapped subclass and need not itself be
    a mapped class.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: When using [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option in conjunction with the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") loader option, it’s important to note that [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") only affects the part of the query that
    determines what SQL is rendered in terms of the WHERE and FROM clauses. The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option does not affect the rendering of the SELECT
    statement outside of the columns clause, so does not have any interaction with
    the [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option. However, the way things “work” is that [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") is meant to be used with a query that is already
    selecting from the additional entities in some way, where [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") can apply it’s additional criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example below, assuming a mapping relationship as `A -> A.bs -> B`,
    the given [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option will affect the way in which the JOIN is rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Above, the given [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option will affect the ON clause of the
    JOIN that is specified by `.join(A.bs)`, so is applied as expected. The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option has the effect that columns from `B` are
    added to the columns clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The use of the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option within the above statement has no effect
    on the behavior of the [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option. If the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option were omitted, the SQL would be the same
    as regards the FROM and WHERE clauses, where [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") continues to add its criteria to the ON
    clause of the JOIN. The addition of [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") only affects the columns clause, in that additional
    columns against `b` are added which are then consumed by the ORM to produce `B`
    instances.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The use of a lambda inside of the call to [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is only invoked **once per unique class**.
    Custom functions should not be invoked within this lambda. See [Using Lambdas
    to add significant speed gains to statement production](../../core/connections.html#engine-lambda-caching)
    for an overview of the “lambda SQL” feature, which is for advanced use only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`entity_or_base` – a mapped class, or a class that is a super class of a particular
    set of mapped classes, to which the rule will apply.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`where_criteria` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a Core SQL expression that applies limiting criteria. This may also be a “lambda:”
    or Python function that accepts a target class as an argument, when the given
    class is a base with many different mapped subclasses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To support pickling, use a module-level Python function to produce the SQL expression
    instead of a lambda or a fixed SQL expression, which tend to not be picklable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`include_aliases` – if True, apply the rule to [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") constructs as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`propagate_to_loaders` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defaults to True, apply to relationship loaders such as lazy loaders. This indicates
    that the option object itself including SQL expression is carried along with each
    loaded instance. Set to `False` to prevent the object from being assigned to individual
    instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[ORM Query Events](../examples.html#examples-session-orm-events) - includes
    examples of using [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria").'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Adding global WHERE / ON criteria](../session_events.html#do-orm-execute-global-criteria)
    - basic example on how to combine [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") with the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`track_closure_variables` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when False, closure variables inside of a lambda expression will not be used
    as part of any cache key. This allows more complex expressions to be used inside
    of a lambda expression but requires that the lambda ensures it returns the identical
    SQL every time given a particular class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Produce an inner join between left and right clauses.
  prefs: []
  type: TYPE_NORMAL
- en: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") is an extension to the
    core join interface provided by [`join()`](../../core/selectable.html#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join"), where the left and right selectable may be
    not only core selectable objects such as [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), but also mapped classes or [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instances. The “on” clause can be a SQL expression
    or an ORM mapped attribute referencing a configured [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  prefs: []
  type: TYPE_NORMAL
- en: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") is not commonly needed
    in modern usage, as its functionality is encapsulated within that of the [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Query.join()`](query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") methods. which feature a significant amount of automation
    beyond [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") by itself. Explicit
    use of [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") with ORM-enabled
    SELECT statements involves use of the [`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method, as in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'In modern SQLAlchemy the above join can be written more succinctly as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: using [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") directly may not
    work properly with modern ORM options such as [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria"). It is strongly recommended to use the
    idiomatic join patterns provided by methods such as [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Select.join_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from") when creating ORM joins.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Joins](select.html#orm-queryguide-joins) - in the [ORM Querying Guide](index.html)
    for background on idiomatic ORM join patterns'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Produce a left outer join between left and right clauses.
  prefs: []
  type: TYPE_NORMAL
- en: This is the “outer join” version of the [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")
    function, featuring the same behavior except that an OUTER JOIN is generated.
    See that function’s documentation for other usage details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Create filtering criterion that relates this query’s primary entity to the given
    related instance, using established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The SQL rendered is the same as that rendered when a lazy loader would fire
    off from the given parent on that attribute, meaning that the appropriate state
    is taken from the parent object in Python without the need to render joins to
    the parent table in the rendered statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The given property may also make use of [`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") to indicate the left side of the criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The above use is equivalent to using the `from_entity()` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – An instance which has some [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`property` – Class-bound attribute, which indicates what relationship from
    the instance should be used to reconcile the parent/child relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`from_entity` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Entity in which to consider as the left side. This defaults to the “zero” entity
    of the [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query") itself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ORM Loader Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Loader options are objects which, when passed to the [`Select.options()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.options
    "sqlalchemy.sql.expression.Select.options") method of a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object or similar SQL construct, affect the
    loading of both column and relationship-oriented attributes. The majority of loader
    options descend from the [`Load`](relationships.html#sqlalchemy.orm.Load "sqlalchemy.orm.Load")
    hierarchy. For a complete overview of using loader options, see the linked sections
    below.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Column Loading Options](columns.html#loading-columns) - details mapper and
    loading options that affect how column and SQL-expression mapped attributes are
    loaded'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Relationship Loading Techniques](relationships.html) - details relationship
    and loading options that affect how [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") mapped attributes are loaded'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '## ORM Execution Options'
  prefs: []
  type: TYPE_NORMAL
- en: ORM-level execution options are keyword options that may be associated with
    a statement execution using either the [`Session.execute.execution_options`](../session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute") parameter, which is a dictionary argument accepted
    by [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    methods such as [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") and [`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars"), or by associating them directly with the statement
    to be invoked itself using the [`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method, which accepts
    them as arbitrary keyword arguments.
  prefs: []
  type: TYPE_NORMAL
- en: ORM-level options are distinct from the Core level execution options documented
    at [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options"). It’s important to note that
    the ORM options discussed below are **not** compatible with Core level methods
    [`Connection.execution_options()`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options
    "sqlalchemy.engine.Connection.execution_options") or [`Engine.execution_options()`](../../core/connections.html#sqlalchemy.engine.Engine.execution_options
    "sqlalchemy.engine.Engine.execution_options"); the options are ignored at this
    level, even if the [`Engine`](../../core/connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") or [`Connection`](../../core/connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") is associated with the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") in use.
  prefs: []
  type: TYPE_NORMAL
- en: Within this section, the [`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method style will be
    illustrated for examples.
  prefs: []
  type: TYPE_NORMAL
- en: '### Populate Existing'
  prefs: []
  type: TYPE_NORMAL
- en: The `populate_existing` execution option ensures that, for all rows loaded,
    the corresponding instances in the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will be fully refreshed – erasing any existing data
    within the objects (including pending changes) and replacing with the data loaded
    from the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example use looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Normally, ORM objects are only loaded once, and if they are matched up to the
    primary key in a subsequent result row, the row is not applied to the object.
    This is both to preserve pending, unflushed changes on the object as well as to
    avoid the overhead and complexity of refreshing data which is already there. The
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    assumes a default working model of a highly isolated transaction, and to the degree
    that data is expected to change within the transaction outside of the local changes
    being made, those use cases would be handled using explicit steps such as this
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `populate_existing`, any set of objects that matches a query can be refreshed,
    and it also allows control over relationship loader options. E.g. to refresh an
    instance while also refreshing a related set of objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Another use case for `populate_existing` is in support of various attribute
    loading features that can change how an attribute is loaded on a per-query basis.
    Options for which this apply include:'
  prefs: []
  type: TYPE_NORMAL
- en: The [`with_expression()`](columns.html#sqlalchemy.orm.with_expression "sqlalchemy.orm.with_expression")
    option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`PropComparator.and_()`](../internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") method that can modify what a loader strategy
    loads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager "sqlalchemy.orm.contains_eager")
    option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`load_only()`](columns.html#sqlalchemy.orm.load_only "sqlalchemy.orm.load_only")
    option to select what attributes to refresh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `populate_existing` execution option is equvialent to the [`Query.populate_existing()`](query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") method in [1.x style](../../glossary.html#term-1.x-style)
    ORM queries.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[I’m re-loading data with my Session but it isn’t seeing changes that I committed
    elsewhere](../../faq/sessions.html#faq-session-identity) - in [Frequently Asked
    Questions](../../faq/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    in the ORM [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    documentation  ### Autoflush'
  prefs: []
  type: TYPE_NORMAL
- en: 'This option, when passed as `False`, will cause the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to not invoke the “autoflush” step. It is equivalent
    to using the [`Session.no_autoflush`](../session_api.html#sqlalchemy.orm.Session.no_autoflush
    "sqlalchemy.orm.Session.no_autoflush") context manager to disable autoflush:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This option will also work on ORM-enabled [`Update`](../../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Delete`](../../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") queries.
  prefs: []
  type: TYPE_NORMAL
- en: The `autoflush` execution option is equvialent to the [`Query.autoflush()`](query.html#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush") method in [1.x style](../../glossary.html#term-1.x-style)
    ORM queries.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Flushing](../session_basics.html#session-flushing)  ### Fetching Large Result
    Sets with Yield Per'
  prefs: []
  type: TYPE_NORMAL
- en: The `yield_per` execution option is an integer value which will cause the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") to buffer only a limited number of rows and/or ORM
    objects at a time, before making data available to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, the ORM will fetch **all** rows immediately, constructing ORM objects
    for each and assembling those objects into a single buffer, before passing this
    buffer to the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object as a source of rows to be returned. The rationale
    for this behavior is to allow correct behavior for features such as joined eager
    loading, uniquifying of results, and the general case of result handling logic
    that relies upon the identity map maintaining a consistent state for every object
    in a result set as it is fetched.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of the `yield_per` option is to change this behavior so that the
    ORM result set is optimized for iteration through very large result sets (e.g.
    > 10K rows), where the user has determined that the above patterns don’t apply.
    When `yield_per` is used, the ORM will instead batch ORM results into sub-collections
    and yield rows from each sub-collection individually as the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object is iterated, so that the Python interpreter
    doesn’t need to declare very large areas of memory which is both time consuming
    and leads to excessive memory use. The option affects both the way the database
    cursor is used as well as how the ORM constructs rows and objects to be passed
    to the [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result").
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: From the above, it follows that the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") must be consumed in an iterable fashion, that is,
    using iteration such as `for row in result` or using partial row methods such
    as [`Result.fetchmany()`](../../core/connections.html#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") or [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions"). Calling [`Result.all()`](../../core/connections.html#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all") will defeat the purpose of using `yield_per`.
  prefs: []
  type: TYPE_NORMAL
- en: Using `yield_per` is equivalent to making use of both the [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option, which selects
    for server side cursors to be used by the backend if supported, and the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method on the returned [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object, which establishes a fixed size of rows to
    be fetched as well as a corresponding limit to how many ORM objects will be constructed
    at once.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: '`yield_per` is now available as a Core execution option as well, described
    in detail at [Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results).
    This section details the use of `yield_per` as an execution option with an ORM
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    The option behaves as similarly as possible in both contexts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When used with the ORM, `yield_per` must be established either via the [`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method on the given
    statement or by passing it to the [`Session.execute.execution_options`](../session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute") parameter of [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") or other similar [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") method such as [`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars"). Typical use for fetching ORM objects is illustrated
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The above code is equivalent to the example below, which uses [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") and [`Connection.execution_options.max_row_buffer`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options") Core-level execution options
    in conjunction with the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method of [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '`yield_per` is also commonly used in combination with the [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") method, which will iterate rows in grouped
    partitions. The size of each partition defaults to the integer value passed to
    `yield_per`, as in the below example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The `yield_per` execution option **is not compatible** with [“subquery” eager
    loading](relationships.html#subquery-eager-loading) loading or [“joined” eager
    loading](relationships.html#joined-eager-loading) when using collections. It is
    potentially compatible with [“select in” eager loading](relationships.html#selectin-eager-loading)
    , provided the database driver supports multiple, independent cursors.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the `yield_per` execution option is not compatible with the [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") method; as this method relies upon storing
    a complete set of identities for all rows, it would necessarily defeat the purpose
    of using `yield_per` which is to handle an arbitrarily large number of rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.6: An exception is raised when ORM rows are fetched
    from a [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object that makes use of the [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") filter, at the same time as the `yield_per`
    execution option is used.'
  prefs: []
  type: TYPE_NORMAL
- en: When using the legacy [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object with [1.x style](../../glossary.html#term-1.x-style) ORM use, the [`Query.yield_per()`](query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") method will have the same result as that of
    the `yield_per` execution option.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)  ###
    Identity Token'
  prefs: []
  type: TYPE_NORMAL
- en: Deep Alchemy
  prefs: []
  type: TYPE_NORMAL
- en: This option is an advanced-use feature mostly intended to be used with the [Horizontal
    Sharding](../extensions/horizontal_shard.html) extension. For typical cases of
    loading objects with identical primary keys from different “shards” or partitions,
    consider using individual [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects per shard first.
  prefs: []
  type: TYPE_NORMAL
- en: The “identity token” is an arbitrary value that can be associated within the
    [identity key](../../glossary.html#term-identity-key) of newly loaded objects.
    This element exists first and foremost to support extensions which perform per-row
    “sharding”, where objects may be loaded from any number of replicas of a particular
    database table that nonetheless have overlapping primary key values. The primary
    consumer of “identity token” is the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension, which supplies a general framework for persisting objects among multiple
    “shards” of a particular database table.
  prefs: []
  type: TYPE_NORMAL
- en: The `identity_token` execution option may be used on a per-query basis to directly
    affect this token. Using it directly, one can populate a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with multiple instances of an object that have the same
    primary key and source table, but different “identities”.
  prefs: []
  type: TYPE_NORMAL
- en: 'One such example is to populate a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with objects that come from same-named tables in different
    schemas, using the [Translation of Schema Names](../../core/connections.html#schema-translating)
    feature which can affect the choice of schema within the scope of queries. Given
    a mapping as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The default “schema” name for the class above is `None`, meaning, no schema
    qualification will be written into SQL statements. However, if we make use of
    [`Connection.execution_options.schema_translate_map`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options"), mapping `None` to an alternate
    schema, we can place instances of `MyTable` into two different schemas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The above two blocks create a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object linked to a different schema translate map each
    time, and an instance of `MyTable` is persisted into both `test_schema.my_table`
    as well as `test_schema_2.my_table`.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects above are independent. If we wanted to persist both objects in one transaction,
    we would need to use the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we can illustrate querying for these objects in one session as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Both `obj1` and `obj2` are distinct from each other. However, they both refer
    to primary key id 1 for the `MyTable` class, yet are distinct. This is how the
    `identity_token` comes into play, which we can see in the inspection of each object,
    where we look at `InstanceState.key` to view the two distinct identity tokens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The above logic takes place automatically when using the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0.0rc1: - added the `identity_token` ORM level execution option.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Horizontal Sharding](../examples.html#examples-sharding) - in the [ORM Examples](../examples.html)
    section. See the script `separate_schema_translates.py` for a demonstration of
    the above use case using the full sharding API.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### Inspecting entities and columns from ORM-enabled SELECT and DML statements'
  prefs: []
  type: TYPE_NORMAL
- en: The [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, as well as the [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") and [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") constructs (for the latter DML constructs,
    as of SQLAlchemy 1.4.33), all support the ability to inspect the entities in which
    these statements are created against, as well as the columns and datatypes that
    would be returned in a result set.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object, this information is available from
    the [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute. This attribute
    operates in the same way as the legacy [`Query.column_descriptions`](query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") attribute. The format returned is
    a list of dictionaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'When [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") is used with non-ORM objects
    such as plain [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Column`](../../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects, the entries will contain basic information about individual columns returned
    in all cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.4.33: The [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute now returns
    a value when used against a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") that is not ORM-enabled. Previously, this
    would raise `NotImplementedError`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    and [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    constructs, there are two separate attributes. One is [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") which returns information
    about the primary ORM entity and database table which the DML construct would
    be affecting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") includes an entry `"table"`
    which is actually the **table to be inserted, updated or deleted** by the statement,
    which is **not** always the same as the SQL “selectable” to which the class may
    be mapped. For example, in a joined-table inheritance scenario, `"table"` will
    refer to the local table for the given entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other is [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") which delivers
    information about the columns present in the RETURNING collection in a manner
    roughly similar to that of [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.4.33: Added the [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") and [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") attributes.  ####
    Additional ORM API Constructs'
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [aliased](#sqlalchemy.orm.aliased)(element[, alias, name, flat, ...]) | Produce
    an alias of the given element, usually an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [AliasedClass](#sqlalchemy.orm.util.AliasedClass) | Represents an “aliased”
    form of a mapped class for usage with Query. |'
  prefs: []
  type: TYPE_TB
- en: '| [AliasedInsp](#sqlalchemy.orm.util.AliasedInsp) | Provide an inspection interface
    for an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object. |'
  prefs: []
  type: TYPE_TB
- en: '| [Bundle](#sqlalchemy.orm.Bundle) | A grouping of SQL expressions that are
    returned by a [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    under one namespace. |'
  prefs: []
  type: TYPE_TB
- en: '| [join](#sqlalchemy.orm.join)(left, right[, onclause, isouter, ...]) | Produce
    an inner join between left and right clauses. |'
  prefs: []
  type: TYPE_TB
- en: '| [outerjoin](#sqlalchemy.orm.outerjoin)(left, right[, onclause, full]) | Produce
    a left outer join between left and right clauses. |'
  prefs: []
  type: TYPE_TB
- en: '| [with_loader_criteria](#sqlalchemy.orm.with_loader_criteria)(entity_or_base,
    where_criteria[, loader_only, include_aliases, ...]) | Add additional WHERE criteria
    to the load for all occurrences of a particular entity. |'
  prefs: []
  type: TYPE_TB
- en: '| [with_parent](#sqlalchemy.orm.with_parent)(instance, prop[, from_entity])
    | Create filtering criterion that relates this query’s primary entity to the given
    related instance, using established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Produce an alias of the given element, usually an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: The [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased") function
    is used to create an ad-hoc mapping of a mapped class to a new selectable. By
    default, a selectable is generated from the normally mapped selectable (typically
    a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    ) using the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method. However, [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") can also be used to link the class to a new [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") statement. Also, the [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") function is a variant of [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") that is intended to specify a so-called “polymorphic
    selectable”, that corresponds to the union of several joined-inheritance subclasses
    at once.
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, the [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    function also accepts plain [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, such as a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct. In those cases, the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method is called on the object and
    the new [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object returned. The returned [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") is not ORM-mapped in this case.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Entity Aliases](../../tutorial/data_select.html#tutorial-orm-entity-aliases)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Selecting ORM Aliases](select.html#orm-queryguide-orm-aliases) - in the [ORM
    Querying Guide](index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`element` – element to be aliased. Is normally a mapped class, but for convenience
    can also be a [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alias` – Optional selectable unit to map the element to. This is usually used
    to link the object to a subquery, and should be an aliased select construct as
    one would produce from the [`Query.subquery()`](query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") method or the [`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery") or [`Select.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") methods of the [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – optional string name to use for the alias, if not specified by the
    `alias` parameter. The name, among other things, forms the attribute name that
    will be accessible via tuples returned by a [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. Not supported when creating aliases of [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flat` – Boolean, will be passed through to the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") call so that aliases of [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") objects will alias the individual tables inside
    the join, rather than creating a subquery. This is generally supported by all
    modern databases with regards to right-nested joins and generally produces more
    efficient queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adapt_on_names` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'if True, more liberal “matching” will be used when mapping the mapped columns
    of the ORM entity to those of the given selectable - a name-based match will be
    performed if the given selectable doesn’t otherwise have a column that corresponds
    to one on the entity. The use case for this is when associating an entity with
    some derived selectable such as one that uses aggregate functions:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Above, functions on `aggregated_unit_price` which refer to `.price` will return
    the `func.sum(UnitPrice.price).label('price')` column, as it is matched on the
    name “price”. Ordinarily, the “price” function wouldn’t have any “column correspondence”
    to the actual `UnitPrice.price` column as it is not a proxy of the original.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Represents an “aliased” form of a mapped class for usage with Query.
  prefs: []
  type: TYPE_NORMAL
- en: The ORM equivalent of a [`alias()`](../../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") construct, this object mimics the mapped class
    using a `__getattr__` scheme and maintains a reference to a real [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'A primary purpose of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    is to serve as an alternate within a SQL statement generated by the ORM, such
    that an existing mapped entity can be used in multiple contexts. A simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    is also capable of mapping an existing mapped class to an entirely new selectable,
    provided this selectable is column- compatible with the existing mapped selectable,
    and it can also be configured in a mapping as the target of a [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). See the links below for examples.'
  prefs: []
  type: TYPE_NORMAL
- en: The [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object is constructed typically using the [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function. It also is produced with additional configuration
    when using the [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") function.
  prefs: []
  type: TYPE_NORMAL
- en: The resulting object is an instance of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass"). This object implements an attribute scheme
    which produces the same attribute and method interface as the original mapped
    class, allowing [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    to be compatible with any attribute technique which works on the original class,
    including hybrid attributes (see [Hybrid Attributes](../extensions/hybrid.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    can be inspected for its underlying [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), aliased selectable, and other information using [`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: The resulting inspection object is an instance of [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic "sqlalchemy.orm.with_polymorphic")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Relationship to Aliased Class](../join_conditions.html#relationship-aliased-class)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Row-Limited Relationships with Window Functions](../join_conditions.html#relationship-to-window-function)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class `sqlalchemy.orm.AliasedClass` (`sqlalchemy.inspection.Inspectable`, `sqlalchemy.orm.ORMColumnsClauseRole`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Provide an inspection interface for an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    object is returned given an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") using the [`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes on [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`entity` - the [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    represented.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mapper` - the [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    mapping the underlying class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`selectable` - the [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") construct which ultimately represents an aliased
    [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` - the name of the alias. Also is used as the attribute name when returned
    in a result tuple from [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_polymorphic_mappers` - collection of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects indicating all those mappers expressed in the
    select construct for the [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polymorphic_on` - an alternate column or SQL expression which will be used
    as the “discriminator” for a polymorphic load.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Runtime Inspection API](../../core/inspection.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class `sqlalchemy.orm.AliasedInsp` (`sqlalchemy.orm.ORMEntityColumnsClauseRole`,
    `sqlalchemy.orm.ORMFromClauseRole`, [`sqlalchemy.sql.cache_key.HasCacheKey`](../../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey"), [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"), `sqlalchemy.util.langhelpers.MemoizedSlots`,
    `sqlalchemy.inspection.Inspectable`, `typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: A grouping of SQL expressions that are returned by a [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") under one namespace.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") essentially allows
    nesting of the tuple-based results returned by a column-oriented [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. It also is extensible via simple subclassing,
    where the primary capability to override is that of how the set of expressions
    should be returned, allowing post-processing as well as custom return types, without
    involving ORM identity-mapped classes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Grouping Selected Attributes with Bundles](select.html#bundles)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.orm.Bundle.__init__), [c](#sqlalchemy.orm.Bundle.c),
    [columns](#sqlalchemy.orm.Bundle.columns), [create_row_processor()](#sqlalchemy.orm.Bundle.create_row_processor),
    [is_aliased_class](#sqlalchemy.orm.Bundle.is_aliased_class), [is_bundle](#sqlalchemy.orm.Bundle.is_bundle),
    [is_clause_element](#sqlalchemy.orm.Bundle.is_clause_element), [is_mapper](#sqlalchemy.orm.Bundle.is_mapper),
    [label()](#sqlalchemy.orm.Bundle.label), [single_entity](#sqlalchemy.orm.Bundle.single_entity)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    (`sqlalchemy.orm.ORMColumnsClauseRole`, `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    `sqlalchemy.sql.cache_key.MemoizedHasCacheKey`, `sqlalchemy.inspection.Inspectable`,
    [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – name of the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*exprs` – columns or SQL expressions comprising the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`single_entity=False` – if True, rows for this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") can be returned as a “single entity” outside of any enclosing
    tuple in the same manner as a mapped entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: An alias for [`Bundle.columns`](#sqlalchemy.orm.Bundle.columns "sqlalchemy.orm.Bundle.columns").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: A namespace of SQL expressions referred to by this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Nesting of bundles is also supported:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Bundle.c`](#sqlalchemy.orm.Bundle.c "sqlalchemy.orm.Bundle.c")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Produce the “row processing” function for this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: May be overridden by subclasses to provide custom behaviors when results are
    fetched. The method is passed the statement object and a set of “row processor”
    functions at query execution time; these processor functions when given a result
    row will return the individual attribute value, which can then be adapted into
    any kind of return data structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example below illustrates replacing the usual [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") return structure with a straight Python dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'A result from the above [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    will return dictionary values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Provide a copy of this [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    passing a new label.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: If True, queries for a single Bundle will be returned as a single entity, rather
    than an element within a keyed tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Add additional WHERE criteria to the load for all occurrences of a particular
    entity.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option is intended to add limiting criteria to a particular kind of entity in
    a query, **globally**, meaning it will apply to the entity as it appears in the
    SELECT query as well as within any subqueries, join conditions, and relationship
    loads, including both eager and lazy loaders, without the need for it to be specified
    in any particular part of the query. The rendering logic uses the same system
    used by single table inheritance to ensure a certain discriminator is applied
    to a table.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g., using [2.0-style](../../glossary.html#term-1) queries, we can limit the
    way the `User.addresses` collection is loaded, regardless of the kind of loading
    used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Above, the “selectinload” for `User.addresses` will apply the given filtering
    criteria to the WHERE clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another example, where the filtering will be applied to the ON clause of the
    join, in this example using [1.x style](../../glossary.html#term-1.x-style) queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'The primary purpose of [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is to use it in the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event handler to ensure that all
    occurrences of a particular entity are filtered in a certain way, such as filtering
    for access control roles. It also can be used to apply criteria to relationship
    loads. In the example below, we can apply a certain set of rules to all queries
    emitted by a particular [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event will intercept all queries
    emitted using the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    For those queries which are SELECT statements and are not attribute or relationship
    loads a custom [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option is added to the query. The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option will be used in the given statement
    and will also be automatically propagated to all relationship loads that descend
    from this query.
  prefs: []
  type: TYPE_NORMAL
- en: The criteria argument given is a `lambda` that accepts a `cls` argument. The
    given class will expand to include all mapped subclass and need not itself be
    a mapped class.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: When using [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option in conjunction with the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") loader option, it’s important to note that [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") only affects the part of the query that
    determines what SQL is rendered in terms of the WHERE and FROM clauses. The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option does not affect the rendering of the SELECT
    statement outside of the columns clause, so does not have any interaction with
    the [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option. However, the way things “work” is that [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") is meant to be used with a query that is already
    selecting from the additional entities in some way, where [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") can apply it’s additional criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example below, assuming a mapping relationship as `A -> A.bs -> B`,
    the given [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option will affect the way in which the JOIN is rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Above, the given [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option will affect the ON clause of the
    JOIN that is specified by `.join(A.bs)`, so is applied as expected. The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option has the effect that columns from `B` are
    added to the columns clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: The use of the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option within the above statement has no effect
    on the behavior of the [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option. If the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option were omitted, the SQL would be the same
    as regards the FROM and WHERE clauses, where [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") continues to add its criteria to the ON
    clause of the JOIN. The addition of [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") only affects the columns clause, in that additional
    columns against `b` are added which are then consumed by the ORM to produce `B`
    instances.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The use of a lambda inside of the call to [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is only invoked **once per unique class**.
    Custom functions should not be invoked within this lambda. See [Using Lambdas
    to add significant speed gains to statement production](../../core/connections.html#engine-lambda-caching)
    for an overview of the “lambda SQL” feature, which is for advanced use only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`entity_or_base` – a mapped class, or a class that is a super class of a particular
    set of mapped classes, to which the rule will apply.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`where_criteria` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a Core SQL expression that applies limiting criteria. This may also be a “lambda:”
    or Python function that accepts a target class as an argument, when the given
    class is a base with many different mapped subclasses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To support pickling, use a module-level Python function to produce the SQL expression
    instead of a lambda or a fixed SQL expression, which tend to not be picklable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`include_aliases` – if True, apply the rule to [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") constructs as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`propagate_to_loaders` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defaults to True, apply to relationship loaders such as lazy loaders. This indicates
    that the option object itself including SQL expression is carried along with each
    loaded instance. Set to `False` to prevent the object from being assigned to individual
    instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[ORM Query Events](../examples.html#examples-session-orm-events) - includes
    examples of using [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria").'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Adding global WHERE / ON criteria](../session_events.html#do-orm-execute-global-criteria)
    - basic example on how to combine [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") with the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`track_closure_variables` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when False, closure variables inside of a lambda expression will not be used
    as part of any cache key. This allows more complex expressions to be used inside
    of a lambda expression but requires that the lambda ensures it returns the identical
    SQL every time given a particular class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Produce an inner join between left and right clauses.
  prefs: []
  type: TYPE_NORMAL
- en: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") is an extension to the
    core join interface provided by [`join()`](../../core/selectable.html#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join"), where the left and right selectable may be
    not only core selectable objects such as [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), but also mapped classes or [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instances. The “on” clause can be a SQL expression
    or an ORM mapped attribute referencing a configured [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  prefs: []
  type: TYPE_NORMAL
- en: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") is not commonly needed
    in modern usage, as its functionality is encapsulated within that of the [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Query.join()`](query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") methods. which feature a significant amount of automation
    beyond [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") by itself. Explicit
    use of [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") with ORM-enabled
    SELECT statements involves use of the [`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method, as in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'In modern SQLAlchemy the above join can be written more succinctly as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: using [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") directly may not
    work properly with modern ORM options such as [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria"). It is strongly recommended to use the
    idiomatic join patterns provided by methods such as [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Select.join_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from") when creating ORM joins.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Joins](select.html#orm-queryguide-joins) - in the [ORM Querying Guide](index.html)
    for background on idiomatic ORM join patterns'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Produce a left outer join between left and right clauses.
  prefs: []
  type: TYPE_NORMAL
- en: This is the “outer join” version of the [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")
    function, featuring the same behavior except that an OUTER JOIN is generated.
    See that function’s documentation for other usage details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Create filtering criterion that relates this query’s primary entity to the given
    related instance, using established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: The SQL rendered is the same as that rendered when a lazy loader would fire
    off from the given parent on that attribute, meaning that the appropriate state
    is taken from the parent object in Python without the need to render joins to
    the parent table in the rendered statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The given property may also make use of [`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") to indicate the left side of the criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'The above use is equivalent to using the `from_entity()` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – An instance which has some [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`property` – Class-bound attribute, which indicates what relationship from
    the instance should be used to reconcile the parent/child relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`from_entity` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Entity in which to consider as the left side. This defaults to the “zero” entity
    of the [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query") itself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 1.2.  ### Populate Existing'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `populate_existing` execution option ensures that, for all rows loaded,
    the corresponding instances in the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") will be fully refreshed – erasing any existing data
    within the objects (including pending changes) and replacing with the data loaded
    from the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example use looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Normally, ORM objects are only loaded once, and if they are matched up to the
    primary key in a subsequent result row, the row is not applied to the object.
    This is both to preserve pending, unflushed changes on the object as well as to
    avoid the overhead and complexity of refreshing data which is already there. The
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    assumes a default working model of a highly isolated transaction, and to the degree
    that data is expected to change within the transaction outside of the local changes
    being made, those use cases would be handled using explicit steps such as this
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `populate_existing`, any set of objects that matches a query can be refreshed,
    and it also allows control over relationship loader options. E.g. to refresh an
    instance while also refreshing a related set of objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'Another use case for `populate_existing` is in support of various attribute
    loading features that can change how an attribute is loaded on a per-query basis.
    Options for which this apply include:'
  prefs: []
  type: TYPE_NORMAL
- en: The [`with_expression()`](columns.html#sqlalchemy.orm.with_expression "sqlalchemy.orm.with_expression")
    option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`PropComparator.and_()`](../internals.html#sqlalchemy.orm.PropComparator.and_
    "sqlalchemy.orm.PropComparator.and_") method that can modify what a loader strategy
    loads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager "sqlalchemy.orm.contains_eager")
    option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [`load_only()`](columns.html#sqlalchemy.orm.load_only "sqlalchemy.orm.load_only")
    option to select what attributes to refresh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `populate_existing` execution option is equvialent to the [`Query.populate_existing()`](query.html#sqlalchemy.orm.Query.populate_existing
    "sqlalchemy.orm.Query.populate_existing") method in [1.x style](../../glossary.html#term-1.x-style)
    ORM queries.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[I’m re-loading data with my Session but it isn’t seeing changes that I committed
    elsewhere](../../faq/sessions.html#faq-session-identity) - in [Frequently Asked
    Questions](../../faq/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Refreshing / Expiring](../session_state_management.html#session-expire) -
    in the ORM [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '### Autoflush'
  prefs: []
  type: TYPE_NORMAL
- en: 'This option, when passed as `False`, will cause the [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") to not invoke the “autoflush” step. It is equivalent
    to using the [`Session.no_autoflush`](../session_api.html#sqlalchemy.orm.Session.no_autoflush
    "sqlalchemy.orm.Session.no_autoflush") context manager to disable autoflush:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: This option will also work on ORM-enabled [`Update`](../../core/dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update") and [`Delete`](../../core/dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete") queries.
  prefs: []
  type: TYPE_NORMAL
- en: The `autoflush` execution option is equvialent to the [`Query.autoflush()`](query.html#sqlalchemy.orm.Query.autoflush
    "sqlalchemy.orm.Query.autoflush") method in [1.x style](../../glossary.html#term-1.x-style)
    ORM queries.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Flushing](../session_basics.html#session-flushing)'
  prefs: []
  type: TYPE_NORMAL
- en: '### Fetching Large Result Sets with Yield Per'
  prefs: []
  type: TYPE_NORMAL
- en: The `yield_per` execution option is an integer value which will cause the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") to buffer only a limited number of rows and/or ORM
    objects at a time, before making data available to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, the ORM will fetch **all** rows immediately, constructing ORM objects
    for each and assembling those objects into a single buffer, before passing this
    buffer to the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object as a source of rows to be returned. The rationale
    for this behavior is to allow correct behavior for features such as joined eager
    loading, uniquifying of results, and the general case of result handling logic
    that relies upon the identity map maintaining a consistent state for every object
    in a result set as it is fetched.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of the `yield_per` option is to change this behavior so that the
    ORM result set is optimized for iteration through very large result sets (e.g.
    > 10K rows), where the user has determined that the above patterns don’t apply.
    When `yield_per` is used, the ORM will instead batch ORM results into sub-collections
    and yield rows from each sub-collection individually as the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object is iterated, so that the Python interpreter
    doesn’t need to declare very large areas of memory which is both time consuming
    and leads to excessive memory use. The option affects both the way the database
    cursor is used as well as how the ORM constructs rows and objects to be passed
    to the [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result").
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: From the above, it follows that the [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") must be consumed in an iterable fashion, that is,
    using iteration such as `for row in result` or using partial row methods such
    as [`Result.fetchmany()`](../../core/connections.html#sqlalchemy.engine.Result.fetchmany
    "sqlalchemy.engine.Result.fetchmany") or [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions"). Calling [`Result.all()`](../../core/connections.html#sqlalchemy.engine.Result.all
    "sqlalchemy.engine.Result.all") will defeat the purpose of using `yield_per`.
  prefs: []
  type: TYPE_NORMAL
- en: Using `yield_per` is equivalent to making use of both the [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") execution option, which selects
    for server side cursors to be used by the backend if supported, and the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method on the returned [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result") object, which establishes a fixed size of rows to
    be fetched as well as a corresponding limit to how many ORM objects will be constructed
    at once.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: '`yield_per` is now available as a Core execution option as well, described
    in detail at [Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results).
    This section details the use of `yield_per` as an execution option with an ORM
    [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    The option behaves as similarly as possible in both contexts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When used with the ORM, `yield_per` must be established either via the [`Executable.execution_options()`](../../core/selectable.html#sqlalchemy.sql.expression.Executable.execution_options
    "sqlalchemy.sql.expression.Executable.execution_options") method on the given
    statement or by passing it to the [`Session.execute.execution_options`](../session_api.html#sqlalchemy.orm.Session.execute.params.execution_options
    "sqlalchemy.orm.Session.execute") parameter of [`Session.execute()`](../session_api.html#sqlalchemy.orm.Session.execute
    "sqlalchemy.orm.Session.execute") or other similar [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") method such as [`Session.scalars()`](../session_api.html#sqlalchemy.orm.Session.scalars
    "sqlalchemy.orm.Session.scalars"). Typical use for fetching ORM objects is illustrated
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'The above code is equivalent to the example below, which uses [`Connection.execution_options.stream_results`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.stream_results
    "sqlalchemy.engine.Connection.execution_options") and [`Connection.execution_options.max_row_buffer`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.max_row_buffer
    "sqlalchemy.engine.Connection.execution_options") Core-level execution options
    in conjunction with the [`Result.yield_per()`](../../core/connections.html#sqlalchemy.engine.Result.yield_per
    "sqlalchemy.engine.Result.yield_per") method of [`Result`](../../core/connections.html#sqlalchemy.engine.Result
    "sqlalchemy.engine.Result"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '`yield_per` is also commonly used in combination with the [`Result.partitions()`](../../core/connections.html#sqlalchemy.engine.Result.partitions
    "sqlalchemy.engine.Result.partitions") method, which will iterate rows in grouped
    partitions. The size of each partition defaults to the integer value passed to
    `yield_per`, as in the below example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: The `yield_per` execution option **is not compatible** with [“subquery” eager
    loading](relationships.html#subquery-eager-loading) loading or [“joined” eager
    loading](relationships.html#joined-eager-loading) when using collections. It is
    potentially compatible with [“select in” eager loading](relationships.html#selectin-eager-loading)
    , provided the database driver supports multiple, independent cursors.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the `yield_per` execution option is not compatible with the [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") method; as this method relies upon storing
    a complete set of identities for all rows, it would necessarily defeat the purpose
    of using `yield_per` which is to handle an arbitrarily large number of rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.6: An exception is raised when ORM rows are fetched
    from a [`Result`](../../core/connections.html#sqlalchemy.engine.Result "sqlalchemy.engine.Result")
    object that makes use of the [`Result.unique()`](../../core/connections.html#sqlalchemy.engine.Result.unique
    "sqlalchemy.engine.Result.unique") filter, at the same time as the `yield_per`
    execution option is used.'
  prefs: []
  type: TYPE_NORMAL
- en: When using the legacy [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    object with [1.x style](../../glossary.html#term-1.x-style) ORM use, the [`Query.yield_per()`](query.html#sqlalchemy.orm.Query.yield_per
    "sqlalchemy.orm.Query.yield_per") method will have the same result as that of
    the `yield_per` execution option.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Server Side Cursors (a.k.a. stream results)](../../core/connections.html#engine-stream-results)'
  prefs: []
  type: TYPE_NORMAL
- en: '### Identity Token'
  prefs: []
  type: TYPE_NORMAL
- en: Deep Alchemy
  prefs: []
  type: TYPE_NORMAL
- en: This option is an advanced-use feature mostly intended to be used with the [Horizontal
    Sharding](../extensions/horizontal_shard.html) extension. For typical cases of
    loading objects with identical primary keys from different “shards” or partitions,
    consider using individual [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") objects per shard first.
  prefs: []
  type: TYPE_NORMAL
- en: The “identity token” is an arbitrary value that can be associated within the
    [identity key](../../glossary.html#term-identity-key) of newly loaded objects.
    This element exists first and foremost to support extensions which perform per-row
    “sharding”, where objects may be loaded from any number of replicas of a particular
    database table that nonetheless have overlapping primary key values. The primary
    consumer of “identity token” is the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension, which supplies a general framework for persisting objects among multiple
    “shards” of a particular database table.
  prefs: []
  type: TYPE_NORMAL
- en: The `identity_token` execution option may be used on a per-query basis to directly
    affect this token. Using it directly, one can populate a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with multiple instances of an object that have the same
    primary key and source table, but different “identities”.
  prefs: []
  type: TYPE_NORMAL
- en: 'One such example is to populate a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") with objects that come from same-named tables in different
    schemas, using the [Translation of Schema Names](../../core/connections.html#schema-translating)
    feature which can affect the choice of schema within the scope of queries. Given
    a mapping as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'The default “schema” name for the class above is `None`, meaning, no schema
    qualification will be written into SQL statements. However, if we make use of
    [`Connection.execution_options.schema_translate_map`](../../core/connections.html#sqlalchemy.engine.Connection.execution_options.params.schema_translate_map
    "sqlalchemy.engine.Connection.execution_options"), mapping `None` to an alternate
    schema, we can place instances of `MyTable` into two different schemas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: The above two blocks create a [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session") object linked to a different schema translate map each
    time, and an instance of `MyTable` is persisted into both `test_schema.my_table`
    as well as `test_schema_2.my_table`.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session")
    objects above are independent. If we wanted to persist both objects in one transaction,
    we would need to use the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we can illustrate querying for these objects in one session as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'Both `obj1` and `obj2` are distinct from each other. However, they both refer
    to primary key id 1 for the `MyTable` class, yet are distinct. This is how the
    `identity_token` comes into play, which we can see in the inspection of each object,
    where we look at `InstanceState.key` to view the two distinct identity tokens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: The above logic takes place automatically when using the [Horizontal Sharding](../extensions/horizontal_shard.html)
    extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0.0rc1: - added the `identity_token` ORM level execution option.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Horizontal Sharding](../examples.html#examples-sharding) - in the [ORM Examples](../examples.html)
    section. See the script `separate_schema_translates.py` for a demonstration of
    the above use case using the full sharding API.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### Inspecting entities and columns from ORM-enabled SELECT and DML statements'
  prefs: []
  type: TYPE_NORMAL
- en: The [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, as well as the [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") and [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") constructs (for the latter DML constructs,
    as of SQLAlchemy 1.4.33), all support the ability to inspect the entities in which
    these statements are created against, as well as the columns and datatypes that
    would be returned in a result set.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object, this information is available from
    the [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute. This attribute
    operates in the same way as the legacy [`Query.column_descriptions`](query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") attribute. The format returned is
    a list of dictionaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'When [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") is used with non-ORM objects
    such as plain [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Column`](../../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects, the entries will contain basic information about individual columns returned
    in all cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.4.33: The [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute now returns
    a value when used against a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") that is not ORM-enabled. Previously, this
    would raise `NotImplementedError`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    and [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    constructs, there are two separate attributes. One is [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") which returns information
    about the primary ORM entity and database table which the DML construct would
    be affecting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") includes an entry `"table"`
    which is actually the **table to be inserted, updated or deleted** by the statement,
    which is **not** always the same as the SQL “selectable” to which the class may
    be mapped. For example, in a joined-table inheritance scenario, `"table"` will
    refer to the local table for the given entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other is [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") which delivers
    information about the columns present in the RETURNING collection in a manner
    roughly similar to that of [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.4.33: Added the [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") and [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") attributes.  ####
    Additional ORM API Constructs'
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [aliased](#sqlalchemy.orm.aliased)(element[, alias, name, flat, ...]) | Produce
    an alias of the given element, usually an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [AliasedClass](#sqlalchemy.orm.util.AliasedClass) | Represents an “aliased”
    form of a mapped class for usage with Query. |'
  prefs: []
  type: TYPE_TB
- en: '| [AliasedInsp](#sqlalchemy.orm.util.AliasedInsp) | Provide an inspection interface
    for an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object. |'
  prefs: []
  type: TYPE_TB
- en: '| [Bundle](#sqlalchemy.orm.Bundle) | A grouping of SQL expressions that are
    returned by a [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    under one namespace. |'
  prefs: []
  type: TYPE_TB
- en: '| [join](#sqlalchemy.orm.join)(left, right[, onclause, isouter, ...]) | Produce
    an inner join between left and right clauses. |'
  prefs: []
  type: TYPE_TB
- en: '| [outerjoin](#sqlalchemy.orm.outerjoin)(left, right[, onclause, full]) | Produce
    a left outer join between left and right clauses. |'
  prefs: []
  type: TYPE_TB
- en: '| [with_loader_criteria](#sqlalchemy.orm.with_loader_criteria)(entity_or_base,
    where_criteria[, loader_only, include_aliases, ...]) | Add additional WHERE criteria
    to the load for all occurrences of a particular entity. |'
  prefs: []
  type: TYPE_TB
- en: '| [with_parent](#sqlalchemy.orm.with_parent)(instance, prop[, from_entity])
    | Create filtering criterion that relates this query’s primary entity to the given
    related instance, using established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Produce an alias of the given element, usually an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: The [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased") function
    is used to create an ad-hoc mapping of a mapped class to a new selectable. By
    default, a selectable is generated from the normally mapped selectable (typically
    a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    ) using the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method. However, [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") can also be used to link the class to a new [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") statement. Also, the [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") function is a variant of [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") that is intended to specify a so-called “polymorphic
    selectable”, that corresponds to the union of several joined-inheritance subclasses
    at once.
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, the [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    function also accepts plain [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, such as a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct. In those cases, the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method is called on the object and
    the new [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object returned. The returned [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") is not ORM-mapped in this case.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Entity Aliases](../../tutorial/data_select.html#tutorial-orm-entity-aliases)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Selecting ORM Aliases](select.html#orm-queryguide-orm-aliases) - in the [ORM
    Querying Guide](index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`element` – element to be aliased. Is normally a mapped class, but for convenience
    can also be a [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alias` – Optional selectable unit to map the element to. This is usually used
    to link the object to a subquery, and should be an aliased select construct as
    one would produce from the [`Query.subquery()`](query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") method or the [`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery") or [`Select.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") methods of the [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – optional string name to use for the alias, if not specified by the
    `alias` parameter. The name, among other things, forms the attribute name that
    will be accessible via tuples returned by a [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. Not supported when creating aliases of [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flat` – Boolean, will be passed through to the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") call so that aliases of [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") objects will alias the individual tables inside
    the join, rather than creating a subquery. This is generally supported by all
    modern databases with regards to right-nested joins and generally produces more
    efficient queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adapt_on_names` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'if True, more liberal “matching” will be used when mapping the mapped columns
    of the ORM entity to those of the given selectable - a name-based match will be
    performed if the given selectable doesn’t otherwise have a column that corresponds
    to one on the entity. The use case for this is when associating an entity with
    some derived selectable such as one that uses aggregate functions:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Above, functions on `aggregated_unit_price` which refer to `.price` will return
    the `func.sum(UnitPrice.price).label('price')` column, as it is matched on the
    name “price”. Ordinarily, the “price” function wouldn’t have any “column correspondence”
    to the actual `UnitPrice.price` column as it is not a proxy of the original.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Represents an “aliased” form of a mapped class for usage with Query.
  prefs: []
  type: TYPE_NORMAL
- en: The ORM equivalent of a [`alias()`](../../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") construct, this object mimics the mapped class
    using a `__getattr__` scheme and maintains a reference to a real [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'A primary purpose of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    is to serve as an alternate within a SQL statement generated by the ORM, such
    that an existing mapped entity can be used in multiple contexts. A simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    is also capable of mapping an existing mapped class to an entirely new selectable,
    provided this selectable is column- compatible with the existing mapped selectable,
    and it can also be configured in a mapping as the target of a [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). See the links below for examples.'
  prefs: []
  type: TYPE_NORMAL
- en: The [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object is constructed typically using the [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function. It also is produced with additional configuration
    when using the [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") function.
  prefs: []
  type: TYPE_NORMAL
- en: The resulting object is an instance of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass"). This object implements an attribute scheme
    which produces the same attribute and method interface as the original mapped
    class, allowing [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    to be compatible with any attribute technique which works on the original class,
    including hybrid attributes (see [Hybrid Attributes](../extensions/hybrid.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    can be inspected for its underlying [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), aliased selectable, and other information using [`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: The resulting inspection object is an instance of [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic "sqlalchemy.orm.with_polymorphic")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Relationship to Aliased Class](../join_conditions.html#relationship-aliased-class)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Row-Limited Relationships with Window Functions](../join_conditions.html#relationship-to-window-function)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class `sqlalchemy.orm.AliasedClass` (`sqlalchemy.inspection.Inspectable`, `sqlalchemy.orm.ORMColumnsClauseRole`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Provide an inspection interface for an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    object is returned given an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") using the [`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes on [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`entity` - the [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    represented.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mapper` - the [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    mapping the underlying class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`selectable` - the [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") construct which ultimately represents an aliased
    [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` - the name of the alias. Also is used as the attribute name when returned
    in a result tuple from [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_polymorphic_mappers` - collection of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects indicating all those mappers expressed in the
    select construct for the [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polymorphic_on` - an alternate column or SQL expression which will be used
    as the “discriminator” for a polymorphic load.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Runtime Inspection API](../../core/inspection.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class `sqlalchemy.orm.AliasedInsp` (`sqlalchemy.orm.ORMEntityColumnsClauseRole`,
    `sqlalchemy.orm.ORMFromClauseRole`, [`sqlalchemy.sql.cache_key.HasCacheKey`](../../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey"), [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"), `sqlalchemy.util.langhelpers.MemoizedSlots`,
    `sqlalchemy.inspection.Inspectable`, `typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: A grouping of SQL expressions that are returned by a [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") under one namespace.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") essentially allows
    nesting of the tuple-based results returned by a column-oriented [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. It also is extensible via simple subclassing,
    where the primary capability to override is that of how the set of expressions
    should be returned, allowing post-processing as well as custom return types, without
    involving ORM identity-mapped classes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Grouping Selected Attributes with Bundles](select.html#bundles)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.orm.Bundle.__init__), [c](#sqlalchemy.orm.Bundle.c),
    [columns](#sqlalchemy.orm.Bundle.columns), [create_row_processor()](#sqlalchemy.orm.Bundle.create_row_processor),
    [is_aliased_class](#sqlalchemy.orm.Bundle.is_aliased_class), [is_bundle](#sqlalchemy.orm.Bundle.is_bundle),
    [is_clause_element](#sqlalchemy.orm.Bundle.is_clause_element), [is_mapper](#sqlalchemy.orm.Bundle.is_mapper),
    [label()](#sqlalchemy.orm.Bundle.label), [single_entity](#sqlalchemy.orm.Bundle.single_entity)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    (`sqlalchemy.orm.ORMColumnsClauseRole`, `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    `sqlalchemy.sql.cache_key.MemoizedHasCacheKey`, `sqlalchemy.inspection.Inspectable`,
    [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – name of the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*exprs` – columns or SQL expressions comprising the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`single_entity=False` – if True, rows for this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") can be returned as a “single entity” outside of any enclosing
    tuple in the same manner as a mapped entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: An alias for [`Bundle.columns`](#sqlalchemy.orm.Bundle.columns "sqlalchemy.orm.Bundle.columns").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: A namespace of SQL expressions referred to by this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Nesting of bundles is also supported:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Bundle.c`](#sqlalchemy.orm.Bundle.c "sqlalchemy.orm.Bundle.c")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: Produce the “row processing” function for this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: May be overridden by subclasses to provide custom behaviors when results are
    fetched. The method is passed the statement object and a set of “row processor”
    functions at query execution time; these processor functions when given a result
    row will return the individual attribute value, which can then be adapted into
    any kind of return data structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example below illustrates replacing the usual [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") return structure with a straight Python dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: 'A result from the above [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    will return dictionary values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: Provide a copy of this [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    passing a new label.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: If True, queries for a single Bundle will be returned as a single entity, rather
    than an element within a keyed tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Add additional WHERE criteria to the load for all occurrences of a particular
    entity.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option is intended to add limiting criteria to a particular kind of entity in
    a query, **globally**, meaning it will apply to the entity as it appears in the
    SELECT query as well as within any subqueries, join conditions, and relationship
    loads, including both eager and lazy loaders, without the need for it to be specified
    in any particular part of the query. The rendering logic uses the same system
    used by single table inheritance to ensure a certain discriminator is applied
    to a table.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g., using [2.0-style](../../glossary.html#term-1) queries, we can limit the
    way the `User.addresses` collection is loaded, regardless of the kind of loading
    used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: Above, the “selectinload” for `User.addresses` will apply the given filtering
    criteria to the WHERE clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another example, where the filtering will be applied to the ON clause of the
    join, in this example using [1.x style](../../glossary.html#term-1.x-style) queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'The primary purpose of [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is to use it in the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event handler to ensure that all
    occurrences of a particular entity are filtered in a certain way, such as filtering
    for access control roles. It also can be used to apply criteria to relationship
    loads. In the example below, we can apply a certain set of rules to all queries
    emitted by a particular [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event will intercept all queries
    emitted using the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    For those queries which are SELECT statements and are not attribute or relationship
    loads a custom [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option is added to the query. The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option will be used in the given statement
    and will also be automatically propagated to all relationship loads that descend
    from this query.
  prefs: []
  type: TYPE_NORMAL
- en: The criteria argument given is a `lambda` that accepts a `cls` argument. The
    given class will expand to include all mapped subclass and need not itself be
    a mapped class.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: When using [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option in conjunction with the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") loader option, it’s important to note that [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") only affects the part of the query that
    determines what SQL is rendered in terms of the WHERE and FROM clauses. The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option does not affect the rendering of the SELECT
    statement outside of the columns clause, so does not have any interaction with
    the [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option. However, the way things “work” is that [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") is meant to be used with a query that is already
    selecting from the additional entities in some way, where [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") can apply it’s additional criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example below, assuming a mapping relationship as `A -> A.bs -> B`,
    the given [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option will affect the way in which the JOIN is rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'Above, the given [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option will affect the ON clause of the
    JOIN that is specified by `.join(A.bs)`, so is applied as expected. The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option has the effect that columns from `B` are
    added to the columns clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: The use of the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option within the above statement has no effect
    on the behavior of the [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option. If the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option were omitted, the SQL would be the same
    as regards the FROM and WHERE clauses, where [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") continues to add its criteria to the ON
    clause of the JOIN. The addition of [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") only affects the columns clause, in that additional
    columns against `b` are added which are then consumed by the ORM to produce `B`
    instances.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The use of a lambda inside of the call to [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is only invoked **once per unique class**.
    Custom functions should not be invoked within this lambda. See [Using Lambdas
    to add significant speed gains to statement production](../../core/connections.html#engine-lambda-caching)
    for an overview of the “lambda SQL” feature, which is for advanced use only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`entity_or_base` – a mapped class, or a class that is a super class of a particular
    set of mapped classes, to which the rule will apply.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`where_criteria` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a Core SQL expression that applies limiting criteria. This may also be a “lambda:”
    or Python function that accepts a target class as an argument, when the given
    class is a base with many different mapped subclasses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To support pickling, use a module-level Python function to produce the SQL expression
    instead of a lambda or a fixed SQL expression, which tend to not be picklable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`include_aliases` – if True, apply the rule to [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") constructs as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`propagate_to_loaders` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defaults to True, apply to relationship loaders such as lazy loaders. This indicates
    that the option object itself including SQL expression is carried along with each
    loaded instance. Set to `False` to prevent the object from being assigned to individual
    instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[ORM Query Events](../examples.html#examples-session-orm-events) - includes
    examples of using [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria").'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Adding global WHERE / ON criteria](../session_events.html#do-orm-execute-global-criteria)
    - basic example on how to combine [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") with the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`track_closure_variables` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when False, closure variables inside of a lambda expression will not be used
    as part of any cache key. This allows more complex expressions to be used inside
    of a lambda expression but requires that the lambda ensures it returns the identical
    SQL every time given a particular class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Produce an inner join between left and right clauses.
  prefs: []
  type: TYPE_NORMAL
- en: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") is an extension to the
    core join interface provided by [`join()`](../../core/selectable.html#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join"), where the left and right selectable may be
    not only core selectable objects such as [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), but also mapped classes or [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instances. The “on” clause can be a SQL expression
    or an ORM mapped attribute referencing a configured [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  prefs: []
  type: TYPE_NORMAL
- en: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") is not commonly needed
    in modern usage, as its functionality is encapsulated within that of the [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Query.join()`](query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") methods. which feature a significant amount of automation
    beyond [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") by itself. Explicit
    use of [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") with ORM-enabled
    SELECT statements involves use of the [`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method, as in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: 'In modern SQLAlchemy the above join can be written more succinctly as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: using [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") directly may not
    work properly with modern ORM options such as [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria"). It is strongly recommended to use the
    idiomatic join patterns provided by methods such as [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Select.join_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from") when creating ORM joins.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Joins](select.html#orm-queryguide-joins) - in the [ORM Querying Guide](index.html)
    for background on idiomatic ORM join patterns'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: Produce a left outer join between left and right clauses.
  prefs: []
  type: TYPE_NORMAL
- en: This is the “outer join” version of the [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")
    function, featuring the same behavior except that an OUTER JOIN is generated.
    See that function’s documentation for other usage details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: Create filtering criterion that relates this query’s primary entity to the given
    related instance, using established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: The SQL rendered is the same as that rendered when a lazy loader would fire
    off from the given parent on that attribute, meaning that the appropriate state
    is taken from the parent object in Python without the need to render joins to
    the parent table in the rendered statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The given property may also make use of [`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") to indicate the left side of the criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'The above use is equivalent to using the `from_entity()` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – An instance which has some [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`property` – Class-bound attribute, which indicates what relationship from
    the instance should be used to reconcile the parent/child relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`from_entity` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Entity in which to consider as the left side. This defaults to the “zero” entity
    of the [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query") itself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'New in version 1.2.  #### Inspecting entities and columns from ORM-enabled
    SELECT and DML statements'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct, as well as the [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert
    "sqlalchemy.sql.expression.insert"), [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update
    "sqlalchemy.sql.expression.update") and [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete
    "sqlalchemy.sql.expression.delete") constructs (for the latter DML constructs,
    as of SQLAlchemy 1.4.33), all support the ability to inspect the entities in which
    these statements are created against, as well as the columns and datatypes that
    would be returned in a result set.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") object, this information is available from
    the [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute. This attribute
    operates in the same way as the legacy [`Query.column_descriptions`](query.html#sqlalchemy.orm.Query.column_descriptions
    "sqlalchemy.orm.Query.column_descriptions") attribute. The format returned is
    a list of dictionaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'When [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") is used with non-ORM objects
    such as plain [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Column`](../../core/metadata.html#sqlalchemy.schema.Column "sqlalchemy.schema.Column")
    objects, the entries will contain basic information about individual columns returned
    in all cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'Changed in version 1.4.33: The [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions") attribute now returns
    a value when used against a [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") that is not ORM-enabled. Previously, this
    would raise `NotImplementedError`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For [`insert()`](../../core/dml.html#sqlalchemy.sql.expression.insert "sqlalchemy.sql.expression.insert"),
    [`update()`](../../core/dml.html#sqlalchemy.sql.expression.update "sqlalchemy.sql.expression.update")
    and [`delete()`](../../core/dml.html#sqlalchemy.sql.expression.delete "sqlalchemy.sql.expression.delete")
    constructs, there are two separate attributes. One is [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") which returns information
    about the primary ORM entity and database table which the DML construct would
    be affecting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") includes an entry `"table"`
    which is actually the **table to be inserted, updated or deleted** by the statement,
    which is **not** always the same as the SQL “selectable” to which the class may
    be mapped. For example, in a joined-table inheritance scenario, `"table"` will
    refer to the local table for the given entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other is [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") which delivers
    information about the columns present in the RETURNING collection in a manner
    roughly similar to that of [`Select.column_descriptions`](../../core/selectable.html#sqlalchemy.sql.expression.Select.column_descriptions
    "sqlalchemy.sql.expression.Select.column_descriptions"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'New in version 1.4.33: Added the [`UpdateBase.entity_description`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.entity_description
    "sqlalchemy.sql.expression.UpdateBase.entity_description") and [`UpdateBase.returning_column_descriptions`](../../core/dml.html#sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions
    "sqlalchemy.sql.expression.UpdateBase.returning_column_descriptions") attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### Additional ORM API Constructs'
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [aliased](#sqlalchemy.orm.aliased)(element[, alias, name, flat, ...]) | Produce
    an alias of the given element, usually an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instance. |'
  prefs: []
  type: TYPE_TB
- en: '| [AliasedClass](#sqlalchemy.orm.util.AliasedClass) | Represents an “aliased”
    form of a mapped class for usage with Query. |'
  prefs: []
  type: TYPE_TB
- en: '| [AliasedInsp](#sqlalchemy.orm.util.AliasedInsp) | Provide an inspection interface
    for an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object. |'
  prefs: []
  type: TYPE_TB
- en: '| [Bundle](#sqlalchemy.orm.Bundle) | A grouping of SQL expressions that are
    returned by a [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query")
    under one namespace. |'
  prefs: []
  type: TYPE_TB
- en: '| [join](#sqlalchemy.orm.join)(left, right[, onclause, isouter, ...]) | Produce
    an inner join between left and right clauses. |'
  prefs: []
  type: TYPE_TB
- en: '| [outerjoin](#sqlalchemy.orm.outerjoin)(left, right[, onclause, full]) | Produce
    a left outer join between left and right clauses. |'
  prefs: []
  type: TYPE_TB
- en: '| [with_loader_criteria](#sqlalchemy.orm.with_loader_criteria)(entity_or_base,
    where_criteria[, loader_only, include_aliases, ...]) | Add additional WHERE criteria
    to the load for all occurrences of a particular entity. |'
  prefs: []
  type: TYPE_TB
- en: '| [with_parent](#sqlalchemy.orm.with_parent)(instance, prop[, from_entity])
    | Create filtering criterion that relates this query’s primary entity to the given
    related instance, using established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Produce an alias of the given element, usually an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: The [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased") function
    is used to create an ad-hoc mapping of a mapped class to a new selectable. By
    default, a selectable is generated from the normally mapped selectable (typically
    a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    ) using the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method. However, [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") can also be used to link the class to a new [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") statement. Also, the [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") function is a variant of [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") that is intended to specify a so-called “polymorphic
    selectable”, that corresponds to the union of several joined-inheritance subclasses
    at once.
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, the [`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")
    function also accepts plain [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") constructs, such as a [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table") or [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct. In those cases, the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") method is called on the object and
    the new [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias "sqlalchemy.sql.expression.Alias")
    object returned. The returned [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") is not ORM-mapped in this case.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[ORM Entity Aliases](../../tutorial/data_select.html#tutorial-orm-entity-aliases)
    - in the [SQLAlchemy Unified Tutorial](../../tutorial/index.html#unified-tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Selecting ORM Aliases](select.html#orm-queryguide-orm-aliases) - in the [ORM
    Querying Guide](index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`element` – element to be aliased. Is normally a mapped class, but for convenience
    can also be a [`FromClause`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause
    "sqlalchemy.sql.expression.FromClause") element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alias` – Optional selectable unit to map the element to. This is usually used
    to link the object to a subquery, and should be an aliased select construct as
    one would produce from the [`Query.subquery()`](query.html#sqlalchemy.orm.Query.subquery
    "sqlalchemy.orm.Query.subquery") method or the [`Select.subquery()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.subquery
    "sqlalchemy.sql.expression.Select.subquery") or [`Select.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.alias
    "sqlalchemy.sql.expression.Select.alias") methods of the [`select()`](../../core/selectable.html#sqlalchemy.sql.expression.select
    "sqlalchemy.sql.expression.select") construct.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – optional string name to use for the alias, if not specified by the
    `alias` parameter. The name, among other things, forms the attribute name that
    will be accessible via tuples returned by a [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. Not supported when creating aliases of [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flat` – Boolean, will be passed through to the [`FromClause.alias()`](../../core/selectable.html#sqlalchemy.sql.expression.FromClause.alias
    "sqlalchemy.sql.expression.FromClause.alias") call so that aliases of [`Join`](../../core/selectable.html#sqlalchemy.sql.expression.Join
    "sqlalchemy.sql.expression.Join") objects will alias the individual tables inside
    the join, rather than creating a subquery. This is generally supported by all
    modern databases with regards to right-nested joins and generally produces more
    efficient queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adapt_on_names` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'if True, more liberal “matching” will be used when mapping the mapped columns
    of the ORM entity to those of the given selectable - a name-based match will be
    performed if the given selectable doesn’t otherwise have a column that corresponds
    to one on the entity. The use case for this is when associating an entity with
    some derived selectable such as one that uses aggregate functions:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Above, functions on `aggregated_unit_price` which refer to `.price` will return
    the `func.sum(UnitPrice.price).label('price')` column, as it is matched on the
    name “price”. Ordinarily, the “price” function wouldn’t have any “column correspondence”
    to the actual `UnitPrice.price` column as it is not a proxy of the original.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Represents an “aliased” form of a mapped class for usage with Query.
  prefs: []
  type: TYPE_NORMAL
- en: The ORM equivalent of a [`alias()`](../../core/selectable.html#sqlalchemy.sql.expression.alias
    "sqlalchemy.sql.expression.alias") construct, this object mimics the mapped class
    using a `__getattr__` scheme and maintains a reference to a real [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'A primary purpose of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    is to serve as an alternate within a SQL statement generated by the ORM, such
    that an existing mapped entity can be used in multiple contexts. A simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    is also capable of mapping an existing mapped class to an entirely new selectable,
    provided this selectable is column- compatible with the existing mapped selectable,
    and it can also be configured in a mapping as the target of a [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship"). See the links below for examples.'
  prefs: []
  type: TYPE_NORMAL
- en: The [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    object is constructed typically using the [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") function. It also is produced with additional configuration
    when using the [`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic
    "sqlalchemy.orm.with_polymorphic") function.
  prefs: []
  type: TYPE_NORMAL
- en: The resulting object is an instance of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass"). This object implements an attribute scheme
    which produces the same attribute and method interface as the original mapped
    class, allowing [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    to be compatible with any attribute technique which works on the original class,
    including hybrid attributes (see [Hybrid Attributes](../extensions/hybrid.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    can be inspected for its underlying [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper"), aliased selectable, and other information using [`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: The resulting inspection object is an instance of [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp
    "sqlalchemy.orm.util.AliasedInsp").
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`aliased()`](#sqlalchemy.orm.aliased "sqlalchemy.orm.aliased")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`with_polymorphic()`](inheritance.html#sqlalchemy.orm.with_polymorphic "sqlalchemy.orm.with_polymorphic")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Relationship to Aliased Class](../join_conditions.html#relationship-aliased-class)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Row-Limited Relationships with Window Functions](../join_conditions.html#relationship-to-window-function)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class `sqlalchemy.orm.AliasedClass` (`sqlalchemy.inspection.Inspectable`, `sqlalchemy.orm.ORMColumnsClauseRole`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: Provide an inspection interface for an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    object is returned given an [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") using the [`inspect()`](../../core/inspection.html#sqlalchemy.inspect
    "sqlalchemy.inspect") function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'Attributes on [`AliasedInsp`](#sqlalchemy.orm.util.AliasedInsp "sqlalchemy.orm.util.AliasedInsp")
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`entity` - the [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass")
    represented.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mapper` - the [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper "sqlalchemy.orm.Mapper")
    mapping the underlying class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`selectable` - the [`Alias`](../../core/selectable.html#sqlalchemy.sql.expression.Alias
    "sqlalchemy.sql.expression.Alias") construct which ultimately represents an aliased
    [`Table`](../../core/metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    or [`Select`](../../core/selectable.html#sqlalchemy.sql.expression.Select "sqlalchemy.sql.expression.Select")
    construct.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` - the name of the alias. Also is used as the attribute name when returned
    in a result tuple from [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_polymorphic_mappers` - collection of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper") objects indicating all those mappers expressed in the
    select construct for the [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass "sqlalchemy.orm.util.AliasedClass").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`polymorphic_on` - an alternate column or SQL expression which will be used
    as the “discriminator” for a polymorphic load.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Runtime Inspection API](../../core/inspection.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class `sqlalchemy.orm.AliasedInsp` (`sqlalchemy.orm.ORMEntityColumnsClauseRole`,
    `sqlalchemy.orm.ORMFromClauseRole`, [`sqlalchemy.sql.cache_key.HasCacheKey`](../../core/foundation.html#sqlalchemy.sql.traversals.HasCacheKey
    "sqlalchemy.sql.cache_key.HasCacheKey"), [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"), `sqlalchemy.util.langhelpers.MemoizedSlots`,
    `sqlalchemy.inspection.Inspectable`, `typing.Generic`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: A grouping of SQL expressions that are returned by a [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") under one namespace.
  prefs: []
  type: TYPE_NORMAL
- en: The [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle") essentially allows
    nesting of the tuple-based results returned by a column-oriented [`Query`](query.html#sqlalchemy.orm.Query
    "sqlalchemy.orm.Query") object. It also is extensible via simple subclassing,
    where the primary capability to override is that of how the set of expressions
    should be returned, allowing post-processing as well as custom return types, without
    involving ORM identity-mapped classes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Grouping Selected Attributes with Bundles](select.html#bundles)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.orm.Bundle.__init__), [c](#sqlalchemy.orm.Bundle.c),
    [columns](#sqlalchemy.orm.Bundle.columns), [create_row_processor()](#sqlalchemy.orm.Bundle.create_row_processor),
    [is_aliased_class](#sqlalchemy.orm.Bundle.is_aliased_class), [is_bundle](#sqlalchemy.orm.Bundle.is_bundle),
    [is_clause_element](#sqlalchemy.orm.Bundle.is_clause_element), [is_mapper](#sqlalchemy.orm.Bundle.is_mapper),
    [label()](#sqlalchemy.orm.Bundle.label), [single_entity](#sqlalchemy.orm.Bundle.single_entity)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.orm.Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    (`sqlalchemy.orm.ORMColumnsClauseRole`, `sqlalchemy.sql.annotation.SupportsCloneAnnotations`,
    `sqlalchemy.sql.cache_key.MemoizedHasCacheKey`, `sqlalchemy.inspection.Inspectable`,
    [`sqlalchemy.orm.base.InspectionAttr`](../internals.html#sqlalchemy.orm.InspectionAttr
    "sqlalchemy.orm.base.InspectionAttr"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` – name of the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*exprs` – columns or SQL expressions comprising the bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`single_entity=False` – if True, rows for this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle") can be returned as a “single entity” outside of any enclosing
    tuple in the same manner as a mapped entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: An alias for [`Bundle.columns`](#sqlalchemy.orm.Bundle.columns "sqlalchemy.orm.Bundle.columns").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: A namespace of SQL expressions referred to by this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: 'e.g.:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Nesting of bundles is also supported:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs:
  - PREF_BQ
  type: TYPE_PRE
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Bundle.c`](#sqlalchemy.orm.Bundle.c "sqlalchemy.orm.Bundle.c")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: Produce the “row processing” function for this [`Bundle`](#sqlalchemy.orm.Bundle
    "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: May be overridden by subclasses to provide custom behaviors when results are
    fetched. The method is passed the statement object and a set of “row processor”
    functions at query execution time; these processor functions when given a result
    row will return the individual attribute value, which can then be adapted into
    any kind of return data structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example below illustrates replacing the usual [`Row`](../../core/connections.html#sqlalchemy.engine.Row
    "sqlalchemy.engine.Row") return structure with a straight Python dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: 'A result from the above [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    will return dictionary values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`ClauseElement`](../../core/foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: True if this object is an instance of [`Mapper`](../mapping_api.html#sqlalchemy.orm.Mapper
    "sqlalchemy.orm.Mapper").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: Provide a copy of this [`Bundle`](#sqlalchemy.orm.Bundle "sqlalchemy.orm.Bundle")
    passing a new label.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: If True, queries for a single Bundle will be returned as a single entity, rather
    than an element within a keyed tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: Add additional WHERE criteria to the load for all occurrences of a particular
    entity.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option is intended to add limiting criteria to a particular kind of entity in
    a query, **globally**, meaning it will apply to the entity as it appears in the
    SELECT query as well as within any subqueries, join conditions, and relationship
    loads, including both eager and lazy loaders, without the need for it to be specified
    in any particular part of the query. The rendering logic uses the same system
    used by single table inheritance to ensure a certain discriminator is applied
    to a table.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g., using [2.0-style](../../glossary.html#term-1) queries, we can limit the
    way the `User.addresses` collection is loaded, regardless of the kind of loading
    used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: Above, the “selectinload” for `User.addresses` will apply the given filtering
    criteria to the WHERE clause.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another example, where the filtering will be applied to the ON clause of the
    join, in this example using [1.x style](../../glossary.html#term-1.x-style) queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: 'The primary purpose of [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is to use it in the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event handler to ensure that all
    occurrences of a particular entity are filtered in a certain way, such as filtering
    for access control roles. It also can be used to apply criteria to relationship
    loads. In the example below, we can apply a certain set of rules to all queries
    emitted by a particular [`Session`](../session_api.html#sqlalchemy.orm.Session
    "sqlalchemy.orm.Session"):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event will intercept all queries
    emitted using the [`Session`](../session_api.html#sqlalchemy.orm.Session "sqlalchemy.orm.Session").
    For those queries which are SELECT statements and are not attribute or relationship
    loads a custom [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option is added to the query. The [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option will be used in the given statement
    and will also be automatically propagated to all relationship loads that descend
    from this query.
  prefs: []
  type: TYPE_NORMAL
- en: The criteria argument given is a `lambda` that accepts a `cls` argument. The
    given class will expand to include all mapped subclass and need not itself be
    a mapped class.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: When using [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option in conjunction with the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") loader option, it’s important to note that [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") only affects the part of the query that
    determines what SQL is rendered in terms of the WHERE and FROM clauses. The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option does not affect the rendering of the SELECT
    statement outside of the columns clause, so does not have any interaction with
    the [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option. However, the way things “work” is that [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") is meant to be used with a query that is already
    selecting from the additional entities in some way, where [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") can apply it’s additional criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example below, assuming a mapping relationship as `A -> A.bs -> B`,
    the given [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria "sqlalchemy.orm.with_loader_criteria")
    option will affect the way in which the JOIN is rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: 'Above, the given [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option will affect the ON clause of the
    JOIN that is specified by `.join(A.bs)`, so is applied as expected. The [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option has the effect that columns from `B` are
    added to the columns clause:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: The use of the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option within the above statement has no effect
    on the behavior of the [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") option. If the [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") option were omitted, the SQL would be the same
    as regards the FROM and WHERE clauses, where [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") continues to add its criteria to the ON
    clause of the JOIN. The addition of [`contains_eager()`](relationships.html#sqlalchemy.orm.contains_eager
    "sqlalchemy.orm.contains_eager") only affects the columns clause, in that additional
    columns against `b` are added which are then consumed by the ORM to produce `B`
    instances.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The use of a lambda inside of the call to [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") is only invoked **once per unique class**.
    Custom functions should not be invoked within this lambda. See [Using Lambdas
    to add significant speed gains to statement production](../../core/connections.html#engine-lambda-caching)
    for an overview of the “lambda SQL” feature, which is for advanced use only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`entity_or_base` – a mapped class, or a class that is a super class of a particular
    set of mapped classes, to which the rule will apply.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`where_criteria` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a Core SQL expression that applies limiting criteria. This may also be a “lambda:”
    or Python function that accepts a target class as an argument, when the given
    class is a base with many different mapped subclasses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To support pickling, use a module-level Python function to produce the SQL expression
    instead of a lambda or a fixed SQL expression, which tend to not be picklable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`include_aliases` – if True, apply the rule to [`aliased()`](#sqlalchemy.orm.aliased
    "sqlalchemy.orm.aliased") constructs as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`propagate_to_loaders` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: defaults to True, apply to relationship loaders such as lazy loaders. This indicates
    that the option object itself including SQL expression is carried along with each
    loaded instance. Set to `False` to prevent the object from being assigned to individual
    instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[ORM Query Events](../examples.html#examples-session-orm-events) - includes
    examples of using [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria").'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Adding global WHERE / ON criteria](../session_events.html#do-orm-execute-global-criteria)
    - basic example on how to combine [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria") with the [`SessionEvents.do_orm_execute()`](../events.html#sqlalchemy.orm.SessionEvents.do_orm_execute
    "sqlalchemy.orm.SessionEvents.do_orm_execute") event.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`track_closure_variables` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: when False, closure variables inside of a lambda expression will not be used
    as part of any cache key. This allows more complex expressions to be used inside
    of a lambda expression but requires that the lambda ensures it returns the identical
    SQL every time given a particular class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.4.0b2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: Produce an inner join between left and right clauses.
  prefs: []
  type: TYPE_NORMAL
- en: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") is an extension to the
    core join interface provided by [`join()`](../../core/selectable.html#sqlalchemy.sql.expression.join
    "sqlalchemy.sql.expression.join"), where the left and right selectable may be
    not only core selectable objects such as [`Table`](../../core/metadata.html#sqlalchemy.schema.Table
    "sqlalchemy.schema.Table"), but also mapped classes or [`AliasedClass`](#sqlalchemy.orm.util.AliasedClass
    "sqlalchemy.orm.util.AliasedClass") instances. The “on” clause can be a SQL expression
    or an ORM mapped attribute referencing a configured [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  prefs: []
  type: TYPE_NORMAL
- en: '[`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") is not commonly needed
    in modern usage, as its functionality is encapsulated within that of the [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Query.join()`](query.html#sqlalchemy.orm.Query.join
    "sqlalchemy.orm.Query.join") methods. which feature a significant amount of automation
    beyond [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") by itself. Explicit
    use of [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") with ORM-enabled
    SELECT statements involves use of the [`Select.select_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.select_from
    "sqlalchemy.sql.expression.Select.select_from") method, as in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: 'In modern SQLAlchemy the above join can be written more succinctly as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: using [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join") directly may not
    work properly with modern ORM options such as [`with_loader_criteria()`](#sqlalchemy.orm.with_loader_criteria
    "sqlalchemy.orm.with_loader_criteria"). It is strongly recommended to use the
    idiomatic join patterns provided by methods such as [`Select.join()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join
    "sqlalchemy.sql.expression.Select.join") and [`Select.join_from()`](../../core/selectable.html#sqlalchemy.sql.expression.Select.join_from
    "sqlalchemy.sql.expression.Select.join_from") when creating ORM joins.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Joins](select.html#orm-queryguide-joins) - in the [ORM Querying Guide](index.html)
    for background on idiomatic ORM join patterns'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: Produce a left outer join between left and right clauses.
  prefs: []
  type: TYPE_NORMAL
- en: This is the “outer join” version of the [`join()`](#sqlalchemy.orm.join "sqlalchemy.orm.join")
    function, featuring the same behavior except that an OUTER JOIN is generated.
    See that function’s documentation for other usage details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: Create filtering criterion that relates this query’s primary entity to the given
    related instance, using established [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship") configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: The SQL rendered is the same as that rendered when a lazy loader would fire
    off from the given parent on that attribute, meaning that the appropriate state
    is taken from the parent object in Python without the need to render joins to
    the parent table in the rendered statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The given property may also make use of [`PropComparator.of_type()`](../internals.html#sqlalchemy.orm.PropComparator.of_type
    "sqlalchemy.orm.PropComparator.of_type") to indicate the left side of the criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: 'The above use is equivalent to using the `from_entity()` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`instance` – An instance which has some [`relationship()`](../relationship_api.html#sqlalchemy.orm.relationship
    "sqlalchemy.orm.relationship").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`property` – Class-bound attribute, which indicates what relationship from
    the instance should be used to reconcile the parent/child relationship.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`from_entity` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Entity in which to consider as the left side. This defaults to the “zero” entity
    of the [`Query`](query.html#sqlalchemy.orm.Query "sqlalchemy.orm.Query") itself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: New in version 1.2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
