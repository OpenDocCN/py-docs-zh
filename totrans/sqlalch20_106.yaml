- en: Core Internals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://docs.sqlalchemy.org/en/20/core/internals.html](https://docs.sqlalchemy.org/en/20/core/internals.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Some key internal constructs are listed here.
  prefs: []
  type: TYPE_NORMAL
- en: '| Object Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [AdaptedConnection](#sqlalchemy.engine.AdaptedConnection) | Interface of
    an adapted connection object to support the DBAPI protocol. |'
  prefs: []
  type: TYPE_TB
- en: '| [BindTyping](#sqlalchemy.engine.BindTyping) | Define different methods of
    passing typing information for bound parameters in a statement to the database
    driver. |'
  prefs: []
  type: TYPE_TB
- en: '| [Compiled](#sqlalchemy.engine.Compiled) | Represent a compiled SQL or DDL
    expression. |'
  prefs: []
  type: TYPE_TB
- en: '| [DBAPIConnection](#sqlalchemy.engine.interfaces.DBAPIConnection) | protocol
    representing a [**PEP 249**](https://peps.python.org/pep-0249/) database connection.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [DBAPICursor](#sqlalchemy.engine.interfaces.DBAPICursor) | protocol representing
    a [**PEP 249**](https://peps.python.org/pep-0249/) database cursor. |'
  prefs: []
  type: TYPE_TB
- en: '| [DBAPIType](#sqlalchemy.engine.interfaces.DBAPIType) | protocol representing
    a [**PEP 249**](https://peps.python.org/pep-0249/) database type. |'
  prefs: []
  type: TYPE_TB
- en: '| [DDLCompiler](#sqlalchemy.sql.compiler.DDLCompiler) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [DefaultDialect](#sqlalchemy.engine.default.DefaultDialect) | Default implementation
    of Dialect |'
  prefs: []
  type: TYPE_TB
- en: '| [DefaultExecutionContext](#sqlalchemy.engine.default.DefaultExecutionContext)
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [Dialect](#sqlalchemy.engine.Dialect) | Define the behavior of a specific
    database and DB-API combination. |'
  prefs: []
  type: TYPE_TB
- en: '| [ExecutionContext](#sqlalchemy.engine.ExecutionContext) | A messenger object
    for a Dialect that corresponds to a single execution. |'
  prefs: []
  type: TYPE_TB
- en: '| [ExpandedState](#sqlalchemy.sql.compiler.ExpandedState) | represents state
    to use when producing “expanded” and “post compile” bound parameters for a statement.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [GenericTypeCompiler](#sqlalchemy.sql.compiler.GenericTypeCompiler) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [Identified](#sqlalchemy.log.Identified) |  |'
  prefs: []
  type: TYPE_TB
- en: '| [IdentifierPreparer](#sqlalchemy.sql.compiler.IdentifierPreparer) | Handle
    quoting and case-folding of identifiers based on options. |'
  prefs: []
  type: TYPE_TB
- en: '| [SQLCompiler](#sqlalchemy.sql.compiler.SQLCompiler) | Default implementation
    of [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled").
    |'
  prefs: []
  type: TYPE_TB
- en: '| [StrSQLCompiler](#sqlalchemy.sql.compiler.StrSQLCompiler) | A [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") subclass which allows a small selection
    of non-standard SQL features to render into a string value. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Define different methods of passing typing information for bound parameters
    in a statement to the database driver.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[NONE](#sqlalchemy.engine.BindTyping.NONE), [RENDER_CASTS](#sqlalchemy.engine.BindTyping.RENDER_CASTS),
    [SETINPUTSIZES](#sqlalchemy.engine.BindTyping.SETINPUTSIZES)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.engine.BindTyping`](#sqlalchemy.engine.BindTyping "sqlalchemy.engine.BindTyping")
    (`enum.Enum`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: No steps are taken to pass typing information to the database driver.
  prefs: []
  type: TYPE_NORMAL
- en: This is the default behavior for databases such as SQLite, MySQL / MariaDB,
    SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Render casts or other directives in the SQL string.
  prefs: []
  type: TYPE_NORMAL
- en: This method is used for all PostgreSQL dialects, including asyncpg, pg8000,
    psycopg, psycopg2\. Dialects which implement this can choose which kinds of datatypes
    are explicitly cast in SQL statements and which aren’t.
  prefs: []
  type: TYPE_NORMAL
- en: When RENDER_CASTS is used, the compiler will invoke the `SQLCompiler.render_bind_cast()`
    method for the rendered string representation of each [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") object whose dialect-level type sets
    the [`TypeEngine.render_bind_cast`](type_api.html#sqlalchemy.types.TypeEngine.render_bind_cast
    "sqlalchemy.types.TypeEngine.render_bind_cast") attribute.
  prefs: []
  type: TYPE_NORMAL
- en: The `SQLCompiler.render_bind_cast()` is also used to render casts for one form
    of “insertmanyvalues” query, when both `InsertmanyvaluesSentinelOpts.USE_INSERT_FROM_SELECT`
    and `InsertmanyvaluesSentinelOpts.RENDER_SELECT_COL_CASTS` are set, where the
    casts are applied to the intermediary columns e.g. “INSERT INTO t (a, b, c) SELECT
    p0::TYP, p1::TYP, p2::TYP ” “FROM (VALUES (?, ?), (?, ?), …)”.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0.10: - `SQLCompiler.render_bind_cast()` is now used within
    some elements of the “insertmanyvalues” implementation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Use the pep-249 setinputsizes method.
  prefs: []
  type: TYPE_NORMAL
- en: This is only implemented for DBAPIs that support this method and for which the
    SQLAlchemy dialect has the appropriate infrastructure for that dialect set up.
    Current dialects include cx_Oracle as well as optional support for SQL Server
    using pyodbc.
  prefs: []
  type: TYPE_NORMAL
- en: When using setinputsizes, dialects also have a means of only using the method
    for certain datatypes using include/exclude lists.
  prefs: []
  type: TYPE_NORMAL
- en: When SETINPUTSIZES is used, the [`Dialect.do_set_input_sizes()`](#sqlalchemy.engine.Dialect.do_set_input_sizes
    "sqlalchemy.engine.Dialect.do_set_input_sizes") method is called for each statement
    executed which has bound parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Represent a compiled SQL or DDL expression.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.engine.Compiled.__init__), [cache_key](#sqlalchemy.engine.Compiled.cache_key),
    [compile_state](#sqlalchemy.engine.Compiled.compile_state), [construct_params()](#sqlalchemy.engine.Compiled.construct_params),
    [dml_compile_state](#sqlalchemy.engine.Compiled.dml_compile_state), [execution_options](#sqlalchemy.engine.Compiled.execution_options),
    [params](#sqlalchemy.engine.Compiled.params), [sql_compiler](#sqlalchemy.engine.Compiled.sql_compiler),
    [state](#sqlalchemy.engine.Compiled.state), [statement](#sqlalchemy.engine.Compiled.statement),
    [string](#sqlalchemy.engine.Compiled.string)'
  prefs: []
  type: TYPE_NORMAL
- en: The `__str__` method of the `Compiled` object should produce the actual text
    of the statement. `Compiled` objects are specific to their underlying database
    dialect, and also may or may not be specific to the columns referenced within
    a particular set of bind parameters. In no case should the `Compiled` object be
    dependent on the actual values of those bind parameters, even though it may reference
    those values as defaults.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialect` – [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    to compile against.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`statement` – [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to be compiled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`schema_translate_map` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionary of schema names to be translated when forming the resultant SQL
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Translation of Schema Names](connections.html#schema-translating)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`compile_kwargs` – additional kwargs that will be passed to the initial call
    to `Compiled.process()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The [`CacheKey`](foundation.html#sqlalchemy.sql.expression.CacheKey "sqlalchemy.sql.expression.CacheKey")
    that was generated ahead of creating this [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") object.
  prefs: []
  type: TYPE_NORMAL
- en: This is used for routines that need access to the original [`CacheKey`](foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") instance generated when the [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.engine.Compiled") instance was first cached, typically in order to
    reconcile the original list of [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects with a per-statement list that’s
    generated on each call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Optional `CompileState` object that maintains additional state used by the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Major executable objects such as [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"), [`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update"), [`Delete`](dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete"), [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") will generate this state when compiled in
    order to calculate additional information about the object. For the top level
    object that is to be executed, the state can be stored here where it can also
    have applicability towards result set processing.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Return the bind params for this compiled object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**params** – a dict of string/object pairs whose values will override bind
    values compiled in to the statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Optional `CompileState` assigned at the same point that .isinsert, .isupdate,
    or .isdelete is assigned.
  prefs: []
  type: TYPE_NORMAL
- en: This will normally be the same object as .compile_state, with the exception
    of cases like the `ORMFromStatementCompileState` object.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.40.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Execution options propagated from the statement. In some cases, sub-elements
    of the statement can modify these.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Return the bind params for this compiled object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Return a Compiled that is capable of processing SQL expressions.
  prefs: []
  type: TYPE_NORMAL
- en: If this compiler is one, it would likely just return ‘self’.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: description of the compiler’s state
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The statement to compile.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The string representation of the `statement`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: protocol representing a [**PEP 249**](https://peps.python.org/pep-0249/) database
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Connection Objects](https://www.python.org/dev/peps/pep-0249/#connection-objects)
    - in [**PEP 249**](https://peps.python.org/pep-0249/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[autocommit](#sqlalchemy.engine.interfaces.DBAPIConnection.autocommit), [close()](#sqlalchemy.engine.interfaces.DBAPIConnection.close),
    [commit()](#sqlalchemy.engine.interfaces.DBAPIConnection.commit), [cursor()](#sqlalchemy.engine.interfaces.DBAPIConnection.cursor),
    [rollback()](#sqlalchemy.engine.interfaces.DBAPIConnection.rollback)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.engine.interfaces.DBAPIConnection`](#sqlalchemy.engine.interfaces.DBAPIConnection
    "sqlalchemy.engine.interfaces.DBAPIConnection") (`typing_extensions.Protocol`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: protocol representing a [**PEP 249**](https://peps.python.org/pep-0249/) database
    cursor.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Cursor Objects](https://www.python.org/dev/peps/pep-0249/#cursor-objects)
    - in [**PEP 249**](https://peps.python.org/pep-0249/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[arraysize](#sqlalchemy.engine.interfaces.DBAPICursor.arraysize), [callproc()](#sqlalchemy.engine.interfaces.DBAPICursor.callproc),
    [close()](#sqlalchemy.engine.interfaces.DBAPICursor.close), [description](#sqlalchemy.engine.interfaces.DBAPICursor.description),
    [execute()](#sqlalchemy.engine.interfaces.DBAPICursor.execute), [executemany()](#sqlalchemy.engine.interfaces.DBAPICursor.executemany),
    [fetchall()](#sqlalchemy.engine.interfaces.DBAPICursor.fetchall), [fetchmany()](#sqlalchemy.engine.interfaces.DBAPICursor.fetchmany),
    [fetchone()](#sqlalchemy.engine.interfaces.DBAPICursor.fetchone), [lastrowid](#sqlalchemy.engine.interfaces.DBAPICursor.lastrowid),
    [nextset()](#sqlalchemy.engine.interfaces.DBAPICursor.nextset), [rowcount](#sqlalchemy.engine.interfaces.DBAPICursor.rowcount),
    [setinputsizes()](#sqlalchemy.engine.interfaces.DBAPICursor.setinputsizes), [setoutputsize()](#sqlalchemy.engine.interfaces.DBAPICursor.setoutputsize)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.engine.interfaces.DBAPICursor`](#sqlalchemy.engine.interfaces.DBAPICursor
    "sqlalchemy.engine.interfaces.DBAPICursor") (`typing_extensions.Protocol`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The description attribute of the Cursor.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[cursor.description](https://www.python.org/dev/peps/pep-0249/#description)
    - in [**PEP 249**](https://peps.python.org/pep-0249/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: protocol representing a [**PEP 249**](https://peps.python.org/pep-0249/) database
    type.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Type Objects](https://www.python.org/dev/peps/pep-0249/#type-objects) - in
    [**PEP 249**](https://peps.python.org/pep-0249/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.engine.interfaces.DBAPIType`](#sqlalchemy.engine.interfaces.DBAPIType
    "sqlalchemy.engine.interfaces.DBAPIType") (`typing_extensions.Protocol`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.sql.compiler.DDLCompiler.__init__), [cache_key](#sqlalchemy.sql.compiler.DDLCompiler.cache_key),
    [compile_state](#sqlalchemy.sql.compiler.DDLCompiler.compile_state), [construct_params()](#sqlalchemy.sql.compiler.DDLCompiler.construct_params),
    [define_constraint_remote_table()](#sqlalchemy.sql.compiler.DDLCompiler.define_constraint_remote_table),
    [dml_compile_state](#sqlalchemy.sql.compiler.DDLCompiler.dml_compile_state), [execution_options](#sqlalchemy.sql.compiler.DDLCompiler.execution_options),
    [params](#sqlalchemy.sql.compiler.DDLCompiler.params), [sql_compiler](#sqlalchemy.sql.compiler.DDLCompiler.sql_compiler),
    [state](#sqlalchemy.sql.compiler.DDLCompiler.state), [statement](#sqlalchemy.sql.compiler.DDLCompiler.statement),
    [string](#sqlalchemy.sql.compiler.DDLCompiler.string)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.compiler.DDLCompiler`](#sqlalchemy.sql.compiler.DDLCompiler
    "sqlalchemy.sql.compiler.DDLCompiler") ([`sqlalchemy.sql.compiler.Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `sqlalchemy.sql.compiler.Compiled.__init__` *method of*
    [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled")'
  prefs: []
  type: TYPE_NORMAL
- en: Construct a new [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialect` – [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    to compile against.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`statement` – [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to be compiled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`schema_translate_map` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dictionary of schema names to be translated when forming the resultant SQL
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Translation of Schema Names](connections.html#schema-translating)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`compile_kwargs` – additional kwargs that will be passed to the initial call
    to `Compiled.process()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Compiled.cache_key` *attribute of* [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled")'
  prefs: []
  type: TYPE_NORMAL
- en: The [`CacheKey`](foundation.html#sqlalchemy.sql.expression.CacheKey "sqlalchemy.sql.expression.CacheKey")
    that was generated ahead of creating this [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled") object.
  prefs: []
  type: TYPE_NORMAL
- en: This is used for routines that need access to the original [`CacheKey`](foundation.html#sqlalchemy.sql.expression.CacheKey
    "sqlalchemy.sql.expression.CacheKey") instance generated when the [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled") instance was first cached, typically in order
    to reconcile the original list of [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects with a per-statement list that’s
    generated on each call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Compiled.compile_state` *attribute of* [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled")'
  prefs: []
  type: TYPE_NORMAL
- en: Optional `CompileState` object that maintains additional state used by the compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Major executable objects such as [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"), [`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update"), [`Delete`](dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete"), [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select") will generate this state when compiled in
    order to calculate additional information about the object. For the top level
    object that is to be executed, the state can be stored here where it can also
    have applicability towards result set processing.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Return the bind params for this compiled object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**params** – a dict of string/object pairs whose values will override bind
    values compiled in to the statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Format the remote table clause of a CREATE CONSTRAINT clause.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Compiled.dml_compile_state` *attribute of* [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled")'
  prefs: []
  type: TYPE_NORMAL
- en: Optional `CompileState` assigned at the same point that .isinsert, .isupdate,
    or .isdelete is assigned.
  prefs: []
  type: TYPE_NORMAL
- en: This will normally be the same object as .compile_state, with the exception
    of cases like the `ORMFromStatementCompileState` object.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.40.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Compiled.execution_options` *attribute of* [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled")'
  prefs: []
  type: TYPE_NORMAL
- en: Execution options propagated from the statement. In some cases, sub-elements
    of the statement can modify these.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Compiled.params` *attribute of* [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the bind params for this compiled object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: description of the compiler’s state
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Compiled.statement` *attribute of* [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled")'
  prefs: []
  type: TYPE_NORMAL
- en: The statement to compile.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Compiled.string` *attribute of* [`Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled")'
  prefs: []
  type: TYPE_NORMAL
- en: The string representation of the `statement`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Default implementation of Dialect
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[bind_typing](#sqlalchemy.engine.default.DefaultDialect.bind_typing), [colspecs](#sqlalchemy.engine.default.DefaultDialect.colspecs),
    [connect()](#sqlalchemy.engine.default.DefaultDialect.connect), [construct_arguments](#sqlalchemy.engine.default.DefaultDialect.construct_arguments),
    [create_connect_args()](#sqlalchemy.engine.default.DefaultDialect.create_connect_args),
    [create_xid()](#sqlalchemy.engine.default.DefaultDialect.create_xid), [cte_follows_insert](#sqlalchemy.engine.default.DefaultDialect.cte_follows_insert),
    [dbapi](#sqlalchemy.engine.default.DefaultDialect.dbapi), [dbapi_exception_translation_map](#sqlalchemy.engine.default.DefaultDialect.dbapi_exception_translation_map),
    [ddl_compiler](#sqlalchemy.engine.default.DefaultDialect.ddl_compiler), [default_isolation_level](#sqlalchemy.engine.default.DefaultDialect.default_isolation_level),
    [default_metavalue_token](#sqlalchemy.engine.default.DefaultDialect.default_metavalue_token),
    [default_schema_name](#sqlalchemy.engine.default.DefaultDialect.default_schema_name),
    [default_sequence_base](#sqlalchemy.engine.default.DefaultDialect.default_sequence_base),
    [delete_executemany_returning](#sqlalchemy.engine.default.DefaultDialect.delete_executemany_returning),
    [delete_returning](#sqlalchemy.engine.default.DefaultDialect.delete_returning),
    [delete_returning_multifrom](#sqlalchemy.engine.default.DefaultDialect.delete_returning_multifrom),
    [denormalize_name()](#sqlalchemy.engine.default.DefaultDialect.denormalize_name),
    [div_is_floordiv](#sqlalchemy.engine.default.DefaultDialect.div_is_floordiv),
    [do_begin()](#sqlalchemy.engine.default.DefaultDialect.do_begin), [do_begin_twophase()](#sqlalchemy.engine.default.DefaultDialect.do_begin_twophase),
    [do_close()](#sqlalchemy.engine.default.DefaultDialect.do_close), [do_commit()](#sqlalchemy.engine.default.DefaultDialect.do_commit),
    [do_commit_twophase()](#sqlalchemy.engine.default.DefaultDialect.do_commit_twophase),
    [do_execute()](#sqlalchemy.engine.default.DefaultDialect.do_execute), [do_execute_no_params()](#sqlalchemy.engine.default.DefaultDialect.do_execute_no_params),
    [do_executemany()](#sqlalchemy.engine.default.DefaultDialect.do_executemany),
    [do_ping()](#sqlalchemy.engine.default.DefaultDialect.do_ping), [do_prepare_twophase()](#sqlalchemy.engine.default.DefaultDialect.do_prepare_twophase),
    [do_recover_twophase()](#sqlalchemy.engine.default.DefaultDialect.do_recover_twophase),
    [do_release_savepoint()](#sqlalchemy.engine.default.DefaultDialect.do_release_savepoint),
    [do_rollback()](#sqlalchemy.engine.default.DefaultDialect.do_rollback), [do_rollback_to_savepoint()](#sqlalchemy.engine.default.DefaultDialect.do_rollback_to_savepoint),
    [do_rollback_twophase()](#sqlalchemy.engine.default.DefaultDialect.do_rollback_twophase),
    [do_savepoint()](#sqlalchemy.engine.default.DefaultDialect.do_savepoint), [do_set_input_sizes()](#sqlalchemy.engine.default.DefaultDialect.do_set_input_sizes),
    [do_terminate()](#sqlalchemy.engine.default.DefaultDialect.do_terminate), [driver](#sqlalchemy.engine.default.DefaultDialect.driver),
    [engine_config_types](#sqlalchemy.engine.default.DefaultDialect.engine_config_types),
    [engine_created()](#sqlalchemy.engine.default.DefaultDialect.engine_created),
    [exclude_set_input_sizes](#sqlalchemy.engine.default.DefaultDialect.exclude_set_input_sizes),
    [execute_sequence_format](#sqlalchemy.engine.default.DefaultDialect.execute_sequence_format),
    [execution_ctx_cls](#sqlalchemy.engine.default.DefaultDialect.execution_ctx_cls),
    [favor_returning_over_lastrowid](#sqlalchemy.engine.default.DefaultDialect.favor_returning_over_lastrowid),
    [full_returning](#sqlalchemy.engine.default.DefaultDialect.full_returning), [get_async_dialect_cls()](#sqlalchemy.engine.default.DefaultDialect.get_async_dialect_cls),
    [get_check_constraints()](#sqlalchemy.engine.default.DefaultDialect.get_check_constraints),
    [get_columns()](#sqlalchemy.engine.default.DefaultDialect.get_columns), [get_default_isolation_level()](#sqlalchemy.engine.default.DefaultDialect.get_default_isolation_level),
    [get_dialect_cls()](#sqlalchemy.engine.default.DefaultDialect.get_dialect_cls),
    [get_dialect_pool_class()](#sqlalchemy.engine.default.DefaultDialect.get_dialect_pool_class),
    [get_driver_connection()](#sqlalchemy.engine.default.DefaultDialect.get_driver_connection),
    [get_foreign_keys()](#sqlalchemy.engine.default.DefaultDialect.get_foreign_keys),
    [get_indexes()](#sqlalchemy.engine.default.DefaultDialect.get_indexes), [get_isolation_level()](#sqlalchemy.engine.default.DefaultDialect.get_isolation_level),
    [get_isolation_level_values()](#sqlalchemy.engine.default.DefaultDialect.get_isolation_level_values),
    [get_materialized_view_names()](#sqlalchemy.engine.default.DefaultDialect.get_materialized_view_names),
    [get_multi_check_constraints()](#sqlalchemy.engine.default.DefaultDialect.get_multi_check_constraints),
    [get_multi_columns()](#sqlalchemy.engine.default.DefaultDialect.get_multi_columns),
    [get_multi_foreign_keys()](#sqlalchemy.engine.default.DefaultDialect.get_multi_foreign_keys),
    [get_multi_indexes()](#sqlalchemy.engine.default.DefaultDialect.get_multi_indexes),
    [get_multi_pk_constraint()](#sqlalchemy.engine.default.DefaultDialect.get_multi_pk_constraint),
    [get_multi_table_comment()](#sqlalchemy.engine.default.DefaultDialect.get_multi_table_comment),
    [get_multi_table_options()](#sqlalchemy.engine.default.DefaultDialect.get_multi_table_options),
    [get_multi_unique_constraints()](#sqlalchemy.engine.default.DefaultDialect.get_multi_unique_constraints),
    [get_pk_constraint()](#sqlalchemy.engine.default.DefaultDialect.get_pk_constraint),
    [get_schema_names()](#sqlalchemy.engine.default.DefaultDialect.get_schema_names),
    [get_sequence_names()](#sqlalchemy.engine.default.DefaultDialect.get_sequence_names),
    [get_table_comment()](#sqlalchemy.engine.default.DefaultDialect.get_table_comment),
    [get_table_names()](#sqlalchemy.engine.default.DefaultDialect.get_table_names),
    [get_table_options()](#sqlalchemy.engine.default.DefaultDialect.get_table_options),
    [get_temp_table_names()](#sqlalchemy.engine.default.DefaultDialect.get_temp_table_names),
    [get_temp_view_names()](#sqlalchemy.engine.default.DefaultDialect.get_temp_view_names),
    [get_unique_constraints()](#sqlalchemy.engine.default.DefaultDialect.get_unique_constraints),
    [get_view_definition()](#sqlalchemy.engine.default.DefaultDialect.get_view_definition),
    [get_view_names()](#sqlalchemy.engine.default.DefaultDialect.get_view_names),
    [has_index()](#sqlalchemy.engine.default.DefaultDialect.has_index), [has_schema()](#sqlalchemy.engine.default.DefaultDialect.has_schema),
    [has_sequence()](#sqlalchemy.engine.default.DefaultDialect.has_sequence), [has_table()](#sqlalchemy.engine.default.DefaultDialect.has_table),
    [has_terminate](#sqlalchemy.engine.default.DefaultDialect.has_terminate), [identifier_preparer](#sqlalchemy.engine.default.DefaultDialect.identifier_preparer),
    [import_dbapi()](#sqlalchemy.engine.default.DefaultDialect.import_dbapi), [include_set_input_sizes](#sqlalchemy.engine.default.DefaultDialect.include_set_input_sizes),
    [initialize()](#sqlalchemy.engine.default.DefaultDialect.initialize), [inline_comments](#sqlalchemy.engine.default.DefaultDialect.inline_comments),
    [insert_executemany_returning](#sqlalchemy.engine.default.DefaultDialect.insert_executemany_returning),
    [insert_executemany_returning_sort_by_parameter_order](#sqlalchemy.engine.default.DefaultDialect.insert_executemany_returning_sort_by_parameter_order),
    [insert_returning](#sqlalchemy.engine.default.DefaultDialect.insert_returning),
    [insertmanyvalues_implicit_sentinel](#sqlalchemy.engine.default.DefaultDialect.insertmanyvalues_implicit_sentinel),
    [insertmanyvalues_max_parameters](#sqlalchemy.engine.default.DefaultDialect.insertmanyvalues_max_parameters),
    [insertmanyvalues_page_size](#sqlalchemy.engine.default.DefaultDialect.insertmanyvalues_page_size),
    [is_async](#sqlalchemy.engine.default.DefaultDialect.is_async), [is_disconnect()](#sqlalchemy.engine.default.DefaultDialect.is_disconnect),
    [label_length](#sqlalchemy.engine.default.DefaultDialect.label_length), [load_provisioning()](#sqlalchemy.engine.default.DefaultDialect.load_provisioning),
    [loaded_dbapi](#sqlalchemy.engine.default.DefaultDialect.loaded_dbapi), [max_identifier_length](#sqlalchemy.engine.default.DefaultDialect.max_identifier_length),
    [name](#sqlalchemy.engine.default.DefaultDialect.name), [normalize_name()](#sqlalchemy.engine.default.DefaultDialect.normalize_name),
    [on_connect()](#sqlalchemy.engine.default.DefaultDialect.on_connect), [on_connect_url()](#sqlalchemy.engine.default.DefaultDialect.on_connect_url),
    [paramstyle](#sqlalchemy.engine.default.DefaultDialect.paramstyle), [positional](#sqlalchemy.engine.default.DefaultDialect.positional),
    [preexecute_autoincrement_sequences](#sqlalchemy.engine.default.DefaultDialect.preexecute_autoincrement_sequences),
    [preparer](#sqlalchemy.engine.default.DefaultDialect.preparer), [reflection_options](#sqlalchemy.engine.default.DefaultDialect.reflection_options),
    [reset_isolation_level()](#sqlalchemy.engine.default.DefaultDialect.reset_isolation_level),
    [returns_native_bytes](#sqlalchemy.engine.default.DefaultDialect.returns_native_bytes),
    [sequences_optional](#sqlalchemy.engine.default.DefaultDialect.sequences_optional),
    [server_side_cursors](#sqlalchemy.engine.default.DefaultDialect.server_side_cursors),
    [server_version_info](#sqlalchemy.engine.default.DefaultDialect.server_version_info),
    [set_connection_execution_options()](#sqlalchemy.engine.default.DefaultDialect.set_connection_execution_options),
    [set_engine_execution_options()](#sqlalchemy.engine.default.DefaultDialect.set_engine_execution_options),
    [set_isolation_level()](#sqlalchemy.engine.default.DefaultDialect.set_isolation_level),
    [statement_compiler](#sqlalchemy.engine.default.DefaultDialect.statement_compiler),
    [supports_alter](#sqlalchemy.engine.default.DefaultDialect.supports_alter), [supports_comments](#sqlalchemy.engine.default.DefaultDialect.supports_comments),
    [supports_constraint_comments](#sqlalchemy.engine.default.DefaultDialect.supports_constraint_comments),
    [supports_default_metavalue](#sqlalchemy.engine.default.DefaultDialect.supports_default_metavalue),
    [supports_default_values](#sqlalchemy.engine.default.DefaultDialect.supports_default_values),
    [supports_empty_insert](#sqlalchemy.engine.default.DefaultDialect.supports_empty_insert),
    [supports_identity_columns](#sqlalchemy.engine.default.DefaultDialect.supports_identity_columns),
    [supports_multivalues_insert](#sqlalchemy.engine.default.DefaultDialect.supports_multivalues_insert),
    [supports_native_boolean](#sqlalchemy.engine.default.DefaultDialect.supports_native_boolean),
    [supports_native_decimal](#sqlalchemy.engine.default.DefaultDialect.supports_native_decimal),
    [supports_native_enum](#sqlalchemy.engine.default.DefaultDialect.supports_native_enum),
    [supports_native_uuid](#sqlalchemy.engine.default.DefaultDialect.supports_native_uuid),
    [supports_sane_multi_rowcount](#sqlalchemy.engine.default.DefaultDialect.supports_sane_multi_rowcount),
    [supports_sane_rowcount](#sqlalchemy.engine.default.DefaultDialect.supports_sane_rowcount),
    [supports_sane_rowcount_returning](#sqlalchemy.engine.default.DefaultDialect.supports_sane_rowcount_returning),
    [supports_sequences](#sqlalchemy.engine.default.DefaultDialect.supports_sequences),
    [supports_server_side_cursors](#sqlalchemy.engine.default.DefaultDialect.supports_server_side_cursors),
    [supports_simple_order_by_label](#sqlalchemy.engine.default.DefaultDialect.supports_simple_order_by_label),
    [supports_statement_cache](#sqlalchemy.engine.default.DefaultDialect.supports_statement_cache),
    [tuple_in_values](#sqlalchemy.engine.default.DefaultDialect.tuple_in_values),
    [type_compiler](#sqlalchemy.engine.default.DefaultDialect.type_compiler), [type_compiler_cls](#sqlalchemy.engine.default.DefaultDialect.type_compiler_cls),
    [type_compiler_instance](#sqlalchemy.engine.default.DefaultDialect.type_compiler_instance),
    [type_descriptor()](#sqlalchemy.engine.default.DefaultDialect.type_descriptor),
    [update_executemany_returning](#sqlalchemy.engine.default.DefaultDialect.update_executemany_returning),
    [update_returning](#sqlalchemy.engine.default.DefaultDialect.update_returning),
    [update_returning_multifrom](#sqlalchemy.engine.default.DefaultDialect.update_returning_multifrom),
    [use_insertmanyvalues](#sqlalchemy.engine.default.DefaultDialect.use_insertmanyvalues),
    [use_insertmanyvalues_wo_returning](#sqlalchemy.engine.default.DefaultDialect.use_insertmanyvalues_wo_returning)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.engine.default.DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect") ([`sqlalchemy.engine.interfaces.Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: define a means of passing typing information to the database and/or driver for
    bound parameters.
  prefs: []
  type: TYPE_NORMAL
- en: See [`BindTyping`](#sqlalchemy.engine.BindTyping "sqlalchemy.engine.BindTyping")
    for values.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: A dictionary of TypeEngine classes from sqlalchemy.types mapped to subclasses
    that are specific to the dialect class. This dictionary is class-level only and
    is not accessed from the dialect instance itself.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Establish a connection using this dialect’s DBAPI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default implementation of this method is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The `*cargs, **cparams` parameters are generated directly from this dialect’s
    [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method.
  prefs: []
  type: TYPE_NORMAL
- en: This method may be used for dialects that need to perform programmatic per-connection
    steps when a new connection is procured from the DBAPI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*cargs` – positional parameters returned from the [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**cparams` – keyword parameters returned from the [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a DBAPI connection, typically from the [**PEP 249**](https://peps.python.org/pep-0249/)
    module level `.connect()` function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.construct_arguments` *attribute of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Optional set of argument specifiers for various SQLAlchemy constructs, typically
    schema items.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement, establish as a series of tuples, as in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: If the above construct is established on the PostgreSQL dialect, the [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct will now accept the keyword arguments `postgresql_using`,
    `postgresql_where`, nad `postgresql_ops`. Any other argument specified to the
    constructor of [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    which is prefixed with `postgresql_` will raise [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError").
  prefs: []
  type: TYPE_NORMAL
- en: A dialect which does not include a `construct_arguments` member will not participate
    in the argument validation system. For such a dialect, any argument name is accepted
    by all participating constructs, within the namespace of arguments prefixed with
    that dialect name. The rationale here is so that third-party dialects that haven’t
    yet implemented this feature continue to function in the old way.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs "sqlalchemy.sql.base.DialectKWArgs")
    - implementing base class which consumes [`DefaultDialect.construct_arguments`](#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Build DB-API compatible connection arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object, returns a tuple consisting of a `(*args, **kwargs)` suitable to send directly
    to the dbapi’s connect function. The arguments are sent to the [`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect
    "sqlalchemy.engine.Dialect.connect") method which then runs the DBAPI-level `connect()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: The method typically makes use of the [`URL.translate_connect_args()`](engines.html#sqlalchemy.engine.URL.translate_connect_args
    "sqlalchemy.engine.URL.translate_connect_args") method in order to generate a
    dictionary of options.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default implementation is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**url** – a [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a tuple of `(*args, **kwargs)` which will be passed to the [`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect
    "sqlalchemy.engine.Dialect.connect") method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`URL.translate_connect_args()`](engines.html#sqlalchemy.engine.URL.translate_connect_args
    "sqlalchemy.engine.URL.translate_connect_args")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Create a random two-phase transaction ID.
  prefs: []
  type: TYPE_NORMAL
- en: This id will be passed to do_begin_twophase(), do_rollback_twophase(), do_commit_twophase().
    Its format is unspecified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: target database, when given a CTE with an INSERT statement, needs the CTE to
    be below the INSERT
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: A reference to the DBAPI module object itself.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy dialects import DBAPI modules using the classmethod [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi"). The rationale is so that any dialect
    module can be imported and used to generate SQL statements without the need for
    the actual DBAPI driver to be installed. Only when an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is constructed using [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") does the DBAPI get imported; at that point, the creation
    process will assign the DBAPI module to this attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Dialects should therefore implement [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi") which will import the necessary module
    and return it, and then refer to `self.dbapi` in dialect code in order to refer
    to the DBAPI module contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version The: [`Dialect.dbapi`](#sqlalchemy.engine.Dialect.dbapi
    "sqlalchemy.engine.Dialect.dbapi") attribute is exclusively used as the per-[`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")-instance reference to the DBAPI module. The previous
    not-fully-documented `.Dialect.dbapi()` classmethod is deprecated and replaced
    by [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi "sqlalchemy.engine.Dialect.import_dbapi").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.dbapi_exception_translation_map` *attribute of*
    [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: A dictionary of names that will contain as values the names of pep-249 exceptions
    (“IntegrityError”, “OperationalError”, etc) keyed to alternate class names, to
    support the case where a DBAPI has exception classes that aren’t named as they
    are referred to (e.g. IntegrityError = MyException). In the vast majority of cases
    this dictionary is empty.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`DDLCompiler`](#sqlalchemy.sql.compiler.DDLCompiler "sqlalchemy.sql.compiler.DDLCompiler")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: the isolation that is implicitly present on new connections
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: for INSERT… VALUES (DEFAULT) syntax, the token to put in the parenthesis.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: the name of the default schema. This value is only available for supporting
    dialects, and is typically populated during the initial connection to the database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: the default value that will be rendered as the “START WITH” portion of a CREATE
    SEQUENCE DDL statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: dialect supports DELETE..RETURNING with executemany.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: if the dialect supports RETURNING with DELETE
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: if the dialect supports RETURNING with DELETE..FROM
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: convert the given name to a case insensitive identifier for the backend if it
    is an all-lowercase name.
  prefs: []
  type: TYPE_NORMAL
- en: This method is only used if the dialect defines requires_name_normalize=True.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: target database treats the / division operator as “floor division”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Provide an implementation of `connection.begin()`, given a DB-API connection.
  prefs: []
  type: TYPE_NORMAL
- en: The DBAPI has no dedicated “begin” method and it is expected that transactions
    are implicit. This hook is provided for those DBAPIs that might need additional
    help in this area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dbapi_connection** – a DBAPI connection, typically proxied within a `ConnectionFairy`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.do_begin_twophase()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Begin a two phase transaction on the given connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xid` – xid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Provide an implementation of `connection.close()`, given a DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: This hook is called by the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    when a connection has been detached from the pool, or is being returned beyond
    the normal capacity of the pool.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Provide an implementation of `connection.commit()`, given a DB-API connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dbapi_connection** – a DBAPI connection, typically proxied within a `ConnectionFairy`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.do_commit_twophase()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Commit a two phase transaction on the given connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xid` – xid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_prepared` – whether or not [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") was called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recover` – if the recover flag was passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Provide an implementation of `cursor.execute(statement, parameters)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Provide an implementation of `cursor.execute(statement)`.
  prefs: []
  type: TYPE_NORMAL
- en: The parameter collection should not be sent.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Provide an implementation of `cursor.executemany(statement, parameters)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: ping the DBAPI connection and return True if the connection is usable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.do_prepare_twophase()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare a two phase transaction on the given connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xid` – xid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.do_recover_twophase()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Recover list of uncommitted prepared two phase transaction identifiers on the
    given connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**connection** – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Release the named savepoint on a connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – savepoint name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Provide an implementation of `connection.rollback()`, given a DB-API connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dbapi_connection** – a DBAPI connection, typically proxied within a `ConnectionFairy`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Rollback a connection to the named savepoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – savepoint name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.do_rollback_twophase()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Rollback a two phase transaction on the given connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xid` – xid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_prepared` – whether or not [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") was called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recover` – if the recover flag was passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Create a savepoint with the given name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – savepoint name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.do_set_input_sizes()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: invoke the cursor.setinputsizes() method with appropriate arguments
  prefs: []
  type: TYPE_NORMAL
- en: This hook is called if the [`Dialect.bind_typing`](#sqlalchemy.engine.Dialect.bind_typing
    "sqlalchemy.engine.Dialect.bind_typing") attribute is set to the [`BindTyping.SETINPUTSIZES`](#sqlalchemy.engine.BindTyping.SETINPUTSIZES
    "sqlalchemy.engine.BindTyping.SETINPUTSIZES") value. Parameter data is passed
    in a list of tuples (paramname, dbtype, sqltype), where `paramname` is the key
    of the parameter in the statement, `dbtype` is the DBAPI datatype and `sqltype`
    is the SQLAlchemy type. The order of tuples is in the correct parameter order.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: - setinputsizes mode is now enabled by setting [`Dialect.bind_typing`](#sqlalchemy.engine.Dialect.bind_typing
    "sqlalchemy.engine.Dialect.bind_typing") to [`BindTyping.SETINPUTSIZES`](#sqlalchemy.engine.BindTyping.SETINPUTSIZES
    "sqlalchemy.engine.BindTyping.SETINPUTSIZES"). Dialects which accept a `use_setinputsizes`
    parameter should set this value appropriately.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Provide an implementation of `connection.close()` that tries as much as possible
    to not block, given a DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: In the vast majority of cases this just calls .close(), however for some asyncio
    dialects may call upon different API features.
  prefs: []
  type: TYPE_NORMAL
- en: This hook is called by the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    when a connection is being recycled or has been invalidated.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.41.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: identifying name for the dialect’s DBAPI
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: a mapping of string keys that can be in an engine config linked to type conversion
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.engine_created()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: A convenience hook called before returning the final [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  prefs: []
  type: TYPE_NORMAL
- en: If the dialect returned a different class from the [`get_dialect_cls()`](#sqlalchemy.engine.default.DefaultDialect.get_dialect_cls
    "sqlalchemy.engine.default.DefaultDialect.get_dialect_cls") method, then the hook
    is called on both classes, first on the dialect class returned by the [`get_dialect_cls()`](#sqlalchemy.engine.default.DefaultDialect.get_dialect_cls
    "sqlalchemy.engine.default.DefaultDialect.get_dialect_cls") method and then on
    the class on which the method was called.
  prefs: []
  type: TYPE_NORMAL
- en: The hook should be used by dialects and/or wrappers to apply special events
    to the engine or its components. In particular, it allows a dialect-wrapping class
    to apply dialect-level events.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: set of DBAPI type objects that should be excluded in automatic cursor.setinputsizes()
    calls.
  prefs: []
  type: TYPE_NORMAL
- en: This is only used if bind_typing is BindTyping.SET_INPUT_SIZES
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: alias of `tuple`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`DefaultExecutionContext`](#sqlalchemy.engine.default.DefaultExecutionContext
    "sqlalchemy.engine.default.DefaultExecutionContext")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: for backends that support both a lastrowid and a RETURNING insert strategy,
    favor RETURNING for simple single-int pk inserts.
  prefs: []
  type: TYPE_NORMAL
- en: cursor.lastrowid tends to be more performant on most backends.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Deprecated since version 2.0: full_returning is deprecated, please use insert_returning,
    update_returning, delete_returning'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_async_dialect_cls()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Given a URL, return the [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    that will be used by an async engine.
  prefs: []
  type: TYPE_NORMAL
- en: By default this is an alias of [`Dialect.get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") and just returns the cls. It may
    be used if a dialect provides both a sync and async version under the same name,
    like the `psycopg` driver.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Dialect.get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls "sqlalchemy.engine.Dialect.get_dialect_cls")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_check_constraints()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return information about check constraints in `table_name`.
  prefs: []
  type: TYPE_NORMAL
- en: Given a string `table_name` and an optional string `schema`, return check constraint
    information as a list of dicts corresponding to the [`ReflectedCheckConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint") dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_check_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_columns()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return information about columns in `table_name`.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `table_name`, and an optional string `schema`, return column information
    as a list of dictionaries corresponding to the [`ReflectedColumn`](reflection.html#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn") dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Given a DBAPI connection, return its isolation level, or a default isolation
    level if one cannot be retrieved.
  prefs: []
  type: TYPE_NORMAL
- en: May be overridden by subclasses in order to provide a “fallback” isolation level
    for databases that cannot reliably retrieve the actual isolation level.
  prefs: []
  type: TYPE_NORMAL
- en: By default, calls the `Interfaces.get_isolation_level()` method, propagating
    any exceptions raised.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.22.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_dialect_cls()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Given a URL, return the [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    that will be used.
  prefs: []
  type: TYPE_NORMAL
- en: This is a hook that allows an external plugin to provide functionality around
    an existing dialect, by allowing the plugin to be loaded from the url based on
    an entrypoint, and then the plugin returns the actual dialect to be used.
  prefs: []
  type: TYPE_NORMAL
- en: By default this just returns the cls.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: return a Pool class to use for a given URL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Returns the connection object as returned by the external driver package.
  prefs: []
  type: TYPE_NORMAL
- en: For normal dialects that use a DBAPI compliant driver this call will just return
    the `connection` passed as argument. For dialects that instead adapt a non DBAPI
    compliant driver, like when adapting an asyncio driver, this call will return
    the connection-like object as returned by the driver.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_foreign_keys()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return information about foreign_keys in `table_name`.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `table_name`, and an optional string `schema`, return foreign key information
    as a list of dicts corresponding to the [`ReflectedForeignKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint") dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_foreign_keys()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_indexes()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return information about indexes in `table_name`.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `table_name` and an optional string `schema`, return index information
    as a list of dictionaries corresponding to the [`ReflectedIndex`](reflection.html#sqlalchemy.engine.interfaces.ReflectedIndex
    "sqlalchemy.engine.interfaces.ReflectedIndex") dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_isolation_level()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Given a DBAPI connection, return its isolation level.
  prefs: []
  type: TYPE_NORMAL
- en: When working with a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, the corresponding DBAPI connection may
    be procured using the [`Connection.connection`](connections.html#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection") accessor.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this is a dialect-level method which is used as part of the implementation
    of the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    isolation level facilities; these APIs should be preferred for most typical use
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - view default level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") isolation level'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_isolation_level_values()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: return a sequence of string isolation level names that are accepted by this
    dialect.
  prefs: []
  type: TYPE_NORMAL
- en: 'The available names should use the following conventions:'
  prefs: []
  type: TYPE_NORMAL
- en: use UPPERCASE names. isolation level methods will accept lowercase names but
    these are normalized into UPPERCASE before being passed along to the dialect.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: separate words should be separated by spaces, not underscores, e.g. `REPEATABLE
    READ`. isolation level names will have underscores converted to spaces before
    being passed along to the dialect.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The names for the four standard isolation names to the extent that they are
    supported by the backend should be `READ UNCOMMITTED` `READ COMMITTED`, `REPEATABLE
    READ`, `SERIALIZABLE`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if the dialect supports an autocommit option it should be provided using the
    isolation level name `AUTOCOMMIT`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other isolation modes may also be present, provided that they are named in UPPERCASE
    and use spaces not underscores.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This function is used so that the default dialect can check that a given isolation
    level parameter is valid, else raises an [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError").
  prefs: []
  type: TYPE_NORMAL
- en: A DBAPI connection is passed to the method, in the unlikely event that the dialect
    needs to interrogate the connection itself to determine this list, however it
    is expected that most backends will return a hardcoded list of values. If the
    dialect supports “AUTOCOMMIT”, that value should also be present in the sequence
    returned.
  prefs: []
  type: TYPE_NORMAL
- en: The method raises `NotImplementedError` by default. If a dialect does not implement
    this method, then the default dialect will not perform any checking on a given
    isolation level value before passing it onto the [`Dialect.set_isolation_level()`](#sqlalchemy.engine.Dialect.set_isolation_level
    "sqlalchemy.engine.Dialect.set_isolation_level") method. This is to allow backwards-compatibility
    with third party dialects that may not yet be implementing this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_materialized_view_names()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a list of all materialized view names available in the database.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_materialized_view_names()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**schema** –'
  prefs: []
  type: TYPE_NORMAL
- en: schema name to query, if not the default schema.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Return information about check constraints in all tables in the given `schema`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_check_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints").
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by `Dialect.get_table_names()`, `Dialect.get_view_names()`
    or `Dialect.get_materialized_view_names()` depending on the provided `kind`. Dialects
    that want to support a faster implementation should implement this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Return information about columns in all tables in the given `schema`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_columns
    "sqlalchemy.engine.reflection.Inspector.get_multi_columns").
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by `Dialect.get_table_names()`, `Dialect.get_view_names()`
    or `Dialect.get_materialized_view_names()` depending on the provided `kind`. Dialects
    that want to support a faster implementation should implement this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Return information about foreign_keys in all tables in the given `schema`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_multi_foreign_keys()`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by `Dialect.get_table_names()`, `Dialect.get_view_names()`
    or `Dialect.get_materialized_view_names()` depending on the provided `kind`. Dialects
    that want to support a faster implementation should implement this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Return information about indexes in in all tables in the given `schema`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_indexes
    "sqlalchemy.engine.reflection.Inspector.get_multi_indexes").
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by `Dialect.get_table_names()`, `Dialect.get_view_names()`
    or `Dialect.get_materialized_view_names()` depending on the provided `kind`. Dialects
    that want to support a faster implementation should implement this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Return information about primary key constraints in all tables in the given
    `schema`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_pk_constraint()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint").
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by `Dialect.get_table_names()`, `Dialect.get_view_names()`
    or `Dialect.get_materialized_view_names()` depending on the provided `kind`. Dialects
    that want to support a faster implementation should implement this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Return information about the table comment in all tables in the given `schema`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_multi_table_comment()`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by `Dialect.get_table_names()`, `Dialect.get_view_names()`
    or `Dialect.get_materialized_view_names()` depending on the provided `kind`. Dialects
    that want to support a faster implementation should implement this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Return a dictionary of options specified when the tables in the given schema
    were created.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_multi_table_options()`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by `Dialect.get_table_names()`, `Dialect.get_view_names()`
    or `Dialect.get_materialized_view_names()` depending on the provided `kind`. Dialects
    that want to support a faster implementation should implement this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Return information about unique constraints in all tables in the given `schema`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints").
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by `Dialect.get_table_names()`, `Dialect.get_view_names()`
    or `Dialect.get_materialized_view_names()` depending on the provided `kind`. Dialects
    that want to support a faster implementation should implement this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_pk_constraint()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return information about the primary key constraint on table_name`.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `table_name`, and an optional string `schema`, return primary key information
    as a dictionary corresponding to the [`ReflectedPrimaryKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint") dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_pk_constraint()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_pk_constraint").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_schema_names()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a list of all schema names available in the database.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_schema_names()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_sequence_names()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a list of all sequence names available in the database.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_sequence_names()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**schema** – schema name to query, if not the default schema.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_table_comment()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return the “comment” for the table identified by `table_name`.
  prefs: []
  type: TYPE_NORMAL
- en: Given a string `table_name` and an optional string `schema`, return table comment
    information as a dictionary corresponding to the [`ReflectedTableComment`](reflection.html#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment") dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_table_comment()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_table_comment").
  prefs: []
  type: TYPE_NORMAL
- en: 'Raise:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NotImplementedError` for dialects that don’t support comments.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_table_names()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a list of table names for `schema`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_table_names()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_table_options()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a dictionary of options specified when `table_name` was created.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_table_options()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_temp_table_names()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a list of temporary table names on the given connection, if supported
    by the underlying backend.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_temp_table_names()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_temp_view_names()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a list of temporary view names on the given connection, if supported
    by the underlying backend.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_temp_view_names()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_unique_constraints()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return information about unique constraints in `table_name`.
  prefs: []
  type: TYPE_NORMAL
- en: Given a string `table_name` and an optional string `schema`, return unique constraint
    information as a list of dicts corresponding to the [`ReflectedUniqueConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint") dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_view_definition()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return plain or materialized view definition.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_view_definition()`.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `view_name`, and an optional string `schema`, return the view definition.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.get_view_names()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Return a list of all non-materialized view names available in the database.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_view_names()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**schema** – schema name to query, if not the default schema.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: Check the existence of a particular index name in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, a string `table_name` and string index name, return `True` if an index
    of the given name on the given table exists, `False` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: The [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")
    implements this in terms of the [`Dialect.has_table()`](#sqlalchemy.engine.Dialect.has_table
    "sqlalchemy.engine.Dialect.has_table") and [`Dialect.get_indexes()`](#sqlalchemy.engine.Dialect.get_indexes
    "sqlalchemy.engine.Dialect.get_indexes") methods, however dialects can implement
    a more performant version.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.has_index()`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Check the existence of a particular schema name in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, a string `schema_name`, return `True` if a schema of the given exists,
    `False` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: The [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")
    implements this by checking the presence of `schema_name` among the schemas returned
    by [`Dialect.get_schema_names()`](#sqlalchemy.engine.Dialect.get_schema_names
    "sqlalchemy.engine.Dialect.get_schema_names"), however dialects can implement
    a more performant version.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.has_schema()`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.has_sequence()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Check the existence of a particular sequence in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object and a string sequence_name, return `True` if the given sequence exists
    in the database, `False` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.has_sequence()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.has_table()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: For internal dialect use, check the existence of a particular table or view
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, a string table_name and optional schema name, return True if the given
    table exists in the database, False otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: This method serves as the underlying implementation of the public facing [`Inspector.has_table()`](reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") method, and is also used internally
    to implement the “checkfirst” behavior for methods like [`Table.create()`](metadata.html#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create") and [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all").
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method is used internally by SQLAlchemy, and is published so that third-party
    dialects may provide an implementation. It is **not** the public API for checking
    for table presence. Please use the [`Inspector.has_table()`](reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0::: [`Dialect.has_table()`](#sqlalchemy.engine.Dialect.has_table
    "sqlalchemy.engine.Dialect.has_table") now formally supports checking for additional
    table-like objects:'
  prefs: []
  type: TYPE_NORMAL
- en: any type of views (plain or materialized)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: temporary tables of any kind
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Previously, these two checks were not formally specified and different dialects
    would vary in their behavior. The dialect testing suite now includes tests for
    all of these object types, and dialects to the degree that the backing database
    supports views or temporary tables should seek to support locating these objects
    for full compliance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Whether or not this dialect has a separate “terminate” implementation that does
    not block or require awaiting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: This element will refer to an instance of [`IdentifierPreparer`](#sqlalchemy.sql.compiler.IdentifierPreparer
    "sqlalchemy.sql.compiler.IdentifierPreparer") once a [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect") has been constructed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.import_dbapi()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Import the DBAPI module that is used by this dialect.
  prefs: []
  type: TYPE_NORMAL
- en: The Python module object returned here will be assigned as an instance variable
    to a constructed dialect under the name `.dbapi`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: The [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi") class method is renamed from the previous
    method `.Dialect.dbapi()`, which would be replaced at dialect instantiation time
    by the DBAPI module itself, thus using the same name in two different ways. If
    a `.Dialect.dbapi()` classmethod is present on a third-party dialect, it will
    be used and a deprecation warning will be emitted.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: set of DBAPI type objects that should be included in automatic cursor.setinputsizes()
    calls.
  prefs: []
  type: TYPE_NORMAL
- en: This is only used if bind_typing is BindTyping.SET_INPUT_SIZES
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: Called during strategized creation of the dialect with a connection.
  prefs: []
  type: TYPE_NORMAL
- en: Allows dialects to configure options based on server version info or other properties.
  prefs: []
  type: TYPE_NORMAL
- en: The connection passed here is a SQLAlchemy Connection object, with full capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: The initialize() method of the base dialect should be called via super().
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: as of SQLAlchemy 1.4, this method is called **before** any [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") hooks are called.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: Indicates the dialect supports comment DDL that’s inline with the definition
    of a Table or Column. If False, this implies that ALTER must be used to set table
    and column comments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: dialect / driver / database supports some means of providing INSERT…RETURNING
    support when dialect.do_executemany() is used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: dialect / driver / database supports some means of providing INSERT…RETURNING
    support when dialect.do_executemany() is used along with the [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") parameter being set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: if the dialect supports RETURNING with INSERT
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: Options indicating the database supports a form of bulk INSERT where the autoincrement
    integer primary key can be reliably used as an ordering for INSERTed rows.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: Alternate to insertmanyvalues_page_size, will additionally limit page size based
    on number of parameters total in the statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: Number of rows to render into an individual INSERT..VALUES() statement for `ExecuteStyle.INSERTMANYVALUES`
    executions.
  prefs: []
  type: TYPE_NORMAL
- en: The default dialect defaults this to 1000.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.insertmanyvalues_page_size`](connections.html#sqlalchemy.engine.Connection.execution_options.params.insertmanyvalues_page_size
    "sqlalchemy.engine.Connection.execution_options") - execution option available
    on [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    statements'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: Whether or not this dialect is intended for asyncio use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Return True if the given DB-API error indicates an invalid connection
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: optional user-defined max length for SQL labels
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: set up the provision.py module for this dialect.
  prefs: []
  type: TYPE_NORMAL
- en: For dialects that include a provision.py module that sets up provisioning followers,
    this method should initiate that process.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical implementation would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'The default method assumes a module named `provision.py` inside the owning
    package of the current dialect, based on the `__module__` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.3.14.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: The maximum length of identifier names.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: identifying name for the dialect from a DBAPI-neutral point of view (i.e. ‘sqlite’)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: convert the given name to lowercase if it is detected as case insensitive.
  prefs: []
  type: TYPE_NORMAL
- en: This method is only used if the dialect defines requires_name_normalize=True.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: return a callable which sets up a newly created DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: The callable should accept a single argument “conn” which is the DBAPI connection
    itself. The inner callable has no return value.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: This is used to set dialect-wide per-connection options such as isolation modes,
    Unicode modes, etc.
  prefs: []
  type: TYPE_NORMAL
- en: The “do_on_connect” callable is invoked by using the [`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") event hook, then unwrapping the DBAPI
    connection and passing it into the callable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: the on_connect hook is no longer called twice for the
    first connection of a dialect. The on_connect hook is still called before the
    [`Dialect.initialize()`](#sqlalchemy.engine.Dialect.initialize "sqlalchemy.engine.Dialect.initialize")
    method however.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.3: the on_connect hook is invoked from a new method
    on_connect_url that passes the URL that was used to create the connect args. Dialects
    can implement on_connect_url instead of on_connect if they need the URL object
    that was used for the connection in order to get additional context.'
  prefs: []
  type: TYPE_NORMAL
- en: If None is returned, no event listener is generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a callable that accepts a single DBAPI connection as an argument, or None.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect "sqlalchemy.engine.Dialect.connect")
    - allows the DBAPI `connect()` sequence itself to be controlled.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url "sqlalchemy.engine.Dialect.on_connect_url")
    - supersedes [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")
    to also receive the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object in context.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.on_connect_url()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: return a callable which sets up a newly created DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: This method is a new hook that supersedes the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") method when implemented by a dialect.
    When not implemented by a dialect, it invokes the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") method directly to maintain compatibility
    with existing dialects. There is no deprecation for [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") expected.
  prefs: []
  type: TYPE_NORMAL
- en: The callable should accept a single argument “conn” which is the DBAPI connection
    itself. The inner callable has no return value.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: This is used to set dialect-wide per-connection options such as isolation modes,
    Unicode modes, etc.
  prefs: []
  type: TYPE_NORMAL
- en: This method differs from [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") in that it is passed the [`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object that’s relevant to the connect args. Normally
    the only way to get this is from the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") hook is to look on the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") itself, however this URL object may have been replaced
    by plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The default implementation of [`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url
    "sqlalchemy.engine.Dialect.on_connect_url") is to invoke the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") method. Therefore if a dialect implements
    this method, the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") method **will not be called** unless the
    overriding dialect calls it directly from here.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.3: added [`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url
    "sqlalchemy.engine.Dialect.on_connect_url") which normally calls into [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**url** – a [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object representing the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    that was passed to the [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a callable that accepts a single DBAPI connection as an argument, or None.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: the paramstyle to be used (some DB-APIs support multiple paramstyles).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: True if the paramstyle for this Dialect is positional.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: True if ‘implicit’ primary key functions must be executed separately in order
    to get their value, if RETURNING is not used.
  prefs: []
  type: TYPE_NORMAL
- en: This is currently oriented towards PostgreSQL when the `implicit_returning=False`
    parameter is used on a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`IdentifierPreparer`](#sqlalchemy.sql.compiler.IdentifierPreparer
    "sqlalchemy.sql.compiler.IdentifierPreparer")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.reflection_options` *attribute of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Sequence of string names indicating keyword arguments that can be established
    on a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object which will be passed as “reflection options” when using [`Table.autoload_with`](metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: Current example is “oracle_resolve_synonyms” in the Oracle dialect.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: Given a DBAPI connection, revert its isolation to the default.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this is a dialect-level method which is used as part of the implementation
    of the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    isolation level facilities; these APIs should be preferred for most typical use
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - view default level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") isolation level'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: indicates if Python bytes() objects are returned natively by the driver for
    SQL “binary” datatypes.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.11.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: If True, indicates if the [`Sequence.optional`](defaults.html#sqlalchemy.schema.Sequence.params.optional
    "sqlalchemy.schema.Sequence") parameter on the [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") construct should signal to not generate a CREATE
    SEQUENCE. Applies only to dialects that support sequences. Currently used only
    to allow PostgreSQL SERIAL to be used on a column that specifies Sequence() for
    usage on other backends.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: deprecated; indicates if the dialect should attempt to use server side cursors
    by default
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: a tuple containing a version number for the DB backend in use.
  prefs: []
  type: TYPE_NORMAL
- en: This value is only available for supporting dialects, and is typically populated
    during the initial connection to the database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: Establish execution options for a given connection.
  prefs: []
  type: TYPE_NORMAL
- en: This is implemented by [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect") in order to implement the [`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") execution option. Dialects can
    intercept various execution options which may need to modify state on a particular
    DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: Establish execution options for a given engine.
  prefs: []
  type: TYPE_NORMAL
- en: This is implemented by [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect") to establish event hooks for new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") instances created by the given [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") which will then invoke the [`Dialect.set_connection_execution_options()`](#sqlalchemy.engine.Dialect.set_connection_execution_options
    "sqlalchemy.engine.Dialect.set_connection_execution_options") method for that
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `Dialect.set_isolation_level()` *method of* [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.interfaces.Dialect")'
  prefs: []
  type: TYPE_NORMAL
- en: Given a DBAPI connection, set its isolation level.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this is a dialect-level method which is used as part of the implementation
    of the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    isolation level facilities; these APIs should be preferred for most typical use
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: If the dialect also implements the [`Dialect.get_isolation_level_values()`](#sqlalchemy.engine.Dialect.get_isolation_level_values
    "sqlalchemy.engine.Dialect.get_isolation_level_values") method, then the given
    level is guaranteed to be one of the string names within that sequence, and the
    method will not need to anticipate a lookup failure.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - view default level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") isolation level'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '`True` if the database supports `ALTER TABLE` - used only for generating foreign
    key constraints in certain circumstances'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: Indicates the dialect supports comment DDL on tables and columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: Indicates if the dialect supports comment DDL on constraints.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: dialect supports INSERT… VALUES (DEFAULT) syntax
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: dialect supports INSERT… DEFAULT VALUES syntax
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: dialect supports INSERT () VALUES ()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: target database supports IDENTITY
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: Target database supports INSERT…VALUES with multiple value sets, i.e. INSERT
    INTO table (cols) VALUES (…), (…), (…), …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: Indicates if the dialect supports a native boolean construct. This will prevent
    [`Boolean`](type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    from generating a CHECK constraint when that type is used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: indicates if Decimal objects are handled and returned for precision numeric
    types, or if floats are returned
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: Indicates if the dialect supports a native ENUM construct. This will prevent
    [`Enum`](type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum") from
    generating a CHECK constraint when that type is used in “native” mode.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: indicates if Python UUID() objects are handled natively by the driver for SQL
    UUID datatypes.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: Indicate whether the dialect properly implements rowcount for `UPDATE` and `DELETE`
    statements when executed via executemany.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: Indicate whether the dialect properly implements rowcount for `UPDATE` and `DELETE`
    statements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: True if this dialect supports sane rowcount even if RETURNING is in use.
  prefs: []
  type: TYPE_NORMAL
- en: For dialects that don’t support RETURNING, this is synonymous with `supports_sane_rowcount`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: Indicates if the dialect supports CREATE SEQUENCE or similar.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: indicates if the dialect supports server side cursors
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: target database supports ORDER BY <labelname>, where <labelname> refers to a
    label in the columns clause of the SELECT
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: indicates if this dialect supports caching.
  prefs: []
  type: TYPE_NORMAL
- en: All dialects that are compatible with statement caching should set this flag
    to True directly on each dialect class and subclass that supports it. SQLAlchemy
    tests that this flag is locally present on each dialect subclass before it will
    use statement caching. This is to provide safety for legacy or new dialects that
    are not yet fully tested to be compliant with SQL statement caching.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.5.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Caching for Third Party Dialects](connections.html#engine-thirdparty-caching)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: target database supports tuple IN, i.e. (x, y) IN ((q, p), (r, z))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: legacy; this is a TypeCompiler class at the class level, a TypeCompiler instance
    at the instance level.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to type_compiler_instance instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: alias of [`GenericTypeCompiler`](#sqlalchemy.sql.compiler.GenericTypeCompiler
    "sqlalchemy.sql.compiler.GenericTypeCompiler")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: instance of a [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    class used to compile SQL type objects
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: Provide a database-specific [`TypeEngine`](type_api.html#sqlalchemy.types.TypeEngine
    "sqlalchemy.types.TypeEngine") object, given the generic object which comes from
    the types module.
  prefs: []
  type: TYPE_NORMAL
- en: This method looks for a dictionary called `colspecs` as a class or instance-level
    variable, and passes on to `adapt_type()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: dialect supports UPDATE..RETURNING with executemany.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: if the dialect supports RETURNING with UPDATE
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: if the dialect supports RETURNING with UPDATE..FROM
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: if True, indicates “insertmanyvalues” functionality should be used to allow
    for `insert_executemany_returning` behavior, if possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'In practice, setting this to True means:'
  prefs: []
  type: TYPE_NORMAL
- en: if `supports_multivalues_insert`, `insert_returning` and `use_insertmanyvalues`
    are all True, the SQL compiler will produce an INSERT that will be interpreted
    by the [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")
    as an `ExecuteStyle.INSERTMANYVALUES` execution that allows for INSERT of many
    rows with RETURNING by rewriting a single-row INSERT statement to have multiple
    VALUES clauses, also executing the statement multiple times for a series of batches
    when large numbers of rows are given.
  prefs: []
  type: TYPE_NORMAL
- en: The parameter is False for the default dialect, and is set to True for SQLAlchemy
    internal dialects SQLite, MySQL/MariaDB, PostgreSQL, SQL Server. It remains at
    False for Oracle, which provides native “executemany with RETURNING” support and
    also does not support `supports_multivalues_insert`. For MySQL/MariaDB, those
    MySQL dialects that don’t support RETURNING will not report `insert_executemany_returning`
    as True.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: if True, and use_insertmanyvalues is also True, INSERT statements that don’t
    include RETURNING will also use “insertmanyvalues”.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: Define the behavior of a specific database and DB-API combination.
  prefs: []
  type: TYPE_NORMAL
- en: Any aspect of metadata definition, SQL query generation, execution, result-set
    handling, or anything else which varies between databases is defined under the
    general category of the Dialect. The Dialect acts as a factory for other database-specific
    object implementations including ExecutionContext, Compiled, DefaultGenerator,
    and TypeEngine.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Third party dialects should not subclass [`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect") directly. Instead, subclass [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect") or descendant class.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[bind_typing](#sqlalchemy.engine.Dialect.bind_typing), [colspecs](#sqlalchemy.engine.Dialect.colspecs),
    [connect()](#sqlalchemy.engine.Dialect.connect), [construct_arguments](#sqlalchemy.engine.Dialect.construct_arguments),
    [create_connect_args()](#sqlalchemy.engine.Dialect.create_connect_args), [create_xid()](#sqlalchemy.engine.Dialect.create_xid),
    [cte_follows_insert](#sqlalchemy.engine.Dialect.cte_follows_insert), [dbapi](#sqlalchemy.engine.Dialect.dbapi),
    [dbapi_exception_translation_map](#sqlalchemy.engine.Dialect.dbapi_exception_translation_map),
    [ddl_compiler](#sqlalchemy.engine.Dialect.ddl_compiler), [default_isolation_level](#sqlalchemy.engine.Dialect.default_isolation_level),
    [default_metavalue_token](#sqlalchemy.engine.Dialect.default_metavalue_token),
    [default_schema_name](#sqlalchemy.engine.Dialect.default_schema_name), [default_sequence_base](#sqlalchemy.engine.Dialect.default_sequence_base),
    [delete_executemany_returning](#sqlalchemy.engine.Dialect.delete_executemany_returning),
    [delete_returning](#sqlalchemy.engine.Dialect.delete_returning), [delete_returning_multifrom](#sqlalchemy.engine.Dialect.delete_returning_multifrom),
    [denormalize_name()](#sqlalchemy.engine.Dialect.denormalize_name), [div_is_floordiv](#sqlalchemy.engine.Dialect.div_is_floordiv),
    [do_begin()](#sqlalchemy.engine.Dialect.do_begin), [do_begin_twophase()](#sqlalchemy.engine.Dialect.do_begin_twophase),
    [do_close()](#sqlalchemy.engine.Dialect.do_close), [do_commit()](#sqlalchemy.engine.Dialect.do_commit),
    [do_commit_twophase()](#sqlalchemy.engine.Dialect.do_commit_twophase), [do_execute()](#sqlalchemy.engine.Dialect.do_execute),
    [do_execute_no_params()](#sqlalchemy.engine.Dialect.do_execute_no_params), [do_executemany()](#sqlalchemy.engine.Dialect.do_executemany),
    [do_ping()](#sqlalchemy.engine.Dialect.do_ping), [do_prepare_twophase()](#sqlalchemy.engine.Dialect.do_prepare_twophase),
    [do_recover_twophase()](#sqlalchemy.engine.Dialect.do_recover_twophase), [do_release_savepoint()](#sqlalchemy.engine.Dialect.do_release_savepoint),
    [do_rollback()](#sqlalchemy.engine.Dialect.do_rollback), [do_rollback_to_savepoint()](#sqlalchemy.engine.Dialect.do_rollback_to_savepoint),
    [do_rollback_twophase()](#sqlalchemy.engine.Dialect.do_rollback_twophase), [do_savepoint()](#sqlalchemy.engine.Dialect.do_savepoint),
    [do_set_input_sizes()](#sqlalchemy.engine.Dialect.do_set_input_sizes), [do_terminate()](#sqlalchemy.engine.Dialect.do_terminate),
    [driver](#sqlalchemy.engine.Dialect.driver), [engine_config_types](#sqlalchemy.engine.Dialect.engine_config_types),
    [engine_created()](#sqlalchemy.engine.Dialect.engine_created), [exclude_set_input_sizes](#sqlalchemy.engine.Dialect.exclude_set_input_sizes),
    [execute_sequence_format](#sqlalchemy.engine.Dialect.execute_sequence_format),
    [execution_ctx_cls](#sqlalchemy.engine.Dialect.execution_ctx_cls), [favor_returning_over_lastrowid](#sqlalchemy.engine.Dialect.favor_returning_over_lastrowid),
    [get_async_dialect_cls()](#sqlalchemy.engine.Dialect.get_async_dialect_cls), [get_check_constraints()](#sqlalchemy.engine.Dialect.get_check_constraints),
    [get_columns()](#sqlalchemy.engine.Dialect.get_columns), [get_default_isolation_level()](#sqlalchemy.engine.Dialect.get_default_isolation_level),
    [get_dialect_cls()](#sqlalchemy.engine.Dialect.get_dialect_cls), [get_dialect_pool_class()](#sqlalchemy.engine.Dialect.get_dialect_pool_class),
    [get_driver_connection()](#sqlalchemy.engine.Dialect.get_driver_connection), [get_foreign_keys()](#sqlalchemy.engine.Dialect.get_foreign_keys),
    [get_indexes()](#sqlalchemy.engine.Dialect.get_indexes), [get_isolation_level()](#sqlalchemy.engine.Dialect.get_isolation_level),
    [get_isolation_level_values()](#sqlalchemy.engine.Dialect.get_isolation_level_values),
    [get_materialized_view_names()](#sqlalchemy.engine.Dialect.get_materialized_view_names),
    [get_multi_check_constraints()](#sqlalchemy.engine.Dialect.get_multi_check_constraints),
    [get_multi_columns()](#sqlalchemy.engine.Dialect.get_multi_columns), [get_multi_foreign_keys()](#sqlalchemy.engine.Dialect.get_multi_foreign_keys),
    [get_multi_indexes()](#sqlalchemy.engine.Dialect.get_multi_indexes), [get_multi_pk_constraint()](#sqlalchemy.engine.Dialect.get_multi_pk_constraint),
    [get_multi_table_comment()](#sqlalchemy.engine.Dialect.get_multi_table_comment),
    [get_multi_table_options()](#sqlalchemy.engine.Dialect.get_multi_table_options),
    [get_multi_unique_constraints()](#sqlalchemy.engine.Dialect.get_multi_unique_constraints),
    [get_pk_constraint()](#sqlalchemy.engine.Dialect.get_pk_constraint), [get_schema_names()](#sqlalchemy.engine.Dialect.get_schema_names),
    [get_sequence_names()](#sqlalchemy.engine.Dialect.get_sequence_names), [get_table_comment()](#sqlalchemy.engine.Dialect.get_table_comment),
    [get_table_names()](#sqlalchemy.engine.Dialect.get_table_names), [get_table_options()](#sqlalchemy.engine.Dialect.get_table_options),
    [get_temp_table_names()](#sqlalchemy.engine.Dialect.get_temp_table_names), [get_temp_view_names()](#sqlalchemy.engine.Dialect.get_temp_view_names),
    [get_unique_constraints()](#sqlalchemy.engine.Dialect.get_unique_constraints),
    [get_view_definition()](#sqlalchemy.engine.Dialect.get_view_definition), [get_view_names()](#sqlalchemy.engine.Dialect.get_view_names),
    [has_index()](#sqlalchemy.engine.Dialect.has_index), [has_schema()](#sqlalchemy.engine.Dialect.has_schema),
    [has_sequence()](#sqlalchemy.engine.Dialect.has_sequence), [has_table()](#sqlalchemy.engine.Dialect.has_table),
    [has_terminate](#sqlalchemy.engine.Dialect.has_terminate), [identifier_preparer](#sqlalchemy.engine.Dialect.identifier_preparer),
    [import_dbapi()](#sqlalchemy.engine.Dialect.import_dbapi), [include_set_input_sizes](#sqlalchemy.engine.Dialect.include_set_input_sizes),
    [initialize()](#sqlalchemy.engine.Dialect.initialize), [inline_comments](#sqlalchemy.engine.Dialect.inline_comments),
    [insert_executemany_returning](#sqlalchemy.engine.Dialect.insert_executemany_returning),
    [insert_executemany_returning_sort_by_parameter_order](#sqlalchemy.engine.Dialect.insert_executemany_returning_sort_by_parameter_order),
    [insert_returning](#sqlalchemy.engine.Dialect.insert_returning), [insertmanyvalues_implicit_sentinel](#sqlalchemy.engine.Dialect.insertmanyvalues_implicit_sentinel),
    [insertmanyvalues_max_parameters](#sqlalchemy.engine.Dialect.insertmanyvalues_max_parameters),
    [insertmanyvalues_page_size](#sqlalchemy.engine.Dialect.insertmanyvalues_page_size),
    [is_async](#sqlalchemy.engine.Dialect.is_async), [is_disconnect()](#sqlalchemy.engine.Dialect.is_disconnect),
    [label_length](#sqlalchemy.engine.Dialect.label_length), [load_provisioning()](#sqlalchemy.engine.Dialect.load_provisioning),
    [loaded_dbapi](#sqlalchemy.engine.Dialect.loaded_dbapi), [max_identifier_length](#sqlalchemy.engine.Dialect.max_identifier_length),
    [name](#sqlalchemy.engine.Dialect.name), [normalize_name()](#sqlalchemy.engine.Dialect.normalize_name),
    [on_connect()](#sqlalchemy.engine.Dialect.on_connect), [on_connect_url()](#sqlalchemy.engine.Dialect.on_connect_url),
    [paramstyle](#sqlalchemy.engine.Dialect.paramstyle), [positional](#sqlalchemy.engine.Dialect.positional),
    [preexecute_autoincrement_sequences](#sqlalchemy.engine.Dialect.preexecute_autoincrement_sequences),
    [preparer](#sqlalchemy.engine.Dialect.preparer), [reflection_options](#sqlalchemy.engine.Dialect.reflection_options),
    [reset_isolation_level()](#sqlalchemy.engine.Dialect.reset_isolation_level), [returns_native_bytes](#sqlalchemy.engine.Dialect.returns_native_bytes),
    [sequences_optional](#sqlalchemy.engine.Dialect.sequences_optional), [server_side_cursors](#sqlalchemy.engine.Dialect.server_side_cursors),
    [server_version_info](#sqlalchemy.engine.Dialect.server_version_info), [set_connection_execution_options()](#sqlalchemy.engine.Dialect.set_connection_execution_options),
    [set_engine_execution_options()](#sqlalchemy.engine.Dialect.set_engine_execution_options),
    [set_isolation_level()](#sqlalchemy.engine.Dialect.set_isolation_level), [statement_compiler](#sqlalchemy.engine.Dialect.statement_compiler),
    [supports_alter](#sqlalchemy.engine.Dialect.supports_alter), [supports_comments](#sqlalchemy.engine.Dialect.supports_comments),
    [supports_constraint_comments](#sqlalchemy.engine.Dialect.supports_constraint_comments),
    [supports_default_metavalue](#sqlalchemy.engine.Dialect.supports_default_metavalue),
    [supports_default_values](#sqlalchemy.engine.Dialect.supports_default_values),
    [supports_empty_insert](#sqlalchemy.engine.Dialect.supports_empty_insert), [supports_identity_columns](#sqlalchemy.engine.Dialect.supports_identity_columns),
    [supports_multivalues_insert](#sqlalchemy.engine.Dialect.supports_multivalues_insert),
    [supports_native_boolean](#sqlalchemy.engine.Dialect.supports_native_boolean),
    [supports_native_decimal](#sqlalchemy.engine.Dialect.supports_native_decimal),
    [supports_native_enum](#sqlalchemy.engine.Dialect.supports_native_enum), [supports_native_uuid](#sqlalchemy.engine.Dialect.supports_native_uuid),
    [supports_sane_multi_rowcount](#sqlalchemy.engine.Dialect.supports_sane_multi_rowcount),
    [supports_sane_rowcount](#sqlalchemy.engine.Dialect.supports_sane_rowcount), [supports_sequences](#sqlalchemy.engine.Dialect.supports_sequences),
    [supports_server_side_cursors](#sqlalchemy.engine.Dialect.supports_server_side_cursors),
    [supports_simple_order_by_label](#sqlalchemy.engine.Dialect.supports_simple_order_by_label),
    [supports_statement_cache](#sqlalchemy.engine.Dialect.supports_statement_cache),
    [tuple_in_values](#sqlalchemy.engine.Dialect.tuple_in_values), [type_compiler](#sqlalchemy.engine.Dialect.type_compiler),
    [type_compiler_cls](#sqlalchemy.engine.Dialect.type_compiler_cls), [type_compiler_instance](#sqlalchemy.engine.Dialect.type_compiler_instance),
    [type_descriptor()](#sqlalchemy.engine.Dialect.type_descriptor), [update_executemany_returning](#sqlalchemy.engine.Dialect.update_executemany_returning),
    [update_returning](#sqlalchemy.engine.Dialect.update_returning), [update_returning_multifrom](#sqlalchemy.engine.Dialect.update_returning_multifrom),
    [use_insertmanyvalues](#sqlalchemy.engine.Dialect.use_insertmanyvalues), [use_insertmanyvalues_wo_returning](#sqlalchemy.engine.Dialect.use_insertmanyvalues_wo_returning)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.engine.Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    (`sqlalchemy.event.registry.EventTarget`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: define a means of passing typing information to the database and/or driver for
    bound parameters.
  prefs: []
  type: TYPE_NORMAL
- en: See [`BindTyping`](#sqlalchemy.engine.BindTyping "sqlalchemy.engine.BindTyping")
    for values.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: A dictionary of TypeEngine classes from sqlalchemy.types mapped to subclasses
    that are specific to the dialect class. This dictionary is class-level only and
    is not accessed from the dialect instance itself.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: Establish a connection using this dialect’s DBAPI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default implementation of this method is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: The `*cargs, **cparams` parameters are generated directly from this dialect’s
    [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method.
  prefs: []
  type: TYPE_NORMAL
- en: This method may be used for dialects that need to perform programmatic per-connection
    steps when a new connection is procured from the DBAPI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*cargs` – positional parameters returned from the [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**cparams` – keyword parameters returned from the [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a DBAPI connection, typically from the [**PEP 249**](https://peps.python.org/pep-0249/)
    module level `.connect()` function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args")'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: Optional set of argument specifiers for various SQLAlchemy constructs, typically
    schema items.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement, establish as a series of tuples, as in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: If the above construct is established on the PostgreSQL dialect, the [`Index`](constraints.html#sqlalchemy.schema.Index
    "sqlalchemy.schema.Index") construct will now accept the keyword arguments `postgresql_using`,
    `postgresql_where`, nad `postgresql_ops`. Any other argument specified to the
    constructor of [`Index`](constraints.html#sqlalchemy.schema.Index "sqlalchemy.schema.Index")
    which is prefixed with `postgresql_` will raise [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError").
  prefs: []
  type: TYPE_NORMAL
- en: A dialect which does not include a `construct_arguments` member will not participate
    in the argument validation system. For such a dialect, any argument name is accepted
    by all participating constructs, within the namespace of arguments prefixed with
    that dialect name. The rationale here is so that third-party dialects that haven’t
    yet implemented this feature continue to function in the old way.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DialectKWArgs`](foundation.html#sqlalchemy.sql.base.DialectKWArgs "sqlalchemy.sql.base.DialectKWArgs")
    - implementing base class which consumes [`DefaultDialect.construct_arguments`](#sqlalchemy.engine.default.DefaultDialect.construct_arguments
    "sqlalchemy.engine.default.DefaultDialect.construct_arguments")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: Build DB-API compatible connection arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object, returns a tuple consisting of a `(*args, **kwargs)` suitable to send directly
    to the dbapi’s connect function. The arguments are sent to the [`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect
    "sqlalchemy.engine.Dialect.connect") method which then runs the DBAPI-level `connect()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: The method typically makes use of the [`URL.translate_connect_args()`](engines.html#sqlalchemy.engine.URL.translate_connect_args
    "sqlalchemy.engine.URL.translate_connect_args") method in order to generate a
    dictionary of options.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default implementation is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**url** – a [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a tuple of `(*args, **kwargs)` which will be passed to the [`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect
    "sqlalchemy.engine.Dialect.connect") method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`URL.translate_connect_args()`](engines.html#sqlalchemy.engine.URL.translate_connect_args
    "sqlalchemy.engine.URL.translate_connect_args")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: Create a two-phase transaction ID.
  prefs: []
  type: TYPE_NORMAL
- en: This id will be passed to do_begin_twophase(), do_rollback_twophase(), do_commit_twophase().
    Its format is unspecified.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: target database, when given a CTE with an INSERT statement, needs the CTE to
    be below the INSERT
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: A reference to the DBAPI module object itself.
  prefs: []
  type: TYPE_NORMAL
- en: SQLAlchemy dialects import DBAPI modules using the classmethod [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi"). The rationale is so that any dialect
    module can be imported and used to generate SQL statements without the need for
    the actual DBAPI driver to be installed. Only when an [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") is constructed using [`create_engine()`](engines.html#sqlalchemy.create_engine
    "sqlalchemy.create_engine") does the DBAPI get imported; at that point, the creation
    process will assign the DBAPI module to this attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Dialects should therefore implement [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi") which will import the necessary module
    and return it, and then refer to `self.dbapi` in dialect code in order to refer
    to the DBAPI module contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version The: [`Dialect.dbapi`](#sqlalchemy.engine.Dialect.dbapi
    "sqlalchemy.engine.Dialect.dbapi") attribute is exclusively used as the per-[`Dialect`](#sqlalchemy.engine.Dialect
    "sqlalchemy.engine.Dialect")-instance reference to the DBAPI module. The previous
    not-fully-documented `.Dialect.dbapi()` classmethod is deprecated and replaced
    by [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi "sqlalchemy.engine.Dialect.import_dbapi").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: A dictionary of names that will contain as values the names of pep-249 exceptions
    (“IntegrityError”, “OperationalError”, etc) keyed to alternate class names, to
    support the case where a DBAPI has exception classes that aren’t named as they
    are referred to (e.g. IntegrityError = MyException). In the vast majority of cases
    this dictionary is empty.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: a [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled") class
    used to compile DDL statements
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: the isolation that is implicitly present on new connections
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: for INSERT… VALUES (DEFAULT) syntax, the token to put in the parenthesis.
  prefs: []
  type: TYPE_NORMAL
- en: E.g. for SQLite this is the keyword “NULL”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: the name of the default schema. This value is only available for supporting
    dialects, and is typically populated during the initial connection to the database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: the default value that will be rendered as the “START WITH” portion of a CREATE
    SEQUENCE DDL statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: dialect supports DELETE..RETURNING with executemany.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: if the dialect supports RETURNING with DELETE
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: if the dialect supports RETURNING with DELETE..FROM
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: convert the given name to a case insensitive identifier for the backend if it
    is an all-lowercase name.
  prefs: []
  type: TYPE_NORMAL
- en: This method is only used if the dialect defines requires_name_normalize=True.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: target database treats the / division operator as “floor division”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: Provide an implementation of `connection.begin()`, given a DB-API connection.
  prefs: []
  type: TYPE_NORMAL
- en: The DBAPI has no dedicated “begin” method and it is expected that transactions
    are implicit. This hook is provided for those DBAPIs that might need additional
    help in this area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dbapi_connection** – a DBAPI connection, typically proxied within a `ConnectionFairy`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: Begin a two phase transaction on the given connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xid` – xid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: Provide an implementation of `connection.close()`, given a DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: This hook is called by the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    when a connection has been detached from the pool, or is being returned beyond
    the normal capacity of the pool.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: Provide an implementation of `connection.commit()`, given a DB-API connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dbapi_connection** – a DBAPI connection, typically proxied within a `ConnectionFairy`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: Commit a two phase transaction on the given connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xid` – xid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_prepared` – whether or not [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") was called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recover` – if the recover flag was passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: Provide an implementation of `cursor.execute(statement, parameters)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: Provide an implementation of `cursor.execute(statement)`.
  prefs: []
  type: TYPE_NORMAL
- en: The parameter collection should not be sent.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: Provide an implementation of `cursor.executemany(statement, parameters)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: ping the DBAPI connection and return True if the connection is usable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: Prepare a two phase transaction on the given connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xid` – xid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: Recover list of uncommitted prepared two phase transaction identifiers on the
    given connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**connection** – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: Release the named savepoint on a connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – savepoint name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: Provide an implementation of `connection.rollback()`, given a DB-API connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dbapi_connection** – a DBAPI connection, typically proxied within a `ConnectionFairy`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: Rollback a connection to the named savepoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – savepoint name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: Rollback a two phase transaction on the given connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xid` – xid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_prepared` – whether or not [`TwoPhaseTransaction.prepare()`](connections.html#sqlalchemy.engine.TwoPhaseTransaction.prepare
    "sqlalchemy.engine.TwoPhaseTransaction.prepare") was called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recover` – if the recover flag was passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: Create a savepoint with the given name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connection` – a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` – savepoint name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: invoke the cursor.setinputsizes() method with appropriate arguments
  prefs: []
  type: TYPE_NORMAL
- en: This hook is called if the [`Dialect.bind_typing`](#sqlalchemy.engine.Dialect.bind_typing
    "sqlalchemy.engine.Dialect.bind_typing") attribute is set to the [`BindTyping.SETINPUTSIZES`](#sqlalchemy.engine.BindTyping.SETINPUTSIZES
    "sqlalchemy.engine.BindTyping.SETINPUTSIZES") value. Parameter data is passed
    in a list of tuples (paramname, dbtype, sqltype), where `paramname` is the key
    of the parameter in the statement, `dbtype` is the DBAPI datatype and `sqltype`
    is the SQLAlchemy type. The order of tuples is in the correct parameter order.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: - setinputsizes mode is now enabled by setting [`Dialect.bind_typing`](#sqlalchemy.engine.Dialect.bind_typing
    "sqlalchemy.engine.Dialect.bind_typing") to [`BindTyping.SETINPUTSIZES`](#sqlalchemy.engine.BindTyping.SETINPUTSIZES
    "sqlalchemy.engine.BindTyping.SETINPUTSIZES"). Dialects which accept a `use_setinputsizes`
    parameter should set this value appropriately.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: Provide an implementation of `connection.close()` that tries as much as possible
    to not block, given a DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: In the vast majority of cases this just calls .close(), however for some asyncio
    dialects may call upon different API features.
  prefs: []
  type: TYPE_NORMAL
- en: This hook is called by the [`Pool`](pooling.html#sqlalchemy.pool.Pool "sqlalchemy.pool.Pool")
    when a connection is being recycled or has been invalidated.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.41.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: identifying name for the dialect’s DBAPI
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: a mapping of string keys that can be in an engine config linked to type conversion
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: A convenience hook called before returning the final [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine").
  prefs: []
  type: TYPE_NORMAL
- en: If the dialect returned a different class from the [`get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") method, then the hook is called on
    both classes, first on the dialect class returned by the [`get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") method and then on the class on which
    the method was called.
  prefs: []
  type: TYPE_NORMAL
- en: The hook should be used by dialects and/or wrappers to apply special events
    to the engine or its components. In particular, it allows a dialect-wrapping class
    to apply dialect-level events.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: set of DBAPI type objects that should be excluded in automatic cursor.setinputsizes()
    calls.
  prefs: []
  type: TYPE_NORMAL
- en: This is only used if bind_typing is BindTyping.SET_INPUT_SIZES
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: either the ‘tuple’ or ‘list’ type, depending on what cursor.execute() accepts
    for the second argument (they vary).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: a [`ExecutionContext`](#sqlalchemy.engine.ExecutionContext "sqlalchemy.engine.ExecutionContext")
    class used to handle statement execution
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: for backends that support both a lastrowid and a RETURNING insert strategy,
    favor RETURNING for simple single-int pk inserts.
  prefs: []
  type: TYPE_NORMAL
- en: cursor.lastrowid tends to be more performant on most backends.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: Given a URL, return the [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    that will be used by an async engine.
  prefs: []
  type: TYPE_NORMAL
- en: By default this is an alias of [`Dialect.get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls
    "sqlalchemy.engine.Dialect.get_dialect_cls") and just returns the cls. It may
    be used if a dialect provides both a sync and async version under the same name,
    like the `psycopg` driver.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Dialect.get_dialect_cls()`](#sqlalchemy.engine.Dialect.get_dialect_cls "sqlalchemy.engine.Dialect.get_dialect_cls")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: Return information about check constraints in `table_name`.
  prefs: []
  type: TYPE_NORMAL
- en: Given a string `table_name` and an optional string `schema`, return check constraint
    information as a list of dicts corresponding to the [`ReflectedCheckConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedCheckConstraint
    "sqlalchemy.engine.interfaces.ReflectedCheckConstraint") dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_check_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_check_constraints").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: Return information about columns in `table_name`.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `table_name`, and an optional string `schema`, return column information
    as a list of dictionaries corresponding to the [`ReflectedColumn`](reflection.html#sqlalchemy.engine.interfaces.ReflectedColumn
    "sqlalchemy.engine.interfaces.ReflectedColumn") dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_columns
    "sqlalchemy.engine.reflection.Inspector.get_columns").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: Given a DBAPI connection, return its isolation level, or a default isolation
    level if one cannot be retrieved.
  prefs: []
  type: TYPE_NORMAL
- en: This method may only raise NotImplementedError and **must not raise any other
    exception**, as it is used implicitly upon first connect.
  prefs: []
  type: TYPE_NORMAL
- en: The method **must return a value** for a dialect that supports isolation level
    settings, as this level is what will be reverted towards when a per-connection
    isolation level change is made.
  prefs: []
  type: TYPE_NORMAL
- en: The method defaults to using the [`Dialect.get_isolation_level()`](#sqlalchemy.engine.Dialect.get_isolation_level
    "sqlalchemy.engine.Dialect.get_isolation_level") method unless overridden by a
    dialect.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.22.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: Given a URL, return the [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    that will be used.
  prefs: []
  type: TYPE_NORMAL
- en: This is a hook that allows an external plugin to provide functionality around
    an existing dialect, by allowing the plugin to be loaded from the url based on
    an entrypoint, and then the plugin returns the actual dialect to be used.
  prefs: []
  type: TYPE_NORMAL
- en: By default this just returns the cls.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: return a Pool class to use for a given URL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: Returns the connection object as returned by the external driver package.
  prefs: []
  type: TYPE_NORMAL
- en: For normal dialects that use a DBAPI compliant driver this call will just return
    the `connection` passed as argument. For dialects that instead adapt a non DBAPI
    compliant driver, like when adapting an asyncio driver, this call will return
    the connection-like object as returned by the driver.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: Return information about foreign_keys in `table_name`.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `table_name`, and an optional string `schema`, return foreign key information
    as a list of dicts corresponding to the [`ReflectedForeignKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedForeignKeyConstraint") dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_foreign_keys()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: Return information about indexes in `table_name`.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `table_name` and an optional string `schema`, return index information
    as a list of dictionaries corresponding to the [`ReflectedIndex`](reflection.html#sqlalchemy.engine.interfaces.ReflectedIndex
    "sqlalchemy.engine.interfaces.ReflectedIndex") dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_indexes
    "sqlalchemy.engine.reflection.Inspector.get_indexes").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: Given a DBAPI connection, return its isolation level.
  prefs: []
  type: TYPE_NORMAL
- en: When working with a [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") object, the corresponding DBAPI connection may
    be procured using the [`Connection.connection`](connections.html#sqlalchemy.engine.Connection.connection
    "sqlalchemy.engine.Connection.connection") accessor.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this is a dialect-level method which is used as part of the implementation
    of the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    isolation level facilities; these APIs should be preferred for most typical use
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - view default level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") isolation level'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: return a sequence of string isolation level names that are accepted by this
    dialect.
  prefs: []
  type: TYPE_NORMAL
- en: 'The available names should use the following conventions:'
  prefs: []
  type: TYPE_NORMAL
- en: use UPPERCASE names. isolation level methods will accept lowercase names but
    these are normalized into UPPERCASE before being passed along to the dialect.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: separate words should be separated by spaces, not underscores, e.g. `REPEATABLE
    READ`. isolation level names will have underscores converted to spaces before
    being passed along to the dialect.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The names for the four standard isolation names to the extent that they are
    supported by the backend should be `READ UNCOMMITTED` `READ COMMITTED`, `REPEATABLE
    READ`, `SERIALIZABLE`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: if the dialect supports an autocommit option it should be provided using the
    isolation level name `AUTOCOMMIT`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other isolation modes may also be present, provided that they are named in UPPERCASE
    and use spaces not underscores.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This function is used so that the default dialect can check that a given isolation
    level parameter is valid, else raises an [`ArgumentError`](exceptions.html#sqlalchemy.exc.ArgumentError
    "sqlalchemy.exc.ArgumentError").
  prefs: []
  type: TYPE_NORMAL
- en: A DBAPI connection is passed to the method, in the unlikely event that the dialect
    needs to interrogate the connection itself to determine this list, however it
    is expected that most backends will return a hardcoded list of values. If the
    dialect supports “AUTOCOMMIT”, that value should also be present in the sequence
    returned.
  prefs: []
  type: TYPE_NORMAL
- en: The method raises `NotImplementedError` by default. If a dialect does not implement
    this method, then the default dialect will not perform any checking on a given
    isolation level value before passing it onto the [`Dialect.set_isolation_level()`](#sqlalchemy.engine.Dialect.set_isolation_level
    "sqlalchemy.engine.Dialect.set_isolation_level") method. This is to allow backwards-compatibility
    with third party dialects that may not yet be implementing this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: Return a list of all materialized view names available in the database.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_materialized_view_names()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**schema** –'
  prefs: []
  type: TYPE_NORMAL
- en: schema name to query, if not the default schema.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: Return information about check constraints in all tables in the given `schema`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_check_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_check_constraints").
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names"), [`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") or [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") depending on the provided
    `kind`. Dialects that want to support a faster implementation should implement
    this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: Return information about columns in all tables in the given `schema`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_columns()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_columns
    "sqlalchemy.engine.reflection.Inspector.get_multi_columns").
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names"), [`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") or [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") depending on the provided
    `kind`. Dialects that want to support a faster implementation should implement
    this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: Return information about foreign_keys in all tables in the given `schema`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_multi_foreign_keys()`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names"), [`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") or [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") depending on the provided
    `kind`. Dialects that want to support a faster implementation should implement
    this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: Return information about indexes in in all tables in the given `schema`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_indexes()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_indexes
    "sqlalchemy.engine.reflection.Inspector.get_multi_indexes").
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names"), [`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") or [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") depending on the provided
    `kind`. Dialects that want to support a faster implementation should implement
    this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: Return information about primary key constraints in all tables in the given
    `schema`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_pk_constraint()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_multi_pk_constraint").
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names"), [`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") or [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") depending on the provided
    `kind`. Dialects that want to support a faster implementation should implement
    this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: Return information about the table comment in all tables in the given `schema`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_multi_table_comment()`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names"), [`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") or [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") depending on the provided
    `kind`. Dialects that want to support a faster implementation should implement
    this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: Return a dictionary of options specified when the tables in the given schema
    were created.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_multi_table_options()`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names"), [`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") or [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") depending on the provided
    `kind`. Dialects that want to support a faster implementation should implement
    this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: Return information about unique constraints in all tables in the given `schema`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_multi_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_multi_unique_constraints").
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `DefaultDialect` provides a default implementation that will call the single
    table method for each object returned by [`Dialect.get_table_names()`](#sqlalchemy.engine.Dialect.get_table_names
    "sqlalchemy.engine.Dialect.get_table_names"), [`Dialect.get_view_names()`](#sqlalchemy.engine.Dialect.get_view_names
    "sqlalchemy.engine.Dialect.get_view_names") or [`Dialect.get_materialized_view_names()`](#sqlalchemy.engine.Dialect.get_materialized_view_names
    "sqlalchemy.engine.Dialect.get_materialized_view_names") depending on the provided
    `kind`. Dialects that want to support a faster implementation should implement
    this method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: Return information about the primary key constraint on table_name`.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `table_name`, and an optional string `schema`, return primary key information
    as a dictionary corresponding to the [`ReflectedPrimaryKeyConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint
    "sqlalchemy.engine.interfaces.ReflectedPrimaryKeyConstraint") dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_pk_constraint()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_pk_constraint
    "sqlalchemy.engine.reflection.Inspector.get_pk_constraint").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: Return a list of all schema names available in the database.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_schema_names()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: Return a list of all sequence names available in the database.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_sequence_names()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**schema** – schema name to query, if not the default schema.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: Return the “comment” for the table identified by `table_name`.
  prefs: []
  type: TYPE_NORMAL
- en: Given a string `table_name` and an optional string `schema`, return table comment
    information as a dictionary corresponding to the [`ReflectedTableComment`](reflection.html#sqlalchemy.engine.interfaces.ReflectedTableComment
    "sqlalchemy.engine.interfaces.ReflectedTableComment") dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_table_comment()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_table_comment
    "sqlalchemy.engine.reflection.Inspector.get_table_comment").
  prefs: []
  type: TYPE_NORMAL
- en: 'Raise:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NotImplementedError` for dialects that don’t support comments.'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: Return a list of table names for `schema`.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_table_names()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: Return a dictionary of options specified when `table_name` was created.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_table_options()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: Return a list of temporary table names on the given connection, if supported
    by the underlying backend.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_temp_table_names()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: Return a list of temporary view names on the given connection, if supported
    by the underlying backend.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_temp_view_names()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: Return information about unique constraints in `table_name`.
  prefs: []
  type: TYPE_NORMAL
- en: Given a string `table_name` and an optional string `schema`, return unique constraint
    information as a list of dicts corresponding to the [`ReflectedUniqueConstraint`](reflection.html#sqlalchemy.engine.interfaces.ReflectedUniqueConstraint
    "sqlalchemy.engine.interfaces.ReflectedUniqueConstraint") dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use [`Inspector.get_unique_constraints()`](reflection.html#sqlalchemy.engine.reflection.Inspector.get_unique_constraints
    "sqlalchemy.engine.reflection.Inspector.get_unique_constraints").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: Return plain or materialized view definition.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_view_definition()`.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    a string `view_name`, and an optional string `schema`, return the view definition.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: Return a list of all non-materialized view names available in the database.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.get_view_names()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**schema** – schema name to query, if not the default schema.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: Check the existence of a particular index name in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, a string `table_name` and string index name, return `True` if an index
    of the given name on the given table exists, `False` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: The [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")
    implements this in terms of the [`Dialect.has_table()`](#sqlalchemy.engine.Dialect.has_table
    "sqlalchemy.engine.Dialect.has_table") and [`Dialect.get_indexes()`](#sqlalchemy.engine.Dialect.get_indexes
    "sqlalchemy.engine.Dialect.get_indexes") methods, however dialects can implement
    a more performant version.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.has_index()`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: Check the existence of a particular schema name in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, a string `schema_name`, return `True` if a schema of the given exists,
    `False` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: The [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")
    implements this by checking the presence of `schema_name` among the schemas returned
    by [`Dialect.get_schema_names()`](#sqlalchemy.engine.Dialect.get_schema_names
    "sqlalchemy.engine.Dialect.get_schema_names"), however dialects can implement
    a more performant version.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.has_schema()`.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: Check the existence of a particular sequence in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object and a string sequence_name, return `True` if the given sequence exists
    in the database, `False` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: This is an internal dialect method. Applications should use `Inspector.has_sequence()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: For internal dialect use, check the existence of a particular table or view
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Given a [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    object, a string table_name and optional schema name, return True if the given
    table exists in the database, False otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: This method serves as the underlying implementation of the public facing [`Inspector.has_table()`](reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") method, and is also used internally
    to implement the “checkfirst” behavior for methods like [`Table.create()`](metadata.html#sqlalchemy.schema.Table.create
    "sqlalchemy.schema.Table.create") and [`MetaData.create_all()`](metadata.html#sqlalchemy.schema.MetaData.create_all
    "sqlalchemy.schema.MetaData.create_all").
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method is used internally by SQLAlchemy, and is published so that third-party
    dialects may provide an implementation. It is **not** the public API for checking
    for table presence. Please use the [`Inspector.has_table()`](reflection.html#sqlalchemy.engine.reflection.Inspector.has_table
    "sqlalchemy.engine.reflection.Inspector.has_table") method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0::: [`Dialect.has_table()`](#sqlalchemy.engine.Dialect.has_table
    "sqlalchemy.engine.Dialect.has_table") now formally supports checking for additional
    table-like objects:'
  prefs: []
  type: TYPE_NORMAL
- en: any type of views (plain or materialized)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: temporary tables of any kind
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Previously, these two checks were not formally specified and different dialects
    would vary in their behavior. The dialect testing suite now includes tests for
    all of these object types, and dialects to the degree that the backing database
    supports views or temporary tables should seek to support locating these objects
    for full compliance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: Whether or not this dialect has a separate “terminate” implementation that does
    not block or require awaiting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: This element will refer to an instance of [`IdentifierPreparer`](#sqlalchemy.sql.compiler.IdentifierPreparer
    "sqlalchemy.sql.compiler.IdentifierPreparer") once a [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect") has been constructed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: Import the DBAPI module that is used by this dialect.
  prefs: []
  type: TYPE_NORMAL
- en: The Python module object returned here will be assigned as an instance variable
    to a constructed dialect under the name `.dbapi`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: The [`Dialect.import_dbapi()`](#sqlalchemy.engine.Dialect.import_dbapi
    "sqlalchemy.engine.Dialect.import_dbapi") class method is renamed from the previous
    method `.Dialect.dbapi()`, which would be replaced at dialect instantiation time
    by the DBAPI module itself, thus using the same name in two different ways. If
    a `.Dialect.dbapi()` classmethod is present on a third-party dialect, it will
    be used and a deprecation warning will be emitted.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: set of DBAPI type objects that should be included in automatic cursor.setinputsizes()
    calls.
  prefs: []
  type: TYPE_NORMAL
- en: This is only used if bind_typing is BindTyping.SET_INPUT_SIZES
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: Called during strategized creation of the dialect with a connection.
  prefs: []
  type: TYPE_NORMAL
- en: Allows dialects to configure options based on server version info or other properties.
  prefs: []
  type: TYPE_NORMAL
- en: The connection passed here is a SQLAlchemy Connection object, with full capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: The initialize() method of the base dialect should be called via super().
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: as of SQLAlchemy 1.4, this method is called **before** any [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") hooks are called.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: Indicates the dialect supports comment DDL that’s inline with the definition
    of a Table or Column. If False, this implies that ALTER must be used to set table
    and column comments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: dialect / driver / database supports some means of providing INSERT…RETURNING
    support when dialect.do_executemany() is used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: dialect / driver / database supports some means of providing INSERT…RETURNING
    support when dialect.do_executemany() is used along with the [`Insert.returning.sort_by_parameter_order`](dml.html#sqlalchemy.sql.expression.Insert.returning.params.sort_by_parameter_order
    "sqlalchemy.sql.expression.Insert.returning") parameter being set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: if the dialect supports RETURNING with INSERT
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: Options indicating the database supports a form of bulk INSERT where the autoincrement
    integer primary key can be reliably used as an ordering for INSERTed rows.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Correlating RETURNING rows to parameter sets](connections.html#engine-insertmanyvalues-returning-order)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: Alternate to insertmanyvalues_page_size, will additionally limit page size based
    on number of parameters total in the statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: Number of rows to render into an individual INSERT..VALUES() statement for `ExecuteStyle.INSERTMANYVALUES`
    executions.
  prefs: []
  type: TYPE_NORMAL
- en: The default dialect defaults this to 1000.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.insertmanyvalues_page_size`](connections.html#sqlalchemy.engine.Connection.execution_options.params.insertmanyvalues_page_size
    "sqlalchemy.engine.Connection.execution_options") - execution option available
    on [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection"),
    statements'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: Whether or not this dialect is intended for asyncio use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: Return True if the given DB-API error indicates an invalid connection
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: optional user-defined max length for SQL labels
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: set up the provision.py module for this dialect.
  prefs: []
  type: TYPE_NORMAL
- en: For dialects that include a provision.py module that sets up provisioning followers,
    this method should initiate that process.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical implementation would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: 'The default method assumes a module named `provision.py` inside the owning
    package of the current dialect, based on the `__module__` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.3.14.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: same as .dbapi, but is never None; will raise an error if no DBAPI was set up.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: The maximum length of identifier names.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: identifying name for the dialect from a DBAPI-neutral point of view (i.e. ‘sqlite’)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: convert the given name to lowercase if it is detected as case insensitive.
  prefs: []
  type: TYPE_NORMAL
- en: This method is only used if the dialect defines requires_name_normalize=True.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: return a callable which sets up a newly created DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: The callable should accept a single argument “conn” which is the DBAPI connection
    itself. The inner callable has no return value.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: This is used to set dialect-wide per-connection options such as isolation modes,
    Unicode modes, etc.
  prefs: []
  type: TYPE_NORMAL
- en: The “do_on_connect” callable is invoked by using the [`PoolEvents.connect()`](events.html#sqlalchemy.events.PoolEvents.connect
    "sqlalchemy.events.PoolEvents.connect") event hook, then unwrapping the DBAPI
    connection and passing it into the callable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4: the on_connect hook is no longer called twice for the
    first connection of a dialect. The on_connect hook is still called before the
    [`Dialect.initialize()`](#sqlalchemy.engine.Dialect.initialize "sqlalchemy.engine.Dialect.initialize")
    method however.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 1.4.3: the on_connect hook is invoked from a new method
    on_connect_url that passes the URL that was used to create the connect args. Dialects
    can implement on_connect_url instead of on_connect if they need the URL object
    that was used for the connection in order to get additional context.'
  prefs: []
  type: TYPE_NORMAL
- en: If None is returned, no event listener is generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a callable that accepts a single DBAPI connection as an argument, or None.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Dialect.connect()`](#sqlalchemy.engine.Dialect.connect "sqlalchemy.engine.Dialect.connect")
    - allows the DBAPI `connect()` sequence itself to be controlled.'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url "sqlalchemy.engine.Dialect.on_connect_url")
    - supersedes [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")
    to also receive the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object in context.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: return a callable which sets up a newly created DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: This method is a new hook that supersedes the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") method when implemented by a dialect.
    When not implemented by a dialect, it invokes the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") method directly to maintain compatibility
    with existing dialects. There is no deprecation for [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") expected.
  prefs: []
  type: TYPE_NORMAL
- en: The callable should accept a single argument “conn” which is the DBAPI connection
    itself. The inner callable has no return value.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: This is used to set dialect-wide per-connection options such as isolation modes,
    Unicode modes, etc.
  prefs: []
  type: TYPE_NORMAL
- en: This method differs from [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") in that it is passed the [`URL`](engines.html#sqlalchemy.engine.URL
    "sqlalchemy.engine.URL") object that’s relevant to the connect args. Normally
    the only way to get this is from the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") hook is to look on the [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") itself, however this URL object may have been replaced
    by plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The default implementation of [`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url
    "sqlalchemy.engine.Dialect.on_connect_url") is to invoke the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") method. Therefore if a dialect implements
    this method, the [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect") method **will not be called** unless the
    overriding dialect calls it directly from here.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4.3: added [`Dialect.on_connect_url()`](#sqlalchemy.engine.Dialect.on_connect_url
    "sqlalchemy.engine.Dialect.on_connect_url") which normally calls into [`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect
    "sqlalchemy.engine.Dialect.on_connect").'
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**url** – a [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    object representing the [`URL`](engines.html#sqlalchemy.engine.URL "sqlalchemy.engine.URL")
    that was passed to the [`Dialect.create_connect_args()`](#sqlalchemy.engine.Dialect.create_connect_args
    "sqlalchemy.engine.Dialect.create_connect_args") method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns:'
  prefs: []
  type: TYPE_NORMAL
- en: a callable that accepts a single DBAPI connection as an argument, or None.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Dialect.on_connect()`](#sqlalchemy.engine.Dialect.on_connect "sqlalchemy.engine.Dialect.on_connect")'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: the paramstyle to be used (some DB-APIs support multiple paramstyles).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: True if the paramstyle for this Dialect is positional.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: True if ‘implicit’ primary key functions must be executed separately in order
    to get their value, if RETURNING is not used.
  prefs: []
  type: TYPE_NORMAL
- en: This is currently oriented towards PostgreSQL when the `implicit_returning=False`
    parameter is used on a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: a [`IdentifierPreparer`](#sqlalchemy.sql.compiler.IdentifierPreparer "sqlalchemy.sql.compiler.IdentifierPreparer")
    class used to quote identifiers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: Sequence of string names indicating keyword arguments that can be established
    on a [`Table`](metadata.html#sqlalchemy.schema.Table "sqlalchemy.schema.Table")
    object which will be passed as “reflection options” when using [`Table.autoload_with`](metadata.html#sqlalchemy.schema.Table.params.autoload_with
    "sqlalchemy.schema.Table").
  prefs: []
  type: TYPE_NORMAL
- en: Current example is “oracle_resolve_synonyms” in the Oracle dialect.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: Given a DBAPI connection, revert its isolation to the default.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this is a dialect-level method which is used as part of the implementation
    of the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    isolation level facilities; these APIs should be preferred for most typical use
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - view default level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") isolation level'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: indicates if Python bytes() objects are returned natively by the driver for
    SQL “binary” datatypes.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.11.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: If True, indicates if the [`Sequence.optional`](defaults.html#sqlalchemy.schema.Sequence.params.optional
    "sqlalchemy.schema.Sequence") parameter on the [`Sequence`](defaults.html#sqlalchemy.schema.Sequence
    "sqlalchemy.schema.Sequence") construct should signal to not generate a CREATE
    SEQUENCE. Applies only to dialects that support sequences. Currently used only
    to allow PostgreSQL SERIAL to be used on a column that specifies Sequence() for
    usage on other backends.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: deprecated; indicates if the dialect should attempt to use server side cursors
    by default
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: a tuple containing a version number for the DB backend in use.
  prefs: []
  type: TYPE_NORMAL
- en: This value is only available for supporting dialects, and is typically populated
    during the initial connection to the database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: Establish execution options for a given connection.
  prefs: []
  type: TYPE_NORMAL
- en: This is implemented by [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect") in order to implement the [`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") execution option. Dialects can
    intercept various execution options which may need to modify state on a particular
    DBAPI connection.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: Establish execution options for a given engine.
  prefs: []
  type: TYPE_NORMAL
- en: This is implemented by [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect
    "sqlalchemy.engine.default.DefaultDialect") to establish event hooks for new [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") instances created by the given [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") which will then invoke the [`Dialect.set_connection_execution_options()`](#sqlalchemy.engine.Dialect.set_connection_execution_options
    "sqlalchemy.engine.Dialect.set_connection_execution_options") method for that
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: Given a DBAPI connection, set its isolation level.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this is a dialect-level method which is used as part of the implementation
    of the [`Connection`](connections.html#sqlalchemy.engine.Connection "sqlalchemy.engine.Connection")
    and [`Engine`](connections.html#sqlalchemy.engine.Engine "sqlalchemy.engine.Engine")
    isolation level facilities; these APIs should be preferred for most typical use
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: If the dialect also implements the [`Dialect.get_isolation_level_values()`](#sqlalchemy.engine.Dialect.get_isolation_level_values
    "sqlalchemy.engine.Dialect.get_isolation_level_values") method, then the given
    level is guaranteed to be one of the string names within that sequence, and the
    method will not need to anticipate a lookup failure.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.get_isolation_level()`](connections.html#sqlalchemy.engine.Connection.get_isolation_level
    "sqlalchemy.engine.Connection.get_isolation_level") - view current level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.default_isolation_level`](connections.html#sqlalchemy.engine.Connection.default_isolation_level
    "sqlalchemy.engine.Connection.default_isolation_level") - view default level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`Connection.execution_options.isolation_level`](connections.html#sqlalchemy.engine.Connection.execution_options.params.isolation_level
    "sqlalchemy.engine.Connection.execution_options") - set per [`Connection`](connections.html#sqlalchemy.engine.Connection
    "sqlalchemy.engine.Connection") isolation level'
  prefs: []
  type: TYPE_NORMAL
- en: '[`create_engine.isolation_level`](engines.html#sqlalchemy.create_engine.params.isolation_level
    "sqlalchemy.create_engine") - set per [`Engine`](connections.html#sqlalchemy.engine.Engine
    "sqlalchemy.engine.Engine") isolation level'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: a [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled") class
    used to compile SQL statements
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: '`True` if the database supports `ALTER TABLE` - used only for generating foreign
    key constraints in certain circumstances'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: Indicates the dialect supports comment DDL on tables and columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: Indicates if the dialect supports comment DDL on constraints.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: dialect supports INSERT…(col) VALUES (DEFAULT) syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Most databases support this in some way, e.g. SQLite supports it using `VALUES
    (NULL)`. MS SQL Server supports the syntax also however is the only included dialect
    where we have this disabled, as MSSQL does not support the field for the IDENTITY
    column, which is usually where we like to make use of the feature.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: dialect supports INSERT… DEFAULT VALUES syntax
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: dialect supports INSERT () VALUES (), i.e. a plain INSERT with no columns in
    it.
  prefs: []
  type: TYPE_NORMAL
- en: This is not usually supported; an “empty” insert is typically suited using either
    “INSERT..DEFAULT VALUES” or “INSERT … (col) VALUES (DEFAULT)”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: target database supports IDENTITY
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: Target database supports INSERT…VALUES with multiple value sets, i.e. INSERT
    INTO table (cols) VALUES (…), (…), (…), …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: Indicates if the dialect supports a native boolean construct. This will prevent
    [`Boolean`](type_basics.html#sqlalchemy.types.Boolean "sqlalchemy.types.Boolean")
    from generating a CHECK constraint when that type is used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: indicates if Decimal objects are handled and returned for precision numeric
    types, or if floats are returned
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: Indicates if the dialect supports a native ENUM construct. This will prevent
    [`Enum`](type_basics.html#sqlalchemy.types.Enum "sqlalchemy.types.Enum") from
    generating a CHECK constraint when that type is used in “native” mode.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: indicates if Python UUID() objects are handled natively by the driver for SQL
    UUID datatypes.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: Indicate whether the dialect properly implements rowcount for `UPDATE` and `DELETE`
    statements when executed via executemany.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: Indicate whether the dialect properly implements rowcount for `UPDATE` and `DELETE`
    statements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: Indicates if the dialect supports CREATE SEQUENCE or similar.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: indicates if the dialect supports server side cursors
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: target database supports ORDER BY <labelname>, where <labelname> refers to a
    label in the columns clause of the SELECT
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: indicates if this dialect supports caching.
  prefs: []
  type: TYPE_NORMAL
- en: All dialects that are compatible with statement caching should set this flag
    to True directly on each dialect class and subclass that supports it. SQLAlchemy
    tests that this flag is locally present on each dialect subclass before it will
    use statement caching. This is to provide safety for legacy or new dialects that
    are not yet fully tested to be compliant with SQL statement caching.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.5.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Caching for Third Party Dialects](connections.html#engine-thirdparty-caching)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: target database supports tuple IN, i.e. (x, y) IN ((q, p), (r, z))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: legacy; this is a TypeCompiler class at the class level, a TypeCompiler instance
    at the instance level.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to type_compiler_instance instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: a [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled") class
    used to compile SQL type objects
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: instance of a [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.engine.Compiled")
    class used to compile SQL type objects
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: Transform a generic type to a dialect-specific type.
  prefs: []
  type: TYPE_NORMAL
- en: Dialect classes will usually use the `adapt_type()` function in the types module
    to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: The returned result is cached *per dialect class* so can contain no dialect-instance
    state.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: dialect supports UPDATE..RETURNING with executemany.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: if the dialect supports RETURNING with UPDATE
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: if the dialect supports RETURNING with UPDATE..FROM
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: if True, indicates “insertmanyvalues” functionality should be used to allow
    for `insert_executemany_returning` behavior, if possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'In practice, setting this to True means:'
  prefs: []
  type: TYPE_NORMAL
- en: if `supports_multivalues_insert`, `insert_returning` and `use_insertmanyvalues`
    are all True, the SQL compiler will produce an INSERT that will be interpreted
    by the [`DefaultDialect`](#sqlalchemy.engine.default.DefaultDialect "sqlalchemy.engine.default.DefaultDialect")
    as an `ExecuteStyle.INSERTMANYVALUES` execution that allows for INSERT of many
    rows with RETURNING by rewriting a single-row INSERT statement to have multiple
    VALUES clauses, also executing the statement multiple times for a series of batches
    when large numbers of rows are given.
  prefs: []
  type: TYPE_NORMAL
- en: The parameter is False for the default dialect, and is set to True for SQLAlchemy
    internal dialects SQLite, MySQL/MariaDB, PostgreSQL, SQL Server. It remains at
    False for Oracle, which provides native “executemany with RETURNING” support and
    also does not support `supports_multivalues_insert`. For MySQL/MariaDB, those
    MySQL dialects that don’t support RETURNING will not report `insert_executemany_returning`
    as True.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: if True, and use_insertmanyvalues is also True, INSERT statements that don’t
    include RETURNING will also use “insertmanyvalues”.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[“Insert Many Values” Behavior for INSERT statements](connections.html#engine-insertmanyvalues)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[compiled](#sqlalchemy.engine.default.DefaultExecutionContext.compiled), [connection](#sqlalchemy.engine.default.DefaultExecutionContext.connection),
    [create_cursor()](#sqlalchemy.engine.default.DefaultExecutionContext.create_cursor),
    [current_parameters](#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters),
    [cursor](#sqlalchemy.engine.default.DefaultExecutionContext.cursor), [dialect](#sqlalchemy.engine.default.DefaultExecutionContext.dialect),
    [engine](#sqlalchemy.engine.default.DefaultExecutionContext.engine), [execute_style](#sqlalchemy.engine.default.DefaultExecutionContext.execute_style),
    [executemany](#sqlalchemy.engine.default.DefaultExecutionContext.executemany),
    [execution_options](#sqlalchemy.engine.default.DefaultExecutionContext.execution_options),
    [fetchall_for_returning()](#sqlalchemy.engine.default.DefaultExecutionContext.fetchall_for_returning),
    [get_current_parameters()](#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters),
    [get_lastrowid()](#sqlalchemy.engine.default.DefaultExecutionContext.get_lastrowid),
    [get_out_parameter_values()](#sqlalchemy.engine.default.DefaultExecutionContext.get_out_parameter_values),
    [get_result_processor()](#sqlalchemy.engine.default.DefaultExecutionContext.get_result_processor),
    [handle_dbapi_exception()](#sqlalchemy.engine.default.DefaultExecutionContext.handle_dbapi_exception),
    [invoked_statement](#sqlalchemy.engine.default.DefaultExecutionContext.invoked_statement),
    [isinsert](#sqlalchemy.engine.default.DefaultExecutionContext.isinsert), [isupdate](#sqlalchemy.engine.default.DefaultExecutionContext.isupdate),
    [lastrow_has_defaults()](#sqlalchemy.engine.default.DefaultExecutionContext.lastrow_has_defaults),
    [no_parameters](#sqlalchemy.engine.default.DefaultExecutionContext.no_parameters),
    [parameters](#sqlalchemy.engine.default.DefaultExecutionContext.parameters), [post_exec()](#sqlalchemy.engine.default.DefaultExecutionContext.post_exec),
    [postfetch_cols](#sqlalchemy.engine.default.DefaultExecutionContext.postfetch_cols),
    [pre_exec()](#sqlalchemy.engine.default.DefaultExecutionContext.pre_exec), [prefetch_cols](#sqlalchemy.engine.default.DefaultExecutionContext.prefetch_cols),
    [root_connection](#sqlalchemy.engine.default.DefaultExecutionContext.root_connection)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.engine.default.DefaultExecutionContext`](#sqlalchemy.engine.default.DefaultExecutionContext
    "sqlalchemy.engine.default.DefaultExecutionContext") ([`sqlalchemy.engine.interfaces.ExecutionContext`](#sqlalchemy.engine.ExecutionContext
    "sqlalchemy.engine.interfaces.ExecutionContext"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: if passed to constructor, sqlalchemy.engine.base.Compiled object being executed
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: Connection object which can be freely used by default value generators to execute
    SQL. This Connection should reference the same underlying connection/transactional
    resources of root_connection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: Return a new cursor generated from this ExecutionContext’s connection.
  prefs: []
  type: TYPE_NORMAL
- en: Some dialects may wish to change the behavior of connection.cursor(), such as
    postgresql which may return a PG “server side” cursor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: A dictionary of parameters applied to the current row.
  prefs: []
  type: TYPE_NORMAL
- en: This attribute is only available in the context of a user-defined default generation
    function, e.g. as described at [Context-Sensitive Default Functions](defaults.html#context-default-functions).
    It consists of a dictionary which includes entries for each column/value pair
    that is to be part of the INSERT or UPDATE statement. The keys of the dictionary
    will be the key value of each [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which is usually synonymous with the name.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the [`DefaultExecutionContext.current_parameters`](#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters") attribute
    does not accommodate for the “multi-values” feature of the [`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") method. The [`DefaultExecutionContext.get_current_parameters()`](#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters") method
    should be preferred.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DefaultExecutionContext.get_current_parameters()`](#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Context-Sensitive Default Functions](defaults.html#context-default-functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: DB-API cursor procured from the connection
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: dialect which created this ExecutionContext.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: engine which the Connection is associated with
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: the style of DBAPI cursor method that will be used to execute a statement.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: True if the context has a list of more than one parameter set.
  prefs: []
  type: TYPE_NORMAL
- en: Historically this attribute links to whether `cursor.execute()` or `cursor.executemany()`
    will be used. It also can now mean that “insertmanyvalues” may be used which indicates
    one or more `cursor.execute()` calls.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: Execution options associated with the current statement execution
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: For a RETURNING result, deliver cursor.fetchall() from the DBAPI cursor.
  prefs: []
  type: TYPE_NORMAL
- en: This is a dialect-specific hook for dialects that have special considerations
    when calling upon the rows delivered for a “RETURNING” statement. Default implementation
    is `cursor.fetchall()`.
  prefs: []
  type: TYPE_NORMAL
- en: This hook is currently used only by the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature. Dialects that don’t set `use_insertmanyvalues=True` don’t need to consider
    this hook.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: Return a dictionary of parameters applied to the current row.
  prefs: []
  type: TYPE_NORMAL
- en: This method can only be used in the context of a user-defined default generation
    function, e.g. as described at [Context-Sensitive Default Functions](defaults.html#context-default-functions).
    When invoked, a dictionary is returned which includes entries for each column/value
    pair that is part of the INSERT or UPDATE statement. The keys of the dictionary
    will be the key value of each [`Column`](metadata.html#sqlalchemy.schema.Column
    "sqlalchemy.schema.Column"), which is usually synonymous with the name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**isolate_multiinsert_groups=True** – indicates that multi-valued INSERT constructs
    created using [`Insert.values()`](dml.html#sqlalchemy.sql.expression.Insert.values
    "sqlalchemy.sql.expression.Insert.values") should be handled by returning only
    the subset of parameters that are local to the current column default invocation.
    When `False`, the raw parameters of the statement are returned including the naming
    convention used in the case of multi-valued INSERT.'
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.2: added [`DefaultExecutionContext.get_current_parameters()`](#sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.get_current_parameters") which
    provides more functionality over the existing [`DefaultExecutionContext.current_parameters`](#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters") attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[`DefaultExecutionContext.current_parameters`](#sqlalchemy.engine.default.DefaultExecutionContext.current_parameters
    "sqlalchemy.engine.default.DefaultExecutionContext.current_parameters")'
  prefs: []
  type: TYPE_NORMAL
- en: '[Context-Sensitive Default Functions](defaults.html#context-default-functions)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: return self.cursor.lastrowid, or equivalent, after an INSERT.
  prefs: []
  type: TYPE_NORMAL
- en: This may involve calling special cursor functions, issuing a new SELECT on the
    cursor (or a new one), or returning a stored value that was calculated within
    post_exec().
  prefs: []
  type: TYPE_NORMAL
- en: This function will only be called for dialects which support “implicit” primary
    key generation, keep preexecute_autoincrement_sequences set to False, and when
    no explicit id value was bound to the statement.
  prefs: []
  type: TYPE_NORMAL
- en: The function is called once for an INSERT statement that would need to return
    the last inserted primary key for those dialects that make use of the lastrowid
    concept. In these cases, it is called directly after [`ExecutionContext.post_exec()`](#sqlalchemy.engine.ExecutionContext.post_exec
    "sqlalchemy.engine.ExecutionContext.post_exec").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: Return a sequence of OUT parameter values from a cursor.
  prefs: []
  type: TYPE_NORMAL
- en: For dialects that support OUT parameters, this method will be called when there
    is a [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler")
    object which has the [`SQLCompiler.has_out_parameters`](#sqlalchemy.sql.compiler.SQLCompiler.has_out_parameters
    "sqlalchemy.sql.compiler.SQLCompiler.has_out_parameters") flag set. This flag
    in turn will be set to True if the statement itself has [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects that have the `.isoutparam`
    flag set which are consumed by the `SQLCompiler.visit_bindparam()` method. If
    the dialect compiler produces [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects with `.isoutparam` set which
    are not handled by `SQLCompiler.visit_bindparam()`, it should set this flag explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: The list of names that were rendered for each bound parameter is passed to the
    method. The method should then return a sequence of values corresponding to the
    list of parameter objects. Unlike in previous SQLAlchemy versions, the values
    can be the **raw values** from the DBAPI; the execution context will apply the
    appropriate type handler based on what’s present in self.compiled.binds and update
    the values. The processed dictionary will then be made available via the `.out_parameters`
    collection on the result object. Note that SQLAlchemy 1.4 has multiple kinds of
    result object as part of the 2.0 transition.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: - added [`ExecutionContext.get_out_parameter_values()`](#sqlalchemy.engine.ExecutionContext.get_out_parameter_values
    "sqlalchemy.engine.ExecutionContext.get_out_parameter_values"), which is invoked
    automatically by the [`DefaultExecutionContext`](#sqlalchemy.engine.default.DefaultExecutionContext
    "sqlalchemy.engine.default.DefaultExecutionContext") when there are [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects with the `.isoutparam` flag
    set. This replaces the practice of setting out parameters within the now-removed
    `get_result_proxy()` method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: Return a ‘result processor’ for a given type as present in cursor.description.
  prefs: []
  type: TYPE_NORMAL
- en: This has a default implementation that dialects can override for context-sensitive
    result type handling.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: Receive a DBAPI exception which occurred upon execute, result fetch, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: The Executable statement object that was given in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: This should be structurally equivalent to compiled.statement, but not necessarily
    the same object as in a caching scenario the compiled form will have been extracted
    from the cache.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: True if the statement is an INSERT.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: True if the statement is an UPDATE.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: Return True if the last INSERT or UPDATE row contained inlined or database-side
    defaults.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: True if the execution style does not use parameters
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: bind parameters passed to the execute() or exec_driver_sql() methods.
  prefs: []
  type: TYPE_NORMAL
- en: These are always stored as a list of parameter entries. A single-element list
    corresponds to a `cursor.execute()` call and a multiple-element list corresponds
    to `cursor.executemany()`, except in the case of `ExecuteStyle.INSERTMANYVALUES`
    which will use `cursor.execute()` one or more times.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: Called after the execution of a compiled statement.
  prefs: []
  type: TYPE_NORMAL
- en: If a compiled statement was passed to this ExecutionContext, the last_insert_ids,
    last_inserted_params, etc. datamembers should be available after this method completes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: a list of Column objects for which a server-side default or inline SQL expression
    value was fired off. Applies to inserts and updates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: Called before an execution of a compiled statement.
  prefs: []
  type: TYPE_NORMAL
- en: If a compiled statement was passed to this ExecutionContext, the statement and
    parameters datamembers must be initialized after this statement is complete.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: a list of Column objects for which a client-side default was fired off. Applies
    to inserts and updates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: Connection object which is the source of this ExecutionContext.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[compiled](#sqlalchemy.engine.ExecutionContext.compiled), [connection](#sqlalchemy.engine.ExecutionContext.connection),
    [create_cursor()](#sqlalchemy.engine.ExecutionContext.create_cursor), [cursor](#sqlalchemy.engine.ExecutionContext.cursor),
    [dialect](#sqlalchemy.engine.ExecutionContext.dialect), [engine](#sqlalchemy.engine.ExecutionContext.engine),
    [execute_style](#sqlalchemy.engine.ExecutionContext.execute_style), [executemany](#sqlalchemy.engine.ExecutionContext.executemany),
    [execution_options](#sqlalchemy.engine.ExecutionContext.execution_options), [fetchall_for_returning()](#sqlalchemy.engine.ExecutionContext.fetchall_for_returning),
    [fire_sequence()](#sqlalchemy.engine.ExecutionContext.fire_sequence), [get_out_parameter_values()](#sqlalchemy.engine.ExecutionContext.get_out_parameter_values),
    [get_rowcount()](#sqlalchemy.engine.ExecutionContext.get_rowcount), [handle_dbapi_exception()](#sqlalchemy.engine.ExecutionContext.handle_dbapi_exception),
    [invoked_statement](#sqlalchemy.engine.ExecutionContext.invoked_statement), [isinsert](#sqlalchemy.engine.ExecutionContext.isinsert),
    [isupdate](#sqlalchemy.engine.ExecutionContext.isupdate), [lastrow_has_defaults()](#sqlalchemy.engine.ExecutionContext.lastrow_has_defaults),
    [no_parameters](#sqlalchemy.engine.ExecutionContext.no_parameters), [parameters](#sqlalchemy.engine.ExecutionContext.parameters),
    [post_exec()](#sqlalchemy.engine.ExecutionContext.post_exec), [postfetch_cols](#sqlalchemy.engine.ExecutionContext.postfetch_cols),
    [pre_exec()](#sqlalchemy.engine.ExecutionContext.pre_exec), [prefetch_cols](#sqlalchemy.engine.ExecutionContext.prefetch_cols),
    [root_connection](#sqlalchemy.engine.ExecutionContext.root_connection), [statement](#sqlalchemy.engine.ExecutionContext.statement)'
  prefs: []
  type: TYPE_NORMAL
- en: A messenger object for a Dialect that corresponds to a single execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: if passed to constructor, sqlalchemy.engine.base.Compiled object being executed
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: Connection object which can be freely used by default value generators to execute
    SQL. This Connection should reference the same underlying connection/transactional
    resources of root_connection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: Return a new cursor generated from this ExecutionContext’s connection.
  prefs: []
  type: TYPE_NORMAL
- en: Some dialects may wish to change the behavior of connection.cursor(), such as
    postgresql which may return a PG “server side” cursor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: DB-API cursor procured from the connection
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: dialect which created this ExecutionContext.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: engine which the Connection is associated with
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: the style of DBAPI cursor method that will be used to execute a statement.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: True if the context has a list of more than one parameter set.
  prefs: []
  type: TYPE_NORMAL
- en: Historically this attribute links to whether `cursor.execute()` or `cursor.executemany()`
    will be used. It also can now mean that “insertmanyvalues” may be used which indicates
    one or more `cursor.execute()` calls.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: Execution options associated with the current statement execution
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: For a RETURNING result, deliver cursor.fetchall() from the DBAPI cursor.
  prefs: []
  type: TYPE_NORMAL
- en: This is a dialect-specific hook for dialects that have special considerations
    when calling upon the rows delivered for a “RETURNING” statement. Default implementation
    is `cursor.fetchall()`.
  prefs: []
  type: TYPE_NORMAL
- en: This hook is currently used only by the [insertmanyvalues](../glossary.html#term-insertmanyvalues)
    feature. Dialects that don’t set `use_insertmanyvalues=True` don’t need to consider
    this hook.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.10.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: given a [`Sequence`](defaults.html#sqlalchemy.schema.Sequence "sqlalchemy.schema.Sequence"),
    invoke it and return the next int value
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: Return a sequence of OUT parameter values from a cursor.
  prefs: []
  type: TYPE_NORMAL
- en: For dialects that support OUT parameters, this method will be called when there
    is a [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler")
    object which has the [`SQLCompiler.has_out_parameters`](#sqlalchemy.sql.compiler.SQLCompiler.has_out_parameters
    "sqlalchemy.sql.compiler.SQLCompiler.has_out_parameters") flag set. This flag
    in turn will be set to True if the statement itself has [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects that have the `.isoutparam`
    flag set which are consumed by the `SQLCompiler.visit_bindparam()` method. If
    the dialect compiler produces [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects with `.isoutparam` set which
    are not handled by `SQLCompiler.visit_bindparam()`, it should set this flag explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: The list of names that were rendered for each bound parameter is passed to the
    method. The method should then return a sequence of values corresponding to the
    list of parameter objects. Unlike in previous SQLAlchemy versions, the values
    can be the **raw values** from the DBAPI; the execution context will apply the
    appropriate type handler based on what’s present in self.compiled.binds and update
    the values. The processed dictionary will then be made available via the `.out_parameters`
    collection on the result object. Note that SQLAlchemy 1.4 has multiple kinds of
    result object as part of the 2.0 transition.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.4: - added [`ExecutionContext.get_out_parameter_values()`](#sqlalchemy.engine.ExecutionContext.get_out_parameter_values
    "sqlalchemy.engine.ExecutionContext.get_out_parameter_values"), which is invoked
    automatically by the [`DefaultExecutionContext`](#sqlalchemy.engine.default.DefaultExecutionContext
    "sqlalchemy.engine.default.DefaultExecutionContext") when there are [`BindParameter`](sqlelement.html#sqlalchemy.sql.expression.BindParameter
    "sqlalchemy.sql.expression.BindParameter") objects with the `.isoutparam` flag
    set. This replaces the practice of setting out parameters within the now-removed
    `get_result_proxy()` method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: Return the DBAPI `cursor.rowcount` value, or in some cases an interpreted value.
  prefs: []
  type: TYPE_NORMAL
- en: See [`CursorResult.rowcount`](connections.html#sqlalchemy.engine.CursorResult.rowcount
    "sqlalchemy.engine.CursorResult.rowcount") for details on this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: Receive a DBAPI exception which occurred upon execute, result fetch, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: The Executable statement object that was given in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: This should be structurally equivalent to compiled.statement, but not necessarily
    the same object as in a caching scenario the compiled form will have been extracted
    from the cache.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: True if the statement is an INSERT.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: True if the statement is an UPDATE.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: Return True if the last INSERT or UPDATE row contained inlined or database-side
    defaults.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: True if the execution style does not use parameters
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: bind parameters passed to the execute() or exec_driver_sql() methods.
  prefs: []
  type: TYPE_NORMAL
- en: These are always stored as a list of parameter entries. A single-element list
    corresponds to a `cursor.execute()` call and a multiple-element list corresponds
    to `cursor.executemany()`, except in the case of `ExecuteStyle.INSERTMANYVALUES`
    which will use `cursor.execute()` one or more times.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: Called after the execution of a compiled statement.
  prefs: []
  type: TYPE_NORMAL
- en: If a compiled statement was passed to this ExecutionContext, the last_insert_ids,
    last_inserted_params, etc. datamembers should be available after this method completes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: a list of Column objects for which a server-side default or inline SQL expression
    value was fired off. Applies to inserts and updates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: Called before an execution of a compiled statement.
  prefs: []
  type: TYPE_NORMAL
- en: If a compiled statement was passed to this ExecutionContext, the statement and
    parameters datamembers must be initialized after this statement is complete.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: a list of Column objects for which a client-side default was fired off. Applies
    to inserts and updates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: Connection object which is the source of this ExecutionContext.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: string version of the statement to be executed. Is either passed to the constructor,
    or must be created from the sql.Compiled object by the time pre_exec() has completed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: represents state to use when producing “expanded” and “post compile” bound parameters
    for a statement.
  prefs: []
  type: TYPE_NORMAL
- en: “expanded” parameters are parameters that are generated at statement execution
    time to suit a number of parameters passed, the most prominent example being the
    individual elements inside of an IN expression.
  prefs: []
  type: TYPE_NORMAL
- en: “post compile” parameters are parameters where the SQL literal value will be
    rendered into the SQL statement at execution time, rather than being passed as
    separate parameters to the driver.
  prefs: []
  type: TYPE_NORMAL
- en: To create an [`ExpandedState`](#sqlalchemy.sql.compiler.ExpandedState "sqlalchemy.sql.compiler.ExpandedState")
    instance, use the [`SQLCompiler.construct_expanded_state()`](#sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state
    "sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state") method on any
    [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler")
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[additional_parameters](#sqlalchemy.sql.compiler.ExpandedState.additional_parameters),
    [parameter_expansion](#sqlalchemy.sql.compiler.ExpandedState.parameter_expansion),
    [parameters](#sqlalchemy.sql.compiler.ExpandedState.parameters), [positional_parameters](#sqlalchemy.sql.compiler.ExpandedState.positional_parameters),
    [positiontup](#sqlalchemy.sql.compiler.ExpandedState.positiontup), [processors](#sqlalchemy.sql.compiler.ExpandedState.processors),
    [statement](#sqlalchemy.sql.compiler.ExpandedState.statement)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.compiler.ExpandedState`](#sqlalchemy.sql.compiler.ExpandedState
    "sqlalchemy.sql.compiler.ExpandedState") (`builtins.tuple`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: synonym for [`ExpandedState.parameters`](#sqlalchemy.sql.compiler.ExpandedState.parameters
    "sqlalchemy.sql.compiler.ExpandedState.parameters").
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: Mapping representing the intermediary link from original parameter name to list
    of “expanded” parameter names, for those parameters that were expanded.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: Parameter dictionary with parameters fully expanded.
  prefs: []
  type: TYPE_NORMAL
- en: For a statement that uses named parameters, this dictionary will map exactly
    to the names in the statement. For a statement that uses positional parameters,
    the [`ExpandedState.positional_parameters`](#sqlalchemy.sql.compiler.ExpandedState.positional_parameters
    "sqlalchemy.sql.compiler.ExpandedState.positional_parameters") will yield a tuple
    with the positional parameter set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: Tuple of positional parameters, for statements that were compiled using a positional
    paramstyle.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: Sequence of string names indicating the order of positional parameters
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: mapping of bound value processors
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: String SQL statement with parameters fully expanded
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[ensure_kwarg](#sqlalchemy.sql.compiler.GenericTypeCompiler.ensure_kwarg)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.compiler.GenericTypeCompiler`](#sqlalchemy.sql.compiler.GenericTypeCompiler
    "sqlalchemy.sql.compiler.GenericTypeCompiler") (`sqlalchemy.sql.compiler.TypeCompiler`)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: '*inherited from the* `TypeCompiler.ensure_kwarg` *attribute of* `TypeCompiler`'
  prefs: []
  type: TYPE_NORMAL
- en: a regular expression that indicates method names for which the method should
    accept `**kw` arguments.
  prefs: []
  type: TYPE_NORMAL
- en: The class will scan for methods matching the name template and decorate them
    if necessary to ensure `**kw` parameters are accepted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.sql.compiler.IdentifierPreparer.__init__), [format_column()](#sqlalchemy.sql.compiler.IdentifierPreparer.format_column),
    [format_label_name()](#sqlalchemy.sql.compiler.IdentifierPreparer.format_label_name),
    [format_schema()](#sqlalchemy.sql.compiler.IdentifierPreparer.format_schema),
    [format_table()](#sqlalchemy.sql.compiler.IdentifierPreparer.format_table), [format_table_seq()](#sqlalchemy.sql.compiler.IdentifierPreparer.format_table_seq),
    [quote()](#sqlalchemy.sql.compiler.IdentifierPreparer.quote), [quote_identifier()](#sqlalchemy.sql.compiler.IdentifierPreparer.quote_identifier),
    [quote_schema()](#sqlalchemy.sql.compiler.IdentifierPreparer.quote_schema), [schema_for_object](#sqlalchemy.sql.compiler.IdentifierPreparer.schema_for_object),
    [unformat_identifiers()](#sqlalchemy.sql.compiler.IdentifierPreparer.unformat_identifiers),
    [validate_sql_phrase()](#sqlalchemy.sql.compiler.IdentifierPreparer.validate_sql_phrase)'
  prefs: []
  type: TYPE_NORMAL
- en: Handle quoting and case-folding of identifiers based on options.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new `IdentifierPreparer` object.
  prefs: []
  type: TYPE_NORMAL
- en: initial_quote
  prefs: []
  type: TYPE_NORMAL
- en: Character that begins a delimited identifier.
  prefs: []
  type: TYPE_NORMAL
- en: final_quote
  prefs: []
  type: TYPE_NORMAL
- en: Character that ends a delimited identifier. Defaults to initial_quote.
  prefs: []
  type: TYPE_NORMAL
- en: omit_schema
  prefs: []
  type: TYPE_NORMAL
- en: Prevent prepending schema name. Useful for databases that do not support schemae.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: Prepare a quoted column name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: Prepare a quoted column name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: Prepare a quoted schema name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: Prepare a quoted table and schema name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: Format table name and schema as a tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: Conditionally quote an identifier.
  prefs: []
  type: TYPE_NORMAL
- en: The identifier is quoted if it is a reserved word, contains quote-necessary
    characters, or is an instance of [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") which includes `quote` set to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses can override this to provide database-dependent quoting behavior
    for identifier names.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ident` – string identifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`force` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unused
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Deprecated since version 0.9: The [`IdentifierPreparer.quote.force`](#sqlalchemy.sql.compiler.IdentifierPreparer.quote.params.force
    "sqlalchemy.sql.compiler.IdentifierPreparer.quote") parameter is deprecated and
    will be removed in a future release. This flag has no effect on the behavior of
    the [`IdentifierPreparer.quote()`](#sqlalchemy.sql.compiler.IdentifierPreparer.quote
    "sqlalchemy.sql.compiler.IdentifierPreparer.quote") method; please refer to [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: Quote an identifier.
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses should override this to provide database-dependent quoting behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: Conditionally quote a schema name.
  prefs: []
  type: TYPE_NORMAL
- en: The name is quoted if it is a reserved word, contains quote-necessary characters,
    or is an instance of [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name") which includes `quote` set to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: Subclasses can override this to provide database-dependent quoting behavior
    for schema names.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`schema` – string schema name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`force` –'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: unused
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Deprecated since version 0.9: The [`IdentifierPreparer.quote_schema.force`](#sqlalchemy.sql.compiler.IdentifierPreparer.quote_schema.params.force
    "sqlalchemy.sql.compiler.IdentifierPreparer.quote_schema") parameter is deprecated
    and will be removed in a future release. This flag has no effect on the behavior
    of the [`IdentifierPreparer.quote()`](#sqlalchemy.sql.compiler.IdentifierPreparer.quote
    "sqlalchemy.sql.compiler.IdentifierPreparer.quote") method; please refer to [`quoted_name`](sqlelement.html#sqlalchemy.sql.expression.quoted_name
    "sqlalchemy.sql.expression.quoted_name").'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: Return the .schema attribute for an object.
  prefs: []
  type: TYPE_NORMAL
- en: For the default IdentifierPreparer, the schema for an object is always the value
    of the “.schema” attribute. if the preparer is replaced with one that has a non-empty
    schema_translate_map, the value of the “.schema” attribute is rendered a symbol
    that will be converted to a real schema name from the mapping post-compile.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: Unpack ‘schema.table.column’-like strings into components.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: keyword sequence filter.
  prefs: []
  type: TYPE_NORMAL
- en: a filter for elements that are intended to represent keyword sequences, such
    as “INITIALLY”, “INITIALLY DEFERRED”, etc. no special characters should be present.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: Default implementation of [`Compiled`](#sqlalchemy.engine.Compiled "sqlalchemy.sql.compiler.Compiled").
  prefs: []
  type: TYPE_NORMAL
- en: Compiles [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") objects into SQL strings.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[__init__()](#sqlalchemy.sql.compiler.SQLCompiler.__init__), [ansi_bind_rules](#sqlalchemy.sql.compiler.SQLCompiler.ansi_bind_rules),
    [bind_names](#sqlalchemy.sql.compiler.SQLCompiler.bind_names), [bindname_escape_characters](#sqlalchemy.sql.compiler.SQLCompiler.bindname_escape_characters),
    [binds](#sqlalchemy.sql.compiler.SQLCompiler.binds), [bindtemplate](#sqlalchemy.sql.compiler.SQLCompiler.bindtemplate),
    [compilation_bindtemplate](#sqlalchemy.sql.compiler.SQLCompiler.compilation_bindtemplate),
    [construct_expanded_state()](#sqlalchemy.sql.compiler.SQLCompiler.construct_expanded_state),
    [construct_params()](#sqlalchemy.sql.compiler.SQLCompiler.construct_params), [current_executable](#sqlalchemy.sql.compiler.SQLCompiler.current_executable),
    [default_from()](#sqlalchemy.sql.compiler.SQLCompiler.default_from), [delete_extra_from_clause()](#sqlalchemy.sql.compiler.SQLCompiler.delete_extra_from_clause),
    [effective_returning](#sqlalchemy.sql.compiler.SQLCompiler.effective_returning),
    [escaped_bind_names](#sqlalchemy.sql.compiler.SQLCompiler.escaped_bind_names),
    [get_select_precolumns()](#sqlalchemy.sql.compiler.SQLCompiler.get_select_precolumns),
    [group_by_clause()](#sqlalchemy.sql.compiler.SQLCompiler.group_by_clause), [has_out_parameters](#sqlalchemy.sql.compiler.SQLCompiler.has_out_parameters),
    [implicit_returning](#sqlalchemy.sql.compiler.SQLCompiler.implicit_returning),
    [insert_prefetch](#sqlalchemy.sql.compiler.SQLCompiler.insert_prefetch), [insert_single_values_expr](#sqlalchemy.sql.compiler.SQLCompiler.insert_single_values_expr),
    [isupdate](#sqlalchemy.sql.compiler.SQLCompiler.isupdate), [literal_execute_params](#sqlalchemy.sql.compiler.SQLCompiler.literal_execute_params),
    [order_by_clause()](#sqlalchemy.sql.compiler.SQLCompiler.order_by_clause), [params](#sqlalchemy.sql.compiler.SQLCompiler.params),
    [positiontup](#sqlalchemy.sql.compiler.SQLCompiler.positiontup), [post_compile_params](#sqlalchemy.sql.compiler.SQLCompiler.post_compile_params),
    [postfetch](#sqlalchemy.sql.compiler.SQLCompiler.postfetch), [postfetch_lastrowid](#sqlalchemy.sql.compiler.SQLCompiler.postfetch_lastrowid),
    [render_literal_value()](#sqlalchemy.sql.compiler.SQLCompiler.render_literal_value),
    [render_table_with_column_in_update_from](#sqlalchemy.sql.compiler.SQLCompiler.render_table_with_column_in_update_from),
    [returning](#sqlalchemy.sql.compiler.SQLCompiler.returning), [returning_precedes_values](#sqlalchemy.sql.compiler.SQLCompiler.returning_precedes_values),
    [sql_compiler](#sqlalchemy.sql.compiler.SQLCompiler.sql_compiler), [stack](#sqlalchemy.sql.compiler.SQLCompiler.stack),
    [translate_select_structure](#sqlalchemy.sql.compiler.SQLCompiler.translate_select_structure),
    [update_from_clause()](#sqlalchemy.sql.compiler.SQLCompiler.update_from_clause),
    [update_limit_clause()](#sqlalchemy.sql.compiler.SQLCompiler.update_limit_clause),
    [update_prefetch](#sqlalchemy.sql.compiler.SQLCompiler.update_prefetch), [update_tables_clause()](#sqlalchemy.sql.compiler.SQLCompiler.update_tables_clause),
    [visit_override_binds()](#sqlalchemy.sql.compiler.SQLCompiler.visit_override_binds)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.compiler.SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler") ([`sqlalchemy.sql.compiler.Compiled`](#sqlalchemy.engine.Compiled
    "sqlalchemy.sql.compiler.Compiled"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: Construct a new [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler")
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialect` – [`Dialect`](#sqlalchemy.engine.Dialect "sqlalchemy.engine.Dialect")
    to be used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`statement` – [`ClauseElement`](foundation.html#sqlalchemy.sql.expression.ClauseElement
    "sqlalchemy.sql.expression.ClauseElement") to be compiled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column_keys` – a list of column names to be compiled into an INSERT or UPDATE
    statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for_executemany` – whether INSERT / UPDATE statements should expect that they
    are to be invoked in an “executemany” style, which may impact how the statement
    will be expected to return the values of defaults and autoincrement / sequences
    and similar. Depending on the backend and driver in use, support for retrieving
    these values may be disabled which means SQL expressions may be rendered inline,
    RETURNING may not be rendered, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` – additional keyword arguments to be consumed by the superclass.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: SQL 92 doesn’t allow bind parameters to be used in the columns clause of a SELECT,
    nor does it allow ambiguous expressions like “? = ?”. A compiler subclass can
    set this flag to False if the target driver/DB enforces this
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: a dictionary of BindParameter instances to “compiled” names that are actually
    present in the generated SQL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: A mapping (e.g. dict or similar) containing a lookup of characters keyed to
    replacement characters which will be applied to all ‘bind names’ used in SQL statements
    as a form of ‘escaping’; the given characters are replaced entirely with the ‘replacement’
    character when rendered in the SQL statement, and a similar translation is performed
    on the incoming names used in parameter dictionaries passed to methods like [`Connection.execute()`](connections.html#sqlalchemy.engine.Connection.execute
    "sqlalchemy.engine.Connection.execute").
  prefs: []
  type: TYPE_NORMAL
- en: This allows bound parameter names used in [`bindparam()`](sqlelement.html#sqlalchemy.sql.expression.bindparam
    "sqlalchemy.sql.expression.bindparam") and other constructs to have any arbitrary
    characters present without any concern for characters that aren’t allowed at all
    on the target database.
  prefs: []
  type: TYPE_NORMAL
- en: Third party dialects can establish their own dictionary here to replace the
    default mapping, which will ensure that the particular characters in the mapping
    will never appear in a bound parameter name.
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary is evaluated at **class creation time**, so cannot be modified
    at runtime; it must be present on the class when the class is first declared.
  prefs: []
  type: TYPE_NORMAL
- en: Note that for dialects that have additional bound parameter rules such as additional
    restrictions on leading characters, the `SQLCompiler.bindparam_string()` method
    may need to be augmented. See the cx_Oracle compiler for an example of this.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.0rc1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: a dictionary of bind parameter keys to BindParameter instances.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: template to render bound parameters based on paramstyle.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: template used by compiler to render parameters before positional paramstyle
    application
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: Return a new [`ExpandedState`](#sqlalchemy.sql.compiler.ExpandedState "sqlalchemy.sql.compiler.ExpandedState")
    for a given parameter set.
  prefs: []
  type: TYPE_NORMAL
- en: For queries that use “expanding” or other late-rendered parameters, this method
    will provide for both the finalized SQL string as well as the parameters that
    would be used for a particular parameter set.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.0rc1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: return a dictionary of bind parameter keys and values
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: Return the current ‘executable’ that is being compiled.
  prefs: []
  type: TYPE_NORMAL
- en: This is currently the [`Select`](selectable.html#sqlalchemy.sql.expression.Select
    "sqlalchemy.sql.expression.Select"), [`Insert`](dml.html#sqlalchemy.sql.expression.Insert
    "sqlalchemy.sql.expression.Insert"), [`Update`](dml.html#sqlalchemy.sql.expression.Update
    "sqlalchemy.sql.expression.Update"), [`Delete`](dml.html#sqlalchemy.sql.expression.Delete
    "sqlalchemy.sql.expression.Delete"), [`CompoundSelect`](selectable.html#sqlalchemy.sql.expression.CompoundSelect
    "sqlalchemy.sql.expression.CompoundSelect") object that is being compiled. Specifically
    it’s assigned to the `self.stack` list of elements.
  prefs: []
  type: TYPE_NORMAL
- en: When a statement like the above is being compiled, it normally is also assigned
    to the `.statement` attribute of the `Compiler` object. However, all SQL constructs
    are ultimately nestable, and this attribute should never be consulted by a `visit_`
    method, as it is not guaranteed to be assigned nor guaranteed to correspond to
    the current statement being compiled.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 1.3.21: For compatibility with previous versions, use the following
    recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: For versions 1.4 and above, ensure only .current_executable is used; the format
    of “self.stack” may change.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: Called when a SELECT statement has no froms, and no FROM clause is to be appended.
  prefs: []
  type: TYPE_NORMAL
- en: Gives Oracle a chance to tack on a `FROM DUAL` to the string output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: Provide a hook to override the generation of an DELETE..FROM clause.
  prefs: []
  type: TYPE_NORMAL
- en: This can be used to implement DELETE..USING for example.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL and MSSQL override this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: The effective “returning” columns for INSERT, UPDATE or DELETE.
  prefs: []
  type: TYPE_NORMAL
- en: This is either the so-called “implicit returning” columns which are calculated
    by the compiler on the fly, or those present based on what’s present in `self.statement._returning`
    (expanded into individual columns using the `._all_selected_columns` attribute)
    i.e. those set explicitly using the [`UpdateBase.returning()`](dml.html#sqlalchemy.sql.expression.UpdateBase.returning
    "sqlalchemy.sql.expression.UpdateBase.returning") method.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: Late escaping of bound parameter names that has to be converted to the original
    name when looking in the parameter dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: Called when building a `SELECT` statement, position is just before column list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: allow dialects to customize how GROUP BY is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: if True, there are bindparam() objects that have the isoutparam flag set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: list of “implicit” returning columns for a toplevel INSERT or UPDATE statement,
    used to receive newly generated values of columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'New in version 2.0: `implicit_returning` replaces the previous `returning`
    collection, which was not a generalized RETURNING collection and instead was in
    fact specific to the “implicit returning” feature.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: list of columns for which default values should be evaluated before an INSERT
    takes place
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: When an INSERT is compiled with a single set of parameters inside a VALUES expression,
    the string is assigned here, where it can be used for insert batching schemes
    to rewrite the VALUES expression.
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.3.8.
  prefs: []
  type: TYPE_NORMAL
- en: 'Changed in version 2.0: This collection is no longer used by SQLAlchemy’s built-in
    dialects, in favor of the currently internal `_insertmanyvalues` collection that
    is used only by [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler").'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: class-level defaults which can be set at the instance level to define if this
    Compiled instance represents INSERT/UPDATE/DELETE
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: bindparameter objects that are rendered as literal values at statement execution
    time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: allow dialects to customize how ORDER BY is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: Return the bind param dictionary embedded into this compiled object, for those
    values that are present.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string) - includes a usage
    example for debugging use cases.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: for a compiled construct that uses a positional paramstyle, will be a sequence
    of strings, indicating the names of bound parameters in order.
  prefs: []
  type: TYPE_NORMAL
- en: This is used in order to render bound parameters in their correct order, and
    is combined with the `Compiled.params` dictionary to render parameters.
  prefs: []
  type: TYPE_NORMAL
- en: This sequence always contains the unescaped name of the parameters.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string) - includes a usage
    example for debugging use cases.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: bindparameter objects that are rendered as bound parameter placeholders at statement
    execution time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: list of columns that can be post-fetched after INSERT or UPDATE to receive server-updated
    values
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: if True, and this in insert, use cursor.lastrowid to populate result.inserted_primary_key.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: Render the value of a bind parameter as a quoted literal.
  prefs: []
  type: TYPE_NORMAL
- en: This is used for statement sections that do not accept bind parameters on the
    target driver/database.
  prefs: []
  type: TYPE_NORMAL
- en: This should be implemented by subclasses using the quoting services of the DBAPI.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: set to True classwide to indicate the SET clause in a multi-table UPDATE statement
    should qualify columns with the table name (i.e. MySQL only)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: backwards compatibility; returns the effective_returning collection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: set to True classwide to generate RETURNING clauses before the VALUES or WHERE
    clause (i.e. MSSQL)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: major statements such as SELECT, INSERT, UPDATE, DELETE are tracked in this
    stack using an entry format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE470]'
  prefs: []
  type: TYPE_PRE
- en: if not `None`, should be a callable which accepts `(select_stmt, **kw)` and
    returns a select object. this is used for structural changes mostly to accommodate
    for LIMIT/OFFSET schemes
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE471]'
  prefs: []
  type: TYPE_PRE
- en: Provide a hook to override the generation of an UPDATE..FROM clause.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL and MSSQL override this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: Provide a hook for MySQL to add LIMIT to the UPDATE
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: list of columns for which onupdate default values should be evaluated before
    an UPDATE takes place
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE474]'
  prefs: []
  type: TYPE_PRE
- en: Provide a hook to override the initial table clause in an UPDATE statement.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL overrides this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE475]'
  prefs: []
  type: TYPE_PRE
- en: SQL compile the nested element of an _OverrideBinds with bindparams swapped
    out.
  prefs: []
  type: TYPE_NORMAL
- en: The _OverrideBinds is not normally expected to be compiled; it is meant to be
    used when an already cached statement is to be used, the compilation was already
    performed, and only the bound params should be swapped in at execution time.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there are test cases that exericise this object, and additionally
    the ORM subquery loader is known to feed in expressions which include this construct
    into new queries (discovered in #11173), so it has to do the right thing at compile
    time as well.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE476]'
  prefs: []
  type: TYPE_PRE
- en: A [`SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler "sqlalchemy.sql.compiler.SQLCompiler")
    subclass which allows a small selection of non-standard SQL features to render
    into a string value.
  prefs: []
  type: TYPE_NORMAL
- en: The [`StrSQLCompiler`](#sqlalchemy.sql.compiler.StrSQLCompiler "sqlalchemy.sql.compiler.StrSQLCompiler")
    is invoked whenever a Core expression element is directly stringified without
    calling upon the [`ClauseElement.compile()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compile
    "sqlalchemy.sql.expression.ClauseElement.compile") method. It can render a limited
    set of non-standard SQL constructs to assist in basic stringification, however
    for more substantial custom or dialect-specific SQL constructs, it will be necessary
    to make use of [`ClauseElement.compile()`](foundation.html#sqlalchemy.sql.expression.ClauseElement.compile
    "sqlalchemy.sql.expression.ClauseElement.compile") directly.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[How do I render SQL expressions as strings, possibly with bound parameters
    inlined?](../faq/sqlexpressions.html#faq-sql-expression-string)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[delete_extra_from_clause()](#sqlalchemy.sql.compiler.StrSQLCompiler.delete_extra_from_clause),
    [update_from_clause()](#sqlalchemy.sql.compiler.StrSQLCompiler.update_from_clause)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class signature**'
  prefs: []
  type: TYPE_NORMAL
- en: class [`sqlalchemy.sql.compiler.StrSQLCompiler`](#sqlalchemy.sql.compiler.StrSQLCompiler
    "sqlalchemy.sql.compiler.StrSQLCompiler") ([`sqlalchemy.sql.compiler.SQLCompiler`](#sqlalchemy.sql.compiler.SQLCompiler
    "sqlalchemy.sql.compiler.SQLCompiler"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE477]'
  prefs: []
  type: TYPE_PRE
- en: Provide a hook to override the generation of an DELETE..FROM clause.
  prefs: []
  type: TYPE_NORMAL
- en: This can be used to implement DELETE..USING for example.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL and MSSQL override this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE478]'
  prefs: []
  type: TYPE_PRE
- en: Provide a hook to override the generation of an UPDATE..FROM clause.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL and MSSQL override this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE479]'
  prefs: []
  type: TYPE_PRE
- en: Interface of an adapted connection object to support the DBAPI protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Used by asyncio dialects to provide a sync-style pep-249 facade on top of the
    asyncio connection/cursor API provided by the driver.
  prefs: []
  type: TYPE_NORMAL
- en: '**Members**'
  prefs: []
  type: TYPE_NORMAL
- en: '[driver_connection](#sqlalchemy.engine.AdaptedConnection.driver_connection),
    [run_async()](#sqlalchemy.engine.AdaptedConnection.run_async)'
  prefs: []
  type: TYPE_NORMAL
- en: New in version 1.4.24.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE480]'
  prefs: []
  type: TYPE_PRE
- en: The connection object as returned by the driver after a connect.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE481]'
  prefs: []
  type: TYPE_PRE
- en: Run the awaitable returned by the given function, which is passed the raw asyncio
    driver connection.
  prefs: []
  type: TYPE_NORMAL
- en: This is used to invoke awaitable-only methods on the driver connection within
    the context of a “synchronous” method, like a connection pool event handler.
  prefs: []
  type: TYPE_NORMAL
- en: 'E.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE482]'
  prefs: []
  type: TYPE_PRE
- en: New in version 1.4.30.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs: []
  type: TYPE_NORMAL
- en: '[Using awaitable-only driver methods in connection pool and other events](../orm/extensions/asyncio.html#asyncio-events-run-async)'
  prefs: []
  type: TYPE_NORMAL
